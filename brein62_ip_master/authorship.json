[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"checkstyle {","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-09-11"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":43,"brein62":16}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"T | 1 | do something","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"D | 0 | something | 2023-09-12T06:30","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"E | 0 | do something | 2023-09-12T12:06:53 | 2023-09-13T13:30","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"D | 1 | more | 2023-09-12T12:50","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"T | 1 | studsy","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"T | 1 | something","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"T | 0 | s","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":7}},{"path":"data/duke1.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"T | 0 | b","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"T | 0 | c","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"D | 0 | d | 12pm","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"brein62":3}},{"path":"data/dukeGui.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"T | 1 | CS2103T tutorial preparation","lastModifiedDate":"2023-09-20"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"E | 1 | CS2103T tutorial | 2023-09-21T14:00 | 2023-09-21T15:00","lastModifiedDate":"2023-09-20"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"D | 0 | IS2238 group assignment | 2023-09-24T23:59:59","lastModifiedDate":"2023-09-20"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"T | 1 | cs2100 homework","lastModifiedDate":"2023-09-20"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"D | 0 | CS2103T iP | 2023-09-22T16:00","lastModifiedDate":"2023-09-20"}],"authorContributionMap":{"brein62":5}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"# Bob the Chatbot | User Guide","lastModifiedDate":"2023-09-21"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"## Overview","lastModifiedDate":"2023-09-21"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"Bob is a chatbot that helps people track different types of tasks by typing simple commands.","lastModifiedDate":"2023-09-21"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"Just like Bob the Builder, Bob the Chatbot aims to help people fix their issues and frustrations with task tracking","lastModifiedDate":"2023-09-21"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"through a simple, easy-to-use interface.","lastModifiedDate":"2023-09-21"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"## Quick Start","lastModifiedDate":"2023-09-21"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"1. Ensure you have Java 11 or above installed on your computer.","lastModifiedDate":"2023-09-21"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"2. Download the latest `duke.jar` from [here](https://github.com/brein62/ip/releases).","lastModifiedDate":"2023-09-21"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"3. Copy the file to the folder you want to use as the home folder for your personal Bob chatbot.","lastModifiedDate":"2023-09-21"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"4. Open a command terminal, `cd` into the folder you put the jar file in, and use the `java -jar duke.jar` command to","lastModifiedDate":"2023-09-21"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"   run the application. A GUI similar to the below should appear in a few seconds.","lastModifiedDate":"2023-09-21"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"   ![A screenshot of Bob the Chatbot](Ui.png)","lastModifiedDate":"2023-09-21"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"5. Type the command in the command box and press Enter to execute it. e.g. typing `list` and pressing Enter will list ","lastModifiedDate":"2023-09-21"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"   out all the current tasks.","lastModifiedDate":"2023-09-21"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"Here are some example commands you can try:","lastModifiedDate":"2023-09-21"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"   - `todo something`: Bob will add a `todo` task called `something` into the to-do list.","lastModifiedDate":"2023-09-21"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"   - `list`: Bob will reply with a list of all tasks in the to-do list.","lastModifiedDate":"2023-09-21"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"   - `mark 3`: Bob will mark the 3rd task shown in the list as completed.","lastModifiedDate":"2023-09-21"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"   - `unmark 3`: Bob will mark the 3rd task shown in the list as not completed yet.","lastModifiedDate":"2023-09-21"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"   - `delete 2`: Bob will delete the 2nd task shown in the list.","lastModifiedDate":"2023-09-21"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"   - `bye`: Exits the app *Bob the Chatbot*.","lastModifiedDate":"2023-09-21"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"6. Once you have closed the app for the first time, there will be a file that stores all tasks in","lastModifiedDate":"2023-09-21"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"   `[JAR file location]/data/dukeGui.txt`. Refer to the [saving the data](#saving-the-data) section for more information","lastModifiedDate":"2023-09-21"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"   about the save file.","lastModifiedDate":"2023-09-21"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"7. Refer to the [Features](#features) section below for more detailed information on each command.","lastModifiedDate":"2023-09-21"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":29,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"- Any parameters marked between square brackets are variables that you can specify.","lastModifiedDate":"2023-09-21"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"- Any feature with an asterisk (\\*) at the end do not contain any parameters. Any extra command parameters will be","lastModifiedDate":"2023-09-21"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"  ignored by Bob.","lastModifiedDate":"2023-09-21"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"- However, features **without** an asterisk (\\*) at the end contain a specific number of parameters and any extra","lastModifiedDate":"2023-09-21"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"  command parameters may not be interpreted correctly by Bob. Bob will not run the command and will reply with an error ","lastModifiedDate":"2023-09-21"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"  message to remind you.","lastModifiedDate":"2023-09-21"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"### List all tasks: `list` \\*","lastModifiedDate":"2023-09-21"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"Shows a list of all tasks in the to-do list.","lastModifiedDate":"2023-09-21"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"**Format:** `list`","lastModifiedDate":"2023-09-21"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"### Add a todo task: `todo`","lastModifiedDate":"2023-09-21"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"Adds a todo task into the list with a specified description `[desc]`.","lastModifiedDate":"2023-09-21"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"**Format:** `todo [desc]`","lastModifiedDate":"2023-09-21"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"**Example:** `todo Study for exam`","lastModifiedDate":"2023-09-21"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"### Add a deadline task: `deadline`","lastModifiedDate":"2023-09-21"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"Adds a deadline task into the list with a specified description `[desc]` and deadline date `[date]`. Take note that the","lastModifiedDate":"2023-09-21"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"`[date]` must be in the format `YYYY-MM-DDThh:mm:SS`, as in the example below.","lastModifiedDate":"2023-09-21"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"**Format:** `deadline [desc] /by [date]`","lastModifiedDate":"2023-09-21"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"**Example:** `deadline Study for exam /by 2023-11-25T16:00:00`","lastModifiedDate":"2023-09-21"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":61,"author":{"gitId":"brein62"},"content":"### Add an event task: `event`","lastModifiedDate":"2023-09-21"},{"lineNumber":62,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":63,"author":{"gitId":"brein62"},"content":"Adds an event task into the list with a specified description `[desc]`, start date `[start]`, and end date `[end]`. Take","lastModifiedDate":"2023-09-21"},{"lineNumber":64,"author":{"gitId":"brein62"},"content":"note that dates `[start]` and `[end]` must be in the format `YYYY-MM-DDThh:mm:SS`, as in the example below. Ensure that","lastModifiedDate":"2023-09-21"},{"lineNumber":65,"author":{"gitId":"brein62"},"content":"the `[start]` date is **before** the `[end]` date, else the event will not be accepted.","lastModifiedDate":"2023-09-21"},{"lineNumber":66,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":67,"author":{"gitId":"brein62"},"content":"**Format:** `event [desc] /from [start] /to [end]`","lastModifiedDate":"2023-09-21"},{"lineNumber":68,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":69,"author":{"gitId":"brein62"},"content":"**Example:** `event Exam /from 2023-11-25T16:00:00 /to 2023-11-25T17:30:00`","lastModifiedDate":"2023-09-21"},{"lineNumber":70,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":71,"author":{"gitId":"brein62"},"content":"#### Usage Notes","lastModifiedDate":"2023-09-21"},{"lineNumber":72,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":73,"author":{"gitId":"brein62"},"content":"If the `/from` and `/to` parameters are swapped, Bob will understand and parse the command correctly. However, ensure ","lastModifiedDate":"2023-09-21"},{"lineNumber":74,"author":{"gitId":"brein62"},"content":"that there is **exactly one** `/from` and `/to` parameter each for Bob to understand (else Bob will complain).","lastModifiedDate":"2023-09-21"},{"lineNumber":75,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":76,"author":{"gitId":"brein62"},"content":"### Mark task as completed: `mark`","lastModifiedDate":"2023-09-21"},{"lineNumber":77,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":78,"author":{"gitId":"brein62"},"content":"Marks a specified task as completed, based on its position/index `[pos]` in the to-do list.","lastModifiedDate":"2023-09-21"},{"lineNumber":79,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":80,"author":{"gitId":"brein62"},"content":"**Format:** `mark [pos]`","lastModifiedDate":"2023-09-21"},{"lineNumber":81,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":82,"author":{"gitId":"brein62"},"content":"**Example:** `mark 3` - marks the 3rd task in the list as completed","lastModifiedDate":"2023-09-21"},{"lineNumber":83,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":84,"author":{"gitId":"brein62"},"content":"#### Usage Notes","lastModifiedDate":"2023-09-21"},{"lineNumber":85,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":86,"author":{"gitId":"brein62"},"content":"- If the task to mark has already been marked as completed, the `mark` command will still keep the task as completed.","lastModifiedDate":"2023-09-21"},{"lineNumber":87,"author":{"gitId":"brein62"},"content":"- `[pos]` must be a valid integer position in the list. Bob will complain if the value is not a valid integer or out of","lastModifiedDate":"2023-09-21"},{"lineNumber":88,"author":{"gitId":"brein62"},"content":"  range.","lastModifiedDate":"2023-09-21"},{"lineNumber":89,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":90,"author":{"gitId":"brein62"},"content":"### Mark task as not completed: `unmark`","lastModifiedDate":"2023-09-21"},{"lineNumber":91,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":92,"author":{"gitId":"brein62"},"content":"Marks a specified task as not completed yet, based on its position/index `[pos]` in the to-do list.","lastModifiedDate":"2023-09-21"},{"lineNumber":93,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":94,"author":{"gitId":"brein62"},"content":"**Format:** `unmark [pos]`","lastModifiedDate":"2023-09-21"},{"lineNumber":95,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":96,"author":{"gitId":"brein62"},"content":"**Example:** `unmark 3` - marks the 3rd task in the list as not completed yet.","lastModifiedDate":"2023-09-21"},{"lineNumber":97,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":98,"author":{"gitId":"brein62"},"content":"#### Usage Notes","lastModifiedDate":"2023-09-21"},{"lineNumber":99,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":100,"author":{"gitId":"brein62"},"content":"- If the task to unmark is not marked as completed, the `unmark` command will still keep the task as not completed.","lastModifiedDate":"2023-09-21"},{"lineNumber":101,"author":{"gitId":"brein62"},"content":"- `[pos]` must be a valid integer position in the list. Bob will complain if the value is not a valid integer or out of","lastModifiedDate":"2023-09-21"},{"lineNumber":102,"author":{"gitId":"brein62"},"content":"  range.","lastModifiedDate":"2023-09-21"},{"lineNumber":103,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":104,"author":{"gitId":"brein62"},"content":"### Find task in the to-do list: `find`","lastModifiedDate":"2023-09-21"},{"lineNumber":105,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":106,"author":{"gitId":"brein62"},"content":"Finds all tasks in the to-do list that contains the specified substring `[msg]` in their description, then lists out the","lastModifiedDate":"2023-09-21"},{"lineNumber":107,"author":{"gitId":"brein62"},"content":"tasks that fit the specified criteria.","lastModifiedDate":"2023-09-21"},{"lineNumber":108,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":109,"author":{"gitId":"brein62"},"content":"**Format:** `find [msg]`","lastModifiedDate":"2023-09-21"},{"lineNumber":110,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":111,"author":{"gitId":"brein62"},"content":"**Example:** `find something` - lists out all tasks which has descriptions that contain the term `something`.","lastModifiedDate":"2023-09-21"},{"lineNumber":112,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":113,"author":{"gitId":"brein62"},"content":"### Clone task in the to-do list: `clone`","lastModifiedDate":"2023-09-21"},{"lineNumber":114,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":115,"author":{"gitId":"brein62"},"content":"Clones the task in the to-do list as specified by the index/position in the to-do list `[pos]` and adds the new task to ","lastModifiedDate":"2023-09-21"},{"lineNumber":116,"author":{"gitId":"brein62"},"content":"the end of the to-do list (just like when new tasks are added).","lastModifiedDate":"2023-09-21"},{"lineNumber":117,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":118,"author":{"gitId":"brein62"},"content":"**Format:** `clone [pos]`","lastModifiedDate":"2023-09-21"},{"lineNumber":119,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":120,"author":{"gitId":"brein62"},"content":"**Example:** `clone 3` - Clones the 3rd task in the to-do list and adds a new task with the same details as the 3rd","lastModifiedDate":"2023-09-21"},{"lineNumber":121,"author":{"gitId":"brein62"},"content":"task.","lastModifiedDate":"2023-09-21"},{"lineNumber":122,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":123,"author":{"gitId":"brein62"},"content":"#### Usage Notes","lastModifiedDate":"2023-09-21"},{"lineNumber":124,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":125,"author":{"gitId":"brein62"},"content":"- `[pos]` must be a valid integer position in the list. Bob will complain if the value is not a valid integer or out of","lastModifiedDate":"2023-09-21"},{"lineNumber":126,"author":{"gitId":"brein62"},"content":"  range.","lastModifiedDate":"2023-09-21"},{"lineNumber":127,"author":{"gitId":"brein62"},"content":"- The new task created will have the **same** description, start/deadline date and end date; but will always be marked","lastModifiedDate":"2023-09-21"},{"lineNumber":128,"author":{"gitId":"brein62"},"content":"  as not completed yet. If you want to mark the new cloned task as completed, you can use the `mark` command.","lastModifiedDate":"2023-09-21"},{"lineNumber":129,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":130,"author":{"gitId":"brein62"},"content":"### Update a task: `update`","lastModifiedDate":"2023-09-21"},{"lineNumber":131,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":132,"author":{"gitId":"brein62"},"content":"Updates a specific task\u0027s details based on the position in the to-do list `[pos]`. You can change a single detail (e.g.","lastModifiedDate":"2023-09-21"},{"lineNumber":133,"author":{"gitId":"brein62"},"content":"description/start date/deadline/end date) with a single `update` command.","lastModifiedDate":"2023-09-21"},{"lineNumber":134,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":135,"author":{"gitId":"brein62"},"content":"**Parameters:**","lastModifiedDate":"2023-09-21"},{"lineNumber":136,"author":{"gitId":"brein62"},"content":"- `[pos]`: The position of the task to update in the to-do list.","lastModifiedDate":"2023-09-21"},{"lineNumber":137,"author":{"gitId":"brein62"},"content":"- `[command]`: The command to perform in the to-do list.","lastModifiedDate":"2023-09-21"},{"lineNumber":138,"author":{"gitId":"brein62"},"content":"  - **Description** *(supported by todo, deadline, event)*: `message`, `msg`, `description`","lastModifiedDate":"2023-09-21"},{"lineNumber":139,"author":{"gitId":"brein62"},"content":"  - **Deadline/Start date** *(supported by deadline, event)*: `date1`, `from`, `/from`, `deadline`, `/deadline`, `by`, ","lastModifiedDate":"2023-09-21"},{"lineNumber":140,"author":{"gitId":"brein62"},"content":"    `/by`","lastModifiedDate":"2023-09-21"},{"lineNumber":141,"author":{"gitId":"brein62"},"content":"  - **End date** *(supported by event)*: `date2`, `to`, `/to`","lastModifiedDate":"2023-09-21"},{"lineNumber":142,"author":{"gitId":"brein62"},"content":"  - **Notes:**","lastModifiedDate":"2023-09-21"},{"lineNumber":143,"author":{"gitId":"brein62"},"content":"    - If the `[command]` is not one of these above commands, Bob will be angry and produce an error.","lastModifiedDate":"2023-09-21"},{"lineNumber":144,"author":{"gitId":"brein62"},"content":"    - If the `[command]` does not match the type of task, Bob will warn you that the task does not support the specific","lastModifiedDate":"2023-09-21"},{"lineNumber":145,"author":{"gitId":"brein62"},"content":"      update command. For example, `update 3 deadline 2023-10-10T12:34:56` will cause Bob to reply with an error message","lastModifiedDate":"2023-09-21"},{"lineNumber":146,"author":{"gitId":"brein62"},"content":"      if the 3rd task is a todo.","lastModifiedDate":"2023-09-21"},{"lineNumber":147,"author":{"gitId":"brein62"},"content":"- `[newdata]`: The new, updated data. For dates, it must be expressed in `YYYY-MM-DDThh:mm:SS` format.","lastModifiedDate":"2023-09-21"},{"lineNumber":148,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":149,"author":{"gitId":"brein62"},"content":"**Format:** `update [pos] [command] [newdata]`","lastModifiedDate":"2023-09-21"},{"lineNumber":150,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":151,"author":{"gitId":"brein62"},"content":"**Examples:**","lastModifiedDate":"2023-09-21"},{"lineNumber":152,"author":{"gitId":"brein62"},"content":"- `update 2 message Hello world` changes the message of the 2nd task in the list to `Hello world`","lastModifiedDate":"2023-09-21"},{"lineNumber":153,"author":{"gitId":"brein62"},"content":"- `update 3 deadline 2023-10-10T12:34:56` changes the deadline of the 3rd task in the list to `2023-10-10T12:34:56`.","lastModifiedDate":"2023-09-21"},{"lineNumber":154,"author":{"gitId":"brein62"},"content":"- `update 4 /to 2023-10-10T12:34:56` changes the end date of the 4th task in the list to `2023-10-10T12:34:56`.","lastModifiedDate":"2023-09-21"},{"lineNumber":155,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":156,"author":{"gitId":"brein62"},"content":"### Exit the app: `bye` \\*","lastModifiedDate":"2023-09-21"},{"lineNumber":157,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":158,"author":{"gitId":"brein62"},"content":"Exits the *Bob the Chatbot* app.","lastModifiedDate":"2023-09-21"},{"lineNumber":159,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":160,"author":{"gitId":"brein62"},"content":"You may also quit the app using the *window close button* on the top right (Windows) or top left (Mac) like any other","lastModifiedDate":"2023-09-21"},{"lineNumber":161,"author":{"gitId":"brein62"},"content":"GUI app.","lastModifiedDate":"2023-09-21"},{"lineNumber":162,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":163,"author":{"gitId":"brein62"},"content":"**Format:** `bye`","lastModifiedDate":"2023-09-21"},{"lineNumber":164,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":165,"author":{"gitId":"brein62"},"content":"### Saving the data","lastModifiedDate":"2023-09-21"},{"lineNumber":166,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":167,"author":{"gitId":"brein62"},"content":"Bob the Chatbot will automatically save the tasks into a file `[JAR file location]/data/dukeGui.txt`. You don\u0027t have to","lastModifiedDate":"2023-09-21"},{"lineNumber":168,"author":{"gitId":"brein62"},"content":"reload the tasks every time the app runs as a result.","lastModifiedDate":"2023-09-21"},{"lineNumber":169,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":170,"author":{"gitId":"brein62"},"content":"#### Save format","lastModifiedDate":"2023-09-21"},{"lineNumber":171,"author":{"gitId":"brein62"},"content":"For more advanced users who would like to edit the data file manually, here is the format:","lastModifiedDate":"2023-09-21"},{"lineNumber":172,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":173,"author":{"gitId":"brein62"},"content":"`task type | completed? | description( | start/deadline datetime | end datetime)`.","lastModifiedDate":"2023-09-21"},{"lineNumber":174,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":175,"author":{"gitId":"brein62"},"content":"**Parameters:**","lastModifiedDate":"2023-09-21"},{"lineNumber":176,"author":{"gitId":"brein62"},"content":"- *Task type*: Can be either `T` (todo), `D` (deadline), or `E` (event).","lastModifiedDate":"2023-09-21"},{"lineNumber":177,"author":{"gitId":"brein62"},"content":"- *Completed?*: `1` if task is completed, `0` is task is not completed.","lastModifiedDate":"2023-09-21"},{"lineNumber":178,"author":{"gitId":"brein62"},"content":"- *Description*: The description/message of the task.","lastModifiedDate":"2023-09-21"},{"lineNumber":179,"author":{"gitId":"brein62"},"content":"- *Start/Deadline*: The deadline (deadline tasks) or start date (event tasks) for the task, in `YYYY-MM-DD hh:mm:SS`","lastModifiedDate":"2023-09-21"},{"lineNumber":180,"author":{"gitId":"brein62"},"content":"  format.","lastModifiedDate":"2023-09-21"},{"lineNumber":181,"author":{"gitId":"brein62"},"content":"- *End*: The end date for event tasks, in `YYYY-MM-DD hh:mm:SS` format.","lastModifiedDate":"2023-09-21"},{"lineNumber":182,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":183,"author":{"gitId":"brein62"},"content":"**Examples:**","lastModifiedDate":"2023-09-21"},{"lineNumber":184,"author":{"gitId":"brein62"},"content":"- Todo: `T | 1 | Todo`","lastModifiedDate":"2023-09-21"},{"lineNumber":185,"author":{"gitId":"brein62"},"content":"- Deadline: `D | 0 | Deadline | 2023-10-10T12:34:56`","lastModifiedDate":"2023-09-21"},{"lineNumber":186,"author":{"gitId":"brein62"},"content":"- Event: `E | 0 | Event | 2023-10-10T12:34:56 | 2023-10-10T14:00`","lastModifiedDate":"2023-09-21"},{"lineNumber":187,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":188,"author":{"gitId":"brein62"},"content":"----","lastModifiedDate":"2023-09-21"},{"lineNumber":189,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":190,"author":{"gitId":"brein62"},"content":"## FAQ","lastModifiedDate":"2023-09-21"},{"lineNumber":191,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":192,"author":{"gitId":"brein62"},"content":"**Q:** How do I transfer my tasks to another computer?","lastModifiedDate":"2023-09-21"},{"lineNumber":193,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":194,"author":{"gitId":"brein62"},"content":"**A:** Install the app in the other computer and replace the content of the data file in ","lastModifiedDate":"2023-09-21"},{"lineNumber":195,"author":{"gitId":"brein62"},"content":"`[JAR file location]/data/dukeGui.txt` with the data from your previous data file.","lastModifiedDate":"2023-09-21"},{"lineNumber":196,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":197,"author":{"gitId":"brein62"},"content":"----","lastModifiedDate":"2023-09-21"},{"lineNumber":198,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":199,"author":{"gitId":"brein62"},"content":"## Known issues","lastModifiedDate":"2023-09-21"},{"lineNumber":200,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":201,"author":{"gitId":"brein62"},"content":"1. The app has not been configured to be resized. If you resize the window containing the app, the app may not look as","lastModifiedDate":"2023-09-21"},{"lineNumber":202,"author":{"gitId":"brein62"},"content":"   expected. However, the app will function as normal, just with the components weirdly placed. The chat window will","lastModifiedDate":"2023-09-21"},{"lineNumber":203,"author":{"gitId":"brein62"},"content":"   still be the same size. It is best to use the app in its optimal screen resolution.","lastModifiedDate":"2023-09-21"},{"lineNumber":204,"author":{"gitId":"brein62"},"content":"2. Due to how Java interprets relative paths, make sure you `cd` into the folder containing the `duke.jar` before you ","lastModifiedDate":"2023-09-21"},{"lineNumber":205,"author":{"gitId":"brein62"},"content":"   run the `java -jar duke.jar` command to launch Bob the Chatbot. Otherwise, the data files `/data/dukeGui.txt` will be","lastModifiedDate":"2023-09-21"},{"lineNumber":206,"author":{"gitId":"brein62"},"content":"   saved in the folder you ran the command instead of the intended **JAR file location**. This also ensures that you","lastModifiedDate":"2023-09-21"},{"lineNumber":207,"author":{"gitId":"brein62"},"content":"   will know why Bob suddenly forgets your tasks...","lastModifiedDate":"2023-09-21"},{"lineNumber":208,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":209,"author":{"gitId":"brein62"},"content":"----","lastModifiedDate":"2023-09-21"},{"lineNumber":210,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":211,"author":{"gitId":"brein62"},"content":"## Command Summary","lastModifiedDate":"2023-09-21"},{"lineNumber":212,"author":{"gitId":"brein62"},"content":"1. List - `list`","lastModifiedDate":"2023-09-21"},{"lineNumber":213,"author":{"gitId":"brein62"},"content":"2. Add todo - `todo [desc]` (e.g. `todo Study for exam`)                                                                       ","lastModifiedDate":"2023-09-21"},{"lineNumber":214,"author":{"gitId":"brein62"},"content":"3. Add deadline - `deadline [desc] /by [date]`\u003cbr/\u003e(e.g. `deadline Assignment /by 2023-10-10T23:59:59`)                            ","lastModifiedDate":"2023-09-21"},{"lineNumber":215,"author":{"gitId":"brein62"},"content":"4. Add event - `event [desc] /from [start] /to [end]`\u003cbr/\u003e(e.g. `event Exam /from 2023-10-05T11:00:00 /to 2023-10-05T13:00:00`) ","lastModifiedDate":"2023-09-21"},{"lineNumber":216,"author":{"gitId":"brein62"},"content":"5. Mark - `mark [pos]` (e.g. `mark 3`)                                                                                     ","lastModifiedDate":"2023-09-21"},{"lineNumber":217,"author":{"gitId":"brein62"},"content":"6. Unmark - `unmark [pos]` (e.g. `unmark 4`)                                                                               ","lastModifiedDate":"2023-09-21"},{"lineNumber":218,"author":{"gitId":"brein62"},"content":"7. Find - `find [msg]` (e.g. `find Tutorial`)                                                                             ","lastModifiedDate":"2023-09-21"},{"lineNumber":219,"author":{"gitId":"brein62"},"content":"8. Clone - `clone [pos]` (e.g. `clone 3`)                                                                                  ","lastModifiedDate":"2023-09-21"},{"lineNumber":220,"author":{"gitId":"brein62"},"content":"9. Update - `update [pos] [command] [newdata]`\u003cbr/\u003e(e.g. `update 2 msg Hello world!`)                                        ","lastModifiedDate":"2023-09-21"},{"lineNumber":221,"author":{"gitId":"brein62"},"content":"10. Exit - `bye`                                                                                                            ","lastModifiedDate":"2023-09-21"}],"authorContributionMap":{"brein62":206,"-":15}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import duke.command.Command;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import duke.gui.GuiApplication;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":" * The primary Duke class. Contains the main function to run the Duke chatbot Bob.","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"public class Duke {","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    /** The TaskList to use in the chatbot. */","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"    /** The Storage object handling file read/save. */","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"     * Creates a new Duke chatbot object.","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"     * @param filePath The file path of the file that will contain all tasks within the chatbot.","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"    public Duke(Path filePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"        tasks \u003d storage.load();","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"     * Returns the response to a message by parsing the message through a Parser, then executing the command returned","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"     * by the Parser.","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"     * @param message The message to be parsed and executed.","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"     * @return The text response by the chatbot.","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"     * @throws DukeException When there are errors in the response.","lastModifiedDate":"2023-09-20"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"    public String getResponse(String message) throws DukeException {","lastModifiedDate":"2023-09-20"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"        Command c \u003d Parser.parse(message);","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"        return c.execute(tasks, storage);","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"     * Returns a welcome message for the Duke chatbot.","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"     * @return Welcome message for the chatbot.","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"    public String getWelcomeMessage() {","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"        return \"Hello! I\u0027m Bob the Chatbot!\\nWhat can I do for you?\";","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"     * Returns an exit message for the Duke chatbot.","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"     * @return Exit message for the chatbot.","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"    public String getExitMessage() {","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"        return \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-23"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"        Application.launch(GuiApplication.class, args);","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":62,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"brein62":60,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":" * Represents an exception that happens when an invalid input is entered into the program.","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"     * Creates the DukeException with the given message msg.","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"     * @param msg The exception message for the DukeException.","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"    public DukeException(String msg) {","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"        super(msg);","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"        return \"OOPS! I couldn\u0027t process your message. :(\\n\"","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"                + this.getMessage() + \"\\n\";","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"brein62":21}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import duke.command.CloneCommand;","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import duke.command.Command;","lastModifiedDate":"2023-09-13"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-09-13"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2023-09-13"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-09-13"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-09-13"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2023-09-13"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"import duke.command.UpdateCommand;","lastModifiedDate":"2023-09-13"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"import duke.task.UpdateType;","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":" * Represents a parser to process commands entered into the chatbot and returns the corresponding Command.","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"public class Parser {","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"     * Parses the message to be processed into a MarkCommand, then returns that MarkCommand.","lastModifiedDate":"2023-09-11"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"     * @param message The full message to be parsed.","lastModifiedDate":"2023-09-11"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"     * @return The MarkCommand parsed from the given message if there are no errors.","lastModifiedDate":"2023-09-11"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"     * @throws DukeException If there is an invalid input message causing an error in parsing the MarkCommand.","lastModifiedDate":"2023-09-11"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"    private static MarkCommand parseMarkCommand(String message) throws DukeException {","lastModifiedDate":"2023-09-11"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"        assert message.startsWith(\"mark\") : message;","lastModifiedDate":"2023-09-11"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"        if (message.length() \u003c\u003d 5) {","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"You need to specify the index of the task to mark.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"            return new MarkCommand(Integer.parseInt(message.substring(5)));","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"The index of the task to mark is not a valid integer.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-11"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-11"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"     * Parses the message to be processed into an UnmarkCommand, then returns that UnmarkCommand.","lastModifiedDate":"2023-09-11"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-09-11"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"     * @param message The full message to be parsed.","lastModifiedDate":"2023-09-11"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"     * @return The UnmarkCommand parsed from the given message if there are no errors.","lastModifiedDate":"2023-09-11"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"     * @throws DukeException If there is an invalid input message causing an error in parsing the UnmarkCommand.","lastModifiedDate":"2023-09-11"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-11"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"    private static UnmarkCommand parseUnmarkCommand(String message) throws DukeException {","lastModifiedDate":"2023-09-11"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"        assert message.startsWith(\"unmark\") : message;","lastModifiedDate":"2023-09-11"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"        if (message.length() \u003c\u003d 7) {","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"You need to specify the index of the task to unmark.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"            return new UnmarkCommand(Integer.parseInt(message.substring(7)));","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"The index of the task to unmark is not a valid integer.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-11"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-11"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"     * Parses the message to be processed into a FindCommand, then returns that FindCommand.","lastModifiedDate":"2023-09-11"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-09-11"},{"lineNumber":61,"author":{"gitId":"brein62"},"content":"     * @param message The full message to be parsed.","lastModifiedDate":"2023-09-11"},{"lineNumber":62,"author":{"gitId":"brein62"},"content":"     * @return The FindCommand parsed from the given message if there are no errors.","lastModifiedDate":"2023-09-11"},{"lineNumber":63,"author":{"gitId":"brein62"},"content":"     * @throws DukeException If there is an invalid input message causing an error in parsing the FindCommand.","lastModifiedDate":"2023-09-11"},{"lineNumber":64,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-11"},{"lineNumber":65,"author":{"gitId":"brein62"},"content":"    private static FindCommand parseFindCommand(String message) throws DukeException {","lastModifiedDate":"2023-09-11"},{"lineNumber":66,"author":{"gitId":"brein62"},"content":"        assert message.startsWith(\"find\") : message;","lastModifiedDate":"2023-09-11"},{"lineNumber":67,"author":{"gitId":"brein62"},"content":"        if (message.length() \u003c\u003d 5) {","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"You need to specify the keyword to find the tasks.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"brein62"},"content":"        return new FindCommand(message.substring(5));","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-11"},{"lineNumber":72,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":73,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-11"},{"lineNumber":74,"author":{"gitId":"brein62"},"content":"     * Parses the message to be processed into a DeleteCommand, then returns that DeleteCommand.","lastModifiedDate":"2023-09-11"},{"lineNumber":75,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-09-11"},{"lineNumber":76,"author":{"gitId":"brein62"},"content":"     * @param message The full message to be parsed.","lastModifiedDate":"2023-09-11"},{"lineNumber":77,"author":{"gitId":"brein62"},"content":"     * @return The DeleteCommand parsed from the given message if there are no errors.","lastModifiedDate":"2023-09-11"},{"lineNumber":78,"author":{"gitId":"brein62"},"content":"     * @throws DukeException If there is an invalid input message causing an error in parsing the DeleteCommand.","lastModifiedDate":"2023-09-11"},{"lineNumber":79,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-11"},{"lineNumber":80,"author":{"gitId":"brein62"},"content":"    private static DeleteCommand parseDeleteCommand(String message) throws DukeException {","lastModifiedDate":"2023-09-11"},{"lineNumber":81,"author":{"gitId":"brein62"},"content":"        assert message.startsWith(\"delete\") : message;","lastModifiedDate":"2023-09-11"},{"lineNumber":82,"author":{"gitId":"brein62"},"content":"        if (message.length() \u003c\u003d 7) {","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"You need to specify the index of the task to delete.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"brein62"},"content":"            return new DeleteCommand(Integer.parseInt(message.substring(7)));","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"brein62"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"The index of the task to delete is not a valid integer.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-11"},{"lineNumber":91,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":92,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-11"},{"lineNumber":93,"author":{"gitId":"brein62"},"content":"     * Parses the message to be processed into an AddCommand that adds a todo, then returns that AddCommand.","lastModifiedDate":"2023-09-11"},{"lineNumber":94,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-09-11"},{"lineNumber":95,"author":{"gitId":"brein62"},"content":"     * @param message The full message to be parsed.","lastModifiedDate":"2023-09-11"},{"lineNumber":96,"author":{"gitId":"brein62"},"content":"     * @return The AddCommand parsed from the given message if there are no errors.","lastModifiedDate":"2023-09-11"},{"lineNumber":97,"author":{"gitId":"brein62"},"content":"     * @throws DukeException If there is an invalid input message causing an error in parsing the AddCommand.","lastModifiedDate":"2023-09-11"},{"lineNumber":98,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-11"},{"lineNumber":99,"author":{"gitId":"brein62"},"content":"    private static AddCommand parseTodoCommand(String message) throws DukeException {","lastModifiedDate":"2023-09-11"},{"lineNumber":100,"author":{"gitId":"brein62"},"content":"        assert message.startsWith(\"todo\") : message;","lastModifiedDate":"2023-09-11"},{"lineNumber":101,"author":{"gitId":"brein62"},"content":"        if (message.length() \u003c\u003d 5) {","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":104,"author":{"gitId":"brein62"},"content":"        return new AddCommand(message.substring(5));","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-11"},{"lineNumber":106,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":107,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-11"},{"lineNumber":108,"author":{"gitId":"brein62"},"content":"     * Parses the message to be processed into an AddCommand that adds a deadline, then returns that AddCommand.","lastModifiedDate":"2023-09-11"},{"lineNumber":109,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-09-11"},{"lineNumber":110,"author":{"gitId":"brein62"},"content":"     * @param message The full message to be parsed.","lastModifiedDate":"2023-09-11"},{"lineNumber":111,"author":{"gitId":"brein62"},"content":"     * @return The AddCommand parsed from the given message if there are no errors.","lastModifiedDate":"2023-09-11"},{"lineNumber":112,"author":{"gitId":"brein62"},"content":"     * @throws DukeException If there is an invalid input message causing an error in parsing the AddCommand.","lastModifiedDate":"2023-09-11"},{"lineNumber":113,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-11"},{"lineNumber":114,"author":{"gitId":"brein62"},"content":"    private static AddCommand parseDeadlineCommand(String message) throws DukeException {","lastModifiedDate":"2023-09-11"},{"lineNumber":115,"author":{"gitId":"brein62"},"content":"        assert message.startsWith(\"deadline\") : message;","lastModifiedDate":"2023-09-11"},{"lineNumber":116,"author":{"gitId":"brein62"},"content":"        if (message.length() \u003c\u003d 9) {","lastModifiedDate":"2023-08-31"},{"lineNumber":117,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":119,"author":{"gitId":"brein62"},"content":"        String[] deadline \u003d message.substring(9).split(\" /by \");","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"brein62"},"content":"        if (deadline.length !\u003d 2) {","lastModifiedDate":"2023-08-31"},{"lineNumber":121,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"A deadline requires exactly 1 due date.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":123,"author":{"gitId":"brein62"},"content":"        return new AddCommand(deadline[0], deadline[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-11"},{"lineNumber":125,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":126,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":127,"author":{"gitId":"brein62"},"content":"     * Parses the message to be processed into an UpdateCommand that updates one parameter/feature of the task.","lastModifiedDate":"2023-09-12"},{"lineNumber":128,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":129,"author":{"gitId":"brein62"},"content":"     * @param message The full message to be parsed.","lastModifiedDate":"2023-09-12"},{"lineNumber":130,"author":{"gitId":"brein62"},"content":"     * @return The UpdateCommand parsed from the given message if there are no errors.","lastModifiedDate":"2023-09-12"},{"lineNumber":131,"author":{"gitId":"brein62"},"content":"     * @throws DukeException If there is an invalid input message causing an error in parsing the UpdateCommand.","lastModifiedDate":"2023-09-12"},{"lineNumber":132,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":133,"author":{"gitId":"brein62"},"content":"    private static UpdateCommand parseUpdateCommand(String message) throws DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":134,"author":{"gitId":"brein62"},"content":"        assert message.startsWith(\"update\") : message;","lastModifiedDate":"2023-09-12"},{"lineNumber":135,"author":{"gitId":"brein62"},"content":"        if (message.length() \u003c\u003d 7) {","lastModifiedDate":"2023-09-12"},{"lineNumber":136,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"You need to specify which task and what to update.\");","lastModifiedDate":"2023-09-12"},{"lineNumber":137,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":138,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":139,"author":{"gitId":"brein62"},"content":"        String[] updateDetails \u003d message.substring(7).split(\" \");","lastModifiedDate":"2023-09-12"},{"lineNumber":140,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":141,"author":{"gitId":"brein62"},"content":"        if (updateDetails.length \u003c 3) {","lastModifiedDate":"2023-09-12"},{"lineNumber":142,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"You need to specify what to update in the task.\");","lastModifiedDate":"2023-09-13"},{"lineNumber":143,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":144,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":145,"author":{"gitId":"brein62"},"content":"        int updateIndex;","lastModifiedDate":"2023-09-12"},{"lineNumber":146,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":147,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-12"},{"lineNumber":148,"author":{"gitId":"brein62"},"content":"            updateIndex \u003d Integer.parseInt(updateDetails[0]);","lastModifiedDate":"2023-09-12"},{"lineNumber":149,"author":{"gitId":"brein62"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-12"},{"lineNumber":150,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"The index of the task to update is not a valid integer.\");","lastModifiedDate":"2023-09-12"},{"lineNumber":151,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":152,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":153,"author":{"gitId":"brein62"},"content":"        UpdateType updateType;","lastModifiedDate":"2023-09-12"},{"lineNumber":154,"author":{"gitId":"brein62"},"content":"        String updateTypeStr \u003d updateDetails[1];","lastModifiedDate":"2023-09-12"},{"lineNumber":155,"author":{"gitId":"brein62"},"content":"        StringBuilder updateContent \u003d new StringBuilder();","lastModifiedDate":"2023-09-12"},{"lineNumber":156,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":157,"author":{"gitId":"brein62"},"content":"        for (int i \u003d 2; i \u003c updateDetails.length; i++) {","lastModifiedDate":"2023-09-12"},{"lineNumber":158,"author":{"gitId":"brein62"},"content":"            updateContent.append(updateDetails[i]);","lastModifiedDate":"2023-09-12"},{"lineNumber":159,"author":{"gitId":"brein62"},"content":"            if (i \u003c updateDetails.length - 1) {","lastModifiedDate":"2023-09-12"},{"lineNumber":160,"author":{"gitId":"brein62"},"content":"                updateContent.append(\" \");","lastModifiedDate":"2023-09-12"},{"lineNumber":161,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-09-12"},{"lineNumber":162,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":163,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":164,"author":{"gitId":"brein62"},"content":"        switch (updateTypeStr.toLowerCase()) {","lastModifiedDate":"2023-09-12"},{"lineNumber":165,"author":{"gitId":"brein62"},"content":"        case \"message\":","lastModifiedDate":"2023-09-12"},{"lineNumber":166,"author":{"gitId":"brein62"},"content":"            // fallthrough","lastModifiedDate":"2023-09-12"},{"lineNumber":167,"author":{"gitId":"brein62"},"content":"        case \"msg\":","lastModifiedDate":"2023-09-12"},{"lineNumber":168,"author":{"gitId":"brein62"},"content":"            // fallthrough","lastModifiedDate":"2023-09-12"},{"lineNumber":169,"author":{"gitId":"brein62"},"content":"        case \"description\":","lastModifiedDate":"2023-09-12"},{"lineNumber":170,"author":{"gitId":"brein62"},"content":"            updateType \u003d UpdateType.DESCRIPTION;","lastModifiedDate":"2023-09-12"},{"lineNumber":171,"author":{"gitId":"brein62"},"content":"            break;","lastModifiedDate":"2023-09-12"},{"lineNumber":172,"author":{"gitId":"brein62"},"content":"        case \"date1\":","lastModifiedDate":"2023-09-12"},{"lineNumber":173,"author":{"gitId":"brein62"},"content":"            // fallthrough","lastModifiedDate":"2023-09-12"},{"lineNumber":174,"author":{"gitId":"brein62"},"content":"        case \"from\":","lastModifiedDate":"2023-09-12"},{"lineNumber":175,"author":{"gitId":"brein62"},"content":"            // fallthrough","lastModifiedDate":"2023-09-12"},{"lineNumber":176,"author":{"gitId":"brein62"},"content":"        case \"/from\":","lastModifiedDate":"2023-09-12"},{"lineNumber":177,"author":{"gitId":"brein62"},"content":"            // fallthrough","lastModifiedDate":"2023-09-12"},{"lineNumber":178,"author":{"gitId":"brein62"},"content":"        case \"deadline\":","lastModifiedDate":"2023-09-12"},{"lineNumber":179,"author":{"gitId":"brein62"},"content":"            // fallthrough","lastModifiedDate":"2023-09-12"},{"lineNumber":180,"author":{"gitId":"brein62"},"content":"        case \"/deadline\":","lastModifiedDate":"2023-09-12"},{"lineNumber":181,"author":{"gitId":"brein62"},"content":"            // fallthrough","lastModifiedDate":"2023-09-13"},{"lineNumber":182,"author":{"gitId":"brein62"},"content":"        case \"by\":","lastModifiedDate":"2023-09-13"},{"lineNumber":183,"author":{"gitId":"brein62"},"content":"            // fallthrough","lastModifiedDate":"2023-09-13"},{"lineNumber":184,"author":{"gitId":"brein62"},"content":"        case \"/by\":","lastModifiedDate":"2023-09-13"},{"lineNumber":185,"author":{"gitId":"brein62"},"content":"            updateType \u003d UpdateType.DATE1;","lastModifiedDate":"2023-09-12"},{"lineNumber":186,"author":{"gitId":"brein62"},"content":"            break;","lastModifiedDate":"2023-09-12"},{"lineNumber":187,"author":{"gitId":"brein62"},"content":"        case \"date2\":","lastModifiedDate":"2023-09-12"},{"lineNumber":188,"author":{"gitId":"brein62"},"content":"            // fallthrough","lastModifiedDate":"2023-09-12"},{"lineNumber":189,"author":{"gitId":"brein62"},"content":"        case \"to\":","lastModifiedDate":"2023-09-12"},{"lineNumber":190,"author":{"gitId":"brein62"},"content":"            // fallthrough","lastModifiedDate":"2023-09-12"},{"lineNumber":191,"author":{"gitId":"brein62"},"content":"        case \"/to\":","lastModifiedDate":"2023-09-12"},{"lineNumber":192,"author":{"gitId":"brein62"},"content":"            updateType \u003d UpdateType.DATE2;","lastModifiedDate":"2023-09-12"},{"lineNumber":193,"author":{"gitId":"brein62"},"content":"            break;","lastModifiedDate":"2023-09-12"},{"lineNumber":194,"author":{"gitId":"brein62"},"content":"        default:","lastModifiedDate":"2023-09-12"},{"lineNumber":195,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"Update type is invalid!\");","lastModifiedDate":"2023-09-12"},{"lineNumber":196,"author":{"gitId":"brein62"},"content":"            // no break needed as exception is thrown","lastModifiedDate":"2023-09-12"},{"lineNumber":197,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":198,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":199,"author":{"gitId":"brein62"},"content":"        return new UpdateCommand(updateIndex, updateType, updateContent.toString());","lastModifiedDate":"2023-09-12"},{"lineNumber":200,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":201,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":202,"author":{"gitId":"brein62"},"content":"    private static CloneCommand parseCloneCommand(String message) throws DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":203,"author":{"gitId":"brein62"},"content":"        assert message.startsWith(\"clone\") : message;","lastModifiedDate":"2023-09-12"},{"lineNumber":204,"author":{"gitId":"brein62"},"content":"        if (message.length() \u003c\u003d 6) {","lastModifiedDate":"2023-09-12"},{"lineNumber":205,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"You need to specify the index of the task to clone.\");","lastModifiedDate":"2023-09-12"},{"lineNumber":206,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":207,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-12"},{"lineNumber":208,"author":{"gitId":"brein62"},"content":"            return new CloneCommand(Integer.parseInt(message.substring(6)));","lastModifiedDate":"2023-09-12"},{"lineNumber":209,"author":{"gitId":"brein62"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-12"},{"lineNumber":210,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"The index of the task to clone is not a valid integer.\");","lastModifiedDate":"2023-09-12"},{"lineNumber":211,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":212,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":213,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":214,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-11"},{"lineNumber":215,"author":{"gitId":"brein62"},"content":"     * Parses the message to be processed into an AddCommand that adds an event, then returns that AddCommand.","lastModifiedDate":"2023-09-11"},{"lineNumber":216,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-09-11"},{"lineNumber":217,"author":{"gitId":"brein62"},"content":"     * @param message The full message to be parsed.","lastModifiedDate":"2023-09-11"},{"lineNumber":218,"author":{"gitId":"brein62"},"content":"     * @return The AddCommand parsed from the given message if there are no errors.","lastModifiedDate":"2023-09-11"},{"lineNumber":219,"author":{"gitId":"brein62"},"content":"     * @throws DukeException If there is an invalid input message causing an error in parsing the AddCommand.","lastModifiedDate":"2023-09-11"},{"lineNumber":220,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-11"},{"lineNumber":221,"author":{"gitId":"brein62"},"content":"    private static AddCommand parseEventCommand(String message) throws DukeException {","lastModifiedDate":"2023-09-11"},{"lineNumber":222,"author":{"gitId":"brein62"},"content":"        assert message.startsWith(\"event\") : message;","lastModifiedDate":"2023-09-11"},{"lineNumber":223,"author":{"gitId":"brein62"},"content":"        if (message.length() \u003c\u003d 6) {","lastModifiedDate":"2023-08-31"},{"lineNumber":224,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"The description of an event cannot be empty.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":225,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":226,"author":{"gitId":"brein62"},"content":"        String[] event \u003d message.substring(6).split(\" /to | /from \");","lastModifiedDate":"2023-08-30"},{"lineNumber":227,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":228,"author":{"gitId":"brein62"},"content":"        // filter out invalid commands with 2 /to dates or 2 /from dates","lastModifiedDate":"2023-09-20"},{"lineNumber":229,"author":{"gitId":"brein62"},"content":"        boolean isValidEventMessage \u003d message.contains(\" /to \") \u0026\u0026 message.contains(\" /from \");","lastModifiedDate":"2023-09-20"},{"lineNumber":230,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":231,"author":{"gitId":"brein62"},"content":"        if (event.length !\u003d 3 || !isValidEventMessage) {","lastModifiedDate":"2023-09-20"},{"lineNumber":232,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"An event requires exactly 1 from date and 1 to date.\");","lastModifiedDate":"2023-09-20"},{"lineNumber":233,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":234,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":235,"author":{"gitId":"brein62"},"content":"        // check the order of the /from and /to markers to order them properly","lastModifiedDate":"2023-09-20"},{"lineNumber":236,"author":{"gitId":"brein62"},"content":"        int indexOfFromMarker \u003d message.indexOf(\" /from \");","lastModifiedDate":"2023-09-20"},{"lineNumber":237,"author":{"gitId":"brein62"},"content":"        int indexOfToMarker \u003d message.indexOf(\" /to \");","lastModifiedDate":"2023-09-20"},{"lineNumber":238,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":239,"author":{"gitId":"brein62"},"content":"        if (indexOfFromMarker \u003c indexOfToMarker) {","lastModifiedDate":"2023-09-20"},{"lineNumber":240,"author":{"gitId":"brein62"},"content":"            return new AddCommand(event[0], event[1], event[2]);","lastModifiedDate":"2023-08-30"},{"lineNumber":241,"author":{"gitId":"brein62"},"content":"        } else if (indexOfFromMarker \u003e indexOfToMarker) {","lastModifiedDate":"2023-09-20"},{"lineNumber":242,"author":{"gitId":"brein62"},"content":"            return new AddCommand(event[0], event[2], event[1]);","lastModifiedDate":"2023-09-20"},{"lineNumber":243,"author":{"gitId":"brein62"},"content":"        } else {","lastModifiedDate":"2023-09-20"},{"lineNumber":244,"author":{"gitId":"brein62"},"content":"            assert false : \"/from marker cannot be the same as /to marker\";","lastModifiedDate":"2023-09-20"},{"lineNumber":245,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"/from marker cannot be the same as /to marker\");","lastModifiedDate":"2023-09-20"},{"lineNumber":246,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":247,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-11"},{"lineNumber":248,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":249,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":250,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-11"},{"lineNumber":251,"author":{"gitId":"brein62"},"content":"     * Parses the message to be processed into a Command, then returns that Command.","lastModifiedDate":"2023-09-11"},{"lineNumber":252,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-09-11"},{"lineNumber":253,"author":{"gitId":"brein62"},"content":"     * @param message The message to be parsed.","lastModifiedDate":"2023-09-11"},{"lineNumber":254,"author":{"gitId":"brein62"},"content":"     * @return The Command parsed from the given message.","lastModifiedDate":"2023-09-11"},{"lineNumber":255,"author":{"gitId":"brein62"},"content":"     * @throws DukeException If there is an invalid input message causing an error in parsing.","lastModifiedDate":"2023-09-11"},{"lineNumber":256,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-11"},{"lineNumber":257,"author":{"gitId":"brein62"},"content":"    public static Command parse(String message) throws DukeException {","lastModifiedDate":"2023-09-11"},{"lineNumber":258,"author":{"gitId":"brein62"},"content":"        String mainMessage \u003d message.split(\" \")[0];","lastModifiedDate":"2023-09-11"},{"lineNumber":259,"author":{"gitId":"brein62"},"content":"        switch (mainMessage) {","lastModifiedDate":"2023-09-11"},{"lineNumber":260,"author":{"gitId":"brein62"},"content":"        case \"bye\":","lastModifiedDate":"2023-09-11"},{"lineNumber":261,"author":{"gitId":"brein62"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-09-11"},{"lineNumber":262,"author":{"gitId":"brein62"},"content":"            // return statement, no break needed","lastModifiedDate":"2023-09-11"},{"lineNumber":263,"author":{"gitId":"brein62"},"content":"        case \"list\":","lastModifiedDate":"2023-09-11"},{"lineNumber":264,"author":{"gitId":"brein62"},"content":"            return new ListCommand();","lastModifiedDate":"2023-09-11"},{"lineNumber":265,"author":{"gitId":"brein62"},"content":"            // return statement, no break needed","lastModifiedDate":"2023-09-11"},{"lineNumber":266,"author":{"gitId":"brein62"},"content":"        case \"mark\":","lastModifiedDate":"2023-09-11"},{"lineNumber":267,"author":{"gitId":"brein62"},"content":"            return parseMarkCommand(message);","lastModifiedDate":"2023-09-11"},{"lineNumber":268,"author":{"gitId":"brein62"},"content":"            // return statement, no break needed","lastModifiedDate":"2023-09-11"},{"lineNumber":269,"author":{"gitId":"brein62"},"content":"        case \"unmark\":","lastModifiedDate":"2023-09-11"},{"lineNumber":270,"author":{"gitId":"brein62"},"content":"            return parseUnmarkCommand(message);","lastModifiedDate":"2023-09-11"},{"lineNumber":271,"author":{"gitId":"brein62"},"content":"            // return statement, no break needed","lastModifiedDate":"2023-09-11"},{"lineNumber":272,"author":{"gitId":"brein62"},"content":"        case \"find\":","lastModifiedDate":"2023-09-11"},{"lineNumber":273,"author":{"gitId":"brein62"},"content":"            return parseFindCommand(message);","lastModifiedDate":"2023-09-11"},{"lineNumber":274,"author":{"gitId":"brein62"},"content":"            // return statement, no break needed","lastModifiedDate":"2023-09-11"},{"lineNumber":275,"author":{"gitId":"brein62"},"content":"        case \"delete\":","lastModifiedDate":"2023-09-11"},{"lineNumber":276,"author":{"gitId":"brein62"},"content":"            return parseDeleteCommand(message);","lastModifiedDate":"2023-09-11"},{"lineNumber":277,"author":{"gitId":"brein62"},"content":"            // return statement, no break needed","lastModifiedDate":"2023-09-11"},{"lineNumber":278,"author":{"gitId":"brein62"},"content":"        case \"todo\":","lastModifiedDate":"2023-09-11"},{"lineNumber":279,"author":{"gitId":"brein62"},"content":"            return parseTodoCommand(message);","lastModifiedDate":"2023-09-11"},{"lineNumber":280,"author":{"gitId":"brein62"},"content":"            // return statement, no break needed","lastModifiedDate":"2023-09-11"},{"lineNumber":281,"author":{"gitId":"brein62"},"content":"        case \"deadline\":","lastModifiedDate":"2023-09-11"},{"lineNumber":282,"author":{"gitId":"brein62"},"content":"            return parseDeadlineCommand(message);","lastModifiedDate":"2023-09-11"},{"lineNumber":283,"author":{"gitId":"brein62"},"content":"            // return statement, no break needed","lastModifiedDate":"2023-09-11"},{"lineNumber":284,"author":{"gitId":"brein62"},"content":"        case \"update\":","lastModifiedDate":"2023-09-12"},{"lineNumber":285,"author":{"gitId":"brein62"},"content":"            return parseUpdateCommand(message);","lastModifiedDate":"2023-09-12"},{"lineNumber":286,"author":{"gitId":"brein62"},"content":"            // return statement, no break needed","lastModifiedDate":"2023-09-12"},{"lineNumber":287,"author":{"gitId":"brein62"},"content":"        case \"event\":","lastModifiedDate":"2023-09-11"},{"lineNumber":288,"author":{"gitId":"brein62"},"content":"            return parseEventCommand(message);","lastModifiedDate":"2023-09-11"},{"lineNumber":289,"author":{"gitId":"brein62"},"content":"            // return statement, no break needed","lastModifiedDate":"2023-09-11"},{"lineNumber":290,"author":{"gitId":"brein62"},"content":"        case \"clone\":","lastModifiedDate":"2023-09-12"},{"lineNumber":291,"author":{"gitId":"brein62"},"content":"            return parseCloneCommand(message);","lastModifiedDate":"2023-09-12"},{"lineNumber":292,"author":{"gitId":"brein62"},"content":"            // return statement, no break needed","lastModifiedDate":"2023-09-12"},{"lineNumber":293,"author":{"gitId":"brein62"},"content":"        default:","lastModifiedDate":"2023-09-11"},{"lineNumber":294,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-08-30"},{"lineNumber":295,"author":{"gitId":"brein62"},"content":"            // exception thrown, no break needed","lastModifiedDate":"2023-09-11"},{"lineNumber":296,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":297,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":298,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":298}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"import java.util.List;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"import java.util.Objects;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"import duke.task.Event;","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":" * Represents a file storage where all tasks will be saved into and retrieved from when the chatbot is run.","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"public class Storage {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"    /** The file path to store, read and save all tasks within the program. */","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"    private Path filePath;","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"     * Creates a new Storage object with the given filePath.","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"     * @param filePath The file path to store, read and save all tasks within the program.","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"    public Storage(Path filePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"     * Processes a line of the file retrieved from the hard disk, and adds the corresponding task into a specified","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"     * TaskList if the line is valid.","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"     * @param line The line of the file to be parsed and added into the TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"     * @param tasks The TaskList to store any new Task parsed into.","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"    public void processLine(String line, TaskList tasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"        Task newTask;","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"        String[] lineSeq \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"            boolean isValidCompletion \u003d (lineSeq.length \u003c 2)","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"                ? false","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"                : (Objects.equals(lineSeq[1], \"1\") || Objects.equals(lineSeq[1], \"0\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"            boolean isValidTodo \u003d (line.startsWith(\"T\") \u0026\u0026 lineSeq.length \u003d\u003d 3);","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"            boolean isValidDeadline \u003d (line.startsWith(\"D\") \u0026\u0026 lineSeq.length \u003d\u003d 4);","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"            boolean isValidEvent \u003d (line.startsWith(\"E\") \u0026\u0026 lineSeq.length \u003d\u003d 5);","lastModifiedDate":"2023-09-05"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"            if (isValidTodo \u0026\u0026 isValidCompletion) {","lastModifiedDate":"2023-09-05"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"                newTask \u003d new Todo(lineSeq[2]);","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"                if (Objects.equals(lineSeq[1], \"1\")) {","lastModifiedDate":"2023-09-05"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"                    newTask.markAsDone();","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"                }","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"                tasks.add(newTask);","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"            } else if (isValidDeadline \u0026\u0026 isValidCompletion) {","lastModifiedDate":"2023-09-05"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"                newTask \u003d new Deadline(lineSeq[2], LocalDateTime.parse(lineSeq[3]));","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"brein62"},"content":"                if (Objects.equals(lineSeq[1], \"1\")) {","lastModifiedDate":"2023-09-05"},{"lineNumber":62,"author":{"gitId":"brein62"},"content":"                    newTask.markAsDone();","lastModifiedDate":"2023-09-05"},{"lineNumber":63,"author":{"gitId":"brein62"},"content":"                }","lastModifiedDate":"2023-09-05"},{"lineNumber":64,"author":{"gitId":"brein62"},"content":"                tasks.add(newTask);","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"brein62"},"content":"            } else if (isValidEvent \u0026\u0026 isValidCompletion) {","lastModifiedDate":"2023-09-05"},{"lineNumber":66,"author":{"gitId":"brein62"},"content":"                newTask \u003d new Event(lineSeq[2], LocalDateTime.parse(lineSeq[3]), LocalDateTime.parse(lineSeq[4]));","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"brein62"},"content":"                if (Objects.equals(lineSeq[1], \"1\")) {","lastModifiedDate":"2023-09-05"},{"lineNumber":68,"author":{"gitId":"brein62"},"content":"                    newTask.markAsDone();","lastModifiedDate":"2023-09-05"},{"lineNumber":69,"author":{"gitId":"brein62"},"content":"                }","lastModifiedDate":"2023-09-05"},{"lineNumber":70,"author":{"gitId":"brein62"},"content":"                tasks.add(newTask);","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"brein62"},"content":"            } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"brein62"},"content":"                // else do nothing, specifying that the task is invalid.","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"brein62"},"content":"                System.out.println(\"The task \" + line + \" is invalid and is ignored!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"brein62"},"content":"        } catch (DateTimeParseException | DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":76,"author":{"gitId":"brein62"},"content":"            // do nothing, specifying that the task is invalid.","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"brein62"},"content":"            System.out.println(\"The task \" + line + \" is invalid and is ignored!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"brein62"},"content":"     * Loads all tasks from the file in the hard disk, and returns the TaskList containing all tasks processed from the","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"brein62"},"content":"     * file.","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"brein62"},"content":"     * @return TaskList containing all valid tasks processed from the file; else empty TaskList if any error in reading","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"brein62"},"content":"     *         the file occurs.","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"brein62"},"content":"    public TaskList load() {","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"brein62"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"brein62"},"content":"        boolean fileExists \u003d Files.exists(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"brein62"},"content":"            if (!fileExists) {","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"brein62"},"content":"                Files.createDirectories(filePath.getParent());","lastModifiedDate":"2023-09-21"},{"lineNumber":94,"author":{"gitId":"brein62"},"content":"                Files.createFile(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"brein62"},"content":"            } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"brein62"},"content":"                List\u003cString\u003e contents \u003d Files.readAllLines(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"brein62"},"content":"                for (String line : contents) {","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"brein62"},"content":"                    processLine(line, tasks);","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"brein62"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"brein62"},"content":"            return tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"brein62"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"brein62"},"content":"            System.err.println(\"Cannot read initial tasks from file!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"brein62"},"content":"            return new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"brein62"},"content":"     * Saves all tasks in the chatbot into the file in the hard disk.","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"brein62"},"content":"     * @param tasks The list of tasks to be saved into the file.","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"brein62"},"content":"    public void saveTasks(TaskList tasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"brein62"},"content":"        boolean fileExists \u003d Files.exists(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"brein62"},"content":"            if (!fileExists) {","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"brein62"},"content":"                Files.createDirectories(filePath.getParent());","lastModifiedDate":"2023-09-21"},{"lineNumber":118,"author":{"gitId":"brein62"},"content":"                Files.createFile(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-09-21"},{"lineNumber":120,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":121,"author":{"gitId":"brein62"},"content":"            List\u003cString\u003e lines \u003d tasks.getSavedStrings();","lastModifiedDate":"2023-09-11"},{"lineNumber":122,"author":{"gitId":"brein62"},"content":"            Files.write(filePath, lines);","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"brein62"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"brein62"},"content":"            System.err.println(\"Cannot write tasks to file!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":125,"author":{"gitId":"brein62"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-30"},{"lineNumber":126,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":127,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":128,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":128}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"import duke.task.Event;","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":" * Represents a command to add tasks (todos, deadlines, and events) into the task list.","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    enum CommandType {","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"        TODO,","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"        DEADLINE,","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"        EVENT","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"    private CommandType type;","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"    private String message;","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"    private String deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"    private String from;","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"    private String to;","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"     * Constructor for the AddCommand for todos.","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"     * @param message The description for the to-do in the to-do list.","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"    public AddCommand(String message) {","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"        this.type \u003d CommandType.TODO;","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"        this.message \u003d message;","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"        this.deadline \u003d null;","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"        this.from \u003d null;","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"        this.to \u003d null;","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"     * Constructor for the AddCommand for deadlines.","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"     * @param message The description for the deadline in the to-do list.","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"     * @param deadline The deadline as a String in the format yyyy-mm-ddThh:mm:ss.","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"    public AddCommand(String message, String deadline) {","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"        this.type \u003d CommandType.DEADLINE;","lastModifiedDate":"2023-09-05"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"        this.message \u003d message;","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"        this.from \u003d null;","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"        this.to \u003d null;","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"     * Constructor for the AddCommand for events.","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"brein62"},"content":"     * @param message The description for the event in the to-do list.","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"brein62"},"content":"     * @param from The starting date for the event as a String in the format yyyy-mm-ddThh:mm:ss.","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"brein62"},"content":"     * @param to The ending date for the event as a String in the format yyyy-mm-ddThh:mm:ss.","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"brein62"},"content":"    public AddCommand(String message, String from, String to) {","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"brein62"},"content":"        this.type \u003d CommandType.EVENT;","lastModifiedDate":"2023-09-05"},{"lineNumber":67,"author":{"gitId":"brein62"},"content":"        this.message \u003d message;","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"brein62"},"content":"        this.deadline \u003d null;","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"brein62"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"brein62"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"brein62"},"content":"     * Executes the given AddCommand using the specified TaskList and Storage.","lastModifiedDate":"2023-09-06"},{"lineNumber":75,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"brein62"},"content":"     * @param tasks The task list to run the command on.","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"brein62"},"content":"     * @param storage The storage to save tasks to.","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"brein62"},"content":"     * @return The String that will be passed to the GUI when the AddCommand has finished executing.","lastModifiedDate":"2023-09-06"},{"lineNumber":79,"author":{"gitId":"brein62"},"content":"     * @throws DukeException If task type is invalid; or date Strings cannot be parsed (for deadlines and events).","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"brein62"},"content":"    public String execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-06"},{"lineNumber":83,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"brein62"},"content":"            Task newTask;","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"brein62"},"content":"            switch (this.type) {","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"brein62"},"content":"            case TODO:","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"brein62"},"content":"                newTask \u003d new Todo(message);","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"brein62"},"content":"                break;","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"brein62"},"content":"            case DEADLINE:","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"brein62"},"content":"                newTask \u003d new Deadline(message, LocalDateTime.parse(deadline));","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"brein62"},"content":"                break;","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"brein62"},"content":"            case EVENT:","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"brein62"},"content":"                newTask \u003d new Event(message, LocalDateTime.parse(from), LocalDateTime.parse(to));","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"brein62"},"content":"                break;","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"brein62"},"content":"            default:","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"brein62"},"content":"                throw new DukeException(\"Task type is invalid!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"brein62"},"content":"                // break not needed as exception is thrown","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":100,"author":{"gitId":"brein62"},"content":"            tasks.add(newTask);","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"brein62"},"content":"            storage.saveTasks(tasks);","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":103,"author":{"gitId":"brein62"},"content":"            return \"Got it. I\u0027ve added this task:\" + \"\\n\"","lastModifiedDate":"2023-09-06"},{"lineNumber":104,"author":{"gitId":"brein62"},"content":"                    + \"\\u2022 \" + newTask + \"\\n\"","lastModifiedDate":"2023-09-06"},{"lineNumber":105,"author":{"gitId":"brein62"},"content":"                    + \"Now you have \" + tasks.getSize() + \" tasks in the list.\";","lastModifiedDate":"2023-09-06"},{"lineNumber":106,"author":{"gitId":"brein62"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"Dates should be formatted yyyy-mm-ddThh:mm:ss,\\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"brein62"},"content":"                    + \"\\t e.g. 2023-09-12T12:06:53\");","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":110,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"brein62"},"content":"     * Gets the command type for the specific AddCommand.","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"brein62"},"content":"     * @return \"Add Todo\" if AddCommand adds a to-do; \"Add Deadline\" if AddCommand adds a deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"brein62"},"content":"     *         \"Add Event\" if AddCommand adds an event; \"Add \" otherwise.","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"brein62"},"content":"    public String getCommandType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"brein62"},"content":"        String typeStr;","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"brein62"},"content":"        switch (this.type) {","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"brein62"},"content":"        case TODO:","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"brein62"},"content":"            typeStr \u003d \"Todo\";","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"brein62"},"content":"            break;","lastModifiedDate":"2023-08-30"},{"lineNumber":125,"author":{"gitId":"brein62"},"content":"        case DEADLINE:","lastModifiedDate":"2023-08-30"},{"lineNumber":126,"author":{"gitId":"brein62"},"content":"            typeStr \u003d \"Deadline\";","lastModifiedDate":"2023-08-30"},{"lineNumber":127,"author":{"gitId":"brein62"},"content":"            break;","lastModifiedDate":"2023-08-30"},{"lineNumber":128,"author":{"gitId":"brein62"},"content":"        case EVENT:","lastModifiedDate":"2023-08-30"},{"lineNumber":129,"author":{"gitId":"brein62"},"content":"            typeStr \u003d \"Event\";","lastModifiedDate":"2023-08-30"},{"lineNumber":130,"author":{"gitId":"brein62"},"content":"            break;","lastModifiedDate":"2023-08-30"},{"lineNumber":131,"author":{"gitId":"brein62"},"content":"        default:","lastModifiedDate":"2023-08-30"},{"lineNumber":132,"author":{"gitId":"brein62"},"content":"            typeStr \u003d \"\";","lastModifiedDate":"2023-08-30"},{"lineNumber":133,"author":{"gitId":"brein62"},"content":"            break;","lastModifiedDate":"2023-08-30"},{"lineNumber":134,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":135,"author":{"gitId":"brein62"},"content":"        return \"Add \" + typeStr;","lastModifiedDate":"2023-08-30"},{"lineNumber":136,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":137,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":137}},{"path":"src/main/java/duke/command/CloneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-09-12"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":" * Represents a command to clone tasks in the task list.","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"public class CloneCommand extends Command {","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"     * The index in the task list to update.","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    private int index;","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"     * Initialises a CloneCommand object.","lastModifiedDate":"2023-09-13"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"     * @param index The index in the task list to clone.","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"    public CloneCommand(int index) {","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"     * Executes the given CloneCommand using the specified TaskList and Storage.","lastModifiedDate":"2023-09-13"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"     * @param tasks The task list to clone a task in.","lastModifiedDate":"2023-09-13"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"     * @param storage The storage to save and update tasks.","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"     * @return The String that will be passed to the GUI when the CloneCommand has finished executing.","lastModifiedDate":"2023-09-13"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"     * @throws DukeException If index is out of range for the task list.","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"    public String execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"        if (index \u003e\u003d 1 \u0026\u0026 index \u003c\u003d tasks.getSize()) {","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"            StringBuilder responseBuilder \u003d new StringBuilder();","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"            tasks.cloneTask(index);","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"            responseBuilder.append(\"OK, I\u0027ve cloned this task:\\n\");","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"            responseBuilder.append(\"\\u2022 \" + tasks.getTaskString(index) + \"\\n\");","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"            storage.saveTasks(tasks);","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"            return responseBuilder.toString();","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"        } else {","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"Cannot clone a task that is out of range!\");","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"     * Gets the command type for the CloneCommand.","lastModifiedDate":"2023-09-13"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"     * @return Clone.","lastModifiedDate":"2023-09-13"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"    public String getCommandType() {","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"        return \"Clone\";","lastModifiedDate":"2023-09-13"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-09-12"}],"authorContributionMap":{"brein62":59}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":" * Represents a specific command to be executed.","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"public abstract class Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"    public abstract String execute(TaskList tasks, Storage storage) throws DukeException;","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"     * Returns whether the Command should exit the program when run.","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"     * @return False.","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"        return false;","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"    public abstract String getCommandType();","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":24}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":" * Represents a command to delete tasks from the task list.","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    private int index;","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"     * Initialises a DeleteCommand object.","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"     * @param index The index in the task list to delete.","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"    public DeleteCommand(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"     * Executes the given DeleteCommand using the specified TaskList and Storage.","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"     * @param tasks The task list to delete a task on.","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"     * @param storage The storage to save and update tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"     * @return The String that will be passed to the GUI when the DeleteCommand has finished executing.","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"     * @throws DukeException If index is out of range for the task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"    public String execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"        if (index \u003e\u003d 1 \u0026\u0026 index \u003c\u003d tasks.getSize()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"            Task deletedTask \u003d tasks.remove(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"            storage.saveTasks(tasks);","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"            return \"Noted. I\u0027ve removed this task:\\n\"","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"                    + \"\\u2022 \" + deletedTask.toString() + \"\\n\"","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"                    + \"Now you have \" + tasks.getSize() + \" tasks in the list.\";","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"Cannot delete a task that is out of range!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"     * Gets the command type for the DeleteCommand.","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"     * @return Delete.","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"    public String getCommandType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"        return \"Delete\";","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":55}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":" * Represents a command to quit the chatbot program.","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"     * Executes the given ExitCommand using the specified TaskList and Storage.","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"     * @param tasks The task list to run the command on (if needed).","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"     * @param storage The storage to save and update tasks (if needed).","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"     * @return Null. Exit logic is handled by the GUI itself.","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    public String execute(TaskList tasks, Storage storage) {","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"        return null;","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"     * Returns whether the ExitCommand should exit the program when run, which is true.","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"     * @return True.","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"        return true;","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"     * Gets the command type for the ExitCommand.","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"     * @return Exit.","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"    public String getCommandType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"        return \"Exit\";","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":42}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":" * Represents a command to find tasks within the task list.","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"    /** The String to search for. */","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"    private String findStr;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"     * Creates a FindCommand with a specified search string.","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"     * @param findStr The search string to search the TaskList for.","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    public FindCommand(String findStr) {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"        this.findStr \u003d findStr;","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"     * Finds tasks in the TaskList with the given search string, and prints the matching tasks. Prints a message if no","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"     * matching tasks are found.","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"     * @param tasks The task list to search using the search keyword.","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"     * @param storage The storage to save and update tasks (if needed).","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"     * @return The String that contains a formatted version of the tasks found, and will be passed to the GUI when the","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"     *         FindCommand has finished executing.","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"    public String execute(TaskList tasks, Storage storage) {","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"        TaskList foundTasks \u003d tasks.find(findStr);","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"        StringBuilder responseBuilder \u003d new StringBuilder();","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"        if (foundTasks.getSize() \u003e 0) {","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"            responseBuilder.append(\"Here are the matching tasks in your list:\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"            for (int i \u003d 0; i \u003c foundTasks.getSize(); i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"                responseBuilder","lastModifiedDate":"2023-09-11"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"                        .append(i + 1)","lastModifiedDate":"2023-09-11"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"                        .append(\". \")","lastModifiedDate":"2023-09-11"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"                        .append(foundTasks.getTaskString(i + 1))","lastModifiedDate":"2023-09-11"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"                        .append(\"\\n\");","lastModifiedDate":"2023-09-11"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"            responseBuilder.append(\"There are no tasks with the given keyword!\");","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"        return responseBuilder.toString();","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"     * Gets the command type for the FindCommand.","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"     * @return Find.","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"    public String getCommandType() {","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"        return \"Find\";","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"brein62":60}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":" * Represents a command to list all tasks within the task list.","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"     * Executes the given ListCommand using the specified TaskList and Storage.","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"     * @param tasks The task list to be printed.","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"     * @param storage The storage to save and update tasks (if needed).","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"     * @return The String that contains a formatted version of all tasks in the TaskList, and will be passed to the GUI","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"     *         when the ListCommand has finished executing.","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"    public String execute(TaskList tasks, Storage storage) {","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"        StringBuilder responseBuilder \u003d new StringBuilder();","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"        responseBuilder.append(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"            responseBuilder.append((i + 1) + \". \" + tasks.getTaskString(i + 1) + \"\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"        return responseBuilder.toString();","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"     * Gets the command type for the ListCommand.","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"     * @return List.","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"    public String getCommandType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"        return \"List\";","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":40}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":" * Represents a command to mark tasks as completed in the task list.","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"    private int index;","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"     * Initialises a MarkCommand object.","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"     * @param index The index in the task list to mark as done.","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    public MarkCommand(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"     * Executes the given MarkCommand using the specified TaskList and Storage.","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"     * @param tasks The task list to mark a task in.","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"     * @param storage The storage to save and update tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"     * @return The String that will be passed to the GUI when the MarkCommand has finished executing.","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"     * @throws DukeException If index is out of range for the task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"    public String execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"        if (index \u003e\u003d 1 \u0026\u0026 index \u003c\u003d tasks.getSize()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"            StringBuilder responseBuilder \u003d new StringBuilder();","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"            tasks.markAsDone(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"            responseBuilder.append(\"Nice! I\u0027ve marked this task as done:\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"            responseBuilder.append(\"\\u2022 \" + tasks.getTaskString(index) + \"\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"            storage.saveTasks(tasks);","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"            return responseBuilder.toString();","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"Cannot mark a task that is out of range!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"     * Gets the command type for the MarkCommand.","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"     * @return Mark.","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"    public String getCommandType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"        return \"Mark\";","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":56}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":" * Represents a command to mark tasks as not completed in the task list.","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"    private int index;","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"     * Initialises an UnmarkCommand object.","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"     * @param index The index in the task list to unmark.","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"    public UnmarkCommand(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"     * Executes the given UnmarkCommand using the specified TaskList, Ui and Storage.","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"     * @param tasks The task list to unmark a task in.","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"     * @param storage The storage to save and update tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"     * @return The String that will be passed to the GUI when the UnmarkCommand has finished executing.","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"     * @throws DukeException If index is out of range for the task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"    public String execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"        if (index \u003e\u003d 1 \u0026\u0026 index \u003c\u003d tasks.getSize()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"            StringBuilder responseBuilder \u003d new StringBuilder();","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"            tasks.unmarkAsDone(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"            responseBuilder.append(\"OK, I\u0027ve marked this task as not done yet:\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"            responseBuilder.append(\"\\u2022 \" + tasks.getTaskString(index) + \"\\n\");","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"            storage.saveTasks(tasks);","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"            return responseBuilder.toString();","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"Cannot unmark a task that is out of range!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"     * Gets the command type for the UnmarkCommand.","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"     * @return Unmark.","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"    public String getCommandType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"        return \"Unmark\";","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":55}},{"path":"src/main/java/duke/command/UpdateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-09-12"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import duke.task.UpdateType;","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":" * Represents a command to update the tasks in the task list.","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"public class UpdateCommand extends Command {","lastModifiedDate":"2023-09-12"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"     * The index in the task list to update.","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    private int index;","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"     * The part of the task to be updated.","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"    private UpdateType updateType;","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"     * The new value to update to (as a String).","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"    private String newValue;","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"     * Initialises an UpdateCommand object.","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"     * @param index The index in the task list to update.","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"     * @param updateType The portion of the task to update.","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"     * @param newValue The new value to update to (as a String).","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"    public UpdateCommand(int index, UpdateType updateType, String newValue) {","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"        this.updateType \u003d updateType;","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"        this.newValue \u003d newValue;","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"     * Executes the given UpdateCommand using the specified TaskList and Storage.","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"     * @param tasks The task list to update a task in.","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"     * @param storage The storage to save and update tasks.","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"     * @return The String that will be passed to the GUI when the UpdateCommand has finished executing.","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"     * @throws DukeException If index is out of range for the task list.","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"    public String execute(TaskList tasks, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"        if (index \u003e\u003d 1 \u0026\u0026 index \u003c\u003d tasks.getSize()) {","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"            StringBuilder responseBuilder \u003d new StringBuilder();","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"            tasks.updateTask(index, updateType, newValue);","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"            responseBuilder.append(\"OK, I\u0027ve updated this task with the following details:\\n\");","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"            responseBuilder.append(\"\\u2022 \" + tasks.getTaskString(index) + \"\\n\");","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"            storage.saveTasks(tasks);","lastModifiedDate":"2023-09-12"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"            return responseBuilder.toString();","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"        } else {","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"Cannot update a task that is out of range!\");","lastModifiedDate":"2023-09-12"},{"lineNumber":62,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":63,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":64,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":66,"author":{"gitId":"brein62"},"content":"     * Gets the command type for the UpdateCommand.","lastModifiedDate":"2023-09-12"},{"lineNumber":67,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":68,"author":{"gitId":"brein62"},"content":"     * @return Update, followed by the update type.","lastModifiedDate":"2023-09-13"},{"lineNumber":69,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":70,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":71,"author":{"gitId":"brein62"},"content":"    public String getCommandType() {","lastModifiedDate":"2023-09-12"},{"lineNumber":72,"author":{"gitId":"brein62"},"content":"        switch (updateType) {","lastModifiedDate":"2023-09-13"},{"lineNumber":73,"author":{"gitId":"brein62"},"content":"        case DESCRIPTION:","lastModifiedDate":"2023-09-13"},{"lineNumber":74,"author":{"gitId":"brein62"},"content":"            return \"Update DESCRIPTION\";","lastModifiedDate":"2023-09-13"},{"lineNumber":75,"author":{"gitId":"brein62"},"content":"            // return statement, no break needed","lastModifiedDate":"2023-09-13"},{"lineNumber":76,"author":{"gitId":"brein62"},"content":"        case DATE1:","lastModifiedDate":"2023-09-13"},{"lineNumber":77,"author":{"gitId":"brein62"},"content":"            return \"Update DATE1\";","lastModifiedDate":"2023-09-13"},{"lineNumber":78,"author":{"gitId":"brein62"},"content":"            // return statement, no break needed","lastModifiedDate":"2023-09-13"},{"lineNumber":79,"author":{"gitId":"brein62"},"content":"        case DATE2:","lastModifiedDate":"2023-09-13"},{"lineNumber":80,"author":{"gitId":"brein62"},"content":"            return \"Update DATE2\";","lastModifiedDate":"2023-09-13"},{"lineNumber":81,"author":{"gitId":"brein62"},"content":"            // return statement, no break needed","lastModifiedDate":"2023-09-13"},{"lineNumber":82,"author":{"gitId":"brein62"},"content":"        default:","lastModifiedDate":"2023-09-13"},{"lineNumber":83,"author":{"gitId":"brein62"},"content":"            throw new AssertionError(updateType);","lastModifiedDate":"2023-09-13"},{"lineNumber":84,"author":{"gitId":"brein62"},"content":"            // exception thrown, no break needed","lastModifiedDate":"2023-09-13"},{"lineNumber":85,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":86,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":87,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-09-12"}],"authorContributionMap":{"brein62":87}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.gui;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"import javafx.geometry.Insets;","lastModifiedDate":"2023-09-20"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"import javafx.scene.SnapshotParameters;","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"import javafx.scene.effect.DropShadow;","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"import javafx.scene.image.WritableImage;","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"import javafx.scene.layout.Background;","lastModifiedDate":"2023-09-20"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"import javafx.scene.layout.BackgroundFill;","lastModifiedDate":"2023-09-20"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"import javafx.scene.layout.CornerRadii;","lastModifiedDate":"2023-09-20"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"import javafx.scene.paint.Color;","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"import javafx.scene.paint.Paint;","lastModifiedDate":"2023-09-20"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"import javafx.scene.shape.Rectangle;","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":" * A dialog box consisting of an ImageView to represent the speaker\u0027s face and a label containing text from the","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":" * speaker.","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"        addImageWithShadow(displayPicture, img);","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"     * Adds a rounded shadow effect around the image in the DialogBox. Code adapted from","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"     * \u003ca href\u003d\"https://stackoverflow.com/a/20490028\"\u003ethis StackOverflow answer\u003c/a\u003e.","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"     * @param view The ImageView that will contain the image with the shadow.","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"     * @param img The image to wrap a shadow around.","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"    private void addImageWithShadow(ImageView view, Image img) {","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"        view.setImage(img);","lastModifiedDate":"2023-09-06"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"brein62"},"content":"        Rectangle clip \u003d new Rectangle(view.getFitWidth(), view.getFitHeight());","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"brein62"},"content":"        clip.setArcWidth(10);","lastModifiedDate":"2023-09-06"},{"lineNumber":63,"author":{"gitId":"brein62"},"content":"        clip.setArcHeight(10);","lastModifiedDate":"2023-09-06"},{"lineNumber":64,"author":{"gitId":"brein62"},"content":"        view.setClip(clip);","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"brein62"},"content":"        SnapshotParameters parameters \u003d new SnapshotParameters();","lastModifiedDate":"2023-09-06"},{"lineNumber":67,"author":{"gitId":"brein62"},"content":"        parameters.setFill(Color.TRANSPARENT);","lastModifiedDate":"2023-09-06"},{"lineNumber":68,"author":{"gitId":"brein62"},"content":"        WritableImage image \u003d view.snapshot(parameters, null);","lastModifiedDate":"2023-09-06"},{"lineNumber":69,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":70,"author":{"gitId":"brein62"},"content":"        view.setClip(null);","lastModifiedDate":"2023-09-06"},{"lineNumber":71,"author":{"gitId":"brein62"},"content":"        view.setEffect(new DropShadow(10, Color.BLACK));","lastModifiedDate":"2023-09-06"},{"lineNumber":72,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":73,"author":{"gitId":"brein62"},"content":"        view.setImage(image);","lastModifiedDate":"2023-09-06"},{"lineNumber":74,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":75,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":76,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":77,"author":{"gitId":"brein62"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-06"},{"lineNumber":78,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":79,"author":{"gitId":"brein62"},"content":"    private void flip() {","lastModifiedDate":"2023-09-06"},{"lineNumber":80,"author":{"gitId":"brein62"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-06"},{"lineNumber":81,"author":{"gitId":"brein62"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-06"},{"lineNumber":82,"author":{"gitId":"brein62"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-06"},{"lineNumber":83,"author":{"gitId":"brein62"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-06"},{"lineNumber":84,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":85,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":86,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":87,"author":{"gitId":"brein62"},"content":"     * Sets the background of the DialogBox with a certain color.","lastModifiedDate":"2023-09-20"},{"lineNumber":88,"author":{"gitId":"brein62"},"content":"     * @param paint The color of the background of the DialogBox to set.","lastModifiedDate":"2023-09-20"},{"lineNumber":89,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":90,"author":{"gitId":"brein62"},"content":"    private void fill(Paint paint) {","lastModifiedDate":"2023-09-20"},{"lineNumber":91,"author":{"gitId":"brein62"},"content":"        BackgroundFill bgFill \u003d new BackgroundFill(paint,","lastModifiedDate":"2023-09-20"},{"lineNumber":92,"author":{"gitId":"brein62"},"content":"                CornerRadii.EMPTY, Insets.EMPTY);","lastModifiedDate":"2023-09-20"},{"lineNumber":93,"author":{"gitId":"brein62"},"content":"        Background bg \u003d new Background(bgFill);","lastModifiedDate":"2023-09-20"},{"lineNumber":94,"author":{"gitId":"brein62"},"content":"        setBackground(bg);","lastModifiedDate":"2023-09-20"},{"lineNumber":95,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":96,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":97,"author":{"gitId":"brein62"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-06"},{"lineNumber":98,"author":{"gitId":"brein62"},"content":"        DialogBox db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-20"},{"lineNumber":99,"author":{"gitId":"brein62"},"content":"        db.fill(Color.SILVER);","lastModifiedDate":"2023-09-20"},{"lineNumber":100,"author":{"gitId":"brein62"},"content":"        return db;","lastModifiedDate":"2023-09-20"},{"lineNumber":101,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":102,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":103,"author":{"gitId":"brein62"},"content":"    public static DialogBox getDukeDialog(String text, Image img, boolean isError) {","lastModifiedDate":"2023-09-20"},{"lineNumber":104,"author":{"gitId":"brein62"},"content":"        DialogBox db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-06"},{"lineNumber":105,"author":{"gitId":"brein62"},"content":"        db.flip();","lastModifiedDate":"2023-09-06"},{"lineNumber":106,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":107,"author":{"gitId":"brein62"},"content":"        // set colour of response to red if there are errors","lastModifiedDate":"2023-09-20"},{"lineNumber":108,"author":{"gitId":"brein62"},"content":"        if (isError) {","lastModifiedDate":"2023-09-20"},{"lineNumber":109,"author":{"gitId":"brein62"},"content":"            db.dialog.setTextFill(Color.DARKRED);","lastModifiedDate":"2023-09-20"},{"lineNumber":110,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":111,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":112,"author":{"gitId":"brein62"},"content":"        return db;","lastModifiedDate":"2023-09-06"},{"lineNumber":113,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":114,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"brein62":114}},{"path":"src/main/java/duke/gui/GuiApplication.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.gui;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":" * Main GUI application for the chatbot.","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"public class GuiApplication extends Application {","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"    private Duke duke \u003d new Duke(Paths.get(\"data\", \"dukeGui.txt\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Duke.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"            stage.setTitle(\"Bob the Chatbot \u003e:)\");","lastModifiedDate":"2023-09-20"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"            stage.show();","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"brein62":34}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.gui;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import java.util.concurrent.CompletableFuture;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-20"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"    private Label bobLabel;","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"    private Duke duke;","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaGigachad.png\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaBob.png\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"     * Initializes the chatbot GUI interface.","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"     * Initialises Duke in the GUI and displays a welcome message in a dialog box.","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"     * @param d The Duke instance for the GUI to use.","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"        duke \u003d d;","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"        // print a welcome message","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"        dialogContainer.getChildren().add(","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"                DialogBox.getDukeDialog(duke.getWelcomeMessage(), dukeImage, false)","lastModifiedDate":"2023-09-20"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"        );","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"     * Creates a new dialog box with the exit message, waits 500ms, then closes the GUI program.","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"     * @param input The input message that triggers this exit handler.","lastModifiedDate":"2023-09-06"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"brein62"},"content":"    private void handleExit(String input) {","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"brein62"},"content":"        assert input.startsWith(\"bye\") : input;","lastModifiedDate":"2023-09-11"},{"lineNumber":63,"author":{"gitId":"brein62"},"content":"        // print an exit message, waits 500ms, then exits the program.","lastModifiedDate":"2023-09-06"},{"lineNumber":64,"author":{"gitId":"brein62"},"content":"        CompletableFuture.completedFuture(dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"brein62"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"brein62"},"content":"                DialogBox.getDukeDialog(duke.getExitMessage(), dukeImage, false)","lastModifiedDate":"2023-09-20"},{"lineNumber":67,"author":{"gitId":"brein62"},"content":"        )).thenRunAsync(() -\u003e {","lastModifiedDate":"2023-09-06"},{"lineNumber":68,"author":{"gitId":"brein62"},"content":"            try {","lastModifiedDate":"2023-09-06"},{"lineNumber":69,"author":{"gitId":"brein62"},"content":"                Thread.sleep(500);","lastModifiedDate":"2023-09-06"},{"lineNumber":70,"author":{"gitId":"brein62"},"content":"            } catch (InterruptedException e) {","lastModifiedDate":"2023-09-06"},{"lineNumber":71,"author":{"gitId":"brein62"},"content":"                Platform.exit();","lastModifiedDate":"2023-09-06"},{"lineNumber":72,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-09-06"},{"lineNumber":73,"author":{"gitId":"brein62"},"content":"        }).thenRunAsync(Platform::exit);","lastModifiedDate":"2023-09-11"},{"lineNumber":74,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":75,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":76,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":77,"author":{"gitId":"brein62"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-06"},{"lineNumber":78,"author":{"gitId":"brein62"},"content":"     * the dialog container. Clears the user input after processing. If there is an error in input, Duke\u0027s reply will","lastModifiedDate":"2023-09-20"},{"lineNumber":79,"author":{"gitId":"brein62"},"content":"     * be in dark red.","lastModifiedDate":"2023-09-20"},{"lineNumber":80,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":81,"author":{"gitId":"brein62"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":82,"author":{"gitId":"brein62"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-06"},{"lineNumber":83,"author":{"gitId":"brein62"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-06"},{"lineNumber":84,"author":{"gitId":"brein62"},"content":"        String response \u003d \"\";","lastModifiedDate":"2023-09-20"},{"lineNumber":85,"author":{"gitId":"brein62"},"content":"        boolean isError \u003d false;","lastModifiedDate":"2023-09-20"},{"lineNumber":86,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":87,"author":{"gitId":"brein62"},"content":"        // try to get a response, else print an error message to be used for Duke\u0027s output in the GUI","lastModifiedDate":"2023-09-20"},{"lineNumber":88,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":89,"author":{"gitId":"brein62"},"content":"            response \u003d duke.getResponse(input);","lastModifiedDate":"2023-09-20"},{"lineNumber":90,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":91,"author":{"gitId":"brein62"},"content":"            response \u003d e.toString();","lastModifiedDate":"2023-09-20"},{"lineNumber":92,"author":{"gitId":"brein62"},"content":"            isError \u003d true;","lastModifiedDate":"2023-09-20"},{"lineNumber":93,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":94,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":95,"author":{"gitId":"brein62"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-06"},{"lineNumber":96,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":97,"author":{"gitId":"brein62"},"content":"        // there is a response; do not exit the GUI program","lastModifiedDate":"2023-09-06"},{"lineNumber":98,"author":{"gitId":"brein62"},"content":"        if (response !\u003d null) {","lastModifiedDate":"2023-09-06"},{"lineNumber":99,"author":{"gitId":"brein62"},"content":"            dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-06"},{"lineNumber":100,"author":{"gitId":"brein62"},"content":"                    DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-06"},{"lineNumber":101,"author":{"gitId":"brein62"},"content":"                    DialogBox.getDukeDialog(response, dukeImage, isError)","lastModifiedDate":"2023-09-20"},{"lineNumber":102,"author":{"gitId":"brein62"},"content":"            );","lastModifiedDate":"2023-09-06"},{"lineNumber":103,"author":{"gitId":"brein62"},"content":"        } else {","lastModifiedDate":"2023-09-06"},{"lineNumber":104,"author":{"gitId":"brein62"},"content":"            handleExit(input);","lastModifiedDate":"2023-09-06"},{"lineNumber":105,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":106,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":107,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"brein62":107}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"import duke.util.Formatter;","lastModifiedDate":"2023-09-11"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":" * Represents a deadline task, containing a description and a deadline.","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"    private LocalDateTime deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"     * Returns a new Deadline task containing the message and the deadline date.","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"     * @param message The description for the deadline.","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"     * @param deadline The deadline, as a LocalDateTime.","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"    public Deadline(String message, LocalDateTime deadline) {","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"        super(message);","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"     * Updates a deadline task based on the specified update type and value.","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"     * @param type The UpdateType to update the task with.","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"     * @param newValue The new value to update the task with.","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"     * @throws DukeException If the type and new value parameters are invalid.","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"    public void update(UpdateType type, String newValue) throws DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"        switch (type) {","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"        case DESCRIPTION:","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"            message \u003d newValue;","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"            break;","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"        case DATE1:","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"            try {","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"                deadline \u003d LocalDateTime.parse(newValue);","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"                throw new DukeException(\"Cannot parse date/time of new deadline!\");","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"            break;","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"        case DATE2:","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"Cannot update: Deadlines have only one deadline date!\");","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"            // exception thrown, no break statement needed","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"        default:","lastModifiedDate":"2023-09-12"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"            assert false : \"Invalid update type!\";","lastModifiedDate":"2023-09-20"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"Invalid update type!\");","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"            // exception thrown, no break statement needed","lastModifiedDate":"2023-09-12"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"     * Returns a String containing information within the Deadline task, formatted to be saved.","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"     * @return The deadline, formatted as a String to be saved in the save file.","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":63,"author":{"gitId":"brein62"},"content":"    public String toSaveFormatString() {","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"brein62"},"content":"        return \"D | \" + getStatusNumber() + \" | \" + message + \" | \" + deadline;","lastModifiedDate":"2023-09-11"},{"lineNumber":65,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"brein62"},"content":"     * Returns a String representation of the Deadline task, formatted for output in the application.","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"brein62"},"content":"     * @return The deadline, formatted as a String for output in the application.","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":73,"author":{"gitId":"brein62"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":74,"author":{"gitId":"brein62"},"content":"        return \"[D]\" + getStatusIcon() + \" \" + message","lastModifiedDate":"2023-09-11"},{"lineNumber":75,"author":{"gitId":"brein62"},"content":"                + \" (by: \" + Formatter.formatDateTime(deadline) + \")\";","lastModifiedDate":"2023-09-11"},{"lineNumber":76,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":77,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":78,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":79,"author":{"gitId":"brein62"},"content":"    public Deadline clone() {","lastModifiedDate":"2023-09-12"},{"lineNumber":80,"author":{"gitId":"brein62"},"content":"        return new Deadline(message, deadline);","lastModifiedDate":"2023-09-12"},{"lineNumber":81,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":82,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"brein62":82}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"import duke.util.Formatter;","lastModifiedDate":"2023-09-11"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":" * Represents an event task, containing a description, from date and to date.","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"    private LocalDateTime from;","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    private LocalDateTime to;","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"     * Returns a new Event task containing the message and the from and to dates.","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"     * @param message The description for the Event.","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"     * @param from The starting date of the Event.","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"     * @param to The ending date of the Event.","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"    public Event(String message, LocalDateTime from, LocalDateTime to) throws DukeException {","lastModifiedDate":"2023-09-20"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"        super(message);","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"        if (from.isBefore(to)) {","lastModifiedDate":"2023-09-20"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"            this.from \u003d from;","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"            this.to \u003d to;","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"        } else {","lastModifiedDate":"2023-09-20"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"Invalid date parameter: From date must be before to date!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"     * Updates an event task based on the specified update type and value.","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"     * @param type The UpdateType to update the task with.","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"     * @param newValue The new value to update the task with.","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"     * @throws DukeException If the type and new value parameters are invalid.","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"    public void update(UpdateType type, String newValue) throws DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"        switch (type) {","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"        case DESCRIPTION:","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"            message \u003d newValue;","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"            break;","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"        case DATE1:","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"            try {","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"                LocalDateTime newFrom \u003d LocalDateTime.parse(newValue);","lastModifiedDate":"2023-09-20"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"                if (newFrom.isBefore(to)) {","lastModifiedDate":"2023-09-20"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"                    from \u003d newFrom;","lastModifiedDate":"2023-09-20"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"                } else {","lastModifiedDate":"2023-09-20"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"                    throw new DukeException(\"Invalid date parameter: From date must be before to date!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"                }","lastModifiedDate":"2023-09-20"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-12"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"                throw new DukeException(\"Cannot parse date/time of new event start date!\");","lastModifiedDate":"2023-09-12"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-09-12"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"            break;","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"        case DATE2:","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"            try {","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"brein62"},"content":"                LocalDateTime newTo \u003d LocalDateTime.parse(newValue);","lastModifiedDate":"2023-09-20"},{"lineNumber":62,"author":{"gitId":"brein62"},"content":"                if (from.isBefore(newTo)) {","lastModifiedDate":"2023-09-20"},{"lineNumber":63,"author":{"gitId":"brein62"},"content":"                    to \u003d newTo;","lastModifiedDate":"2023-09-20"},{"lineNumber":64,"author":{"gitId":"brein62"},"content":"                } else {","lastModifiedDate":"2023-09-20"},{"lineNumber":65,"author":{"gitId":"brein62"},"content":"                    throw new DukeException(\"Invalid date parameter: From date must be before to date!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":66,"author":{"gitId":"brein62"},"content":"                }","lastModifiedDate":"2023-09-20"},{"lineNumber":67,"author":{"gitId":"brein62"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-12"},{"lineNumber":68,"author":{"gitId":"brein62"},"content":"                throw new DukeException(\"Cannot parse date/time of new event end date!\");","lastModifiedDate":"2023-09-12"},{"lineNumber":69,"author":{"gitId":"brein62"},"content":"            }","lastModifiedDate":"2023-09-12"},{"lineNumber":70,"author":{"gitId":"brein62"},"content":"            break;","lastModifiedDate":"2023-09-12"},{"lineNumber":71,"author":{"gitId":"brein62"},"content":"        default:","lastModifiedDate":"2023-09-12"},{"lineNumber":72,"author":{"gitId":"brein62"},"content":"            assert false : \"Invalid update type!\";","lastModifiedDate":"2023-09-20"},{"lineNumber":73,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"Invalid update type!\");","lastModifiedDate":"2023-09-12"},{"lineNumber":74,"author":{"gitId":"brein62"},"content":"            // exception thrown, no break statement needed","lastModifiedDate":"2023-09-12"},{"lineNumber":75,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":76,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":77,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":78,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"brein62"},"content":"     * Returns a String containing information within the Event task, formatted to be saved.","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"brein62"},"content":"     * @return The event, formatted as a String to be saved in the save file.","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"brein62"},"content":"    public String toSaveFormatString() {","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"brein62"},"content":"        return \"E | \" + getStatusNumber() + \" | \" + message + \" | \" + from + \" | \" + to;","lastModifiedDate":"2023-09-11"},{"lineNumber":85,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"brein62"},"content":"     * Returns a String representation of the Event task, formatted for output in the application.","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"brein62"},"content":"     * @return The event, formatted as a String for output in the application.","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"brein62"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":93,"author":{"gitId":"brein62"},"content":"        return \"[E]\" + getStatusIcon() + \" \" + message","lastModifiedDate":"2023-09-11"},{"lineNumber":94,"author":{"gitId":"brein62"},"content":"                + \" (from: \" + Formatter.formatDateTime(from)","lastModifiedDate":"2023-09-11"},{"lineNumber":95,"author":{"gitId":"brein62"},"content":"                + \" to: \" + Formatter.formatDateTime(to) + \")\";","lastModifiedDate":"2023-09-11"},{"lineNumber":96,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":97,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":98,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":99,"author":{"gitId":"brein62"},"content":"    public Event clone() {","lastModifiedDate":"2023-09-12"},{"lineNumber":100,"author":{"gitId":"brein62"},"content":"        assert from.isBefore(to) : \"Only a valid Event can be cloned.\";","lastModifiedDate":"2023-09-20"},{"lineNumber":101,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":102,"author":{"gitId":"brein62"},"content":"            return new Event(message, from, to);","lastModifiedDate":"2023-09-12"},{"lineNumber":103,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":104,"author":{"gitId":"brein62"},"content":"            assert false : \"Only a valid Event can be cloned.\";","lastModifiedDate":"2023-09-20"},{"lineNumber":105,"author":{"gitId":"brein62"},"content":"            return null;","lastModifiedDate":"2023-09-20"},{"lineNumber":106,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":107,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":108,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"brein62":108}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":" * Represents a task, containing a message and whether it is completed or not.","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"    /** The message or description of the task. */","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"    protected String message;","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"    /** Whether the task is done or not. */","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"     * Creates a new Task object with the specified message.","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"     * @param message The description of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"    public Task(String message) {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"        this.message \u003d message;","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-09-11"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"     * Returns the status icon of the task, dependent on whether the task is done or not.","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"     * @return [X] if task is done; [ ] if task is not done.","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"        return isDone ? \"[X]\" : \"[ ]\";","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"     * Returns the status number of the task as a String, dependent on whether the task is done or not.","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"     * @return 1 if task is done; 0 if task is not done.","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"    public String getStatusNumber() {","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"        return isDone ? \"1\" : \"0\";","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"     * Marks the given task as done.","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-09-11"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"     * Marks the given task as undone.","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"    public void unmarkAsDone() {","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-09-11"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"     * Updates the given Task with new parameters.","lastModifiedDate":"2023-09-12"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"     * @param type The UpdateType to update the task with.","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"     * @param newValue The new value to update the task with.","lastModifiedDate":"2023-09-12"},{"lineNumber":61,"author":{"gitId":"brein62"},"content":"     * @throws DukeException If the task is unable to be updated with the new values.","lastModifiedDate":"2023-09-12"},{"lineNumber":62,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":63,"author":{"gitId":"brein62"},"content":"    public abstract void update(UpdateType type, String newValue) throws DukeException;","lastModifiedDate":"2023-09-12"},{"lineNumber":64,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"brein62"},"content":"     * Checks whether the Task message contains a substring.","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"brein62"},"content":"     * @param substring The substring to search for within the Task message","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"brein62"},"content":"     * @return true if Task message contains the substring; false otherwise","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"brein62"},"content":"    public boolean contains(String substring) {","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"brein62"},"content":"        return message.contains(substring);","lastModifiedDate":"2023-09-11"},{"lineNumber":73,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"brein62"},"content":"    public abstract String toSaveFormatString();","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"brein62"},"content":"    public abstract String toString();","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":78,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":79,"author":{"gitId":"brein62"},"content":"     * Clones the internal representation of the task, then returns the new task with the information.","lastModifiedDate":"2023-09-12"},{"lineNumber":80,"author":{"gitId":"brein62"},"content":"     * @return The cloned task.","lastModifiedDate":"2023-09-12"},{"lineNumber":81,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":82,"author":{"gitId":"brein62"},"content":"    public abstract Task clone();","lastModifiedDate":"2023-09-12"},{"lineNumber":83,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"brein62":83}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import java.util.List;","lastModifiedDate":"2023-09-11"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-09-11"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import java.util.stream.Stream;","lastModifiedDate":"2023-09-11"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":" * Represents a list of tasks (todos/deadlines/events).","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"public class TaskList {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    /** The list of tasks present in the TaskList. */","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    private List\u003cTask\u003e tasks;","lastModifiedDate":"2023-09-11"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"     * Creates a new empty TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-11"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-11"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-11"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"     * Creates a new TaskList with existing data from a Stream of tasks.","lastModifiedDate":"2023-09-11"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"     * @param taskStream The Stream of tasks to add to the TaskList.","lastModifiedDate":"2023-09-11"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-11"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"    public TaskList(Stream\u003cTask\u003e taskStream) {","lastModifiedDate":"2023-09-11"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"        tasks \u003d taskStream.collect(Collectors.toList());","lastModifiedDate":"2023-09-11"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"     * Adds a new Task into the TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"     * @param task The task to be added into the TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"     * Returns the number of tasks in the TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"     * @return The number of tasks in the TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"    public int getSize() {","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"     * Removes a Task with a specified index from the TaskList, then returns the removed Task.","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"     * @param i The task index to be removed from the TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"     * @return The Task that was removed from the TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"    public Task remove(int i) {","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"        return this.tasks.remove(i - 1);","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"brein62"},"content":"     * Returns the String representation of the Task with the specified index.","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"brein62"},"content":"     * @param i The task index to be accessed within the TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"brein62"},"content":"     * @return String representation of the Task with the specified index within the TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"brein62"},"content":"    public String getTaskString(int i) {","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"brein62"},"content":"        return this.tasks.get(i - 1).toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"brein62"},"content":"     * Gets the alternate String representation of every Task within the TaskList (to be saved) and stores them into a","lastModifiedDate":"2023-09-11"},{"lineNumber":73,"author":{"gitId":"brein62"},"content":"     * List, in order.","lastModifiedDate":"2023-09-11"},{"lineNumber":74,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"brein62"},"content":"     * @return The List containing all the save-file String representation of the Tasks within the TaskList.","lastModifiedDate":"2023-09-11"},{"lineNumber":76,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"brein62"},"content":"    public List\u003cString\u003e getSavedStrings() {","lastModifiedDate":"2023-09-11"},{"lineNumber":78,"author":{"gitId":"brein62"},"content":"        return tasks","lastModifiedDate":"2023-09-11"},{"lineNumber":79,"author":{"gitId":"brein62"},"content":"                .stream()","lastModifiedDate":"2023-09-11"},{"lineNumber":80,"author":{"gitId":"brein62"},"content":"                .map(Task::toSaveFormatString)","lastModifiedDate":"2023-09-11"},{"lineNumber":81,"author":{"gitId":"brein62"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2023-09-11"},{"lineNumber":82,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":85,"author":{"gitId":"brein62"},"content":"     * Updates a Task with a specified index.","lastModifiedDate":"2023-09-12"},{"lineNumber":86,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":87,"author":{"gitId":"brein62"},"content":"     * @param i The index of the Task to update within the TaskList.","lastModifiedDate":"2023-09-12"},{"lineNumber":88,"author":{"gitId":"brein62"},"content":"     * @param updateType The part of the Task to be updated.","lastModifiedDate":"2023-09-12"},{"lineNumber":89,"author":{"gitId":"brein62"},"content":"     * @param newValue The new value to put into the updated Task (as a String).","lastModifiedDate":"2023-09-12"},{"lineNumber":90,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":91,"author":{"gitId":"brein62"},"content":"    public void updateTask(int i, UpdateType updateType, String newValue) throws DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":92,"author":{"gitId":"brein62"},"content":"        this.tasks.get(i - 1).update(updateType, newValue);","lastModifiedDate":"2023-09-12"},{"lineNumber":93,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":94,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":95,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":96,"author":{"gitId":"brein62"},"content":"     * Clones a Task and adds it to the back of the TaskList.","lastModifiedDate":"2023-09-12"},{"lineNumber":97,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":98,"author":{"gitId":"brein62"},"content":"     * @param i The index of the Task to clone within the TaskList.","lastModifiedDate":"2023-09-12"},{"lineNumber":99,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":100,"author":{"gitId":"brein62"},"content":"    public void cloneTask(int i) {","lastModifiedDate":"2023-09-12"},{"lineNumber":101,"author":{"gitId":"brein62"},"content":"        Task toClone \u003d tasks.get(i - 1).clone();","lastModifiedDate":"2023-09-12"},{"lineNumber":102,"author":{"gitId":"brein62"},"content":"        tasks.add(toClone);","lastModifiedDate":"2023-09-12"},{"lineNumber":103,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":104,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":105,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":106,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"brein62"},"content":"     * Marks a Task with a specified index as done.","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"brein62"},"content":"     * @param i The index of the Task to mark as done within the TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"brein62"},"content":"    public void markAsDone(int i) {","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"brein62"},"content":"        this.tasks.get(i - 1).markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":116,"author":{"gitId":"brein62"},"content":"     * Marks a Task with a specified index as undone.","lastModifiedDate":"2023-08-31"},{"lineNumber":117,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":118,"author":{"gitId":"brein62"},"content":"     * @param i The index of the Task to mark as undone within the TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":119,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":120,"author":{"gitId":"brein62"},"content":"    public void unmarkAsDone(int i) {","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"brein62"},"content":"        this.tasks.get(i - 1).unmarkAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":124,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":125,"author":{"gitId":"brein62"},"content":"     * Finds all tasks with description containing the search string, and returns the list of tasks as a TaskList.","lastModifiedDate":"2023-09-05"},{"lineNumber":126,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":127,"author":{"gitId":"brein62"},"content":"     * @param findStr The search string to search for the tasks.","lastModifiedDate":"2023-09-05"},{"lineNumber":128,"author":{"gitId":"brein62"},"content":"     * @return TaskList containing all tasks with description containing the search string; an empty TaskList if no","lastModifiedDate":"2023-09-05"},{"lineNumber":129,"author":{"gitId":"brein62"},"content":"     *         matching tasks are found.","lastModifiedDate":"2023-09-05"},{"lineNumber":130,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":131,"author":{"gitId":"brein62"},"content":"    public TaskList find(String findStr) {","lastModifiedDate":"2023-08-31"},{"lineNumber":132,"author":{"gitId":"brein62"},"content":"        return new TaskList(tasks","lastModifiedDate":"2023-09-11"},{"lineNumber":133,"author":{"gitId":"brein62"},"content":"                .stream()","lastModifiedDate":"2023-09-11"},{"lineNumber":134,"author":{"gitId":"brein62"},"content":"                .filter(task -\u003e task.contains(findStr)));","lastModifiedDate":"2023-09-11"},{"lineNumber":135,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":136,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":136}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":" * Represents a todo task, containing a description.","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"     * Returns a new Todo task containing the message.","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"     * @param message The description for the to-do.","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    public Todo(String message) {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"        super(message);","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"     * Updates a todo task based on the specified update type and value.","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-09-12"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"     * @param type The UpdateType to update the task with.","lastModifiedDate":"2023-09-12"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"     * @param newValue The new value to update the task with.","lastModifiedDate":"2023-09-12"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"     * @throws DukeException If the type and new value parameters are invalid.","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"    public void update(UpdateType type, String newValue) throws DukeException {","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"        switch (type) {","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"        case DESCRIPTION:","lastModifiedDate":"2023-09-12"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"            message \u003d newValue;","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"            break;","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"        case DATE1:","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"            // fallthrough","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"        case DATE2:","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"Cannot update: Todos do not have dates!\");","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"            // exception thrown, no break statement needed","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"        default:","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"            assert false : \"Invalid update type!\";","lastModifiedDate":"2023-09-20"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"            throw new DukeException(\"Invalid update type!\");","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"            // exception thrown, no break statement needed","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"     * Returns a String containing information within the Todo task, formatted to be saved.","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"     * @return The to-do task, formatted as a String to be saved in the save file.","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"    public String toSaveFormatString() {","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"        return \"T | \" + getStatusNumber() + \" | \" + message;","lastModifiedDate":"2023-09-11"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"     * Returns a String representation of the Todo task, formatted for output in the application.","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"     * @return The to-do task, formatted as a String for output in the application.","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":61,"author":{"gitId":"brein62"},"content":"        return \"[T]\" + getStatusIcon() + \" \" + message;","lastModifiedDate":"2023-09-11"},{"lineNumber":62,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":63,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":64,"author":{"gitId":"brein62"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":65,"author":{"gitId":"brein62"},"content":"    public Todo clone() {","lastModifiedDate":"2023-09-12"},{"lineNumber":66,"author":{"gitId":"brein62"},"content":"        return new Todo(message);","lastModifiedDate":"2023-09-12"},{"lineNumber":67,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-12"},{"lineNumber":68,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"brein62":68}},{"path":"src/main/java/duke/task/UpdateType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.task;","lastModifiedDate":"2023-09-12"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-12"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":" * Specifies the type of updates that can be performed onto the task.","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-12"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"public enum UpdateType {","lastModifiedDate":"2023-09-12"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"    DESCRIPTION, DATE1, DATE2","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-09-12"}],"authorContributionMap":{"brein62":8}},{"path":"src/main/java/duke/util/Formatter.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.util;","lastModifiedDate":"2023-09-11"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-11"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-11"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"/**","lastModifiedDate":"2023-09-11"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":" * A formatter that provides static utility methods to process LocalDateTime and other objects into formats like","lastModifiedDate":"2023-09-11"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":" * String.","lastModifiedDate":"2023-09-11"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":" */","lastModifiedDate":"2023-09-11"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"public class Formatter {","lastModifiedDate":"2023-09-11"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"    /**","lastModifiedDate":"2023-09-11"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"     * Formats a LocalDateTime object in the format `MMM dd yyyy, HH:mm:ss`, and returns the result as a String.","lastModifiedDate":"2023-09-11"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"     *","lastModifiedDate":"2023-09-11"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"     * @param d The LocalDateTime object to format as a String.","lastModifiedDate":"2023-09-11"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"     * @return String represented by the LocalDateTime, in the format `MMM dd yyyy, HH:mm:ss`.","lastModifiedDate":"2023-09-11"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"     */","lastModifiedDate":"2023-09-11"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"    public static String formatDateTime(LocalDateTime d) {","lastModifiedDate":"2023-09-11"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"        return d.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, HH:mm:ss\"));","lastModifiedDate":"2023-09-11"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-11"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-09-11"}],"authorContributionMap":{"brein62":21}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"\u003c?import javafx.scene.Group?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"      \u003cGroup HBox.hgrow\u003d\"NEVER\"\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"         \u003cchildren\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"               \u003cLabel fx:id\u003d\"dialog\" layoutY\u003d\"9.0\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"300.0\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-09-20"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"               \u003cpadding\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"                  \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"               \u003c/padding\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"            \u003c/Label\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"         \u003c/children\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"         \u003cHBox.margin\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"            \u003cInsets /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"         \u003c/HBox.margin\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"      \u003c/Group\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"         \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"65.0\" fitWidth\u003d\"65.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2023-09-20"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"         \u003cHBox.margin\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"            \u003cInsets left\u003d\"5.0\" right\u003d\"5.0\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"         \u003c/HBox.margin\u003e\u003c/ImageView\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"brein62":31}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"\u003c?import javafx.scene.layout.Pane?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"      \u003cVBox prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\"\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"         \u003cchildren\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"            \u003cPane prefHeight\u003d\"84.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: #d2d2d2;\"\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"               \u003cchildren\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"                  \u003cLabel fx:id\u003d\"bobLabel\" alignment\u003d\"CENTER\" contentDisplay\u003d\"CENTER\" layoutX\u003d\"131.0\" layoutY\u003d\"8.0\" text\u003d\"Bob the Chatbot\" textAlignment\u003d\"CENTER\"\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"                     \u003cfont\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"                        \u003cFont size\u003d\"20.0\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"                     \u003c/font\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"                  \u003c/Label\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"               \u003c/children\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"            \u003c/Pane\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"              \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"                  \u003ccontent\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"                      \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"503.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"                  \u003c/content\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"              \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"         \u003c/children\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"      \u003c/VBox\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"brein62":35}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"import duke.command.Command;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"public class ParserTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"    public void parse_otherMessage_dukeExceptionThrown() {","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"nonsense\");","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"            assertEquals(\"I\u0027m sorry, but I don\u0027t know what that means :-(\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"    public void parseEvent_badEventParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"event /from Jan 2023 /to FSJsf\");","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"            assertEquals(\"An event requires exactly 1 from date and 1 to date.\", e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"    public void parseEvent_badEventFromParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"event some /from 2023-10-10T12:34:50 /from 2023-10-10T12:34:56\");","lastModifiedDate":"2023-09-20"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-09-20"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"            assertEquals(\"An event requires exactly 1 from date and 1 to date.\", e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"    public void parseEvent_badEventToParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"event some /to 2023-10-10T12:34:50 /to 2023-10-10T12:34:56\");","lastModifiedDate":"2023-09-20"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-09-20"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"            assertEquals(\"An event requires exactly 1 from date and 1 to date.\", e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"    public void parseEvent_emptyEventParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"event \");","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"            assertEquals(\"The description of an event cannot be empty.\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"brein62"},"content":"    public void parseDeadline_badDeadlineParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":66,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"deadline /by asdk 2023\");","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"brein62"},"content":"            assertEquals(\"A deadline requires exactly 1 due date.\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"brein62"},"content":"    public void parseDeadline_emptyDeadlineParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":76,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"deadline \");","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"brein62"},"content":"            assertEquals(\"The description of a deadline cannot be empty.\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"brein62"},"content":"    public void parseTodo_emptyTodoParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":86,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"todo \");","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"brein62"},"content":"            assertEquals(\"The description of a todo cannot be empty.\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"brein62"},"content":"    public void parseMark_emptyMarkParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":96,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"mark \");","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"brein62"},"content":"            assertEquals(\"You need to specify the index of the task to mark.\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"brein62"},"content":"    public void parseMark_badMarkParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":106,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"mark test\");","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":110,"author":{"gitId":"brein62"},"content":"            assertEquals(\"The index of the task to mark is not a valid integer.\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"brein62"},"content":"    public void parseUnmark_emptyUnmarkParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":116,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"unmark \");","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"brein62"},"content":"            assertEquals(\"You need to specify the index of the task to unmark.\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":125,"author":{"gitId":"brein62"},"content":"    public void parseUnmark_badUnmarkParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":126,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":127,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"unmark test\");","lastModifiedDate":"2023-08-30"},{"lineNumber":128,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-08-30"},{"lineNumber":129,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":130,"author":{"gitId":"brein62"},"content":"            assertEquals(\"The index of the task to unmark is not a valid integer.\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":131,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":132,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":133,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":134,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":135,"author":{"gitId":"brein62"},"content":"    public void parseDelete_emptyDeleteParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":136,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":137,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"delete \");","lastModifiedDate":"2023-08-30"},{"lineNumber":138,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-08-30"},{"lineNumber":139,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":140,"author":{"gitId":"brein62"},"content":"            assertEquals(\"You need to specify the index of the task to delete.\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":141,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":142,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":143,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":144,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":145,"author":{"gitId":"brein62"},"content":"    public void parseDelete_badDeleteParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":146,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":147,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"delete test\");","lastModifiedDate":"2023-08-30"},{"lineNumber":148,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-08-30"},{"lineNumber":149,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":150,"author":{"gitId":"brein62"},"content":"            assertEquals(\"The index of the task to delete is not a valid integer.\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":151,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":152,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":153,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":154,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-13"},{"lineNumber":155,"author":{"gitId":"brein62"},"content":"    public void parseFind_emptyFindParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":156,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":157,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"find \");","lastModifiedDate":"2023-09-13"},{"lineNumber":158,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-09-13"},{"lineNumber":159,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":160,"author":{"gitId":"brein62"},"content":"            assertEquals(\"You need to specify the keyword to find the tasks.\", e.getMessage());","lastModifiedDate":"2023-09-13"},{"lineNumber":161,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":162,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":163,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":164,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-13"},{"lineNumber":165,"author":{"gitId":"brein62"},"content":"    public void parseFind_emptyUpdateParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":166,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":167,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"update \");","lastModifiedDate":"2023-09-13"},{"lineNumber":168,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-09-13"},{"lineNumber":169,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":170,"author":{"gitId":"brein62"},"content":"            assertEquals(\"You need to specify which task and what to update.\", e.getMessage());","lastModifiedDate":"2023-09-13"},{"lineNumber":171,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":172,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":173,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":174,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-13"},{"lineNumber":175,"author":{"gitId":"brein62"},"content":"    public void parseUpdate_badUpdateParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":176,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":177,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"update nothing\");","lastModifiedDate":"2023-09-13"},{"lineNumber":178,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-09-13"},{"lineNumber":179,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":180,"author":{"gitId":"brein62"},"content":"            assertEquals(\"You need to specify what to update in the task.\", e.getMessage());","lastModifiedDate":"2023-09-13"},{"lineNumber":181,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":182,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":183,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":184,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"update 23\");","lastModifiedDate":"2023-09-13"},{"lineNumber":185,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-09-13"},{"lineNumber":186,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":187,"author":{"gitId":"brein62"},"content":"            assertEquals(\"You need to specify what to update in the task.\", e.getMessage());","lastModifiedDate":"2023-09-13"},{"lineNumber":188,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":189,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":190,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":191,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"update 2 ms message\");","lastModifiedDate":"2023-09-13"},{"lineNumber":192,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-09-13"},{"lineNumber":193,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":194,"author":{"gitId":"brein62"},"content":"            assertEquals(\"Update type is invalid!\", e.getMessage());","lastModifiedDate":"2023-09-13"},{"lineNumber":195,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":196,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":197,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":198,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-13"},{"lineNumber":199,"author":{"gitId":"brein62"},"content":"    public void parseClone_emptyCloneParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":200,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":201,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"clone \");","lastModifiedDate":"2023-09-13"},{"lineNumber":202,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-09-13"},{"lineNumber":203,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":204,"author":{"gitId":"brein62"},"content":"            assertEquals(\"You need to specify the index of the task to clone.\", e.getMessage());","lastModifiedDate":"2023-09-13"},{"lineNumber":205,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":206,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":207,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":208,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-13"},{"lineNumber":209,"author":{"gitId":"brein62"},"content":"    public void parseClone_badCloneParams_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":210,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":211,"author":{"gitId":"brein62"},"content":"            Parser.parse(\"clone test\");","lastModifiedDate":"2023-09-13"},{"lineNumber":212,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-09-13"},{"lineNumber":213,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":214,"author":{"gitId":"brein62"},"content":"            assertEquals(\"The index of the task to clone is not a valid integer.\", e.getMessage());","lastModifiedDate":"2023-09-13"},{"lineNumber":215,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":216,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":217,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":218,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":219,"author":{"gitId":"brein62"},"content":"    public void parseExit_exitCommand_success() throws DukeException {","lastModifiedDate":"2023-09-20"},{"lineNumber":220,"author":{"gitId":"brein62"},"content":"        Command c \u003d Parser.parse(\"bye\");","lastModifiedDate":"2023-08-30"},{"lineNumber":221,"author":{"gitId":"brein62"},"content":"        assertTrue(c.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":222,"author":{"gitId":"brein62"},"content":"        assertEquals(c.getCommandType(), \"Exit\");","lastModifiedDate":"2023-08-30"},{"lineNumber":223,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":224,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":225,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":226,"author":{"gitId":"brein62"},"content":"    public void parseList_listCommand_success() throws DukeException {","lastModifiedDate":"2023-09-20"},{"lineNumber":227,"author":{"gitId":"brein62"},"content":"        Command c \u003d Parser.parse(\"list\");","lastModifiedDate":"2023-08-30"},{"lineNumber":228,"author":{"gitId":"brein62"},"content":"        assertFalse(c.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":229,"author":{"gitId":"brein62"},"content":"        assertEquals(c.getCommandType(), \"List\");","lastModifiedDate":"2023-08-30"},{"lineNumber":230,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":231,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":232,"author":{"gitId":"brein62"},"content":"    public void parseMark_markCommand_success() throws DukeException {","lastModifiedDate":"2023-09-20"},{"lineNumber":233,"author":{"gitId":"brein62"},"content":"        Command c \u003d Parser.parse(\"mark 4\");","lastModifiedDate":"2023-08-30"},{"lineNumber":234,"author":{"gitId":"brein62"},"content":"        assertFalse(c.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":235,"author":{"gitId":"brein62"},"content":"        assertEquals(c.getCommandType(), \"Mark\");","lastModifiedDate":"2023-08-30"},{"lineNumber":236,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":237,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":238,"author":{"gitId":"brein62"},"content":"    public void parseUnmark_unmarkCommand_success() throws DukeException {","lastModifiedDate":"2023-09-20"},{"lineNumber":239,"author":{"gitId":"brein62"},"content":"        Command c \u003d Parser.parse(\"unmark 4\");","lastModifiedDate":"2023-08-30"},{"lineNumber":240,"author":{"gitId":"brein62"},"content":"        assertFalse(c.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":241,"author":{"gitId":"brein62"},"content":"        assertEquals(c.getCommandType(), \"Unmark\");","lastModifiedDate":"2023-08-30"},{"lineNumber":242,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":243,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":244,"author":{"gitId":"brein62"},"content":"    public void parseDelete_deleteCommand_success() throws DukeException {","lastModifiedDate":"2023-09-20"},{"lineNumber":245,"author":{"gitId":"brein62"},"content":"        Command c \u003d Parser.parse(\"delete 6\");","lastModifiedDate":"2023-08-30"},{"lineNumber":246,"author":{"gitId":"brein62"},"content":"        assertFalse(c.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":247,"author":{"gitId":"brein62"},"content":"        assertEquals(c.getCommandType(), \"Delete\");","lastModifiedDate":"2023-08-30"},{"lineNumber":248,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":249,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":250,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":251,"author":{"gitId":"brein62"},"content":"    public void parseTodo_todoCommand_success() throws DukeException {","lastModifiedDate":"2023-09-20"},{"lineNumber":252,"author":{"gitId":"brein62"},"content":"        Command c \u003d Parser.parse(\"todo something\");","lastModifiedDate":"2023-08-30"},{"lineNumber":253,"author":{"gitId":"brein62"},"content":"        assertFalse(c.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":254,"author":{"gitId":"brein62"},"content":"        assertEquals(c.getCommandType(), \"Add Todo\");","lastModifiedDate":"2023-08-30"},{"lineNumber":255,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":256,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":257,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":258,"author":{"gitId":"brein62"},"content":"    public void parseDeadline_deadlineCommand_success() throws DukeException {","lastModifiedDate":"2023-09-20"},{"lineNumber":259,"author":{"gitId":"brein62"},"content":"        Command c \u003d Parser.parse(\"deadline sth /by 2023-11-11T12:30:00\");","lastModifiedDate":"2023-08-30"},{"lineNumber":260,"author":{"gitId":"brein62"},"content":"        assertFalse(c.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":261,"author":{"gitId":"brein62"},"content":"        assertEquals(c.getCommandType(), \"Add Deadline\");","lastModifiedDate":"2023-08-30"},{"lineNumber":262,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":263,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":264,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":265,"author":{"gitId":"brein62"},"content":"    public void parseEvent_eventCommand_success() throws DukeException {","lastModifiedDate":"2023-09-20"},{"lineNumber":266,"author":{"gitId":"brein62"},"content":"        Command c \u003d Parser.parse(\"event some event /from 2023-11-11T12:30:00 /to 2023-11-12T12:00:00\");","lastModifiedDate":"2023-08-30"},{"lineNumber":267,"author":{"gitId":"brein62"},"content":"        assertFalse(c.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":268,"author":{"gitId":"brein62"},"content":"        assertEquals(c.getCommandType(), \"Add Event\");","lastModifiedDate":"2023-08-30"},{"lineNumber":269,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":270,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":271,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-13"},{"lineNumber":272,"author":{"gitId":"brein62"},"content":"    public void parseEvent_flippedEventParams_success() throws DukeException {","lastModifiedDate":"2023-09-20"},{"lineNumber":273,"author":{"gitId":"brein62"},"content":"        Command c \u003d Parser.parse(\"event some event /to 2023-11-12T12:55:00 /from 2023-11-11T12:30:00\");","lastModifiedDate":"2023-09-20"},{"lineNumber":274,"author":{"gitId":"brein62"},"content":"        assertFalse(c.isExit());","lastModifiedDate":"2023-09-20"},{"lineNumber":275,"author":{"gitId":"brein62"},"content":"        assertEquals(c.getCommandType(), \"Add Event\");","lastModifiedDate":"2023-09-20"},{"lineNumber":276,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":277,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":278,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":279,"author":{"gitId":"brein62"},"content":"    public void parseUpdate_updateDescription_success() throws DukeException {","lastModifiedDate":"2023-09-20"},{"lineNumber":280,"author":{"gitId":"brein62"},"content":"        Command[] commands \u003d { Parser.parse(\"update 3 message something\"),","lastModifiedDate":"2023-09-13"},{"lineNumber":281,"author":{"gitId":"brein62"},"content":"                Parser.parse(\"update 3 msg something smells\"),","lastModifiedDate":"2023-09-13"},{"lineNumber":282,"author":{"gitId":"brein62"},"content":"                Parser.parse(\"update 3 description whatever df 123\") };","lastModifiedDate":"2023-09-13"},{"lineNumber":283,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":284,"author":{"gitId":"brein62"},"content":"        for (Command c : commands) {","lastModifiedDate":"2023-09-13"},{"lineNumber":285,"author":{"gitId":"brein62"},"content":"            assertFalse(c.isExit());","lastModifiedDate":"2023-09-13"},{"lineNumber":286,"author":{"gitId":"brein62"},"content":"            assertEquals(c.getCommandType(), \"Update DESCRIPTION\");","lastModifiedDate":"2023-09-13"},{"lineNumber":287,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":288,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":289,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":290,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-13"},{"lineNumber":291,"author":{"gitId":"brein62"},"content":"    public void parseUpdate_updateDate1_success() throws DukeException {","lastModifiedDate":"2023-09-20"},{"lineNumber":292,"author":{"gitId":"brein62"},"content":"        Command[] commands \u003d { Parser.parse(\"update 3 /from 2023-11-12T12:00:00\"),","lastModifiedDate":"2023-09-13"},{"lineNumber":293,"author":{"gitId":"brein62"},"content":"                Parser.parse(\"update 3 date1 2023-11-12T12:00:00\"),","lastModifiedDate":"2023-09-13"},{"lineNumber":294,"author":{"gitId":"brein62"},"content":"                Parser.parse(\"update 3 /by 2023-11-12T12:00:00\"),","lastModifiedDate":"2023-09-13"},{"lineNumber":295,"author":{"gitId":"brein62"},"content":"                Parser.parse(\"update 3 by 2023-11-12T12:00:00\"),","lastModifiedDate":"2023-09-13"},{"lineNumber":296,"author":{"gitId":"brein62"},"content":"                Parser.parse(\"update 3 from 2023-11-12T12:00:00\"),","lastModifiedDate":"2023-09-13"},{"lineNumber":297,"author":{"gitId":"brein62"},"content":"                Parser.parse(\"update 3 /deadline 2023-11-12T12:00:00\"),","lastModifiedDate":"2023-09-13"},{"lineNumber":298,"author":{"gitId":"brein62"},"content":"                Parser.parse(\"update 3 deadline 2023-11-12T12:00:00\") };","lastModifiedDate":"2023-09-13"},{"lineNumber":299,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":300,"author":{"gitId":"brein62"},"content":"        for (Command c : commands) {","lastModifiedDate":"2023-09-13"},{"lineNumber":301,"author":{"gitId":"brein62"},"content":"            assertFalse(c.isExit());","lastModifiedDate":"2023-09-13"},{"lineNumber":302,"author":{"gitId":"brein62"},"content":"            assertEquals(c.getCommandType(), \"Update DATE1\");","lastModifiedDate":"2023-09-13"},{"lineNumber":303,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":304,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":305,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":306,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-13"},{"lineNumber":307,"author":{"gitId":"brein62"},"content":"    public void parseUpdate_updateDate2_success() throws DukeException {","lastModifiedDate":"2023-09-20"},{"lineNumber":308,"author":{"gitId":"brein62"},"content":"        Command[] commands \u003d { Parser.parse(\"update 3 /to 2023-11-12T12:00:00\"),","lastModifiedDate":"2023-09-13"},{"lineNumber":309,"author":{"gitId":"brein62"},"content":"                Parser.parse(\"update 3 date2 2023-11-12T12:00:00\"),","lastModifiedDate":"2023-09-13"},{"lineNumber":310,"author":{"gitId":"brein62"},"content":"                Parser.parse(\"update 3 to 2023-11-12T12:00:00\") };","lastModifiedDate":"2023-09-13"},{"lineNumber":311,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":312,"author":{"gitId":"brein62"},"content":"        for (Command c : commands) {","lastModifiedDate":"2023-09-13"},{"lineNumber":313,"author":{"gitId":"brein62"},"content":"            assertFalse(c.isExit());","lastModifiedDate":"2023-09-13"},{"lineNumber":314,"author":{"gitId":"brein62"},"content":"            assertEquals(c.getCommandType(), \"Update DATE2\");","lastModifiedDate":"2023-09-13"},{"lineNumber":315,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":316,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":317,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":318,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-13"},{"lineNumber":319,"author":{"gitId":"brein62"},"content":"    public void parseClone_cloneCommand_success() throws DukeException {","lastModifiedDate":"2023-09-20"},{"lineNumber":320,"author":{"gitId":"brein62"},"content":"        Command c \u003d Parser.parse(\"clone 3\");","lastModifiedDate":"2023-09-13"},{"lineNumber":321,"author":{"gitId":"brein62"},"content":"        assertFalse(c.isExit());","lastModifiedDate":"2023-09-13"},{"lineNumber":322,"author":{"gitId":"brein62"},"content":"        assertEquals(c.getCommandType(), \"Clone\");","lastModifiedDate":"2023-09-13"},{"lineNumber":323,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":324,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":324}},{"path":"src/test/java/duke/command/AddCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"public class AddCommandTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"    public void getCommandType_todo_success() {","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"        AddCommand a \u003d new AddCommand(\"Hello\");","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"        assertEquals(\"Add Todo\", a.getCommandType());","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    public void getCommandType_deadline_success() {","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"        AddCommand a \u003d new AddCommand(\"Hello\", \"2023-10-10T12:34:56\");","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"        assertEquals(\"Add Deadline\", a.getCommandType());","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"    public void getCommandType_event_success() {","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"        AddCommand a \u003d new AddCommand(\"Hello\",","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"                \"2023-10-10T12:34:56\", \"2023-10-10T12:34:57\");","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"        assertEquals(\"Add Event\", a.getCommandType());","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"    public void testIsExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"        AddCommand a \u003d new AddCommand(\"Hello\");","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"        AddCommand b \u003d new AddCommand(\"Hello\", \"2023-10-10T12:34:56\");","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"        AddCommand c \u003d new AddCommand(\"Hello\",","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"                \"2023-10-10T12:34:56\", \"2023-10-10T12:34:57\");","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"        assertFalse(a.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"        assertFalse(b.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"        assertFalse(c.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":38}},{"path":"src/test/java/duke/command/CloneCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"public class CloneCommandTest {","lastModifiedDate":"2023-09-13"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-13"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"    public void testGetCommandType() {","lastModifiedDate":"2023-09-13"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"        CloneCommand c \u003d new CloneCommand(13);","lastModifiedDate":"2023-09-13"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"        assertEquals(c.getCommandType(), \"Clone\");","lastModifiedDate":"2023-09-13"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-13"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    public void testIsExit() {","lastModifiedDate":"2023-09-13"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"        CloneCommand c \u003d new CloneCommand(13);","lastModifiedDate":"2023-09-13"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"        assertFalse(c.isExit());","lastModifiedDate":"2023-09-13"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-09-13"}],"authorContributionMap":{"brein62":20}},{"path":"src/test/java/duke/command/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"    public void testGetCommandType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"        DeleteCommand d \u003d new DeleteCommand(13);","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"        assertEquals(d.getCommandType(), \"Delete\");","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    public void testIsExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"        DeleteCommand d \u003d new DeleteCommand(13);","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"        assertFalse(d.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":20}},{"path":"src/test/java/duke/command/ExitCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"public class ExitCommandTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"    public void testGetCommandType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"        ExitCommand e \u003d new ExitCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"        assertEquals(e.getCommandType(), \"Exit\");","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    public void testIsExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"        ExitCommand e \u003d new ExitCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"        assertTrue(e.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":20}},{"path":"src/test/java/duke/command/FindCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"public class FindCommandTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"    public void testGetCommandType() {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"        FindCommand f \u003d new FindCommand(\"something\");","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"        assertEquals(f.getCommandType(), \"Find\");","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    public void testIsExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"        FindCommand f \u003d new FindCommand(\"something\");","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"        assertFalse(f.isExit());","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"brein62":20}},{"path":"src/test/java/duke/command/ListCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"public class ListCommandTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"    public void testGetCommandType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"        ListCommand l \u003d new ListCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"        assertEquals(l.getCommandType(), \"List\");","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    public void testIsExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"        ListCommand l \u003d new ListCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"        assertFalse(l.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":20}},{"path":"src/test/java/duke/command/MarkCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"public class MarkCommandTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"    public void testGetCommandType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"        MarkCommand m \u003d new MarkCommand(13);","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"        assertEquals(m.getCommandType(), \"Mark\");","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    public void testIsExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"        MarkCommand m \u003d new MarkCommand(13);","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"        assertFalse(m.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":20}},{"path":"src/test/java/duke/command/UnmarkCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"public class UnmarkCommandTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"    public void testGetCommandType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"        UnmarkCommand um \u003d new UnmarkCommand(13);","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"        assertEquals(um.getCommandType(), \"Unmark\");","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    public void testIsExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"        UnmarkCommand um \u003d new UnmarkCommand(13);","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"        assertFalse(um.isExit());","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":20}},{"path":"src/test/java/duke/command/UpdateCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.command;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"import duke.task.UpdateType;","lastModifiedDate":"2023-09-13"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"public class UpdateCommandTest {","lastModifiedDate":"2023-09-13"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-13"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    public void getCommandType_description_success() {","lastModifiedDate":"2023-09-13"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"        UpdateCommand u \u003d new UpdateCommand(4, UpdateType.DESCRIPTION, \"something\");","lastModifiedDate":"2023-09-13"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"        assertEquals(\"Update DESCRIPTION\", u.getCommandType());","lastModifiedDate":"2023-09-13"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-13"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    public void getCommandType_date1_success() {","lastModifiedDate":"2023-09-13"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"        UpdateCommand u \u003d new UpdateCommand(5, UpdateType.DATE1, \"2023-10-10T12:34:56\");","lastModifiedDate":"2023-09-13"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"        assertEquals(\"Update DATE1\", u.getCommandType());","lastModifiedDate":"2023-09-13"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-13"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"    public void getCommandType_date2_success() {","lastModifiedDate":"2023-09-13"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"        UpdateCommand u \u003d new UpdateCommand(3, UpdateType.DATE2, \"2023-10-10T12:34:57\");","lastModifiedDate":"2023-09-13"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"        assertEquals(\"Update DATE2\", u.getCommandType());","lastModifiedDate":"2023-09-13"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-13"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"    public void testIsExit() {","lastModifiedDate":"2023-09-13"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"        UpdateCommand a \u003d new UpdateCommand(4, UpdateType.DESCRIPTION, \"something\");","lastModifiedDate":"2023-09-13"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"        UpdateCommand b \u003d new UpdateCommand(5, UpdateType.DATE1, \"2023-10-10T12:34:56\");","lastModifiedDate":"2023-09-13"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"        UpdateCommand c \u003d new UpdateCommand(3, UpdateType.DATE2, \"2023-10-10T12:34:57\");","lastModifiedDate":"2023-09-13"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"        assertFalse(a.isExit());","lastModifiedDate":"2023-09-13"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"        assertFalse(b.isExit());","lastModifiedDate":"2023-09-13"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"        assertFalse(c.isExit());","lastModifiedDate":"2023-09-13"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-09-13"}],"authorContributionMap":{"brein62":39}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-20"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-20"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    public void testCreate() {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"        Deadline d \u003d new Deadline(\"Message\",","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"                LocalDateTime.parse(\"2023-10-10T12:00:00\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"        assertEquals(\"Message\", d.message);","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"    public void testToSaveFormatString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"        Deadline d \u003d new Deadline(\"Message\",","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"                LocalDateTime.parse(\"2023-10-10T12:00:00\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"        assertEquals(\"D | 0 | Message | 2023-10-10T12:00\", d.toSaveFormatString());","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"        d.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"        assertEquals(\"D | 1 | Message | 2023-10-10T12:00\", d.toSaveFormatString());","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"    public void testToString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"        Deadline d \u003d new Deadline(\"Message\",","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"                LocalDateTime.parse(\"2023-12-13T12:45:00\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"        assertEquals(\"[D][ ] Message (by: Dec 13 2023, 12:45:00)\", d.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"        d.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"        assertEquals(\"[D][X] Message (by: Dec 13 2023, 12:45:00)\", d.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"    public void testUpdate_validDate_success() {","lastModifiedDate":"2023-09-20"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"            Deadline d \u003d new Deadline(\"Message\",","lastModifiedDate":"2023-09-20"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-10T12:00:00\"));","lastModifiedDate":"2023-09-20"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"            d.update(UpdateType.DESCRIPTION, \"New Deadline\");","lastModifiedDate":"2023-09-20"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"            d.update(UpdateType.DATE1, \"2023-10-09T12:34:56\");","lastModifiedDate":"2023-09-20"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"            assertEquals(\"[D][ ] New Deadline (by: Oct 09 2023, 12:34:56)\",","lastModifiedDate":"2023-09-20"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"                    d.toString());","lastModifiedDate":"2023-09-20"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"            fail(\"DukeException should not be thrown!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"    public void testUpdate_invalidDate_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"            Deadline d \u003d new Deadline(\"Message\",","lastModifiedDate":"2023-09-20"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-10T12:00:00\"));","lastModifiedDate":"2023-09-20"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"            d.update(UpdateType.DESCRIPTION, \"New Deadline\");","lastModifiedDate":"2023-09-20"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"            d.update(UpdateType.DATE1, \"this is not a date\");","lastModifiedDate":"2023-09-20"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"            fail(\"DukeException should be thrown!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":61,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":62,"author":{"gitId":"brein62"},"content":"            assertEquals(\"Cannot parse date/time of new deadline!\", e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":63,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":64,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":65,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":66,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":67,"author":{"gitId":"brein62"},"content":"    public void testUpdate_invalidUpdateDateType_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":68,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":69,"author":{"gitId":"brein62"},"content":"            Deadline d \u003d new Deadline(\"Message\",","lastModifiedDate":"2023-09-20"},{"lineNumber":70,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-10T12:00:00\"));","lastModifiedDate":"2023-09-20"},{"lineNumber":71,"author":{"gitId":"brein62"},"content":"            d.update(UpdateType.DESCRIPTION, \"New Deadline\");","lastModifiedDate":"2023-09-20"},{"lineNumber":72,"author":{"gitId":"brein62"},"content":"            d.update(UpdateType.DATE2, \"2023-10-10T12:00:01\");","lastModifiedDate":"2023-09-20"},{"lineNumber":73,"author":{"gitId":"brein62"},"content":"            fail(\"DukeException should be thrown!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":74,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":75,"author":{"gitId":"brein62"},"content":"            assertEquals(\"Cannot update: Deadlines have only one deadline date!\", e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":76,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":77,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":78,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":79,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":80,"author":{"gitId":"brein62"},"content":"    public void testClone() {","lastModifiedDate":"2023-09-20"},{"lineNumber":81,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":82,"author":{"gitId":"brein62"},"content":"            Deadline d \u003d new Deadline(\"Deadline\",","lastModifiedDate":"2023-09-20"},{"lineNumber":83,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-10T12:00:00\"));","lastModifiedDate":"2023-09-20"},{"lineNumber":84,"author":{"gitId":"brein62"},"content":"            d.markAsDone();","lastModifiedDate":"2023-09-20"},{"lineNumber":85,"author":{"gitId":"brein62"},"content":"            d.update(UpdateType.DESCRIPTION, \"New Deadline\");","lastModifiedDate":"2023-09-20"},{"lineNumber":86,"author":{"gitId":"brein62"},"content":"            Deadline d2 \u003d d.clone();","lastModifiedDate":"2023-09-20"},{"lineNumber":87,"author":{"gitId":"brein62"},"content":"            d.update(UpdateType.DESCRIPTION, \"Old Deadline\");","lastModifiedDate":"2023-09-20"},{"lineNumber":88,"author":{"gitId":"brein62"},"content":"            d2.update(UpdateType.DATE1, \"2023-10-09T12:34:56\");","lastModifiedDate":"2023-09-20"},{"lineNumber":89,"author":{"gitId":"brein62"},"content":"            assertEquals(\"[D][X] Old Deadline (by: Oct 10 2023, 12:00:00)\",","lastModifiedDate":"2023-09-20"},{"lineNumber":90,"author":{"gitId":"brein62"},"content":"                    d.toString());","lastModifiedDate":"2023-09-20"},{"lineNumber":91,"author":{"gitId":"brein62"},"content":"            assertEquals(\"[D][ ] New Deadline (by: Oct 09 2023, 12:34:56)\",","lastModifiedDate":"2023-09-20"},{"lineNumber":92,"author":{"gitId":"brein62"},"content":"                    d2.toString());","lastModifiedDate":"2023-09-20"},{"lineNumber":93,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":94,"author":{"gitId":"brein62"},"content":"            fail(\"DukeException should not be thrown!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":95,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":96,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":97,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":97}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-20"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-20"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"public class EventTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    public void testCreate_validDates_success() {","lastModifiedDate":"2023-09-20"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"            Event ev \u003d new Event(\"Message\",","lastModifiedDate":"2023-09-20"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-10T12:00:00\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-11T13:30:45\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"            assertEquals(\"Message\", ev.message);","lastModifiedDate":"2023-09-20"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"            fail(\"DukeException should not be thrown!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"    public void testCreate_equalDates_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"            Event ev \u003d new Event(\"Message\",","lastModifiedDate":"2023-09-20"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-10T12:00:00\"),","lastModifiedDate":"2023-09-20"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-10T12:00:00\"));","lastModifiedDate":"2023-09-20"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-09-20"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"            assertEquals(\"Invalid date parameter: From date must be before to date!\", e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"    public void testCreate_invalidDates_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"            Event ev \u003d new Event(\"Error\",","lastModifiedDate":"2023-09-20"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-11T12:00:00\"),","lastModifiedDate":"2023-09-20"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-10T13:30:45\"));","lastModifiedDate":"2023-09-20"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"            fail();","lastModifiedDate":"2023-09-20"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"            assertEquals(\"Invalid date parameter: From date must be before to date!\", e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"    public void testToSaveFormatString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"            Event ev \u003d new Event(\"Message\",","lastModifiedDate":"2023-09-20"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-10T12:30:45\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-11T13:01:00\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"            assertEquals(\"E | 0 | Message | 2023-10-10T12:30:45 | 2023-10-11T13:01\",","lastModifiedDate":"2023-09-20"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"                    ev.toSaveFormatString());","lastModifiedDate":"2023-09-20"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"            ev.markAsDone();","lastModifiedDate":"2023-09-20"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"            assertEquals(\"E | 1 | Message | 2023-10-10T12:30:45 | 2023-10-11T13:01\",","lastModifiedDate":"2023-09-20"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"                    ev.toSaveFormatString());","lastModifiedDate":"2023-09-20"},{"lineNumber":61,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":62,"author":{"gitId":"brein62"},"content":"            fail(\"DukeException should not be thrown!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":63,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":64,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"brein62"},"content":"    public void testToString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":69,"author":{"gitId":"brein62"},"content":"            Event ev \u003d new Event(\"Message\",","lastModifiedDate":"2023-09-20"},{"lineNumber":70,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-10T12:15:00\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-11T13:30:45\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"brein62"},"content":"            assertEquals(\"[E][ ] Message (from: Oct 10 2023, 12:15:00 to: Oct 11 2023, 13:30:45)\",","lastModifiedDate":"2023-09-20"},{"lineNumber":73,"author":{"gitId":"brein62"},"content":"                    ev.toString());","lastModifiedDate":"2023-09-20"},{"lineNumber":74,"author":{"gitId":"brein62"},"content":"            ev.markAsDone();","lastModifiedDate":"2023-09-20"},{"lineNumber":75,"author":{"gitId":"brein62"},"content":"            assertEquals(\"[E][X] Message (from: Oct 10 2023, 12:15:00 to: Oct 11 2023, 13:30:45)\",","lastModifiedDate":"2023-09-20"},{"lineNumber":76,"author":{"gitId":"brein62"},"content":"                    ev.toString());","lastModifiedDate":"2023-09-20"},{"lineNumber":77,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":78,"author":{"gitId":"brein62"},"content":"            fail(\"DukeException should not be thrown!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":79,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":80,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":81,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":82,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":83,"author":{"gitId":"brein62"},"content":"    public void testUpdate_validDates_success() {","lastModifiedDate":"2023-09-20"},{"lineNumber":84,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":85,"author":{"gitId":"brein62"},"content":"            Event ev \u003d new Event(\"Message\",","lastModifiedDate":"2023-09-20"},{"lineNumber":86,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-10T12:00:00\"),","lastModifiedDate":"2023-09-20"},{"lineNumber":87,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-11T13:30:45\"));","lastModifiedDate":"2023-09-20"},{"lineNumber":88,"author":{"gitId":"brein62"},"content":"            ev.update(UpdateType.DESCRIPTION, \"New Event\");","lastModifiedDate":"2023-09-20"},{"lineNumber":89,"author":{"gitId":"brein62"},"content":"            ev.update(UpdateType.DATE1, \"2023-10-09T12:34:56\");","lastModifiedDate":"2023-09-20"},{"lineNumber":90,"author":{"gitId":"brein62"},"content":"            ev.update(UpdateType.DATE2, \"2023-10-10T11:34:56\");","lastModifiedDate":"2023-09-20"},{"lineNumber":91,"author":{"gitId":"brein62"},"content":"            assertEquals(\"[E][ ] New Event (from: Oct 09 2023, 12:34:56 to: Oct 10 2023, 11:34:56)\",","lastModifiedDate":"2023-09-20"},{"lineNumber":92,"author":{"gitId":"brein62"},"content":"                    ev.toString());","lastModifiedDate":"2023-09-20"},{"lineNumber":93,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":94,"author":{"gitId":"brein62"},"content":"            fail(\"DukeException should not be thrown!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":95,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":96,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":97,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":98,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":99,"author":{"gitId":"brein62"},"content":"    public void testUpdate_invalidDate1_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":100,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":101,"author":{"gitId":"brein62"},"content":"            Event ev \u003d new Event(\"Message\",","lastModifiedDate":"2023-09-20"},{"lineNumber":102,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-10T12:00:00\"),","lastModifiedDate":"2023-09-20"},{"lineNumber":103,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-11T13:30:45\"));","lastModifiedDate":"2023-09-20"},{"lineNumber":104,"author":{"gitId":"brein62"},"content":"            ev.update(UpdateType.DESCRIPTION, \"New Event\");","lastModifiedDate":"2023-09-20"},{"lineNumber":105,"author":{"gitId":"brein62"},"content":"            ev.update(UpdateType.DATE1, \"this is not a date\");","lastModifiedDate":"2023-09-20"},{"lineNumber":106,"author":{"gitId":"brein62"},"content":"            fail(\"DukeException should be thrown!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":107,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":108,"author":{"gitId":"brein62"},"content":"            assertEquals(\"Cannot parse date/time of new event start date!\", e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":109,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":110,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":111,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":112,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":113,"author":{"gitId":"brein62"},"content":"    public void testUpdate_invalidDate2_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":114,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":115,"author":{"gitId":"brein62"},"content":"            Event ev \u003d new Event(\"Message\",","lastModifiedDate":"2023-09-20"},{"lineNumber":116,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-10T12:00:00\"),","lastModifiedDate":"2023-09-20"},{"lineNumber":117,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-11T13:30:45\"));","lastModifiedDate":"2023-09-20"},{"lineNumber":118,"author":{"gitId":"brein62"},"content":"            ev.update(UpdateType.DESCRIPTION, \"New Event\");","lastModifiedDate":"2023-09-20"},{"lineNumber":119,"author":{"gitId":"brein62"},"content":"            ev.update(UpdateType.DATE2, \"this is not a date\");","lastModifiedDate":"2023-09-20"},{"lineNumber":120,"author":{"gitId":"brein62"},"content":"            fail(\"DukeException should be thrown!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":121,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":122,"author":{"gitId":"brein62"},"content":"            assertEquals(\"Cannot parse date/time of new event end date!\", e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":123,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":124,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":125,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":126,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":127,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":128,"author":{"gitId":"brein62"},"content":"    public void testUpdate_badOrder_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":129,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":130,"author":{"gitId":"brein62"},"content":"            Event ev \u003d new Event(\"Message\",","lastModifiedDate":"2023-09-20"},{"lineNumber":131,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-10T12:00:00\"),","lastModifiedDate":"2023-09-20"},{"lineNumber":132,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-11T13:30:45\"));","lastModifiedDate":"2023-09-20"},{"lineNumber":133,"author":{"gitId":"brein62"},"content":"            ev.update(UpdateType.DESCRIPTION, \"New Event\");","lastModifiedDate":"2023-09-20"},{"lineNumber":134,"author":{"gitId":"brein62"},"content":"            ev.update(UpdateType.DATE2, \"2023-10-10T11:34:56\");","lastModifiedDate":"2023-09-20"},{"lineNumber":135,"author":{"gitId":"brein62"},"content":"            ev.update(UpdateType.DATE1, \"2023-10-09T12:34:56\");","lastModifiedDate":"2023-09-20"},{"lineNumber":136,"author":{"gitId":"brein62"},"content":"            fail(\"DukeException should be thrown!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":137,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":138,"author":{"gitId":"brein62"},"content":"            assertEquals(\"Invalid date parameter: From date must be before to date!\", e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":139,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":140,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":141,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":142,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":143,"author":{"gitId":"brein62"},"content":"    public void testUpdate_equalDates_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":144,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":145,"author":{"gitId":"brein62"},"content":"            Event ev \u003d new Event(\"Message\",","lastModifiedDate":"2023-09-20"},{"lineNumber":146,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-10T12:00:00\"),","lastModifiedDate":"2023-09-20"},{"lineNumber":147,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-11T13:30:45\"));","lastModifiedDate":"2023-09-20"},{"lineNumber":148,"author":{"gitId":"brein62"},"content":"            ev.update(UpdateType.DESCRIPTION, \"New Event\");","lastModifiedDate":"2023-09-20"},{"lineNumber":149,"author":{"gitId":"brein62"},"content":"            ev.update(UpdateType.DATE2, \"2023-10-10T12:00:00\");","lastModifiedDate":"2023-09-20"},{"lineNumber":150,"author":{"gitId":"brein62"},"content":"            fail(\"DukeException should be thrown!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":151,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":152,"author":{"gitId":"brein62"},"content":"            assertEquals(\"Invalid date parameter: From date must be before to date!\", e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":153,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":154,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":155,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":156,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":157,"author":{"gitId":"brein62"},"content":"    public void testClone() {","lastModifiedDate":"2023-09-20"},{"lineNumber":158,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":159,"author":{"gitId":"brein62"},"content":"            Event ev \u003d new Event(\"Event\",","lastModifiedDate":"2023-09-20"},{"lineNumber":160,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-10T12:00:00\"),","lastModifiedDate":"2023-09-20"},{"lineNumber":161,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-11T13:30:45\"));","lastModifiedDate":"2023-09-20"},{"lineNumber":162,"author":{"gitId":"brein62"},"content":"            ev.markAsDone();","lastModifiedDate":"2023-09-20"},{"lineNumber":163,"author":{"gitId":"brein62"},"content":"            ev.update(UpdateType.DATE2, \"2023-10-10T13:34:56\");","lastModifiedDate":"2023-09-20"},{"lineNumber":164,"author":{"gitId":"brein62"},"content":"            Event ev2 \u003d ev.clone();","lastModifiedDate":"2023-09-20"},{"lineNumber":165,"author":{"gitId":"brein62"},"content":"            ev2.update(UpdateType.DESCRIPTION, \"New Event\");","lastModifiedDate":"2023-09-20"},{"lineNumber":166,"author":{"gitId":"brein62"},"content":"            ev2.update(UpdateType.DATE1, \"2023-10-09T12:34:56\");","lastModifiedDate":"2023-09-20"},{"lineNumber":167,"author":{"gitId":"brein62"},"content":"            assertEquals(\"[E][X] Event (from: Oct 10 2023, 12:00:00 to: Oct 10 2023, 13:34:56)\",","lastModifiedDate":"2023-09-20"},{"lineNumber":168,"author":{"gitId":"brein62"},"content":"                    ev.toString());","lastModifiedDate":"2023-09-20"},{"lineNumber":169,"author":{"gitId":"brein62"},"content":"            assertEquals(\"[E][ ] New Event (from: Oct 09 2023, 12:34:56 to: Oct 10 2023, 13:34:56)\",","lastModifiedDate":"2023-09-20"},{"lineNumber":170,"author":{"gitId":"brein62"},"content":"                    ev2.toString());","lastModifiedDate":"2023-09-20"},{"lineNumber":171,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":172,"author":{"gitId":"brein62"},"content":"            fail(\"DukeException should not be thrown!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":173,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":174,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":175,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":175}},{"path":"src/test/java/duke/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"import java.util.List;","lastModifiedDate":"2023-09-11"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-13"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"public class TaskListTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"    public void testGetSize() {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"        TaskList tl \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"        assertEquals(tl.getSize(), 0);","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"    public void testAddTasks() {","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"            TaskList tl \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"            tl.add(new Todo(\"First task\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"            tl.add(new Deadline(\"Second task\", LocalDateTime.parse(\"2023-10-10T12:34:56\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"            tl.add(new Event(\"Third task\", LocalDateTime.parse(\"2023-10-10T12:34:56\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-10T12:34:57\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"            assertEquals(tl.getSize(), 3);","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"            fail(\"DukeException should not be thrown!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"    public void testRemoveTasks() {","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"            TaskList tl \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"            tl.add(new Todo(\"First task\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"            tl.add(new Deadline(\"Second task\", LocalDateTime.parse(\"2023-10-10T12:34:56\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"            tl.add(new Event(\"Third task\", LocalDateTime.parse(\"2023-10-10T12:34:56\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-10T12:34:57\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"            tl.remove(2);","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"            assertEquals(tl.getSize(), 2);","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"            fail(\"DukeException should not be thrown!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"    public void testGetSavedStrings() throws DukeException {","lastModifiedDate":"2023-09-20"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"        TaskList tl \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"        tl.add(new Todo(\"First task\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"        tl.add(new Deadline(\"Second task\", LocalDateTime.parse(\"2023-10-10T12:34:56\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"        tl.add(new Event(\"Third task\", LocalDateTime.parse(\"2023-10-10T12:34:56\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"                LocalDateTime.parse(\"2023-10-10T12:34:57\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"        tl.add(new Deadline(\"Fourth task\", LocalDateTime.parse(\"2023-10-10T12:34:58\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"        tl.remove(2);","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"        List\u003cString\u003e result \u003d tl.getSavedStrings();","lastModifiedDate":"2023-09-11"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"        assertEquals(result.get(0), \"T | 0 | First task\");","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"        assertEquals(result.get(1), \"E | 0 | Third task | 2023-10-10T12:34:56 | 2023-10-10T12:34:57\");","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"brein62"},"content":"        assertEquals(result.get(2), \"D | 0 | Fourth task | 2023-10-10T12:34:58\");","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"brein62"},"content":"    public void testGetTaskString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":67,"author":{"gitId":"brein62"},"content":"            TaskList tl \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"brein62"},"content":"            tl.add(new Todo(\"First task\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"brein62"},"content":"            tl.add(new Deadline(\"Second task\", LocalDateTime.parse(\"2023-10-10T12:34:56\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"brein62"},"content":"            tl.add(new Event(\"Third task\", LocalDateTime.parse(\"2023-10-10T12:34:56\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-10T12:34:57\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"brein62"},"content":"            tl.add(new Deadline(\"Fourth task\", LocalDateTime.parse(\"2023-10-10T12:34:58\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"brein62"},"content":"            assertEquals(tl.getTaskString(1), \"[T][ ] First task\");","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"brein62"},"content":"            assertEquals(tl.getTaskString(2),","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"brein62"},"content":"                    \"[D][ ] Second task (by: Oct 10 2023, 12:34:56)\");","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"brein62"},"content":"            assertEquals(tl.getTaskString(3),","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"brein62"},"content":"                    \"[E][ ] Third task (from: Oct 10 2023, 12:34:56 to: Oct 10 2023, 12:34:57)\");","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"brein62"},"content":"            assertEquals(tl.getTaskString(4),","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"brein62"},"content":"                    \"[D][ ] Fourth task (by: Oct 10 2023, 12:34:58)\");","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":81,"author":{"gitId":"brein62"},"content":"            fail(\"DukeException should not be thrown!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":82,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":83,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"brein62"},"content":"    public void testMarkAsDone() {","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":88,"author":{"gitId":"brein62"},"content":"            TaskList tl \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"brein62"},"content":"            tl.add(new Todo(\"First task\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"brein62"},"content":"            tl.add(new Deadline(\"Second task\", LocalDateTime.parse(\"2023-10-10T12:34:56\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"brein62"},"content":"            tl.add(new Event(\"Third task\", LocalDateTime.parse(\"2023-10-10T12:34:56\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-10T12:34:57\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"brein62"},"content":"            tl.add(new Deadline(\"Fourth task\", LocalDateTime.parse(\"2023-10-10T12:34:58\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"brein62"},"content":"            tl.remove(2);","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"brein62"},"content":"            tl.markAsDone(3);","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"brein62"},"content":"            List\u003cString\u003e result \u003d tl.getSavedStrings();","lastModifiedDate":"2023-09-11"},{"lineNumber":97,"author":{"gitId":"brein62"},"content":"            assertEquals(result.get(0), \"T | 0 | First task\");","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"brein62"},"content":"            assertEquals(result.get(1), \"E | 0 | Third task | 2023-10-10T12:34:56 | 2023-10-10T12:34:57\");","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"brein62"},"content":"            assertEquals(result.get(2), \"D | 1 | Fourth task | 2023-10-10T12:34:58\");","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"brein62"},"content":"            assertEquals(tl.getTaskString(3), \"[D][X] Fourth task (by: Oct 10 2023, 12:34:58)\");","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":102,"author":{"gitId":"brein62"},"content":"            fail(\"DukeException should not be thrown!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":103,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":104,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"brein62"},"content":"    public void testUnmarkAsDone() {","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":109,"author":{"gitId":"brein62"},"content":"            TaskList tl \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":110,"author":{"gitId":"brein62"},"content":"            tl.add(new Todo(\"First task\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"brein62"},"content":"            tl.add(new Deadline(\"Second task\", LocalDateTime.parse(\"2023-10-10T12:34:56\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"brein62"},"content":"            tl.add(new Event(\"Third task\", LocalDateTime.parse(\"2023-10-10T12:34:56\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-10T12:34:57\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"brein62"},"content":"            tl.add(new Deadline(\"Fourth task\", LocalDateTime.parse(\"2023-10-10T12:34:58\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"brein62"},"content":"            tl.remove(2);","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"brein62"},"content":"            tl.markAsDone(1);","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"brein62"},"content":"            tl.markAsDone(3);","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"brein62"},"content":"            tl.unmarkAsDone(2);","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"brein62"},"content":"            tl.unmarkAsDone(3);","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"brein62"},"content":"            List\u003cString\u003e result \u003d tl.getSavedStrings();","lastModifiedDate":"2023-09-11"},{"lineNumber":121,"author":{"gitId":"brein62"},"content":"            assertEquals(result.get(0), \"T | 1 | First task\");","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"brein62"},"content":"            assertEquals(result.get(1), \"E | 0 | Third task | 2023-10-10T12:34:56 | 2023-10-10T12:34:57\");","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"brein62"},"content":"            assertEquals(result.get(2), \"D | 0 | Fourth task | 2023-10-10T12:34:58\");","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"brein62"},"content":"            assertEquals(tl.getTaskString(1), \"[T][X] First task\");","lastModifiedDate":"2023-08-30"},{"lineNumber":125,"author":{"gitId":"brein62"},"content":"            assertEquals(tl.getTaskString(3), \"[D][ ] Fourth task (by: Oct 10 2023, 12:34:58)\");","lastModifiedDate":"2023-08-30"},{"lineNumber":126,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":127,"author":{"gitId":"brein62"},"content":"            fail(\"DukeException should not be thrown!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":128,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":129,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":130,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":131,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-13"},{"lineNumber":132,"author":{"gitId":"brein62"},"content":"    public void testUpdateTask_validTasks_success() {","lastModifiedDate":"2023-09-20"},{"lineNumber":133,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":134,"author":{"gitId":"brein62"},"content":"            TaskList tl \u003d new TaskList();","lastModifiedDate":"2023-09-13"},{"lineNumber":135,"author":{"gitId":"brein62"},"content":"            tl.add(new Todo(\"First task\"));","lastModifiedDate":"2023-09-13"},{"lineNumber":136,"author":{"gitId":"brein62"},"content":"            tl.add(new Event(\"2nd task\", LocalDateTime.parse(\"2023-10-10T12:34:56\"),","lastModifiedDate":"2023-09-13"},{"lineNumber":137,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-10T12:34:57\")));","lastModifiedDate":"2023-09-13"},{"lineNumber":138,"author":{"gitId":"brein62"},"content":"            tl.add(new Deadline(\"3rd task\", LocalDateTime.parse(\"2023-10-10T12:34:58\")));","lastModifiedDate":"2023-09-13"},{"lineNumber":139,"author":{"gitId":"brein62"},"content":"            tl.updateTask(1, UpdateType.DESCRIPTION, \"1st task\");","lastModifiedDate":"2023-09-13"},{"lineNumber":140,"author":{"gitId":"brein62"},"content":"            tl.updateTask(2, UpdateType.DATE2, \"2024-01-01T12:00:00\");","lastModifiedDate":"2023-09-13"},{"lineNumber":141,"author":{"gitId":"brein62"},"content":"            tl.updateTask(3, UpdateType.DATE1, \"2024-01-01T12:00:01\");","lastModifiedDate":"2023-09-13"},{"lineNumber":142,"author":{"gitId":"brein62"},"content":"            tl.markAsDone(3);","lastModifiedDate":"2023-09-13"},{"lineNumber":143,"author":{"gitId":"brein62"},"content":"            List\u003cString\u003e result \u003d tl.getSavedStrings();","lastModifiedDate":"2023-09-13"},{"lineNumber":144,"author":{"gitId":"brein62"},"content":"            assertEquals(result.get(0), \"T | 0 | 1st task\");","lastModifiedDate":"2023-09-13"},{"lineNumber":145,"author":{"gitId":"brein62"},"content":"            assertEquals(result.get(1), \"E | 0 | 2nd task | 2023-10-10T12:34:56 | 2024-01-01T12:00\");","lastModifiedDate":"2023-09-13"},{"lineNumber":146,"author":{"gitId":"brein62"},"content":"            assertEquals(result.get(2), \"D | 1 | 3rd task | 2024-01-01T12:00:01\");","lastModifiedDate":"2023-09-13"},{"lineNumber":147,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":148,"author":{"gitId":"brein62"},"content":"            fail(\"DukeException should not be thrown!\");","lastModifiedDate":"2023-09-13"},{"lineNumber":149,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":150,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":151,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":152,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":153,"author":{"gitId":"brein62"},"content":"    public void testUpdateTask_invalidEvent_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":154,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":155,"author":{"gitId":"brein62"},"content":"            TaskList tl \u003d new TaskList();","lastModifiedDate":"2023-09-20"},{"lineNumber":156,"author":{"gitId":"brein62"},"content":"            tl.add(new Todo(\"First task\"));","lastModifiedDate":"2023-09-20"},{"lineNumber":157,"author":{"gitId":"brein62"},"content":"            tl.add(new Event(\"2nd task\", LocalDateTime.parse(\"2023-10-10T12:34:56\"),","lastModifiedDate":"2023-09-20"},{"lineNumber":158,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-10T12:34:57\")));","lastModifiedDate":"2023-09-20"},{"lineNumber":159,"author":{"gitId":"brein62"},"content":"            tl.add(new Deadline(\"3rd task\", LocalDateTime.parse(\"2023-10-10T12:34:58\")));","lastModifiedDate":"2023-09-20"},{"lineNumber":160,"author":{"gitId":"brein62"},"content":"            tl.updateTask(1, UpdateType.DESCRIPTION, \"1st task\");","lastModifiedDate":"2023-09-20"},{"lineNumber":161,"author":{"gitId":"brein62"},"content":"            tl.updateTask(2, UpdateType.DATE2, \"2022-01-01T12:00:00\");","lastModifiedDate":"2023-09-20"},{"lineNumber":162,"author":{"gitId":"brein62"},"content":"            tl.updateTask(3, UpdateType.DATE1, \"2024-01-01T12:00:01\");","lastModifiedDate":"2023-09-20"},{"lineNumber":163,"author":{"gitId":"brein62"},"content":"            tl.markAsDone(3);","lastModifiedDate":"2023-09-20"},{"lineNumber":164,"author":{"gitId":"brein62"},"content":"            fail(\"DukeException should not be thrown!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":165,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":166,"author":{"gitId":"brein62"},"content":"            assertEquals(\"Invalid date parameter: From date must be before to date!\", e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":167,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":168,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":169,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":170,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":171,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-13"},{"lineNumber":172,"author":{"gitId":"brein62"},"content":"    public void testCloneTask() {","lastModifiedDate":"2023-09-13"},{"lineNumber":173,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":174,"author":{"gitId":"brein62"},"content":"            TaskList tl \u003d new TaskList();","lastModifiedDate":"2023-09-13"},{"lineNumber":175,"author":{"gitId":"brein62"},"content":"            tl.add(new Todo(\"1st task\"));","lastModifiedDate":"2023-09-13"},{"lineNumber":176,"author":{"gitId":"brein62"},"content":"            tl.add(new Event(\"2nd task\", LocalDateTime.parse(\"2023-10-10T12:34:56\"),","lastModifiedDate":"2023-09-13"},{"lineNumber":177,"author":{"gitId":"brein62"},"content":"                    LocalDateTime.parse(\"2023-10-10T12:34:57\")));","lastModifiedDate":"2023-09-13"},{"lineNumber":178,"author":{"gitId":"brein62"},"content":"            tl.add(new Deadline(\"3rd task\", LocalDateTime.parse(\"2023-10-10T12:34:58\")));","lastModifiedDate":"2023-09-13"},{"lineNumber":179,"author":{"gitId":"brein62"},"content":"            tl.markAsDone(2);","lastModifiedDate":"2023-09-13"},{"lineNumber":180,"author":{"gitId":"brein62"},"content":"            tl.cloneTask(2);","lastModifiedDate":"2023-09-13"},{"lineNumber":181,"author":{"gitId":"brein62"},"content":"            tl.cloneTask(3);","lastModifiedDate":"2023-09-13"},{"lineNumber":182,"author":{"gitId":"brein62"},"content":"            List\u003cString\u003e result \u003d tl.getSavedStrings();","lastModifiedDate":"2023-09-13"},{"lineNumber":183,"author":{"gitId":"brein62"},"content":"            assertEquals(result.get(0), \"T | 0 | 1st task\");","lastModifiedDate":"2023-09-13"},{"lineNumber":184,"author":{"gitId":"brein62"},"content":"            assertEquals(result.get(1), \"E | 1 | 2nd task | 2023-10-10T12:34:56 | 2023-10-10T12:34:57\");","lastModifiedDate":"2023-09-13"},{"lineNumber":185,"author":{"gitId":"brein62"},"content":"            assertEquals(result.get(2), \"D | 0 | 3rd task | 2023-10-10T12:34:58\");","lastModifiedDate":"2023-09-13"},{"lineNumber":186,"author":{"gitId":"brein62"},"content":"            assertEquals(result.get(3), \"E | 0 | 2nd task | 2023-10-10T12:34:56 | 2023-10-10T12:34:57\");","lastModifiedDate":"2023-09-13"},{"lineNumber":187,"author":{"gitId":"brein62"},"content":"            assertEquals(result.get(4), \"D | 0 | 3rd task | 2023-10-10T12:34:58\");","lastModifiedDate":"2023-09-13"},{"lineNumber":188,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":189,"author":{"gitId":"brein62"},"content":"            fail(\"DukeException should not be thrown!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":190,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":191,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":192,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":192}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-20"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-20"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"public class TodoTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    public void testCreate() {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"        Todo t \u003d new Todo(\"Todo 1\");","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"        assertEquals(\"Todo 1\", t.message);","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"    public void testToSaveFormatString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"        Todo t \u003d new Todo(\"Todo 2\");","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"        assertEquals(\"T | 0 | Todo 2\", t.toSaveFormatString());","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"        t.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"brein62"},"content":"        assertEquals(\"T | 1 | Todo 2\", t.toSaveFormatString());","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"brein62"},"content":"    public void testToString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"brein62"},"content":"        Todo t \u003d new Todo(\"Message\");","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"brein62"},"content":"        assertEquals(\"[T][ ] Message\", t.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"brein62"},"content":"        t.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"brein62"},"content":"        assertEquals(\"[T][X] Message\", t.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":34,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":35,"author":{"gitId":"brein62"},"content":"    public void testUpdate_validParams_success() {","lastModifiedDate":"2023-09-20"},{"lineNumber":36,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":37,"author":{"gitId":"brein62"},"content":"            Todo t \u003d new Todo(\"Message\");","lastModifiedDate":"2023-09-20"},{"lineNumber":38,"author":{"gitId":"brein62"},"content":"            t.update(UpdateType.DESCRIPTION, \"New Todo\");","lastModifiedDate":"2023-09-20"},{"lineNumber":39,"author":{"gitId":"brein62"},"content":"            assertEquals(\"[T][ ] New Todo\",","lastModifiedDate":"2023-09-20"},{"lineNumber":40,"author":{"gitId":"brein62"},"content":"                    t.toString());","lastModifiedDate":"2023-09-20"},{"lineNumber":41,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":42,"author":{"gitId":"brein62"},"content":"            fail(\"DukeException should not be thrown!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":43,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":44,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":45,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":46,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":47,"author":{"gitId":"brein62"},"content":"    public void testUpdate_invalidUpdateDate1_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":48,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":49,"author":{"gitId":"brein62"},"content":"            Todo t \u003d new Todo(\"Message\");","lastModifiedDate":"2023-09-20"},{"lineNumber":50,"author":{"gitId":"brein62"},"content":"            t.update(UpdateType.DESCRIPTION, \"New Todo\");","lastModifiedDate":"2023-09-20"},{"lineNumber":51,"author":{"gitId":"brein62"},"content":"            t.update(UpdateType.DATE1, \"2023-10-10T12:00:01\");","lastModifiedDate":"2023-09-20"},{"lineNumber":52,"author":{"gitId":"brein62"},"content":"            fail(\"DukeException should be thrown!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":53,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":54,"author":{"gitId":"brein62"},"content":"            assertEquals(\"Cannot update: Todos do not have dates!\", e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":55,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":56,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":57,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":58,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":59,"author":{"gitId":"brein62"},"content":"    public void testUpdate_invalidUpdateDate2_dukeExceptionThrown() {","lastModifiedDate":"2023-09-20"},{"lineNumber":60,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":61,"author":{"gitId":"brein62"},"content":"            Todo t \u003d new Todo(\"Message\");","lastModifiedDate":"2023-09-20"},{"lineNumber":62,"author":{"gitId":"brein62"},"content":"            t.update(UpdateType.DESCRIPTION, \"New Todo\");","lastModifiedDate":"2023-09-20"},{"lineNumber":63,"author":{"gitId":"brein62"},"content":"            t.update(UpdateType.DATE2, \"2023-10-10T12:00:01\");","lastModifiedDate":"2023-09-20"},{"lineNumber":64,"author":{"gitId":"brein62"},"content":"            fail(\"DukeException should be thrown!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":65,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":66,"author":{"gitId":"brein62"},"content":"            assertEquals(\"Cannot update: Todos do not have dates!\", e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":67,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":68,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":69,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":70,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-20"},{"lineNumber":71,"author":{"gitId":"brein62"},"content":"    public void testClone() {","lastModifiedDate":"2023-09-20"},{"lineNumber":72,"author":{"gitId":"brein62"},"content":"        try {","lastModifiedDate":"2023-09-20"},{"lineNumber":73,"author":{"gitId":"brein62"},"content":"            Todo t1 \u003d new Todo(\"Message\");","lastModifiedDate":"2023-09-20"},{"lineNumber":74,"author":{"gitId":"brein62"},"content":"            t1.markAsDone();","lastModifiedDate":"2023-09-20"},{"lineNumber":75,"author":{"gitId":"brein62"},"content":"            Todo t2 \u003d t1.clone();","lastModifiedDate":"2023-09-20"},{"lineNumber":76,"author":{"gitId":"brein62"},"content":"            t2.update(UpdateType.DESCRIPTION, \"New Message\");","lastModifiedDate":"2023-09-20"},{"lineNumber":77,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":78,"author":{"gitId":"brein62"},"content":"            assertEquals(\"[T][X] Message\", t1.toString());","lastModifiedDate":"2023-09-20"},{"lineNumber":79,"author":{"gitId":"brein62"},"content":"            assertEquals(\"[T][ ] New Message\", t2.toString());","lastModifiedDate":"2023-09-20"},{"lineNumber":80,"author":{"gitId":"brein62"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":81,"author":{"gitId":"brein62"},"content":"            fail(\"DukeException should not be thrown!\");","lastModifiedDate":"2023-09-20"},{"lineNumber":82,"author":{"gitId":"brein62"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":83,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":84,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"brein62":84}},{"path":"src/test/java/duke/util/FormatterTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"package duke.util;","lastModifiedDate":"2023-09-11"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"import static duke.util.Formatter.formatDateTime;","lastModifiedDate":"2023-09-11"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-11"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-11"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-11"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-11"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"public class FormatterTest {","lastModifiedDate":"2023-09-11"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"    @Test","lastModifiedDate":"2023-09-11"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"    public void testFormatDateTime() {","lastModifiedDate":"2023-09-11"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"        LocalDateTime d \u003d LocalDateTime.parse(\"2023-11-15T12:34:56\");","lastModifiedDate":"2023-09-11"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"        assertEquals(formatDateTime(d), \"Nov 15 2023, 12:34:56\");","lastModifiedDate":"2023-09-11"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"        LocalDateTime now \u003d LocalDateTime.now();","lastModifiedDate":"2023-09-11"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"        assertEquals(formatDateTime(now),","lastModifiedDate":"2023-09-11"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"                now.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy, HH:mm:ss\")));","lastModifiedDate":"2023-09-11"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"    }","lastModifiedDate":"2023-09-11"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"}","lastModifiedDate":"2023-09-11"}],"authorContributionMap":{"brein62":21}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"brein62"},"content":"todo read book","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"brein62"},"content":"deadline return book /by June 6th","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"brein62"},"content":"event project meeting /from Aug 6th 2pm /to 4pm","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"brein62"},"content":"todo join sports club","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"brein62"},"content":"mark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"brein62"},"content":"mark 4","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"brein62"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"brein62"},"content":"todo borrow book","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"brein62"},"content":"event some event /from 2023-09-11T08:00:00 /to 2023-09-11T16:00:00","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"brein62"},"content":"deadline return book /by 2023-09-01T09:30:00","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"brein62"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"brein62"},"content":"deadline return book /by 12 dec 2023","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"brein62"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"brein62"},"content":"todo","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"brein62"},"content":"list","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"delete 3","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"brein62"},"content":"blah","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"brein62"},"content":"find book","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"brein62"},"content":"list","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"brein62"},"content":"delete 149","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"brein62"},"content":"find blablablablabla","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"brein62"},"content":"bye","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"brein62":22}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"brein62"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":37,"brein62":1}}]
