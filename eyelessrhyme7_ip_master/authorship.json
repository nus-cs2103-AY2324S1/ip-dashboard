[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"eyelessrhyme7"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"eyelessrhyme7"},"content":"}","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"eyelessrhyme7"},"content":"checkstyle {","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"eyelessrhyme7"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":19,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"eyelessrhyme7"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"eyelessrhyme7"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"eyelessrhyme7"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"eyelessrhyme7"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"eyelessrhyme7"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"eyelessrhyme7"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"eyelessrhyme7"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"eyelessrhyme7"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"eyelessrhyme7"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"eyelessrhyme7"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"eyelessrhyme7"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"eyelessrhyme7"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"eyelessrhyme7"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    mainClass.set(\"seedu.duke.Duke\")","lastModifiedDate":"2023-08-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"eyelessrhyme7":19,"-":42}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"eyelessrhyme7"},"content":"T|1|read book","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"eyelessrhyme7"},"content":"D|0|return book|2023-09-06 18:30:00","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"eyelessrhyme7"},"content":"D|0|submit quiz|2023-09-08 23:59:00","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"eyelessrhyme7"},"content":"D|0|return book|2023-10-02 23:59:00","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"eyelessrhyme7"},"content":"E|0|project meeting|2023-09-13 18:30:00|2023-09-13 20:30:00","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"eyelessrhyme7"},"content":"T|1|join sports club","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"eyelessrhyme7":6}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eyelessrhyme7"},"content":"package duke;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"eyelessrhyme7"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"eyelessrhyme7"},"content":" * The `Command` class defines constants representing various commands that can be used in the Duke application.","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"eyelessrhyme7"},"content":" * These commands are used for user interaction.","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"eyelessrhyme7"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"eyelessrhyme7"},"content":"public class Command {","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"eyelessrhyme7"},"content":"     * Represents the \"exit\" command, which allows the user to exit the Duke application.","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"eyelessrhyme7"},"content":"    public static final String EXIT \u003d \"bye\";","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"eyelessrhyme7"},"content":"     * Represents the \"list\" command, which allows the user to list all tasks.","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"eyelessrhyme7"},"content":"    public static final String LIST \u003d \"list\";","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"eyelessrhyme7"},"content":"     * Represents the \"list week\" command, which allows the user to list tasks due within a week.","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"eyelessrhyme7"},"content":"    public static final String LIST_WITHIN_WEEK \u003d \"list week\";","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"eyelessrhyme7"},"content":"     * Represents the \"list month\" command, which allows the user to list tasks due within a month.","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"eyelessrhyme7"},"content":"    public static final String LIST_WITHIN_MONTH \u003d \"list month\";","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"eyelessrhyme7"},"content":"     * Represents the \"delete\" command, which allows the user to delete a task.","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"eyelessrhyme7"},"content":"     * The task number should be appended to this command.","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"eyelessrhyme7"},"content":"     * Example: \"delete 2\" will delete the task with index 2.","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"eyelessrhyme7"},"content":"    public static final String DELETE \u003d \"delete \";","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"eyelessrhyme7"},"content":"     * Represents the \"mark\" command, which allows the user to mark a task as done.","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"eyelessrhyme7"},"content":"     * The task number should be appended to this command.","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"eyelessrhyme7"},"content":"     * Example: \"mark 1\" will mark the task with index 1 as done.","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"eyelessrhyme7"},"content":"    public static final String MARK \u003d \"mark \";","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"eyelessrhyme7"},"content":"     * Represents the \"unmark\" command, which allows the user to mark a task as not done.","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"eyelessrhyme7"},"content":"     * The task number should be appended to this command.","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"eyelessrhyme7"},"content":"     * Example: \"unmark 3\" will mark the task with index 3 as not done.","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"eyelessrhyme7"},"content":"    public static final String UNMARK \u003d \"unmark \";","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"eyelessrhyme7"},"content":"    public static final String FIND \u003d \"find \";","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"eyelessrhyme7"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"eyelessrhyme7":51}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eyelessrhyme7"},"content":"package duke;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"eyelessrhyme7"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"eyelessrhyme7"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"eyelessrhyme7"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"eyelessrhyme7"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"eyelessrhyme7"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"eyelessrhyme7"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"eyelessrhyme7"},"content":" * Duke is a task management bot that helps you keep track of your tasks.","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"eyelessrhyme7"},"content":" * You can add, mark as done, delete, and list tasks with Duke.","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"eyelessrhyme7"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"eyelessrhyme7"},"content":"    private LocalDate currentDate;","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"eyelessrhyme7"},"content":"    private Ui ui;","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"eyelessrhyme7"},"content":"    private Storage storage;","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"eyelessrhyme7"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"eyelessrhyme7"},"content":"    private Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"eyelessrhyme7"},"content":"     * Constructor for Duke. currentDate, ui, tasks is initialized by default.","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param filePath The file path to the data file where tasks are stored.","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"eyelessrhyme7"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"eyelessrhyme7"},"content":"        // Initialize the current date to the current system date.","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"eyelessrhyme7"},"content":"        this.currentDate \u003d LocalDate.now();","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"eyelessrhyme7"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"eyelessrhyme7"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"eyelessrhyme7"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"eyelessrhyme7"},"content":"            // Attempt to load tasks from the specified file path.","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"eyelessrhyme7"},"content":"            this.tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"eyelessrhyme7"},"content":"        } catch (IOException | InvalidFileFormatException e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"eyelessrhyme7"},"content":"            // Handle exceptions related to file loading.","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"eyelessrhyme7"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"eyelessrhyme7"},"content":"            this.tasks \u003d new TaskList();","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":40,"author":{"gitId":"eyelessrhyme7"},"content":"            System.out.println(\"Starting Duke with Task List...\");","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"eyelessrhyme7"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"eyelessrhyme7"},"content":"     * Sets the current date for Duke. Useful for list-within-week and list-within-month commands","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param date The LocalDate to set as the current date.","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"eyelessrhyme7"},"content":"    private void setcurrentDate(LocalDate date) {","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"eyelessrhyme7"},"content":"        this.currentDate \u003d date;","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":54,"author":{"gitId":"eyelessrhyme7"},"content":"     * Runs the Duke bot, accepting and processing user commands. Scanner object and infinite while loop handled here.","lastModifiedDate":"2023-09-05"},{"lineNumber":55,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":56,"author":{"gitId":"eyelessrhyme7"},"content":"    public void runBot() {","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"eyelessrhyme7"},"content":"        // Display a greeting message to the user.","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"eyelessrhyme7"},"content":"        this.ui.displayGreeting();","lastModifiedDate":"2023-09-05"},{"lineNumber":59,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":60,"author":{"gitId":"eyelessrhyme7"},"content":"        // Initialize a new scanner object to interact with user input from Command Line.","lastModifiedDate":"2023-09-05"},{"lineNumber":61,"author":{"gitId":"eyelessrhyme7"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-24"},{"lineNumber":62,"author":{"gitId":"eyelessrhyme7"},"content":"        String userInput \u003d scanner.nextLine();","lastModifiedDate":"2023-08-24"},{"lineNumber":63,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":64,"author":{"gitId":"eyelessrhyme7"},"content":"        while (!userInput.equalsIgnoreCase(Command.EXIT)) {","lastModifiedDate":"2023-09-05"},{"lineNumber":65,"author":{"gitId":"eyelessrhyme7"},"content":"            // Generate a response based on the user\u0027s input.","lastModifiedDate":"2023-09-05"},{"lineNumber":66,"author":{"gitId":"eyelessrhyme7"},"content":"            String botOutput \u003d generateResponse(userInput, scanner, this.tasks);","lastModifiedDate":"2023-09-05"},{"lineNumber":67,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":68,"author":{"gitId":"eyelessrhyme7"},"content":"            // Display the bot\u0027s response to the user.","lastModifiedDate":"2023-09-05"},{"lineNumber":69,"author":{"gitId":"eyelessrhyme7"},"content":"            this.ui.displayMessage(botOutput);","lastModifiedDate":"2023-09-05"},{"lineNumber":70,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":71,"author":{"gitId":"eyelessrhyme7"},"content":"            // Read the next user input.","lastModifiedDate":"2023-09-05"},{"lineNumber":72,"author":{"gitId":"eyelessrhyme7"},"content":"            userInput \u003d scanner.nextLine();","lastModifiedDate":"2023-09-04"},{"lineNumber":73,"author":{"gitId":"eyelessrhyme7"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"eyelessrhyme7"},"content":"        // Display an exit greeting when the bot exits.","lastModifiedDate":"2023-09-05"},{"lineNumber":75,"author":{"gitId":"eyelessrhyme7"},"content":"        this.ui.displayExitGreeting();","lastModifiedDate":"2023-09-05"},{"lineNumber":76,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":77,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":78,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":79,"author":{"gitId":"eyelessrhyme7"},"content":"     * Generates a response for the given user input. Keeps track of and modifies TaskList list.","lastModifiedDate":"2023-09-05"},{"lineNumber":80,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":81,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param userInput The user\u0027s input command.","lastModifiedDate":"2023-09-05"},{"lineNumber":82,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param scanner   The Scanner object for user input.","lastModifiedDate":"2023-09-05"},{"lineNumber":83,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param list      The task list to operate on.","lastModifiedDate":"2023-09-05"},{"lineNumber":84,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return A response generated based on the user input.","lastModifiedDate":"2023-09-05"},{"lineNumber":85,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":86,"author":{"gitId":"eyelessrhyme7"},"content":"    public String generateResponse(String userInput, Scanner scanner, TaskList list) {","lastModifiedDate":"2023-09-05"},{"lineNumber":87,"author":{"gitId":"eyelessrhyme7"},"content":"        // Initialize the bot\u0027s response.","lastModifiedDate":"2023-09-05"},{"lineNumber":88,"author":{"gitId":"eyelessrhyme7"},"content":"        String botOutput \u003d \"\";","lastModifiedDate":"2023-08-24"},{"lineNumber":89,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":90,"author":{"gitId":"eyelessrhyme7"},"content":"        // Check for various user commands and generate responses accordingly.","lastModifiedDate":"2023-09-05"},{"lineNumber":91,"author":{"gitId":"eyelessrhyme7"},"content":"        if (userInput.equalsIgnoreCase(Command.LIST)) {","lastModifiedDate":"2023-09-05"},{"lineNumber":92,"author":{"gitId":"eyelessrhyme7"},"content":"            // Generate a list of tasks and display it to the user.","lastModifiedDate":"2023-09-05"},{"lineNumber":93,"author":{"gitId":"eyelessrhyme7"},"content":"            botOutput \u003d botOutput + \"Here are the tasks in your list: \\n    \" + list.toString();","lastModifiedDate":"2023-09-05"},{"lineNumber":94,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":95,"author":{"gitId":"eyelessrhyme7"},"content":"        } else if (userInput.equalsIgnoreCase(Command.LIST_WITHIN_WEEK)) {","lastModifiedDate":"2023-09-05"},{"lineNumber":96,"author":{"gitId":"eyelessrhyme7"},"content":"            // Generate a list of tasks due within a week and display it to the user.","lastModifiedDate":"2023-09-05"},{"lineNumber":97,"author":{"gitId":"eyelessrhyme7"},"content":"            TaskList listWeek \u003d list.dueWithinWeek();","lastModifiedDate":"2023-09-05"},{"lineNumber":98,"author":{"gitId":"eyelessrhyme7"},"content":"            botOutput \u003d botOutput + \"Here are the tasks in your list that start/due within one week: \\n    \"","lastModifiedDate":"2023-09-07"},{"lineNumber":99,"author":{"gitId":"eyelessrhyme7"},"content":"                    + listWeek.toString();","lastModifiedDate":"2023-09-07"},{"lineNumber":100,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":101,"author":{"gitId":"eyelessrhyme7"},"content":"        } else if (userInput.equalsIgnoreCase(Command.LIST_WITHIN_MONTH)) {","lastModifiedDate":"2023-09-05"},{"lineNumber":102,"author":{"gitId":"eyelessrhyme7"},"content":"            // Generate a list of tasks due within a month and display it to the user.","lastModifiedDate":"2023-09-05"},{"lineNumber":103,"author":{"gitId":"eyelessrhyme7"},"content":"            TaskList monthWeek \u003d list.dueWithinMonth();","lastModifiedDate":"2023-09-05"},{"lineNumber":104,"author":{"gitId":"eyelessrhyme7"},"content":"            botOutput \u003d botOutput + \"Here are the tasks in your list that start/due within one month: \\n    \"","lastModifiedDate":"2023-09-07"},{"lineNumber":105,"author":{"gitId":"eyelessrhyme7"},"content":"                    + monthWeek.toString();","lastModifiedDate":"2023-09-07"},{"lineNumber":106,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":107,"author":{"gitId":"eyelessrhyme7"},"content":"        } else if (userInput.startsWith(Command.MARK)) {","lastModifiedDate":"2023-09-05"},{"lineNumber":108,"author":{"gitId":"eyelessrhyme7"},"content":"            // Process a command to mark a task as done and display the result.","lastModifiedDate":"2023-09-05"},{"lineNumber":109,"author":{"gitId":"eyelessrhyme7"},"content":"            botOutput \u003d botOutput + \"Nice! I\u0027ve marked this task as done: \\n    \";","lastModifiedDate":"2023-08-24"},{"lineNumber":110,"author":{"gitId":"eyelessrhyme7"},"content":"            try {","lastModifiedDate":"2023-08-24"},{"lineNumber":111,"author":{"gitId":"eyelessrhyme7"},"content":"                int taskNo \u003d parser.parseMark(userInput, list);","lastModifiedDate":"2023-09-05"},{"lineNumber":112,"author":{"gitId":"eyelessrhyme7"},"content":"                Task x \u003d list.getTask(taskNo - 1);","lastModifiedDate":"2023-09-05"},{"lineNumber":113,"author":{"gitId":"eyelessrhyme7"},"content":"                x.markAsDone();","lastModifiedDate":"2023-08-24"},{"lineNumber":114,"author":{"gitId":"eyelessrhyme7"},"content":"                botOutput +\u003d x;","lastModifiedDate":"2023-09-05"},{"lineNumber":115,"author":{"gitId":"eyelessrhyme7"},"content":"            } catch (ParserException p) {","lastModifiedDate":"2023-09-05"},{"lineNumber":116,"author":{"gitId":"eyelessrhyme7"},"content":"                // Handle parsing exceptions.","lastModifiedDate":"2023-09-05"},{"lineNumber":117,"author":{"gitId":"eyelessrhyme7"},"content":"                botOutput \u003d p.getMessage();","lastModifiedDate":"2023-09-05"},{"lineNumber":118,"author":{"gitId":"eyelessrhyme7"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":119,"author":{"gitId":"eyelessrhyme7"},"content":"        } else if (userInput.startsWith(Command.UNMARK)) {","lastModifiedDate":"2023-09-05"},{"lineNumber":120,"author":{"gitId":"eyelessrhyme7"},"content":"            // Process a command to mark a task as not done and display the result.","lastModifiedDate":"2023-09-05"},{"lineNumber":121,"author":{"gitId":"eyelessrhyme7"},"content":"            botOutput \u003d botOutput + \"Ok, I\u0027ve marked this task as not done yet: \\n    \";","lastModifiedDate":"2023-08-24"},{"lineNumber":122,"author":{"gitId":"eyelessrhyme7"},"content":"            try {","lastModifiedDate":"2023-08-24"},{"lineNumber":123,"author":{"gitId":"eyelessrhyme7"},"content":"                int taskNo \u003d parser.parseUnmark(userInput, list);","lastModifiedDate":"2023-09-05"},{"lineNumber":124,"author":{"gitId":"eyelessrhyme7"},"content":"                Task x \u003d list.getTask(taskNo - 1);","lastModifiedDate":"2023-09-05"},{"lineNumber":125,"author":{"gitId":"eyelessrhyme7"},"content":"                x.markAsUndone();","lastModifiedDate":"2023-08-24"},{"lineNumber":126,"author":{"gitId":"eyelessrhyme7"},"content":"                botOutput +\u003d x;","lastModifiedDate":"2023-09-05"},{"lineNumber":127,"author":{"gitId":"eyelessrhyme7"},"content":"            } catch (ParserException p) {","lastModifiedDate":"2023-09-05"},{"lineNumber":128,"author":{"gitId":"eyelessrhyme7"},"content":"                // Handle parsing exceptions.","lastModifiedDate":"2023-09-05"},{"lineNumber":129,"author":{"gitId":"eyelessrhyme7"},"content":"                botOutput \u003d p.getMessage();","lastModifiedDate":"2023-09-05"},{"lineNumber":130,"author":{"gitId":"eyelessrhyme7"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":131,"author":{"gitId":"eyelessrhyme7"},"content":"        } else if (userInput.startsWith(Command.DELETE)) {","lastModifiedDate":"2023-09-05"},{"lineNumber":132,"author":{"gitId":"eyelessrhyme7"},"content":"            // Process a command to delete a task and display the deleted task.","lastModifiedDate":"2023-09-05"},{"lineNumber":133,"author":{"gitId":"eyelessrhyme7"},"content":"            botOutput \u003d botOutput + \"Noted. I\u0027ve removed this task: \\n    \";","lastModifiedDate":"2023-08-24"},{"lineNumber":134,"author":{"gitId":"eyelessrhyme7"},"content":"            try {","lastModifiedDate":"2023-08-24"},{"lineNumber":135,"author":{"gitId":"eyelessrhyme7"},"content":"                int taskNo \u003d parser.parseDelete(userInput, list);","lastModifiedDate":"2023-09-05"},{"lineNumber":136,"author":{"gitId":"eyelessrhyme7"},"content":"                Task x \u003d list.deleteTask(taskNo - 1);","lastModifiedDate":"2023-09-05"},{"lineNumber":137,"author":{"gitId":"eyelessrhyme7"},"content":"                botOutput +\u003d x;","lastModifiedDate":"2023-09-05"},{"lineNumber":138,"author":{"gitId":"eyelessrhyme7"},"content":"            } catch (ParserException p) {","lastModifiedDate":"2023-09-05"},{"lineNumber":139,"author":{"gitId":"eyelessrhyme7"},"content":"                // Handle parsing exceptions.","lastModifiedDate":"2023-09-05"},{"lineNumber":140,"author":{"gitId":"eyelessrhyme7"},"content":"                botOutput \u003d p.getMessage();","lastModifiedDate":"2023-09-05"},{"lineNumber":141,"author":{"gitId":"eyelessrhyme7"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":142,"author":{"gitId":"eyelessrhyme7"},"content":"        } else if (userInput.startsWith(Command.FIND)) {","lastModifiedDate":"2023-09-05"},{"lineNumber":143,"author":{"gitId":"eyelessrhyme7"},"content":"            try {","lastModifiedDate":"2023-09-05"},{"lineNumber":144,"author":{"gitId":"eyelessrhyme7"},"content":"                String queryString \u003d parser.parseFind(userInput, list);","lastModifiedDate":"2023-09-05"},{"lineNumber":145,"author":{"gitId":"eyelessrhyme7"},"content":"                TaskList listSearchMatches \u003d list.searchMatches(queryString);","lastModifiedDate":"2023-09-05"},{"lineNumber":146,"author":{"gitId":"eyelessrhyme7"},"content":"                botOutput \u003d botOutput + \"Here are the matching tasks in your list: \\n    \"","lastModifiedDate":"2023-09-07"},{"lineNumber":147,"author":{"gitId":"eyelessrhyme7"},"content":"                        + listSearchMatches.toString();","lastModifiedDate":"2023-09-07"},{"lineNumber":148,"author":{"gitId":"eyelessrhyme7"},"content":"            } catch (ParserException p) {","lastModifiedDate":"2023-09-05"},{"lineNumber":149,"author":{"gitId":"eyelessrhyme7"},"content":"                botOutput \u003d p.getMessage();","lastModifiedDate":"2023-09-05"},{"lineNumber":150,"author":{"gitId":"eyelessrhyme7"},"content":"            }","lastModifiedDate":"2023-09-05"},{"lineNumber":151,"author":{"gitId":"eyelessrhyme7"},"content":"        } else {","lastModifiedDate":"2023-08-24"},{"lineNumber":152,"author":{"gitId":"eyelessrhyme7"},"content":"            try {","lastModifiedDate":"2023-08-24"},{"lineNumber":153,"author":{"gitId":"eyelessrhyme7"},"content":"                // Attempt to create a new task based on the user input.","lastModifiedDate":"2023-09-05"},{"lineNumber":154,"author":{"gitId":"eyelessrhyme7"},"content":"                Task t \u003d Task.taskCon(userInput);","lastModifiedDate":"2023-08-24"},{"lineNumber":155,"author":{"gitId":"eyelessrhyme7"},"content":"                list.addTask(t);","lastModifiedDate":"2023-09-05"},{"lineNumber":156,"author":{"gitId":"eyelessrhyme7"},"content":"                botOutput \u003d botOutput + \"added: \" + t + \"\\n    Now you have \" + list.getSize() + \" tasks in the list.\";","lastModifiedDate":"2023-09-05"},{"lineNumber":157,"author":{"gitId":"eyelessrhyme7"},"content":"            } catch (InvalidCommandException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":158,"author":{"gitId":"eyelessrhyme7"},"content":"                // Handle invalid commands.","lastModifiedDate":"2023-09-05"},{"lineNumber":159,"author":{"gitId":"eyelessrhyme7"},"content":"                botOutput \u003d \"OOPS!!! I\u0027m sorry, but I\u0027m afraid I don\u0027t comprehend Sergeant!\";","lastModifiedDate":"2023-08-24"},{"lineNumber":160,"author":{"gitId":"eyelessrhyme7"},"content":"            } catch (InvalidTaskCreationException t) {","lastModifiedDate":"2023-08-24"},{"lineNumber":161,"author":{"gitId":"eyelessrhyme7"},"content":"                // Handle invalid task creation.","lastModifiedDate":"2023-09-05"},{"lineNumber":162,"author":{"gitId":"eyelessrhyme7"},"content":"                botOutput \u003d t.getMessage();","lastModifiedDate":"2023-08-24"},{"lineNumber":163,"author":{"gitId":"eyelessrhyme7"},"content":"            } catch (DateTimeParseException d) {","lastModifiedDate":"2023-09-04"},{"lineNumber":164,"author":{"gitId":"eyelessrhyme7"},"content":"                // Handle date and time format exceptions.","lastModifiedDate":"2023-09-05"},{"lineNumber":165,"author":{"gitId":"eyelessrhyme7"},"content":"                botOutput \u003d \"Please specify deadlines and dates in the following format, \" + Task.DATE_TIME_FORMAT;","lastModifiedDate":"2023-09-07"},{"lineNumber":166,"author":{"gitId":"eyelessrhyme7"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":167,"author":{"gitId":"eyelessrhyme7"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":168,"author":{"gitId":"eyelessrhyme7"},"content":"        // Return the generated bot response to run() method.","lastModifiedDate":"2023-09-05"},{"lineNumber":169,"author":{"gitId":"eyelessrhyme7"},"content":"        return botOutput;","lastModifiedDate":"2023-09-04"},{"lineNumber":170,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":171,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":172,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":173,"author":{"gitId":"eyelessrhyme7"},"content":"     * The main method to start the Duke bot.","lastModifiedDate":"2023-09-05"},{"lineNumber":174,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":175,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param args The command-line arguments (not used in this application).","lastModifiedDate":"2023-09-05"},{"lineNumber":176,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":177,"author":{"gitId":"eyelessrhyme7"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-04"},{"lineNumber":178,"author":{"gitId":"eyelessrhyme7"},"content":"        // Specify the file path for data storage.","lastModifiedDate":"2023-09-05"},{"lineNumber":179,"author":{"gitId":"eyelessrhyme7"},"content":"        String filePath \u003d \"./data/duke.txt\";","lastModifiedDate":"2023-09-04"},{"lineNumber":180,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":181,"author":{"gitId":"eyelessrhyme7"},"content":"        // Create an instance of Duke and run the bot.","lastModifiedDate":"2023-09-05"},{"lineNumber":182,"author":{"gitId":"eyelessrhyme7"},"content":"        Duke dukeInstance \u003d new Duke(filePath);","lastModifiedDate":"2023-09-05"},{"lineNumber":183,"author":{"gitId":"eyelessrhyme7"},"content":"        dukeInstance.runBot();","lastModifiedDate":"2023-09-04"},{"lineNumber":184,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":185,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"eyelessrhyme7":182,"-":3}},{"path":"src/main/java/duke/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eyelessrhyme7"},"content":"package duke;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"eyelessrhyme7"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"eyelessrhyme7"},"content":" * The `InvalidCommandException` class is a custom exception that is thrown when an invalid command","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"eyelessrhyme7"},"content":" * is encountered in the Duke application.","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"eyelessrhyme7"},"content":" * This exception is used to handle cases where the user provides an unrecognized command.","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"eyelessrhyme7"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"eyelessrhyme7"},"content":"public class InvalidCommandException extends Exception {","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"eyelessrhyme7"},"content":"     * Constructs a new `InvalidCommandException` with the specified detail message.","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param message The detail message indicating the reason for the exception.","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"eyelessrhyme7"},"content":"    public InvalidCommandException(String message) {","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"eyelessrhyme7"},"content":"        // Call the constructor of the parent class (Exception) and provide the error message.","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"eyelessrhyme7"},"content":"        super(message);","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"eyelessrhyme7"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"eyelessrhyme7":19}},{"path":"src/main/java/duke/InvalidFileFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eyelessrhyme7"},"content":"package duke;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"eyelessrhyme7"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"eyelessrhyme7"},"content":" * The `InvalidFileFormatException` class is a custom exception that is thrown when an invalid","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"eyelessrhyme7"},"content":" * file format is encountered while loading data in the Duke application.","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"eyelessrhyme7"},"content":" * This exception is used to handle cases where the data file has an unexpected or corrupted format.","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"eyelessrhyme7"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"eyelessrhyme7"},"content":"public class InvalidFileFormatException extends Exception {","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"eyelessrhyme7"},"content":"     * Constructs a new `InvalidFileFormatException` with the specified detail message.","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param message The detail message indicating the reason for the exception.","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"eyelessrhyme7"},"content":"    public InvalidFileFormatException(String message) {","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"eyelessrhyme7"},"content":"        // Call the constructor of the parent class (Exception) and provide the error message.","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"eyelessrhyme7"},"content":"        super(message);","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"eyelessrhyme7"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"eyelessrhyme7":19}},{"path":"src/main/java/duke/InvalidTaskCreationException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eyelessrhyme7"},"content":"package duke;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"eyelessrhyme7"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"eyelessrhyme7"},"content":" * The `InvalidTaskCreationException` class is a custom exception that is thrown when an error occurs","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"eyelessrhyme7"},"content":" * during the creation of a task in the Duke application.","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"eyelessrhyme7"},"content":" * This exception is used to handle cases where task creation fails due to invalid input or other issues.","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"eyelessrhyme7"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"eyelessrhyme7"},"content":"public class InvalidTaskCreationException extends Exception {","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"eyelessrhyme7"},"content":"     * Constructs a new `InvalidTaskCreationException` with the specified detail message.","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param message The detail message indicating the reason for the exception.","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"eyelessrhyme7"},"content":"    public InvalidTaskCreationException(String message) {","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"eyelessrhyme7"},"content":"        // Call the constructor of the parent class (Exception) and provide the error message.","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"eyelessrhyme7"},"content":"        super(message);","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"eyelessrhyme7"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"eyelessrhyme7":19}},{"path":"src/main/java/duke/InvalidTaskNumberException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eyelessrhyme7"},"content":"package duke;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"eyelessrhyme7"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"eyelessrhyme7"},"content":" * The `InvalidTaskNumberException` class is a custom exception that is thrown when an","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"eyelessrhyme7"},"content":" * invalid task number is encountered in the Duke application.","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"eyelessrhyme7"},"content":" * This exception is used to handle cases where an invalid task number is provided as input.","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"eyelessrhyme7"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"eyelessrhyme7"},"content":"public class InvalidTaskNumberException extends Exception {","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"eyelessrhyme7"},"content":"     * Constructs a new `InvalidTaskNumberException` with the specified detail message.","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param message The detail message indicating the reason for the exception.","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"eyelessrhyme7"},"content":"    public InvalidTaskNumberException(String message) {","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"eyelessrhyme7"},"content":"        // Call the constructor of the parent class (Exception) and provide the error message.","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"eyelessrhyme7"},"content":"        super(message);","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"eyelessrhyme7"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"eyelessrhyme7":19}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eyelessrhyme7"},"content":"package duke;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"eyelessrhyme7"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"eyelessrhyme7"},"content":" * The `Parser` class is responsible for parsing user input and extracting relevant information","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"eyelessrhyme7"},"content":" * for processing in the Duke application.","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"eyelessrhyme7"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"eyelessrhyme7"},"content":"public class Parser {","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"eyelessrhyme7"},"content":"     * Parses a user input string to extract the task number to mark as done.","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param userInput The user\u0027s input command.","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param list      The task list to validate the task number against.","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return The task number to mark as done.","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"eyelessrhyme7"},"content":"     * @throws ParserException if parsing or validation fails.","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"eyelessrhyme7"},"content":"    public int parseMark(String userInput, TaskList list) throws ParserException {","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"eyelessrhyme7"},"content":"        int taskNo;","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"eyelessrhyme7"},"content":"        try {","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"eyelessrhyme7"},"content":"            // Extract the task number from the user input.","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"eyelessrhyme7"},"content":"            taskNo \u003d Integer.parseInt(userInput.substring(5));","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"eyelessrhyme7"},"content":"            // Check if the task number is within valid bounds.","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"eyelessrhyme7"},"content":"            if (taskNo \u003e list.getSize() | taskNo \u003c 1) {","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"eyelessrhyme7"},"content":"                throw new InvalidTaskNumberException(\"Please enter valid Task No. to mark!\");","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"eyelessrhyme7"},"content":"            }","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"eyelessrhyme7"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"eyelessrhyme7"},"content":"            throw new ParserException(\"Please enter valid Task No. (INTEGER) to mark in the format: \u0027mark 4\u0027\");","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"eyelessrhyme7"},"content":"        } catch (InvalidTaskNumberException d) {","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"eyelessrhyme7"},"content":"            throw new ParserException(\"Please enter valid Task No. to mark!\");","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"eyelessrhyme7"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"eyelessrhyme7"},"content":"        return taskNo;","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"eyelessrhyme7"},"content":"     * Parses a user input string to extract the task number to unmark as not done.","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param userInput The user\u0027s input command.","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param list      The task list to validate the task number against.","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return The task number to unmark as not done.","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"eyelessrhyme7"},"content":"     * @throws ParserException if parsing or validation fails.","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"eyelessrhyme7"},"content":"    public int parseUnmark(String userInput, TaskList list) throws ParserException {","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"eyelessrhyme7"},"content":"        int taskNo;","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"eyelessrhyme7"},"content":"        try {","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"eyelessrhyme7"},"content":"            // Extract the task number from the user input.","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"eyelessrhyme7"},"content":"            taskNo \u003d Integer.parseInt(userInput.substring(7));","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"eyelessrhyme7"},"content":"            // Check if the task number is within valid bounds.","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"eyelessrhyme7"},"content":"            if (taskNo \u003e list.getSize() | taskNo \u003c 1) {","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"eyelessrhyme7"},"content":"                throw new InvalidTaskNumberException(\"Please enter valid Task No. to unmark!\");","lastModifiedDate":"2023-09-05"},{"lineNumber":52,"author":{"gitId":"eyelessrhyme7"},"content":"            }","lastModifiedDate":"2023-09-05"},{"lineNumber":53,"author":{"gitId":"eyelessrhyme7"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":54,"author":{"gitId":"eyelessrhyme7"},"content":"            throw new ParserException(\"Please enter valid Task No. (INTEGER) to unmark in the format: \u0027unmark 4\u0027\");","lastModifiedDate":"2023-09-05"},{"lineNumber":55,"author":{"gitId":"eyelessrhyme7"},"content":"        } catch (InvalidTaskNumberException d) {","lastModifiedDate":"2023-09-05"},{"lineNumber":56,"author":{"gitId":"eyelessrhyme7"},"content":"            throw new ParserException(\"Please enter valid Task No. to unmark!\");","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"eyelessrhyme7"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"eyelessrhyme7"},"content":"        return taskNo;","lastModifiedDate":"2023-09-05"},{"lineNumber":59,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":60,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":61,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":62,"author":{"gitId":"eyelessrhyme7"},"content":"     * Parses a user input string to extract the task number to delete.","lastModifiedDate":"2023-09-05"},{"lineNumber":63,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":64,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param userInput The user\u0027s input command.","lastModifiedDate":"2023-09-05"},{"lineNumber":65,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param list      The task list to validate the task number against.","lastModifiedDate":"2023-09-05"},{"lineNumber":66,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return The task number to delete.","lastModifiedDate":"2023-09-05"},{"lineNumber":67,"author":{"gitId":"eyelessrhyme7"},"content":"     * @throws ParserException if parsing or validation fails.","lastModifiedDate":"2023-09-05"},{"lineNumber":68,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":69,"author":{"gitId":"eyelessrhyme7"},"content":"    public int parseDelete(String userInput, TaskList list) throws ParserException {","lastModifiedDate":"2023-09-05"},{"lineNumber":70,"author":{"gitId":"eyelessrhyme7"},"content":"        int taskNo;","lastModifiedDate":"2023-09-05"},{"lineNumber":71,"author":{"gitId":"eyelessrhyme7"},"content":"        try {","lastModifiedDate":"2023-09-05"},{"lineNumber":72,"author":{"gitId":"eyelessrhyme7"},"content":"            // Extract the task number from the user input.","lastModifiedDate":"2023-09-05"},{"lineNumber":73,"author":{"gitId":"eyelessrhyme7"},"content":"            taskNo \u003d Integer.parseInt(userInput.substring(7));","lastModifiedDate":"2023-09-05"},{"lineNumber":74,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":75,"author":{"gitId":"eyelessrhyme7"},"content":"            // Check if the task number is within valid bounds.","lastModifiedDate":"2023-09-05"},{"lineNumber":76,"author":{"gitId":"eyelessrhyme7"},"content":"            if (taskNo \u003e list.getSize() | taskNo \u003c 1) {","lastModifiedDate":"2023-09-05"},{"lineNumber":77,"author":{"gitId":"eyelessrhyme7"},"content":"                throw new InvalidTaskNumberException(\"Please enter valid Task No. to delete!\");","lastModifiedDate":"2023-09-05"},{"lineNumber":78,"author":{"gitId":"eyelessrhyme7"},"content":"            }","lastModifiedDate":"2023-09-05"},{"lineNumber":79,"author":{"gitId":"eyelessrhyme7"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":80,"author":{"gitId":"eyelessrhyme7"},"content":"            throw new ParserException(\"Please enter valid Task No. (INTEGER) to delete in the format: \u0027delete 4\u0027\");","lastModifiedDate":"2023-09-05"},{"lineNumber":81,"author":{"gitId":"eyelessrhyme7"},"content":"        } catch (InvalidTaskNumberException d) {","lastModifiedDate":"2023-09-05"},{"lineNumber":82,"author":{"gitId":"eyelessrhyme7"},"content":"            throw new ParserException(\"Please enter valid Task No. to delete!\");","lastModifiedDate":"2023-09-05"},{"lineNumber":83,"author":{"gitId":"eyelessrhyme7"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":84,"author":{"gitId":"eyelessrhyme7"},"content":"        return taskNo;","lastModifiedDate":"2023-09-05"},{"lineNumber":85,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":86,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":87,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":88,"author":{"gitId":"eyelessrhyme7"},"content":"     * Parses a user input string to search for a specific task.","lastModifiedDate":"2023-09-07"},{"lineNumber":89,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":90,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param userInput The user\u0027s input command.","lastModifiedDate":"2023-09-07"},{"lineNumber":91,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param list      The task list to validate the task number against.","lastModifiedDate":"2023-09-07"},{"lineNumber":92,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return The query string to search for.a","lastModifiedDate":"2023-09-07"},{"lineNumber":93,"author":{"gitId":"eyelessrhyme7"},"content":"     * @throws ParserException if parsing or validation fails.","lastModifiedDate":"2023-09-07"},{"lineNumber":94,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":95,"author":{"gitId":"eyelessrhyme7"},"content":"    public String parseFind(String userInput, TaskList list) throws ParserException {","lastModifiedDate":"2023-09-05"},{"lineNumber":96,"author":{"gitId":"eyelessrhyme7"},"content":"        String queryString;","lastModifiedDate":"2023-09-05"},{"lineNumber":97,"author":{"gitId":"eyelessrhyme7"},"content":"        try {","lastModifiedDate":"2023-09-05"},{"lineNumber":98,"author":{"gitId":"eyelessrhyme7"},"content":"            queryString \u003d userInput.substring(5);","lastModifiedDate":"2023-09-05"},{"lineNumber":99,"author":{"gitId":"eyelessrhyme7"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":100,"author":{"gitId":"eyelessrhyme7"},"content":"            throw new ParserException(\"Please enter valid Task No. (INTEGER) to delete in the format: \u0027delete 4\u0027\");","lastModifiedDate":"2023-09-05"},{"lineNumber":101,"author":{"gitId":"eyelessrhyme7"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":102,"author":{"gitId":"eyelessrhyme7"},"content":"        return queryString;","lastModifiedDate":"2023-09-05"},{"lineNumber":103,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":104,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":105,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":106,"author":{"gitId":"eyelessrhyme7"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"eyelessrhyme7":106}},{"path":"src/main/java/duke/ParserException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eyelessrhyme7"},"content":"package duke;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"eyelessrhyme7"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"eyelessrhyme7"},"content":" * The `ParserException` class is a custom exception that is thrown when an error occurs during parsing","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"eyelessrhyme7"},"content":" * user input in the Duke application.","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"eyelessrhyme7"},"content":" * This exception is used to handle parsing-related errors.","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"eyelessrhyme7"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"eyelessrhyme7"},"content":"public class ParserException extends Exception {","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"eyelessrhyme7"},"content":"     * Constructs a new `ParserException` with the specified detail message.","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param message The detail message indicating the reason for the exception.","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"eyelessrhyme7"},"content":"    public ParserException(String message) {","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"eyelessrhyme7"},"content":"        super(message);","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"eyelessrhyme7"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"eyelessrhyme7":18}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eyelessrhyme7"},"content":"package duke;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"eyelessrhyme7"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"eyelessrhyme7"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"eyelessrhyme7"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"eyelessrhyme7"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"eyelessrhyme7"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"eyelessrhyme7"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"eyelessrhyme7"},"content":" * The `Storage` class handles the reading and writing of tasks from/to a data file.","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"eyelessrhyme7"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"eyelessrhyme7"},"content":"public class Storage {","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"eyelessrhyme7"},"content":"    private String filePath;","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"eyelessrhyme7"},"content":"     * Constructs a new `Storage` instance with the specified file path.","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param filePath The file path where task data is stored.","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"eyelessrhyme7"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"eyelessrhyme7"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"eyelessrhyme7"},"content":"     * Loads tasks from the data file specified in the constructor.","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return An ArrayList of Task objects representing the tasks loaded from the file.","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"eyelessrhyme7"},"content":"     * @throws IOException              if there is an issue reading the file.","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"eyelessrhyme7"},"content":"     * @throws InvalidFileFormatException if the file contains tasks in an invalid format.","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"eyelessrhyme7"},"content":"    //CHECKSTYLE.OFF: Indentation","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"eyelessrhyme7"},"content":"    public ArrayList\u003cTask\u003e load() throws IOException, InvalidFileFormatException {","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"eyelessrhyme7"},"content":"        BufferedReader reader \u003d new BufferedReader(new FileReader(this.filePath));","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"eyelessrhyme7"},"content":"        String line;","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"eyelessrhyme7"},"content":"        ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"eyelessrhyme7"},"content":"        while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"eyelessrhyme7"},"content":"            switch (line.charAt(0)) {","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"eyelessrhyme7"},"content":"                case \u0027T\u0027:","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"eyelessrhyme7"},"content":"                    String[] splitStringList \u003d line.split(\"\\\\|\");","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"eyelessrhyme7"},"content":"                    if (splitStringList.length !\u003d 3) {","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"eyelessrhyme7"},"content":"                        throw new InvalidFileFormatException(\"Invalid format for Todo task in the file.\");","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"eyelessrhyme7"},"content":"                    }","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"eyelessrhyme7"},"content":"                    String fabricatedUserInput \u003d \"todo \" + splitStringList[2];","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"eyelessrhyme7"},"content":"                    Task t;","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"eyelessrhyme7"},"content":"                    try {","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"eyelessrhyme7"},"content":"                        t \u003d Task.taskCon(fabricatedUserInput);","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"eyelessrhyme7"},"content":"                    } catch (InvalidCommandException | InvalidTaskCreationException e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"eyelessrhyme7"},"content":"                        throw new InvalidFileFormatException(\"Invalid format for Todo task in the file.\");","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"eyelessrhyme7"},"content":"                    }","lastModifiedDate":"2023-09-05"},{"lineNumber":52,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":53,"author":{"gitId":"eyelessrhyme7"},"content":"                    if (splitStringList[1].equals(\"1\")) {","lastModifiedDate":"2023-09-05"},{"lineNumber":54,"author":{"gitId":"eyelessrhyme7"},"content":"                        t.markAsDone();","lastModifiedDate":"2023-09-05"},{"lineNumber":55,"author":{"gitId":"eyelessrhyme7"},"content":"                    }","lastModifiedDate":"2023-09-05"},{"lineNumber":56,"author":{"gitId":"eyelessrhyme7"},"content":"                    taskList.add(t);","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"eyelessrhyme7"},"content":"                    break;","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":59,"author":{"gitId":"eyelessrhyme7"},"content":"                case \u0027D\u0027:","lastModifiedDate":"2023-09-05"},{"lineNumber":60,"author":{"gitId":"eyelessrhyme7"},"content":"                    splitStringList \u003d line.split(\"\\\\|\");","lastModifiedDate":"2023-09-05"},{"lineNumber":61,"author":{"gitId":"eyelessrhyme7"},"content":"                    if (splitStringList.length !\u003d 4) {","lastModifiedDate":"2023-09-05"},{"lineNumber":62,"author":{"gitId":"eyelessrhyme7"},"content":"                        throw new InvalidFileFormatException(\"Invalid format for Deadline task in the\"","lastModifiedDate":"2023-09-07"},{"lineNumber":63,"author":{"gitId":"eyelessrhyme7"},"content":"                                + \" file.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":64,"author":{"gitId":"eyelessrhyme7"},"content":"                    }","lastModifiedDate":"2023-09-05"},{"lineNumber":65,"author":{"gitId":"eyelessrhyme7"},"content":"                    fabricatedUserInput \u003d \"deadline \" + splitStringList[2] + \"/by \" + splitStringList[3];","lastModifiedDate":"2023-09-05"},{"lineNumber":66,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":67,"author":{"gitId":"eyelessrhyme7"},"content":"                    Task d;","lastModifiedDate":"2023-09-05"},{"lineNumber":68,"author":{"gitId":"eyelessrhyme7"},"content":"                    try {","lastModifiedDate":"2023-09-05"},{"lineNumber":69,"author":{"gitId":"eyelessrhyme7"},"content":"                        d \u003d Task.taskCon(fabricatedUserInput);","lastModifiedDate":"2023-09-05"},{"lineNumber":70,"author":{"gitId":"eyelessrhyme7"},"content":"                    } catch (InvalidCommandException | InvalidTaskCreationException e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":71,"author":{"gitId":"eyelessrhyme7"},"content":"                        throw new InvalidFileFormatException(\"Invalid format for Deadline task in the\"","lastModifiedDate":"2023-09-07"},{"lineNumber":72,"author":{"gitId":"eyelessrhyme7"},"content":"                                + \" file.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":73,"author":{"gitId":"eyelessrhyme7"},"content":"                    }","lastModifiedDate":"2023-09-05"},{"lineNumber":74,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":75,"author":{"gitId":"eyelessrhyme7"},"content":"                    if (splitStringList[1].equals(\"1\")) {","lastModifiedDate":"2023-09-05"},{"lineNumber":76,"author":{"gitId":"eyelessrhyme7"},"content":"                        d.markAsDone();","lastModifiedDate":"2023-09-05"},{"lineNumber":77,"author":{"gitId":"eyelessrhyme7"},"content":"                    }","lastModifiedDate":"2023-09-05"},{"lineNumber":78,"author":{"gitId":"eyelessrhyme7"},"content":"                    taskList.add(d);","lastModifiedDate":"2023-09-05"},{"lineNumber":79,"author":{"gitId":"eyelessrhyme7"},"content":"                    break;","lastModifiedDate":"2023-09-05"},{"lineNumber":80,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":81,"author":{"gitId":"eyelessrhyme7"},"content":"                case \u0027E\u0027:","lastModifiedDate":"2023-09-05"},{"lineNumber":82,"author":{"gitId":"eyelessrhyme7"},"content":"                    splitStringList \u003d line.split(\"\\\\|\");","lastModifiedDate":"2023-09-05"},{"lineNumber":83,"author":{"gitId":"eyelessrhyme7"},"content":"                    if (splitStringList.length !\u003d 5) {","lastModifiedDate":"2023-09-05"},{"lineNumber":84,"author":{"gitId":"eyelessrhyme7"},"content":"                        throw new InvalidFileFormatException(\"Invalid format for Event task in the file.\");","lastModifiedDate":"2023-09-05"},{"lineNumber":85,"author":{"gitId":"eyelessrhyme7"},"content":"                    }","lastModifiedDate":"2023-09-05"},{"lineNumber":86,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":87,"author":{"gitId":"eyelessrhyme7"},"content":"                    fabricatedUserInput \u003d \"event \" + splitStringList[2] + \"/from \" + splitStringList[3] + \"/to \"","lastModifiedDate":"2023-09-05"},{"lineNumber":88,"author":{"gitId":"eyelessrhyme7"},"content":"                            + splitStringList[4];","lastModifiedDate":"2023-09-05"},{"lineNumber":89,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":90,"author":{"gitId":"eyelessrhyme7"},"content":"                    Task ev;","lastModifiedDate":"2023-09-05"},{"lineNumber":91,"author":{"gitId":"eyelessrhyme7"},"content":"                    try {","lastModifiedDate":"2023-09-05"},{"lineNumber":92,"author":{"gitId":"eyelessrhyme7"},"content":"                        ev \u003d Task.taskCon(fabricatedUserInput);","lastModifiedDate":"2023-09-05"},{"lineNumber":93,"author":{"gitId":"eyelessrhyme7"},"content":"                    } catch (InvalidCommandException | InvalidTaskCreationException e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":94,"author":{"gitId":"eyelessrhyme7"},"content":"                        throw new InvalidFileFormatException(\"Invalid format for Event task in the file.\");","lastModifiedDate":"2023-09-05"},{"lineNumber":95,"author":{"gitId":"eyelessrhyme7"},"content":"                    }","lastModifiedDate":"2023-09-05"},{"lineNumber":96,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":97,"author":{"gitId":"eyelessrhyme7"},"content":"                    if (splitStringList[1].equals(\"1\")) {","lastModifiedDate":"2023-09-05"},{"lineNumber":98,"author":{"gitId":"eyelessrhyme7"},"content":"                        ev.markAsDone();","lastModifiedDate":"2023-09-05"},{"lineNumber":99,"author":{"gitId":"eyelessrhyme7"},"content":"                    }","lastModifiedDate":"2023-09-05"},{"lineNumber":100,"author":{"gitId":"eyelessrhyme7"},"content":"                    taskList.add(ev);","lastModifiedDate":"2023-09-05"},{"lineNumber":101,"author":{"gitId":"eyelessrhyme7"},"content":"                    break;","lastModifiedDate":"2023-09-05"},{"lineNumber":102,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":103,"author":{"gitId":"eyelessrhyme7"},"content":"                default:","lastModifiedDate":"2023-09-05"},{"lineNumber":104,"author":{"gitId":"eyelessrhyme7"},"content":"                    // Handle invalid lines or raise an exception if needed.","lastModifiedDate":"2023-09-05"},{"lineNumber":105,"author":{"gitId":"eyelessrhyme7"},"content":"                    break;","lastModifiedDate":"2023-09-05"},{"lineNumber":106,"author":{"gitId":"eyelessrhyme7"},"content":"            }","lastModifiedDate":"2023-09-05"},{"lineNumber":107,"author":{"gitId":"eyelessrhyme7"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":108,"author":{"gitId":"eyelessrhyme7"},"content":"        return taskList;","lastModifiedDate":"2023-09-05"},{"lineNumber":109,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":110,"author":{"gitId":"eyelessrhyme7"},"content":"    //CHECKSTYLE.ON: Indentation","lastModifiedDate":"2023-09-07"},{"lineNumber":111,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":112,"author":{"gitId":"eyelessrhyme7"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"eyelessrhyme7":112}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eyelessrhyme7"},"content":"package duke;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"eyelessrhyme7"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"eyelessrhyme7"},"content":"import java.time.temporal.ChronoUnit;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"eyelessrhyme7"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"eyelessrhyme7"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"eyelessrhyme7"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"eyelessrhyme7"},"content":" * The `TaskList` class manages a list of tasks in the Duke application.","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"eyelessrhyme7"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"eyelessrhyme7"},"content":"public class TaskList {","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"eyelessrhyme7"},"content":"    private ArrayList\u003cTask\u003e taskArrayList;","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"eyelessrhyme7"},"content":"     * Constructs an empty `TaskList`.","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"eyelessrhyme7"},"content":"    public TaskList() {","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"eyelessrhyme7"},"content":"        this.taskArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"eyelessrhyme7"},"content":"     * Constructs a `TaskList` with an existing ArrayList of tasks.","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param taskArrayList The ArrayList containing tasks.","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"eyelessrhyme7"},"content":"    public TaskList(ArrayList taskArrayList) {","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"eyelessrhyme7"},"content":"        this.taskArrayList \u003d taskArrayList;","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"eyelessrhyme7"},"content":"     * Gets a task at the specified index.","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param index The index of the task to retrieve.","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"eyelessrhyme7"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"eyelessrhyme7"},"content":"        return this.taskArrayList.get(index);","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"eyelessrhyme7"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param task The task to add.","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"eyelessrhyme7"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"eyelessrhyme7"},"content":"        this.taskArrayList.add(task);","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"eyelessrhyme7"},"content":"     * Deletes a task at the specified index and returns the deleted task.","lastModifiedDate":"2023-09-05"},{"lineNumber":52,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":53,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param index The index of the task to delete.","lastModifiedDate":"2023-09-05"},{"lineNumber":54,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return The deleted task.","lastModifiedDate":"2023-09-05"},{"lineNumber":55,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":56,"author":{"gitId":"eyelessrhyme7"},"content":"    public Task deleteTask(int index) {","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"eyelessrhyme7"},"content":"        Task x \u003d this.getTask(index);","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"eyelessrhyme7"},"content":"        this.taskArrayList.remove(index);","lastModifiedDate":"2023-09-05"},{"lineNumber":59,"author":{"gitId":"eyelessrhyme7"},"content":"        return x;","lastModifiedDate":"2023-09-05"},{"lineNumber":60,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":61,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":62,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":63,"author":{"gitId":"eyelessrhyme7"},"content":"     * Gets the size of the task list.","lastModifiedDate":"2023-09-05"},{"lineNumber":64,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":65,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return The number of tasks in the list.","lastModifiedDate":"2023-09-05"},{"lineNumber":66,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":67,"author":{"gitId":"eyelessrhyme7"},"content":"    public int getSize() {","lastModifiedDate":"2023-09-05"},{"lineNumber":68,"author":{"gitId":"eyelessrhyme7"},"content":"        return this.taskArrayList.size();","lastModifiedDate":"2023-09-05"},{"lineNumber":69,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":70,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":71,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":72,"author":{"gitId":"eyelessrhyme7"},"content":"     * Converts the task list to a formatted string for display.","lastModifiedDate":"2023-09-05"},{"lineNumber":73,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":74,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return A formatted string representing the tasks in the list.","lastModifiedDate":"2023-09-05"},{"lineNumber":75,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":76,"author":{"gitId":"eyelessrhyme7"},"content":"    public String toString() {","lastModifiedDate":"2023-09-05"},{"lineNumber":77,"author":{"gitId":"eyelessrhyme7"},"content":"        String botOutput \u003d \"\";","lastModifiedDate":"2023-09-05"},{"lineNumber":78,"author":{"gitId":"eyelessrhyme7"},"content":"        for (int i \u003d 1; i \u003c\u003d this.taskArrayList.size(); i++) {","lastModifiedDate":"2023-09-05"},{"lineNumber":79,"author":{"gitId":"eyelessrhyme7"},"content":"            botOutput \u003d botOutput + i + \".\" + \" \" + this.taskArrayList.get(i - 1) + \"\\n    \";","lastModifiedDate":"2023-09-05"},{"lineNumber":80,"author":{"gitId":"eyelessrhyme7"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":81,"author":{"gitId":"eyelessrhyme7"},"content":"        return botOutput;","lastModifiedDate":"2023-09-05"},{"lineNumber":82,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":83,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":84,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":85,"author":{"gitId":"eyelessrhyme7"},"content":"     * Filters and returns a TaskList containing tasks due within one week from the current date.","lastModifiedDate":"2023-09-05"},{"lineNumber":86,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":87,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return A TaskList containing tasks due within one week.","lastModifiedDate":"2023-09-05"},{"lineNumber":88,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":89,"author":{"gitId":"eyelessrhyme7"},"content":"    public TaskList dueWithinWeek() {","lastModifiedDate":"2023-09-05"},{"lineNumber":90,"author":{"gitId":"eyelessrhyme7"},"content":"        TaskList listWeek \u003d new TaskList();","lastModifiedDate":"2023-09-05"},{"lineNumber":91,"author":{"gitId":"eyelessrhyme7"},"content":"        for (Task t: this.taskArrayList) {","lastModifiedDate":"2023-09-05"},{"lineNumber":92,"author":{"gitId":"eyelessrhyme7"},"content":"            LocalDateTime taskDueDate \u003d t.getUrgencyDate();","lastModifiedDate":"2023-09-05"},{"lineNumber":93,"author":{"gitId":"eyelessrhyme7"},"content":"            LocalDateTime currentDate \u003d LocalDateTime.now();","lastModifiedDate":"2023-09-05"},{"lineNumber":94,"author":{"gitId":"eyelessrhyme7"},"content":"            long daysDifference \u003d ChronoUnit.DAYS.between(currentDate, taskDueDate);","lastModifiedDate":"2023-09-05"},{"lineNumber":95,"author":{"gitId":"eyelessrhyme7"},"content":"            // Check if the task\u0027s due date is within one week of the current date (7 days)","lastModifiedDate":"2023-09-05"},{"lineNumber":96,"author":{"gitId":"eyelessrhyme7"},"content":"            if (daysDifference \u003e\u003d 0 \u0026\u0026 daysDifference \u003c\u003d 7) {","lastModifiedDate":"2023-09-05"},{"lineNumber":97,"author":{"gitId":"eyelessrhyme7"},"content":"                listWeek.addTask(t);","lastModifiedDate":"2023-09-05"},{"lineNumber":98,"author":{"gitId":"eyelessrhyme7"},"content":"            }","lastModifiedDate":"2023-09-05"},{"lineNumber":99,"author":{"gitId":"eyelessrhyme7"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":100,"author":{"gitId":"eyelessrhyme7"},"content":"        return listWeek;","lastModifiedDate":"2023-09-05"},{"lineNumber":101,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":102,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":103,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":104,"author":{"gitId":"eyelessrhyme7"},"content":"     * Filters and returns a TaskList containing tasks due within one month from the current date.","lastModifiedDate":"2023-09-05"},{"lineNumber":105,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":106,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return A TaskList containing tasks due within one month.","lastModifiedDate":"2023-09-05"},{"lineNumber":107,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":108,"author":{"gitId":"eyelessrhyme7"},"content":"    public TaskList dueWithinMonth() {","lastModifiedDate":"2023-09-05"},{"lineNumber":109,"author":{"gitId":"eyelessrhyme7"},"content":"        TaskList listMonth \u003d new TaskList();","lastModifiedDate":"2023-09-05"},{"lineNumber":110,"author":{"gitId":"eyelessrhyme7"},"content":"        for (Task t: this.taskArrayList) {","lastModifiedDate":"2023-09-05"},{"lineNumber":111,"author":{"gitId":"eyelessrhyme7"},"content":"            LocalDateTime taskDueDate \u003d t.getUrgencyDate();","lastModifiedDate":"2023-09-05"},{"lineNumber":112,"author":{"gitId":"eyelessrhyme7"},"content":"            LocalDateTime currentDate \u003d LocalDateTime.now();","lastModifiedDate":"2023-09-05"},{"lineNumber":113,"author":{"gitId":"eyelessrhyme7"},"content":"            long daysDifference \u003d ChronoUnit.DAYS.between(currentDate, taskDueDate);","lastModifiedDate":"2023-09-05"},{"lineNumber":114,"author":{"gitId":"eyelessrhyme7"},"content":"            // Check if the task\u0027s due date is within one week of the current date (7 days)","lastModifiedDate":"2023-09-05"},{"lineNumber":115,"author":{"gitId":"eyelessrhyme7"},"content":"            if (daysDifference \u003e\u003d 0 \u0026\u0026 daysDifference \u003c\u003d 30) {","lastModifiedDate":"2023-09-05"},{"lineNumber":116,"author":{"gitId":"eyelessrhyme7"},"content":"                listMonth.addTask(t);","lastModifiedDate":"2023-09-05"},{"lineNumber":117,"author":{"gitId":"eyelessrhyme7"},"content":"            }","lastModifiedDate":"2023-09-05"},{"lineNumber":118,"author":{"gitId":"eyelessrhyme7"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":119,"author":{"gitId":"eyelessrhyme7"},"content":"        return listMonth;","lastModifiedDate":"2023-09-05"},{"lineNumber":120,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":121,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":122,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":123,"author":{"gitId":"eyelessrhyme7"},"content":"     * Searches for relevant or matching tasks within the tasklist.","lastModifiedDate":"2023-09-07"},{"lineNumber":124,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":125,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param queryString The user\u0027s input query string.","lastModifiedDate":"2023-09-07"},{"lineNumber":126,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return The TaskList of matching tasks.","lastModifiedDate":"2023-09-07"},{"lineNumber":127,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":128,"author":{"gitId":"eyelessrhyme7"},"content":"    public TaskList searchMatches(String queryString) {","lastModifiedDate":"2023-09-05"},{"lineNumber":129,"author":{"gitId":"eyelessrhyme7"},"content":"        TaskList listSearches \u003d new TaskList();","lastModifiedDate":"2023-09-05"},{"lineNumber":130,"author":{"gitId":"eyelessrhyme7"},"content":"        for (Task t: this.taskArrayList) {","lastModifiedDate":"2023-09-05"},{"lineNumber":131,"author":{"gitId":"eyelessrhyme7"},"content":"            String taskDescription \u003d t.getDescription();","lastModifiedDate":"2023-09-05"},{"lineNumber":132,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":133,"author":{"gitId":"eyelessrhyme7"},"content":"            // Check if the task\u0027s description contains the queryString","lastModifiedDate":"2023-09-05"},{"lineNumber":134,"author":{"gitId":"eyelessrhyme7"},"content":"            if (taskDescription.contains(queryString)) {","lastModifiedDate":"2023-09-05"},{"lineNumber":135,"author":{"gitId":"eyelessrhyme7"},"content":"                listSearches.addTask(t);","lastModifiedDate":"2023-09-05"},{"lineNumber":136,"author":{"gitId":"eyelessrhyme7"},"content":"            }","lastModifiedDate":"2023-09-05"},{"lineNumber":137,"author":{"gitId":"eyelessrhyme7"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":138,"author":{"gitId":"eyelessrhyme7"},"content":"        return listSearches;","lastModifiedDate":"2023-09-05"},{"lineNumber":139,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":140,"author":{"gitId":"eyelessrhyme7"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"eyelessrhyme7":140}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eyelessrhyme7"},"content":"package duke;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"eyelessrhyme7"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"eyelessrhyme7"},"content":" * The `Ui` class handles user interface-related functionality, including displaying messages and greetings.","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"eyelessrhyme7"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"eyelessrhyme7"},"content":"public class Ui {","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"eyelessrhyme7"},"content":"    private String greeting;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"eyelessrhyme7"},"content":"    private String exitGreeting;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"eyelessrhyme7"},"content":"    private String horizontalBar;","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"eyelessrhyme7"},"content":"    private String logo;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"eyelessrhyme7"},"content":"     * Constructs a new `Ui` instance with default greetings, horizontal bar, and logo.","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"eyelessrhyme7"},"content":"    public Ui() {","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"eyelessrhyme7"},"content":"        this.greeting \u003d \"Hello, I\u0027m Capt. Price! What can I do for you today, Sergeant?\";","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"eyelessrhyme7"},"content":"        this.exitGreeting \u003d \"Over and out. See you next mission!\";","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"eyelessrhyme7"},"content":"        this.horizontalBar \u003d \"-------------------------------------------------\";","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"eyelessrhyme7"},"content":"        this.logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"eyelessrhyme7"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"eyelessrhyme7"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"eyelessrhyme7"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"eyelessrhyme7"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"eyelessrhyme7"},"content":"     * Constructs a new `Ui` instance with custom greetings, horizontal bar, and logo.","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param greeting      The custom greeting message.","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param exitGreeting  The custom exit greeting message.","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param horizontalBar The custom horizontal bar string.","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param logo          The custom logo string.","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"eyelessrhyme7"},"content":"    public Ui(String greeting, String exitGreeting, String horizontalBar, String logo) {","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"eyelessrhyme7"},"content":"        this.greeting \u003d greeting;","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"eyelessrhyme7"},"content":"        this.exitGreeting \u003d exitGreeting;","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"eyelessrhyme7"},"content":"        this.horizontalBar \u003d horizontalBar;","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"eyelessrhyme7"},"content":"        this.logo \u003d logo;","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"eyelessrhyme7"},"content":"     * Formats a message with a horizontal bar and spaces for display.","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param message The message to format.","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return The formatted message.","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"eyelessrhyme7"},"content":"    private String botMessage(String message) {","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"eyelessrhyme7"},"content":"        String space \u003d \"    \";","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"eyelessrhyme7"},"content":"        return space + this.horizontalBar + \"\\n\" + space + message + \"\\n\" + space + this.horizontalBar;","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":52,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":53,"author":{"gitId":"eyelessrhyme7"},"content":"     * Displays the greeting message.","lastModifiedDate":"2023-09-05"},{"lineNumber":54,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":55,"author":{"gitId":"eyelessrhyme7"},"content":"    public void displayGreeting() {","lastModifiedDate":"2023-09-05"},{"lineNumber":56,"author":{"gitId":"eyelessrhyme7"},"content":"        System.out.println(this.botMessage(this.greeting));","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":59,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":60,"author":{"gitId":"eyelessrhyme7"},"content":"     * Displays the exit greeting message.","lastModifiedDate":"2023-09-05"},{"lineNumber":61,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":62,"author":{"gitId":"eyelessrhyme7"},"content":"    public void displayExitGreeting() {","lastModifiedDate":"2023-09-05"},{"lineNumber":63,"author":{"gitId":"eyelessrhyme7"},"content":"        System.out.println(this.botMessage(this.exitGreeting));","lastModifiedDate":"2023-09-05"},{"lineNumber":64,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":65,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":66,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":67,"author":{"gitId":"eyelessrhyme7"},"content":"     * Displays a message using the botMessage formatting.","lastModifiedDate":"2023-09-05"},{"lineNumber":68,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":69,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param message The message to display.","lastModifiedDate":"2023-09-05"},{"lineNumber":70,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":71,"author":{"gitId":"eyelessrhyme7"},"content":"    public void displayMessage(String message) {","lastModifiedDate":"2023-09-05"},{"lineNumber":72,"author":{"gitId":"eyelessrhyme7"},"content":"        System.out.println(botMessage(message));","lastModifiedDate":"2023-09-05"},{"lineNumber":73,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":74,"author":{"gitId":"eyelessrhyme7"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"eyelessrhyme7":74}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eyelessrhyme7"},"content":"package duke.task;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"eyelessrhyme7"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"eyelessrhyme7"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"eyelessrhyme7"},"content":"import duke.InvalidTaskCreationException;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"eyelessrhyme7"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"eyelessrhyme7"},"content":" * The `Deadline` class represents a task with a specific deadline in the Duke application.","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"eyelessrhyme7"},"content":" * It is a subclass of the `Task` class.","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"eyelessrhyme7"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"eyelessrhyme7"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"eyelessrhyme7"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"eyelessrhyme7"},"content":"     * Constructs a new `Deadline` task with the specified description and deadline.","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param by          The deadline of the task as a LocalDateTime object.","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"eyelessrhyme7"},"content":"    public Deadline(String description, LocalDateTime by) {","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"eyelessrhyme7"},"content":"        super(description);","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"eyelessrhyme7"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"eyelessrhyme7"},"content":"     * Parses user input and creates a `Deadline` task.","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param description The description of the `Deadline` task.","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param by          The deadline as a string to be parsed into a LocalDateTime object.","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return A `Deadline` task instance.","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"eyelessrhyme7"},"content":"     * @throws InvalidTaskCreationException if the description or deadline is empty.","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"eyelessrhyme7"},"content":"     * @throws DateTimeParseException       if there is an issue parsing the deadline string to LocalDateTime.","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"eyelessrhyme7"},"content":"    public static Deadline deadlineCon(String description, String by) throws InvalidTaskCreationException,","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"eyelessrhyme7"},"content":"            DateTimeParseException {","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"eyelessrhyme7"},"content":"        if (description.equalsIgnoreCase(\"\")) {","lastModifiedDate":"2023-08-24"},{"lineNumber":39,"author":{"gitId":"eyelessrhyme7"},"content":"            throw new InvalidTaskCreationException(\"OOPS!!! The description of a Deadline Task cannot be empty.\");","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"eyelessrhyme7"},"content":"        } else if (by.equalsIgnoreCase(\"\")) {","lastModifiedDate":"2023-08-24"},{"lineNumber":41,"author":{"gitId":"eyelessrhyme7"},"content":"            throw new InvalidTaskCreationException(\"OOPS!!! The deadline time of a Deadline Task cannot be empty.\");","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"eyelessrhyme7"},"content":"        } else {","lastModifiedDate":"2023-08-24"},{"lineNumber":43,"author":{"gitId":"eyelessrhyme7"},"content":"            LocalDateTime deadlineDate \u003d LocalDateTime.parse(by, Task.DATE_TIME_FORMATTER);","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"eyelessrhyme7"},"content":"            return new Deadline(description, deadlineDate);","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"eyelessrhyme7"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":47,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"eyelessrhyme7"},"content":"     * Gets the urgency date and time for the `Deadline` task, which is the deadline itself.","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return The urgency date and time (deadline).","lastModifiedDate":"2023-09-05"},{"lineNumber":52,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":53,"author":{"gitId":"eyelessrhyme7"},"content":"    public LocalDateTime getUrgencyDate() {","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"eyelessrhyme7"},"content":"        return this.by;","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":57,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"eyelessrhyme7"},"content":"     * Converts the `Deadline` task to a formatted string representation for display.","lastModifiedDate":"2023-09-05"},{"lineNumber":59,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":60,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return A formatted string representing the `Deadline` task.","lastModifiedDate":"2023-09-05"},{"lineNumber":61,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":62,"author":{"gitId":"eyelessrhyme7"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":63,"author":{"gitId":"eyelessrhyme7"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":64,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"eyelessrhyme7"},"content":"        // Format the LocalDateTime object to a string","lastModifiedDate":"2023-09-04"},{"lineNumber":66,"author":{"gitId":"eyelessrhyme7"},"content":"        String formattedDate \u003d this.by.format(Task.OUTPUT_FORMATTER);","lastModifiedDate":"2023-09-07"},{"lineNumber":67,"author":{"gitId":"eyelessrhyme7"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + formattedDate + \")\";","lastModifiedDate":"2023-09-04"},{"lineNumber":68,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":69,"author":{"gitId":"eyelessrhyme7"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"eyelessrhyme7":69}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eyelessrhyme7"},"content":"package duke.task;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"eyelessrhyme7"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"eyelessrhyme7"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"eyelessrhyme7"},"content":"import duke.InvalidTaskCreationException;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"eyelessrhyme7"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"eyelessrhyme7"},"content":" * The `Event` class represents a task with a specific event time range in the Duke application.","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"eyelessrhyme7"},"content":" * It is a subclass of the `Task` class.","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"eyelessrhyme7"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"eyelessrhyme7"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"eyelessrhyme7"},"content":"    protected LocalDateTime from;","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"eyelessrhyme7"},"content":"    protected LocalDateTime to;","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"eyelessrhyme7"},"content":"     * Constructs a new `Event` task with the specified description and event time range.","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param from        The start time of the event as a LocalDateTime object.","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param to          The end time of the event as a LocalDateTime object.","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"eyelessrhyme7"},"content":"    public Event(String description, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"eyelessrhyme7"},"content":"        super(description);","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"eyelessrhyme7"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"eyelessrhyme7"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"eyelessrhyme7"},"content":"     * Parses user input and creates an `Event` task.","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param description The description of the `Event` task.","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param from        The start time of the event as a string to be parsed into a LocalDateTime object.","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param to          The end time of the event as a string to be parsed into a LocalDateTime object.","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return An `Event` task instance.","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"eyelessrhyme7"},"content":"     * @throws InvalidTaskCreationException if the description, start time, or end time is empty.","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"eyelessrhyme7"},"content":"     * @throws DateTimeParseException       if there is an issue parsing the start or end time strings to LocalDateTime.","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"eyelessrhyme7"},"content":"    public static Event eventCon(String description, String from, String to) throws InvalidTaskCreationException,","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"eyelessrhyme7"},"content":"            DateTimeParseException {","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"eyelessrhyme7"},"content":"        if (description.equalsIgnoreCase(\"\")) {","lastModifiedDate":"2023-08-24"},{"lineNumber":43,"author":{"gitId":"eyelessrhyme7"},"content":"            throw new InvalidTaskCreationException(\"OOPS!!! The description of a Event Task cannot be empty.\");","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"eyelessrhyme7"},"content":"        } else if (from.equalsIgnoreCase(\"\")) {","lastModifiedDate":"2023-08-24"},{"lineNumber":45,"author":{"gitId":"eyelessrhyme7"},"content":"            throw new InvalidTaskCreationException(\"OOPS!!! The from time of a Event Task cannot be empty.\");","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"eyelessrhyme7"},"content":"        } else if (to.equalsIgnoreCase(\"\")) {","lastModifiedDate":"2023-08-24"},{"lineNumber":47,"author":{"gitId":"eyelessrhyme7"},"content":"            throw new InvalidTaskCreationException(\"OOPS!!! The to time of a Event Task cannot be empty.\");","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"eyelessrhyme7"},"content":"        } else {","lastModifiedDate":"2023-08-24"},{"lineNumber":49,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"eyelessrhyme7"},"content":"            LocalDateTime eventStartTimeDate \u003d LocalDateTime.parse(from, Task.DATE_TIME_FORMATTER);","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"eyelessrhyme7"},"content":"            LocalDateTime eventEndTimeDate \u003d LocalDateTime.parse(to, Task.DATE_TIME_FORMATTER);","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"eyelessrhyme7"},"content":"            return new Event(description, eventStartTimeDate, eventEndTimeDate);","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"eyelessrhyme7"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":55,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"eyelessrhyme7"},"content":"     * Gets the urgency date and time for the `Event` task, which is the start time of the event.","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":59,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return The urgency date and time (start time).","lastModifiedDate":"2023-09-05"},{"lineNumber":60,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":61,"author":{"gitId":"eyelessrhyme7"},"content":"    public LocalDateTime getUrgencyDate() {","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"eyelessrhyme7"},"content":"        return this.from;","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":66,"author":{"gitId":"eyelessrhyme7"},"content":"     * Converts the `Event` task to a formatted string representation for display.","lastModifiedDate":"2023-09-05"},{"lineNumber":67,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":68,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return A formatted string representing the `Event` task.","lastModifiedDate":"2023-09-05"},{"lineNumber":69,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":70,"author":{"gitId":"eyelessrhyme7"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":71,"author":{"gitId":"eyelessrhyme7"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":72,"author":{"gitId":"eyelessrhyme7"},"content":"        String formattedDateFrom \u003d this.from.format(Task.OUTPUT_FORMATTER);","lastModifiedDate":"2023-09-07"},{"lineNumber":73,"author":{"gitId":"eyelessrhyme7"},"content":"        String formattedDateTo \u003d this.to.format(Task.OUTPUT_FORMATTER);","lastModifiedDate":"2023-09-07"},{"lineNumber":74,"author":{"gitId":"eyelessrhyme7"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + formattedDateFrom + \" to: \" + formattedDateTo + \")\";","lastModifiedDate":"2023-09-04"},{"lineNumber":75,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":76,"author":{"gitId":"eyelessrhyme7"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"eyelessrhyme7":76}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eyelessrhyme7"},"content":"package duke.task;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"eyelessrhyme7"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"eyelessrhyme7"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"eyelessrhyme7"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"eyelessrhyme7"},"content":"import duke.InvalidCommandException;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"eyelessrhyme7"},"content":"import duke.InvalidTaskCreationException;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"eyelessrhyme7"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"eyelessrhyme7"},"content":" * The `Task` class represents a task in the Duke application. It serves as the base class for different types of tasks.","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"eyelessrhyme7"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"eyelessrhyme7"},"content":"public class Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"eyelessrhyme7"},"content":"    // Date and Time formats","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"eyelessrhyme7"},"content":"    public static final String DATE_FORMAT \u003d \"yyyy-MM-dd\";","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"eyelessrhyme7"},"content":"    public static final String DATE_TIME_FORMAT \u003d \"yyyy-MM-dd HH:mm:ss\";","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"eyelessrhyme7"},"content":"    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d DateTimeFormatter.ofPattern(DATE_TIME_FORMAT);","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"eyelessrhyme7"},"content":"    public static final DateTimeFormatter OUTPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"HH:mm, dd MMMM yyyy\");","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"eyelessrhyme7"},"content":"    protected String description;","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"eyelessrhyme7"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"eyelessrhyme7"},"content":"     * Constructs a new `Task` with the specified description.","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"eyelessrhyme7"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"eyelessrhyme7"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"eyelessrhyme7"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"eyelessrhyme7"},"content":"     * Parses user input and creates a specific type of task (Todo, Deadline, or Event).","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param userInput The user input to parse.","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return An instance of a specific task type (Todo, Deadline, or Event).","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"eyelessrhyme7"},"content":"     * @throws InvalidCommandException      if the user input does not match any valid command.","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"eyelessrhyme7"},"content":"     * @throws InvalidTaskCreationException if there is an issue creating the task from the input.","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"eyelessrhyme7"},"content":"     * @throws DateTimeParseException       if there is an issue parsing date and time.","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"eyelessrhyme7"},"content":"    public static Task taskCon(String userInput) throws InvalidCommandException, InvalidTaskCreationException,","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"eyelessrhyme7"},"content":"            DateTimeParseException {","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"eyelessrhyme7"},"content":"        if (userInput.startsWith(\"todo\")) {","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"eyelessrhyme7"},"content":"            return ToDo.toDoCon(userInput.substring(5));","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"eyelessrhyme7"},"content":"        } else if (userInput.startsWith(\"deadline\")) {","lastModifiedDate":"2023-08-24"},{"lineNumber":46,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":47,"author":{"gitId":"eyelessrhyme7"},"content":"            String[] splitInput \u003d userInput.split(\"/by\");","lastModifiedDate":"2023-08-24"},{"lineNumber":48,"author":{"gitId":"eyelessrhyme7"},"content":"            String taskDescription \u003d splitInput[0].substring(9).trim();","lastModifiedDate":"2023-08-24"},{"lineNumber":49,"author":{"gitId":"eyelessrhyme7"},"content":"            String deadline \u003d splitInput[1].trim();","lastModifiedDate":"2023-08-24"},{"lineNumber":50,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":51,"author":{"gitId":"eyelessrhyme7"},"content":"            return Deadline.deadlineCon(taskDescription, deadline);","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"eyelessrhyme7"},"content":"        } else if (userInput.startsWith(\"event\")) {","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":55,"author":{"gitId":"eyelessrhyme7"},"content":"            String[] splitInput \u003d userInput.split(\"/from\");","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"eyelessrhyme7"},"content":"            String taskDescription \u003d splitInput[0].substring(6).trim();","lastModifiedDate":"2023-08-24"},{"lineNumber":57,"author":{"gitId":"eyelessrhyme7"},"content":"            String[] eventDetails \u003d splitInput[1].split(\"/to\");","lastModifiedDate":"2023-08-24"},{"lineNumber":58,"author":{"gitId":"eyelessrhyme7"},"content":"            String eventStartTime \u003d eventDetails[0].trim();","lastModifiedDate":"2023-08-24"},{"lineNumber":59,"author":{"gitId":"eyelessrhyme7"},"content":"            String eventEndTime \u003d eventDetails[1].trim();","lastModifiedDate":"2023-08-24"},{"lineNumber":60,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":61,"author":{"gitId":"eyelessrhyme7"},"content":"            return Event.eventCon(taskDescription, eventStartTime, eventEndTime);","lastModifiedDate":"2023-09-07"},{"lineNumber":62,"author":{"gitId":"eyelessrhyme7"},"content":"        } else {","lastModifiedDate":"2023-08-24"},{"lineNumber":63,"author":{"gitId":"eyelessrhyme7"},"content":"            throw new InvalidCommandException(\"Invalid command to add task!\");","lastModifiedDate":"2023-08-24"},{"lineNumber":64,"author":{"gitId":"eyelessrhyme7"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":65,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":66,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":67,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":68,"author":{"gitId":"eyelessrhyme7"},"content":"     * Gets the urgency date and time for the task.","lastModifiedDate":"2023-09-05"},{"lineNumber":69,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":70,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return The urgency date and time.","lastModifiedDate":"2023-09-05"},{"lineNumber":71,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":72,"author":{"gitId":"eyelessrhyme7"},"content":"    public LocalDateTime getUrgencyDate() {","lastModifiedDate":"2023-09-04"},{"lineNumber":73,"author":{"gitId":"eyelessrhyme7"},"content":"        return LocalDateTime.now();","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":75,"author":{"gitId":"eyelessrhyme7"},"content":"    public String getDescription() {","lastModifiedDate":"2023-09-05"},{"lineNumber":76,"author":{"gitId":"eyelessrhyme7"},"content":"        return this.description;","lastModifiedDate":"2023-09-05"},{"lineNumber":77,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":78,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":79,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":80,"author":{"gitId":"eyelessrhyme7"},"content":"     * Gets the status icon for the task (either \"X\" for done or \" \" for not done).","lastModifiedDate":"2023-09-05"},{"lineNumber":81,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":82,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return The status icon.","lastModifiedDate":"2023-09-05"},{"lineNumber":83,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":84,"author":{"gitId":"eyelessrhyme7"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-24"},{"lineNumber":85,"author":{"gitId":"eyelessrhyme7"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2023-08-24"},{"lineNumber":86,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":87,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":88,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":89,"author":{"gitId":"eyelessrhyme7"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-09-05"},{"lineNumber":90,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":91,"author":{"gitId":"eyelessrhyme7"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-24"},{"lineNumber":92,"author":{"gitId":"eyelessrhyme7"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-24"},{"lineNumber":93,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":94,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":95,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":96,"author":{"gitId":"eyelessrhyme7"},"content":"     * Marks the task as undone.","lastModifiedDate":"2023-09-05"},{"lineNumber":97,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":98,"author":{"gitId":"eyelessrhyme7"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-08-24"},{"lineNumber":99,"author":{"gitId":"eyelessrhyme7"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-24"},{"lineNumber":100,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":101,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":102,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":103,"author":{"gitId":"eyelessrhyme7"},"content":"     * Converts the task to a formatted string representation for display.","lastModifiedDate":"2023-09-05"},{"lineNumber":104,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":105,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return A formatted string representing the task.","lastModifiedDate":"2023-09-05"},{"lineNumber":106,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":107,"author":{"gitId":"eyelessrhyme7"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":108,"author":{"gitId":"eyelessrhyme7"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":109,"author":{"gitId":"eyelessrhyme7"},"content":"        return \"[\" + getStatusIcon() + \"]\" + \" \" + this.description;","lastModifiedDate":"2023-08-24"},{"lineNumber":110,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":111,"author":{"gitId":"eyelessrhyme7"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"eyelessrhyme7":111}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eyelessrhyme7"},"content":"package duke.task;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"eyelessrhyme7"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"eyelessrhyme7"},"content":"import duke.InvalidTaskCreationException;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"eyelessrhyme7"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"eyelessrhyme7"},"content":" * The `ToDo` class represents a simple task without a specific deadline or event time range in the Duke application.","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"eyelessrhyme7"},"content":" * It is a subclass of the `Task` class.","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"eyelessrhyme7"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"eyelessrhyme7"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"eyelessrhyme7"},"content":"     * Constructs a new `ToDo` task with the specified description.","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"eyelessrhyme7"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"eyelessrhyme7"},"content":"        super(description);","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"eyelessrhyme7"},"content":"     * Parses user input and creates a `ToDo` task.","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"eyelessrhyme7"},"content":"     * @param description The description of the `ToDo` task.","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return A `ToDo` task instance.","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"eyelessrhyme7"},"content":"     * @throws InvalidTaskCreationException if the description is empty.","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"eyelessrhyme7"},"content":"    public static ToDo toDoCon(String description) throws InvalidTaskCreationException {","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"eyelessrhyme7"},"content":"        if (description.equalsIgnoreCase(\"\")) {","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"eyelessrhyme7"},"content":"            throw new InvalidTaskCreationException(\"OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"eyelessrhyme7"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"eyelessrhyme7"},"content":"        return new ToDo(description);","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"eyelessrhyme7"},"content":"     * Gets the urgency date and time for the `ToDo` task, which is the current date and time.","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return The urgency date and time (current date and time).","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"eyelessrhyme7"},"content":"    public LocalDateTime getUrgencyDate() {","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"eyelessrhyme7"},"content":"        return LocalDateTime.now();","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"eyelessrhyme7"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"eyelessrhyme7"},"content":"     * Converts the `ToDo` task to a formatted string representation for display.","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"eyelessrhyme7"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"eyelessrhyme7"},"content":"     * @return A formatted string representing the `ToDo` task.","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"eyelessrhyme7"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"eyelessrhyme7"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":51,"author":{"gitId":"eyelessrhyme7"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":52,"author":{"gitId":"eyelessrhyme7"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"eyelessrhyme7"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"eyelessrhyme7":54}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eyelessrhyme7"},"content":"package duke;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"eyelessrhyme7"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"eyelessrhyme7"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"eyelessrhyme7"},"content":"import org.junit.jupiter.api.DisplayName;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"eyelessrhyme7"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"eyelessrhyme7"},"content":"class ParserTest {","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"eyelessrhyme7"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"eyelessrhyme7"},"content":"    @DisplayName(\"Test assert ParserException in parseMark (when invalid Task number passed)\")","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"eyelessrhyme7"},"content":"    public void parseMark_invalidTaskNo_throwsParserException() {","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"eyelessrhyme7"},"content":"        Exception parserException \u003d assertThrows(duke.ParserException.class, ()","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"eyelessrhyme7"},"content":"                -\u003e new Parser().parseMark(\"mark 6\", new TaskList()));","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"eyelessrhyme7"},"content":"        assertEquals(\"Please enter valid Task No. to mark!\", parserException.getMessage());","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"eyelessrhyme7"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"eyelessrhyme7"},"content":"    @DisplayName(\"Test assert ParserException in parseMark (when non-int argument passed)\")","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"eyelessrhyme7"},"content":"    public void parseMark_nonIntArgument_throwsParserException() {","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"eyelessrhyme7"},"content":"        Exception parserException \u003d assertThrows(duke.ParserException.class, ()","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"eyelessrhyme7"},"content":"                -\u003e new Parser().parseMark(\"mark f\", new TaskList()));","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"eyelessrhyme7"},"content":"        assertEquals(\"Please enter valid Task No. (INTEGER) to mark in the format: \u0027mark 4\u0027\",","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"eyelessrhyme7"},"content":"                parserException.getMessage());","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"eyelessrhyme7"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"eyelessrhyme7"},"content":"    @DisplayName(\"Test assert ParserException in parseMark (when non-int argument passed)\")","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"eyelessrhyme7"},"content":"    public void parseDelete_nonIntArgument_throwsParserException() {","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"eyelessrhyme7"},"content":"        Exception parserException \u003d assertThrows(duke.ParserException.class, ()","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"eyelessrhyme7"},"content":"                -\u003e new Parser().parseDelete(\"delete f\", new TaskList()));","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"eyelessrhyme7"},"content":"        assertEquals(\"Please enter valid Task No. (INTEGER) to delete in the format: \u0027delete 4\u0027\",","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"eyelessrhyme7"},"content":"                parserException.getMessage());","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"eyelessrhyme7"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"eyelessrhyme7":35}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"eyelessrhyme7"},"content":"package duke.task;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"eyelessrhyme7"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"eyelessrhyme7"},"content":"import org.junit.jupiter.api.DisplayName;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"eyelessrhyme7"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"eyelessrhyme7"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"eyelessrhyme7"},"content":"public class TodoTest {","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"eyelessrhyme7"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"eyelessrhyme7"},"content":"    @DisplayName(\"Test assert Todo Creation\")","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"eyelessrhyme7"},"content":"    public void creation() {","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"eyelessrhyme7"},"content":"        ToDo todo1 \u003d new ToDo(\"Read notes\");","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"eyelessrhyme7"},"content":"        ToDo todo2 \u003d new ToDo(\"Read notes\");","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"eyelessrhyme7"},"content":"        assertEquals(todo1.toString(), todo2.toString());","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"eyelessrhyme7"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"eyelessrhyme7"},"content":"    @DisplayName(\"Test assert Todo UrgencyDate\")","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"eyelessrhyme7"},"content":"    public void urgencyDate() {","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"eyelessrhyme7"},"content":"        ToDo todo1 \u003d new ToDo(\"Complete Quiz\");","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"eyelessrhyme7"},"content":"        ToDo todo2 \u003d new ToDo(\"Complete Quiz 4\");","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"eyelessrhyme7"},"content":"        assertEquals(todo1.getUrgencyDate().getHour(), todo2.getUrgencyDate().getHour());","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"eyelessrhyme7"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"eyelessrhyme7"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"eyelessrhyme7":22}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"eyelessrhyme7"},"content":"todo quiz","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"eyelessrhyme7"},"content":"deadline lab /by Monday 7pm","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"eyelessrhyme7"},"content":"event sharing /from Monday 7pm /to Friday 10pm","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"eyelessrhyme7"},"content":"bye","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"eyelessrhyme7":4}}]
