[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"CJ-Lee01"},"content":"# duke.Duke project template","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"CJ-Lee01"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"CJ-Lee01":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"CJ-Lee01"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"CJ-Lee01":1,"-":41}},{"path":"src/main/java/duke/Commands.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CJ-Lee01"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"CJ-Lee01"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"CJ-Lee01"},"content":" * This represents the different commands that can be used in the Duke program.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"CJ-Lee01"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"CJ-Lee01"},"content":"public enum Commands {","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"CJ-Lee01"},"content":"    //alr implemented enums.","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"CJ-Lee01"},"content":"    deadline,","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"CJ-Lee01"},"content":"    todo,","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"CJ-Lee01"},"content":"    event,","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"CJ-Lee01"},"content":"    bye,","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"CJ-Lee01"},"content":"    list,","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"CJ-Lee01"},"content":"    mark,","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"CJ-Lee01"},"content":"    unmark,","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"CJ-Lee01"},"content":"    delete,","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"CJ-Lee01"},"content":"    find,","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"CJ-Lee01"},"content":"    unknown;","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"CJ-Lee01"},"content":"     * Takes a string and returns the corresponding Commands enum value.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"CJ-Lee01"},"content":"     * If the string does not match any of the enum values, it returns the unknown value.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"CJ-Lee01"},"content":"     * @param cmd The string to be converted to a Commands enum value.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"CJ-Lee01"},"content":"     * @return The corresponding Commands enum value or unknown if no match is found.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"CJ-Lee01"},"content":"    public static Commands get(String cmd) {","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"CJ-Lee01"},"content":"        Commands c;","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"CJ-Lee01"},"content":"        try {","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"CJ-Lee01"},"content":"            c \u003d Commands.valueOf(cmd);","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"CJ-Lee01"},"content":"        } catch (IllegalArgumentException | NullPointerException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"CJ-Lee01"},"content":"            c \u003d Commands.unknown;","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"CJ-Lee01"},"content":"        return c;","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"CJ-Lee01"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"CJ-Lee01":34}},{"path":"src/main/java/duke/DateTimeOptional.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CJ-Lee01"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"CJ-Lee01"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"CJ-Lee01"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"CJ-Lee01"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"CJ-Lee01"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"CJ-Lee01"},"content":"import java.time.temporal.TemporalAccessor;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"CJ-Lee01"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"CJ-Lee01"},"content":" * This abstract class wraps around an optional date and time value.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"CJ-Lee01"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"CJ-Lee01"},"content":"public abstract class DateTimeOptional {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"CJ-Lee01"},"content":"    /** Accepted format for date and times. */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"CJ-Lee01"},"content":"    private static DateTimeFormatter standardDateTimeParser \u003d DateTimeFormatter","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"CJ-Lee01"},"content":"            .ofPattern(\"[yyyy MM dd[ HHmm]][yyyy-MM-dd[ HHmm]][yyyy/MM/dd[ HHmm]]\");","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"CJ-Lee01"},"content":"    /** Display format for datetime. */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"CJ-Lee01"},"content":"    private static DateTimeFormatter standardDateTimeDisplay \u003d DateTimeFormatter","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"CJ-Lee01"},"content":"            .ofPattern(\"dd-MM-yyyy [HH:mm]\");","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"CJ-Lee01"},"content":"     * Parses a string into a DateTimeOptional object.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"CJ-Lee01"},"content":"     * If the string cannot be parsed into either, it throws a DukeException.DukeDateTimeException.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"CJ-Lee01"},"content":"     * @param s The string to be parsed into a DateTimeOptional object.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"CJ-Lee01"},"content":"     * @return A DateTimeOptional object representing the parsed date and time.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"CJ-Lee01"},"content":"     * @throws DukeException.DukeDateTimeException If the string cannot be parsed.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"CJ-Lee01"},"content":"    public static DateTimeOptional parseDateTime(String s) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"CJ-Lee01"},"content":"        TemporalAccessor temp \u003d standardDateTimeParser.parse(s);","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"CJ-Lee01"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"CJ-Lee01"},"content":"            LocalDateTime dateTime \u003d LocalDateTime.parse(s, standardDateTimeParser);","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"CJ-Lee01"},"content":"            return new DateTimeOnly(dateTime);","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"CJ-Lee01"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"CJ-Lee01"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"CJ-Lee01"},"content":"            LocalDate date \u003d LocalDate.parse(s, standardDateTimeParser);","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"CJ-Lee01"},"content":"            return new DateOnly(date);","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"CJ-Lee01"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"CJ-Lee01"},"content":"            throw new DukeException.DukeDateTimeException(s);","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"CJ-Lee01"},"content":"     * Gives a string representation of the date and time value in display format.","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"CJ-Lee01"},"content":"     * @return A string representation of the date and time value in display format.","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"CJ-Lee01"},"content":"    public abstract String displayText();","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"CJ-Lee01"},"content":"    private static class DateOnly extends DateTimeOptional {","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"CJ-Lee01"},"content":"        final LocalDate date;","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"CJ-Lee01"},"content":"        DateOnly(LocalDate date) {","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"CJ-Lee01"},"content":"            this.date \u003d date;","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"CJ-Lee01"},"content":"        @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"CJ-Lee01"},"content":"        public String toString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"CJ-Lee01"},"content":"            return this.date.format(standardDateTimeParser);","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"CJ-Lee01"},"content":"        @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"CJ-Lee01"},"content":"        public String displayText() {","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"CJ-Lee01"},"content":"            return this.date.format(standardDateTimeDisplay);","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"CJ-Lee01"},"content":"    private static class DateTimeOnly extends DateTimeOptional {","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"CJ-Lee01"},"content":"        final LocalDateTime date;","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"CJ-Lee01"},"content":"        DateTimeOnly(LocalDateTime date) {","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"CJ-Lee01"},"content":"            this.date \u003d date;","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"CJ-Lee01"},"content":"        @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"CJ-Lee01"},"content":"        public String toString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"CJ-Lee01"},"content":"            return this.date.format(standardDateTimeParser);","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"CJ-Lee01"},"content":"        @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"CJ-Lee01"},"content":"        public String displayText() {","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"CJ-Lee01"},"content":"            return this.date.format(standardDateTimeDisplay);","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"CJ-Lee01"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"CJ-Lee01":82}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CJ-Lee01"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"CJ-Lee01"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"CJ-Lee01"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"CJ-Lee01"},"content":" * This represents a Deadline which extends Task.","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"CJ-Lee01"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"CJ-Lee01"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"CJ-Lee01"},"content":"    /** The date to complete the task by. */","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"CJ-Lee01"},"content":"    private DateTimeOptional deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"CJ-Lee01"},"content":"     * Parses a raw string containing description and date information into a deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"CJ-Lee01"},"content":"     * The raw string must be in the format \"description /by deadline\".","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"CJ-Lee01"},"content":"     * If the raw string is empty, it throws a DukeException.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"CJ-Lee01"},"content":"     * If the raw string does not contain a deadline, it throws a DukeException.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"CJ-Lee01"},"content":"     * If the deadline cannot be parsed into a DateTimeOptional object, it throws a DukeException.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"CJ-Lee01"},"content":"     * @param rawLine The raw string to be parsed into a Deadline object.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"CJ-Lee01"},"content":"     * @return A Deadline object representing the parsed task.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"CJ-Lee01"},"content":"     * @throws DukeException If the raw string is empty or does not contain a deadline or contains invalid deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"CJ-Lee01"},"content":"    public static Deadline create(String rawLine) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"CJ-Lee01"},"content":"        if (rawLine.length() \u003d\u003d 0) {","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"CJ-Lee01"},"content":"            throw new DukeException(\"Err: Empty Description\");","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"CJ-Lee01"},"content":"        String[] instructions \u003d rawLine.split(\" /by \");","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"CJ-Lee01"},"content":"        if (instructions.length !\u003d 2) {","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"CJ-Lee01"},"content":"            throw new DukeException(\"Err: No deadline given. Format - deadline \u003cdescription\u003e /by \u003cdeadline\u003e\");","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"CJ-Lee01"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"CJ-Lee01"},"content":"            DateTimeOptional deadline \u003d DateTimeOptional.parseDateTime(instructions[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"CJ-Lee01"},"content":"            return new Deadline(instructions[0], deadline);","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"CJ-Lee01"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"CJ-Lee01"},"content":"            throw new DukeException.DukeDateTimeException(instructions[1]);","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"CJ-Lee01"},"content":"     * Constructs a deadline with the description and a DateTimeOptional object.","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"CJ-Lee01"},"content":"     * @param item The description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"CJ-Lee01"},"content":"     * @param deadline The deadline of the task as a DateTimeOptional object.","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"CJ-Lee01"},"content":"    public Deadline(String item, DateTimeOptional deadline) {","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"CJ-Lee01"},"content":"        super(item);","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"CJ-Lee01"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-08-21"},{"lineNumber":45,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":46,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"CJ-Lee01"},"content":"     * Gives a string representation of the task in file format.","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"CJ-Lee01"},"content":"     * @return A string representation of the task in file format.","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"CJ-Lee01"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":52,"author":{"gitId":"CJ-Lee01"},"content":"    public String fileString() {","lastModifiedDate":"2023-08-28"},{"lineNumber":53,"author":{"gitId":"CJ-Lee01"},"content":"        return String.format(","lastModifiedDate":"2023-08-28"},{"lineNumber":54,"author":{"gitId":"CJ-Lee01"},"content":"                \"deadline %d %s /by %s\",","lastModifiedDate":"2023-08-28"},{"lineNumber":55,"author":{"gitId":"CJ-Lee01"},"content":"                super.isDone ? 1 : 0,","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"CJ-Lee01"},"content":"                super.description,","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"CJ-Lee01"},"content":"                this.deadline","lastModifiedDate":"2023-08-28"},{"lineNumber":58,"author":{"gitId":"CJ-Lee01"},"content":"        );","lastModifiedDate":"2023-08-28"},{"lineNumber":59,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":60,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"CJ-Lee01"},"content":"     * Gives a string representation of the task in display format.","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"CJ-Lee01"},"content":"     * @return A string representation of the task in display format.","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"CJ-Lee01"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":66,"author":{"gitId":"CJ-Lee01"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":67,"author":{"gitId":"CJ-Lee01"},"content":"        return String.format(","lastModifiedDate":"2023-08-21"},{"lineNumber":68,"author":{"gitId":"CJ-Lee01"},"content":"                \"[D][%s] %s (by %s)\",","lastModifiedDate":"2023-08-21"},{"lineNumber":69,"author":{"gitId":"CJ-Lee01"},"content":"                super.getStatusIcon(),","lastModifiedDate":"2023-08-21"},{"lineNumber":70,"author":{"gitId":"CJ-Lee01"},"content":"                super.description,","lastModifiedDate":"2023-08-21"},{"lineNumber":71,"author":{"gitId":"CJ-Lee01"},"content":"                this.deadline.displayText()","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"CJ-Lee01"},"content":"        );","lastModifiedDate":"2023-08-21"},{"lineNumber":73,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":74,"author":{"gitId":"CJ-Lee01"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"CJ-Lee01":74}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CJ-Lee01"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"CJ-Lee01"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"CJ-Lee01"},"content":" * This represents the main entry point of the Duke program.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"CJ-Lee01"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"CJ-Lee01"},"content":"public class Duke {","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"CJ-Lee01"},"content":"    /** The name of the bot. */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"CJ-Lee01"},"content":"    private static final String NAME \u003d \"Nino!\";","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"CJ-Lee01"},"content":"     * runs the Duke program.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"CJ-Lee01"},"content":"     * @param args Command line arguments (not used).","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"CJ-Lee01"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"CJ-Lee01"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"CJ-Lee01"},"content":"            UserInterface userInterface \u003d new UserInterface(new Storage(), new StoreList());","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"CJ-Lee01"},"content":"            System.out.println(\"Hello, my name is \" + Duke.NAME);","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"CJ-Lee01"},"content":"            UserInterface.display(\"What can I do for you?\");","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"CJ-Lee01"},"content":"            userInterface.start();","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"CJ-Lee01"},"content":"            userInterface.readCommandLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"CJ-Lee01"},"content":"            userInterface.exit();","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"CJ-Lee01"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"CJ-Lee01"},"content":"            System.out.println(e);","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"CJ-Lee01"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"CJ-Lee01":28}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CJ-Lee01"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"CJ-Lee01"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"CJ-Lee01"},"content":" * Custom exception for the Duke program.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"CJ-Lee01"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"CJ-Lee01"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"CJ-Lee01"},"content":"     * Custom exception for invalid date and time values.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"CJ-Lee01"},"content":"    public static class DukeDateTimeException extends DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"CJ-Lee01"},"content":"        /**","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"CJ-Lee01"},"content":"         * Creates an exception with the invalid datetime string.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"CJ-Lee01"},"content":"         *","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"CJ-Lee01"},"content":"         * @param s The invalid date and time value.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"CJ-Lee01"},"content":"         */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"CJ-Lee01"},"content":"        public DukeDateTimeException(String s) {","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"CJ-Lee01"},"content":"            super(\"Err: DateTime given does not fit the format. Expected: yyyy MM DD HHmm. Got \" + s);","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"CJ-Lee01"},"content":"     * Takes the string and creates an exception with the error message as string.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"CJ-Lee01"},"content":"     * @param s The error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"CJ-Lee01"},"content":"    public DukeException(String s) {","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"CJ-Lee01"},"content":"        super(s);","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"CJ-Lee01"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"CJ-Lee01":29}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CJ-Lee01"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"CJ-Lee01"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"CJ-Lee01"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"CJ-Lee01"},"content":" * Event task with start and end time.","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"CJ-Lee01"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"CJ-Lee01"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"CJ-Lee01"},"content":"    /** Start time. */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"CJ-Lee01"},"content":"    private DateTimeOptional startTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"CJ-Lee01"},"content":"    /** End time. */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"CJ-Lee01"},"content":"    private DateTimeOptional endTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"CJ-Lee01"},"content":"     * Takes a raw string and attempts to create an Event object from it.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"CJ-Lee01"},"content":"     * The raw string must be in the format \"description /from start_time /to end_time\".","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"CJ-Lee01"},"content":"     * If the raw string is empty, does not contain a start time or end time, it throws a DukeException.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"CJ-Lee01"},"content":"     * If the start time or end time cannot be parsed into a DateTimeOptional object, it throws a DukeException.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"CJ-Lee01"},"content":"     * @param rawLine The raw string to be parsed into an Event object.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"CJ-Lee01"},"content":"     * @return An Event object representing the parsed task.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"CJ-Lee01"},"content":"     * @throws DukeException If the raw string is empty or does not contain a start or end time.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"CJ-Lee01"},"content":"    public static Event create(String rawLine) throws DukeException {","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"CJ-Lee01"},"content":"        if (rawLine.length() \u003d\u003d 0) {","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"CJ-Lee01"},"content":"            throw new DukeException(\"Err: Empty Description\");","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"CJ-Lee01"},"content":"        String[] instructions \u003d rawLine.split(\" /from \", 2);","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"CJ-Lee01"},"content":"        if (instructions.length !\u003d 2) {","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"CJ-Lee01"},"content":"            throw new DukeException(\"Err: No start time given. Format is in event \u003cdesc\u003e /from \u003ctime\u003e /to \u003ctime\u003e\");","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"CJ-Lee01"},"content":"        String[] timeLine \u003d instructions[1].split(\" /to \", 2);","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"CJ-Lee01"},"content":"        if (timeLine.length !\u003d 2) {","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"CJ-Lee01"},"content":"            throw new DukeException(\"Err: No end time given. Format is in event \u003cdesc\u003e /from \u003ctime\u003e /to \u003ctime\u003e\");","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"CJ-Lee01"},"content":"        DateTimeOptional startDate, endDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"CJ-Lee01"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"CJ-Lee01"},"content":"            startDate \u003d DateTimeOptional.parseDateTime(timeLine[0]);","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"CJ-Lee01"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"CJ-Lee01"},"content":"            throw new DukeException.DukeDateTimeException(timeLine[0]);","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"CJ-Lee01"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"CJ-Lee01"},"content":"            endDate \u003d DateTimeOptional.parseDateTime(timeLine[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"CJ-Lee01"},"content":"        } catch (DateTimeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"CJ-Lee01"},"content":"            throw new DukeException.DukeDateTimeException(timeLine[1]);","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"CJ-Lee01"},"content":"        return new Event(instructions[0], startDate, endDate);","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":52,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"CJ-Lee01"},"content":"     * Constructs an Event object given the description, the start and the end.","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"CJ-Lee01"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"CJ-Lee01"},"content":"     * @param startTime The start time of the task as a DateTimeOptional object.","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"CJ-Lee01"},"content":"     * @param endTime The end time of the task as a DateTimeOptional object.","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"CJ-Lee01"},"content":"    public Event(String description, DateTimeOptional startTime, DateTimeOptional endTime) {","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"CJ-Lee01"},"content":"        super(description);","lastModifiedDate":"2023-08-21"},{"lineNumber":62,"author":{"gitId":"CJ-Lee01"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":63,"author":{"gitId":"CJ-Lee01"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":64,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":65,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":66,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"CJ-Lee01"},"content":"     * Gives a string representation of the task in file format.","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"CJ-Lee01"},"content":"     * @return A string representation of the task in file format.","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"CJ-Lee01"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":72,"author":{"gitId":"CJ-Lee01"},"content":"    public String fileString() {","lastModifiedDate":"2023-08-28"},{"lineNumber":73,"author":{"gitId":"CJ-Lee01"},"content":"        return String.format(","lastModifiedDate":"2023-08-28"},{"lineNumber":74,"author":{"gitId":"CJ-Lee01"},"content":"                \"event %d %s /from %s /to %s\",","lastModifiedDate":"2023-08-28"},{"lineNumber":75,"author":{"gitId":"CJ-Lee01"},"content":"                super.isDone ? 1 : 0,","lastModifiedDate":"2023-08-28"},{"lineNumber":76,"author":{"gitId":"CJ-Lee01"},"content":"                super.description,","lastModifiedDate":"2023-08-28"},{"lineNumber":77,"author":{"gitId":"CJ-Lee01"},"content":"                this.startTime,","lastModifiedDate":"2023-08-28"},{"lineNumber":78,"author":{"gitId":"CJ-Lee01"},"content":"                this.endTime","lastModifiedDate":"2023-08-28"},{"lineNumber":79,"author":{"gitId":"CJ-Lee01"},"content":"        );","lastModifiedDate":"2023-08-28"},{"lineNumber":80,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":81,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"CJ-Lee01"},"content":"     * Gives a string representation of the task in display format.","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"CJ-Lee01"},"content":"     * @return A string representation of the task in display format.","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":87,"author":{"gitId":"CJ-Lee01"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":88,"author":{"gitId":"CJ-Lee01"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":89,"author":{"gitId":"CJ-Lee01"},"content":"        return String.format(","lastModifiedDate":"2023-08-21"},{"lineNumber":90,"author":{"gitId":"CJ-Lee01"},"content":"                \"[E][%s] %s (from: %s to: %s)\",","lastModifiedDate":"2023-08-21"},{"lineNumber":91,"author":{"gitId":"CJ-Lee01"},"content":"                super.getStatusIcon(),","lastModifiedDate":"2023-08-21"},{"lineNumber":92,"author":{"gitId":"CJ-Lee01"},"content":"                super.description,","lastModifiedDate":"2023-08-21"},{"lineNumber":93,"author":{"gitId":"CJ-Lee01"},"content":"                this.startTime.displayText(),","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"CJ-Lee01"},"content":"                this.endTime.displayText()","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"CJ-Lee01"},"content":"        );","lastModifiedDate":"2023-08-21"},{"lineNumber":96,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":97,"author":{"gitId":"CJ-Lee01"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"CJ-Lee01":97}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CJ-Lee01"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"CJ-Lee01"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"CJ-Lee01"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"CJ-Lee01"},"content":" * A parser for the Duke program.","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"CJ-Lee01"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"CJ-Lee01"},"content":"public class Parser {","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"CJ-Lee01"},"content":"     * Takes a Storage object and attempts to parse the tasks stored in it into an array of Task objects.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"CJ-Lee01"},"content":"     * If a line in the storage file cannot be parsed into a Task object, it throws a DukeException.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"CJ-Lee01"},"content":"     * @param storage The Storage object to be parsed.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"CJ-Lee01"},"content":"     * @return An array of Task objects representing the tasks stored in the Storage object.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"CJ-Lee01"},"content":"     * @throws DukeException If a line in the storage file cannot be parsed into a Task object.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"CJ-Lee01"},"content":"    public static Task[] parseFile(Storage storage) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"CJ-Lee01"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"CJ-Lee01"},"content":"        String[] lines \u003d storage.readLines();","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"CJ-Lee01"},"content":"        for (String line : lines) {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"CJ-Lee01"},"content":"            tasks.add(parseTaskFromFileLine(line));","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"CJ-Lee01"},"content":"        return tasks.toArray(new Task[]{});","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"CJ-Lee01"},"content":"     * Takes a string representing a line from the storage file and attempts to parse it into a Task object.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"CJ-Lee01"},"content":"     * If the string cannot be parsed into a Task object, it throws a DukeException.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"CJ-Lee01"},"content":"     * @param line The string to be parsed into a Task object.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"CJ-Lee01"},"content":"     * @return A Task object representing the parsed task.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"CJ-Lee01"},"content":"     * @throws DukeException If the string cannot be parsed into a Task object.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"CJ-Lee01"},"content":"    private static Task parseTaskFromFileLine(String line) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"CJ-Lee01"},"content":"        String[] tokens \u003d line.split(\" \", 3);","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"CJ-Lee01"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"CJ-Lee01"},"content":"            Commands c \u003d Commands.valueOf(tokens[0]);","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"CJ-Lee01"},"content":"            boolean done \u003d !tokens[1].equals(\"0\");","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"CJ-Lee01"},"content":"            String desc \u003d tokens[2];","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"CJ-Lee01"},"content":"            Task task \u003d Task.create(c, desc);","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"CJ-Lee01"},"content":"            if (done) {","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"CJ-Lee01"},"content":"                task.markAsDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"CJ-Lee01"},"content":"            } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"CJ-Lee01"},"content":"                task.markAsNotDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"CJ-Lee01"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"CJ-Lee01"},"content":"            return task;","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"CJ-Lee01"},"content":"        } catch (IllegalArgumentException | IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"CJ-Lee01"},"content":"            throw new DukeException(\"Corrupted file. Delete all text in the duke.txt to use it again.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"CJ-Lee01"},"content":"        } catch (RuntimeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"CJ-Lee01"},"content":"            throw new DukeException(\"Corrupted file. Delete all text in the duke.txt to use it again.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"CJ-Lee01"},"content":"     * Takes a string (from the command line) and attempts to parse it into a Task object.","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"CJ-Lee01"},"content":"     * If the string is empty, it throws a DukeException.","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"CJ-Lee01"},"content":"     * @param s The string to be parsed into a Task object.","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"CJ-Lee01"},"content":"     * @return A Task object representing the parsed task.","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"CJ-Lee01"},"content":"     * @throws DukeException If the string is empty or cannot be parsed into a Task object.","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"CJ-Lee01"},"content":"    public static Task parseTask(String s) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"CJ-Lee01"},"content":"        if (s.length() \u003d\u003d 0) {","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"CJ-Lee01"},"content":"            throw new DukeException(\"Empty line found\");","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"CJ-Lee01"},"content":"        String[] instructions \u003d s.split(\" \", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"CJ-Lee01"},"content":"        Commands cmd \u003d Commands.get(instructions[0]);","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"CJ-Lee01"},"content":"        return Parser.parseTask(cmd, instructions);","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"CJ-Lee01"},"content":"     * Takes a Commands enum value and an array of strings and attempts to create a Task object from them.","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"CJ-Lee01"},"content":"     * If the array of strings does not contain enough information to create a Task object, it throws a DukeException.","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"CJ-Lee01"},"content":"     * @param cmd The Commands enum value representing the type of task to be created.","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"CJ-Lee01"},"content":"     * @param instructions The array of strings containing information about the task to be created.","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"CJ-Lee01"},"content":"     * @return A Task object representing the created task.","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"CJ-Lee01"},"content":"     * @throws DukeException If the array of strings does not contain enough information to create a Task object.","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"CJ-Lee01"},"content":"    public static Task parseTask(Commands cmd, String[] instructions) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"CJ-Lee01"},"content":"        if (instructions.length !\u003d 2) {","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"CJ-Lee01"},"content":"            throw new DukeException(\"No details given for command: \" + cmd);","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"CJ-Lee01"},"content":"        return Task.create(cmd, instructions[1]);","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"CJ-Lee01"},"content":"    public static String findAll(String[] instructions, StoreList src) {","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"CJ-Lee01"},"content":"        String listString;","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"CJ-Lee01"},"content":"        if (instructions.length \u003c\u003d 1) {","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"CJ-Lee01"},"content":"            listString \u003d src.toString();","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"CJ-Lee01"},"content":"            return String.format(\"Here are the tasks:\\n%s\", listString);","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"CJ-Lee01"},"content":"        String term \u003d instructions[1];","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"CJ-Lee01"},"content":"        StoreList list \u003d src.findAll(term);","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"CJ-Lee01"},"content":"        listString \u003d list.toString();","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"CJ-Lee01"},"content":"        return String.format(\"Here are the tasks with \u0027%s\u0027:\\n%s\", term, listString);","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"CJ-Lee01"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"CJ-Lee01":102}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CJ-Lee01"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"CJ-Lee01"},"content":"import java.io.File;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"CJ-Lee01"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"CJ-Lee01"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"CJ-Lee01"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"CJ-Lee01"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"CJ-Lee01"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"CJ-Lee01"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"CJ-Lee01"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"CJ-Lee01"},"content":" * Storage system for Duke program.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"CJ-Lee01"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"CJ-Lee01"},"content":"public class Storage {","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"CJ-Lee01"},"content":"    /** Default file path. */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"CJ-Lee01"},"content":"    private static final String FILE_PATH \u003d \"../../duke.txt\";","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"CJ-Lee01"},"content":"    /** The file to parse */","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"CJ-Lee01"},"content":"    private File file;","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"CJ-Lee01"},"content":"     * Constructs a Storage object with a File object.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"CJ-Lee01"},"content":"     * @param file The File object representing the file to be used for storage.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"CJ-Lee01"},"content":"    public Storage(File file) {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"CJ-Lee01"},"content":"        this.file \u003d file;","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"CJ-Lee01"},"content":"     * Constructs a Storage object with a string representing the path of the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"CJ-Lee01"},"content":"     * If the file does not exist, it attempts to create it.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"CJ-Lee01"},"content":"     * If the file cannot be created, it throws a DukeException.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"CJ-Lee01"},"content":"     * @param pathName The path of the file to be used for storage.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"CJ-Lee01"},"content":"     * @throws DukeException If the file cannot be created.","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"CJ-Lee01"},"content":"    public Storage(String pathName) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"CJ-Lee01"},"content":"        this.file \u003d new File(pathName);","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"CJ-Lee01"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"CJ-Lee01"},"content":"            file.createNewFile();","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"CJ-Lee01"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"CJ-Lee01"},"content":"            throw new DukeException(\"Unable to find or create file.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"CJ-Lee01"},"content":"     * Creates a Storage object using the default file path.","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"CJ-Lee01"},"content":"     * If the file does not exist, it attempts to create it.","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"CJ-Lee01"},"content":"     * If the file cannot be created, it throws a DukeException.","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"CJ-Lee01"},"content":"     * @throws DukeException If the file cannot be created.","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"CJ-Lee01"},"content":"    public Storage() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"CJ-Lee01"},"content":"        this.file \u003d new File(FILE_PATH);","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"CJ-Lee01"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"CJ-Lee01"},"content":"            file.createNewFile();","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"CJ-Lee01"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"CJ-Lee01"},"content":"            throw new DukeException(\"Unable to find or create file.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"CJ-Lee01"},"content":"     * Reads the lines from the storage file and returns them as an array of strings.","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"CJ-Lee01"},"content":"     * If the storage file cannot be found, it throws a DukeException.","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"CJ-Lee01"},"content":"     * @return An array of strings representing the lines in the storage file.","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"CJ-Lee01"},"content":"     * @throws DukeException If the storage file cannot be found.","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"CJ-Lee01"},"content":"    public String[] readLines() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"CJ-Lee01"},"content":"        Scanner sc;","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"CJ-Lee01"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"CJ-Lee01"},"content":"            sc \u003d new Scanner(this.file);","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"CJ-Lee01"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"CJ-Lee01"},"content":"            throw new DukeException(\"File not found.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"CJ-Lee01"},"content":"        ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"CJ-Lee01"},"content":"        while (sc.hasNext()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"CJ-Lee01"},"content":"            lines.add(sc.nextLine());","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"CJ-Lee01"},"content":"        sc.close();","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"CJ-Lee01"},"content":"        return lines.toArray(new String[]{});","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"CJ-Lee01"},"content":"     * Takes a string and writes it to the storage file.","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"CJ-Lee01"},"content":"     * @param s The string to be written to the storage file.","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"CJ-Lee01"},"content":"    public void write(String s) {","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"CJ-Lee01"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"CJ-Lee01"},"content":"            FileWriter fileWriter \u003d new FileWriter(file);","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"CJ-Lee01"},"content":"            PrintWriter pw \u003d new PrintWriter(fileWriter);","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"CJ-Lee01"},"content":"            pw.write(s);","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"CJ-Lee01"},"content":"            pw.flush();","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"CJ-Lee01"},"content":"            pw.close();","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"CJ-Lee01"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"CJ-Lee01"},"content":"            System.out.println(\"Unable to write to duke.txt\");","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"CJ-Lee01"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"CJ-Lee01":101}},{"path":"src/main/java/duke/StoreList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CJ-Lee01"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"CJ-Lee01"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"CJ-Lee01"},"content":"import java.util.Collection;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"CJ-Lee01"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"CJ-Lee01"},"content":" * List of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"CJ-Lee01"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"CJ-Lee01"},"content":"public class StoreList {","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"CJ-Lee01"},"content":"    /** The list of task. */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"CJ-Lee01"},"content":"    ArrayList\u003cTask\u003e list;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"CJ-Lee01"},"content":"    /** Creates a new list of tasks. */","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"CJ-Lee01"},"content":"    public StoreList() {","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"CJ-Lee01"},"content":"        this.list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"CJ-Lee01"},"content":"     * Adds task corresponding to the Commands enum value and a string representing the description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"CJ-Lee01"},"content":"     * If a task cannot be created from the given information, it returns an error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"CJ-Lee01"},"content":"     * @param type The Commands enum value representing the type of task to be added.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"CJ-Lee01"},"content":"     * @param description The description of the task to be added.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"CJ-Lee01"},"content":"     * @return A string representing the result of adding the task to the list or an error if unsuccessful.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"CJ-Lee01"},"content":"    String add(Commands type, String description) {","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"CJ-Lee01"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":30,"author":{"gitId":"CJ-Lee01"},"content":"            Task task \u003d Task.create(type, description);","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"CJ-Lee01"},"content":"            list.add(task);","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"CJ-Lee01"},"content":"            return String.format(","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"CJ-Lee01"},"content":"                    \"added: %s\\nYou have %d tasks.\",","lastModifiedDate":"2023-08-28"},{"lineNumber":34,"author":{"gitId":"CJ-Lee01"},"content":"                    task,","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"CJ-Lee01"},"content":"                    list.size()","lastModifiedDate":"2023-08-28"},{"lineNumber":36,"author":{"gitId":"CJ-Lee01"},"content":"            );","lastModifiedDate":"2023-08-28"},{"lineNumber":37,"author":{"gitId":"CJ-Lee01"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":38,"author":{"gitId":"CJ-Lee01"},"content":"            return e.toString();","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"CJ-Lee01"},"content":"     * This method takes a Task object and adds it to the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"CJ-Lee01"},"content":"     * @param task The Task object to be added to the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"CJ-Lee01"},"content":"     * @return A string representing the result of adding the task to the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"CJ-Lee01"},"content":"    public String add(Task task) {","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"CJ-Lee01"},"content":"        list.add(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"CJ-Lee01"},"content":"        return String.format(","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"CJ-Lee01"},"content":"                \"added: %s\\nYou have %d tasks.\",","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"CJ-Lee01"},"content":"                task,","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"CJ-Lee01"},"content":"                list.size()","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"CJ-Lee01"},"content":"        );","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"CJ-Lee01"},"content":"     * Takes collection of Task objects and adds them all to the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"CJ-Lee01"},"content":"     * @param tasks The collection of Task objects to be added to the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"CJ-Lee01"},"content":"    public void addTasks(Collection\u003c? extends Task\u003e tasks) {","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"CJ-Lee01"},"content":"        list.addAll(tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"CJ-Lee01"},"content":"     * Marks the task at the string representation of the position of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"CJ-Lee01"},"content":"     * If the position is not a valid integer, it returns an error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"CJ-Lee01"},"content":"     * If the position is out of bounds, it returns an error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"CJ-Lee01"},"content":"     * @param position The position of the task in the list as a string.","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"CJ-Lee01"},"content":"     * @return A string representing the result of marking the task as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"CJ-Lee01"},"content":"    String markDone(String position) {","lastModifiedDate":"2023-08-28"},{"lineNumber":75,"author":{"gitId":"CJ-Lee01"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":76,"author":{"gitId":"CJ-Lee01"},"content":"            int index \u003d Integer.parseInt(position) - 1;","lastModifiedDate":"2023-08-28"},{"lineNumber":77,"author":{"gitId":"CJ-Lee01"},"content":"            Task task \u003d list.get(index);","lastModifiedDate":"2023-08-28"},{"lineNumber":78,"author":{"gitId":"CJ-Lee01"},"content":"            task.markAsDone();","lastModifiedDate":"2023-08-28"},{"lineNumber":79,"author":{"gitId":"CJ-Lee01"},"content":"            return String.format(\"Nice! You have completed the task:\\n    %s\", task);","lastModifiedDate":"2023-08-28"},{"lineNumber":80,"author":{"gitId":"CJ-Lee01"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":81,"author":{"gitId":"CJ-Lee01"},"content":"            return \"Err: Index provided is not an integer\";","lastModifiedDate":"2023-08-28"},{"lineNumber":82,"author":{"gitId":"CJ-Lee01"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":83,"author":{"gitId":"CJ-Lee01"},"content":"            return \"Err: Index provided is out of position of the list\";","lastModifiedDate":"2023-08-28"},{"lineNumber":84,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":85,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":86,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":87,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"CJ-Lee01"},"content":"     * Unmarks the task at the string representation of the position of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"CJ-Lee01"},"content":"     * If the position is not a valid integer, it returns an error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"CJ-Lee01"},"content":"     * If the position is out of bounds, it returns an error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"CJ-Lee01"},"content":"     * @param position The position of the task in the list as a string.","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"CJ-Lee01"},"content":"     * @return A string representing the result of marking the task as not done.","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"CJ-Lee01"},"content":"    String markUndone(String position) {","lastModifiedDate":"2023-08-28"},{"lineNumber":96,"author":{"gitId":"CJ-Lee01"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":97,"author":{"gitId":"CJ-Lee01"},"content":"            int index \u003d Integer.parseInt(position) - 1;","lastModifiedDate":"2023-08-28"},{"lineNumber":98,"author":{"gitId":"CJ-Lee01"},"content":"            Task task \u003d list.get(index);","lastModifiedDate":"2023-08-28"},{"lineNumber":99,"author":{"gitId":"CJ-Lee01"},"content":"            task.markAsNotDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"CJ-Lee01"},"content":"            return String.format(\"Ok! duke.Task marked undone:\\n    %s\", task);","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"CJ-Lee01"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":102,"author":{"gitId":"CJ-Lee01"},"content":"            return \"Err: Index provided is not an integer\";","lastModifiedDate":"2023-08-28"},{"lineNumber":103,"author":{"gitId":"CJ-Lee01"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":104,"author":{"gitId":"CJ-Lee01"},"content":"            return \"Err: Index provided is out of position of the list\";","lastModifiedDate":"2023-08-28"},{"lineNumber":105,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":106,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":107,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":108,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"CJ-Lee01"},"content":"     * Deletes task based on the position from parsing the string.","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"CJ-Lee01"},"content":"     * If the position is not a valid integer, it returns an error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"CJ-Lee01"},"content":"     * If the position is out of bounds, it returns an error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"CJ-Lee01"},"content":"     * @param position The position of the task in the list as a string.","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"CJ-Lee01"},"content":"     * @return A string representing the result of removing the task from the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"CJ-Lee01"},"content":"    String delete(String position) {","lastModifiedDate":"2023-08-28"},{"lineNumber":117,"author":{"gitId":"CJ-Lee01"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":118,"author":{"gitId":"CJ-Lee01"},"content":"            int index \u003d Integer.parseInt(position) - 1;","lastModifiedDate":"2023-08-28"},{"lineNumber":119,"author":{"gitId":"CJ-Lee01"},"content":"            Task task \u003d list.remove(index);","lastModifiedDate":"2023-08-28"},{"lineNumber":120,"author":{"gitId":"CJ-Lee01"},"content":"            return String.format(","lastModifiedDate":"2023-08-28"},{"lineNumber":121,"author":{"gitId":"CJ-Lee01"},"content":"                    \"removed: %s\\nYou have %d tasks.\",","lastModifiedDate":"2023-08-28"},{"lineNumber":122,"author":{"gitId":"CJ-Lee01"},"content":"                    task,","lastModifiedDate":"2023-08-28"},{"lineNumber":123,"author":{"gitId":"CJ-Lee01"},"content":"                    list.size()","lastModifiedDate":"2023-08-28"},{"lineNumber":124,"author":{"gitId":"CJ-Lee01"},"content":"            );","lastModifiedDate":"2023-08-28"},{"lineNumber":125,"author":{"gitId":"CJ-Lee01"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":126,"author":{"gitId":"CJ-Lee01"},"content":"            return \"Err: Index provided is not an integer\";","lastModifiedDate":"2023-08-28"},{"lineNumber":127,"author":{"gitId":"CJ-Lee01"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":128,"author":{"gitId":"CJ-Lee01"},"content":"            return \"Err: Index provided is out of position of the list\";","lastModifiedDate":"2023-08-28"},{"lineNumber":129,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":130,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":131,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":132,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"CJ-Lee01"},"content":"     * Gives a string representation of the list of tasks in display format.","lastModifiedDate":"2023-09-01"},{"lineNumber":134,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":135,"author":{"gitId":"CJ-Lee01"},"content":"     * @return A string representation of the list of tasks in display format.","lastModifiedDate":"2023-09-01"},{"lineNumber":136,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":137,"author":{"gitId":"CJ-Lee01"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":138,"author":{"gitId":"CJ-Lee01"},"content":"    public String toString() {","lastModifiedDate":"2023-08-28"},{"lineNumber":139,"author":{"gitId":"CJ-Lee01"},"content":"        if (list.size() \u003d\u003d 0) {","lastModifiedDate":"2023-08-28"},{"lineNumber":140,"author":{"gitId":"CJ-Lee01"},"content":"            return \"You have no tasks :).\";","lastModifiedDate":"2023-08-28"},{"lineNumber":141,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":142,"author":{"gitId":"CJ-Lee01"},"content":"        String result \u003d \"\";","lastModifiedDate":"2023-08-28"},{"lineNumber":143,"author":{"gitId":"CJ-Lee01"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2023-08-28"},{"lineNumber":144,"author":{"gitId":"CJ-Lee01"},"content":"            result +\u003d String.format(\"    %d. %s\\n\", i + 1, list.get(i));","lastModifiedDate":"2023-08-28"},{"lineNumber":145,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":146,"author":{"gitId":"CJ-Lee01"},"content":"        return result;","lastModifiedDate":"2023-08-28"},{"lineNumber":147,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":148,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":149,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":150,"author":{"gitId":"CJ-Lee01"},"content":"     * Gives representation of the list of tasks in file format.","lastModifiedDate":"2023-09-01"},{"lineNumber":151,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":152,"author":{"gitId":"CJ-Lee01"},"content":"     * @return A string representation of the list of tasks in file format.","lastModifiedDate":"2023-09-01"},{"lineNumber":153,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":154,"author":{"gitId":"CJ-Lee01"},"content":"    public String showSaveText() {","lastModifiedDate":"2023-08-31"},{"lineNumber":155,"author":{"gitId":"CJ-Lee01"},"content":"        String saveText \u003d \"\";","lastModifiedDate":"2023-08-31"},{"lineNumber":156,"author":{"gitId":"CJ-Lee01"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":157,"author":{"gitId":"CJ-Lee01"},"content":"            saveText +\u003d list.get(i).fileString() + (i + 1 \u003d\u003d list.size() ? \"\" : \"\\n\");","lastModifiedDate":"2023-08-31"},{"lineNumber":158,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":159,"author":{"gitId":"CJ-Lee01"},"content":"        return saveText;","lastModifiedDate":"2023-08-31"},{"lineNumber":160,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":161,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":162,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":163,"author":{"gitId":"CJ-Lee01"},"content":"     * Finds all tasks that contains the term and returns it as a StoreList.","lastModifiedDate":"2023-09-01"},{"lineNumber":164,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":165,"author":{"gitId":"CJ-Lee01"},"content":"     * @param term","lastModifiedDate":"2023-09-01"},{"lineNumber":166,"author":{"gitId":"CJ-Lee01"},"content":"     * @return the StoreList","lastModifiedDate":"2023-09-01"},{"lineNumber":167,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":168,"author":{"gitId":"CJ-Lee01"},"content":"    public StoreList findAll(String term) {","lastModifiedDate":"2023-09-01"},{"lineNumber":169,"author":{"gitId":"CJ-Lee01"},"content":"        if (term.length() \u003d\u003d 0) {","lastModifiedDate":"2023-09-01"},{"lineNumber":170,"author":{"gitId":"CJ-Lee01"},"content":"            return this;","lastModifiedDate":"2023-09-01"},{"lineNumber":171,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":172,"author":{"gitId":"CJ-Lee01"},"content":"        StoreList result \u003d new StoreList();","lastModifiedDate":"2023-09-01"},{"lineNumber":173,"author":{"gitId":"CJ-Lee01"},"content":"        this.list.forEach((task) -\u003e {","lastModifiedDate":"2023-09-01"},{"lineNumber":174,"author":{"gitId":"CJ-Lee01"},"content":"            if (task.contains(term)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":175,"author":{"gitId":"CJ-Lee01"},"content":"                result.add(task);","lastModifiedDate":"2023-09-01"},{"lineNumber":176,"author":{"gitId":"CJ-Lee01"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":177,"author":{"gitId":"CJ-Lee01"},"content":"        });","lastModifiedDate":"2023-09-01"},{"lineNumber":178,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":179,"author":{"gitId":"CJ-Lee01"},"content":"        return result;","lastModifiedDate":"2023-09-01"},{"lineNumber":180,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":181,"author":{"gitId":"CJ-Lee01"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"CJ-Lee01":181}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CJ-Lee01"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"CJ-Lee01"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"CJ-Lee01"},"content":" * This abstract class represents a task in the Duke program.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"CJ-Lee01"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"CJ-Lee01"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"CJ-Lee01"},"content":"    /** Task description. */","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"CJ-Lee01"},"content":"    protected String description;","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"CJ-Lee01"},"content":"    /** Task is done. */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"CJ-Lee01"},"content":"    protected boolean isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"CJ-Lee01"},"content":"     * Creates as task based on the Commands enum value and a string representing the description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"CJ-Lee01"},"content":"     * If a task cannot be created from the given information, it throws a DukeException.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"CJ-Lee01"},"content":"     * @param command The Commands enum value representing the type of task to be created.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"CJ-Lee01"},"content":"     * @param rawLine The description of the task to be created.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"CJ-Lee01"},"content":"     * @return A Task object representing the created task.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"CJ-Lee01"},"content":"     * @throws DukeException If a task cannot be created from the given information.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"CJ-Lee01"},"content":"    public static Task create(Commands command, String rawLine) throws DukeException {","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"CJ-Lee01"},"content":"        switch (command) {","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"CJ-Lee01"},"content":"        case todo:","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"CJ-Lee01"},"content":"            return ToDo.create(rawLine);","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"CJ-Lee01"},"content":"        case deadline:","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"CJ-Lee01"},"content":"            return Deadline.create(rawLine);","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"CJ-Lee01"},"content":"        case event:","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"CJ-Lee01"},"content":"            return Event.create(rawLine);","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"CJ-Lee01"},"content":"        default:","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"CJ-Lee01"},"content":"            throw new RuntimeException(\"Command not recognized\"); //literally should not run","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"CJ-Lee01"},"content":"     * Creates the task by takes a string representing the description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"CJ-Lee01"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"CJ-Lee01"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"CJ-Lee01"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":43,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"CJ-Lee01"},"content":"     * This method returns a string representing the done status of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"CJ-Lee01"},"content":"     * @return A string representing the done status of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"CJ-Lee01"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-21"},{"lineNumber":49,"author":{"gitId":"CJ-Lee01"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-08-21"},{"lineNumber":50,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":51,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":52,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"CJ-Lee01"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"CJ-Lee01"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":56,"author":{"gitId":"CJ-Lee01"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-21"},{"lineNumber":57,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":58,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"CJ-Lee01"},"content":"     * Marks the task as not done.","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"CJ-Lee01"},"content":"    public void markAsNotDone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":62,"author":{"gitId":"CJ-Lee01"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":63,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":64,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":65,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"CJ-Lee01"},"content":"     * Gives a string representation of the task in file format.","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"CJ-Lee01"},"content":"     * @return A string representation of the task in file format.","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"CJ-Lee01"},"content":"    public abstract String fileString();","lastModifiedDate":"2023-08-28"},{"lineNumber":71,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":72,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"CJ-Lee01"},"content":"     * Checks if the description contains the substring","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"CJ-Lee01"},"content":"     * @param s","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"CJ-Lee01"},"content":"     * @return true if found, false otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"CJ-Lee01"},"content":"    public boolean contains(String s) {","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"CJ-Lee01"},"content":"        return this.description.contains(s);","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"CJ-Lee01"},"content":"     * Gives a string representation of the task in display format.","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"CJ-Lee01"},"content":"     * @return A string representation of the task in display format.","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"CJ-Lee01"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":88,"author":{"gitId":"CJ-Lee01"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":89,"author":{"gitId":"CJ-Lee01"},"content":"        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);","lastModifiedDate":"2023-08-21"},{"lineNumber":90,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":91,"author":{"gitId":"CJ-Lee01"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"CJ-Lee01":91}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CJ-Lee01"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"CJ-Lee01"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"CJ-Lee01"},"content":" * Todo keep tracks of tasks without deadlines.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"CJ-Lee01"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"CJ-Lee01"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"CJ-Lee01"},"content":"     * Creates a todo from a string representing the description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"CJ-Lee01"},"content":"     * If the description is empty, it throws a DukeException.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"CJ-Lee01"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"CJ-Lee01"},"content":"     * @return A ToDo object representing the created task.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"CJ-Lee01"},"content":"     * @throws DukeException If the description is empty.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"CJ-Lee01"},"content":"    public static ToDo create(String description) throws DukeException {","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"CJ-Lee01"},"content":"        if (description.length() \u003d\u003d 0) {","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"CJ-Lee01"},"content":"            throw new DukeException(\"Err: Empty Description\");","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"CJ-Lee01"},"content":"        return new ToDo(description);","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"CJ-Lee01"},"content":"     * Constructs a todo with a string representing the description.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"CJ-Lee01"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"CJ-Lee01"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"CJ-Lee01"},"content":"        super(description);","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"CJ-Lee01"},"content":"     * Gives a string representation of the task in file format.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"CJ-Lee01"},"content":"     * @return A string representation of the task in file format.","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"CJ-Lee01"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":38,"author":{"gitId":"CJ-Lee01"},"content":"    public String fileString() {","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"CJ-Lee01"},"content":"        return String.format(","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"CJ-Lee01"},"content":"                \"todo %d %s\",","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"CJ-Lee01"},"content":"                super.isDone ? 1 : 0,","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"CJ-Lee01"},"content":"                super.description","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"CJ-Lee01"},"content":"        );","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"CJ-Lee01"},"content":"     * Gives a string representation of the task in display format.","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"CJ-Lee01"},"content":"     * @return A string representation of the task in display format.","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"CJ-Lee01"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":52,"author":{"gitId":"CJ-Lee01"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":53,"author":{"gitId":"CJ-Lee01"},"content":"        return String.format(","lastModifiedDate":"2023-08-21"},{"lineNumber":54,"author":{"gitId":"CJ-Lee01"},"content":"                \"[T][%s] %s\",","lastModifiedDate":"2023-08-21"},{"lineNumber":55,"author":{"gitId":"CJ-Lee01"},"content":"                super.getStatusIcon(),","lastModifiedDate":"2023-08-21"},{"lineNumber":56,"author":{"gitId":"CJ-Lee01"},"content":"                super.description","lastModifiedDate":"2023-08-21"},{"lineNumber":57,"author":{"gitId":"CJ-Lee01"},"content":"        );","lastModifiedDate":"2023-08-21"},{"lineNumber":58,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":59,"author":{"gitId":"CJ-Lee01"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"CJ-Lee01":59}},{"path":"src/main/java/duke/UserInterface.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CJ-Lee01"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"CJ-Lee01"},"content":"import java.util.List;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"CJ-Lee01"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"CJ-Lee01"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"CJ-Lee01"},"content":" * User Interface for the Duke program.","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"CJ-Lee01"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"CJ-Lee01"},"content":"public class UserInterface {","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"CJ-Lee01"},"content":"    /** Scanner to scan line input. */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"CJ-Lee01"},"content":"    private Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"CJ-Lee01"},"content":"    /** Storage to store the save file. */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"CJ-Lee01"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"CJ-Lee01"},"content":"    /** List to keep track of tasks while program is running. */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"CJ-Lee01"},"content":"    private StoreList list;","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"CJ-Lee01"},"content":"     * Creates a user interface from a Storage object and a StoreList object.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"CJ-Lee01"},"content":"     * @param storage The Storage object to be used by the user interface.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"CJ-Lee01"},"content":"     * @param list The StoreList object to be used by the user interface.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"CJ-Lee01"},"content":"    public UserInterface(Storage storage, StoreList list) {","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"CJ-Lee01"},"content":"        this.list \u003d list;","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"CJ-Lee01"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"CJ-Lee01"},"content":"     * Checks if there is another command to be read from the user, and returns true if there is and false otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"CJ-Lee01"},"content":"     * @return True if there is another command to be read from the user, and false otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"CJ-Lee01"},"content":"    public boolean hasNextCommand() {","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"CJ-Lee01"},"content":"        return sc.hasNext();","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"CJ-Lee01"},"content":"     * Starts the user interface by reading the tasks from the storage file and adding them to the list of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"CJ-Lee01"},"content":"     * @throws DukeException If there is an error reading the tasks from the storage file.","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"CJ-Lee01"},"content":"    public void start() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"CJ-Lee01"},"content":"        Task[] tasks \u003d Parser.parseFile(this.storage);","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"CJ-Lee01"},"content":"        this.list.addTasks(List.of(tasks));","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"CJ-Lee01"},"content":"     * Reads commands from the user and processes them until the user enters the \"bye\" command.","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"CJ-Lee01"},"content":"    public void readCommandLine() {","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"CJ-Lee01"},"content":"        Reading:","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"CJ-Lee01"},"content":"        while (true) {","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"CJ-Lee01"},"content":"            String line \u003d sc.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"CJ-Lee01"},"content":"            if (line.length() \u003d\u003d 0) {","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"CJ-Lee01"},"content":"                display(\"Err: No command input\");","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"CJ-Lee01"},"content":"                continue;","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"CJ-Lee01"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"CJ-Lee01"},"content":"            String[] instructions \u003d line.split(\" \", 2);","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"CJ-Lee01"},"content":"            Commands cmd \u003d Commands.get(instructions[0]);","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"CJ-Lee01"},"content":"            String response;","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"CJ-Lee01"},"content":"            switch (cmd) {","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"CJ-Lee01"},"content":"            case bye:","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"CJ-Lee01"},"content":"                this.save();","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"CJ-Lee01"},"content":"                break Reading;","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"CJ-Lee01"},"content":"            case list:","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"CJ-Lee01"},"content":"                response \u003d list.toString();","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"CJ-Lee01"},"content":"                display(response);","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"CJ-Lee01"},"content":"                break;","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"CJ-Lee01"},"content":"            case deadline:","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"CJ-Lee01"},"content":"                // Fallthrough","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"CJ-Lee01"},"content":"            case todo:","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"CJ-Lee01"},"content":"                // Fallthrough","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"CJ-Lee01"},"content":"            case event:","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"CJ-Lee01"},"content":"                try {","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"CJ-Lee01"},"content":"                    Task task \u003d Parser.parseTask(cmd, instructions);","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"CJ-Lee01"},"content":"                    response \u003d list.add(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"CJ-Lee01"},"content":"                    display(response);","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"CJ-Lee01"},"content":"                } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"CJ-Lee01"},"content":"                    display(e.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"CJ-Lee01"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"CJ-Lee01"},"content":"                break;","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"CJ-Lee01"},"content":"            case mark:","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"CJ-Lee01"},"content":"                try {","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"CJ-Lee01"},"content":"                    response \u003d list.markDone(instructions[1]);","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"CJ-Lee01"},"content":"                    display(response);","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"CJ-Lee01"},"content":"                } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"CJ-Lee01"},"content":"                    display(\"Err: Index not in range of list.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"CJ-Lee01"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"CJ-Lee01"},"content":"                break;","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"CJ-Lee01"},"content":"            case unmark:","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"CJ-Lee01"},"content":"                try {","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"CJ-Lee01"},"content":"                    response \u003d list.markUndone(instructions[1]);","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"CJ-Lee01"},"content":"                    display(response);","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"CJ-Lee01"},"content":"                } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"CJ-Lee01"},"content":"                    display(\"Err: Index not in range of list.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"CJ-Lee01"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"CJ-Lee01"},"content":"                break;","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"CJ-Lee01"},"content":"            case delete:","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"CJ-Lee01"},"content":"                try {","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"CJ-Lee01"},"content":"                    response \u003d list.delete(instructions[1]);","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"CJ-Lee01"},"content":"                    display(response);","lastModifiedDate":"2023-08-31"},{"lineNumber":103,"author":{"gitId":"CJ-Lee01"},"content":"                } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":104,"author":{"gitId":"CJ-Lee01"},"content":"                    display(\"Err: Index not in range of list.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":105,"author":{"gitId":"CJ-Lee01"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":106,"author":{"gitId":"CJ-Lee01"},"content":"                break;","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"CJ-Lee01"},"content":"            case find:","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"CJ-Lee01"},"content":"                response \u003d Parser.findAll(instructions, list);","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"CJ-Lee01"},"content":"            default:","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"CJ-Lee01"},"content":"                response \u003d \"Err: Unknown command - \" + instructions[0];","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"CJ-Lee01"},"content":"                display(response);","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"CJ-Lee01"},"content":"                break;","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"CJ-Lee01"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":114,"author":{"gitId":"CJ-Lee01"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":115,"author":{"gitId":"CJ-Lee01"},"content":"        sc.close();","lastModifiedDate":"2023-08-31"},{"lineNumber":116,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":117,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":118,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"CJ-Lee01"},"content":"     * Saves the current state of the list of tasks to the storage file.","lastModifiedDate":"2023-09-01"},{"lineNumber":120,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"CJ-Lee01"},"content":"    public void save() {","lastModifiedDate":"2023-08-31"},{"lineNumber":122,"author":{"gitId":"CJ-Lee01"},"content":"        String saveText \u003d list.showSaveText();","lastModifiedDate":"2023-08-31"},{"lineNumber":123,"author":{"gitId":"CJ-Lee01"},"content":"        storage.write(saveText);","lastModifiedDate":"2023-08-31"},{"lineNumber":124,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":125,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":126,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":127,"author":{"gitId":"CJ-Lee01"},"content":"     * Exits the user interface by saving the current state of the list of tasks to the storage file and closing any resources used by the user interface.","lastModifiedDate":"2023-09-01"},{"lineNumber":128,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":129,"author":{"gitId":"CJ-Lee01"},"content":"    public void exit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":130,"author":{"gitId":"CJ-Lee01"},"content":"        this.save();","lastModifiedDate":"2023-08-31"},{"lineNumber":131,"author":{"gitId":"CJ-Lee01"},"content":"        sc.close();","lastModifiedDate":"2023-08-31"},{"lineNumber":132,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":133,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":134,"author":{"gitId":"CJ-Lee01"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":135,"author":{"gitId":"CJ-Lee01"},"content":"     * Displays a string to a user in a formatted manner.","lastModifiedDate":"2023-09-01"},{"lineNumber":136,"author":{"gitId":"CJ-Lee01"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":137,"author":{"gitId":"CJ-Lee01"},"content":"     * @param s The string to be displayed to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":138,"author":{"gitId":"CJ-Lee01"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":139,"author":{"gitId":"CJ-Lee01"},"content":"    public static void display(String s) {","lastModifiedDate":"2023-08-31"},{"lineNumber":140,"author":{"gitId":"CJ-Lee01"},"content":"        System.out.println(wrapper(s));","lastModifiedDate":"2023-08-31"},{"lineNumber":141,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":142,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":143,"author":{"gitId":"CJ-Lee01"},"content":"    private static String wrapper(String line) {","lastModifiedDate":"2023-08-31"},{"lineNumber":144,"author":{"gitId":"CJ-Lee01"},"content":"        String frame \u003d \"\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\u003d\";","lastModifiedDate":"2023-08-31"},{"lineNumber":145,"author":{"gitId":"CJ-Lee01"},"content":"        return String.format(\"%s\\n%s\", line, frame);","lastModifiedDate":"2023-08-31"},{"lineNumber":146,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":147,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":148,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":149,"author":{"gitId":"CJ-Lee01"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"CJ-Lee01":149}},{"path":"src/test/java/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CJ-Lee01"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"CJ-Lee01"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"CJ-Lee01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"CJ-Lee01"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"CJ-Lee01"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"CJ-Lee01"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"CJ-Lee01"},"content":"    public void cannotCreateDeadlineWithoutDateTime() {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"CJ-Lee01"},"content":"        assertThrows(DukeException.class, () -\u003e {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"CJ-Lee01"},"content":"            Deadline deadline \u003d Deadline.create(\"test\");","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"CJ-Lee01"},"content":"        });","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"CJ-Lee01"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"CJ-Lee01"},"content":"    public void cannotCreateEmptyDeadline() {","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"CJ-Lee01"},"content":"        assertThrows(DukeException.class, () -\u003e {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"CJ-Lee01"},"content":"            Deadline deadline \u003d Deadline.create(\"\");","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"CJ-Lee01"},"content":"        });","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"CJ-Lee01"},"content":"}","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"CJ-Lee01":24}},{"path":"src/test/java/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CJ-Lee01"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"CJ-Lee01"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"CJ-Lee01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"CJ-Lee01"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"CJ-Lee01"},"content":"public class EventTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"CJ-Lee01"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"CJ-Lee01"},"content":"    public void cannotCreateEventWithoutDateTime() {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"CJ-Lee01"},"content":"        assertThrows(DukeException.class, () -\u003e {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"CJ-Lee01"},"content":"            Event event \u003d Event.create(\"event\");","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"CJ-Lee01"},"content":"        });","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"CJ-Lee01"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"CJ-Lee01"},"content":"    public void cannotCreateEmptyEvent() {","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"CJ-Lee01"},"content":"        assertThrows(DukeException.class, () -\u003e {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"CJ-Lee01"},"content":"            Event event \u003d Event.create(\"\");","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"CJ-Lee01"},"content":"        });","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"CJ-Lee01"},"content":"}","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"CJ-Lee01":24}},{"path":"src/test/java/duke/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"CJ-Lee01"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"CJ-Lee01"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"CJ-Lee01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"CJ-Lee01"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"CJ-Lee01"},"content":"public class TodoTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"CJ-Lee01"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"CJ-Lee01"},"content":"    public void cannotCreateEmptyTodo() {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"CJ-Lee01"},"content":"        assertThrows(DukeException.class, () -\u003e {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"CJ-Lee01"},"content":"            ToDo todo \u003d ToDo.create(\"\");","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"CJ-Lee01"},"content":"        });","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"CJ-Lee01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"CJ-Lee01"},"content":"}","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"CJ-Lee01"},"content":"","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"CJ-Lee01":18}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"CJ-Lee01"},"content":"todo borrow book","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"CJ-Lee01"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"CJ-Lee01"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"CJ-Lee01"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"CJ-Lee01"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"CJ-Lee01"},"content":"mark 1","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"CJ-Lee01"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"CJ-Lee01"},"content":"unmark 1","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"CJ-Lee01"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"CJ-Lee01"},"content":"delete 1","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"CJ-Lee01"},"content":"deadline","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"CJ-Lee01"},"content":"test","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"CJ-Lee01"},"content":"bye","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"CJ-Lee01":13}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"CJ-Lee01"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"CJ-Lee01":1,"-":20}}]
