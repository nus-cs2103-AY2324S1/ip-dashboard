[{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"T | 0 | hi","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"T | 0 | lol","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"D | 1 | hi | Mar 3 2023","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"D | 1 | buy book | Mar 3 2024 6:00 PM","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"E | 1 | party | Mar 3 2023 1:00 PM - Sep 5 2023 3:45 AM","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":5}},{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"public abstract class Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"    private boolean isExit;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws MinionException, IOException;","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"        return this instanceof ExitCommand;","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":12}},{"path":"src/main/java/DatetimeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"public class DatetimeParser {","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"     * Formats the given date.","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"     * @param s Date to be formatted.","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"     * @return","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"     * @throws DateTimeParseException","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"    private static String formatDate(String s) throws DateTimeParseException {","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"        return LocalDate.parse(s, DateTimeFormatter.ofPattern(\"d/M/yyyy\")).format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"     * Formats the given time.","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"     * @param s Time to be formatted.","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"     * @return","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"     * @throws DateTimeParseException","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"    private static String formatTime(String s) throws DateTimeParseException {","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"        return LocalTime.parse(s, DateTimeFormatter.ofPattern(\"HHmm\")).format(DateTimeFormatter.ofPattern(\"h:mm a\"));","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"     * Parses the given datetime.","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"     * @param arr An array of strings of datetime.","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"     * @return","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"     * @throws IllegalValueException","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"    public static String parseDatetime(String[] arr) throws IllegalValueException {","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"        String datetime \u003d \"\";","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"        try {","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"            datetime \u003d formatDate(arr[0]);","lastModifiedDate":"2023-08-24"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"            throw new IllegalValueException(\"Unable to parse date. Ensure it is of the form dd/mm/yyyy!\");","lastModifiedDate":"2023-08-24"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"        if (arr.length \u003e 1) {","lastModifiedDate":"2023-08-24"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"            datetime +\u003d \" \";","lastModifiedDate":"2023-08-24"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"            try {","lastModifiedDate":"2023-08-24"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"                datetime +\u003d formatTime(arr[1]);","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"                throw new IllegalValueException(\"Unable to parse time. Ensure it is form HHmm!\");","lastModifiedDate":"2023-08-24"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"        return datetime;","lastModifiedDate":"2023-08-24"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":50,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"joel-foo":50}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":" * Represents a deadline task.","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"    protected String datetime;","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"     * Creates a deadline object. This is the main constructor of the Deadline class.","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"     * @param description Description of deadline.","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"     * @param isDone Whether the deadline is done.","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"     * @param datetime Datetime of deadline.","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"    public Deadline(String description, boolean isDone, String datetime) {","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"        super(description, isDone);","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"        this.datetime \u003d datetime;","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"     * Creates a deadline object. This calls the main constructor when the default for isDone is false.","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"     * @param description Description of deadline.","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"     * @param datetime Datetime of deadline.","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"    public Deadline(String description, String datetime) {","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"        this(description, false, datetime);","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"     * Returns the string representation of the deadline task.","lastModifiedDate":"2023-08-20"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"     * @return string representation of the deadline task.","lastModifiedDate":"2023-08-20"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.datetime+ \")\";","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"     * Returns a string representation of the deadline to be used in storage.","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"     * @return string representation of the deadline for storage.","lastModifiedDate":"2023-08-24"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"    public String toStringStorage() {","lastModifiedDate":"2023-08-24"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"        return \"D | \" + (isDone ? \"1\" : \"0\") + \" | \" + description + \" | \" + this.datetime;","lastModifiedDate":"2023-08-24"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":44}},{"path":"src/main/java/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"    public static final String COMMAND_WORD \u003d \"deadline\";","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"    public Deadline deadline;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"    public DeadlineCommand(Deadline deadline) {","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"        tasks.add(deadline);","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"        ui.print(","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"                \"Got it. I\u0027ve added this task:\",","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"                \"\\t\" + deadline.toString(),","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"                \"Now you have \" + tasks.size() +  \" tasks in the list.\"","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"        );","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"        storage.writeToFile(tasks);","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":21}},{"path":"src/main/java/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"    private int taskIdx;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"    public DeleteCommand(int taskIdx) {","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"        this.taskIdx \u003d taskIdx;","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IllegalValueException, IOException {","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"        Task task \u003d tasks.deleteTask(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"        ui.print(\"OK, I\u0027ve removed this task\",","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"                \"\\t\" + task.toString()","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"        );","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"        storage.writeToFile(tasks);","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":18}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":" * Represents an Event, a task that start at a specific date/time and ends at a specific date/time.","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"    protected String start;","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"    protected String end;","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"     * Creates an event object. This is the main constructor of the Event class.","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"     * @param description Description of the event.","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"     * @param isDone Whether the event has been done.","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"     * @param start Start date/time of event.","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"     * @param end End date/time of event.","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"    public Event(String description, boolean isDone, String start, String end) {","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"        super(description, isDone);","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-08-20"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-08-20"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"     * Creates an event object. This calls the main constructor when the default for isDone is false.","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"     * @param description Description of the event.","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"     * @param start Start date/time of event.","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"     * @param end End date/time of event.","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"    public Event(String description, String start, String end) {","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"        this(description, false, start, end);","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"     * Returns the string representation of the event.","lastModifiedDate":"2023-08-20"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"     * @return string representation of the event.","lastModifiedDate":"2023-08-20"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + start + \" to: \" + end + \")\";","lastModifiedDate":"2023-08-20"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"     * Returns a string representation of the event to be used in storage.","lastModifiedDate":"2023-08-24"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"     * @return string representation of the event for storage.","lastModifiedDate":"2023-08-24"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"    public String toStringStorage() {","lastModifiedDate":"2023-08-24"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"        return \"E | \" + (isDone ? \"1\" : \"0\") + \" | \" + description + \" | \" + start + \" - \" + end;","lastModifiedDate":"2023-08-24"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":48}},{"path":"src/main/java/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"    public static final String COMMAND_WORD \u003d \"event\";","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"    public Event event;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"    public EventCommand(Event event) {","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"        this.event \u003d event;","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"        tasks.add(event);","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"        ui.print(","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"                \"Got it. I\u0027ve added this task:\",","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"                \"\\t\" + event.toString(),","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"                \"Now you have \" + tasks.size() +  \" tasks in the list.\"","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"        );","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"        storage.writeToFile(tasks);","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":21}},{"path":"src/main/java/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"    public static final String COMMAND_WORD \u003d \"bye\";","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"        ui.tearDown();","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":10}},{"path":"src/main/java/IllegalValueException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":" * Illegal value exception.","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"public class IllegalValueException extends MinionException {","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"     * Creates a new illegal value exception.","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"     * @param s error message.","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"    public IllegalValueException(String s) {","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"        super(s);","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":12}},{"path":"src/main/java/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"        ui.print(tasks.toString());","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":7}},{"path":"src/main/java/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"    public static final String COMMAND_WORD \u003d \"mark\";","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"    private int taskIdx;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"    public MarkCommand(int taskIdx) {","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"        this.taskIdx \u003d taskIdx;","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IllegalValueException, IOException {","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"        Task task \u003d tasks.markTask(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"        ui.print(\"Nice! I\u0027ve marked this task as done:\",","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"                \"\\t\" + task.toString()","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"        );","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"        storage.writeToFile(tasks);","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":18}},{"path":"src/main/java/Messages.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"public class Messages {","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"    public static final String MESSAGE_GOODBYE \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"    public static final String[] MESSAGE_WELCOME \u003d new String[]{\"Hello! I\u0027m Minion!\", \"What can I do for you?\"};","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"Unable to locate the file at /data/tasks.txt. Creating a new one now.\";","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"    public static final String MESSAGE_NO_UNDERSTAND \u003d \"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"    public static final String MESSAGE_TODO_DESCRIPTION_ERROR \u003d \"☹ OOPS!!! The description of a todo cannot be empty.\";","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"    public static final String MESSAGE_DEADLINE_DESCRIPTION_ERROR \u003d \"☹ OOPS!!! The description of a deadline cannot be empty.\";","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"    public static final String MESSAGE_DEADLINE_BY_ERROR \u003d \"☹ OOPS!!! The date of a deadline cannot be empty.\";","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"    public static final String MESSAGE_EVENT_DESCRIPTION_ERROR \u003d \"☹ OOPS!!! The description of an event cannot be empty.\";","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"    public static final String MESSAGE_EVENT_FROM_ERROR \u003d \"☹ OOPS!!! The from date of an event cannot be empty.\";","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"    public static final String MESSAGE_EVENT_TO_ERROR \u003d \"☹ OOPS!!! The to date of an event cannot be empty.\";","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":12}},{"path":"src/main/java/Minion.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":" * Represents the Minion chatbot.","lastModifiedDate":"2023-08-20"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"public class Minion {","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"     * A constructor for the Minion chatbot.","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"     * @param filePath The file path of the file storing the task list.","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"    public Minion(String filePath) {","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"        try {","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-20"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"        new Minion(\"data/tasks.txt\").run(args);","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"     * Driver function for main.","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"     * @param args arguments passed in to stdin.","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"    private void run(String[] args) {","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"        ui.showWelcome();","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"        while (!isExit) {","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"            try {","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"                String command \u003d ui.readCommand();","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"                Command c \u003d Parser.parse(command);","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"            } catch (MinionException | IOException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"                ui.print(e.getMessage());","lastModifiedDate":"2023-08-21"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":48}},{"path":"src/main/java/MinionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"public class MinionException extends Exception {","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"    public MinionException(String msg) {","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"        super(msg);","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":5}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"public class Parser {","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"     * Returns a task from the parsed command, throws an exception if there is no such task or invalid parameters.","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"     *","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"     * @param command Command to parse.","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"     * @return the task parsed from the command if no exception is thrown.","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"     * @throws ParserException","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"     * @throws IllegalValueException","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"    public static Command parse(String command) throws MinionException  {","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"        command \u003d command.trim();","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"        if (command.isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(\"☹ OOPS!!! I\u0027m sorry, please input a legit command. :-(\");","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"        String[] arr \u003d command.split(\" \", 2);","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"        String commandWord \u003d arr[0];","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"        switch (commandWord) {","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"            return new ListCommand();","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"        case MarkCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"            return prepareMark(arr);","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"        case UnmarkCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"            return prepareUnmark(arr);","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"            return prepareDelete(arr);","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"        case ToDoCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"            return prepareToDo(arr);","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"        case DeadlineCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"            return prepareDeadline(arr);","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"        case EventCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"            return prepareEvent(arr);","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"        default:","lastModifiedDate":"2023-08-25"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(Messages.MESSAGE_NO_UNDERSTAND);","lastModifiedDate":"2023-08-25"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":51,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":52,"author":{"gitId":"joel-foo"},"content":"    public static int parseTaskIdx(String[] arr) throws MinionException {","lastModifiedDate":"2023-08-25"},{"lineNumber":53,"author":{"gitId":"joel-foo"},"content":"        if (arr.length \u003c 2 || arr[1].isEmpty() || !arr[1].trim().matches(\"[0-9]+\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":54,"author":{"gitId":"joel-foo"},"content":"            throw new MinionException(\"mark needs to have an argument. Try again.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":55,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":56,"author":{"gitId":"joel-foo"},"content":"       return Integer.valueOf(arr[1].trim()) - 1;","lastModifiedDate":"2023-08-25"},{"lineNumber":57,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":58,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":59,"author":{"gitId":"joel-foo"},"content":"    public static Command prepareMark(String[] arr) throws MinionException {","lastModifiedDate":"2023-08-25"},{"lineNumber":60,"author":{"gitId":"joel-foo"},"content":"        int taskIdx;","lastModifiedDate":"2023-08-25"},{"lineNumber":61,"author":{"gitId":"joel-foo"},"content":"        try {","lastModifiedDate":"2023-08-25"},{"lineNumber":62,"author":{"gitId":"joel-foo"},"content":"            taskIdx \u003d parseTaskIdx(arr);","lastModifiedDate":"2023-08-25"},{"lineNumber":63,"author":{"gitId":"joel-foo"},"content":"        } catch (MinionException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":64,"author":{"gitId":"joel-foo"},"content":"            throw e;","lastModifiedDate":"2023-08-25"},{"lineNumber":65,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":66,"author":{"gitId":"joel-foo"},"content":"        return new MarkCommand(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":67,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":68,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":69,"author":{"gitId":"joel-foo"},"content":"    public static Command prepareUnmark(String[] arr) throws MinionException {","lastModifiedDate":"2023-08-25"},{"lineNumber":70,"author":{"gitId":"joel-foo"},"content":"        int taskIdx;","lastModifiedDate":"2023-08-25"},{"lineNumber":71,"author":{"gitId":"joel-foo"},"content":"        try {","lastModifiedDate":"2023-08-25"},{"lineNumber":72,"author":{"gitId":"joel-foo"},"content":"            taskIdx \u003d parseTaskIdx(arr);","lastModifiedDate":"2023-08-25"},{"lineNumber":73,"author":{"gitId":"joel-foo"},"content":"        } catch (MinionException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":74,"author":{"gitId":"joel-foo"},"content":"            throw e;","lastModifiedDate":"2023-08-25"},{"lineNumber":75,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":76,"author":{"gitId":"joel-foo"},"content":"        return new UnmarkCommand(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":77,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":78,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":79,"author":{"gitId":"joel-foo"},"content":"    public static Command prepareDelete(String[] arr) throws MinionException {","lastModifiedDate":"2023-08-25"},{"lineNumber":80,"author":{"gitId":"joel-foo"},"content":"        int taskIdx;","lastModifiedDate":"2023-08-25"},{"lineNumber":81,"author":{"gitId":"joel-foo"},"content":"        try {","lastModifiedDate":"2023-08-25"},{"lineNumber":82,"author":{"gitId":"joel-foo"},"content":"            taskIdx \u003d parseTaskIdx(arr);","lastModifiedDate":"2023-08-25"},{"lineNumber":83,"author":{"gitId":"joel-foo"},"content":"        } catch (MinionException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":84,"author":{"gitId":"joel-foo"},"content":"            throw e;","lastModifiedDate":"2023-08-25"},{"lineNumber":85,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":86,"author":{"gitId":"joel-foo"},"content":"        return new DeleteCommand(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":87,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":88,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":89,"author":{"gitId":"joel-foo"},"content":"    public static Command prepareToDo(String[] arr) throws MinionException {","lastModifiedDate":"2023-08-25"},{"lineNumber":90,"author":{"gitId":"joel-foo"},"content":"        if (arr.length \u003c 2 || arr[1].isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":91,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(Messages.MESSAGE_TODO_DESCRIPTION_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":92,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":93,"author":{"gitId":"joel-foo"},"content":"        return new ToDoCommand(new ToDo(arr[1]));","lastModifiedDate":"2023-08-25"},{"lineNumber":94,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":95,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":96,"author":{"gitId":"joel-foo"},"content":"    public static Command prepareDeadline(String[] arr) throws MinionException {","lastModifiedDate":"2023-08-25"},{"lineNumber":97,"author":{"gitId":"joel-foo"},"content":"        // nothing after deadline","lastModifiedDate":"2023-08-25"},{"lineNumber":98,"author":{"gitId":"joel-foo"},"content":"        // or, something after deadline but it\u0027s just empty space(s)","lastModifiedDate":"2023-08-25"},{"lineNumber":99,"author":{"gitId":"joel-foo"},"content":"        // empty -\u003e no description; non-empty -\u003e still need to check if description is missing.","lastModifiedDate":"2023-08-25"},{"lineNumber":100,"author":{"gitId":"joel-foo"},"content":"        if (arr.length \u003c 2 || arr[1].isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":101,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(Messages.MESSAGE_DEADLINE_DESCRIPTION_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":102,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":103,"author":{"gitId":"joel-foo"},"content":"        String[] strs \u003d arr[1].split(\"/by\");","lastModifiedDate":"2023-08-25"},{"lineNumber":104,"author":{"gitId":"joel-foo"},"content":"        String description \u003d null;","lastModifiedDate":"2023-08-25"},{"lineNumber":105,"author":{"gitId":"joel-foo"},"content":"        switch (strs.length) {","lastModifiedDate":"2023-08-25"},{"lineNumber":106,"author":{"gitId":"joel-foo"},"content":"        // nothing to left and right","lastModifiedDate":"2023-08-25"},{"lineNumber":107,"author":{"gitId":"joel-foo"},"content":"        case 0:","lastModifiedDate":"2023-08-25"},{"lineNumber":108,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(Messages.MESSAGE_DEADLINE_DESCRIPTION_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":109,"author":{"gitId":"joel-foo"},"content":"        //something to left, nothing to the right","lastModifiedDate":"2023-08-25"},{"lineNumber":110,"author":{"gitId":"joel-foo"},"content":"        case 1:","lastModifiedDate":"2023-08-25"},{"lineNumber":111,"author":{"gitId":"joel-foo"},"content":"            description \u003d strs[0].trim();","lastModifiedDate":"2023-08-25"},{"lineNumber":112,"author":{"gitId":"joel-foo"},"content":"            if (description.isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":113,"author":{"gitId":"joel-foo"},"content":"                throw new ParserException(Messages.MESSAGE_DEADLINE_DESCRIPTION_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":114,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":115,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(Messages.MESSAGE_DEADLINE_BY_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":116,"author":{"gitId":"joel-foo"},"content":"        case 2:","lastModifiedDate":"2023-08-25"},{"lineNumber":117,"author":{"gitId":"joel-foo"},"content":"            description \u003d strs[0].trim();","lastModifiedDate":"2023-08-25"},{"lineNumber":118,"author":{"gitId":"joel-foo"},"content":"            String by \u003d strs[1].trim();","lastModifiedDate":"2023-08-25"},{"lineNumber":119,"author":{"gitId":"joel-foo"},"content":"            if (description.isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":120,"author":{"gitId":"joel-foo"},"content":"                throw new ParserException(Messages.MESSAGE_DEADLINE_DESCRIPTION_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":121,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":122,"author":{"gitId":"joel-foo"},"content":"            if (by.isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":123,"author":{"gitId":"joel-foo"},"content":"                throw new ParserException(Messages.MESSAGE_DEADLINE_BY_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":124,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":125,"author":{"gitId":"joel-foo"},"content":"            String datetime \u003d \"\";","lastModifiedDate":"2023-08-25"},{"lineNumber":126,"author":{"gitId":"joel-foo"},"content":"            try {","lastModifiedDate":"2023-08-25"},{"lineNumber":127,"author":{"gitId":"joel-foo"},"content":"                datetime \u003d DatetimeParser.parseDatetime(by.split(\" \"));","lastModifiedDate":"2023-08-25"},{"lineNumber":128,"author":{"gitId":"joel-foo"},"content":"            } catch (IllegalValueException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":129,"author":{"gitId":"joel-foo"},"content":"                throw e;","lastModifiedDate":"2023-08-25"},{"lineNumber":130,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":131,"author":{"gitId":"joel-foo"},"content":"            return new DeadlineCommand(new Deadline(description, datetime));","lastModifiedDate":"2023-08-25"},{"lineNumber":132,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":133,"author":{"gitId":"joel-foo"},"content":"        return null;","lastModifiedDate":"2023-08-25"},{"lineNumber":134,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":135,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":136,"author":{"gitId":"joel-foo"},"content":"    public static Command prepareEvent(String[] arr) throws MinionException {","lastModifiedDate":"2023-08-25"},{"lineNumber":137,"author":{"gitId":"joel-foo"},"content":"        if (arr.length \u003c 2 || arr[1].isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":138,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(Messages.MESSAGE_EVENT_DESCRIPTION_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":139,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":140,"author":{"gitId":"joel-foo"},"content":"        String[] strs \u003d arr[1].split(\"/from\");","lastModifiedDate":"2023-08-25"},{"lineNumber":141,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":142,"author":{"gitId":"joel-foo"},"content":"        String description \u003d null;","lastModifiedDate":"2023-08-25"},{"lineNumber":143,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":144,"author":{"gitId":"joel-foo"},"content":"        switch (strs.length) {","lastModifiedDate":"2023-08-25"},{"lineNumber":145,"author":{"gitId":"joel-foo"},"content":"        // nothing to left and right","lastModifiedDate":"2023-08-25"},{"lineNumber":146,"author":{"gitId":"joel-foo"},"content":"        case 0:","lastModifiedDate":"2023-08-25"},{"lineNumber":147,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(Messages.MESSAGE_EVENT_DESCRIPTION_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":148,"author":{"gitId":"joel-foo"},"content":"        case 1:","lastModifiedDate":"2023-08-25"},{"lineNumber":149,"author":{"gitId":"joel-foo"},"content":"            description \u003d strs[0].trim();","lastModifiedDate":"2023-08-25"},{"lineNumber":150,"author":{"gitId":"joel-foo"},"content":"            if (description.isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":151,"author":{"gitId":"joel-foo"},"content":"                throw new ParserException(Messages.MESSAGE_EVENT_DESCRIPTION_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":152,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":153,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(Messages.MESSAGE_EVENT_FROM_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":154,"author":{"gitId":"joel-foo"},"content":"        case 2:","lastModifiedDate":"2023-08-25"},{"lineNumber":155,"author":{"gitId":"joel-foo"},"content":"            description \u003d strs[0].trim();","lastModifiedDate":"2023-08-25"},{"lineNumber":156,"author":{"gitId":"joel-foo"},"content":"            String dates \u003d strs[1].trim();","lastModifiedDate":"2023-08-25"},{"lineNumber":157,"author":{"gitId":"joel-foo"},"content":"            if (description.isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":158,"author":{"gitId":"joel-foo"},"content":"                throw new ParserException(Messages.MESSAGE_EVENT_DESCRIPTION_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":159,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":160,"author":{"gitId":"joel-foo"},"content":"            if (dates.isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":161,"author":{"gitId":"joel-foo"},"content":"                throw new ParserException(Messages.MESSAGE_EVENT_FROM_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":162,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":163,"author":{"gitId":"joel-foo"},"content":"            strs \u003d strs[1].split(\"/to\");","lastModifiedDate":"2023-08-25"},{"lineNumber":164,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":165,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":166,"author":{"gitId":"joel-foo"},"content":"        String from \u003d null;","lastModifiedDate":"2023-08-25"},{"lineNumber":167,"author":{"gitId":"joel-foo"},"content":"        String to \u003d null;","lastModifiedDate":"2023-08-25"},{"lineNumber":168,"author":{"gitId":"joel-foo"},"content":"        switch (strs.length) {","lastModifiedDate":"2023-08-25"},{"lineNumber":169,"author":{"gitId":"joel-foo"},"content":"        // nothing to left and right","lastModifiedDate":"2023-08-25"},{"lineNumber":170,"author":{"gitId":"joel-foo"},"content":"        case 0:","lastModifiedDate":"2023-08-25"},{"lineNumber":171,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(Messages.MESSAGE_EVENT_FROM_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":172,"author":{"gitId":"joel-foo"},"content":"        case 1:","lastModifiedDate":"2023-08-25"},{"lineNumber":173,"author":{"gitId":"joel-foo"},"content":"            from \u003d strs[0].trim();","lastModifiedDate":"2023-08-25"},{"lineNumber":174,"author":{"gitId":"joel-foo"},"content":"            if (from.isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":175,"author":{"gitId":"joel-foo"},"content":"                throw new ParserException(Messages.MESSAGE_EVENT_FROM_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":176,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":177,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(Messages.MESSAGE_EVENT_TO_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":178,"author":{"gitId":"joel-foo"},"content":"        case 2:","lastModifiedDate":"2023-08-25"},{"lineNumber":179,"author":{"gitId":"joel-foo"},"content":"            from \u003d strs[0].trim();","lastModifiedDate":"2023-08-25"},{"lineNumber":180,"author":{"gitId":"joel-foo"},"content":"            to \u003d strs[1].trim();","lastModifiedDate":"2023-08-25"},{"lineNumber":181,"author":{"gitId":"joel-foo"},"content":"            if (from.isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":182,"author":{"gitId":"joel-foo"},"content":"                throw new ParserException(Messages.MESSAGE_EVENT_FROM_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":183,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":184,"author":{"gitId":"joel-foo"},"content":"            if (to.isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":185,"author":{"gitId":"joel-foo"},"content":"                throw new ParserException(Messages.MESSAGE_EVENT_TO_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":186,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":187,"author":{"gitId":"joel-foo"},"content":"            String fromDatetime \u003d \"\";","lastModifiedDate":"2023-08-25"},{"lineNumber":188,"author":{"gitId":"joel-foo"},"content":"            String toDatetime \u003d \"\";","lastModifiedDate":"2023-08-25"},{"lineNumber":189,"author":{"gitId":"joel-foo"},"content":"            try {","lastModifiedDate":"2023-08-25"},{"lineNumber":190,"author":{"gitId":"joel-foo"},"content":"                fromDatetime \u003d DatetimeParser.parseDatetime(from.split(\" \"));","lastModifiedDate":"2023-08-25"},{"lineNumber":191,"author":{"gitId":"joel-foo"},"content":"            } catch (IllegalValueException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":192,"author":{"gitId":"joel-foo"},"content":"                throw e;","lastModifiedDate":"2023-08-25"},{"lineNumber":193,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":194,"author":{"gitId":"joel-foo"},"content":"            try {","lastModifiedDate":"2023-08-25"},{"lineNumber":195,"author":{"gitId":"joel-foo"},"content":"                toDatetime \u003d DatetimeParser.parseDatetime(to.split(\" \"));","lastModifiedDate":"2023-08-25"},{"lineNumber":196,"author":{"gitId":"joel-foo"},"content":"            } catch (IllegalValueException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":197,"author":{"gitId":"joel-foo"},"content":"                throw e;","lastModifiedDate":"2023-08-25"},{"lineNumber":198,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":199,"author":{"gitId":"joel-foo"},"content":"            return new EventCommand(new Event(description, fromDatetime, toDatetime));","lastModifiedDate":"2023-08-25"},{"lineNumber":200,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":201,"author":{"gitId":"joel-foo"},"content":"        return null;","lastModifiedDate":"2023-08-25"},{"lineNumber":202,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":203,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":203}},{"path":"src/main/java/ParserException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":" * Parser exception.","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"public class ParserException extends MinionException {","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"     * Creates a new parser exception.","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"     * @param s error message.","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"    public ParserException(String s) {","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"        super(s);","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":12}},{"path":"src/main/java/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"import java.io.File;","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"import java.util.List;","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"public class Storage {","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"    String filePath;","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"    File file;","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"     * Constructs a storage object.","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"     * @param filePath Path of file.","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"     * Creates a directory and the file inside it.","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"     * @param file the file object.","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"     * @throws IOException","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"    public void createFile(File file) throws IOException {","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"        file.getParentFile().mkdirs();","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"        file.createNewFile();","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"     * Loads a list of tasks from the file. If the directory/file is not present, it will be created,","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"     * and then an exception will be thrown.","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"     * @return a list of tasks from the file.","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"     * @throws FileNotFoundException","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"     * @throws IOException","lastModifiedDate":"2023-08-24"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"    public List\u003cTask\u003e load() throws FileNotFoundException, IOException {","lastModifiedDate":"2023-08-24"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"        file \u003d new File(filePath);","lastModifiedDate":"2023-08-24"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"        if (!file.exists()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"            try {","lastModifiedDate":"2023-08-24"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"                createFile(file);","lastModifiedDate":"2023-08-24"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"            } catch(IOException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"                throw new IOException();","lastModifiedDate":"2023-08-24"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"            throw new FileNotFoundException();","lastModifiedDate":"2023-08-24"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"        Scanner s \u003d new Scanner(file);","lastModifiedDate":"2023-08-24"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-24"},{"lineNumber":50,"author":{"gitId":"joel-foo"},"content":"        while (s.hasNext()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":51,"author":{"gitId":"joel-foo"},"content":"            String str \u003d s.nextLine();","lastModifiedDate":"2023-08-24"},{"lineNumber":52,"author":{"gitId":"joel-foo"},"content":"            String[] arr \u003d str.split(\" \\\\| \");","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"joel-foo"},"content":"            switch (arr[0]) {","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"joel-foo"},"content":"                case \"T\":","lastModifiedDate":"2023-08-24"},{"lineNumber":55,"author":{"gitId":"joel-foo"},"content":"                    tasks.add(new ToDo(arr[2], arr[1].equals(\"1\")));","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"joel-foo"},"content":"                    break;","lastModifiedDate":"2023-08-24"},{"lineNumber":57,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":58,"author":{"gitId":"joel-foo"},"content":"                case \"D\":","lastModifiedDate":"2023-08-24"},{"lineNumber":59,"author":{"gitId":"joel-foo"},"content":"                    tasks.add(new Deadline(arr[2], arr[1].equals(\"1\"), arr[3]));","lastModifiedDate":"2023-08-24"},{"lineNumber":60,"author":{"gitId":"joel-foo"},"content":"                    break;","lastModifiedDate":"2023-08-24"},{"lineNumber":61,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":62,"author":{"gitId":"joel-foo"},"content":"                case \"E\":","lastModifiedDate":"2023-08-24"},{"lineNumber":63,"author":{"gitId":"joel-foo"},"content":"                    String[] tmp \u003d arr[3].split(\" - \");","lastModifiedDate":"2023-08-24"},{"lineNumber":64,"author":{"gitId":"joel-foo"},"content":"                    String from \u003d tmp[0];","lastModifiedDate":"2023-08-24"},{"lineNumber":65,"author":{"gitId":"joel-foo"},"content":"                    String to \u003d tmp[1];","lastModifiedDate":"2023-08-24"},{"lineNumber":66,"author":{"gitId":"joel-foo"},"content":"                    tasks.add(new Event(arr[2], arr[1].equals(\"1\"), from, to));","lastModifiedDate":"2023-08-24"},{"lineNumber":67,"author":{"gitId":"joel-foo"},"content":"                    break;","lastModifiedDate":"2023-08-24"},{"lineNumber":68,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":69,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":70,"author":{"gitId":"joel-foo"},"content":"        return tasks;","lastModifiedDate":"2023-08-24"},{"lineNumber":71,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":72,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":73,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":74,"author":{"gitId":"joel-foo"},"content":"     * Writes a list of tasks to the file.","lastModifiedDate":"2023-08-24"},{"lineNumber":75,"author":{"gitId":"joel-foo"},"content":"     * @param tasks the list of tasks.","lastModifiedDate":"2023-08-24"},{"lineNumber":76,"author":{"gitId":"joel-foo"},"content":"     * @throws IOException","lastModifiedDate":"2023-08-24"},{"lineNumber":77,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":78,"author":{"gitId":"joel-foo"},"content":"    public void writeToFile(TaskList tasks) throws IOException {","lastModifiedDate":"2023-08-25"},{"lineNumber":79,"author":{"gitId":"joel-foo"},"content":"        FileWriter fw \u003d new FileWriter(this.filePath);","lastModifiedDate":"2023-08-24"},{"lineNumber":80,"author":{"gitId":"joel-foo"},"content":"        fw.write(tasks.toStringStorage());","lastModifiedDate":"2023-08-25"},{"lineNumber":81,"author":{"gitId":"joel-foo"},"content":"        fw.close();","lastModifiedDate":"2023-08-24"},{"lineNumber":82,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":83,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"joel-foo":83}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":" * Represents a task created by the user.","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"    protected String description;","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"     * Creates a task object.","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"     * @param description Description of task.","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-20"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"     * Returns the status icon depending on whether the task is done.","lastModifiedDate":"2023-08-20"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"     * @return the status icon.","lastModifiedDate":"2023-08-20"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"    protected String getStatusIcon() {","lastModifiedDate":"2023-08-20"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"        return isDone ? \"X\": \"\";","lastModifiedDate":"2023-08-20"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-08-20"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"    protected void markDone() {","lastModifiedDate":"2023-08-20"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-20"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"     * Marks the task as undone.","lastModifiedDate":"2023-08-20"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"    protected void markUndone() {","lastModifiedDate":"2023-08-20"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-20"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"     * Returns the string representation of the task.","lastModifiedDate":"2023-08-20"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"     * @return string representation of the task.","lastModifiedDate":"2023-08-20"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-08-20"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"    public abstract String toStringStorage();","lastModifiedDate":"2023-08-24"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":49}},{"path":"src/main/java/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"import java.util.List;","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"public class TaskList {","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"    List\u003cTask\u003e tasks;","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"    public TaskList(List\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"        tasks.add(task);","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"    public void checkIndex(int taskIdx) throws IllegalValueException {","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"        if(taskIdx \u003c 0 || taskIdx \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"            throw new IllegalValueException(\"☹ OOPS!!! Please enter a valid task number.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"    public Task markTask(int taskIdx) throws IllegalValueException {","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"        try {","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"            checkIndex(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"        } catch (IllegalValueException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"            throw e;","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"        Task currTask \u003d tasks.get(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"        currTask.markDone();","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"        return currTask;","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"    public Task unmarkTask(int taskIdx) throws IllegalValueException {","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"        try {","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"            checkIndex(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"        } catch (IllegalValueException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"            throw e;","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"        Task currTask \u003d tasks.get(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"        currTask.markUndone();","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"        return currTask;","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"    public Task deleteTask(int taskIdx) throws IllegalValueException {","lastModifiedDate":"2023-08-25"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"        try {","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"joel-foo"},"content":"            checkIndex(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":51,"author":{"gitId":"joel-foo"},"content":"        } catch (IllegalValueException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":52,"author":{"gitId":"joel-foo"},"content":"            throw e;","lastModifiedDate":"2023-08-25"},{"lineNumber":53,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":54,"author":{"gitId":"joel-foo"},"content":"        Task currTask \u003d tasks.get(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":55,"author":{"gitId":"joel-foo"},"content":"        tasks.remove(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":56,"author":{"gitId":"joel-foo"},"content":"        return currTask;","lastModifiedDate":"2023-08-25"},{"lineNumber":57,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":58,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":59,"author":{"gitId":"joel-foo"},"content":"    public int size() {","lastModifiedDate":"2023-08-25"},{"lineNumber":60,"author":{"gitId":"joel-foo"},"content":"        return tasks.size();","lastModifiedDate":"2023-08-25"},{"lineNumber":61,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":62,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":63,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":64,"author":{"gitId":"joel-foo"},"content":"    public String toString() {","lastModifiedDate":"2023-08-25"},{"lineNumber":65,"author":{"gitId":"joel-foo"},"content":"        String text \u003d \"Here are the tasks in your list:\";","lastModifiedDate":"2023-08-25"},{"lineNumber":66,"author":{"gitId":"joel-foo"},"content":"        for(int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-08-25"},{"lineNumber":67,"author":{"gitId":"joel-foo"},"content":"            text +\u003d \"\\n\\t\" + (i + 1) + \".\" + tasks.get(i).toString();","lastModifiedDate":"2023-08-25"},{"lineNumber":68,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":69,"author":{"gitId":"joel-foo"},"content":"        return text;","lastModifiedDate":"2023-08-25"},{"lineNumber":70,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":71,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":72,"author":{"gitId":"joel-foo"},"content":"    public String toStringStorage() {","lastModifiedDate":"2023-08-25"},{"lineNumber":73,"author":{"gitId":"joel-foo"},"content":"        String s \u003d \"\";","lastModifiedDate":"2023-08-25"},{"lineNumber":74,"author":{"gitId":"joel-foo"},"content":"        for(Task task: tasks) {","lastModifiedDate":"2023-08-25"},{"lineNumber":75,"author":{"gitId":"joel-foo"},"content":"            s +\u003d task.toStringStorage() + \"\\n\";","lastModifiedDate":"2023-08-25"},{"lineNumber":76,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":77,"author":{"gitId":"joel-foo"},"content":"        return s;","lastModifiedDate":"2023-08-25"},{"lineNumber":78,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":79,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":79}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":" * Represents a ToDo task.","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"     * Creates a ToDo object. This is the main constructor of the ToDo task.","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"     * @param description Description of Todo.","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"     * @param isDone Whether ToDo is done.","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"    public ToDo(String description, boolean isDone) {","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"        super(description, isDone);","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"     * Creates a ToDo object. This calls the main constructor when the default for isDone is false.","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"     * @param description Description of ToDo.","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-08-20"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"        this(description, false);","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"     * Returns the string representation of the ToDo task.","lastModifiedDate":"2023-08-20"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"     * @return string representation of the ToDo task.","lastModifiedDate":"2023-08-20"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-20"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"     * Returns a string representation of ToDo to be used in storage.","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"     * @return string representation of ToDo for storage.","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"    public String toStringStorage() {","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"        return \"T | \" + (isDone ? \"1\" : \"0\") + \" | \" + description;","lastModifiedDate":"2023-08-24"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":40}},{"path":"src/main/java/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"public class ToDoCommand extends Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"    public static final String COMMAND_WORD \u003d \"todo\";","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"    public ToDo toDo;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"    public ToDoCommand(ToDo toDo) {","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"        this.toDo \u003d toDo;","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"        tasks.add(toDo);","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"        ui.print(","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"            \"Got it. I\u0027ve added this task:\",","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"            \"\\t\" + toDo.toString(),","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"            \"Now you have \" + tasks.size() +  \" tasks in the list.\"","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"        );","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"        storage.writeToFile(tasks);","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":21}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":" * Represents the Ui of the chatbot.","lastModifiedDate":"2023-08-20"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"public class Ui {","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"    private static final String DIVIDER \u003d \"\\t____________________________________________________________\\n\";","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"    private final Scanner sc;","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"    public Ui() {","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"        this.sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"    public String readCommand() {","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"        return sc.nextLine();","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"     * Pretty prints string(s).","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"     * @param args string(s) to be printed.","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"    public void print(String... args){","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"        String text \u003d DIVIDER;","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"        for(int i \u003d 0; i \u003c args.length; i++) {","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"            text +\u003d String.format(\"\\t%s\\n\", args[i]);","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"        text +\u003d DIVIDER;","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"        System.out.println(text);","lastModifiedDate":"2023-08-20"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"     * Function to say hi to the user.","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"    public void showWelcome(){","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"        this.print(Messages.MESSAGE_WELCOME);","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"     * Function to say bye to the user.","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"    public void showGoodbye(){","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"        this.print(Messages.MESSAGE_GOODBYE);","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-08-24"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"        this.print(Messages.MESSAGE_FILE_NOT_FOUND);","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"    public void tearDown() {","lastModifiedDate":"2023-08-25"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"        this.showGoodbye();","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"joel-foo"},"content":"        sc.close();","lastModifiedDate":"2023-08-25"},{"lineNumber":51,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":52,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":52}},{"path":"src/main/java/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"    public static final String COMMAND_WORD \u003d \"unmark\";","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"    private int taskIdx;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"    public UnmarkCommand(int taskIdx) {","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"        this.taskIdx \u003d taskIdx;","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IllegalValueException, IOException {","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"        Task task \u003d tasks.unmarkTask(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"        ui.print(\"OK, I\u0027ve marked this task as not done yet:\",","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"                \"\\t\" + task.toString()","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"        );","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"        storage.writeToFile(tasks);","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":18}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"todo borrow book","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"mark 1","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"mark 2","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"mark 3","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"unmark 2","lastModifiedDate":"2023-08-20"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"bye","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":14}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"if ! javac -encoding ISO-8859-1 -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2023-08-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"java -classpath ../bin Minion \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"joel-foo":2,"-":36}}]
