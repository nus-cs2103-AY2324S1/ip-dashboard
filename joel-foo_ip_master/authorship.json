[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"    mainClass.set(\"minion.Minion\")","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"    archiveBaseName \u003d \"minion\"","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"joel-foo":2,"-":40}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"T | 0 | hi","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"T | 0 | lol","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"D | 0 | hi | Mar 3 2023","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"D | 0 | buy book | Mar 3 2024 6:00 PM","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"E | 1 | party | Mar 3 2023 1:00 PM - Sep 5 2023 3:45 AM","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"E | 0 | pizza party | Aug 3 2023 - Sep 3 2023 1:28 PM","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"T | 0 | lol","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"D | 1 | hiiii | Feb 8 2024","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"D | 0 | return book | Dec 3 2023 2:00 PM","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"D | 0 | lmao | Jul 3 2025 8:00 PM","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":10}},{"path":"src/main/java/minion/Minion.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"import minion.commands.Command;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"import minion.data.TaskList;","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"import minion.data.exception.MinionException;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"import minion.parser.CommandParser;","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"import minion.storage.Storage;","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"import minion.ui.Ui;","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":" * Represents the Minion chatbot.","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"public class Minion {","lastModifiedDate":"2023-08-20"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"    private final Ui ui;","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"    private final Storage storage;","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"     * Constructs the Minion chatbot.","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"     * @param filePath The file path of the file storing the task list.","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"    public Minion(String filePath) {","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"        try {","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-20"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"        new Minion(\"data/tasks.txt\").run();","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"     * Runs the chatbot.","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"    private void run()  {","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"        ui.showWelcome();","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"        while (!isExit) {","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"            try {","lastModifiedDate":"2023-08-25"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"                String command \u003d ui.readCommand();","lastModifiedDate":"2023-08-25"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"                Command c \u003d CommandParser.parse(command);","lastModifiedDate":"2023-08-25"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"joel-foo"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-08-25"},{"lineNumber":51,"author":{"gitId":"joel-foo"},"content":"            } catch (MinionException | IOException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":52,"author":{"gitId":"joel-foo"},"content":"                ui.print(e.getMessage());","lastModifiedDate":"2023-08-21"},{"lineNumber":53,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":54,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":55,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":56,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":56}},{"path":"src/main/java/minion/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.commands;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"import minion.data.exception.MinionException;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"import minion.data.TaskList;","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"import minion.storage.Storage;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"import minion.ui.Ui;","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":" * Represents a command.","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"public abstract class Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"     * Executes the command given the tasks, ui, storage.","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"     * @param tasks Task list.","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"     * @param ui Ui of chatbot.","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"     * @param storage Storage of chatbot.","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"     * @throws MinionException if task cannot be executed.","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"     * @throws IOException if there is IO error.","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws MinionException, IOException;","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"     * Checks whether the command is exit.","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"     * @return true if command is exit.","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"        return this instanceof ExitCommand;","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":31}},{"path":"src/main/java/minion/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.commands;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"import minion.data.task.Deadline;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"import minion.storage.Storage;","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"import minion.data.TaskList;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"import minion.ui.Ui;","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":" * Represents a deadline command.","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"    public static final String COMMAND_WORD \u003d \"deadline\";","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"    private final Deadline deadline;","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"     * Constructs a deadline command object.","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"     * @param deadline Deadline of the command.","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"    public DeadlineCommand(Deadline deadline) {","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"     * Executes the deadline command.","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"     * @param tasks Task list.","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"     * @param ui Ui of chatbot.","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"     * @param storage Storage of chatbot.","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"     * @throws IOException if there is IO error.","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"        tasks.add(deadline);","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"        ui.print(","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"                \"Got it. I\u0027ve added this task:\",","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"                \"\\t\" + deadline.toString(),","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"                \"Now you have \" + tasks.size() +  \" tasks in the list.\"","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"        );","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"        storage.writeToFile(tasks);","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"     * Checks whether this object equals the other object.","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"     * @param o other object.","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"     * @return whether this object equals the other object.","lastModifiedDate":"2023-08-25"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"joel-foo"},"content":"        if (o \u003d\u003d null || !(o instanceof DeadlineCommand)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"joel-foo"},"content":"            return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"joel-foo"},"content":"        DeadlineCommand c \u003d (DeadlineCommand) o;","lastModifiedDate":"2023-08-25"},{"lineNumber":54,"author":{"gitId":"joel-foo"},"content":"        return this.deadline.equals(c.deadline);","lastModifiedDate":"2023-08-25"},{"lineNumber":55,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":56,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":56}},{"path":"src/main/java/minion/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.commands;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"import minion.data.exception.IllegalValueException;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"import minion.data.TaskList;","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"import minion.data.task.Task;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"import minion.storage.Storage;","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"import minion.ui.Ui;","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":" * Represents a delete command.","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"    private final int taskIdx;","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"     * Constructs a delete command.","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"     * @param taskIdx Index of task in task list.","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"    public DeleteCommand(int taskIdx) {","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"        this.taskIdx \u003d taskIdx;","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"     * Executes the delete command.","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"     * @param tasks Task list.","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"     * @param ui Ui of chatbot.","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"     * @param storage Storage of chatbot.","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"     * @throws IllegalValueException if argument(s) are invalid.","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"     * @throws IOException if there is IO error.","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IllegalValueException, IOException {","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"        Task task \u003d tasks.deleteTask(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"        ui.print(\"OK, I\u0027ve removed this task\",","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"                \"\\t\" + task.toString()","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"        );","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"        storage.writeToFile(tasks);","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"     * Checks whether this object equals the other object.","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"     * @param o other object.","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"     * @return whether this object equals the other object.","lastModifiedDate":"2023-08-25"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"joel-foo"},"content":"        if (o \u003d\u003d null || !(o instanceof DeleteCommand)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"joel-foo"},"content":"            return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"joel-foo"},"content":"        DeleteCommand c \u003d (DeleteCommand) o;","lastModifiedDate":"2023-08-25"},{"lineNumber":54,"author":{"gitId":"joel-foo"},"content":"        return this.taskIdx \u003d\u003d c.taskIdx;","lastModifiedDate":"2023-08-25"},{"lineNumber":55,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":56,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":56}},{"path":"src/main/java/minion/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.commands;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"import minion.data.task.Event;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"import minion.storage.Storage;","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"import minion.data.TaskList;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"import minion.ui.Ui;","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":" * Represents an event command.","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"    public static final String COMMAND_WORD \u003d \"event\";","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"    private final Event event;","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"     * Constructs an event command object.","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"     * @param event Event of the command.","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"    public EventCommand(Event event) {","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"        this.event \u003d event;","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"     * Executes the event command.","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"     * @param tasks Task list.","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"     * @param ui Ui of chatbot.","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"     * @param storage Storage of chatbot.","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"     * @throws IOException if there is IO error.","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"        tasks.add(event);","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"        ui.print(","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"                \"Got it. I\u0027ve added this task:\",","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"                \"\\t\" + event.toString(),","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"                \"Now you have \" + tasks.size() +  \" tasks in the list.\"","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"        );","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"        storage.writeToFile(tasks);","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"     * Checks whether this object equals the other object.","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"     * @param o other object.","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"     * @return whether this object equals the other object.","lastModifiedDate":"2023-08-25"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"joel-foo"},"content":"        if (o \u003d\u003d null || !(o instanceof EventCommand)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"joel-foo"},"content":"            return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"joel-foo"},"content":"        EventCommand c \u003d (EventCommand) o;","lastModifiedDate":"2023-08-25"},{"lineNumber":54,"author":{"gitId":"joel-foo"},"content":"        return this.event.equals(c.event);","lastModifiedDate":"2023-08-25"},{"lineNumber":55,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":56,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":56}},{"path":"src/main/java/minion/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.commands;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"import minion.storage.Storage;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"import minion.data.TaskList;","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"import minion.ui.Ui;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":" * Represents an exit command.","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"    public static final String COMMAND_WORD \u003d \"bye\";","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"     * Executes the exit command.","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"     * @param tasks Task list.","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"     * @param ui Ui of chatbot.","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"     * @param storage Storage of chatbot.","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"        ui.tearDown();","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":24}},{"path":"src/main/java/minion/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.commands;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"import minion.common.Messages;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"import minion.data.TaskList;","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"import minion.storage.Storage;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"import minion.ui.Ui;","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":" * Represents a find command.","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"    private final String query;","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"     * Constructs a find command.","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"     * @param query Query word.","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"    public FindCommand(String query) {","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"        this.query \u003d query;","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"     * Executes a find command.","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"     * @param tasks Task list.","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"     * @param ui Ui of chatbot.","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"     * @param storage Storage of chatbot.","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"        TaskList tasksFound \u003d tasks.search(query);","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"        if (tasksFound.size() \u003d\u003d 0) {","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"            ui.print(Messages.MESSAGE_TASK_NOT_FOUND);","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"            return;","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"        ui.print(tasksFound.toStringMatching());","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":38}},{"path":"src/main/java/minion/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.commands;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"import minion.storage.Storage;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"import minion.data.TaskList;","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"import minion.ui.Ui;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":" * Represents a list command.","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"    public static final String COMMAND_WORD \u003d \"list\";","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"     * Executes a list command.","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"     * @param tasks Task list.","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"     * @param ui Ui of chatbot.","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"     * @param storage Storage of chatbot.","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"        ui.print(tasks.toString());","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":23}},{"path":"src/main/java/minion/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.commands;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"import minion.data.exception.IllegalValueException;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"import minion.data.TaskList;","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"import minion.data.task.Task;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"import minion.storage.Storage;","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"import minion.ui.Ui;","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":" * Represents a mark command.","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"    public static final String COMMAND_WORD \u003d \"mark\";","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"    private final int taskIdx;","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"     * Constructs a mark command object.","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"     * @param taskIdx index of task in task list.","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"    public MarkCommand(int taskIdx) {","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"        this.taskIdx \u003d taskIdx;","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"     * Executes the mark command.","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"     * @param tasks Task list.","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"     * @param ui Ui of chatbot.","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"     * @param storage Storage of chatbot.","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"     * @throws IllegalValueException if any argument(s) are invalid.","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"     * @throws IOException if there is IO error.","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IllegalValueException, IOException {","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"        Task task \u003d tasks.markTask(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"        ui.print(\"Nice! I\u0027ve marked this task as done:\",","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"                \"\\t\" + task.toString()","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"        );","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"        storage.writeToFile(tasks);","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"     * Checks whether this object equals the other object.","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"     * @param o other object.","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"     * @return whether this object equals the other object.","lastModifiedDate":"2023-08-25"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"joel-foo"},"content":"        if (o \u003d\u003d null || !(o instanceof MarkCommand)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"joel-foo"},"content":"            return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"joel-foo"},"content":"        MarkCommand c \u003d (MarkCommand) o;","lastModifiedDate":"2023-08-25"},{"lineNumber":54,"author":{"gitId":"joel-foo"},"content":"        return this.taskIdx \u003d\u003d c.taskIdx;","lastModifiedDate":"2023-08-25"},{"lineNumber":55,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":56,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":56}},{"path":"src/main/java/minion/commands/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.commands;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"import minion.storage.Storage;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"import minion.data.TaskList;","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"import minion.data.task.ToDo;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"import minion.ui.Ui;","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":" * Represents a todo command.","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"public class ToDoCommand extends Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"    public static final String COMMAND_WORD \u003d \"todo\";","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"    private final ToDo toDo;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"     * Constructs a todo command.","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"     * @param toDo Todo of the command.","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"    public ToDoCommand(ToDo toDo) {","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"        this.toDo \u003d toDo;","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"     * Executes the todo command.","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"     * @param tasks Task list.","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"     * @param ui Ui of chatbot.","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"     * @param storage Storage of chatbot.","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"     * @throws IOException if there is IO error.","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"        tasks.add(toDo);","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"        ui.print(","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"            \"Got it. I\u0027ve added this task:\",","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"            \"\\t\" + toDo.toString(),","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"            \"Now you have \" + tasks.size() +  \" tasks in the list.\"","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"        );","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"        storage.writeToFile(tasks);","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"     * Checks whether this object equals the other object.","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"     * @param o other object.","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"     * @return whether this object equals the other object.","lastModifiedDate":"2023-08-25"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"joel-foo"},"content":"        if (o \u003d\u003d null || !(o instanceof ToDoCommand)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"joel-foo"},"content":"            return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"joel-foo"},"content":"        ToDoCommand c \u003d (ToDoCommand) o;","lastModifiedDate":"2023-08-25"},{"lineNumber":54,"author":{"gitId":"joel-foo"},"content":"        return this.toDo.equals(c.toDo);","lastModifiedDate":"2023-08-25"},{"lineNumber":55,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":56,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":56}},{"path":"src/main/java/minion/commands/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.commands;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"import minion.data.exception.IllegalValueException;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"import minion.data.TaskList;","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"import minion.data.task.Task;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"import minion.storage.Storage;","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"import minion.ui.Ui;","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":" * Represents an unmark command.","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"    public static final String COMMAND_WORD \u003d \"unmark\";","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"    private final int taskIdx;","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"     * Constructs an unmark command object.","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"     * @param taskIdx index of task in task list.","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"    public UnmarkCommand(int taskIdx) {","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"        this.taskIdx \u003d taskIdx;","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"     * Executes the unmark command.","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"     * @param tasks Task list.","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"     * @param ui Ui of chatbot.","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"     * @param storage Storage of chatbot.","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"     * @throws IllegalValueException if any argument(s) are invalid.","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"     * @throws IOException if there is IO error.","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"            IllegalValueException, IOException {","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"        Task task \u003d tasks.unmarkTask(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"        ui.print(\"OK, I\u0027ve marked this task as not done yet:\",","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"                \"\\t\" + task.toString()","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"        );","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"        storage.writeToFile(tasks);","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"     * Checks whether this object equals the other object.","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"     * @param o other object.","lastModifiedDate":"2023-08-25"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"     * @return whether this object equals the other object.","lastModifiedDate":"2023-08-25"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"joel-foo"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-08-25"},{"lineNumber":51,"author":{"gitId":"joel-foo"},"content":"        if (o \u003d\u003d null || !(o instanceof UnmarkCommand)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"joel-foo"},"content":"            return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"joel-foo"},"content":"        UnmarkCommand c \u003d (UnmarkCommand) o;","lastModifiedDate":"2023-08-25"},{"lineNumber":55,"author":{"gitId":"joel-foo"},"content":"        return this.taskIdx \u003d\u003d c.taskIdx;","lastModifiedDate":"2023-08-25"},{"lineNumber":56,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":57,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":57}},{"path":"src/main/java/minion/common/Messages.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.common;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":" * Represents the messages that the chatbot displays to the user.","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"public class Messages {","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"    public static final String MESSAGE_GOODBYE \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"    public static final String[] MESSAGE_WELCOME \u003d new String[]{\"Hello! I\u0027m minion.Minion!\", \"What can I do for you?\"};","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"    public static final String MESSAGE_FILE_NOT_FOUND \u003d \"Unable to locate the file at /data/tasks.txt. Creating a new one now.\";","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"    public static final String MESSAGE_MISSING_COMMAND \u003d \":( OOPS!!! I\u0027m sorry, please input a legit command. :-(\";","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"    public static final String MESSAGE_NO_UNDERSTAND \u003d \":( OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"    public static final String MESSAGE_TODO_DESCRIPTION_ERROR \u003d \":( OOPS!!! The description of a todo cannot be empty.\";","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"    public static final String MESSAGE_DEADLINE_DESCRIPTION_ERROR \u003d \":( OOPS!!! The description of a deadline cannot be empty.\";","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"    public static final String MESSAGE_DEADLINE_BY_ERROR \u003d \":( OOPS!!! The date of a deadline cannot be empty.\";","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"    public static final String MESSAGE_EVENT_DESCRIPTION_ERROR \u003d \":( OOPS!!! The description of an event cannot be empty.\";","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"    public static final String MESSAGE_EVENT_FROM_ERROR \u003d \":( OOPS!!! The from date of an event cannot be empty.\";","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"    public static final String MESSAGE_EVENT_TO_ERROR \u003d \":( OOPS!!! The to date of an event cannot be empty.\";","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"    public static final String MESSAGE_FAIL_PARSE_DATE \u003d \"Unable to parse date. Ensure it is of the form dd/mm/yyyy!\";","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"    public static final String MESSAGE_FAIL_PARSE_TIME \u003d \"Unable to parse time. Ensure it is form HHmm!\";","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"    public static final String MESSAGE_IO_EXCEPTION \u003d \"IO exception occurred. Please try again.\";","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"    public static final String MESSAGE_INVALID_TASK_INDEX \u003d \":( OOPS!!! Please enter a valid task number.\";","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"    public static final String MESSAGE_TASK_NOT_FOUND \u003d \":( OOPS!!! Cannot find what you are looking for!\";","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":23}},{"path":"src/main/java/minion/data/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.data;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"import minion.data.exception.IllegalValueException;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"import minion.data.task.Task;","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"import minion.common.Messages;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"import java.util.List;","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":" * Represents the task list of the Minion chatbot.","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"public class TaskList {","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"    private final List\u003cTask\u003e tasks;","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"     * Constructs a new TaskList.","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"     * Constructs a TaskList with the given tasks.","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"     * @param tasks Tasks that TaskList should contain.","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"    public TaskList(List\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"     * Adds a task to the TaskList","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"     * @param task the given task.","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"        tasks.add(task);","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"     * Checks if the task index is out of bounds.","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"     * @param taskIdx index of task.","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"     * @throws IllegalValueException if task index is out of bounds.","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"    private void checkIndex(int taskIdx) throws IllegalValueException {","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"        if(taskIdx \u003c 0 || taskIdx \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"            throw new IllegalValueException(Messages.MESSAGE_INVALID_TASK_INDEX);","lastModifiedDate":"2023-08-25"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":51,"author":{"gitId":"joel-foo"},"content":"     * Marks the task with taskIdx as done.","lastModifiedDate":"2023-08-25"},{"lineNumber":52,"author":{"gitId":"joel-foo"},"content":"     * @param taskIdx index of task.","lastModifiedDate":"2023-08-25"},{"lineNumber":53,"author":{"gitId":"joel-foo"},"content":"     * @return the task with index taskIdx.","lastModifiedDate":"2023-08-25"},{"lineNumber":54,"author":{"gitId":"joel-foo"},"content":"     * @throws IllegalValueException if taskIdx is out bounds.","lastModifiedDate":"2023-08-25"},{"lineNumber":55,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":56,"author":{"gitId":"joel-foo"},"content":"    public Task markTask(int taskIdx) throws IllegalValueException {","lastModifiedDate":"2023-08-25"},{"lineNumber":57,"author":{"gitId":"joel-foo"},"content":"        checkIndex(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":58,"author":{"gitId":"joel-foo"},"content":"        Task currTask \u003d tasks.get(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":59,"author":{"gitId":"joel-foo"},"content":"        currTask.markDone();","lastModifiedDate":"2023-08-25"},{"lineNumber":60,"author":{"gitId":"joel-foo"},"content":"        return currTask;","lastModifiedDate":"2023-08-25"},{"lineNumber":61,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":62,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":63,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":64,"author":{"gitId":"joel-foo"},"content":"     * Marks the task with taskIdx as undone.","lastModifiedDate":"2023-08-25"},{"lineNumber":65,"author":{"gitId":"joel-foo"},"content":"     * @param taskIdx index of task.","lastModifiedDate":"2023-08-25"},{"lineNumber":66,"author":{"gitId":"joel-foo"},"content":"     * @return the task with index taskIdx.","lastModifiedDate":"2023-08-25"},{"lineNumber":67,"author":{"gitId":"joel-foo"},"content":"     * @throws IllegalValueException if taskIdx is out bounds.","lastModifiedDate":"2023-08-25"},{"lineNumber":68,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":69,"author":{"gitId":"joel-foo"},"content":"    public Task unmarkTask(int taskIdx) throws IllegalValueException {","lastModifiedDate":"2023-08-25"},{"lineNumber":70,"author":{"gitId":"joel-foo"},"content":"        checkIndex(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":71,"author":{"gitId":"joel-foo"},"content":"        Task currTask \u003d tasks.get(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":72,"author":{"gitId":"joel-foo"},"content":"        currTask.markUndone();","lastModifiedDate":"2023-08-25"},{"lineNumber":73,"author":{"gitId":"joel-foo"},"content":"        return currTask;","lastModifiedDate":"2023-08-25"},{"lineNumber":74,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":75,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":76,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":77,"author":{"gitId":"joel-foo"},"content":"     * Deletes the task with taskIdx.","lastModifiedDate":"2023-08-25"},{"lineNumber":78,"author":{"gitId":"joel-foo"},"content":"     * @param taskIdx index of task.","lastModifiedDate":"2023-08-25"},{"lineNumber":79,"author":{"gitId":"joel-foo"},"content":"     * @return the task with index taskIdx.","lastModifiedDate":"2023-08-25"},{"lineNumber":80,"author":{"gitId":"joel-foo"},"content":"     * @throws IllegalValueException if taskIdx is out bounds.","lastModifiedDate":"2023-08-25"},{"lineNumber":81,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":82,"author":{"gitId":"joel-foo"},"content":"    public Task deleteTask(int taskIdx) throws IllegalValueException {","lastModifiedDate":"2023-08-25"},{"lineNumber":83,"author":{"gitId":"joel-foo"},"content":"        checkIndex(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":84,"author":{"gitId":"joel-foo"},"content":"        Task currTask \u003d tasks.get(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":85,"author":{"gitId":"joel-foo"},"content":"        tasks.remove(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":86,"author":{"gitId":"joel-foo"},"content":"        return currTask;","lastModifiedDate":"2023-08-25"},{"lineNumber":87,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":88,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":89,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":90,"author":{"gitId":"joel-foo"},"content":"     * Returns a TaskList containing tasks that match the query.","lastModifiedDate":"2023-08-25"},{"lineNumber":91,"author":{"gitId":"joel-foo"},"content":"     * @param query the query.","lastModifiedDate":"2023-08-25"},{"lineNumber":92,"author":{"gitId":"joel-foo"},"content":"     * @return a TaskList containing tasks that match the query.","lastModifiedDate":"2023-08-25"},{"lineNumber":93,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":94,"author":{"gitId":"joel-foo"},"content":"    public TaskList search(String query) {","lastModifiedDate":"2023-08-25"},{"lineNumber":95,"author":{"gitId":"joel-foo"},"content":"        TaskList results \u003d new TaskList();","lastModifiedDate":"2023-08-25"},{"lineNumber":96,"author":{"gitId":"joel-foo"},"content":"        for (Task task: tasks) {","lastModifiedDate":"2023-08-25"},{"lineNumber":97,"author":{"gitId":"joel-foo"},"content":"            if (task.contains(query)) {","lastModifiedDate":"2023-08-25"},{"lineNumber":98,"author":{"gitId":"joel-foo"},"content":"                results.add(task);","lastModifiedDate":"2023-08-25"},{"lineNumber":99,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":100,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":101,"author":{"gitId":"joel-foo"},"content":"        return results;","lastModifiedDate":"2023-08-25"},{"lineNumber":102,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":103,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":104,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":105,"author":{"gitId":"joel-foo"},"content":"     * Returns the size of the TaskList.","lastModifiedDate":"2023-08-25"},{"lineNumber":106,"author":{"gitId":"joel-foo"},"content":"     * @return size of TaskList.","lastModifiedDate":"2023-08-25"},{"lineNumber":107,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":108,"author":{"gitId":"joel-foo"},"content":"    public int size() {","lastModifiedDate":"2023-08-25"},{"lineNumber":109,"author":{"gitId":"joel-foo"},"content":"        return tasks.size();","lastModifiedDate":"2023-08-25"},{"lineNumber":110,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":111,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":112,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":113,"author":{"gitId":"joel-foo"},"content":"     * Returns a string representation of the tasks in the list.","lastModifiedDate":"2023-08-25"},{"lineNumber":114,"author":{"gitId":"joel-foo"},"content":"     * @return a string representation of the tasks in the list.","lastModifiedDate":"2023-08-25"},{"lineNumber":115,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":116,"author":{"gitId":"joel-foo"},"content":"    public String enumerateTasks() {","lastModifiedDate":"2023-08-25"},{"lineNumber":117,"author":{"gitId":"joel-foo"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-08-25"},{"lineNumber":118,"author":{"gitId":"joel-foo"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-08-25"},{"lineNumber":119,"author":{"gitId":"joel-foo"},"content":"            sb.append(\"\\n\\t\");","lastModifiedDate":"2023-08-25"},{"lineNumber":120,"author":{"gitId":"joel-foo"},"content":"            sb.append(i + 1);","lastModifiedDate":"2023-08-25"},{"lineNumber":121,"author":{"gitId":"joel-foo"},"content":"            sb.append(\".\");","lastModifiedDate":"2023-08-25"},{"lineNumber":122,"author":{"gitId":"joel-foo"},"content":"            sb.append(tasks.get(i).toString());","lastModifiedDate":"2023-08-25"},{"lineNumber":123,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":124,"author":{"gitId":"joel-foo"},"content":"        return sb.toString();","lastModifiedDate":"2023-08-25"},{"lineNumber":125,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":126,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":127,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":128,"author":{"gitId":"joel-foo"},"content":"     * Returns a string representation of TaskList for general display to the user.","lastModifiedDate":"2023-08-25"},{"lineNumber":129,"author":{"gitId":"joel-foo"},"content":"     * @return a string representation of TaskList.","lastModifiedDate":"2023-08-25"},{"lineNumber":130,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":131,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":132,"author":{"gitId":"joel-foo"},"content":"    public String toString() {","lastModifiedDate":"2023-08-25"},{"lineNumber":133,"author":{"gitId":"joel-foo"},"content":"        return \"Here are the tasks in your list:\" + enumerateTasks();","lastModifiedDate":"2023-08-25"},{"lineNumber":134,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":135,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":136,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":137,"author":{"gitId":"joel-foo"},"content":"     * Returns a string representation of TaskList for displaying matched tasks.","lastModifiedDate":"2023-08-25"},{"lineNumber":138,"author":{"gitId":"joel-foo"},"content":"     * @return a string representation of TaskList.","lastModifiedDate":"2023-08-25"},{"lineNumber":139,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":140,"author":{"gitId":"joel-foo"},"content":"    public String toStringMatching() {","lastModifiedDate":"2023-08-25"},{"lineNumber":141,"author":{"gitId":"joel-foo"},"content":"        return \"Here are the matching tasks in your list:\" + enumerateTasks();","lastModifiedDate":"2023-08-25"},{"lineNumber":142,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":143,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":144,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":145,"author":{"gitId":"joel-foo"},"content":"     * Returns a string representation of TaskList for storage.","lastModifiedDate":"2023-08-25"},{"lineNumber":146,"author":{"gitId":"joel-foo"},"content":"     * @return a string representation of TaskList.","lastModifiedDate":"2023-08-25"},{"lineNumber":147,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":148,"author":{"gitId":"joel-foo"},"content":"    public String toStringStorage() {","lastModifiedDate":"2023-08-25"},{"lineNumber":149,"author":{"gitId":"joel-foo"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-08-25"},{"lineNumber":150,"author":{"gitId":"joel-foo"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-08-25"},{"lineNumber":151,"author":{"gitId":"joel-foo"},"content":"            sb.append(task.toStringStorage());","lastModifiedDate":"2023-08-25"},{"lineNumber":152,"author":{"gitId":"joel-foo"},"content":"            sb.append(\"\\n\");","lastModifiedDate":"2023-08-25"},{"lineNumber":153,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":154,"author":{"gitId":"joel-foo"},"content":"        return sb.toString();","lastModifiedDate":"2023-08-25"},{"lineNumber":155,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":156,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":156}},{"path":"src/main/java/minion/data/exception/IllegalValueException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.data.exception;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":" * Illegal value exception for invalid arguments.","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"public class IllegalValueException extends MinionException {","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"     * Constructs an IllegalValueException.","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"     * @param s error message.","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"    public IllegalValueException(String s) {","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"        super(s);","lastModifiedDate":"2023-08-20"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":14}},{"path":"src/main/java/minion/data/exception/MinionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.data.exception;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":" * A general exception for the Minion chatbot. It is a superclass of IllegalValueException and ParserException.","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"public class MinionException extends Exception {","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"     * Constructs a MinionException.","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"     * @param s error message.","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"    public MinionException(String s) {","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"        super(s);","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":14}},{"path":"src/main/java/minion/data/exception/ParserException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.data.exception;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":" * Parser exception.","lastModifiedDate":"2023-08-20"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"public class ParserException extends MinionException {","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"     * Constructs a ParserException.","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"     * @param s error message.","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"    public ParserException(String s) {","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"        super(s);","lastModifiedDate":"2023-08-20"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":14}},{"path":"src/main/java/minion/data/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.data.task;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":" * Represents a deadline task.","lastModifiedDate":"2023-08-20"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"    protected String datetime;","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"     * Creates a deadline object. This is the main constructor of the minion.data.task.Deadline class.","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"     * @param description Description of deadline.","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"     * @param isDone Whether the deadline is done.","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"     * @param datetime Datetime of deadline.","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"    public Deadline(String description, boolean isDone, String datetime) {","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"        super(description, isDone);","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"        this.datetime \u003d datetime;","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"     * Creates a deadline object. This calls the main constructor when the default for isDone is false.","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"     * @param description Description of deadline.","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"     * @param datetime Datetime of deadline.","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"    public Deadline(String description, String datetime) {","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"        this(description, false, datetime);","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"     * Returns whether the deadline contains the query.","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"     * @param query the query.","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"     * @return whether the deadline contains the query.","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"    public boolean contains(String query) {","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"        return this.description.contains(query) || this.datetime.contains(query);","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"     * Returns the string representation of the deadline task.","lastModifiedDate":"2023-08-20"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"     * @return string representation of the deadline task.","lastModifiedDate":"2023-08-20"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.datetime+ \")\";","lastModifiedDate":"2023-08-24"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"     * Returns a string representation of the deadline to be used in storage.","lastModifiedDate":"2023-08-24"},{"lineNumber":50,"author":{"gitId":"joel-foo"},"content":"     * @return string representation of the deadline for storage.","lastModifiedDate":"2023-08-24"},{"lineNumber":51,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":52,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"joel-foo"},"content":"    public String toStringStorage() {","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"joel-foo"},"content":"        return \"D | \" + (isDone ? \"1\" : \"0\") + \" | \" + description + \" | \" + this.datetime;","lastModifiedDate":"2023-08-24"},{"lineNumber":55,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":57,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"joel-foo"},"content":"     * Checks whether this object equals the other object.","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"joel-foo"},"content":"     * @param o other object.","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"joel-foo"},"content":"     * @return whether this object equals the other object.","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":63,"author":{"gitId":"joel-foo"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-08-25"},{"lineNumber":64,"author":{"gitId":"joel-foo"},"content":"        if (o \u003d\u003d null || !(o instanceof Deadline)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"joel-foo"},"content":"            return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"joel-foo"},"content":"        Deadline t \u003d (Deadline) o;","lastModifiedDate":"2023-08-25"},{"lineNumber":68,"author":{"gitId":"joel-foo"},"content":"        return this.description.equals(t.description) \u0026\u0026 this.isDone \u003d\u003d t.isDone \u0026\u0026 this.datetime.equals(t.datetime);","lastModifiedDate":"2023-08-25"},{"lineNumber":69,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":70,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":70}},{"path":"src/main/java/minion/data/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.data.task;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":" * Represents an minion.data.task.Event, a task that start at a specific date/time and ends at a specific date/time.","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"    protected String start;","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"    protected String end;","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"     * Creates an event object. This is the main constructor of the minion.data.task.Event class.","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"     * @param description Description of the event.","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"     * @param isDone Whether the event has been done.","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"     * @param start Start date/time of event.","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"     * @param end End date/time of event.","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"    public Event(String description, boolean isDone, String start, String end) {","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"        super(description, isDone);","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-08-20"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-08-20"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"     * Creates an event object. This calls the main constructor when the default for isDone is false.","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"     * @param description Description of the event.","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"     * @param start Start date/time of event.","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"     * @param end End date/time of event.","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"    public Event(String description, String start, String end) {","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"        this(description, false, start, end);","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"     * Returns whether the event contains the query.","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"     * @param query the query.","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"     * @return whether the event contains the query.","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"    public boolean contains(String query) {","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"        return this.description.contains(query) || this.start.contains(query) || this.end.contains(query);","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"     * Returns the string representation of the event.","lastModifiedDate":"2023-08-20"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"     * @return string representation of the event.","lastModifiedDate":"2023-08-20"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + start + \" to: \" + end + \")\";","lastModifiedDate":"2023-08-20"},{"lineNumber":50,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":51,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":52,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"joel-foo"},"content":"     * Returns a string representation of the event to be used in storage.","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"joel-foo"},"content":"     * @return string representation of the event for storage.","lastModifiedDate":"2023-08-24"},{"lineNumber":55,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":57,"author":{"gitId":"joel-foo"},"content":"    public String toStringStorage() {","lastModifiedDate":"2023-08-24"},{"lineNumber":58,"author":{"gitId":"joel-foo"},"content":"        return \"E | \" + (isDone ? \"1\" : \"0\") + \" | \" + description + \" | \" + start + \" - \" + end;","lastModifiedDate":"2023-08-24"},{"lineNumber":59,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":60,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":61,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"joel-foo"},"content":"     * Checks whether this object equals the other object.","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"joel-foo"},"content":"     * @param o other object.","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"joel-foo"},"content":"     * @return whether this object equals the other object.","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":67,"author":{"gitId":"joel-foo"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-08-25"},{"lineNumber":68,"author":{"gitId":"joel-foo"},"content":"        if (o \u003d\u003d null || !(o instanceof Event)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"joel-foo"},"content":"            return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"joel-foo"},"content":"        Event t \u003d (Event) o;","lastModifiedDate":"2023-08-25"},{"lineNumber":72,"author":{"gitId":"joel-foo"},"content":"        return this.description.equals(t.description) \u0026\u0026 this.isDone \u003d\u003d t.isDone \u0026\u0026 this.start.equals(t.start) \u0026\u0026 this.end.equals(t.end);","lastModifiedDate":"2023-08-25"},{"lineNumber":73,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":74,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":74}},{"path":"src/main/java/minion/data/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.data.task;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":" * Represents a task created by the user.","lastModifiedDate":"2023-08-20"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"    protected String description;","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"     * Creates a task object.","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"     * @param description Description of task.","lastModifiedDate":"2023-08-20"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-20"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"     * Returns the status icon depending on whether the task is done.","lastModifiedDate":"2023-08-20"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"     * @return the status icon.","lastModifiedDate":"2023-08-20"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"    protected String getStatusIcon() {","lastModifiedDate":"2023-08-20"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"        return isDone ? \"X\": \"\";","lastModifiedDate":"2023-08-20"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-08-20"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"    public void markDone() {","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-20"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"     * Marks the task as undone.","lastModifiedDate":"2023-08-20"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"    public void markUndone() {","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-20"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"     * Returns whether the task contains the query.","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"     * @param query the query.","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"     * @return whether the task contains the query.","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"    public abstract boolean contains(String query);","lastModifiedDate":"2023-08-25"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"     * Returns the string representation of the task for output to user.","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"joel-foo"},"content":"     * @return string representation of the task for output to user.","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":52,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":53,"author":{"gitId":"joel-foo"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":54,"author":{"gitId":"joel-foo"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-08-20"},{"lineNumber":55,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":56,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":57,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"joel-foo"},"content":"     * Returns the string representation of the task for storage purposes.","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"joel-foo"},"content":"     * @return string representation of the task for storage purposes.","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"joel-foo"},"content":"    public abstract String toStringStorage();","lastModifiedDate":"2023-08-24"},{"lineNumber":62,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":62}},{"path":"src/main/java/minion/data/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.data.task;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":" * Represents a minion.data.task.ToDo task.","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"     * Creates a minion.data.task.ToDo object. This is the main constructor of the minion.data.task.ToDo task.","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"     * @param description Description of Todo.","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"     * @param isDone Whether minion.data.task.ToDo is done.","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"    public ToDo(String description, boolean isDone) {","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"        super(description, isDone);","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"     * Creates a minion.data.task.ToDo object. This calls the main constructor when the default for isDone is false.","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"     * @param description Description of minion.data.task.ToDo.","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"        this(description, false);","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"     * Returns whether the ToDo contains the query.","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"     * @param query the query.","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"     * @return whether the ToDo contains the query.","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"    public boolean contains(String query) {","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"        return this.description.contains(query);","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"     * Returns the string representation of the minion.data.task.ToDo task.","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"     * @return string representation of the minion.data.task.ToDo task.","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"    public String toString() {","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"     * Returns a string representation of minion.data.task.ToDo to be used in storage.","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"     * @return string representation of minion.data.task.ToDo for storage.","lastModifiedDate":"2023-08-25"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"    public String toStringStorage() {","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"joel-foo"},"content":"        return \"T | \" + (isDone ? \"1\" : \"0\") + \" | \" + description;","lastModifiedDate":"2023-08-25"},{"lineNumber":51,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":52,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":53,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"joel-foo"},"content":"     * Checks whether this object equals the other object.","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"joel-foo"},"content":"     * @param o other object.","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"joel-foo"},"content":"     * @return whether this object equals the other object.","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":59,"author":{"gitId":"joel-foo"},"content":"    public boolean equals(Object o) {","lastModifiedDate":"2023-08-25"},{"lineNumber":60,"author":{"gitId":"joel-foo"},"content":"        if (o \u003d\u003d null || !(o instanceof ToDo)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"joel-foo"},"content":"            return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"joel-foo"},"content":"        ToDo t \u003d (ToDo) o;","lastModifiedDate":"2023-08-25"},{"lineNumber":64,"author":{"gitId":"joel-foo"},"content":"        return this.description.equals(t.description) \u0026\u0026 this.isDone \u003d\u003d t.isDone;","lastModifiedDate":"2023-08-25"},{"lineNumber":65,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":66,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":66}},{"path":"src/main/java/minion/parser/CommandParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.parser;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"import minion.commands.*;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"import minion.data.exception.MinionException;","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"import minion.data.exception.ParserException;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"import minion.common.Messages;","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"import minion.data.task.Deadline;","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"import minion.data.task.Event;","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"import minion.data.task.ToDo;","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":" * Represents a command parser.","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"public class CommandParser {","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"     * Parses a task from the command. Throws an exception if unable to parse or invalid argument(s) provided.","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"     * @param command command given.","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"     * @return the task parsed.","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"     * @throws MinionException if unable to parse or invalid argument(s) provided.","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"    public static Command parse(String command) throws MinionException {","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"        command \u003d command.trim();","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"        if (command.isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(Messages.MESSAGE_MISSING_COMMAND);","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"        String[] arr \u003d command.split(\" \", 2);","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"        String commandWord \u003d arr[0];","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"        switch (commandWord) {","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"        case ExitCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"        case ListCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"            return new ListCommand();","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"        case FindCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"            return prepareFind(arr);","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"        case MarkCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"            return prepareMark(arr);","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"        case UnmarkCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-25"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"            return prepareUnmark(arr);","lastModifiedDate":"2023-08-25"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"        case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"joel-foo"},"content":"            return prepareDelete(arr);","lastModifiedDate":"2023-08-25"},{"lineNumber":51,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":52,"author":{"gitId":"joel-foo"},"content":"        case ToDoCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-25"},{"lineNumber":53,"author":{"gitId":"joel-foo"},"content":"            return prepareToDo(arr);","lastModifiedDate":"2023-08-25"},{"lineNumber":54,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":55,"author":{"gitId":"joel-foo"},"content":"        case DeadlineCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-25"},{"lineNumber":56,"author":{"gitId":"joel-foo"},"content":"            return prepareDeadline(arr);","lastModifiedDate":"2023-08-25"},{"lineNumber":57,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":58,"author":{"gitId":"joel-foo"},"content":"        case EventCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-25"},{"lineNumber":59,"author":{"gitId":"joel-foo"},"content":"            return prepareEvent(arr);","lastModifiedDate":"2023-08-25"},{"lineNumber":60,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":61,"author":{"gitId":"joel-foo"},"content":"        default:","lastModifiedDate":"2023-08-25"},{"lineNumber":62,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(Messages.MESSAGE_NO_UNDERSTAND);","lastModifiedDate":"2023-08-25"},{"lineNumber":63,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":64,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":65,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":66,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":67,"author":{"gitId":"joel-foo"},"content":"     * Parses task index from an array of strings.","lastModifiedDate":"2023-08-25"},{"lineNumber":68,"author":{"gitId":"joel-foo"},"content":"     * @param arr Array of string parts.","lastModifiedDate":"2023-08-25"},{"lineNumber":69,"author":{"gitId":"joel-foo"},"content":"     * @return task index parsed.","lastModifiedDate":"2023-08-25"},{"lineNumber":70,"author":{"gitId":"joel-foo"},"content":"     * @throws ParserException if unable to parse task index.","lastModifiedDate":"2023-08-25"},{"lineNumber":71,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":72,"author":{"gitId":"joel-foo"},"content":"    private static int parseTaskIdx(String commandWord, String[] arr) throws ParserException {","lastModifiedDate":"2023-08-25"},{"lineNumber":73,"author":{"gitId":"joel-foo"},"content":"        if (arr.length \u003c 2 || arr[1].isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":74,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(commandWord + \" needs to have an argument. Try again.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":75,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":76,"author":{"gitId":"joel-foo"},"content":"        if (!arr[1].trim().matches(\"[0-9]+\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":77,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(commandWord + \" only accepts digits as its argument. Try again.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":78,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":79,"author":{"gitId":"joel-foo"},"content":"       return Integer.parseInt(arr[1].trim()) - 1;","lastModifiedDate":"2023-08-25"},{"lineNumber":80,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":81,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":82,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":83,"author":{"gitId":"joel-foo"},"content":"     * Parses arguments in the context of the mark command.","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"joel-foo"},"content":"     * @param arr Array of string parts.","lastModifiedDate":"2023-08-25"},{"lineNumber":85,"author":{"gitId":"joel-foo"},"content":"     * @return Mark command.","lastModifiedDate":"2023-08-25"},{"lineNumber":86,"author":{"gitId":"joel-foo"},"content":"     * @throws ParserException if unable to parse task index.","lastModifiedDate":"2023-08-25"},{"lineNumber":87,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":88,"author":{"gitId":"joel-foo"},"content":"    private static Command prepareMark(String[] arr) throws ParserException {","lastModifiedDate":"2023-08-25"},{"lineNumber":89,"author":{"gitId":"joel-foo"},"content":"        int taskIdx \u003d parseTaskIdx(MarkCommand.COMMAND_WORD, arr);","lastModifiedDate":"2023-08-25"},{"lineNumber":90,"author":{"gitId":"joel-foo"},"content":"        return new MarkCommand(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":91,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":92,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":93,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":94,"author":{"gitId":"joel-foo"},"content":"     * Parses arguments in the context of the unmark command.","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"joel-foo"},"content":"     * @param arr Array of string parts.","lastModifiedDate":"2023-08-25"},{"lineNumber":96,"author":{"gitId":"joel-foo"},"content":"     * @return Unmark command.","lastModifiedDate":"2023-08-25"},{"lineNumber":97,"author":{"gitId":"joel-foo"},"content":"     * @throws ParserException if unable to parse task index.","lastModifiedDate":"2023-08-25"},{"lineNumber":98,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":99,"author":{"gitId":"joel-foo"},"content":"    private static Command prepareUnmark(String[] arr) throws ParserException {","lastModifiedDate":"2023-08-25"},{"lineNumber":100,"author":{"gitId":"joel-foo"},"content":"        int taskIdx \u003d parseTaskIdx(UnmarkCommand.COMMAND_WORD, arr);","lastModifiedDate":"2023-08-25"},{"lineNumber":101,"author":{"gitId":"joel-foo"},"content":"        return new UnmarkCommand(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":102,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":103,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":104,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":105,"author":{"gitId":"joel-foo"},"content":"     * Parses arguments in the context of the delete command.","lastModifiedDate":"2023-08-31"},{"lineNumber":106,"author":{"gitId":"joel-foo"},"content":"     * @param arr Array of string parts.","lastModifiedDate":"2023-08-25"},{"lineNumber":107,"author":{"gitId":"joel-foo"},"content":"     * @return Delete command.","lastModifiedDate":"2023-08-25"},{"lineNumber":108,"author":{"gitId":"joel-foo"},"content":"     * @throws ParserException if unable to parse task index.","lastModifiedDate":"2023-08-25"},{"lineNumber":109,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":110,"author":{"gitId":"joel-foo"},"content":"    private static Command prepareDelete(String[] arr) throws ParserException {","lastModifiedDate":"2023-08-25"},{"lineNumber":111,"author":{"gitId":"joel-foo"},"content":"        int taskIdx \u003d parseTaskIdx(DeleteCommand.COMMAND_WORD, arr);","lastModifiedDate":"2023-08-25"},{"lineNumber":112,"author":{"gitId":"joel-foo"},"content":"        return new DeleteCommand(taskIdx);","lastModifiedDate":"2023-08-25"},{"lineNumber":113,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":114,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":115,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":116,"author":{"gitId":"joel-foo"},"content":"     * Parses arguments in the context of the ToDo command.","lastModifiedDate":"2023-08-31"},{"lineNumber":117,"author":{"gitId":"joel-foo"},"content":"     * @param arr Array of string parts.","lastModifiedDate":"2023-08-25"},{"lineNumber":118,"author":{"gitId":"joel-foo"},"content":"     * @return ToDo command.","lastModifiedDate":"2023-08-25"},{"lineNumber":119,"author":{"gitId":"joel-foo"},"content":"     * @throws ParserException if unable to parse the command.","lastModifiedDate":"2023-08-25"},{"lineNumber":120,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":121,"author":{"gitId":"joel-foo"},"content":"    private static Command prepareToDo(String[] arr) throws ParserException {","lastModifiedDate":"2023-08-25"},{"lineNumber":122,"author":{"gitId":"joel-foo"},"content":"        if (arr.length \u003c 2 || arr[1].isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":123,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(Messages.MESSAGE_TODO_DESCRIPTION_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":124,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":125,"author":{"gitId":"joel-foo"},"content":"        return new ToDoCommand(new ToDo(arr[1].trim()));","lastModifiedDate":"2023-08-25"},{"lineNumber":126,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"},{"lineNumber":127,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":128,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":129,"author":{"gitId":"joel-foo"},"content":"     * Parses arguments in the context of the Deadline command.","lastModifiedDate":"2023-08-31"},{"lineNumber":130,"author":{"gitId":"joel-foo"},"content":"     * @param arr Array of string parts.","lastModifiedDate":"2023-08-25"},{"lineNumber":131,"author":{"gitId":"joel-foo"},"content":"     * @return Deadline command.","lastModifiedDate":"2023-08-25"},{"lineNumber":132,"author":{"gitId":"joel-foo"},"content":"     * @throws ParserException if unable to parse the command.","lastModifiedDate":"2023-08-25"},{"lineNumber":133,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":134,"author":{"gitId":"joel-foo"},"content":"    private static Command prepareDeadline(String[] arr) throws MinionException {","lastModifiedDate":"2023-08-25"},{"lineNumber":135,"author":{"gitId":"joel-foo"},"content":"        // nothing after deadline","lastModifiedDate":"2023-08-25"},{"lineNumber":136,"author":{"gitId":"joel-foo"},"content":"        // or, something after deadline - but it\u0027s just empty space(s)","lastModifiedDate":"2023-08-25"},{"lineNumber":137,"author":{"gitId":"joel-foo"},"content":"        // empty -\u003e no description; non-empty -\u003e still need to check if description is missing.","lastModifiedDate":"2023-08-25"},{"lineNumber":138,"author":{"gitId":"joel-foo"},"content":"        if (arr.length \u003c 2 || arr[1].isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":139,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(Messages.MESSAGE_DEADLINE_DESCRIPTION_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":140,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":141,"author":{"gitId":"joel-foo"},"content":"        String[] strs \u003d arr[1].split(\"/by\");","lastModifiedDate":"2023-08-25"},{"lineNumber":142,"author":{"gitId":"joel-foo"},"content":"        String description;","lastModifiedDate":"2023-08-25"},{"lineNumber":143,"author":{"gitId":"joel-foo"},"content":"        switch (strs.length) {","lastModifiedDate":"2023-08-25"},{"lineNumber":144,"author":{"gitId":"joel-foo"},"content":"        // nothing to left and right","lastModifiedDate":"2023-08-25"},{"lineNumber":145,"author":{"gitId":"joel-foo"},"content":"        case 0:","lastModifiedDate":"2023-08-25"},{"lineNumber":146,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(Messages.MESSAGE_DEADLINE_DESCRIPTION_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":147,"author":{"gitId":"joel-foo"},"content":"        //something to left, nothing to the right","lastModifiedDate":"2023-08-25"},{"lineNumber":148,"author":{"gitId":"joel-foo"},"content":"        case 1:","lastModifiedDate":"2023-08-25"},{"lineNumber":149,"author":{"gitId":"joel-foo"},"content":"            description \u003d strs[0].trim();","lastModifiedDate":"2023-08-25"},{"lineNumber":150,"author":{"gitId":"joel-foo"},"content":"            if (description.isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":151,"author":{"gitId":"joel-foo"},"content":"                throw new ParserException(Messages.MESSAGE_DEADLINE_DESCRIPTION_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":152,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":153,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(Messages.MESSAGE_DEADLINE_BY_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":154,"author":{"gitId":"joel-foo"},"content":"        case 2:","lastModifiedDate":"2023-08-25"},{"lineNumber":155,"author":{"gitId":"joel-foo"},"content":"            description \u003d strs[0].trim();","lastModifiedDate":"2023-08-25"},{"lineNumber":156,"author":{"gitId":"joel-foo"},"content":"            String by \u003d strs[1].trim();","lastModifiedDate":"2023-08-25"},{"lineNumber":157,"author":{"gitId":"joel-foo"},"content":"            if (description.isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":158,"author":{"gitId":"joel-foo"},"content":"                throw new ParserException(Messages.MESSAGE_DEADLINE_DESCRIPTION_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":159,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":160,"author":{"gitId":"joel-foo"},"content":"            if (by.isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":161,"author":{"gitId":"joel-foo"},"content":"                throw new ParserException(Messages.MESSAGE_DEADLINE_BY_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":162,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":163,"author":{"gitId":"joel-foo"},"content":"            String datetime \u003d DatetimeParser.parseDatetime(by.split(\" \"));","lastModifiedDate":"2023-08-25"},{"lineNumber":164,"author":{"gitId":"joel-foo"},"content":"            return new DeadlineCommand(new Deadline(description, datetime));","lastModifiedDate":"2023-08-25"},{"lineNumber":165,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":166,"author":{"gitId":"joel-foo"},"content":"        return null;","lastModifiedDate":"2023-08-25"},{"lineNumber":167,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":168,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":169,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":170,"author":{"gitId":"joel-foo"},"content":"     * Parses arguments in the context of the Event command.","lastModifiedDate":"2023-08-31"},{"lineNumber":171,"author":{"gitId":"joel-foo"},"content":"     * @param arr Array of string parts.","lastModifiedDate":"2023-08-25"},{"lineNumber":172,"author":{"gitId":"joel-foo"},"content":"     * @return Event command.","lastModifiedDate":"2023-08-25"},{"lineNumber":173,"author":{"gitId":"joel-foo"},"content":"     * @throws MinionException if unable to parse the command.","lastModifiedDate":"2023-08-25"},{"lineNumber":174,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":175,"author":{"gitId":"joel-foo"},"content":"    private static Command prepareEvent(String[] arr) throws MinionException {","lastModifiedDate":"2023-08-25"},{"lineNumber":176,"author":{"gitId":"joel-foo"},"content":"        if (arr.length \u003c 2 || arr[1].isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":177,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(Messages.MESSAGE_EVENT_DESCRIPTION_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":178,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":179,"author":{"gitId":"joel-foo"},"content":"        String[] strs \u003d arr[1].split(\"/from\");","lastModifiedDate":"2023-08-25"},{"lineNumber":180,"author":{"gitId":"joel-foo"},"content":"        String description \u003d null;","lastModifiedDate":"2023-08-25"},{"lineNumber":181,"author":{"gitId":"joel-foo"},"content":"        switch (strs.length) {","lastModifiedDate":"2023-08-25"},{"lineNumber":182,"author":{"gitId":"joel-foo"},"content":"        // nothing to left and right","lastModifiedDate":"2023-08-25"},{"lineNumber":183,"author":{"gitId":"joel-foo"},"content":"        case 0:","lastModifiedDate":"2023-08-25"},{"lineNumber":184,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(Messages.MESSAGE_EVENT_DESCRIPTION_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":185,"author":{"gitId":"joel-foo"},"content":"        case 1:","lastModifiedDate":"2023-08-25"},{"lineNumber":186,"author":{"gitId":"joel-foo"},"content":"            description \u003d strs[0].trim();","lastModifiedDate":"2023-08-25"},{"lineNumber":187,"author":{"gitId":"joel-foo"},"content":"            if (description.isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":188,"author":{"gitId":"joel-foo"},"content":"                throw new ParserException(Messages.MESSAGE_EVENT_DESCRIPTION_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":189,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":190,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(Messages.MESSAGE_EVENT_FROM_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":191,"author":{"gitId":"joel-foo"},"content":"        case 2:","lastModifiedDate":"2023-08-25"},{"lineNumber":192,"author":{"gitId":"joel-foo"},"content":"            description \u003d strs[0].trim();","lastModifiedDate":"2023-08-25"},{"lineNumber":193,"author":{"gitId":"joel-foo"},"content":"            String dates \u003d strs[1].trim();","lastModifiedDate":"2023-08-25"},{"lineNumber":194,"author":{"gitId":"joel-foo"},"content":"            if (description.isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":195,"author":{"gitId":"joel-foo"},"content":"                throw new ParserException(Messages.MESSAGE_EVENT_DESCRIPTION_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":196,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":197,"author":{"gitId":"joel-foo"},"content":"            if (dates.isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":198,"author":{"gitId":"joel-foo"},"content":"                throw new ParserException(Messages.MESSAGE_EVENT_FROM_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":199,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":200,"author":{"gitId":"joel-foo"},"content":"            strs \u003d strs[1].split(\"/to\");","lastModifiedDate":"2023-08-25"},{"lineNumber":201,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":202,"author":{"gitId":"joel-foo"},"content":"        String from;","lastModifiedDate":"2023-08-25"},{"lineNumber":203,"author":{"gitId":"joel-foo"},"content":"        String to;","lastModifiedDate":"2023-08-25"},{"lineNumber":204,"author":{"gitId":"joel-foo"},"content":"        switch (strs.length) {","lastModifiedDate":"2023-08-25"},{"lineNumber":205,"author":{"gitId":"joel-foo"},"content":"        // nothing to left and right","lastModifiedDate":"2023-08-25"},{"lineNumber":206,"author":{"gitId":"joel-foo"},"content":"        case 0:","lastModifiedDate":"2023-08-25"},{"lineNumber":207,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(Messages.MESSAGE_EVENT_FROM_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":208,"author":{"gitId":"joel-foo"},"content":"        case 1:","lastModifiedDate":"2023-08-25"},{"lineNumber":209,"author":{"gitId":"joel-foo"},"content":"            from \u003d strs[0].trim();","lastModifiedDate":"2023-08-25"},{"lineNumber":210,"author":{"gitId":"joel-foo"},"content":"            if (from.isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":211,"author":{"gitId":"joel-foo"},"content":"                throw new ParserException(Messages.MESSAGE_EVENT_FROM_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":212,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":213,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(Messages.MESSAGE_EVENT_TO_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":214,"author":{"gitId":"joel-foo"},"content":"        case 2:","lastModifiedDate":"2023-08-25"},{"lineNumber":215,"author":{"gitId":"joel-foo"},"content":"            from \u003d strs[0].trim();","lastModifiedDate":"2023-08-25"},{"lineNumber":216,"author":{"gitId":"joel-foo"},"content":"            to \u003d strs[1].trim();","lastModifiedDate":"2023-08-25"},{"lineNumber":217,"author":{"gitId":"joel-foo"},"content":"            if (from.isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":218,"author":{"gitId":"joel-foo"},"content":"                throw new ParserException(Messages.MESSAGE_EVENT_FROM_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":219,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":220,"author":{"gitId":"joel-foo"},"content":"            if (to.isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":221,"author":{"gitId":"joel-foo"},"content":"                throw new ParserException(Messages.MESSAGE_EVENT_TO_ERROR);","lastModifiedDate":"2023-08-25"},{"lineNumber":222,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":223,"author":{"gitId":"joel-foo"},"content":"            String fromDatetime \u003d DatetimeParser.parseDatetime(from.split(\" \"));","lastModifiedDate":"2023-08-25"},{"lineNumber":224,"author":{"gitId":"joel-foo"},"content":"            String toDatetime \u003d DatetimeParser.parseDatetime(to.split(\" \"));","lastModifiedDate":"2023-08-25"},{"lineNumber":225,"author":{"gitId":"joel-foo"},"content":"            return new EventCommand(new Event(description, fromDatetime, toDatetime));","lastModifiedDate":"2023-08-25"},{"lineNumber":226,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":227,"author":{"gitId":"joel-foo"},"content":"        return null;","lastModifiedDate":"2023-08-25"},{"lineNumber":228,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":229,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":230,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":231,"author":{"gitId":"joel-foo"},"content":"     * Parses arguments in the context of the find command.","lastModifiedDate":"2023-08-31"},{"lineNumber":232,"author":{"gitId":"joel-foo"},"content":"     * @param arr Array of strings.","lastModifiedDate":"2023-08-25"},{"lineNumber":233,"author":{"gitId":"joel-foo"},"content":"     * @return Find command.","lastModifiedDate":"2023-08-25"},{"lineNumber":234,"author":{"gitId":"joel-foo"},"content":"     * @throws ParserException when unable to parse the command.","lastModifiedDate":"2023-08-25"},{"lineNumber":235,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":236,"author":{"gitId":"joel-foo"},"content":"    private static Command prepareFind(String[] arr) throws ParserException {","lastModifiedDate":"2023-08-25"},{"lineNumber":237,"author":{"gitId":"joel-foo"},"content":"        if (arr.length \u003c 2 || arr[1].isEmpty()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":238,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(\"Find needs to have an argument. Try again.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":239,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":240,"author":{"gitId":"joel-foo"},"content":"        return new FindCommand(arr[1].trim());","lastModifiedDate":"2023-08-25"},{"lineNumber":241,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":242,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":242}},{"path":"src/main/java/minion/parser/DatetimeParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.parser;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"import minion.common.Messages;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"import minion.data.exception.IllegalValueException;","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":" * Represents a datetime parser.","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"public class DatetimeParser {","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"     * Formats the given date.","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"     * @param s Date to be formatted.","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"     * @return parsed date in MMM d yyy format.","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"     * @throws DateTimeParseException when unable to parse date.","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"    private static String formatDate(String s) throws DateTimeParseException {","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"        return LocalDate.parse(s, DateTimeFormatter.ofPattern(\"d/M/yyyy\")).format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"     * Formats the given time.","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"     * @param s Time to be formatted.","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"     * @return parsed time in h:mm a format","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"     * @throws DateTimeParseException when unable to parse time.","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"    private static String formatTime(String s) throws DateTimeParseException {","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"        return LocalTime.parse(s, DateTimeFormatter.ofPattern(\"HHmm\")).format(DateTimeFormatter.ofPattern(\"h:mm a\"));","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"     * Parses the given datetime.","lastModifiedDate":"2023-08-24"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"     * @param arr An array of strings of datetime.","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"     * @return parsed datetime","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"     * @throws IllegalValueException when illegal value(s) are given for date/time.","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"    public static String parseDatetime(String[] arr) throws IllegalValueException {","lastModifiedDate":"2023-08-24"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"        String datetime;","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"        try {","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"            datetime \u003d formatDate(arr[0]);","lastModifiedDate":"2023-08-24"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"            throw new IllegalValueException(Messages.MESSAGE_FAIL_PARSE_DATE);","lastModifiedDate":"2023-08-25"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"        if (arr.length \u003e 1) {","lastModifiedDate":"2023-08-24"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"            datetime +\u003d \" \";","lastModifiedDate":"2023-08-24"},{"lineNumber":50,"author":{"gitId":"joel-foo"},"content":"            try {","lastModifiedDate":"2023-08-24"},{"lineNumber":51,"author":{"gitId":"joel-foo"},"content":"                datetime +\u003d formatTime(arr[1]);","lastModifiedDate":"2023-08-24"},{"lineNumber":52,"author":{"gitId":"joel-foo"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"joel-foo"},"content":"                throw new IllegalValueException(Messages.MESSAGE_FAIL_PARSE_TIME);","lastModifiedDate":"2023-08-25"},{"lineNumber":54,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":55,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"joel-foo"},"content":"        return datetime;","lastModifiedDate":"2023-08-24"},{"lineNumber":57,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":58,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"joel-foo":58}},{"path":"src/main/java/minion/parser/FileParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.parser;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"import java.io.File;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"import java.util.List;","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"import minion.data.task.Deadline;","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"import minion.data.task.Event;","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"import minion.data.task.Task;","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"import minion.data.task.ToDo;","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":" * Represents a File parser.","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"public class FileParser {","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"    private static final String FILE_DELIMITER \u003d \" \\\\| \";","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"     * Parses a file into a list of tasks.","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"     * @param file The file to be parsed.","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"     * @return The list of tasks.","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"    public static List\u003cTask\u003e parse(File file) throws FileNotFoundException {","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"        Scanner sc \u003d new Scanner(file);","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"        List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"        while (sc.hasNext()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"            String str \u003d sc.nextLine();","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"            String[] arr \u003d str.split(FILE_DELIMITER);","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"            boolean isDone \u003d arr[1].equals(\"1\");","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"            String description \u003d arr[2];","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"            switch (arr[0]) {","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"            case \"T\":","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"                tasks.add(new ToDo(description, isDone));","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"                break;","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"            case \"D\":","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"                tasks.add(new Deadline(description, isDone, arr[3]));","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"                break;","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"            case \"E\":","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"                String[] tmp \u003d arr[3].split(\" - \");","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"                String from \u003d tmp[0];","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"                String to \u003d tmp[1];","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"                tasks.add(new Event(description, isDone, from, to));","lastModifiedDate":"2023-08-25"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"                break;","lastModifiedDate":"2023-08-25"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"joel-foo"},"content":"        sc.close();","lastModifiedDate":"2023-08-25"},{"lineNumber":51,"author":{"gitId":"joel-foo"},"content":"        return tasks;","lastModifiedDate":"2023-08-25"},{"lineNumber":52,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":53,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":53}},{"path":"src/main/java/minion/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.storage;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"import minion.common.Messages;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"import minion.data.TaskList;","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"import minion.data.task.Task;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"import minion.parser.FileParser;","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"import java.io.File;","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"import java.util.List;","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":" * Represents storage of the chatbot.","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"public class Storage {","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"    private final String filePath;","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"     * Constructs a storage object.","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"     * @param filePath Path of file.","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"     * Creates a directory and the file inside it.","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"     * @param file the file object.","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"     * @throws IOException when fail to create directory / file.","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"    private void createFile(File file) throws IOException {","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"        file.getParentFile().mkdirs();","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"        file.createNewFile();","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"     * Loads a list of tasks from the file. If the directory/file is not present, it will be created,","lastModifiedDate":"2023-08-24"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"     * before throwing an exception.","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"     * @return a list of tasks from the file.","lastModifiedDate":"2023-08-24"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"     * @throws IOException when fail to create directory / file.","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"    public List\u003cTask\u003e load() throws IOException {","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"        if (!file.exists()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"            createFile(file);","lastModifiedDate":"2023-08-24"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"            throw new FileNotFoundException(Messages.MESSAGE_FILE_NOT_FOUND);","lastModifiedDate":"2023-08-25"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":50,"author":{"gitId":"joel-foo"},"content":"        return FileParser.parse(file);","lastModifiedDate":"2023-08-25"},{"lineNumber":51,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":52,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"joel-foo"},"content":"     * Writes a list of tasks to the file.","lastModifiedDate":"2023-08-24"},{"lineNumber":55,"author":{"gitId":"joel-foo"},"content":"     * @param tasks the TaskList.","lastModifiedDate":"2023-08-25"},{"lineNumber":56,"author":{"gitId":"joel-foo"},"content":"     * @throws IOException when failed write to file.","lastModifiedDate":"2023-08-25"},{"lineNumber":57,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":58,"author":{"gitId":"joel-foo"},"content":"    public void writeToFile(TaskList tasks) throws IOException {","lastModifiedDate":"2023-08-25"},{"lineNumber":59,"author":{"gitId":"joel-foo"},"content":"        FileWriter fw \u003d new FileWriter(this.filePath);","lastModifiedDate":"2023-08-24"},{"lineNumber":60,"author":{"gitId":"joel-foo"},"content":"        fw.write(tasks.toStringStorage());","lastModifiedDate":"2023-08-25"},{"lineNumber":61,"author":{"gitId":"joel-foo"},"content":"        fw.close();","lastModifiedDate":"2023-08-24"},{"lineNumber":62,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":63,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"joel-foo":63}},{"path":"src/main/java/minion/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.ui;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"import minion.common.Messages;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":" * Represents the minion.ui.Ui of the chatbot.","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"public class Ui {","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"    private static final String DIVIDER \u003d \"\\t____________________________________________________________\\n\";","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"    private final Scanner sc;","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"     * Constructs the Ui.","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"    public Ui() {","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"        this.sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"     * Reads the command from the scanner.","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"     * @return the command.","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"    public String readCommand() {","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"        return sc.nextLine();","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"     * Pretty prints string(s).","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"     * @param args string(s) to be printed.","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"    public void print(String... args){","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"        StringBuilder sb \u003d new StringBuilder(DIVIDER);","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"        for(String arg: args) {","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"            sb.append(\"\\t\");","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"            sb.append(arg);","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"            sb.append(\"\\n\");","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"        sb.append(DIVIDER);","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"        System.out.println(sb);","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"     * Prints welcome to the user.","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"    public void showWelcome(){","lastModifiedDate":"2023-08-25"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"        this.print(Messages.MESSAGE_WELCOME);","lastModifiedDate":"2023-08-25"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":50,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":51,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":52,"author":{"gitId":"joel-foo"},"content":"     * Prints goodbye to the user.","lastModifiedDate":"2023-08-25"},{"lineNumber":53,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":54,"author":{"gitId":"joel-foo"},"content":"    public void showGoodbye(){","lastModifiedDate":"2023-08-25"},{"lineNumber":55,"author":{"gitId":"joel-foo"},"content":"        this.print(Messages.MESSAGE_GOODBYE);","lastModifiedDate":"2023-08-25"},{"lineNumber":56,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":57,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":58,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":59,"author":{"gitId":"joel-foo"},"content":"     * Displays loading error to the user.","lastModifiedDate":"2023-08-25"},{"lineNumber":60,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":61,"author":{"gitId":"joel-foo"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-08-24"},{"lineNumber":62,"author":{"gitId":"joel-foo"},"content":"        this.print(Messages.MESSAGE_FILE_NOT_FOUND);","lastModifiedDate":"2023-08-25"},{"lineNumber":63,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":64,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":65,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":66,"author":{"gitId":"joel-foo"},"content":"     * Cleanup function for the Ui.","lastModifiedDate":"2023-08-25"},{"lineNumber":67,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":68,"author":{"gitId":"joel-foo"},"content":"    public void tearDown() {","lastModifiedDate":"2023-08-25"},{"lineNumber":69,"author":{"gitId":"joel-foo"},"content":"        this.showGoodbye();","lastModifiedDate":"2023-08-25"},{"lineNumber":70,"author":{"gitId":"joel-foo"},"content":"        sc.close();","lastModifiedDate":"2023-08-25"},{"lineNumber":71,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":72,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":72}},{"path":"src/test/java/minion/parser/CommandParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.parser;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"import minion.commands.DeadlineCommand;","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"import minion.commands.EventCommand;","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"import minion.commands.MarkCommand;","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"import minion.commands.UnmarkCommand;","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"import minion.commands.DeleteCommand;","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"import minion.commands.ToDoCommand;","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"import minion.common.Messages;","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"import minion.data.exception.MinionException;","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"import minion.data.task.Deadline;","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"import minion.data.task.Event;","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"import minion.data.task.ToDo;","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"public class CommandParserTest {","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"    @Test","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"    public void parse_ToDo_success() throws MinionException {","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"        assertEquals(new ToDoCommand(new ToDo(\"buy book\")), CommandParser.parse(\"todo buy book\"));","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"    @Test","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"    public void parse_Deadline_success() throws MinionException {","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"        assertEquals(new DeadlineCommand(new Deadline(\"return book\", \"Dec 3 2023 2:00 PM\")), CommandParser.parse(\"deadline return book /by 3/12/2023 1400\"));","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"    @Test","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"    public void parse_Deadline_exceptionThrown() {","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"        // invalid date format","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"        try {","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"            assertEquals(null, CommandParser.parse(\"deadline return book /by 3 Dec 2023 1400\"));","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"            fail();","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"        } catch (MinionException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"            assertEquals(Messages.MESSAGE_FAIL_PARSE_DATE, e.getMessage());","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"    @Test","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"    public void parse_Event_success() throws MinionException {","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"        assertEquals(new EventCommand(new Event(\"pool party\", \"Dec 3 2023 2:00 PM\", \"Dec 4 2023 2:30 AM\")), CommandParser.parse(\"event pool party /from 3/12/2023 1400 /to 4/12/2023 0230\"));","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"    @Test","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"    public void parse_Mark_success() throws MinionException {","lastModifiedDate":"2023-08-25"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"        // 0 indexed","lastModifiedDate":"2023-08-25"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"        assertEquals(new MarkCommand(0), CommandParser.parse(\"mark 1\"));","lastModifiedDate":"2023-08-25"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":51,"author":{"gitId":"joel-foo"},"content":"    @Test","lastModifiedDate":"2023-08-25"},{"lineNumber":52,"author":{"gitId":"joel-foo"},"content":"    public void parse_Unmark_success() throws MinionException {","lastModifiedDate":"2023-08-25"},{"lineNumber":53,"author":{"gitId":"joel-foo"},"content":"        // 0 indexed","lastModifiedDate":"2023-08-25"},{"lineNumber":54,"author":{"gitId":"joel-foo"},"content":"        assertEquals(new UnmarkCommand(0), CommandParser.parse(\"unmark 1\"));","lastModifiedDate":"2023-08-25"},{"lineNumber":55,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":56,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":57,"author":{"gitId":"joel-foo"},"content":"    @Test","lastModifiedDate":"2023-08-25"},{"lineNumber":58,"author":{"gitId":"joel-foo"},"content":"    public void parse_Delete_success() throws MinionException {","lastModifiedDate":"2023-08-25"},{"lineNumber":59,"author":{"gitId":"joel-foo"},"content":"        // 0 indexed","lastModifiedDate":"2023-08-25"},{"lineNumber":60,"author":{"gitId":"joel-foo"},"content":"        assertEquals(new DeleteCommand(0), CommandParser.parse(\"delete 1\"));","lastModifiedDate":"2023-08-25"},{"lineNumber":61,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":62,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":63,"author":{"gitId":"joel-foo"},"content":"    @Test","lastModifiedDate":"2023-08-25"},{"lineNumber":64,"author":{"gitId":"joel-foo"},"content":"    public void parse_emptyCommand_exceptionThrown() {","lastModifiedDate":"2023-08-25"},{"lineNumber":65,"author":{"gitId":"joel-foo"},"content":"        // empty string as command","lastModifiedDate":"2023-08-25"},{"lineNumber":66,"author":{"gitId":"joel-foo"},"content":"        try {","lastModifiedDate":"2023-08-25"},{"lineNumber":67,"author":{"gitId":"joel-foo"},"content":"            assertEquals(null, CommandParser.parse(\" \"));","lastModifiedDate":"2023-08-25"},{"lineNumber":68,"author":{"gitId":"joel-foo"},"content":"            fail();","lastModifiedDate":"2023-08-25"},{"lineNumber":69,"author":{"gitId":"joel-foo"},"content":"        } catch (MinionException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":70,"author":{"gitId":"joel-foo"},"content":"            assertEquals(Messages.MESSAGE_MISSING_COMMAND, e.getMessage());","lastModifiedDate":"2023-08-25"},{"lineNumber":71,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":72,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":73,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":74,"author":{"gitId":"joel-foo"},"content":"    @Test","lastModifiedDate":"2023-08-25"},{"lineNumber":75,"author":{"gitId":"joel-foo"},"content":"    public void parse_invalidCommand_exceptionThrown() {","lastModifiedDate":"2023-08-25"},{"lineNumber":76,"author":{"gitId":"joel-foo"},"content":"        // invalid command word","lastModifiedDate":"2023-08-25"},{"lineNumber":77,"author":{"gitId":"joel-foo"},"content":"        try {","lastModifiedDate":"2023-08-25"},{"lineNumber":78,"author":{"gitId":"joel-foo"},"content":"            assertEquals(null, CommandParser.parse(\"hello\"));","lastModifiedDate":"2023-08-25"},{"lineNumber":79,"author":{"gitId":"joel-foo"},"content":"            fail();","lastModifiedDate":"2023-08-25"},{"lineNumber":80,"author":{"gitId":"joel-foo"},"content":"        } catch (MinionException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":81,"author":{"gitId":"joel-foo"},"content":"            assertEquals(Messages.MESSAGE_NO_UNDERSTAND, e.getMessage());","lastModifiedDate":"2023-08-25"},{"lineNumber":82,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":83,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":84,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":84}},{"path":"src/test/java/minion/storage/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"package minion.storage;","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"import java.io.File;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"import org.junit.jupiter.api.AfterAll;","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"import minion.common.Messages;","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"import minion.data.TaskList;","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"import minion.data.task.Deadline;","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"import minion.data.task.Event;","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"import minion.data.task.ToDo;","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"public class StorageTest {","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"    private static final String TEST_DATADIR_VALID \u003d \"test/data.txt\";","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"    private static final String TEST_DATADIR_INVALID \u003d \"tmp/data.txt\";","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"    @BeforeEach","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"    public void setUp() throws IOException {","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"        tasks \u003d new TaskList();","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"        tasks.add(new ToDo(\"buy book\"));","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"        tasks.add(new Deadline(\"return book\", \"Dec 3 2023 2:00 PM\"));","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"        tasks.add(new Event(\"pool party\", \"Dec 3 2023 2:00 PM\", \"Dec 4 2023 2:30 AM\"));","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"        File file \u003d new File(TEST_DATADIR_VALID);","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"        file.getParentFile().mkdirs();","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"        file.createNewFile();","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"        FileWriter fw \u003d new FileWriter(TEST_DATADIR_VALID);","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"        fw.write(tasks.toStringStorage());","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"        fw.close();","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"    @Test","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"    public void load_fileFound_success() throws IOException {","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"        storage \u003d new Storage(TEST_DATADIR_VALID);","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"        assertEquals(tasks.toString(), new TaskList(storage.load()).toString());","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"    @Test","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"    public void load_fileNotFound_fail() {","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"        storage \u003d new Storage(TEST_DATADIR_INVALID);","lastModifiedDate":"2023-08-25"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"        try {","lastModifiedDate":"2023-08-25"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"            assertEquals(null, storage.load());","lastModifiedDate":"2023-08-25"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"            fail();","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"joel-foo"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":51,"author":{"gitId":"joel-foo"},"content":"            assertEquals(Messages.MESSAGE_FILE_NOT_FOUND, e.getMessage());","lastModifiedDate":"2023-08-25"},{"lineNumber":52,"author":{"gitId":"joel-foo"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":53,"author":{"gitId":"joel-foo"},"content":"            assertEquals(Messages.MESSAGE_IO_EXCEPTION, e.getMessage());","lastModifiedDate":"2023-08-25"},{"lineNumber":54,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":55,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":56,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":57,"author":{"gitId":"joel-foo"},"content":"    public static void deleteDirAndFile(String... dirs) {","lastModifiedDate":"2023-08-25"},{"lineNumber":58,"author":{"gitId":"joel-foo"},"content":"        for (String dir: dirs) {","lastModifiedDate":"2023-08-25"},{"lineNumber":59,"author":{"gitId":"joel-foo"},"content":"            File dirFile \u003d new File(dir);","lastModifiedDate":"2023-08-25"},{"lineNumber":60,"author":{"gitId":"joel-foo"},"content":"            if (!dirFile.exists()) continue;","lastModifiedDate":"2023-08-25"},{"lineNumber":61,"author":{"gitId":"joel-foo"},"content":"            File[] files \u003d dirFile.listFiles();","lastModifiedDate":"2023-08-25"},{"lineNumber":62,"author":{"gitId":"joel-foo"},"content":"            for (File file : files) {","lastModifiedDate":"2023-08-25"},{"lineNumber":63,"author":{"gitId":"joel-foo"},"content":"                file.delete();","lastModifiedDate":"2023-08-25"},{"lineNumber":64,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":65,"author":{"gitId":"joel-foo"},"content":"            dirFile.delete();","lastModifiedDate":"2023-08-25"},{"lineNumber":66,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":67,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":68,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":69,"author":{"gitId":"joel-foo"},"content":"    @AfterAll","lastModifiedDate":"2023-08-25"},{"lineNumber":70,"author":{"gitId":"joel-foo"},"content":"    public static void tearDown() {","lastModifiedDate":"2023-08-25"},{"lineNumber":71,"author":{"gitId":"joel-foo"},"content":"        deleteDirAndFile(\"test\", \"tmp\");","lastModifiedDate":"2023-08-25"},{"lineNumber":72,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":73,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"joel-foo":73}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"todo borrow book","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"mark 1","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"mark 2","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"mark 3","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"unmark 2","lastModifiedDate":"2023-08-20"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"bye","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":14}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"if ! javac -encoding ISO-8859-1 -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2023-08-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"java -classpath ../bin Minion \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"joel-foo":2,"-":36}}]
