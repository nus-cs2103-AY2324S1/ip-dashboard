[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":" * Represents a deadline task.","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"    protected String by;","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"     * Creates a deadline object.","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"     * @param description Description of task.","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"     * @param by Deadline of task.","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-08-20"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"        super(description);","lastModifiedDate":"2023-08-20"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-08-20"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"     * Returns the string representation of the deadline task.","lastModifiedDate":"2023-08-20"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"     * @return string representation of the deadline task.","lastModifiedDate":"2023-08-20"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2023-08-20"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":24}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":" * Represents an Event, a task that start at a specific date/time and ends at a specific date/time.","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"    protected String start;","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"    protected String end;","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"     * Creates an event object.","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"     * @param description Description of event.","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"     * @param start Start of event.","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"     * @param end End of event.","lastModifiedDate":"2023-08-20"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"    public Event(String description, String start, String end) {","lastModifiedDate":"2023-08-20"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"        super(description);","lastModifiedDate":"2023-08-20"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-08-20"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-08-20"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"     * Returns the string representation of the event.","lastModifiedDate":"2023-08-20"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"     * @return string representation of the event.","lastModifiedDate":"2023-08-20"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + start + \" to: \" + end + \")\";","lastModifiedDate":"2023-08-20"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":28}},{"path":"src/main/java/IllegalValueException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":" * Illegal value exception.","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"public class IllegalValueException extends Exception {","lastModifiedDate":"2023-08-20"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"     * Creates a new illegal value exception.","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"     * @param s error message.","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"    public IllegalValueException(String s) {","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"        super(s);","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":12}},{"path":"src/main/java/Messages.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"public class Messages {","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"    public static final String MESSAGE_GOODBYE \u003d \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":3}},{"path":"src/main/java/Minion.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"import java.util.*;","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":" * Represents the Minion chatbot.","lastModifiedDate":"2023-08-20"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"public class Minion {","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"    private static List\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"        new Minion().run(args);","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"     * Driver function.","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"     * @param args arguments passed in to stdin.","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"    private void run(String[] args){","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"        ui.sayHi();","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-20"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"        while (true) {","lastModifiedDate":"2023-08-20"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"            String command \u003d sc.nextLine();","lastModifiedDate":"2023-08-20"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"            if (command.trim().equals(\"bye\")) {","lastModifiedDate":"2023-08-20"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"                ui.sayBye();","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"                break;","lastModifiedDate":"2023-08-20"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"            Task task \u003d null;","lastModifiedDate":"2023-08-20"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"            try {","lastModifiedDate":"2023-08-20"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"                task \u003d parseCommand(command);","lastModifiedDate":"2023-08-20"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"            } catch (IllegalValueException | ParserException e) {","lastModifiedDate":"2023-08-20"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"                ui.print(e.getMessage());","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"            if (task \u003d\u003d null) {","lastModifiedDate":"2023-08-20"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"                continue;","lastModifiedDate":"2023-08-20"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"            tasks.add(task);","lastModifiedDate":"2023-08-20"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"            ui.print(","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"                    \"Got it. I\u0027ve added this task:\",","lastModifiedDate":"2023-08-20"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"                    \"\\t\" + task.toString(),","lastModifiedDate":"2023-08-20"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"                    \"Now you have \" + tasks.size() +  \" tasks in the list.\"","lastModifiedDate":"2023-08-20"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"            );","lastModifiedDate":"2023-08-20"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"        sc.close();","lastModifiedDate":"2023-08-20"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":48,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":49,"author":{"gitId":"joel-foo"},"content":"     * Lists current tasks.","lastModifiedDate":"2023-08-20"},{"lineNumber":50,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":51,"author":{"gitId":"joel-foo"},"content":"    private void listTasks() {","lastModifiedDate":"2023-08-21"},{"lineNumber":52,"author":{"gitId":"joel-foo"},"content":"        List\u003cString\u003e lst \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-20"},{"lineNumber":53,"author":{"gitId":"joel-foo"},"content":"        lst.add(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-08-20"},{"lineNumber":54,"author":{"gitId":"joel-foo"},"content":"        for(int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-08-20"},{"lineNumber":55,"author":{"gitId":"joel-foo"},"content":"            lst.add((i + 1) + \".\" + tasks.get(i).toString());","lastModifiedDate":"2023-08-20"},{"lineNumber":56,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":57,"author":{"gitId":"joel-foo"},"content":"        ui.print(lst.toArray(String[]::new));","lastModifiedDate":"2023-08-21"},{"lineNumber":58,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":59,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":60,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":61,"author":{"gitId":"joel-foo"},"content":"     * Returns a task from the parsed command, throws an exception if there is no such task or invalid parameters.","lastModifiedDate":"2023-08-20"},{"lineNumber":62,"author":{"gitId":"joel-foo"},"content":"     * @param command Command to parse.","lastModifiedDate":"2023-08-20"},{"lineNumber":63,"author":{"gitId":"joel-foo"},"content":"     * @return the task parsed from the command if no exception is thrown.","lastModifiedDate":"2023-08-20"},{"lineNumber":64,"author":{"gitId":"joel-foo"},"content":"     * @throws ParserException()","lastModifiedDate":"2023-08-20"},{"lineNumber":65,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":66,"author":{"gitId":"joel-foo"},"content":"    private Task parseCommand(String command) throws ParserException, IllegalValueException {","lastModifiedDate":"2023-08-21"},{"lineNumber":67,"author":{"gitId":"joel-foo"},"content":"        command \u003d command.trim();","lastModifiedDate":"2023-08-20"},{"lineNumber":68,"author":{"gitId":"joel-foo"},"content":"        if (command.isEmpty()){","lastModifiedDate":"2023-08-20"},{"lineNumber":69,"author":{"gitId":"joel-foo"},"content":"            throw new ParserException(\"☹ OOPS!!! I\u0027m sorry, please input a legit command. :-(\");","lastModifiedDate":"2023-08-20"},{"lineNumber":70,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":71,"author":{"gitId":"joel-foo"},"content":"        String[] arr \u003d command.split(\" \", 2);","lastModifiedDate":"2023-08-20"},{"lineNumber":72,"author":{"gitId":"joel-foo"},"content":"        String firstWord \u003d arr[0];","lastModifiedDate":"2023-08-20"},{"lineNumber":73,"author":{"gitId":"joel-foo"},"content":"        if (firstWord.equals(\"list\")) {","lastModifiedDate":"2023-08-20"},{"lineNumber":74,"author":{"gitId":"joel-foo"},"content":"            listTasks();","lastModifiedDate":"2023-08-20"},{"lineNumber":75,"author":{"gitId":"joel-foo"},"content":"            return null;","lastModifiedDate":"2023-08-20"},{"lineNumber":76,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":77,"author":{"gitId":"joel-foo"},"content":"        if (firstWord.equals(\"mark\")){","lastModifiedDate":"2023-08-20"},{"lineNumber":78,"author":{"gitId":"joel-foo"},"content":"            int taskIdx \u003d Integer.valueOf(arr[1]) - 1;","lastModifiedDate":"2023-08-20"},{"lineNumber":79,"author":{"gitId":"joel-foo"},"content":"            Task currTask \u003d null;","lastModifiedDate":"2023-08-20"},{"lineNumber":80,"author":{"gitId":"joel-foo"},"content":"            try {","lastModifiedDate":"2023-08-20"},{"lineNumber":81,"author":{"gitId":"joel-foo"},"content":"                currTask \u003d getTask(taskIdx);","lastModifiedDate":"2023-08-20"},{"lineNumber":82,"author":{"gitId":"joel-foo"},"content":"            } catch (IllegalValueException e) {","lastModifiedDate":"2023-08-20"},{"lineNumber":83,"author":{"gitId":"joel-foo"},"content":"                throw e;","lastModifiedDate":"2023-08-20"},{"lineNumber":84,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":85,"author":{"gitId":"joel-foo"},"content":"            currTask.markDone();","lastModifiedDate":"2023-08-20"},{"lineNumber":86,"author":{"gitId":"joel-foo"},"content":"            ui.print(\"Nice! I\u0027ve marked this task as done:\",","lastModifiedDate":"2023-08-21"},{"lineNumber":87,"author":{"gitId":"joel-foo"},"content":"                    \"\\t\" + currTask.toString()","lastModifiedDate":"2023-08-20"},{"lineNumber":88,"author":{"gitId":"joel-foo"},"content":"            );","lastModifiedDate":"2023-08-21"},{"lineNumber":89,"author":{"gitId":"joel-foo"},"content":"            return null;","lastModifiedDate":"2023-08-20"},{"lineNumber":90,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":91,"author":{"gitId":"joel-foo"},"content":"        if (firstWord.equals(\"unmark\")){","lastModifiedDate":"2023-08-20"},{"lineNumber":92,"author":{"gitId":"joel-foo"},"content":"            int taskIdx \u003d Integer.valueOf(arr[1]) - 1;","lastModifiedDate":"2023-08-20"},{"lineNumber":93,"author":{"gitId":"joel-foo"},"content":"            Task currTask \u003d null;","lastModifiedDate":"2023-08-20"},{"lineNumber":94,"author":{"gitId":"joel-foo"},"content":"            try {","lastModifiedDate":"2023-08-20"},{"lineNumber":95,"author":{"gitId":"joel-foo"},"content":"                currTask \u003d getTask(taskIdx);","lastModifiedDate":"2023-08-20"},{"lineNumber":96,"author":{"gitId":"joel-foo"},"content":"            } catch (IllegalValueException e) {","lastModifiedDate":"2023-08-20"},{"lineNumber":97,"author":{"gitId":"joel-foo"},"content":"                throw e;","lastModifiedDate":"2023-08-20"},{"lineNumber":98,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":99,"author":{"gitId":"joel-foo"},"content":"            currTask.markUndone();","lastModifiedDate":"2023-08-20"},{"lineNumber":100,"author":{"gitId":"joel-foo"},"content":"            ui.print(\"OK, I\u0027ve marked this task as not done yet:\",","lastModifiedDate":"2023-08-21"},{"lineNumber":101,"author":{"gitId":"joel-foo"},"content":"                    \"\\t\" + currTask.toString()","lastModifiedDate":"2023-08-20"},{"lineNumber":102,"author":{"gitId":"joel-foo"},"content":"            );","lastModifiedDate":"2023-08-21"},{"lineNumber":103,"author":{"gitId":"joel-foo"},"content":"            return null;","lastModifiedDate":"2023-08-20"},{"lineNumber":104,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":105,"author":{"gitId":"joel-foo"},"content":"        if (firstWord.equals(\"delete\")) {","lastModifiedDate":"2023-08-20"},{"lineNumber":106,"author":{"gitId":"joel-foo"},"content":"            int taskIdx \u003d Integer.valueOf(arr[1]) - 1;","lastModifiedDate":"2023-08-20"},{"lineNumber":107,"author":{"gitId":"joel-foo"},"content":"            Task currTask \u003d null;","lastModifiedDate":"2023-08-20"},{"lineNumber":108,"author":{"gitId":"joel-foo"},"content":"            try {","lastModifiedDate":"2023-08-20"},{"lineNumber":109,"author":{"gitId":"joel-foo"},"content":"                currTask \u003d getTask(taskIdx);","lastModifiedDate":"2023-08-20"},{"lineNumber":110,"author":{"gitId":"joel-foo"},"content":"            } catch (IllegalValueException e) {","lastModifiedDate":"2023-08-20"},{"lineNumber":111,"author":{"gitId":"joel-foo"},"content":"                throw e;","lastModifiedDate":"2023-08-20"},{"lineNumber":112,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":113,"author":{"gitId":"joel-foo"},"content":"            tasks.remove(taskIdx);","lastModifiedDate":"2023-08-20"},{"lineNumber":114,"author":{"gitId":"joel-foo"},"content":"            ui.print(\"OK, I\u0027ve removed this task\",","lastModifiedDate":"2023-08-21"},{"lineNumber":115,"author":{"gitId":"joel-foo"},"content":"                    \"\\t\" + currTask.toString()","lastModifiedDate":"2023-08-20"},{"lineNumber":116,"author":{"gitId":"joel-foo"},"content":"            );","lastModifiedDate":"2023-08-21"},{"lineNumber":117,"author":{"gitId":"joel-foo"},"content":"            return null;","lastModifiedDate":"2023-08-20"},{"lineNumber":118,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":119,"author":{"gitId":"joel-foo"},"content":"        if (firstWord.equals(\"todo\")) {","lastModifiedDate":"2023-08-20"},{"lineNumber":120,"author":{"gitId":"joel-foo"},"content":"            if(arr.length \u003c 2 || arr[1].isEmpty()) {","lastModifiedDate":"2023-08-20"},{"lineNumber":121,"author":{"gitId":"joel-foo"},"content":"                throw new ParserException(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":122,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":123,"author":{"gitId":"joel-foo"},"content":"            return new ToDo(arr[1]);","lastModifiedDate":"2023-08-20"},{"lineNumber":124,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":125,"author":{"gitId":"joel-foo"},"content":"        //assumes there\u0027s only one /by in the command","lastModifiedDate":"2023-08-20"},{"lineNumber":126,"author":{"gitId":"joel-foo"},"content":"        if (firstWord.equals(\"deadline\")){","lastModifiedDate":"2023-08-20"},{"lineNumber":127,"author":{"gitId":"joel-foo"},"content":"            // nothing after deadline","lastModifiedDate":"2023-08-20"},{"lineNumber":128,"author":{"gitId":"joel-foo"},"content":"            if (arr.length \u003c 2) {","lastModifiedDate":"2023-08-20"},{"lineNumber":129,"author":{"gitId":"joel-foo"},"content":"                throw new ParserException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":130,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":131,"author":{"gitId":"joel-foo"},"content":"            // something after deadline but it\u0027s just empty space(s)","lastModifiedDate":"2023-08-20"},{"lineNumber":132,"author":{"gitId":"joel-foo"},"content":"            // empty -\u003e no description; non-empty -\u003e still need to check if description is missing.","lastModifiedDate":"2023-08-20"},{"lineNumber":133,"author":{"gitId":"joel-foo"},"content":"            if (arr[1].isEmpty()) {","lastModifiedDate":"2023-08-20"},{"lineNumber":134,"author":{"gitId":"joel-foo"},"content":"                throw new ParserException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":135,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":136,"author":{"gitId":"joel-foo"},"content":"            String[] strs \u003d arr[1].split(\"/by\");","lastModifiedDate":"2023-08-20"},{"lineNumber":137,"author":{"gitId":"joel-foo"},"content":"            String description \u003d null;","lastModifiedDate":"2023-08-20"},{"lineNumber":138,"author":{"gitId":"joel-foo"},"content":"            switch (strs.length){","lastModifiedDate":"2023-08-20"},{"lineNumber":139,"author":{"gitId":"joel-foo"},"content":"                // nothing to left and right","lastModifiedDate":"2023-08-20"},{"lineNumber":140,"author":{"gitId":"joel-foo"},"content":"                case 0:","lastModifiedDate":"2023-08-20"},{"lineNumber":141,"author":{"gitId":"joel-foo"},"content":"                    throw new ParserException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":142,"author":{"gitId":"joel-foo"},"content":"                //something to left, nothing to the right","lastModifiedDate":"2023-08-20"},{"lineNumber":143,"author":{"gitId":"joel-foo"},"content":"                case 1:","lastModifiedDate":"2023-08-20"},{"lineNumber":144,"author":{"gitId":"joel-foo"},"content":"                    description \u003d strs[0].trim();","lastModifiedDate":"2023-08-20"},{"lineNumber":145,"author":{"gitId":"joel-foo"},"content":"                    if (description.isEmpty()) {","lastModifiedDate":"2023-08-20"},{"lineNumber":146,"author":{"gitId":"joel-foo"},"content":"                        throw new ParserException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":147,"author":{"gitId":"joel-foo"},"content":"                    }","lastModifiedDate":"2023-08-20"},{"lineNumber":148,"author":{"gitId":"joel-foo"},"content":"                    throw new ParserException(\"☹ OOPS!!! The date of a deadline cannot be empty.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":149,"author":{"gitId":"joel-foo"},"content":"                case 2:","lastModifiedDate":"2023-08-20"},{"lineNumber":150,"author":{"gitId":"joel-foo"},"content":"                    description \u003d strs[0].trim();","lastModifiedDate":"2023-08-20"},{"lineNumber":151,"author":{"gitId":"joel-foo"},"content":"                    String by \u003d strs[1].trim();","lastModifiedDate":"2023-08-20"},{"lineNumber":152,"author":{"gitId":"joel-foo"},"content":"                    if (description.isEmpty()) {","lastModifiedDate":"2023-08-20"},{"lineNumber":153,"author":{"gitId":"joel-foo"},"content":"                        throw new ParserException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":154,"author":{"gitId":"joel-foo"},"content":"                    }","lastModifiedDate":"2023-08-20"},{"lineNumber":155,"author":{"gitId":"joel-foo"},"content":"                    if (by.isEmpty()) {","lastModifiedDate":"2023-08-20"},{"lineNumber":156,"author":{"gitId":"joel-foo"},"content":"                        throw new ParserException(\"☹ OOPS!!! The date of a deadline cannot be empty.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":157,"author":{"gitId":"joel-foo"},"content":"                    }","lastModifiedDate":"2023-08-20"},{"lineNumber":158,"author":{"gitId":"joel-foo"},"content":"                    return new Deadline(description, by);","lastModifiedDate":"2023-08-20"},{"lineNumber":159,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":160,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":161,"author":{"gitId":"joel-foo"},"content":"        //assumes we only have one \u0027/from\u0027 and one \u0027/to\u0027","lastModifiedDate":"2023-08-20"},{"lineNumber":162,"author":{"gitId":"joel-foo"},"content":"        if (firstWord.equals(\"event\")){","lastModifiedDate":"2023-08-20"},{"lineNumber":163,"author":{"gitId":"joel-foo"},"content":"            if (arr.length \u003c 2) {","lastModifiedDate":"2023-08-20"},{"lineNumber":164,"author":{"gitId":"joel-foo"},"content":"                throw new ParserException(\"☹ OOPS!!! The description of an event cannot be empty.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":165,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":166,"author":{"gitId":"joel-foo"},"content":"            if (arr[1].isEmpty()) {","lastModifiedDate":"2023-08-20"},{"lineNumber":167,"author":{"gitId":"joel-foo"},"content":"                throw new ParserException(\"☹ OOPS!!! The description of an event cannot be empty.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":168,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":169,"author":{"gitId":"joel-foo"},"content":"            String[] strs \u003d arr[1].split(\"/from\");","lastModifiedDate":"2023-08-20"},{"lineNumber":170,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":171,"author":{"gitId":"joel-foo"},"content":"            String description \u003d null;","lastModifiedDate":"2023-08-20"},{"lineNumber":172,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":173,"author":{"gitId":"joel-foo"},"content":"            switch (strs.length) {","lastModifiedDate":"2023-08-20"},{"lineNumber":174,"author":{"gitId":"joel-foo"},"content":"                // nothing to left and right","lastModifiedDate":"2023-08-20"},{"lineNumber":175,"author":{"gitId":"joel-foo"},"content":"                case 0:","lastModifiedDate":"2023-08-20"},{"lineNumber":176,"author":{"gitId":"joel-foo"},"content":"                    throw new ParserException(\"☹ OOPS!!! The description of an event cannot be empty.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":177,"author":{"gitId":"joel-foo"},"content":"                case 1:","lastModifiedDate":"2023-08-20"},{"lineNumber":178,"author":{"gitId":"joel-foo"},"content":"                    description \u003d strs[0].trim();","lastModifiedDate":"2023-08-20"},{"lineNumber":179,"author":{"gitId":"joel-foo"},"content":"                    if (description.isEmpty()) {","lastModifiedDate":"2023-08-20"},{"lineNumber":180,"author":{"gitId":"joel-foo"},"content":"                        throw new ParserException(\"☹ OOPS!!! The description of an event cannot be empty.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":181,"author":{"gitId":"joel-foo"},"content":"                    }","lastModifiedDate":"2023-08-20"},{"lineNumber":182,"author":{"gitId":"joel-foo"},"content":"                    throw new ParserException(\"☹ OOPS!!! The from date of an event cannot be empty.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":183,"author":{"gitId":"joel-foo"},"content":"                case 2:","lastModifiedDate":"2023-08-20"},{"lineNumber":184,"author":{"gitId":"joel-foo"},"content":"                    description \u003d strs[0].trim();","lastModifiedDate":"2023-08-20"},{"lineNumber":185,"author":{"gitId":"joel-foo"},"content":"                    String dates \u003d strs[1].trim();","lastModifiedDate":"2023-08-20"},{"lineNumber":186,"author":{"gitId":"joel-foo"},"content":"                    if (description.isEmpty()) {","lastModifiedDate":"2023-08-20"},{"lineNumber":187,"author":{"gitId":"joel-foo"},"content":"                        throw new ParserException(\"☹ OOPS!!! The description of an event cannot be empty.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":188,"author":{"gitId":"joel-foo"},"content":"                    }","lastModifiedDate":"2023-08-20"},{"lineNumber":189,"author":{"gitId":"joel-foo"},"content":"                    if (dates.isEmpty()) {","lastModifiedDate":"2023-08-20"},{"lineNumber":190,"author":{"gitId":"joel-foo"},"content":"                        throw new ParserException(\"☹ OOPS!!! The from date of an event cannot be empty.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":191,"author":{"gitId":"joel-foo"},"content":"                    }","lastModifiedDate":"2023-08-20"},{"lineNumber":192,"author":{"gitId":"joel-foo"},"content":"                    strs \u003d strs[1].split(\"/to\");","lastModifiedDate":"2023-08-20"},{"lineNumber":193,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":194,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":195,"author":{"gitId":"joel-foo"},"content":"            String from \u003d null;","lastModifiedDate":"2023-08-20"},{"lineNumber":196,"author":{"gitId":"joel-foo"},"content":"            String to \u003d null;","lastModifiedDate":"2023-08-20"},{"lineNumber":197,"author":{"gitId":"joel-foo"},"content":"            switch (strs.length) {","lastModifiedDate":"2023-08-20"},{"lineNumber":198,"author":{"gitId":"joel-foo"},"content":"                // nothing to left and right","lastModifiedDate":"2023-08-20"},{"lineNumber":199,"author":{"gitId":"joel-foo"},"content":"                case 0:","lastModifiedDate":"2023-08-20"},{"lineNumber":200,"author":{"gitId":"joel-foo"},"content":"                    throw new ParserException(\"☹ OOPS!!! The from date of an event cannot be empty.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":201,"author":{"gitId":"joel-foo"},"content":"                case 1:","lastModifiedDate":"2023-08-20"},{"lineNumber":202,"author":{"gitId":"joel-foo"},"content":"                    from \u003d strs[0].trim();","lastModifiedDate":"2023-08-20"},{"lineNumber":203,"author":{"gitId":"joel-foo"},"content":"                    if (from.isEmpty()) {","lastModifiedDate":"2023-08-20"},{"lineNumber":204,"author":{"gitId":"joel-foo"},"content":"                        throw new ParserException(\"☹ OOPS!!! The from date of an event cannot be empty.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":205,"author":{"gitId":"joel-foo"},"content":"                    }","lastModifiedDate":"2023-08-20"},{"lineNumber":206,"author":{"gitId":"joel-foo"},"content":"                    throw new ParserException(\"☹ OOPS!!! The to date of an event cannot be empty.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":207,"author":{"gitId":"joel-foo"},"content":"                case 2:","lastModifiedDate":"2023-08-20"},{"lineNumber":208,"author":{"gitId":"joel-foo"},"content":"                    from \u003d strs[0].trim();","lastModifiedDate":"2023-08-20"},{"lineNumber":209,"author":{"gitId":"joel-foo"},"content":"                    to \u003d strs[1].trim();","lastModifiedDate":"2023-08-20"},{"lineNumber":210,"author":{"gitId":"joel-foo"},"content":"                    if (from.isEmpty()) {","lastModifiedDate":"2023-08-20"},{"lineNumber":211,"author":{"gitId":"joel-foo"},"content":"                        throw new ParserException(\"☹ OOPS!!! The from date of an event cannot be empty.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":212,"author":{"gitId":"joel-foo"},"content":"                    }","lastModifiedDate":"2023-08-20"},{"lineNumber":213,"author":{"gitId":"joel-foo"},"content":"                    if (to.isEmpty()) {","lastModifiedDate":"2023-08-20"},{"lineNumber":214,"author":{"gitId":"joel-foo"},"content":"                        throw new ParserException(\"☹ OOPS!!! The to date of an event cannot be empty.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":215,"author":{"gitId":"joel-foo"},"content":"                    }","lastModifiedDate":"2023-08-20"},{"lineNumber":216,"author":{"gitId":"joel-foo"},"content":"                    return new Event(description, from, to);","lastModifiedDate":"2023-08-20"},{"lineNumber":217,"author":{"gitId":"joel-foo"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":218,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":219,"author":{"gitId":"joel-foo"},"content":"        throw new ParserException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-08-20"},{"lineNumber":220,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":221,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":222,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":223,"author":{"gitId":"joel-foo"},"content":"     * Retrieves a Task object based on the taskIdx.","lastModifiedDate":"2023-08-20"},{"lineNumber":224,"author":{"gitId":"joel-foo"},"content":"     * @param taskIdx index of task in the list.","lastModifiedDate":"2023-08-20"},{"lineNumber":225,"author":{"gitId":"joel-foo"},"content":"     * @return the Task corresponding to the index.","lastModifiedDate":"2023-08-20"},{"lineNumber":226,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":227,"author":{"gitId":"joel-foo"},"content":"    private static Task getTask(int taskIdx) throws IllegalValueException {","lastModifiedDate":"2023-08-21"},{"lineNumber":228,"author":{"gitId":"joel-foo"},"content":"        if (taskIdx \u003c 0 || taskIdx \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-08-20"},{"lineNumber":229,"author":{"gitId":"joel-foo"},"content":"            throw new IllegalValueException(\"☹ OOPS!!! Please enter a valid task number.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":230,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":231,"author":{"gitId":"joel-foo"},"content":"        return tasks.get(taskIdx);","lastModifiedDate":"2023-08-20"},{"lineNumber":232,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":233,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":233}},{"path":"src/main/java/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"public class Parser {","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":2}},{"path":"src/main/java/ParserException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":" * Parser exception.","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"public class ParserException extends Exception {","lastModifiedDate":"2023-08-20"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"     * Creates a new parser exception.","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"     * @param s error message.","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"    public ParserException(String s) {","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"        super(s);","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":12}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":" * Represents a task created by the user.","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"    protected String description;","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"     * Creates a task object.","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"     * @param description Description of task.","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-20"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-20"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-20"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"     * Returns the status icon depending on whether the task is done.","lastModifiedDate":"2023-08-20"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"     * @return the status icon.","lastModifiedDate":"2023-08-20"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"    protected String getStatusIcon() {","lastModifiedDate":"2023-08-20"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"        return isDone ? \"X\": \"\";","lastModifiedDate":"2023-08-20"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-08-20"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"    protected void markDone() {","lastModifiedDate":"2023-08-20"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-20"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"     * Marks the task as undone.","lastModifiedDate":"2023-08-20"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":35,"author":{"gitId":"joel-foo"},"content":"    protected void markUndone() {","lastModifiedDate":"2023-08-20"},{"lineNumber":36,"author":{"gitId":"joel-foo"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-20"},{"lineNumber":37,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":38,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":39,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":40,"author":{"gitId":"joel-foo"},"content":"     * Returns the string representation of the task.","lastModifiedDate":"2023-08-20"},{"lineNumber":41,"author":{"gitId":"joel-foo"},"content":"     * @return string representation of the task.","lastModifiedDate":"2023-08-20"},{"lineNumber":42,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":43,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":44,"author":{"gitId":"joel-foo"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":45,"author":{"gitId":"joel-foo"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-08-20"},{"lineNumber":46,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":47,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":47}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":" * Represents a ToDo task.","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"     * Creates a ToDo object.","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"     * @param description Description of the task.","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"        super(description);","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"     * Returns the string representation of the ToDo task.","lastModifiedDate":"2023-08-20"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"     * @return string representation of the ToDo task.","lastModifiedDate":"2023-08-20"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-20"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":20}},{"path":"src/main/java/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"import java.util.List;","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":" * Represents the Ui of the chatbot.","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"public class Ui {","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"    private static final String line \u003d \"\\t____________________________________________________________\\n\";","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"     * Pretty prints string(s).","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"     * @param args string(s) to be printed.","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"    public void print(String... args){","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"        String text \u003d line;","lastModifiedDate":"2023-08-20"},{"lineNumber":15,"author":{"gitId":"joel-foo"},"content":"        for(int i \u003d 0; i \u003c args.length; i++) {","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"            text +\u003d String.format(\"\\t%s\\n\", args[i]);","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"joel-foo"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":18,"author":{"gitId":"joel-foo"},"content":"        text +\u003d line;","lastModifiedDate":"2023-08-20"},{"lineNumber":19,"author":{"gitId":"joel-foo"},"content":"        System.out.println(text);","lastModifiedDate":"2023-08-20"},{"lineNumber":20,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":21,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"joel-foo"},"content":"     * Function to say hi to the user.","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"joel-foo"},"content":"    public void sayHi(){","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"joel-foo"},"content":"        this.print(\"Hello! I\u0027m Minion!\", \"What can I do for you?\");","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"joel-foo"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"joel-foo"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"joel-foo"},"content":"     * Function to say bye to the user.","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"joel-foo"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"joel-foo"},"content":"    public void sayBye(){","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"joel-foo"},"content":"        this.print(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"joel-foo"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"joel-foo"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":34}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"joel-foo"},"content":"todo borrow book","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"joel-foo"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"joel-foo"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"joel-foo"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":5,"author":{"gitId":"joel-foo"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"joel-foo"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"joel-foo"},"content":"mark 1","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"joel-foo"},"content":"mark 2","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"joel-foo"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"joel-foo"},"content":"mark 3","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"joel-foo"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"joel-foo"},"content":"unmark 2","lastModifiedDate":"2023-08-20"},{"lineNumber":13,"author":{"gitId":"joel-foo"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":14,"author":{"gitId":"joel-foo"},"content":"bye","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"joel-foo":14}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"joel-foo"},"content":"if ! javac -encoding ISO-8859-1 -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2023-08-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"joel-foo"},"content":"java -classpath ../bin Minion \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-20"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"joel-foo":2,"-":36}}]
