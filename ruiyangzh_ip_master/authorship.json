[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"# duke project template","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"3. After that, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ruiyangzh":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"checkstyle {","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ruiyangzh":5,"-":41}},{"path":"data/corruptedStorage.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"hjgkjafdbnhd","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"dfhdjkfdhf","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"sdefhjdsa,fmdsanf","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"adjkbaLFDHAELIUREQWYREHDQW","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":4}},{"path":"src/main/java/command/AddTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"import duke.UserInterface;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.FailureInExecuteException;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"import task.Task;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":" * AddTaskCommand represents a command that adds a task to the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"public class AddTaskCommand implements Commandable {","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"    private Task task;","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"     * Sets the task to be added upon execution.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"     * @param task the task to be added.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"    public void setTask(Task task) {","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"     * Executes the adding of the task to the list provided, and provides outputs for the interface to print.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"     * @param list the list that receives the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"     * @param ui the interface that prints out any necessary outputs.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"     * @return false, since the execution does not end the bot.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"     * @throws FailureInExecuteException when there is a failure in writing to the list or its associated file.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"    public boolean execute(TaskList list, UserInterface ui) throws FailureInExecuteException {","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"            list.addTask(task);","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"            throw new FailureInExecuteException(e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"        ui.output(\"Added successfully!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"        return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":39}},{"path":"src/main/java/command/ClearCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"import duke.UserInterface;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.FailureInExecuteException;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"public class ClearCommand implements Commandable {","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"    public boolean execute(TaskList list, UserInterface ui) throws FailureInExecuteException {","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"            list.clear();","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"            throw new FailureInExecuteException(\"Could not clear;\" + e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"        ui.output(\"Cleared!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"        return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":20}},{"path":"src/main/java/command/Commandable.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"import duke.UserInterface;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.FailureInExecuteException;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":" * A general interface that represents a command, which is able to be executed and returns a boolean that represents","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":" * if the execution causes the program to shut down. Also able to throw a FailureInExecuteException if the execution","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":" * happens to fail for one reason or another.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"public interface Commandable {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"    boolean execute(TaskList list, UserInterface ui) throws FailureInExecuteException;","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"ruiyangzh":15}},{"path":"src/main/java/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"import duke.UserInterface;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.FailureInExecuteException;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":" * Represents a deletion command of a particular task.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"public class DeleteCommand implements Commandable {","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"    private int index;","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"    public void setDelete(int index) {","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"     * Executes the deletion of the task from the list provided, and provides outputs for the interface to print.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"     * @param list the list that contains the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"     * @param ui the interface that prints out any necessary outputs.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"     * @return false, since the execution does not end the bot.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"     * @throws FailureInExecuteException when there is a failure in writing to the list or its associated file,","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"     *     and when the index does not exist in the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"    public boolean execute(TaskList list, UserInterface ui) throws FailureInExecuteException {","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"            if (!list.removeTask(index)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"                throw new FailureInExecuteException(\"Out of list index\");","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"            throw new FailureInExecuteException(e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"        return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":36}},{"path":"src/main/java/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"import duke.UserInterface;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.FailureInExecuteException;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"import task.Task;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"public class FindCommand implements Commandable {","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"    private String keyword;","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"    public void setSearch(String keyword) {","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"    public boolean execute(TaskList list, UserInterface ui) throws FailureInExecuteException {","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"        ArrayList\u003cTask\u003e res \u003d list.findTasksMatching(keyword);","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"        if (res.isEmpty()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"            ui.output(\"Could not find task\");","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"            String ans \u003d \"Here are the matching items.\";","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"            for (int i \u003d 0; i \u003c res.size(); i++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"                ans +\u003d \"\\n\" + (i + 1) + \". \" + res.get(i).toString();","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"            ui.output(ans);","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"        return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":29}},{"path":"src/main/java/command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import duke.UserInterface;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":" * Represents a command that prints a list of functions.","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"public class HelpCommand implements Commandable {","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"     * Provides a string for the interface to print, providing a list of helpful commands.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"     * @param list the associated list(not needed).","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"     * @param ui the interface that prints out the help guide.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"     * @return false, since the execution does not end the bot.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"    public boolean execute(TaskList list, UserInterface ui) {","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"        ui.output(\"Here\u0027s the guidelines for all functions.\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"                + \"help: lists this help guide\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"                + \"list: lists all tasks\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"                + \"bye: ends bot\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"                + \"mark: mark (int x); marks indicated task\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"                + \"unmark: unmark (int x); unmarks indicated task\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"                + \"event: event (String name) /from (Date start) /to (Date end); creates event\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"                + \"todo: todo (String name); creates todo\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"                + \"deadline: deadline (String name) /by (Date deadline); creates deadline\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"                + \"delete: delete(int x); deletes the indicated task\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"                + \"find: find(String keyword); finds any tasks that contain the keyword\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"        );","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"        return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":31}},{"path":"src/main/java/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import duke.UserInterface;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":" * Represents a command that outputs the list of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"public class ListCommand implements Commandable {","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"     * Prints out the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"     * @param list the list to be printed","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"     * @param ui the interface that prints out the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"     * @return false, since the execution does not end the bot.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"    public boolean execute(TaskList list, UserInterface ui) {","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"        ui.output(list.listString());","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"        return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":19}},{"path":"src/main/java/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"import duke.UserInterface;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.FailureInExecuteException;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":" * Represents the marking or unmarking of a certain task.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"public class MarkCommand implements Commandable {","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"    private boolean isToBeMarked;","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"    private int targetIndex;","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"    public MarkCommand(boolean isToBeMarked) {","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"        this.isToBeMarked \u003d isToBeMarked;","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"    public void setMark(int targetIndex) {","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"        this.targetIndex \u003d targetIndex;","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"     * Executes the marking/unmarking of a given task.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"     * @param list the list that contains the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"     * @param ui the interface that prints out any necessary outputs.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"     * @return false, since the execution does not end the bot.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"     * @throws FailureInExecuteException when there is a failure in marking the task, or the task does not exist.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"    public boolean execute(TaskList list, UserInterface ui) throws FailureInExecuteException {","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"            if (!list.setMark(targetIndex, isToBeMarked)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"                throw new FailureInExecuteException(\"Out of list index\");","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"            throw new FailureInExecuteException(e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"        return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":41}},{"path":"src/main/java/command/ShutdownCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import duke.UserInterface;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":" * Represents a call for the bot to be shut down, which will be interpreted by Duke.","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"public class ShutdownCommand implements Commandable {","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"     * Indicates that the bot is to be shut down.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"     * @param list the list that contains the task. (not necessary)","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"     * @param ui the interface that prints out any necessary outputs.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"     * @return true, since the execution ends the bot.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"    public boolean execute(TaskList list, UserInterface ui) {","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"        ui.output(\"Shutting down now!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"        return true;","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"ruiyangzh":19}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"import command.Commandable;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.CorruptedFileException;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.FailureInExecuteException;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.InvalidCommandException;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.InvalidVarException;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":" * Duke represents a chatbot that parses user inputs and commands, stores tasks given to it in memory and on a file,","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":" * and provides a user interface for easier correspondence.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"public class Duke {","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"    private static final String FILE_PATH \u003d \"./data/tasks.txt\";","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"    private static final String LOGO \u003d \" _           _        \\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"            + \"| |    _   _| | _____ \\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"            + \"| |   | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"            + \"| |___| |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"            + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"    private TaskList list;","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"    private Storage storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"    private Parser parser;","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"    private UserInterface ui;","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"     * Creates a new Duke instance.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"    public Duke() {","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"        storage \u003d new Storage();","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"        list \u003d new TaskList(storage);","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"        ui \u003d new UserInterface();","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"     * Initializes the storage, list and outputs a greeting.","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"     * @throws IOException when unable to read from disk.","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"     * @throws CorruptedFileException when unable to interpret file.","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"ruiyangzh"},"content":"    public void startDuke() throws IOException, CorruptedFileException {","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"ruiyangzh"},"content":"        ui.output(\"Hi, I\u0027m \\n\" + LOGO);","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"ruiyangzh"},"content":"        storage.init(FILE_PATH);","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"ruiyangzh"},"content":"        list.loadFromDisk();","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"ruiyangzh"},"content":"    public void closeDuke() {","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"ruiyangzh"},"content":"        ui.output(\"Goodbye!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"ruiyangzh"},"content":"     * Handler is called when a corrupted file is detected, allowing user to decide how to proceed, such as","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"ruiyangzh"},"content":"     * clearing the file or shutting down.","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"ruiyangzh"},"content":"     * @return whether the handler decides to call for a shutdown of the Duke instance.","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"ruiyangzh"},"content":"    public boolean corruptedFileHandler() {","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"ruiyangzh"},"content":"        ui.output(\"File not properly formatted;\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"ruiyangzh"},"content":"                + \"Clear corrupted file Y/N?\");","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"ruiyangzh"},"content":"        while (true) {","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"ruiyangzh"},"content":"            String input \u003d ui.input();","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"ruiyangzh"},"content":"            ui.output(input);","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"ruiyangzh"},"content":"            if (input.equals(\"Y\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"ruiyangzh"},"content":"                try {","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"ruiyangzh"},"content":"                    storage.clear();","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"ruiyangzh"},"content":"                    ui.output(\"File cleared.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"ruiyangzh"},"content":"                } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"ruiyangzh"},"content":"                    ui.output(\"Error in clearing! Shutting down.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"ruiyangzh"},"content":"                    return true;","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"ruiyangzh"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"ruiyangzh"},"content":"                return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"ruiyangzh"},"content":"            } else if (input.equals(\"N\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"ruiyangzh"},"content":"                ui.output(\"Understood. Shutting down.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"ruiyangzh"},"content":"                return true;","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"ruiyangzh"},"content":"            } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"ruiyangzh"},"content":"                ui.output(\"Bad input. Input Y/N\");","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"ruiyangzh"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"ruiyangzh"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"ruiyangzh"},"content":"        boolean isShuttingDown \u003d false;","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"ruiyangzh"},"content":"        Duke luke \u003d new Duke();","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"ruiyangzh"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"ruiyangzh"},"content":"            luke.startDuke();","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"ruiyangzh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"ruiyangzh"},"content":"            luke.ui.output(\"Could not read from file\");","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"ruiyangzh"},"content":"            isShuttingDown \u003d true;","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"ruiyangzh"},"content":"        } catch (CorruptedFileException f) {","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"ruiyangzh"},"content":"            isShuttingDown \u003d luke.corruptedFileHandler();","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"ruiyangzh"},"content":"        while (!isShuttingDown) {","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"ruiyangzh"},"content":"            String input \u003d luke.ui.input();","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"ruiyangzh"},"content":"            try {","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"ruiyangzh"},"content":"                Commandable command \u003d luke.parser.parse(input);","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"ruiyangzh"},"content":"                isShuttingDown \u003d command.execute(luke.list, luke.ui);","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"ruiyangzh"},"content":"            } catch (InvalidCommandException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"ruiyangzh"},"content":"                luke.ui.output(\"Unknown command given; \" + e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"ruiyangzh"},"content":"            } catch (InvalidVarException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"ruiyangzh"},"content":"                luke.ui.output(\"Invalid input; \" + e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"ruiyangzh"},"content":"            } catch (FailureInExecuteException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"ruiyangzh"},"content":"                luke.ui.output(\"Failure to execute command; \" + e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"ruiyangzh"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":103,"author":{"gitId":"ruiyangzh"},"content":"        luke.closeDuke();","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":105,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"ruiyangzh":105}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"import command.AddTaskCommand;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"import command.ClearCommand;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"import command.Commandable;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"import command.DeleteCommand;","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"import command.FindCommand;","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"import command.HelpCommand;","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"import command.ListCommand;","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"import command.MarkCommand;","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"import command.ShutdownCommand;","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.InvalidCommandException;","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.InvalidVarException;","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"import task.Deadline;","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"import task.Event;","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"import task.Task;","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"import task.ToDo;","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":" * Parses inputs passed via the user interface into commands if possible.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"public class Parser {","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"    private HashMap\u003cString, Commandable\u003e stringToCommand;","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"     * Initializes the parser.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"    public Parser() {","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"        stringToCommand \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"        init();","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"    private void init() {","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"        stringToCommand.put(\"bye\", new ShutdownCommand());","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"ruiyangzh"},"content":"        stringToCommand.put(\"help\", new HelpCommand());","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"ruiyangzh"},"content":"        stringToCommand.put(\"list\", new ListCommand());","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"ruiyangzh"},"content":"        stringToCommand.put(\"todo\", new AddTaskCommand());","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"ruiyangzh"},"content":"        stringToCommand.put(\"deadline\", new AddTaskCommand());","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"ruiyangzh"},"content":"        stringToCommand.put(\"event\", new AddTaskCommand());","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"ruiyangzh"},"content":"        stringToCommand.put(\"delete\", new DeleteCommand());","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"ruiyangzh"},"content":"        stringToCommand.put(\"mark\", new MarkCommand(true));","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"ruiyangzh"},"content":"        stringToCommand.put(\"unmark\", new MarkCommand(false));","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"ruiyangzh"},"content":"        stringToCommand.put(\"find\", new FindCommand());","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"ruiyangzh"},"content":"        stringToCommand.put(\"clear\", new ClearCommand());","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"ruiyangzh"},"content":"     * Parses the string passed to it and produces the corresponding command.","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"ruiyangzh"},"content":"     * @param input the string passed to the parser that is meant to be interpreted.","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"ruiyangzh"},"content":"     * @return the command that the string represents.","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"ruiyangzh"},"content":"     * @throws InvalidCommandException if the command cannot be identified.","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"ruiyangzh"},"content":"     * @throws InvalidVarException if the command is identifiable but the parameters are incorrect.","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"ruiyangzh"},"content":"    public Commandable parse(String input) throws InvalidCommandException, InvalidVarException {","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"ruiyangzh"},"content":"        String commandIdentifier \u003d input.split(\" \")[0];","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"ruiyangzh"},"content":"        Commandable command \u003d stringToCommand.get(commandIdentifier);","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"ruiyangzh"},"content":"        if (command instanceof ShutdownCommand","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"ruiyangzh"},"content":"            || command instanceof HelpCommand","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"ruiyangzh"},"content":"            || command instanceof ListCommand","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"ruiyangzh"},"content":"            || command instanceof ClearCommand) {","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"ruiyangzh"},"content":"            if (!input.equals(commandIdentifier)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"ruiyangzh"},"content":"                throw new InvalidVarException(\"This command has no variables!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"ruiyangzh"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"ruiyangzh"},"content":"        if (command instanceof AddTaskCommand) {","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"ruiyangzh"},"content":"            if (input.equals(commandIdentifier)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"ruiyangzh"},"content":"                throw new InvalidCommandException(\"No parameters\");","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"ruiyangzh"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"ruiyangzh"},"content":"            Task taskToAdd;","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"ruiyangzh"},"content":"            String name;","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"ruiyangzh"},"content":"            switch(commandIdentifier) {","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"ruiyangzh"},"content":"            case (\"todo\"):","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"ruiyangzh"},"content":"                if (input.length() \u003c 6) {","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"ruiyangzh"},"content":"                    throw new InvalidVarException(\"No name!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"ruiyangzh"},"content":"                }","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"ruiyangzh"},"content":"                name \u003d input.substring(5);","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"ruiyangzh"},"content":"                if (name.isBlank()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"ruiyangzh"},"content":"                    throw new InvalidVarException(\"Blank name!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"ruiyangzh"},"content":"                }","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"ruiyangzh"},"content":"                taskToAdd \u003d new ToDo(name);","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"ruiyangzh"},"content":"                break;","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"ruiyangzh"},"content":"            case (\"deadline\"):","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"ruiyangzh"},"content":"                int split \u003d input.indexOf(\"/by\");","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"ruiyangzh"},"content":"                if (split \u003d\u003d -1) {","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"ruiyangzh"},"content":"                    throw new InvalidCommandException(\"Deadline missing\");","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"ruiyangzh"},"content":"                }","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"ruiyangzh"},"content":"                if (split \u003c 10 || input.length() \u003c split + 4) {","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"ruiyangzh"},"content":"                    throw new InvalidVarException(\"Blank parameters!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"ruiyangzh"},"content":"                }","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"ruiyangzh"},"content":"                name \u003d input.substring(9, split - 1);","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"ruiyangzh"},"content":"                LocalDate deadline;","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"ruiyangzh"},"content":"                try {","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"ruiyangzh"},"content":"                    deadline \u003d LocalDate.parse(input.substring(split + 4));","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"ruiyangzh"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"ruiyangzh"},"content":"                    throw new InvalidVarException(\"Could not parse dates!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"ruiyangzh"},"content":"                }","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"ruiyangzh"},"content":"                if (name.isBlank()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"ruiyangzh"},"content":"                    throw new InvalidVarException(\"Blank parameters!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"ruiyangzh"},"content":"                }","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"ruiyangzh"},"content":"                taskToAdd \u003d new Deadline(name, deadline);","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"ruiyangzh"},"content":"                break;","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"ruiyangzh"},"content":"            case (\"event\"):","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"ruiyangzh"},"content":"                int split1 \u003d input.indexOf(\"/from\");","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"ruiyangzh"},"content":"                int split2 \u003d input.indexOf(\"/to\");","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"ruiyangzh"},"content":"                if (split1 \u003d\u003d -1 || split2 \u003d\u003d -1) {","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"ruiyangzh"},"content":"                    throw new InvalidCommandException(\"Some parameters missing\");","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"ruiyangzh"},"content":"                }","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"ruiyangzh"},"content":"                if (split1 \u003c 7 || split2 \u003c split1 + 5 || input.length() \u003c split2 + 4) {","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"ruiyangzh"},"content":"                    throw new InvalidVarException(\"Blank parameters!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"ruiyangzh"},"content":"                }","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"ruiyangzh"},"content":"                name \u003d input.substring(6, split1 - 1);","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"ruiyangzh"},"content":"                LocalDate start;","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"ruiyangzh"},"content":"                LocalDate end;","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"ruiyangzh"},"content":"                try {","lastModifiedDate":"2023-09-01"},{"lineNumber":120,"author":{"gitId":"ruiyangzh"},"content":"                    start \u003d LocalDate.parse(input.substring(split1 + 6, split2 - 1));","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"ruiyangzh"},"content":"                    end \u003d LocalDate.parse(input.substring(split2 + 4));","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"ruiyangzh"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"ruiyangzh"},"content":"                    throw new InvalidVarException(\"Could not parse dates!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"ruiyangzh"},"content":"                }","lastModifiedDate":"2023-09-01"},{"lineNumber":125,"author":{"gitId":"ruiyangzh"},"content":"                if (name.isBlank()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":126,"author":{"gitId":"ruiyangzh"},"content":"                    throw new InvalidVarException(\"Blank parameters!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":127,"author":{"gitId":"ruiyangzh"},"content":"                }","lastModifiedDate":"2023-09-01"},{"lineNumber":128,"author":{"gitId":"ruiyangzh"},"content":"                taskToAdd \u003d new Event(name, start, end);","lastModifiedDate":"2023-09-01"},{"lineNumber":129,"author":{"gitId":"ruiyangzh"},"content":"                break;","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"ruiyangzh"},"content":"            default:","lastModifiedDate":"2023-09-01"},{"lineNumber":131,"author":{"gitId":"ruiyangzh"},"content":"                throw new InvalidVarException(\"Blank parameters! This should never happen; \"","lastModifiedDate":"2023-09-01"},{"lineNumber":132,"author":{"gitId":"ruiyangzh"},"content":"                        + \"likely a task type was added without its respective parser.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"ruiyangzh"},"content":"            } ((AddTaskCommand) command).setTask(taskToAdd);","lastModifiedDate":"2023-09-01"},{"lineNumber":134,"author":{"gitId":"ruiyangzh"},"content":"        } else if (command instanceof DeleteCommand) {","lastModifiedDate":"2023-09-01"},{"lineNumber":135,"author":{"gitId":"ruiyangzh"},"content":"            if (commandIdentifier.equals(input)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":136,"author":{"gitId":"ruiyangzh"},"content":"                throw new InvalidCommandException(\"No parameter\");","lastModifiedDate":"2023-09-01"},{"lineNumber":137,"author":{"gitId":"ruiyangzh"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":138,"author":{"gitId":"ruiyangzh"},"content":"            int number;","lastModifiedDate":"2023-09-01"},{"lineNumber":139,"author":{"gitId":"ruiyangzh"},"content":"            try {","lastModifiedDate":"2023-09-01"},{"lineNumber":140,"author":{"gitId":"ruiyangzh"},"content":"                number \u003d Integer.parseInt(input.substring(7)) - 1;","lastModifiedDate":"2023-09-01"},{"lineNumber":141,"author":{"gitId":"ruiyangzh"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"ruiyangzh"},"content":"                throw new InvalidVarException(\"Task number could not be read\");","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"ruiyangzh"},"content":"            } (","lastModifiedDate":"2023-09-01"},{"lineNumber":144,"author":{"gitId":"ruiyangzh"},"content":"                (DeleteCommand) command).setDelete(number);","lastModifiedDate":"2023-09-01"},{"lineNumber":145,"author":{"gitId":"ruiyangzh"},"content":"        } else if (command instanceof MarkCommand) {","lastModifiedDate":"2023-09-01"},{"lineNumber":146,"author":{"gitId":"ruiyangzh"},"content":"            if (commandIdentifier.equals(input)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":147,"author":{"gitId":"ruiyangzh"},"content":"                throw new InvalidCommandException(\"No parameter\");","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"ruiyangzh"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":149,"author":{"gitId":"ruiyangzh"},"content":"            int number;","lastModifiedDate":"2023-09-01"},{"lineNumber":150,"author":{"gitId":"ruiyangzh"},"content":"            try {","lastModifiedDate":"2023-09-01"},{"lineNumber":151,"author":{"gitId":"ruiyangzh"},"content":"                number \u003d Integer.parseInt(input.substring(commandIdentifier.length() + 1)) - 1;","lastModifiedDate":"2023-09-01"},{"lineNumber":152,"author":{"gitId":"ruiyangzh"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":153,"author":{"gitId":"ruiyangzh"},"content":"                throw new InvalidVarException(\"Task number could not be read\");","lastModifiedDate":"2023-09-01"},{"lineNumber":154,"author":{"gitId":"ruiyangzh"},"content":"            } (","lastModifiedDate":"2023-09-01"},{"lineNumber":155,"author":{"gitId":"ruiyangzh"},"content":"                (MarkCommand) command).setMark(number);","lastModifiedDate":"2023-09-01"},{"lineNumber":156,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":157,"author":{"gitId":"ruiyangzh"},"content":"        else if (command instanceof FindCommand) {","lastModifiedDate":"2023-09-01"},{"lineNumber":158,"author":{"gitId":"ruiyangzh"},"content":"            if (input.length() \u003c 6) {","lastModifiedDate":"2023-09-01"},{"lineNumber":159,"author":{"gitId":"ruiyangzh"},"content":"                throw new InvalidVarException(\"No keyword!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":160,"author":{"gitId":"ruiyangzh"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":161,"author":{"gitId":"ruiyangzh"},"content":"            String keyword \u003d input.substring(5);","lastModifiedDate":"2023-09-01"},{"lineNumber":162,"author":{"gitId":"ruiyangzh"},"content":"            if (keyword.isBlank()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":163,"author":{"gitId":"ruiyangzh"},"content":"                throw new InvalidVarException(\"Blank keyword!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":164,"author":{"gitId":"ruiyangzh"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":165,"author":{"gitId":"ruiyangzh"},"content":"            ((FindCommand) command).setSearch(keyword);","lastModifiedDate":"2023-09-01"},{"lineNumber":166,"author":{"gitId":"ruiyangzh"},"content":"        } else if (command \u003d\u003d null) {","lastModifiedDate":"2023-09-01"},{"lineNumber":167,"author":{"gitId":"ruiyangzh"},"content":"            throw new InvalidCommandException(\"Unrecognized command\");","lastModifiedDate":"2023-09-01"},{"lineNumber":168,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":169,"author":{"gitId":"ruiyangzh"},"content":"        return command;","lastModifiedDate":"2023-09-01"},{"lineNumber":170,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":171,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":171}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import java.io.File;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":" * Represents a file on the disk that contains strings.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"public class Storage {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"    private File storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"    private Scanner storageScanner;","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"    public Storage() {","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"     * Initializes the storage file to the specified path name.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"     * @param pathName the path name of the file to be associated with this object.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"     * @throws IOException if the file does not exist, and we are unable to create a new file in the specified path.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"    public void init(String pathName) throws IOException {","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"        storage \u003d new File(pathName);","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"        storage.createNewFile();","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"     * Clears the file to an empty text if possible.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"     * @throws IOException if we cannot clear the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"    public void clear() throws IOException {","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"        storage.createNewFile();","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"        writeToDisk(new ArrayList\u003c\u003e());","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"     * Writes to the file given an input.","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"ruiyangzh"},"content":"     * @param list An ArrayList representing what we want to write to the disk.","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"ruiyangzh"},"content":"     * @throws IOException if we cannot write to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"ruiyangzh"},"content":"    public void writeToDisk(ArrayList\u003cString\u003e list) throws IOException {","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"ruiyangzh"},"content":"        FileWriter writer \u003d new FileWriter(storage);","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"ruiyangzh"},"content":"        for (String obj : list) {","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"ruiyangzh"},"content":"            writer.write(obj);","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"ruiyangzh"},"content":"            writer.write(\"\\n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"ruiyangzh"},"content":"        writer.close();","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"ruiyangzh"},"content":"     * Produces an ArrayList of type String that represents the text file associated with this instance.","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"ruiyangzh"},"content":"     * @return ArrayList of type String that represents the text file associated with this instance.","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"ruiyangzh"},"content":"     * @throws IOException if we cannot read from the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"ruiyangzh"},"content":"    public ArrayList\u003cString\u003e loadFromDisk() throws IOException {","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"ruiyangzh"},"content":"        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"ruiyangzh"},"content":"        storageScanner \u003d new Scanner(storage);","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"ruiyangzh"},"content":"        while (storageScanner.hasNextLine()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"ruiyangzh"},"content":"            result.add(storageScanner.nextLine());","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"ruiyangzh"},"content":"        return result;","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"ruiyangzh":65}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.CorruptedFileException;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"import task.Deadline;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"import task.Event;","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"import task.Task;","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"import task.ToDo;","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":" * A tasklist that stores a group of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"public class TaskList {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"    private int counter;","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"    private Storage storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"     * Initializes a tasklist, with its associated file.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"     * @param storage the file associated with the tasklist.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"    public TaskList(Storage storage) {","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"        taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"        counter \u003d -1;","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"     * Loads the tasklist from the associated file.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"     * @throws IOException if we cannot read from the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"     * @throws CorruptedFileException if the file cannot be interpreted.","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"    public void loadFromDisk() throws IOException, CorruptedFileException {","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"        taskList \u003d stringListToTaskList(storage.loadFromDisk());","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"ruiyangzh"},"content":"        counter \u003d taskList.size() - 1;","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"ruiyangzh"},"content":"     * Writes the tasklist to the associated file.","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"ruiyangzh"},"content":"     * @throws IOException if the file cannot be written to.","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"ruiyangzh"},"content":"    public void writeToDisk() throws IOException {","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"ruiyangzh"},"content":"        storage.writeToDisk(taskListToStringList(taskList));","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"ruiyangzh"},"content":"     * Adds a task to the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"ruiyangzh"},"content":"     * @param task task to be added.","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"ruiyangzh"},"content":"     * @throws IOException if we cannot write the task to disk.","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"ruiyangzh"},"content":"    public void addTask(Task task) throws IOException {","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"ruiyangzh"},"content":"        taskList.add(task);","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"ruiyangzh"},"content":"        counter +\u003d 1;","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"ruiyangzh"},"content":"        writeToDisk();","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"ruiyangzh"},"content":"     * Removes a task from the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"ruiyangzh"},"content":"     * @param index index of the task to be removed.","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"ruiyangzh"},"content":"     * @return whether the index exists in the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"ruiyangzh"},"content":"     * @throws IOException if the index exists and was deleted, but we cannot write the change to disk.","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"ruiyangzh"},"content":"    public boolean removeTask(int index) throws IOException {","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"ruiyangzh"},"content":"        if (index \u003e counter) {","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"ruiyangzh"},"content":"            return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"ruiyangzh"},"content":"        taskList.remove(index);","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"ruiyangzh"},"content":"        counter -\u003d 1;","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"ruiyangzh"},"content":"        writeToDisk();","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"ruiyangzh"},"content":"        return true;","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"ruiyangzh"},"content":"    public void clear() throws IOException {","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"ruiyangzh"},"content":"        taskList.clear();","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"ruiyangzh"},"content":"        counter \u003d -1;","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"ruiyangzh"},"content":"        writeToDisk();","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"ruiyangzh"},"content":"    public boolean setMark(int targetIndex, boolean isToBeMarked) throws IOException {","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"ruiyangzh"},"content":"        if (targetIndex \u003e counter || targetIndex \u003c 0) {","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"ruiyangzh"},"content":"            return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"ruiyangzh"},"content":"        if (isToBeMarked) {","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"ruiyangzh"},"content":"            taskList.get(targetIndex).markDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"ruiyangzh"},"content":"        if (!isToBeMarked) {","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"ruiyangzh"},"content":"            taskList.get(targetIndex).markUndone();","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"ruiyangzh"},"content":"        writeToDisk();","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"ruiyangzh"},"content":"        return true;","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"ruiyangzh"},"content":"    private ArrayList\u003cTask\u003e stringListToTaskList(ArrayList\u003cString\u003e stringArrayList) throws CorruptedFileException {","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"ruiyangzh"},"content":"        ArrayList\u003cTask\u003e res \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"ruiyangzh"},"content":"        for (String s : stringArrayList) {","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"ruiyangzh"},"content":"            String[] temp \u003d s.split(Task.DIVIDER);","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"ruiyangzh"},"content":"            if (temp.length \u003c\u003d 1) {","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"ruiyangzh"},"content":"                throw new CorruptedFileException();","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"ruiyangzh"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"ruiyangzh"},"content":"            boolean isComplete;","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"ruiyangzh"},"content":"            if (temp[1].equals(\"TRUE\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"ruiyangzh"},"content":"                isComplete \u003d true;","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"ruiyangzh"},"content":"            } else if (temp[1].equals(\"FALSE\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"ruiyangzh"},"content":"                isComplete \u003d false;","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"ruiyangzh"},"content":"            } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"ruiyangzh"},"content":"                throw new CorruptedFileException();","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"ruiyangzh"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"ruiyangzh"},"content":"            try {","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"ruiyangzh"},"content":"                switch (temp[0]) {","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"ruiyangzh"},"content":"                case (\"TD\"):","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"ruiyangzh"},"content":"                    res.add(new ToDo(temp[2], isComplete));","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"ruiyangzh"},"content":"                    break;","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"ruiyangzh"},"content":"                case (\"DL\"):","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"ruiyangzh"},"content":"                    res.add(new Deadline(temp[2], isComplete, (LocalDate.parse(temp[3]))));","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"ruiyangzh"},"content":"                    break;","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"ruiyangzh"},"content":"                case (\"EV\"):","lastModifiedDate":"2023-09-01"},{"lineNumber":120,"author":{"gitId":"ruiyangzh"},"content":"                    res.add(new Event(temp[2], isComplete, LocalDate.parse(temp[3]), LocalDate.parse(temp[4])));","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"ruiyangzh"},"content":"                    break;","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"ruiyangzh"},"content":"                default:","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"ruiyangzh"},"content":"                    throw new CorruptedFileException();","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"ruiyangzh"},"content":"                }","lastModifiedDate":"2023-09-01"},{"lineNumber":125,"author":{"gitId":"ruiyangzh"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":126,"author":{"gitId":"ruiyangzh"},"content":"                throw new CorruptedFileException();","lastModifiedDate":"2023-09-01"},{"lineNumber":127,"author":{"gitId":"ruiyangzh"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":128,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":129,"author":{"gitId":"ruiyangzh"},"content":"        return res;","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":131,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":132,"author":{"gitId":"ruiyangzh"},"content":"    private ArrayList\u003cString\u003e taskListToStringList(ArrayList\u003cTask\u003e taskArrayList) {","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"ruiyangzh"},"content":"        ArrayList\u003cString\u003e res \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":134,"author":{"gitId":"ruiyangzh"},"content":"        for (Task s : taskArrayList) {","lastModifiedDate":"2023-09-01"},{"lineNumber":135,"author":{"gitId":"ruiyangzh"},"content":"            res.add(s.fileFormat());","lastModifiedDate":"2023-09-01"},{"lineNumber":136,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":137,"author":{"gitId":"ruiyangzh"},"content":"        return res;","lastModifiedDate":"2023-09-01"},{"lineNumber":138,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":139,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":140,"author":{"gitId":"ruiyangzh"},"content":"    public ArrayList\u003cTask\u003e findTasksMatching(String keyword) {","lastModifiedDate":"2023-09-01"},{"lineNumber":141,"author":{"gitId":"ruiyangzh"},"content":"        ArrayList\u003cTask\u003e res \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"ruiyangzh"},"content":"        for (Task t: taskList) {","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"ruiyangzh"},"content":"            if (t.toString().contains(keyword)){","lastModifiedDate":"2023-09-01"},{"lineNumber":144,"author":{"gitId":"ruiyangzh"},"content":"                res.add(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":145,"author":{"gitId":"ruiyangzh"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":146,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":147,"author":{"gitId":"ruiyangzh"},"content":"        return res;","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":149,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":150,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":151,"author":{"gitId":"ruiyangzh"},"content":"     * Produces a string representation of the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":152,"author":{"gitId":"ruiyangzh"},"content":"     * @return a string representation of the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":153,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":154,"author":{"gitId":"ruiyangzh"},"content":"    public String listString() {","lastModifiedDate":"2023-09-01"},{"lineNumber":155,"author":{"gitId":"ruiyangzh"},"content":"        if (counter \u003d\u003d -1) {","lastModifiedDate":"2023-09-01"},{"lineNumber":156,"author":{"gitId":"ruiyangzh"},"content":"            return (\"No list, silly!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":157,"author":{"gitId":"ruiyangzh"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":158,"author":{"gitId":"ruiyangzh"},"content":"            String res \u003d \"Here\u0027s the list so far.\";","lastModifiedDate":"2023-09-01"},{"lineNumber":159,"author":{"gitId":"ruiyangzh"},"content":"            for (int i \u003d 0; i \u003c counter + 1; i++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":160,"author":{"gitId":"ruiyangzh"},"content":"                res +\u003d (\"\\n\" + (i + 1) + \". \" + taskList.get(i));","lastModifiedDate":"2023-09-01"},{"lineNumber":161,"author":{"gitId":"ruiyangzh"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":162,"author":{"gitId":"ruiyangzh"},"content":"            return res;","lastModifiedDate":"2023-09-01"},{"lineNumber":163,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":164,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":165,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"ruiyangzh":165}},{"path":"src/main/java/duke/UserInterface.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":" * Represents the user interface of an application.","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"public class UserInterface {","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"    private Scanner userInput;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"    private final String lineDivider \u003d \"---------------------------------------------\";","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"    public UserInterface() {","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"        this.userInput \u003d new Scanner(System.in);","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"    public String input() {","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"        return userInput.nextLine();","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"     * Takes a string and prints it out to the system, while formatting it with line dividers.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"     * @param output the string to be printed.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"    public void output(String output) {","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"        System.out.println(output);","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"        System.out.println(lineDivider);","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":28}},{"path":"src/main/java/dukeexception/CorruptedFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package dukeexception;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":" * An extension of DukeException, that represents an accessible but incorrectly formatted file.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"public class CorruptedFileException extends DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"    public CorruptedFileException() {","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"        super();","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"    public CorruptedFileException(String s) {","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"        super(s);","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":13}},{"path":"src/main/java/dukeexception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package dukeexception;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":" * Represents any exceptions that are unique to Duke.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"public abstract class DukeException extends Exception {","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"    public DukeException() {","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"        super();","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"    public DukeException(String s) {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"        super(s);","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"ruiyangzh":13}},{"path":"src/main/java/dukeexception/FailureInExecuteException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package dukeexception;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":" * An extension of DukeException, that represents a failure in execution of a Commandable.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"public class FailureInExecuteException extends DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"    public FailureInExecuteException() {","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"        super();","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"    public FailureInExecuteException(String s) {","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"        super(s);","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":14}},{"path":"src/main/java/dukeexception/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package dukeexception;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":" * An extension of DukeException, that represents a bad command input.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"public class InvalidCommandException extends DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"    public InvalidCommandException() {","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"        super();","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"    public InvalidCommandException(String s) {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"        super(s);","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"ruiyangzh":13}},{"path":"src/main/java/dukeexception/InvalidVarException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package dukeexception;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":" * An extension of DukeException, that represents a command with bad arguments.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"public class InvalidVarException extends DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"    public InvalidVarException() {","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"        super();","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"    public InvalidVarException(String s) {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"        super(s);","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"ruiyangzh":13}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package task;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":" * Represents an extension of a task, containing a deadline in terms of LocalDate.","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"    private LocalDate deadline;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"     * This is the constructor for a deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"     * @param name name of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"     * @param deadline date at which the task is due.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"    public Deadline(String name, LocalDate deadline) {","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"        super(name);","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"     * An overloading of the above method, for when the isComplete is needed as well.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"     * @param name name of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"     * @param isComplete whether the task is complete.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"     * @param deadline date at which the task is due.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"    public Deadline(String name, boolean isComplete, LocalDate deadline) {","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"        super(name, isComplete);","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + deadline.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"    public String fileFormat() {","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"        return \"DL\" + DIVIDER + super.fileFormat() + DIVIDER + deadline;","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"ruiyangzh":37}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package task;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":" * Represents an extension of a task, containing a start and end time in terms of LocalDate.","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"public class Event extends Task {","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"    private LocalDate timeStart;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"    private LocalDate timeEnd;","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"     * This is the constructor for an Event.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"     * @param name name of the Event.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"     * @param timeStart starting time of the Event.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"     * @param timeEnd ending time of the Event.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"    public Event(String name, LocalDate timeStart, LocalDate timeEnd) {","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"        super(name);","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"        this.timeStart \u003d timeStart;","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"        this.timeEnd \u003d timeEnd;","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"     * This is an overloading of the constructor for an Event.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"     * @param name name of the Event.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"     * @param isComplete whether the event is complete.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"     * @param timeStart starting time of the Event.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"     * @param timeEnd ending time of the Event.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"    public Event(String name, boolean isComplete, LocalDate timeStart, LocalDate timeEnd) {","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"        super(name, isComplete);","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"        this.timeStart \u003d timeStart;","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"        this.timeEnd \u003d timeEnd;","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"     * Formats the event, for example parsing the start and end times into a more readable format.","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"     * @return a string representation of the event.","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"ruiyangzh"},"content":"    public String toString() {","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"ruiyangzh"},"content":"        return (\"[E]\" + super.toString() + \" (from: \" + timeStart.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"))","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"ruiyangzh"},"content":"                + \" to: \" + timeEnd.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\");","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"ruiyangzh"},"content":"    public String fileFormat() {","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"ruiyangzh"},"content":"        return \"EV\" + DIVIDER + super.fileFormat() + DIVIDER + timeStart + DIVIDER + timeEnd;","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":48}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package task;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":" * A generic task, containing a name and completion status.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"public class Task {","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"    public static final String DIVIDER \u003d \"%!%\";","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"    private String name;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"    private boolean isComplete;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"     * Initializes a task.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"     * @param name name of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"    public Task(String name) {","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"        this.isComplete \u003d false;","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"     * Initializes a task with its status.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"     * @param name name of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"     * @param isComplete whether the task is complete.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"    public Task(String name, boolean isComplete) {","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"        this.isComplete \u003d isComplete;","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"    public void markDone() {","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"        this.isComplete \u003d true;","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"    public void markUndone() {","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"        this.isComplete \u003d false;","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"     * Formats the task for user reading.","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"ruiyangzh"},"content":"     * @return a user-friendly task representation as a String.","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"ruiyangzh"},"content":"    public String toString() {","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"ruiyangzh"},"content":"        if (isComplete) {","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"ruiyangzh"},"content":"            return (\"[X] \" + name);","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"ruiyangzh"},"content":"        return (\"[ ] \" + name);","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"ruiyangzh"},"content":"     * Formats the task for saving to a file.","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"ruiyangzh"},"content":"     * @return file-formatted task String.","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"ruiyangzh"},"content":"    public String fileFormat() {","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"ruiyangzh"},"content":"        if (isComplete) {","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"ruiyangzh"},"content":"            return (\"TRUE\" + DIVIDER + name);","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"ruiyangzh"},"content":"        return (\"FALSE\" + DIVIDER + name);","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":59}},{"path":"src/main/java/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package task;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":" * Represents an extension of a task.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"    public ToDo(String name) {","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"        super(name);","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"    public ToDo(String name, boolean isComplete) {","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"        super(name, isComplete);","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"    public String toString() {","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"    public String fileFormat() {","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"        return \"TD\" + DIVIDER + super.fileFormat();","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":22}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"import static org.junit.jupiter.api.Assertions.assertInstanceOf;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"import command.AddTaskCommand;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"import command.DeleteCommand;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"import command.HelpCommand;","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"import command.ListCommand;","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"import command.MarkCommand;","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"import command.ShutdownCommand;","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.InvalidCommandException;","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.InvalidVarException;","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"public class ParserTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"    Parser testParser \u003d new Parser();","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"    public void simpleTest() {","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"            assertInstanceOf(ShutdownCommand.class, testParser.parse(\"bye\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"            assertInstanceOf(HelpCommand.class, testParser.parse(\"help\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"            assertInstanceOf(ListCommand.class, testParser.parse(\"list\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"            assertInstanceOf(AddTaskCommand.class, testParser.parse(\"event name /from 2001-12-01 /to 2003-12-03\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"            assertInstanceOf(AddTaskCommand.class, testParser.parse(\"deadline name /by 2002-02-01\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"            assertInstanceOf(AddTaskCommand.class, testParser.parse(\"todo name\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"            assertInstanceOf(MarkCommand.class, testParser.parse(\"mark 1\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"            assertInstanceOf(MarkCommand.class, testParser.parse(\"unmark 1\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"            assertInstanceOf(DeleteCommand.class, testParser.parse(\"delete 1\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"        } catch (InvalidVarException | InvalidCommandException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"            System.out.println(e.getMessage() + e.getCause());","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"    public void invalidCommandsTest() {","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidCommandException.class, () -\u003e testParser.parse(\"fljdkfesjflks\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidCommandException.class, () -\u003e  testParser.parse(\"listlistlistlist\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidCommandException.class, () -\u003e  testParser.parse(\"     bye\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidCommandException.class, () -\u003e  testParser.parse(\"deadline\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidCommandException.class, () -\u003e  testParser.parse(\"deadlinne name /by 2001-01-01\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidCommandException.class, () -\u003e  testParser.parse(\"deadLInE name /by 2001-01-01\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"ruiyangzh"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"ruiyangzh"},"content":"    public void invalidVarsTest() {","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidVarException.class, () -\u003e  testParser.parse(\"deadline name /by 2001-1-1\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidVarException.class, () -\u003e testParser.parse(\"bye bye\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidVarException.class, () -\u003e  testParser.parse(\"mark x\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidVarException.class, () -\u003e  testParser.parse(\"mark y\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidVarException.class, () -\u003e  testParser.parse(\"deadline /by 2001-99-99\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidVarException.class, () -\u003e  testParser.parse(\"delete two\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidVarException.class, () -\u003e  testParser.parse(\"todo \"));","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidVarException.class, () -\u003e  testParser.parse(\"mark \"));","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidVarException.class, () -\u003e  testParser.parse(\"delete \"));","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":59}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.CorruptedFileException;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"import task.ToDo;","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"public class TaskListTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"    public void corruptionTest() {","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"        Storage corrupted \u003d new Storage();","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"        TaskList corruptionList \u003d new TaskList(corrupted);","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"    try {","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"        corrupted.init(\"./data/corruptedStorage.txt\");","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"    } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"        fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(CorruptedFileException.class, () -\u003e corruptionList.loadFromDisk());","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"    public void TaskListTest() {","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"        Storage tester \u003d new Storage();","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"        TaskList testerList \u003d new TaskList(tester);","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"            tester.init(\"./data/testStorage.txt\");","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"        assertDoesNotThrow(() -\u003e testerList.loadFromDisk());","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"        assertDoesNotThrow(() -\u003e testerList.addTask(new ToDo(\"name\")));","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"            assertEquals(true, testerList.setMark(0, true));","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"        });","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"ruiyangzh"},"content":"            assertEquals(true, testerList.setMark(0, true));","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"ruiyangzh"},"content":"        });","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"ruiyangzh"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"ruiyangzh"},"content":"            assertEquals(true, testerList.setMark(0, false));","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"ruiyangzh"},"content":"        });","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"ruiyangzh"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"ruiyangzh"},"content":"            assertEquals(false, testerList.setMark(-1, true));","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"ruiyangzh"},"content":"        });","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"ruiyangzh"},"content":"        assertDoesNotThrow(() -\u003e tester.clear());","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":50}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"event test1 /from start /to end","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"todo test 2","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"deadline test 3 /by dead line","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"mark 2","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"mark 2","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"unmark 2","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"unmark 2","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"unknown command","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"bye bye","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"bye","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"ruiyangzh":16}}]
