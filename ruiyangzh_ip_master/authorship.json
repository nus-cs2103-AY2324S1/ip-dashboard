[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"# duke project template","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"3. After that, locate the `src/main/java/duke.java` file, right-click it, and choose `Run duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ruiyangzh":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.13\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"checkstyle {","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"    apply plugin: \u0027idea\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"idea {","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"    module {","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"        inheritOutputDirs \u003d true","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"javafx {","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"ruiyangzh"},"content":"    version \u003d \"16\"","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"ruiyangzh"},"content":"    mainClass.set(\"duke.Launcher\")","lastModifiedDate":"2023-09-04"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":68,"author":{"gitId":"ruiyangzh"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-09-11"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ruiyangzh":29,"-":40}},{"path":"data/corruptedStorage.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"hjgkjafdbnhd","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"dfhdjkfdhf","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"sdefhjdsa,fmdsanf","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"adjkbaLFDHAELIUREQWYREHDQW","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":4}},{"path":"src/main/java/command/AddTaskExecutable.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"import duke.UserInterface;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.FailureInExecuteException;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"import task.Task;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":" * AddTaskExecutable represents a command that adds a task to the list.","lastModifiedDate":"2023-09-11"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"public class AddTaskExecutable implements Executable {","lastModifiedDate":"2023-09-11"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"    private final Task task;","lastModifiedDate":"2023-09-13"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"     * Creates an executable with its task to be added upon execution.","lastModifiedDate":"2023-09-14"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"     * @param task the task to be added.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"    public AddTaskExecutable(Task task) {","lastModifiedDate":"2023-09-14"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"        assert task !\u003d null;","lastModifiedDate":"2023-09-14"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"     * Executes the adding of the task to the list provided, and provides outputs for the interface to print.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"     * @param list the list that receives the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"     * @param ui the interface that prints out any necessary outputs.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"     * @return false, since the execution does not end the bot.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"     * @throws FailureInExecuteException when there is a failure in writing to the list or its associated file.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"    @Override","lastModifiedDate":"2023-09-10"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"    public boolean execute(TaskList list, UserInterface ui) throws FailureInExecuteException {","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"            list.addTask(task);","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"            throw new FailureInExecuteException(e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"        ui.output(\"Added successfully!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"        ui.output(task.toString());","lastModifiedDate":"2023-09-13"},{"lineNumber":40,"author":{"gitId":"ruiyangzh"},"content":"        return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":42}},{"path":"src/main/java/command/ClearExecutable.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"import duke.UserInterface;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.FailureInExecuteException;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-11"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":" * Clears the list.","lastModifiedDate":"2023-09-11"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-11"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"public class ClearExecutable implements Executable {","lastModifiedDate":"2023-09-11"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"     * Clears the list, and produces an output if successful.","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"     * @param list list to be cleared.","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"     * @param ui the ui to output to if successful.","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"     * @return false, since the method does not terminate the bot.","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"     * @throws FailureInExecuteException if we cannot clear.","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"    public boolean execute(TaskList list, UserInterface ui) throws FailureInExecuteException {","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"            list.clear();","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"            throw new FailureInExecuteException(\"Could not clear;\" + e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"        ui.output(\"Cleared!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"        return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":31}},{"path":"src/main/java/command/DeleteExecutable.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"import duke.UserInterface;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.FailureInExecuteException;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":" * Represents a deletion executable of a particular task.","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"public class DeleteExecutable implements Executable {","lastModifiedDate":"2023-09-11"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"    private final int index;","lastModifiedDate":"2023-09-13"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"     * Generates a new delete command.","lastModifiedDate":"2023-09-13"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"     * @param index the index to be deleted.","lastModifiedDate":"2023-09-13"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"    public DeleteExecutable(int index) {","lastModifiedDate":"2023-09-14"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"     * Executes the deletion of the task from the list provided, and provides outputs for the interface to print.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"     * @param list the list that contains the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"     * @param ui the interface that prints out any necessary outputs.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"     * @return false, since the execution does not end the bot.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"     * @throws FailureInExecuteException when there is a failure in writing to the list or its associated file,","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"     *     and when the index does not exist in the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"    @Override","lastModifiedDate":"2023-09-10"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"    public boolean execute(TaskList list, UserInterface ui) throws FailureInExecuteException {","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"            if (!list.removeTask(index)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"                throw new FailureInExecuteException(\"Out of list index\");","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"            throw new FailureInExecuteException(e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"ruiyangzh"},"content":"        ui.output(\"deleted task indexed at \" + index + \" successfully\");","lastModifiedDate":"2023-09-13"},{"lineNumber":41,"author":{"gitId":"ruiyangzh"},"content":"        return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":43}},{"path":"src/main/java/command/Executable.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package command;","lastModifiedDate":"2023-09-10"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-10"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"import duke.UserInterface;","lastModifiedDate":"2023-09-10"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.FailureInExecuteException;","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-10"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":" * A general interface that represents a command, which executes,","lastModifiedDate":"2023-09-10"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":" * and returns a boolean that represents if the program is shutting down.","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":" * if the execution causes the program to shut down. Also, able to throw a FailureInExecuteException if the execution","lastModifiedDate":"2023-09-10"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":" * happens to fail for one reason or another.","lastModifiedDate":"2023-09-10"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-10"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"public interface Executable {","lastModifiedDate":"2023-09-10"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"    boolean execute(TaskList list, UserInterface ui) throws FailureInExecuteException;","lastModifiedDate":"2023-09-10"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"    // TODO: implement a help() function that makes the HelpCommand\u0027s job easier","lastModifiedDate":"2023-09-10"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"    // void help();","lastModifiedDate":"2023-09-10"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-10"}],"authorContributionMap":{"ruiyangzh":20}},{"path":"src/main/java/command/FindExecutable.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"import duke.UserInterface;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.FailureInExecuteException;","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"import task.Task;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-11"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":" * Represents an execution call to find a particular keyword in the tasklist.","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-11"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"public class FindExecutable implements Executable {","lastModifiedDate":"2023-09-11"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"    private final String keyword;","lastModifiedDate":"2023-09-14"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"     * Generates a new find command.","lastModifiedDate":"2023-09-14"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"     * @param keyword the keyword to be searched.","lastModifiedDate":"2023-09-14"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"    public FindExecutable(String keyword) {","lastModifiedDate":"2023-09-14"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"    @Override","lastModifiedDate":"2023-09-10"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"    public boolean execute(TaskList list, UserInterface ui) throws FailureInExecuteException {","lastModifiedDate":"2023-09-14"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"        ArrayList\u003cTask\u003e res \u003d list.findTasksMatching(keyword);","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"        if (res.isEmpty()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"            ui.output(\"Could not find task\");","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"            StringBuilder ans \u003d new StringBuilder(\"Here are the matching items.\");","lastModifiedDate":"2023-09-10"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"            for (int i \u003d 0; i \u003c res.size(); i++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"                ans.append(\"\\n\");","lastModifiedDate":"2023-09-14"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"                ans.append(i + 1);","lastModifiedDate":"2023-09-14"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"                ans.append(\". \");","lastModifiedDate":"2023-09-14"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"                ans.append(res.get(i).toString());","lastModifiedDate":"2023-09-14"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"            ui.output(ans.toString());","lastModifiedDate":"2023-09-10"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"        return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":38}},{"path":"src/main/java/command/HelpExecutable.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import duke.UserInterface;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":" * Represents a command that prints a list of functions.","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"public class HelpExecutable implements Executable {","lastModifiedDate":"2023-09-11"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"     * Provides a string for the interface to print, providing a list of helpful commands.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"     * @param list the associated list(not needed).","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"     * @param ui the interface that prints out the help guide.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"     * @return false, since the execution does not end the bot.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"    public boolean execute(TaskList list, UserInterface ui) {","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"        ui.output(\"Here\u0027s the guidelines for all functions.\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"                + \"help: lists this help guide\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"                + \"list: lists all tasks\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"                + \"bye: ends bot\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"                + \"mark: mark (int x); marks indicated task\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"                + \"unmark: unmark (int x); unmarks indicated task\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"                + \"event: event (String name) /from (Date start) /to (Date end); creates event\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"                + \"todo: todo (String name); creates todo\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"                + \"deadline: deadline (String name) /by (Date deadline); creates deadline\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"                + \"delete: delete(int x); deletes the indicated task\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"                + \"find: find(String keyword); finds any tasks that contain the keyword\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"        );","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"        return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":31}},{"path":"src/main/java/command/ListExecutable.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import duke.UserInterface;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":" * Represents an executable that outputs the list of tasks.","lastModifiedDate":"2023-09-11"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"public class ListExecutable implements Executable {","lastModifiedDate":"2023-09-11"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"     * Prints out the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"     * @param list the list to be printed","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"     * @param ui the interface that prints out the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"     * @return false, since the execution does not end the bot.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"    @Override","lastModifiedDate":"2023-09-10"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"    public boolean execute(TaskList list, UserInterface ui) {","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"        ui.output(list.listString());","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"        return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":20}},{"path":"src/main/java/command/MarkExecutable.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"import duke.UserInterface;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.FailureInExecuteException;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":" * Represents the marking or unmarking of a certain task.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"public class MarkExecutable implements Executable {","lastModifiedDate":"2023-09-11"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"    private final boolean isToBeMarked;","lastModifiedDate":"2023-09-10"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"    private final int targetIndex;","lastModifiedDate":"2023-09-13"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"     * Produces a Mark executable.","lastModifiedDate":"2023-09-14"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"     * @param isToBeMarked the marking to be set.","lastModifiedDate":"2023-09-14"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"     * @param index the index to be set.","lastModifiedDate":"2023-09-14"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"    public MarkExecutable(boolean isToBeMarked, int index) {","lastModifiedDate":"2023-09-14"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"        this.isToBeMarked \u003d isToBeMarked;","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"        this.targetIndex \u003d index;","lastModifiedDate":"2023-09-13"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"     * Executes the marking/unmarking of a given task.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"     * @param list the list that contains the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"     * @param ui the interface that prints out any necessary outputs.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"     * @return false, since the execution does not end the bot.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"     * @throws FailureInExecuteException when there is a failure in marking the task, or the task does not exist.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"    @Override","lastModifiedDate":"2023-09-10"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"    public boolean execute(TaskList list, UserInterface ui) throws FailureInExecuteException {","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"            if (!list.setMark(targetIndex, isToBeMarked)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"                throw new FailureInExecuteException(\"Out of list index\");","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"ruiyangzh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"ruiyangzh"},"content":"            throw new FailureInExecuteException(e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"ruiyangzh"},"content":"        ui.output(\"marked task \" + targetIndex);","lastModifiedDate":"2023-09-13"},{"lineNumber":44,"author":{"gitId":"ruiyangzh"},"content":"        return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":46}},{"path":"src/main/java/command/ShutdownExecutable.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import duke.UserInterface;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":" * Represents a call for the bot to be shut down, which will be interpreted by Duke.","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"public class ShutdownExecutable implements Executable {","lastModifiedDate":"2023-09-11"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"     * Indicates that the bot is to be shut down.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"     * @param list the list that contains the task. (not necessary)","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"     * @param ui the interface that prints out any necessary outputs.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"     * @return true, since the execution ends the bot.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"    @Override","lastModifiedDate":"2023-09-10"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"    public boolean execute(TaskList list, UserInterface ui) {","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"        ui.output(\"Shutting down now!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"        return true;","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"ruiyangzh":20}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package duke;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-10"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-10"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-11"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":" * A dialog box that holds text and an image representing the originator of the text.","lastModifiedDate":"2023-09-11"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-11"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-11"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"     * Creates the dialogbox, setting its size and contents.","lastModifiedDate":"2023-09-11"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"     * @param l the text to be represented.","lastModifiedDate":"2023-09-11"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"     * @param iv the image to be represented.","lastModifiedDate":"2023-09-11"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-11"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"    public DialogBox(Label l, ImageView iv) {","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"        l.setWrapText(true);","lastModifiedDate":"2023-09-10"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"        iv.setFitWidth(100.0);","lastModifiedDate":"2023-09-10"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"        iv.setFitHeight(100.0);","lastModifiedDate":"2023-09-10"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"        this.setAlignment(Pos.TOP_RIGHT);","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"        this.getChildren().addAll(l, iv);","lastModifiedDate":"2023-09-10"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-10"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"    private void flip() {","lastModifiedDate":"2023-09-10"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"        this.setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-10"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-10"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"        FXCollections.reverse(tmp);","lastModifiedDate":"2023-09-10"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"        this.getChildren().setAll(tmp);","lastModifiedDate":"2023-09-10"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"    public static DialogBox getUserDialog(Label l, ImageView iv) {","lastModifiedDate":"2023-09-10"},{"lineNumber":40,"author":{"gitId":"ruiyangzh"},"content":"        return new DialogBox(l, iv);","lastModifiedDate":"2023-09-10"},{"lineNumber":41,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":42,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":43,"author":{"gitId":"ruiyangzh"},"content":"    public static DialogBox getDukeDialog(Label l, ImageView iv) {","lastModifiedDate":"2023-09-10"},{"lineNumber":44,"author":{"gitId":"ruiyangzh"},"content":"        var db \u003d new DialogBox(l, iv);","lastModifiedDate":"2023-09-10"},{"lineNumber":45,"author":{"gitId":"ruiyangzh"},"content":"        db.flip();","lastModifiedDate":"2023-09-10"},{"lineNumber":46,"author":{"gitId":"ruiyangzh"},"content":"        return db;","lastModifiedDate":"2023-09-10"},{"lineNumber":47,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"ruiyangzh":48}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"import command.Executable;","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.CorruptedFileException;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.FailureInExecuteException;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.InvalidCommandException;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.InvalidVarException;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-11"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-09-11"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-11"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":" * Duke represents a chatbot that parses user inputs and commands, stores tasks given to it in memory and on a file,","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":" * and provides a user interface for easier correspondence.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"public class Duke extends Application {","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"    private final TaskList list;","lastModifiedDate":"2023-09-10"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"    private final Storage storage;","lastModifiedDate":"2023-09-10"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"    private final Parser parser;","lastModifiedDate":"2023-09-10"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"    private final UserInterface ui;","lastModifiedDate":"2023-09-10"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"    private String filePath;","lastModifiedDate":"2023-09-10"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"    private String userImagePath;","lastModifiedDate":"2023-09-13"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"    private String dukeImagePath;","lastModifiedDate":"2023-09-13"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"    private String logo;","lastModifiedDate":"2023-09-10"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"     * Creates a new Duke instance.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"    public Duke() {","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"        this.storage \u003d new Storage();","lastModifiedDate":"2023-09-10"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"        this.list \u003d new TaskList(storage);","lastModifiedDate":"2023-09-10"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"        this.parser \u003d new Parser();","lastModifiedDate":"2023-09-10"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"        this.ui \u003d new UserInterface(this);","lastModifiedDate":"2023-09-10"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"        stage.setScene(ui.makeScene());","lastModifiedDate":"2023-09-13"},{"lineNumber":40,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"ruiyangzh"},"content":"        //Step 2. Formatting the window to look as expected","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"ruiyangzh"},"content":"        stage.setTitle(\"Luke\");","lastModifiedDate":"2023-09-10"},{"lineNumber":43,"author":{"gitId":"ruiyangzh"},"content":"        stage.setResizable(false);","lastModifiedDate":"2023-09-11"},{"lineNumber":44,"author":{"gitId":"ruiyangzh"},"content":"        stage.setMinHeight(600.0);","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"ruiyangzh"},"content":"        stage.setMinWidth(400.0);","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"ruiyangzh"},"content":"        stage.show();","lastModifiedDate":"2023-09-10"},{"lineNumber":47,"author":{"gitId":"ruiyangzh"},"content":"        try {","lastModifiedDate":"2023-09-10"},{"lineNumber":48,"author":{"gitId":"ruiyangzh"},"content":"            startup();","lastModifiedDate":"2023-09-10"},{"lineNumber":49,"author":{"gitId":"ruiyangzh"},"content":"            ui.output(\"Hi, I\u0027m \\n\" + logo);","lastModifiedDate":"2023-09-10"},{"lineNumber":50,"author":{"gitId":"ruiyangzh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-10"},{"lineNumber":51,"author":{"gitId":"ruiyangzh"},"content":"            ui.output(\"Could not read from file\");","lastModifiedDate":"2023-09-10"},{"lineNumber":52,"author":{"gitId":"ruiyangzh"},"content":"            closeDuke();","lastModifiedDate":"2023-09-10"},{"lineNumber":53,"author":{"gitId":"ruiyangzh"},"content":"        } catch (CorruptedFileException f) {","lastModifiedDate":"2023-09-10"},{"lineNumber":54,"author":{"gitId":"ruiyangzh"},"content":"            boolean isShuttingDown \u003d corruptedFileHandle();","lastModifiedDate":"2023-09-10"},{"lineNumber":55,"author":{"gitId":"ruiyangzh"},"content":"            if (isShuttingDown) {","lastModifiedDate":"2023-09-10"},{"lineNumber":56,"author":{"gitId":"ruiyangzh"},"content":"                closeDuke();","lastModifiedDate":"2023-09-10"},{"lineNumber":57,"author":{"gitId":"ruiyangzh"},"content":"            }","lastModifiedDate":"2023-09-10"},{"lineNumber":58,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-10"},{"lineNumber":59,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":60,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":61,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":62,"author":{"gitId":"ruiyangzh"},"content":"     * Initializes the storage, list and outputs a greeting.","lastModifiedDate":"2023-09-10"},{"lineNumber":63,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":64,"author":{"gitId":"ruiyangzh"},"content":"    @Override","lastModifiedDate":"2023-09-10"},{"lineNumber":65,"author":{"gitId":"ruiyangzh"},"content":"    public void init() {","lastModifiedDate":"2023-09-10"},{"lineNumber":66,"author":{"gitId":"ruiyangzh"},"content":"        String[] temp \u003d new String[4];","lastModifiedDate":"2023-09-10"},{"lineNumber":67,"author":{"gitId":"ruiyangzh"},"content":"        getParameters().getRaw().toArray(temp);","lastModifiedDate":"2023-09-10"},{"lineNumber":68,"author":{"gitId":"ruiyangzh"},"content":"        filePath \u003d temp[0];","lastModifiedDate":"2023-09-10"},{"lineNumber":69,"author":{"gitId":"ruiyangzh"},"content":"        userImagePath \u003d temp[1];","lastModifiedDate":"2023-09-10"},{"lineNumber":70,"author":{"gitId":"ruiyangzh"},"content":"        dukeImagePath \u003d temp[2];","lastModifiedDate":"2023-09-10"},{"lineNumber":71,"author":{"gitId":"ruiyangzh"},"content":"        logo \u003d temp[3];","lastModifiedDate":"2023-09-10"},{"lineNumber":72,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":73,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"ruiyangzh"},"content":"     * Initializes the storage, list and outputs a greeting.","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"ruiyangzh"},"content":"     * @throws IOException when unable to read from disk.","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"ruiyangzh"},"content":"     * @throws CorruptedFileException when unable to interpret file.","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"ruiyangzh"},"content":"    public void startup() throws CorruptedFileException, IOException {","lastModifiedDate":"2023-09-10"},{"lineNumber":80,"author":{"gitId":"ruiyangzh"},"content":"        storage.init(filePath);","lastModifiedDate":"2023-09-10"},{"lineNumber":81,"author":{"gitId":"ruiyangzh"},"content":"        list.loadFromDisk();","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"ruiyangzh"},"content":"        ui.init(userImagePath, dukeImagePath);","lastModifiedDate":"2023-09-10"},{"lineNumber":83,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":85,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-11"},{"lineNumber":86,"author":{"gitId":"ruiyangzh"},"content":"     * Shuts down duke, performing cleanup tasks along the way.","lastModifiedDate":"2023-09-11"},{"lineNumber":87,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-11"},{"lineNumber":88,"author":{"gitId":"ruiyangzh"},"content":"    public void closeDuke() {","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"ruiyangzh"},"content":"        ui.output(\"Goodbye!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"ruiyangzh"},"content":"        Platform.exit();","lastModifiedDate":"2023-09-10"},{"lineNumber":91,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"ruiyangzh"},"content":"     * Handler is called when a corrupted file is detected, allowing user to decide how to proceed, such as","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"ruiyangzh"},"content":"     * clearing the file or shutting down.","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"ruiyangzh"},"content":"     * @return whether the handler decides to call for a shutdown of the Duke instance.","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"ruiyangzh"},"content":"    public boolean corruptedFileHandle() {","lastModifiedDate":"2023-09-10"},{"lineNumber":98,"author":{"gitId":"ruiyangzh"},"content":"        return true;","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"ruiyangzh"},"content":"        // TODO: make this compatible with the new parsing format","lastModifiedDate":"2023-09-11"},{"lineNumber":100,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-11"},{"lineNumber":103,"author":{"gitId":"ruiyangzh"},"content":"     * Given a string input, the bot handles it and gives an appropriate reply.","lastModifiedDate":"2023-09-11"},{"lineNumber":104,"author":{"gitId":"ruiyangzh"},"content":"     * @param input the string to be parsed.","lastModifiedDate":"2023-09-11"},{"lineNumber":105,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-11"},{"lineNumber":106,"author":{"gitId":"ruiyangzh"},"content":"    public void handle(String input) {","lastModifiedDate":"2023-09-10"},{"lineNumber":107,"author":{"gitId":"ruiyangzh"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"ruiyangzh"},"content":"            Executable command \u003d parser.parse(input);","lastModifiedDate":"2023-09-10"},{"lineNumber":109,"author":{"gitId":"ruiyangzh"},"content":"            assert (command !\u003d null); // Parser should throw an exception if this occurs.","lastModifiedDate":"2023-09-12"},{"lineNumber":110,"author":{"gitId":"ruiyangzh"},"content":"            boolean isShuttingDown \u003d (command.execute(list, ui));","lastModifiedDate":"2023-09-10"},{"lineNumber":111,"author":{"gitId":"ruiyangzh"},"content":"            if (isShuttingDown) {","lastModifiedDate":"2023-09-10"},{"lineNumber":112,"author":{"gitId":"ruiyangzh"},"content":"                closeDuke();","lastModifiedDate":"2023-09-10"},{"lineNumber":113,"author":{"gitId":"ruiyangzh"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"ruiyangzh"},"content":"        } catch (InvalidCommandException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"ruiyangzh"},"content":"            ui.output(\"Unknown command given; \" + e.getMessage());","lastModifiedDate":"2023-09-04"},{"lineNumber":116,"author":{"gitId":"ruiyangzh"},"content":"        } catch (InvalidVarException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"ruiyangzh"},"content":"            ui.output(\"Invalid input; \" + e.getMessage());","lastModifiedDate":"2023-09-04"},{"lineNumber":118,"author":{"gitId":"ruiyangzh"},"content":"        } catch (FailureInExecuteException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"ruiyangzh"},"content":"            ui.output(\"Failure to execute command; \" + e.getMessage());","lastModifiedDate":"2023-09-04"},{"lineNumber":120,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":121,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":122,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"ruiyangzh":122}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package duke;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"public class Launcher {","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"    // DUKE_ARGS contains the required Strings to make Duke adaptable for different file paths and logos.","lastModifiedDate":"2023-09-11"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"    public static final String[] DUKE_ARGS \u003d {","lastModifiedDate":"2023-09-11"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"        \"./data/tasks.txt\",","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"        \"/images/DaUser.png\",","lastModifiedDate":"2023-09-10"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"        \"/images/DaDuke.png\",","lastModifiedDate":"2023-09-10"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"        \" /$$              /$$                \\n\"","lastModifiedDate":"2023-09-11"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"            + \"| $$              | $$                \\n\"","lastModifiedDate":"2023-09-11"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"            + \"| $$ /$$   /$$| $$   /$$  /$$$$$$ \\n\"","lastModifiedDate":"2023-09-11"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"            + \"| $$| $$    | $$| $$  /$$/ /$$__    $$\\n\"","lastModifiedDate":"2023-09-11"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"            + \"| $$| $$    | $$| $$$$$$/ | $$$$$$$$\\n\"","lastModifiedDate":"2023-09-11"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"            + \"| $$| $$    | $$| $$_  $$ | $$_____/\\n\"","lastModifiedDate":"2023-09-11"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"            + \"| $$|  $$$$$$/| $$ \\\\  $$|  $$$$$$$\\n\"","lastModifiedDate":"2023-09-11"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"            + \"|__/ \\\\______/ |__/  \\\\__/ \\\\_______/\"","lastModifiedDate":"2023-09-11"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"    };","lastModifiedDate":"2023-09-10"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"        Application.launch(Duke.class, DUKE_ARGS);","lastModifiedDate":"2023-09-11"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"ruiyangzh":25}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"import java.util.HashMap;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-09-13"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"import command.AddTaskExecutable;","lastModifiedDate":"2023-09-11"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"import command.ClearExecutable;","lastModifiedDate":"2023-09-11"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"import command.DeleteExecutable;","lastModifiedDate":"2023-09-11"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"import command.Executable;","lastModifiedDate":"2023-09-13"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"import command.FindExecutable;","lastModifiedDate":"2023-09-11"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"import command.HelpExecutable;","lastModifiedDate":"2023-09-11"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"import command.ListExecutable;","lastModifiedDate":"2023-09-11"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"import command.MarkExecutable;","lastModifiedDate":"2023-09-11"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"import command.ShutdownExecutable;","lastModifiedDate":"2023-09-11"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.InvalidCommandException;","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.InvalidVarException;","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"import task.Deadline;","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"import task.Event;","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"import task.Task;","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"import task.ToDo;","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":" * Parses inputs passed via the user interface into commands if possible.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"public class Parser {","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"    private final HashMap\u003cString, ParserFunction\u003e stringToCommand;","lastModifiedDate":"2023-09-13"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"     * Initializes the parser.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"    public Parser() {","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"        stringToCommand \u003d new HashMap\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"        init();","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"ruiyangzh"},"content":"     * Initializes the hashmap.","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"ruiyangzh"},"content":"    private void init() {","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"ruiyangzh"},"content":"        stringToCommand.put(\"bye\", Parser::parseShutdownParams);","lastModifiedDate":"2023-09-13"},{"lineNumber":46,"author":{"gitId":"ruiyangzh"},"content":"        stringToCommand.put(\"help\", Parser::parseHelpParams);","lastModifiedDate":"2023-09-13"},{"lineNumber":47,"author":{"gitId":"ruiyangzh"},"content":"        stringToCommand.put(\"list\", Parser::parseListParams);","lastModifiedDate":"2023-09-13"},{"lineNumber":48,"author":{"gitId":"ruiyangzh"},"content":"        stringToCommand.put(\"clear\", Parser::parseClearParams);","lastModifiedDate":"2023-09-13"},{"lineNumber":49,"author":{"gitId":"ruiyangzh"},"content":"        stringToCommand.put(\"todo\", Parser::parseToDoParams);","lastModifiedDate":"2023-09-13"},{"lineNumber":50,"author":{"gitId":"ruiyangzh"},"content":"        stringToCommand.put(\"deadline\", Parser::parseDeadlineParams);","lastModifiedDate":"2023-09-13"},{"lineNumber":51,"author":{"gitId":"ruiyangzh"},"content":"        stringToCommand.put(\"event\", Parser::parseEventParams);","lastModifiedDate":"2023-09-13"},{"lineNumber":52,"author":{"gitId":"ruiyangzh"},"content":"        stringToCommand.put(\"delete\", Parser::parseDeleteParams);","lastModifiedDate":"2023-09-13"},{"lineNumber":53,"author":{"gitId":"ruiyangzh"},"content":"        stringToCommand.put(\"mark\", Parser::parseMarkParams);","lastModifiedDate":"2023-09-13"},{"lineNumber":54,"author":{"gitId":"ruiyangzh"},"content":"        stringToCommand.put(\"unmark\", Parser::parseUnmarkParams);","lastModifiedDate":"2023-09-13"},{"lineNumber":55,"author":{"gitId":"ruiyangzh"},"content":"        stringToCommand.put(\"find\", Parser::parseFindParams);","lastModifiedDate":"2023-09-13"},{"lineNumber":56,"author":{"gitId":"ruiyangzh"},"content":"        //Remember to add an entry into the hashmap whenever a command is added.","lastModifiedDate":"2023-09-13"},{"lineNumber":57,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"ruiyangzh"},"content":"     * Parses the string passed to it and produces the corresponding command.","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"ruiyangzh"},"content":"     * @param input the string passed to the parser that is meant to be interpreted.","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"ruiyangzh"},"content":"     * @return the command that the string represents.","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"ruiyangzh"},"content":"     * @throws InvalidCommandException if the command cannot be identified.","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"ruiyangzh"},"content":"     * @throws InvalidVarException if the command is identifiable but the parameters are incorrect.","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"ruiyangzh"},"content":"    public Executable parse(String input) throws InvalidCommandException, InvalidVarException {","lastModifiedDate":"2023-09-10"},{"lineNumber":67,"author":{"gitId":"ruiyangzh"},"content":"        String commandRegex \u003d \"(\\\\S*)\\\\s?(.*)\";","lastModifiedDate":"2023-09-13"},{"lineNumber":68,"author":{"gitId":"ruiyangzh"},"content":"        Matcher matcher \u003d matchString(input, commandRegex);","lastModifiedDate":"2023-09-13"},{"lineNumber":69,"author":{"gitId":"ruiyangzh"},"content":"        String commandIdentifier \u003d matcher.group(1);","lastModifiedDate":"2023-09-13"},{"lineNumber":70,"author":{"gitId":"ruiyangzh"},"content":"        String paramString \u003d matcher.group(2);","lastModifiedDate":"2023-09-13"},{"lineNumber":71,"author":{"gitId":"ruiyangzh"},"content":"        ParserFunction parsable \u003d stringToCommand.get(commandIdentifier);","lastModifiedDate":"2023-09-13"},{"lineNumber":72,"author":{"gitId":"ruiyangzh"},"content":"        checkIfInvalid(parsable);","lastModifiedDate":"2023-09-13"},{"lineNumber":73,"author":{"gitId":"ruiyangzh"},"content":"        return parsable.apply(paramString);","lastModifiedDate":"2023-09-13"},{"lineNumber":74,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":75,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":76,"author":{"gitId":"ruiyangzh"},"content":"    private static Matcher matchString(String input, String regex) throws InvalidVarException {","lastModifiedDate":"2023-09-13"},{"lineNumber":77,"author":{"gitId":"ruiyangzh"},"content":"        Pattern pattern \u003d Pattern.compile(regex);","lastModifiedDate":"2023-09-13"},{"lineNumber":78,"author":{"gitId":"ruiyangzh"},"content":"        Matcher matcher \u003d pattern.matcher(input);","lastModifiedDate":"2023-09-13"},{"lineNumber":79,"author":{"gitId":"ruiyangzh"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2023-09-13"},{"lineNumber":80,"author":{"gitId":"ruiyangzh"},"content":"            throw new InvalidVarException(\"Incorrect format!\");","lastModifiedDate":"2023-09-13"},{"lineNumber":81,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":82,"author":{"gitId":"ruiyangzh"},"content":"        return matcher;","lastModifiedDate":"2023-09-13"},{"lineNumber":83,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":84,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":85,"author":{"gitId":"ruiyangzh"},"content":"    private static boolean parseBoolString(String boolString) throws InvalidVarException {","lastModifiedDate":"2023-09-13"},{"lineNumber":86,"author":{"gitId":"ruiyangzh"},"content":"        if (boolString.equals(\"TRUE\")) {","lastModifiedDate":"2023-09-13"},{"lineNumber":87,"author":{"gitId":"ruiyangzh"},"content":"            return true;","lastModifiedDate":"2023-09-13"},{"lineNumber":88,"author":{"gitId":"ruiyangzh"},"content":"        } else if (boolString.equals(\"FALSE\")) {","lastModifiedDate":"2023-09-13"},{"lineNumber":89,"author":{"gitId":"ruiyangzh"},"content":"            return false;","lastModifiedDate":"2023-09-13"},{"lineNumber":90,"author":{"gitId":"ruiyangzh"},"content":"        } else {","lastModifiedDate":"2023-09-13"},{"lineNumber":91,"author":{"gitId":"ruiyangzh"},"content":"            throw new InvalidVarException(\"Could not read boolean\");","lastModifiedDate":"2023-09-13"},{"lineNumber":92,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":93,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":94,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":95,"author":{"gitId":"ruiyangzh"},"content":"    private static void checkEmpty(String paramString) throws InvalidVarException {","lastModifiedDate":"2023-09-13"},{"lineNumber":96,"author":{"gitId":"ruiyangzh"},"content":"        if (!paramString.isEmpty()) {","lastModifiedDate":"2023-09-13"},{"lineNumber":97,"author":{"gitId":"ruiyangzh"},"content":"            throw new InvalidVarException(\"Too many parameters!\");","lastModifiedDate":"2023-09-13"},{"lineNumber":98,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"ruiyangzh"},"content":"    private static void checkNonEmpty(String paramString) throws InvalidVarException {","lastModifiedDate":"2023-09-13"},{"lineNumber":101,"author":{"gitId":"ruiyangzh"},"content":"        if (paramString.isEmpty()) {","lastModifiedDate":"2023-09-13"},{"lineNumber":102,"author":{"gitId":"ruiyangzh"},"content":"            throw new InvalidVarException(\"No parameters!\");","lastModifiedDate":"2023-09-13"},{"lineNumber":103,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":104,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":105,"author":{"gitId":"ruiyangzh"},"content":"    private static int parseIndex(String paramString) throws InvalidVarException {","lastModifiedDate":"2023-09-13"},{"lineNumber":106,"author":{"gitId":"ruiyangzh"},"content":"        checkNonEmpty(paramString);","lastModifiedDate":"2023-09-13"},{"lineNumber":107,"author":{"gitId":"ruiyangzh"},"content":"        int index;","lastModifiedDate":"2023-09-13"},{"lineNumber":108,"author":{"gitId":"ruiyangzh"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":109,"author":{"gitId":"ruiyangzh"},"content":"            index \u003d Integer.parseInt(paramString);","lastModifiedDate":"2023-09-13"},{"lineNumber":110,"author":{"gitId":"ruiyangzh"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":111,"author":{"gitId":"ruiyangzh"},"content":"            throw new InvalidVarException(\"Task number could not be read\");","lastModifiedDate":"2023-09-13"},{"lineNumber":112,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":113,"author":{"gitId":"ruiyangzh"},"content":"        return index;","lastModifiedDate":"2023-09-13"},{"lineNumber":114,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":115,"author":{"gitId":"ruiyangzh"},"content":"    private static LocalDate parseLocalDate(String dateString) throws InvalidVarException {","lastModifiedDate":"2023-09-13"},{"lineNumber":116,"author":{"gitId":"ruiyangzh"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":117,"author":{"gitId":"ruiyangzh"},"content":"            return LocalDate.parse(dateString);","lastModifiedDate":"2023-09-13"},{"lineNumber":118,"author":{"gitId":"ruiyangzh"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":119,"author":{"gitId":"ruiyangzh"},"content":"            throw new InvalidVarException(\"Could not parse dates!\");","lastModifiedDate":"2023-09-13"},{"lineNumber":120,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":121,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":122,"author":{"gitId":"ruiyangzh"},"content":"    private static Executable parseShutdownParams(String paramString) throws InvalidVarException {","lastModifiedDate":"2023-09-13"},{"lineNumber":123,"author":{"gitId":"ruiyangzh"},"content":"        checkEmpty(paramString);","lastModifiedDate":"2023-09-13"},{"lineNumber":124,"author":{"gitId":"ruiyangzh"},"content":"        return new ShutdownExecutable();","lastModifiedDate":"2023-09-14"},{"lineNumber":125,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":126,"author":{"gitId":"ruiyangzh"},"content":"    private static Executable parseHelpParams(String paramString) throws InvalidVarException {","lastModifiedDate":"2023-09-13"},{"lineNumber":127,"author":{"gitId":"ruiyangzh"},"content":"        checkEmpty(paramString);","lastModifiedDate":"2023-09-13"},{"lineNumber":128,"author":{"gitId":"ruiyangzh"},"content":"        return new HelpExecutable();","lastModifiedDate":"2023-09-14"},{"lineNumber":129,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":130,"author":{"gitId":"ruiyangzh"},"content":"    private static Executable parseListParams(String paramString) throws InvalidVarException {","lastModifiedDate":"2023-09-13"},{"lineNumber":131,"author":{"gitId":"ruiyangzh"},"content":"        checkEmpty(paramString);","lastModifiedDate":"2023-09-13"},{"lineNumber":132,"author":{"gitId":"ruiyangzh"},"content":"        return new ListExecutable();","lastModifiedDate":"2023-09-14"},{"lineNumber":133,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":134,"author":{"gitId":"ruiyangzh"},"content":"    private static Executable parseClearParams(String paramString) throws InvalidVarException {","lastModifiedDate":"2023-09-13"},{"lineNumber":135,"author":{"gitId":"ruiyangzh"},"content":"        checkEmpty(paramString);","lastModifiedDate":"2023-09-13"},{"lineNumber":136,"author":{"gitId":"ruiyangzh"},"content":"        return new ClearExecutable();","lastModifiedDate":"2023-09-14"},{"lineNumber":137,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":138,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":139,"author":{"gitId":"ruiyangzh"},"content":"    private static Executable parseToDoParams(String paramString) throws InvalidVarException {","lastModifiedDate":"2023-09-13"},{"lineNumber":140,"author":{"gitId":"ruiyangzh"},"content":"        checkNonEmpty(paramString);","lastModifiedDate":"2023-09-13"},{"lineNumber":141,"author":{"gitId":"ruiyangzh"},"content":"        Task todo \u003d new ToDo(paramString);","lastModifiedDate":"2023-09-13"},{"lineNumber":142,"author":{"gitId":"ruiyangzh"},"content":"        return new AddTaskExecutable(todo);","lastModifiedDate":"2023-09-14"},{"lineNumber":143,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":144,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":145,"author":{"gitId":"ruiyangzh"},"content":"    private static Executable parseDeadlineParams(String paramString) throws InvalidVarException {","lastModifiedDate":"2023-09-13"},{"lineNumber":146,"author":{"gitId":"ruiyangzh"},"content":"        String deadlineRegex \u003d \"(\\\\S.*)\\\\s/by\\\\s(\\\\S.*)\";","lastModifiedDate":"2023-09-13"},{"lineNumber":147,"author":{"gitId":"ruiyangzh"},"content":"        Matcher matcher \u003d matchString(paramString, deadlineRegex);","lastModifiedDate":"2023-09-13"},{"lineNumber":148,"author":{"gitId":"ruiyangzh"},"content":"        String name \u003d matcher.group(1);","lastModifiedDate":"2023-09-13"},{"lineNumber":149,"author":{"gitId":"ruiyangzh"},"content":"        String deadlineString \u003d matcher.group(2);","lastModifiedDate":"2023-09-13"},{"lineNumber":150,"author":{"gitId":"ruiyangzh"},"content":"        LocalDate deadlineTime \u003d parseLocalDate(deadlineString);","lastModifiedDate":"2023-09-13"},{"lineNumber":151,"author":{"gitId":"ruiyangzh"},"content":"        Deadline deadline \u003d new Deadline(name, deadlineTime);","lastModifiedDate":"2023-09-13"},{"lineNumber":152,"author":{"gitId":"ruiyangzh"},"content":"        return new AddTaskExecutable(deadline);","lastModifiedDate":"2023-09-14"},{"lineNumber":153,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":154,"author":{"gitId":"ruiyangzh"},"content":"    private static Executable parseEventParams(String paramString) throws InvalidVarException {","lastModifiedDate":"2023-09-13"},{"lineNumber":155,"author":{"gitId":"ruiyangzh"},"content":"        String eventRegex \u003d \"(\\\\S.*)\\\\s/from\\\\s(\\\\S.*)\\\\s/to\\\\s(\\\\S.*)\";","lastModifiedDate":"2023-09-13"},{"lineNumber":156,"author":{"gitId":"ruiyangzh"},"content":"        Matcher matcher \u003d matchString(paramString, eventRegex);","lastModifiedDate":"2023-09-13"},{"lineNumber":157,"author":{"gitId":"ruiyangzh"},"content":"        String name \u003d matcher.group(1);","lastModifiedDate":"2023-09-13"},{"lineNumber":158,"author":{"gitId":"ruiyangzh"},"content":"        String startString \u003d matcher.group(2);","lastModifiedDate":"2023-09-13"},{"lineNumber":159,"author":{"gitId":"ruiyangzh"},"content":"        String endString \u003d matcher.group(3);","lastModifiedDate":"2023-09-13"},{"lineNumber":160,"author":{"gitId":"ruiyangzh"},"content":"        LocalDate startTime \u003d parseLocalDate(startString);","lastModifiedDate":"2023-09-13"},{"lineNumber":161,"author":{"gitId":"ruiyangzh"},"content":"        LocalDate endTime \u003d parseLocalDate(endString);","lastModifiedDate":"2023-09-13"},{"lineNumber":162,"author":{"gitId":"ruiyangzh"},"content":"        Event event \u003d new Event(name, startTime, endTime);","lastModifiedDate":"2023-09-13"},{"lineNumber":163,"author":{"gitId":"ruiyangzh"},"content":"        return new AddTaskExecutable(event);","lastModifiedDate":"2023-09-14"},{"lineNumber":164,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":165,"author":{"gitId":"ruiyangzh"},"content":"    private static Executable parseDeleteParams(String paramString) throws InvalidVarException {","lastModifiedDate":"2023-09-13"},{"lineNumber":166,"author":{"gitId":"ruiyangzh"},"content":"        return new DeleteExecutable(parseIndex(paramString));","lastModifiedDate":"2023-09-14"},{"lineNumber":167,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":168,"author":{"gitId":"ruiyangzh"},"content":"    private static Executable parseMarkParams(String paramString) throws InvalidVarException {","lastModifiedDate":"2023-09-13"},{"lineNumber":169,"author":{"gitId":"ruiyangzh"},"content":"        return new MarkExecutable(true, parseIndex(paramString));","lastModifiedDate":"2023-09-14"},{"lineNumber":170,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":171,"author":{"gitId":"ruiyangzh"},"content":"    private static Executable parseUnmarkParams(String paramString) throws InvalidVarException {","lastModifiedDate":"2023-09-13"},{"lineNumber":172,"author":{"gitId":"ruiyangzh"},"content":"        return new MarkExecutable(false, parseIndex(paramString));","lastModifiedDate":"2023-09-14"},{"lineNumber":173,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":174,"author":{"gitId":"ruiyangzh"},"content":"    private static Executable parseFindParams(String paramString) throws InvalidVarException {","lastModifiedDate":"2023-09-13"},{"lineNumber":175,"author":{"gitId":"ruiyangzh"},"content":"        checkNonEmpty(paramString);","lastModifiedDate":"2023-09-13"},{"lineNumber":176,"author":{"gitId":"ruiyangzh"},"content":"        return new FindExecutable(paramString);","lastModifiedDate":"2023-09-14"},{"lineNumber":177,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":178,"author":{"gitId":"ruiyangzh"},"content":"    private static void checkIfInvalid(ParserFunction func) throws InvalidCommandException {","lastModifiedDate":"2023-09-13"},{"lineNumber":179,"author":{"gitId":"ruiyangzh"},"content":"        if (func \u003d\u003d null) {","lastModifiedDate":"2023-09-13"},{"lineNumber":180,"author":{"gitId":"ruiyangzh"},"content":"            throw new InvalidCommandException(\"No such command found!\");","lastModifiedDate":"2023-09-13"},{"lineNumber":181,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":182,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":183,"author":{"gitId":"ruiyangzh"},"content":"    private static ToDo todoFromString(String string) throws InvalidVarException {","lastModifiedDate":"2023-09-13"},{"lineNumber":184,"author":{"gitId":"ruiyangzh"},"content":"        String todoRegex \u003d \"(.*)\" + Task.DIVIDER + \"(.*)\";","lastModifiedDate":"2023-09-13"},{"lineNumber":185,"author":{"gitId":"ruiyangzh"},"content":"        Matcher matcher \u003d matchString(string, todoRegex);","lastModifiedDate":"2023-09-13"},{"lineNumber":186,"author":{"gitId":"ruiyangzh"},"content":"        boolean isComplete \u003d parseBoolString(matcher.group(1));","lastModifiedDate":"2023-09-13"},{"lineNumber":187,"author":{"gitId":"ruiyangzh"},"content":"        String name \u003d matcher.group(2);","lastModifiedDate":"2023-09-13"},{"lineNumber":188,"author":{"gitId":"ruiyangzh"},"content":"        return new ToDo(name, isComplete);","lastModifiedDate":"2023-09-13"},{"lineNumber":189,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":190,"author":{"gitId":"ruiyangzh"},"content":"    private static Event eventFromString(String string) throws InvalidVarException {","lastModifiedDate":"2023-09-13"},{"lineNumber":191,"author":{"gitId":"ruiyangzh"},"content":"        String eventRegex \u003d \"(.*)\" + Task.DIVIDER + \"(.*)\" + Task.DIVIDER + \"(.*)\" + Task.DIVIDER + \"(.*)\";","lastModifiedDate":"2023-09-13"},{"lineNumber":192,"author":{"gitId":"ruiyangzh"},"content":"        Matcher matcher \u003d matchString(string, eventRegex);","lastModifiedDate":"2023-09-13"},{"lineNumber":193,"author":{"gitId":"ruiyangzh"},"content":"        boolean isComplete \u003d parseBoolString(matcher.group(1));","lastModifiedDate":"2023-09-13"},{"lineNumber":194,"author":{"gitId":"ruiyangzh"},"content":"        String name \u003d matcher.group(2);","lastModifiedDate":"2023-09-13"},{"lineNumber":195,"author":{"gitId":"ruiyangzh"},"content":"        LocalDate startTime \u003d parseLocalDate(matcher.group(3));","lastModifiedDate":"2023-09-13"},{"lineNumber":196,"author":{"gitId":"ruiyangzh"},"content":"        LocalDate endTime \u003d parseLocalDate(matcher.group(4));","lastModifiedDate":"2023-09-13"},{"lineNumber":197,"author":{"gitId":"ruiyangzh"},"content":"        return new Event(name, isComplete, startTime, endTime);","lastModifiedDate":"2023-09-13"},{"lineNumber":198,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":199,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":200,"author":{"gitId":"ruiyangzh"},"content":"    private static Deadline deadlineFromString(String string) throws InvalidVarException {","lastModifiedDate":"2023-09-13"},{"lineNumber":201,"author":{"gitId":"ruiyangzh"},"content":"        String deadlineRegex \u003d \"(.*)\" + Task.DIVIDER + \"(.*)\" + Task.DIVIDER + \"(.*)\";","lastModifiedDate":"2023-09-13"},{"lineNumber":202,"author":{"gitId":"ruiyangzh"},"content":"        Matcher matcher \u003d matchString(string, deadlineRegex);","lastModifiedDate":"2023-09-13"},{"lineNumber":203,"author":{"gitId":"ruiyangzh"},"content":"        boolean isComplete \u003d parseBoolString(matcher.group(1));","lastModifiedDate":"2023-09-13"},{"lineNumber":204,"author":{"gitId":"ruiyangzh"},"content":"        String name \u003d matcher.group(2);","lastModifiedDate":"2023-09-13"},{"lineNumber":205,"author":{"gitId":"ruiyangzh"},"content":"        LocalDate deadline \u003d parseLocalDate(matcher.group(3));","lastModifiedDate":"2023-09-13"},{"lineNumber":206,"author":{"gitId":"ruiyangzh"},"content":"        return new Deadline(name, isComplete, deadline);","lastModifiedDate":"2023-09-13"},{"lineNumber":207,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":208,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":209,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":210,"author":{"gitId":"ruiyangzh"},"content":"     * Produces a task from a string, if the string is valid.","lastModifiedDate":"2023-09-14"},{"lineNumber":211,"author":{"gitId":"ruiyangzh"},"content":"     * @param string the string to be transformed.","lastModifiedDate":"2023-09-14"},{"lineNumber":212,"author":{"gitId":"ruiyangzh"},"content":"     * @return the task representation of the string if valid.","lastModifiedDate":"2023-09-14"},{"lineNumber":213,"author":{"gitId":"ruiyangzh"},"content":"     * @throws InvalidVarException when the string is not in the proper format.","lastModifiedDate":"2023-09-14"},{"lineNumber":214,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":215,"author":{"gitId":"ruiyangzh"},"content":"    public static Task taskFromString(String string) throws InvalidVarException {","lastModifiedDate":"2023-09-13"},{"lineNumber":216,"author":{"gitId":"ruiyangzh"},"content":"        String[] temp \u003d string.split(Task.DIVIDER, 2);","lastModifiedDate":"2023-09-14"},{"lineNumber":217,"author":{"gitId":"ruiyangzh"},"content":"        if (temp.length \u003d\u003d 1) {","lastModifiedDate":"2023-09-13"},{"lineNumber":218,"author":{"gitId":"ruiyangzh"},"content":"            throw new InvalidVarException();","lastModifiedDate":"2023-09-13"},{"lineNumber":219,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":220,"author":{"gitId":"ruiyangzh"},"content":"        String taskIdentifier \u003d temp[0];","lastModifiedDate":"2023-09-13"},{"lineNumber":221,"author":{"gitId":"ruiyangzh"},"content":"        String input \u003d temp[1];","lastModifiedDate":"2023-09-13"},{"lineNumber":222,"author":{"gitId":"ruiyangzh"},"content":"        switch (taskIdentifier) {","lastModifiedDate":"2023-09-13"},{"lineNumber":223,"author":{"gitId":"ruiyangzh"},"content":"        case (\"TD\"):","lastModifiedDate":"2023-09-13"},{"lineNumber":224,"author":{"gitId":"ruiyangzh"},"content":"            return todoFromString(input);","lastModifiedDate":"2023-09-13"},{"lineNumber":225,"author":{"gitId":"ruiyangzh"},"content":"        case (\"DL\"):","lastModifiedDate":"2023-09-13"},{"lineNumber":226,"author":{"gitId":"ruiyangzh"},"content":"            return deadlineFromString(input);","lastModifiedDate":"2023-09-13"},{"lineNumber":227,"author":{"gitId":"ruiyangzh"},"content":"        case (\"EV\"):","lastModifiedDate":"2023-09-13"},{"lineNumber":228,"author":{"gitId":"ruiyangzh"},"content":"            return eventFromString(input);","lastModifiedDate":"2023-09-13"},{"lineNumber":229,"author":{"gitId":"ruiyangzh"},"content":"        default:","lastModifiedDate":"2023-09-13"},{"lineNumber":230,"author":{"gitId":"ruiyangzh"},"content":"            throw new InvalidVarException();","lastModifiedDate":"2023-09-13"},{"lineNumber":231,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":232,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":233,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":233}},{"path":"src/main/java/duke/ParserFunction.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package duke;","lastModifiedDate":"2023-09-13"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import command.Executable;","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.InvalidVarException;","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":" * Represents a function in the parser that can throw an InvalidVarException.","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"@FunctionalInterface","lastModifiedDate":"2023-09-13"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"public interface ParserFunction {","lastModifiedDate":"2023-09-13"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"    Executable apply(String paramString) throws InvalidVarException;","lastModifiedDate":"2023-09-13"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-13"}],"authorContributionMap":{"ruiyangzh":12}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import java.io.File;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":" * Represents a file on the disk that contains strings.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"public class Storage {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"    private File storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"    public Storage() {","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"     * Initializes the storage file to the specified path name.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"     * @param pathName the path name of the file to be associated with this object.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"     * @throws IOException if the file does not exist, and we are unable to create a new file in the specified path.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"    public void init(String pathName) throws IOException {","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"        storage \u003d new File(pathName);","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"        storage.createNewFile();","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"     * Clears the file to an empty text if possible.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"     * @throws IOException if we cannot clear the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"    public void clear() throws IOException {","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"        storage.createNewFile();","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"        writeToDisk(new ArrayList\u003c\u003e());","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"     * Writes to the file given an input.","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"     * @param list An ArrayList representing what we want to write to the disk. (Can be empty.)","lastModifiedDate":"2023-09-11"},{"lineNumber":40,"author":{"gitId":"ruiyangzh"},"content":"     * @throws IOException if we cannot write to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"ruiyangzh"},"content":"    public void writeToDisk(ArrayList\u003cString\u003e list) throws IOException {","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"ruiyangzh"},"content":"        FileWriter writer \u003d new FileWriter(storage);","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"ruiyangzh"},"content":"        for (String obj : list) {","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"ruiyangzh"},"content":"            writer.write(obj);","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"ruiyangzh"},"content":"            writer.write(\"\\n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"ruiyangzh"},"content":"        writer.close();","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"ruiyangzh"},"content":"     * Produces an ArrayList of type String that represents the text file associated with this instance.","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"ruiyangzh"},"content":"     * @return ArrayList of type String that represents the text file associated with this instance. (can be empty)","lastModifiedDate":"2023-09-11"},{"lineNumber":54,"author":{"gitId":"ruiyangzh"},"content":"     * @throws IOException if we cannot read from the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"ruiyangzh"},"content":"    public ArrayList\u003cString\u003e loadFromDisk() throws IOException {","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"ruiyangzh"},"content":"        ArrayList\u003cString\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"ruiyangzh"},"content":"        Scanner storageScanner \u003d new Scanner(storage);","lastModifiedDate":"2023-09-10"},{"lineNumber":59,"author":{"gitId":"ruiyangzh"},"content":"        while (storageScanner.hasNextLine()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"ruiyangzh"},"content":"            result.add(storageScanner.nextLine());","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"ruiyangzh"},"content":"        return result;","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"ruiyangzh":64}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.CorruptedFileException;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.InvalidVarException;","lastModifiedDate":"2023-09-13"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"import task.Task;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":" * A tasklist that stores a group of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"public class TaskList {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"    private final ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2023-09-13"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"    private final Storage storage;","lastModifiedDate":"2023-09-10"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"     * Initializes a tasklist, with its associated file.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"     * @param storage the file associated with the tasklist.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"    public TaskList(Storage storage) {","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"        taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"     * Loads the tasklist from the associated file.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"     * @throws IOException if we cannot read from the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"     * @throws CorruptedFileException if the file cannot be interpreted.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"    public void loadFromDisk() throws IOException, CorruptedFileException {","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"        taskList.addAll(stringListToTaskList(storage.loadFromDisk()));","lastModifiedDate":"2023-09-13"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"     * Writes the tasklist to the associated file.","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"     * @throws IOException if the file cannot be written to.","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"    public void writeToDisk() throws IOException {","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"ruiyangzh"},"content":"        storage.writeToDisk(taskListToStringList(taskList));","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"ruiyangzh"},"content":"     * Adds a task to the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"ruiyangzh"},"content":"     * @param task task to be added.","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"ruiyangzh"},"content":"     * @throws IOException if we cannot write the task to disk.","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"ruiyangzh"},"content":"    public void addTask(Task task) throws IOException {","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"ruiyangzh"},"content":"        assert (task !\u003d null);","lastModifiedDate":"2023-09-11"},{"lineNumber":51,"author":{"gitId":"ruiyangzh"},"content":"        taskList.add(task);","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"ruiyangzh"},"content":"        writeToDisk();","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"ruiyangzh"},"content":"     * Removes a task from the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"ruiyangzh"},"content":"     * @param index index of the task to be removed.","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"ruiyangzh"},"content":"     * @return whether the index exists in the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"ruiyangzh"},"content":"     * @throws IOException if the index exists and was deleted, but we cannot write the change to disk.","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"ruiyangzh"},"content":"    public boolean removeTask(int index) throws IOException {","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"ruiyangzh"},"content":"        if (index \u003e taskList.size()) {","lastModifiedDate":"2023-09-13"},{"lineNumber":63,"author":{"gitId":"ruiyangzh"},"content":"            return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"ruiyangzh"},"content":"        taskList.remove(index);","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"ruiyangzh"},"content":"        writeToDisk();","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"ruiyangzh"},"content":"        return true;","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":70,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-11"},{"lineNumber":71,"author":{"gitId":"ruiyangzh"},"content":"     * Clears the tasklist and saves that information to the disk.","lastModifiedDate":"2023-09-11"},{"lineNumber":72,"author":{"gitId":"ruiyangzh"},"content":"     * @throws IOException if the disk cannot be written to.","lastModifiedDate":"2023-09-11"},{"lineNumber":73,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-11"},{"lineNumber":74,"author":{"gitId":"ruiyangzh"},"content":"    public void clear() throws IOException {","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"ruiyangzh"},"content":"        taskList.clear();","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"ruiyangzh"},"content":"        writeToDisk();","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":79,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":80,"author":{"gitId":"ruiyangzh"},"content":"     * sets the done status of the indicated task.","lastModifiedDate":"2023-09-12"},{"lineNumber":81,"author":{"gitId":"ruiyangzh"},"content":"     * @param targetIndex the index to have its mark set.","lastModifiedDate":"2023-09-12"},{"lineNumber":82,"author":{"gitId":"ruiyangzh"},"content":"     * @param isToBeMarkedAs the status that the mark is to be changed to.","lastModifiedDate":"2023-09-12"},{"lineNumber":83,"author":{"gitId":"ruiyangzh"},"content":"     * @return a boolean representing if the marking was successful.","lastModifiedDate":"2023-09-12"},{"lineNumber":84,"author":{"gitId":"ruiyangzh"},"content":"     * @throws IOException if we cannot save the marking to the disk.","lastModifiedDate":"2023-09-12"},{"lineNumber":85,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":86,"author":{"gitId":"ruiyangzh"},"content":"    public boolean setMark(int targetIndex, boolean isToBeMarkedAs) throws IOException {","lastModifiedDate":"2023-09-12"},{"lineNumber":87,"author":{"gitId":"ruiyangzh"},"content":"        if (targetIndex \u003e taskList.size() || targetIndex \u003c 0) {","lastModifiedDate":"2023-09-13"},{"lineNumber":88,"author":{"gitId":"ruiyangzh"},"content":"            return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"ruiyangzh"},"content":"        if (isToBeMarkedAs) {","lastModifiedDate":"2023-09-12"},{"lineNumber":91,"author":{"gitId":"ruiyangzh"},"content":"            taskList.get(targetIndex).markDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"ruiyangzh"},"content":"        } else {","lastModifiedDate":"2023-09-13"},{"lineNumber":93,"author":{"gitId":"ruiyangzh"},"content":"            taskList.get(targetIndex).markUndone();","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"ruiyangzh"},"content":"        writeToDisk();","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"ruiyangzh"},"content":"        return true;","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":99,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":100,"author":{"gitId":"ruiyangzh"},"content":"     * Converts an ArrayList containing strings representing tasks to an arraylist that contains Task objects.","lastModifiedDate":"2023-09-12"},{"lineNumber":101,"author":{"gitId":"ruiyangzh"},"content":"     * @param stringArrayList the target of conversion.","lastModifiedDate":"2023-09-12"},{"lineNumber":102,"author":{"gitId":"ruiyangzh"},"content":"     * @return the converted version of stringArrayList.","lastModifiedDate":"2023-09-12"},{"lineNumber":103,"author":{"gitId":"ruiyangzh"},"content":"     * @throws CorruptedFileException if any of the strings cannot be converted to a task object.","lastModifiedDate":"2023-09-12"},{"lineNumber":104,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":105,"author":{"gitId":"ruiyangzh"},"content":"    private ArrayList\u003cTask\u003e stringListToTaskList(ArrayList\u003cString\u003e stringArrayList) throws CorruptedFileException {","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"ruiyangzh"},"content":"        ArrayList\u003cTask\u003e res \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"ruiyangzh"},"content":"        for (String s : stringArrayList) {","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"ruiyangzh"},"content":"            try {","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"ruiyangzh"},"content":"                res.add(Parser.taskFromString(s));","lastModifiedDate":"2023-09-13"},{"lineNumber":110,"author":{"gitId":"ruiyangzh"},"content":"            } catch (InvalidVarException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":111,"author":{"gitId":"ruiyangzh"},"content":"                throw new CorruptedFileException();","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"ruiyangzh"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"ruiyangzh"},"content":"        return res;","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":118,"author":{"gitId":"ruiyangzh"},"content":"     * Converts an Arraylist containing Tasks to an ArrayList that holds the string representation of those tasks.","lastModifiedDate":"2023-09-12"},{"lineNumber":119,"author":{"gitId":"ruiyangzh"},"content":"     * @param taskArrayList the ArrayList to be converted.","lastModifiedDate":"2023-09-12"},{"lineNumber":120,"author":{"gitId":"ruiyangzh"},"content":"     * @return the converted ArrayList.","lastModifiedDate":"2023-09-12"},{"lineNumber":121,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":122,"author":{"gitId":"ruiyangzh"},"content":"    private ArrayList\u003cString\u003e taskListToStringList(ArrayList\u003cTask\u003e taskArrayList) {","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"ruiyangzh"},"content":"        ArrayList\u003cString\u003e res \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"ruiyangzh"},"content":"        for (Task s : taskArrayList) {","lastModifiedDate":"2023-09-01"},{"lineNumber":125,"author":{"gitId":"ruiyangzh"},"content":"            res.add(s.fileFormat());","lastModifiedDate":"2023-09-01"},{"lineNumber":126,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":127,"author":{"gitId":"ruiyangzh"},"content":"        return res;","lastModifiedDate":"2023-09-01"},{"lineNumber":128,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":129,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-11"},{"lineNumber":131,"author":{"gitId":"ruiyangzh"},"content":"     * Finds any matching tasks that contain the keyword in their string representation.","lastModifiedDate":"2023-09-11"},{"lineNumber":132,"author":{"gitId":"ruiyangzh"},"content":"     * @param keyword the keyword that is to be searched for.","lastModifiedDate":"2023-09-11"},{"lineNumber":133,"author":{"gitId":"ruiyangzh"},"content":"     * @return an arrayList containing the tasks that contain the keywords (can be empty.)","lastModifiedDate":"2023-09-11"},{"lineNumber":134,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-11"},{"lineNumber":135,"author":{"gitId":"ruiyangzh"},"content":"    public ArrayList\u003cTask\u003e findTasksMatching(String keyword) {","lastModifiedDate":"2023-09-01"},{"lineNumber":136,"author":{"gitId":"ruiyangzh"},"content":"        ArrayList\u003cTask\u003e res \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":137,"author":{"gitId":"ruiyangzh"},"content":"        for (Task t: taskList) {","lastModifiedDate":"2023-09-01"},{"lineNumber":138,"author":{"gitId":"ruiyangzh"},"content":"            if (t.toString().contains(keyword)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":139,"author":{"gitId":"ruiyangzh"},"content":"                res.add(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":140,"author":{"gitId":"ruiyangzh"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":141,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"ruiyangzh"},"content":"        return res;","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":144,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":145,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":146,"author":{"gitId":"ruiyangzh"},"content":"     * Produces a string representation of the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":147,"author":{"gitId":"ruiyangzh"},"content":"     * @return a string representation of the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":149,"author":{"gitId":"ruiyangzh"},"content":"    public String listString() {","lastModifiedDate":"2023-09-01"},{"lineNumber":150,"author":{"gitId":"ruiyangzh"},"content":"        if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2023-09-13"},{"lineNumber":151,"author":{"gitId":"ruiyangzh"},"content":"            return (\"No list, silly!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":152,"author":{"gitId":"ruiyangzh"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":153,"author":{"gitId":"ruiyangzh"},"content":"            StringBuilder res \u003d new StringBuilder(\"Here\u0027s the list so far.\");","lastModifiedDate":"2023-09-10"},{"lineNumber":154,"author":{"gitId":"ruiyangzh"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2023-09-13"},{"lineNumber":155,"author":{"gitId":"ruiyangzh"},"content":"                res.append(\"\\n\");","lastModifiedDate":"2023-09-13"},{"lineNumber":156,"author":{"gitId":"ruiyangzh"},"content":"                res.append(i + 1);","lastModifiedDate":"2023-09-13"},{"lineNumber":157,"author":{"gitId":"ruiyangzh"},"content":"                res.append(\". \");","lastModifiedDate":"2023-09-13"},{"lineNumber":158,"author":{"gitId":"ruiyangzh"},"content":"                res.append(taskList.get(i));","lastModifiedDate":"2023-09-13"},{"lineNumber":159,"author":{"gitId":"ruiyangzh"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":160,"author":{"gitId":"ruiyangzh"},"content":"            assert !(res.toString().isBlank()); // Should not be blank if we passed the taskList.isEmpty() check.","lastModifiedDate":"2023-09-11"},{"lineNumber":161,"author":{"gitId":"ruiyangzh"},"content":"            return res.toString();","lastModifiedDate":"2023-09-10"},{"lineNumber":162,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":163,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":164,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"ruiyangzh":164}},{"path":"src/main/java/duke/UserInterface.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import java.util.Objects;","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.CorruptedFileException;","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-10"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-10"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":" * Represents the user interface of an application.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"public class UserInterface {","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-13"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"    private final Duke duke;","lastModifiedDate":"2023-09-10"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"    private Image userImg;","lastModifiedDate":"2023-09-10"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"    private Image dukeImg;","lastModifiedDate":"2023-09-10"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"    public UserInterface(Duke duke) {","lastModifiedDate":"2023-09-10"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"        this.duke \u003d duke;","lastModifiedDate":"2023-09-10"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-11"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"     * Initializes the images into the interface.","lastModifiedDate":"2023-09-11"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"     * @param userImagePath relative path of the user image.","lastModifiedDate":"2023-09-11"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"     * @param dukeImagePath relative path of the duke image.","lastModifiedDate":"2023-09-11"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"     * @throws CorruptedFileException if the files do not exist.","lastModifiedDate":"2023-09-11"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-11"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"    public void init(String userImagePath, String dukeImagePath) throws CorruptedFileException {","lastModifiedDate":"2023-09-10"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"        try {","lastModifiedDate":"2023-09-10"},{"lineNumber":40,"author":{"gitId":"ruiyangzh"},"content":"            assert(userImagePath !\u003d null \u0026\u0026 dukeImagePath !\u003d null); //Means the arguments are passed wrongly.","lastModifiedDate":"2023-09-13"},{"lineNumber":41,"author":{"gitId":"ruiyangzh"},"content":"            this.userImg \u003d new Image(Objects.requireNonNull(this.getClass().getResourceAsStream(userImagePath)));","lastModifiedDate":"2023-09-13"},{"lineNumber":42,"author":{"gitId":"ruiyangzh"},"content":"            this.dukeImg \u003d new Image(Objects.requireNonNull(this.getClass().getResourceAsStream(dukeImagePath)));","lastModifiedDate":"2023-09-13"},{"lineNumber":43,"author":{"gitId":"ruiyangzh"},"content":"        } catch (NullPointerException e) {","lastModifiedDate":"2023-09-10"},{"lineNumber":44,"author":{"gitId":"ruiyangzh"},"content":"            throw new CorruptedFileException();","lastModifiedDate":"2023-09-10"},{"lineNumber":45,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-10"},{"lineNumber":46,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-11"},{"lineNumber":48,"author":{"gitId":"ruiyangzh"},"content":"     * Creates the scene that we want to use to represent the chatbot.","lastModifiedDate":"2023-09-11"},{"lineNumber":49,"author":{"gitId":"ruiyangzh"},"content":"     * @return the chatbot\u0027s scene.","lastModifiedDate":"2023-09-11"},{"lineNumber":50,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-11"},{"lineNumber":51,"author":{"gitId":"ruiyangzh"},"content":"    public Scene makeScene() {","lastModifiedDate":"2023-09-13"},{"lineNumber":52,"author":{"gitId":"ruiyangzh"},"content":"        spawnUiElements();","lastModifiedDate":"2023-09-13"},{"lineNumber":53,"author":{"gitId":"ruiyangzh"},"content":"        setUiSettings();","lastModifiedDate":"2023-09-13"},{"lineNumber":54,"author":{"gitId":"ruiyangzh"},"content":"        setAnchorPaneSettings();","lastModifiedDate":"2023-09-13"},{"lineNumber":55,"author":{"gitId":"ruiyangzh"},"content":"        addUiFunctionality();","lastModifiedDate":"2023-09-13"},{"lineNumber":56,"author":{"gitId":"ruiyangzh"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"ruiyangzh"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);","lastModifiedDate":"2023-09-04"},{"lineNumber":58,"author":{"gitId":"ruiyangzh"},"content":"        return new Scene(mainLayout);","lastModifiedDate":"2023-09-13"},{"lineNumber":59,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":60,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-11"},{"lineNumber":62,"author":{"gitId":"ruiyangzh"},"content":"     * Sends the input to duke, for it to handle and reply (or not.)","lastModifiedDate":"2023-09-11"},{"lineNumber":63,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-11"},{"lineNumber":64,"author":{"gitId":"ruiyangzh"},"content":"    public void input() {","lastModifiedDate":"2023-09-13"},{"lineNumber":65,"author":{"gitId":"ruiyangzh"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-13"},{"lineNumber":66,"author":{"gitId":"ruiyangzh"},"content":"        assert (input !\u003d null);","lastModifiedDate":"2023-09-14"},{"lineNumber":67,"author":{"gitId":"ruiyangzh"},"content":"        Label inputLabel \u003d new Label(input);","lastModifiedDate":"2023-09-13"},{"lineNumber":68,"author":{"gitId":"ruiyangzh"},"content":"        DialogBox userDialog \u003d DialogBox.getUserDialog(inputLabel, new ImageView(userImg));","lastModifiedDate":"2023-09-13"},{"lineNumber":69,"author":{"gitId":"ruiyangzh"},"content":"        dialogContainer.getChildren().add(userDialog);","lastModifiedDate":"2023-09-13"},{"lineNumber":70,"author":{"gitId":"ruiyangzh"},"content":"        duke.handle(input);","lastModifiedDate":"2023-09-13"},{"lineNumber":71,"author":{"gitId":"ruiyangzh"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-13"},{"lineNumber":72,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":73,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":75,"author":{"gitId":"ruiyangzh"},"content":"     * Takes a string and prints it out to the system, while formatting it with line dividers.","lastModifiedDate":"2023-09-13"},{"lineNumber":76,"author":{"gitId":"ruiyangzh"},"content":"     * @param output the string to be printed.","lastModifiedDate":"2023-09-13"},{"lineNumber":77,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":78,"author":{"gitId":"ruiyangzh"},"content":"    public void output(String output) {","lastModifiedDate":"2023-09-13"},{"lineNumber":79,"author":{"gitId":"ruiyangzh"},"content":"        assert (output !\u003d null);","lastModifiedDate":"2023-09-14"},{"lineNumber":80,"author":{"gitId":"ruiyangzh"},"content":"        Label dukeLabel \u003d new Label(output);","lastModifiedDate":"2023-09-13"},{"lineNumber":81,"author":{"gitId":"ruiyangzh"},"content":"        DialogBox dukeDialog \u003d DialogBox.getDukeDialog(dukeLabel, new ImageView(dukeImg));","lastModifiedDate":"2023-09-13"},{"lineNumber":82,"author":{"gitId":"ruiyangzh"},"content":"        dialogContainer.getChildren().add(dukeDialog);","lastModifiedDate":"2023-09-13"},{"lineNumber":83,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":84,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":85,"author":{"gitId":"ruiyangzh"},"content":"    private void spawnUiElements() {","lastModifiedDate":"2023-09-13"},{"lineNumber":86,"author":{"gitId":"ruiyangzh"},"content":"        scrollPane \u003d new ScrollPane();","lastModifiedDate":"2023-09-13"},{"lineNumber":87,"author":{"gitId":"ruiyangzh"},"content":"        dialogContainer \u003d new VBox();","lastModifiedDate":"2023-09-13"},{"lineNumber":88,"author":{"gitId":"ruiyangzh"},"content":"        scrollPane.setContent(dialogContainer);","lastModifiedDate":"2023-09-13"},{"lineNumber":89,"author":{"gitId":"ruiyangzh"},"content":"        userInput \u003d new TextField();","lastModifiedDate":"2023-09-13"},{"lineNumber":90,"author":{"gitId":"ruiyangzh"},"content":"        sendButton \u003d new Button(\"Send\");","lastModifiedDate":"2023-09-13"},{"lineNumber":91,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":92,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":93,"author":{"gitId":"ruiyangzh"},"content":"    private void setUiSettings() {","lastModifiedDate":"2023-09-13"},{"lineNumber":94,"author":{"gitId":"ruiyangzh"},"content":"        scrollPane.setPrefSize(385, 535);","lastModifiedDate":"2023-09-04"},{"lineNumber":95,"author":{"gitId":"ruiyangzh"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);","lastModifiedDate":"2023-09-04"},{"lineNumber":96,"author":{"gitId":"ruiyangzh"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);","lastModifiedDate":"2023-09-04"},{"lineNumber":97,"author":{"gitId":"ruiyangzh"},"content":"        scrollPane.setVvalue(1.0);","lastModifiedDate":"2023-09-04"},{"lineNumber":98,"author":{"gitId":"ruiyangzh"},"content":"        scrollPane.setFitToWidth(true);","lastModifiedDate":"2023-09-04"},{"lineNumber":99,"author":{"gitId":"ruiyangzh"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);","lastModifiedDate":"2023-09-04"},{"lineNumber":100,"author":{"gitId":"ruiyangzh"},"content":"        userInput.setPrefWidth(325.0);","lastModifiedDate":"2023-09-04"},{"lineNumber":101,"author":{"gitId":"ruiyangzh"},"content":"        sendButton.setPrefWidth(55.0);","lastModifiedDate":"2023-09-04"},{"lineNumber":102,"author":{"gitId":"ruiyangzh"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));","lastModifiedDate":"2023-09-13"},{"lineNumber":103,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":104,"author":{"gitId":"ruiyangzh"},"content":"    private void setAnchorPaneSettings() {","lastModifiedDate":"2023-09-13"},{"lineNumber":105,"author":{"gitId":"ruiyangzh"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);","lastModifiedDate":"2023-09-04"},{"lineNumber":106,"author":{"gitId":"ruiyangzh"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);","lastModifiedDate":"2023-09-04"},{"lineNumber":107,"author":{"gitId":"ruiyangzh"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);","lastModifiedDate":"2023-09-04"},{"lineNumber":108,"author":{"gitId":"ruiyangzh"},"content":"        AnchorPane.setLeftAnchor(userInput , 1.0);","lastModifiedDate":"2023-09-04"},{"lineNumber":109,"author":{"gitId":"ruiyangzh"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);","lastModifiedDate":"2023-09-04"},{"lineNumber":110,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":111,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":112,"author":{"gitId":"ruiyangzh"},"content":"    private void addUiFunctionality() {","lastModifiedDate":"2023-09-13"},{"lineNumber":113,"author":{"gitId":"ruiyangzh"},"content":"        sendButton.setOnMouseClicked((event) -\u003e input());","lastModifiedDate":"2023-09-10"},{"lineNumber":114,"author":{"gitId":"ruiyangzh"},"content":"        userInput.setOnAction((event) -\u003e input());","lastModifiedDate":"2023-09-10"},{"lineNumber":115,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":116}},{"path":"src/main/java/dukeexception/CorruptedFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package dukeexception;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":" * An extension of DukeException, that represents an accessible but incorrectly formatted file.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"public class CorruptedFileException extends DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"    public CorruptedFileException() {","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"        super();","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"    public CorruptedFileException(String s) {","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"        super(s);","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":13}},{"path":"src/main/java/dukeexception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package dukeexception;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":" * Represents any exceptions that are unique to Duke.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"public abstract class DukeException extends Exception {","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"    public DukeException() {","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"        super();","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"    public DukeException(String s) {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"        super(s);","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"ruiyangzh":13}},{"path":"src/main/java/dukeexception/FailureInExecuteException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package dukeexception;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":" * An extension of DukeException, that represents a failure in execution of a Commandable.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"public class FailureInExecuteException extends DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"    public FailureInExecuteException() {","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"        super();","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"    public FailureInExecuteException(String s) {","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"        super(s);","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":14}},{"path":"src/main/java/dukeexception/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package dukeexception;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":" * An extension of DukeException, that represents a bad command input.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"public class InvalidCommandException extends DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"    public InvalidCommandException() {","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"        super();","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"    public InvalidCommandException(String s) {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"        super(s);","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"ruiyangzh":13}},{"path":"src/main/java/dukeexception/InvalidVarException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package dukeexception;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":" * An extension of DukeException, that represents a recognized command with bad arguments.","lastModifiedDate":"2023-09-12"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"public class InvalidVarException extends DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"    public InvalidVarException() {","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"        super();","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"    public InvalidVarException(String s) {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"        super(s);","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"ruiyangzh":13}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package task;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":" * Represents an extension of a task, containing a deadline in terms of LocalDate.","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"    private final LocalDate deadline;","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"     * This is the constructor for a deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"     * @param name name of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"     * @param deadline date at which the task is due.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"    public Deadline(String name, LocalDate deadline) {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"        super(name);","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"     * An overloading of the above method, for when the isComplete is needed as well.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"     * @param name name of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"     * @param isComplete whether the task is complete.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"     * @param deadline date at which the task is due.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"    public Deadline(String name, boolean isComplete, LocalDate deadline) {","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"        super(name, isComplete);","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"     * Creates a readable string interpretation of the Deadline.","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"     * @return a readable Deadline in String form.","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + deadline.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":42,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"ruiyangzh"},"content":"     * Produces a savable format of the Deadline.","lastModifiedDate":"2023-09-12"},{"lineNumber":44,"author":{"gitId":"ruiyangzh"},"content":"     * (We use dividers to minimize the confusion caused by spaces in names.)","lastModifiedDate":"2023-09-12"},{"lineNumber":45,"author":{"gitId":"ruiyangzh"},"content":"     * @return a String format of Deadline with minimal ambiguity in format.","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"ruiyangzh"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"ruiyangzh"},"content":"    public String fileFormat() {","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"ruiyangzh"},"content":"        return \"DL\" + DIVIDER + super.fileFormat() + DIVIDER + deadline;","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":52,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"ruiyangzh":52}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package task;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":" * Represents an extension of a task, containing a start and end time in terms of LocalDate.","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"public class Event extends Task {","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"    private final LocalDate timeStart;","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"    private final LocalDate timeEnd;","lastModifiedDate":"2023-09-10"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"     * This is the constructor for an Event.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"     * @param name name of the Event.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"     * @param timeStart starting time of the Event.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"     * @param timeEnd ending time of the Event.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"    public Event(String name, LocalDate timeStart, LocalDate timeEnd) {","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"        super(name);","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"        this.timeStart \u003d timeStart;","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"        this.timeEnd \u003d timeEnd;","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"     * This is an overloading of the constructor for an Event.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"     * @param name name of the Event.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"     * @param isComplete whether the event is complete.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"     * @param timeStart starting time of the Event.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"     * @param timeEnd ending time of the Event.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"    public Event(String name, boolean isComplete, LocalDate timeStart, LocalDate timeEnd) {","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"        super(name, isComplete);","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"        this.timeStart \u003d timeStart;","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"        this.timeEnd \u003d timeEnd;","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"     * Creates a readable string interpretation of the Event.","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"ruiyangzh"},"content":"     * @return a readable Event in String form.","lastModifiedDate":"2023-09-12"},{"lineNumber":41,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"ruiyangzh"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":43,"author":{"gitId":"ruiyangzh"},"content":"    public String toString() {","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"ruiyangzh"},"content":"        return (\"[E]\" + super.toString() + \" (from: \" + timeStart.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"))","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"ruiyangzh"},"content":"                + \" to: \" + timeEnd.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\");","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":48,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":49,"author":{"gitId":"ruiyangzh"},"content":"     * Produces a saveable format of the Event.","lastModifiedDate":"2023-09-12"},{"lineNumber":50,"author":{"gitId":"ruiyangzh"},"content":"     * (We use dividers to minimize the confusion caused by spaces in names.)","lastModifiedDate":"2023-09-12"},{"lineNumber":51,"author":{"gitId":"ruiyangzh"},"content":"     * @return a String format of Event with minimal ambiguity in format.","lastModifiedDate":"2023-09-12"},{"lineNumber":52,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":53,"author":{"gitId":"ruiyangzh"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":54,"author":{"gitId":"ruiyangzh"},"content":"    public String fileFormat() {","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"ruiyangzh"},"content":"        return \"EV\" + DIVIDER + super.fileFormat() + DIVIDER + timeStart + DIVIDER + timeEnd;","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-13"}],"authorContributionMap":{"ruiyangzh":58}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package task;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":" * A generic task, containing a name and completion status.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"public abstract class Task {","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"    public static final String DIVIDER \u003d \"%!%\";","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"    private final String name;","lastModifiedDate":"2023-09-10"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"    private boolean isComplete;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"     * Initializes a task.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"     * @param name name of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"    public Task(String name) {","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"        this.isComplete \u003d false;","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"     * Initializes a task with its status.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"     * @param name name of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"     * @param isComplete whether the task is complete.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"    public Task(String name, boolean isComplete) {","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"        this.isComplete \u003d isComplete;","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"     * A setter to mark a task as done.","lastModifiedDate":"2023-09-12"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"    public void markDone() {","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"        this.isComplete \u003d true;","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"     * A setter to mark a task as not done.","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":40,"author":{"gitId":"ruiyangzh"},"content":"    public void markUndone() {","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"ruiyangzh"},"content":"        this.isComplete \u003d false;","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"ruiyangzh"},"content":"     * Creates a readable string interpretation of the Task.","lastModifiedDate":"2023-09-12"},{"lineNumber":46,"author":{"gitId":"ruiyangzh"},"content":"     * @return a readable Task in String form.","lastModifiedDate":"2023-09-12"},{"lineNumber":47,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"ruiyangzh"},"content":"    public String toString() {","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"ruiyangzh"},"content":"        if (isComplete) {","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"ruiyangzh"},"content":"            return (\"[X] \" + name);","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"ruiyangzh"},"content":"        return (\"[ ] \" + name);","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"ruiyangzh"},"content":"     * Formats the task for saving to a file.","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"ruiyangzh"},"content":"     * @return file-formatted task String.","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"ruiyangzh"},"content":"    public String fileFormat() {","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"ruiyangzh"},"content":"        if (isComplete) {","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"ruiyangzh"},"content":"            return (\"TRUE\" + DIVIDER + name);","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"ruiyangzh"},"content":"        return (\"FALSE\" + DIVIDER + name);","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":65}},{"path":"src/main/java/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package task;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":" * Represents an extension of a task.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"     * This is the constructor for a deadline.","lastModifiedDate":"2023-09-12"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"     * @param name name of the task.","lastModifiedDate":"2023-09-12"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"    public ToDo(String name) {","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"        super(name);","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-12"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"     * An overloading of the above method, for when the isComplete is needed as well.","lastModifiedDate":"2023-09-12"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"     * @param name name of the task.","lastModifiedDate":"2023-09-12"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"     * @param isComplete whether the task is complete.","lastModifiedDate":"2023-09-12"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"    public ToDo(String name, boolean isComplete) {","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"        super(name, isComplete);","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"     * Creates a readable string interpretation of the to-do.","lastModifiedDate":"2023-09-12"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"     * @return a readable to-do in task form.","lastModifiedDate":"2023-09-12"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"    public String toString() {","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"    /**","lastModifiedDate":"2023-09-12"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"     * Produces a savable format of the to-do.","lastModifiedDate":"2023-09-12"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"     * (We use dividers to minimize the confusion caused by spaces in names.)","lastModifiedDate":"2023-09-12"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"     * @return a String format of to-do with minimal ambiguity in format.","lastModifiedDate":"2023-09-12"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"     */","lastModifiedDate":"2023-09-12"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"    @Override","lastModifiedDate":"2023-09-12"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"    public String fileFormat() {","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"ruiyangzh"},"content":"        return \"TD\" + DIVIDER + super.fileFormat();","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":43}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"import static org.junit.jupiter.api.Assertions.assertInstanceOf;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"import command.AddTaskExecutable;","lastModifiedDate":"2023-09-11"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"import command.DeleteExecutable;","lastModifiedDate":"2023-09-11"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"import command.HelpExecutable;","lastModifiedDate":"2023-09-11"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"import command.ListExecutable;","lastModifiedDate":"2023-09-11"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"import command.MarkExecutable;","lastModifiedDate":"2023-09-11"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"import command.ShutdownExecutable;","lastModifiedDate":"2023-09-11"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.InvalidCommandException;","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.InvalidVarException;","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"public class ParserTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"    Parser testParser \u003d new Parser();","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"    public void simpleTest() {","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"            assertInstanceOf(ShutdownExecutable.class, testParser.parse(\"bye\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"            assertInstanceOf(HelpExecutable.class, testParser.parse(\"help\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"            assertInstanceOf(ListExecutable.class, testParser.parse(\"list\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"            assertInstanceOf(AddTaskExecutable.class, testParser.parse(\"event name /from 2001-12-01 /to 2003-12-03\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"            assertInstanceOf(AddTaskExecutable.class, testParser.parse(\"deadline name /by 2002-02-01\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"            assertInstanceOf(AddTaskExecutable.class, testParser.parse(\"todo name\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"            assertInstanceOf(MarkExecutable.class, testParser.parse(\"mark 1\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"            assertInstanceOf(MarkExecutable.class, testParser.parse(\"unmark 1\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"            assertInstanceOf(DeleteExecutable.class, testParser.parse(\"delete 1\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"        } catch (InvalidVarException | InvalidCommandException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"            System.out.println(e.getMessage() + e.getCause());","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"    public void invalidCommandsTest() {","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidCommandException.class, () -\u003e testParser.parse(\"fljdkfesjflks\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":40,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidCommandException.class, () -\u003e  testParser.parse(\"listlistlistlist\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":41,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidCommandException.class, () -\u003e  testParser.parse(\"     bye\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":42,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidCommandException.class, () -\u003e  testParser.parse(\"deadline\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":43,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidCommandException.class, () -\u003e  testParser.parse(\"deadlinne name /by 2001-01-01\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":44,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidCommandException.class, () -\u003e  testParser.parse(\"deadLInE name /by 2001-01-01\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":45,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"ruiyangzh"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"ruiyangzh"},"content":"    public void invalidVarsTest() {","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidVarException.class, () -\u003e  testParser.parse(\"deadline name /by 2001-1-1\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":50,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidVarException.class, () -\u003e testParser.parse(\"bye bye\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":51,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidVarException.class, () -\u003e  testParser.parse(\"mark x\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":52,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidVarException.class, () -\u003e  testParser.parse(\"mark y\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":53,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidVarException.class, () -\u003e  testParser.parse(\"deadline /by 2001-99-99\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":54,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidVarException.class, () -\u003e  testParser.parse(\"delete two\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":55,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidVarException.class, () -\u003e  testParser.parse(\"todo \"));","lastModifiedDate":"2023-09-14"},{"lineNumber":56,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidVarException.class, () -\u003e  testParser.parse(\"mark \"));","lastModifiedDate":"2023-09-14"},{"lineNumber":57,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(InvalidVarException.class, () -\u003e  testParser.parse(\"delete \"));","lastModifiedDate":"2023-09-14"},{"lineNumber":58,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":59}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"import static org.junit.jupiter.api.Assertions.assertDoesNotThrow;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"import dukeexception.CorruptedFileException;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"import task.ToDo;","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"public class TaskListTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"    public void corruptionTest() {","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"        Storage corrupted \u003d new Storage();","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"        TaskList corruptionList \u003d new TaskList(corrupted);","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"ruiyangzh"},"content":"    try {","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"ruiyangzh"},"content":"        corrupted.init(\"./data/corruptedStorage.txt\");","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"ruiyangzh"},"content":"    } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"ruiyangzh"},"content":"        fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"ruiyangzh"},"content":"        assertThrows(CorruptedFileException.class, () -\u003e corruptionList.loadFromDisk());","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"ruiyangzh"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"ruiyangzh"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"ruiyangzh"},"content":"    public void TaskListTest() {","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"ruiyangzh"},"content":"        Storage tester \u003d new Storage();","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"ruiyangzh"},"content":"        TaskList testerList \u003d new TaskList(tester);","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"ruiyangzh"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"ruiyangzh"},"content":"            tester.init(\"./data/testStorage.txt\");","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"ruiyangzh"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"ruiyangzh"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"ruiyangzh"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"ruiyangzh"},"content":"        assertDoesNotThrow(() -\u003e testerList.loadFromDisk());","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"ruiyangzh"},"content":"        assertDoesNotThrow(() -\u003e testerList.addTask(new ToDo(\"name\")));","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"ruiyangzh"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"ruiyangzh"},"content":"            assertEquals(true, testerList.setMark(0, true));","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"ruiyangzh"},"content":"        });","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"ruiyangzh"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"ruiyangzh"},"content":"            assertEquals(true, testerList.setMark(0, true));","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"ruiyangzh"},"content":"        });","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"ruiyangzh"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"ruiyangzh"},"content":"            assertEquals(true, testerList.setMark(0, false));","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"ruiyangzh"},"content":"        });","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"ruiyangzh"},"content":"        assertDoesNotThrow(() -\u003e {","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"ruiyangzh"},"content":"            assertEquals(false, testerList.setMark(-1, true));","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"ruiyangzh"},"content":"        });","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"ruiyangzh"},"content":"        assertDoesNotThrow(() -\u003e tester.clear());","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"ruiyangzh"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"ruiyangzh"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"ruiyangzh":50}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ruiyangzh"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"ruiyangzh"},"content":"event test1 /from start /to end","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"ruiyangzh"},"content":"todo test 2","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"ruiyangzh"},"content":"deadline test 3 /by dead line","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"ruiyangzh"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"ruiyangzh"},"content":"mark 2","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"ruiyangzh"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"ruiyangzh"},"content":"mark 2","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"ruiyangzh"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"ruiyangzh"},"content":"unmark 2","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"ruiyangzh"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"ruiyangzh"},"content":"unmark 2","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"ruiyangzh"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"ruiyangzh"},"content":"unknown command","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"ruiyangzh"},"content":"bye bye","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"ruiyangzh"},"content":"bye","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"ruiyangzh":16}}]
