[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":"checkstyle {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"HugeNoob"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"HugeNoob":6,"-":41}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":"import duke.commands.Command;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":"import duke.commands.CommandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":" * Duke is a chatbot that helps you keep track of your tasks.","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":" * In this version, Duke is renamed to LilBro.","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"HugeNoob"},"content":"    /** The task list that is used to store the user\u0027s tasks. */","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"HugeNoob"},"content":"    private final TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"HugeNoob"},"content":"    /** The storage that is used to save and load the user\u0027s tasks. */","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"HugeNoob"},"content":"    private final Storage storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"HugeNoob"},"content":"     * Constructs a new Duke object.","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"HugeNoob"},"content":"     * @param path The path to the save file.","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"HugeNoob"},"content":"    public Duke(String path) {","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"HugeNoob"},"content":"        Ui.greet();","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"HugeNoob"},"content":"        Ui.println(\"Checking for a save file...\");","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"HugeNoob"},"content":"        String projectRoot \u003d System.getProperty(\"user.dir\");","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"HugeNoob"},"content":"        String fullPath \u003d Path.of(projectRoot, path).toString();","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"HugeNoob"},"content":"        this.storage \u003d new Storage(fullPath);","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"HugeNoob"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"HugeNoob"},"content":"            storage.load(this.taskList);","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"HugeNoob"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"HugeNoob"},"content":"            Ui.println(e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"HugeNoob"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"HugeNoob"},"content":"        Ui.println(\"OK, ready to roll\");","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":45,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"HugeNoob"},"content":"     * The main method is used to run the program.","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"HugeNoob"},"content":"     * @param args The command line arguments.","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"HugeNoob"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"HugeNoob"},"content":"        new Duke(\"data/tasks.txt\").run();","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"HugeNoob"},"content":"     * Runs the program to interact with the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"HugeNoob"},"content":"    public void run() {","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"HugeNoob"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-21"},{"lineNumber":59,"author":{"gitId":"HugeNoob"},"content":"        Parser parser \u003d new Parser(this.taskList);","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"HugeNoob"},"content":"        while (true) {","lastModifiedDate":"2023-08-21"},{"lineNumber":61,"author":{"gitId":"HugeNoob"},"content":"            String input \u003d scanner.nextLine();","lastModifiedDate":"2023-08-21"},{"lineNumber":62,"author":{"gitId":"HugeNoob"},"content":"            try {","lastModifiedDate":"2023-08-21"},{"lineNumber":63,"author":{"gitId":"HugeNoob"},"content":"                Command command \u003d parser.parse(input);","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"HugeNoob"},"content":"                if (command.getCommandType() \u003d\u003d CommandType.EXIT) {","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"HugeNoob"},"content":"                    break;","lastModifiedDate":"2023-08-21"},{"lineNumber":66,"author":{"gitId":"HugeNoob"},"content":"                }","lastModifiedDate":"2023-08-21"},{"lineNumber":67,"author":{"gitId":"HugeNoob"},"content":"                command.execute();","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"HugeNoob"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"HugeNoob"},"content":"                Ui.println(e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"HugeNoob"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":71,"author":{"gitId":"HugeNoob"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":72,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":73,"author":{"gitId":"HugeNoob"},"content":"        scanner.close();","lastModifiedDate":"2023-08-21"},{"lineNumber":74,"author":{"gitId":"HugeNoob"},"content":"        Ui.println(\"Before you go, let me save your tasks...\");","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"HugeNoob"},"content":"        storage.save(this.taskList);","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"HugeNoob"},"content":"        Ui.bye();","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":78,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"HugeNoob":76,"-":2}},{"path":"src/main/java/duke/commands/AddDeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":"import duke.tasks.TaskType;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":" * Represents a command to add a deadline task.","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"public class AddDeadlineCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"     * Constructs a new AddDeadlineCommand object.","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"     * @param taskList The current list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"     * @param args The arguments supplied by the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":"    public AddDeadlineCommand(TaskList taskList, String args) {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"HugeNoob"},"content":"        super(CommandType.ADD_DEADLINE, taskList, args);","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"HugeNoob"},"content":"     * Adds a deadline task to the list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"HugeNoob"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"HugeNoob"},"content":"    public void execute() {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"HugeNoob"},"content":"        this.taskList.addTask(TaskType.DEADLINE, args);","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"HugeNoob":28}},{"path":"src/main/java/duke/commands/AddEventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":"import duke.tasks.TaskType;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":" * Represents a command to add an event task.","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"public class AddEventCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"     * Constructs a new AddEventCommand object.","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"     * @param taskList The current list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"     * @param args The arguments supplied by the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":"    public AddEventCommand(TaskList taskList, String args) {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"HugeNoob"},"content":"        super(CommandType.ADD_EVENT, taskList, args);","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"HugeNoob"},"content":"     * Adds an event task to the list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"HugeNoob"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"HugeNoob"},"content":"    public void execute() {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"HugeNoob"},"content":"        this.taskList.addTask(TaskType.EVENT, args);","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"HugeNoob":28}},{"path":"src/main/java/duke/commands/AddToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":"import duke.tasks.TaskType;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":" * Represents a command to add a todo task.","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"public class AddToDoCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"     * Constructs a new AddToDoCommand object.","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"     * @param taskList The current list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"     * @param args The arguments supplied by the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":"    public AddToDoCommand(TaskList taskList, String args) {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"HugeNoob"},"content":"        super(CommandType.ADD_TODO, taskList, args);","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"HugeNoob"},"content":"     * Adds a todo task to the list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"HugeNoob"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"HugeNoob"},"content":"    public void execute() {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"HugeNoob"},"content":"        this.taskList.addTask(TaskType.TODO, args);","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"HugeNoob":29}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":" * Represents a command that the user has inputted.","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":"public abstract class Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"    /** The type of Command */","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"    protected final CommandType commandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"    /** The current list of tasks */","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"    protected final TaskList taskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"    /** The arguments supplied by the user */","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":"    protected final String args;","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"HugeNoob"},"content":"     * Constructs a new Command object.","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"HugeNoob"},"content":"     * @param commandType The type of Command.","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"HugeNoob"},"content":"     * @param taskList The current list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"HugeNoob"},"content":"     * @param args The arguments supplied by the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"HugeNoob"},"content":"    public Command(CommandType commandType, TaskList taskList, String args) {","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"HugeNoob"},"content":"        this.commandType \u003d commandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"HugeNoob"},"content":"        this.args \u003d args;","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"HugeNoob"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"HugeNoob"},"content":"     * Executes the command.","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"HugeNoob"},"content":"    public abstract void execute();","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"HugeNoob"},"content":"     * Returns the type of Command.","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"HugeNoob"},"content":"     * @return The type of Command.","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"HugeNoob"},"content":"    public CommandType getCommandType() {","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"HugeNoob"},"content":"        return this.commandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"HugeNoob":45}},{"path":"src/main/java/duke/commands/CommandType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"import duke.exceptions.DukeInvalidCommandException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":" * The command enum is used to store the valid commands that LilBro can","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":" * understand.","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"public enum CommandType {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"    EXIT(\"bye\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"    LIST_TASKS(\"list\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"    ADD_TODO(\"todo\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"    ADD_DEADLINE(\"deadline\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"    ADD_EVENT(\"event\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"    MARK_TASK(\"mark\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"    UNMARK_TASK(\"unmark\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":"    DELETE_TASK(\"delete\"),","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"HugeNoob"},"content":"    FIND_TASK(\"find\");","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"HugeNoob"},"content":"    /** The string representation of the command. */","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"HugeNoob"},"content":"    private final String value;","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"HugeNoob"},"content":"     * The constructor is used to create a new command with the given value.","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"HugeNoob"},"content":"     * @param value The string representation of the command.","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"HugeNoob"},"content":"    private CommandType(String value) {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"HugeNoob"},"content":"        this.value \u003d value;","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"HugeNoob"},"content":"     * The fromString method is used to get the command from the given string.","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"HugeNoob"},"content":"     * @param value The string representation of the command.","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"HugeNoob"},"content":"     * @return The command if it exists, null otherwise.","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"HugeNoob"},"content":"     * @throws DukeInvalidCommandException If the command does not exist.","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"HugeNoob"},"content":"    public static CommandType fromString(String value) throws DukeInvalidCommandException {","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"HugeNoob"},"content":"        for (CommandType command : CommandType.values()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"HugeNoob"},"content":"            if (command.value.equalsIgnoreCase(value)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"HugeNoob"},"content":"                return command;","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"HugeNoob"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"HugeNoob"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"HugeNoob"},"content":"        throw new DukeInvalidCommandException(","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"HugeNoob"},"content":"                \"Not sure what you\u0027re blabbering on about, please use a valid command.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"HugeNoob":48}},{"path":"src/main/java/duke/commands/DeleteTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"import duke.exceptions.DukeInvalidArgumentException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":" * Represents a command to delete a task from the task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"public class DeleteTaskCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"     * Constructs a new DeleteTaskCommand object.","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"     * @param taskList The current list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"     * @param args     The arguments supplied by the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":"    public DeleteTaskCommand(TaskList taskList, String args) {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"HugeNoob"},"content":"        super(CommandType.DELETE_TASK, taskList, args);","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"HugeNoob"},"content":"     * Deletes a task from the list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"HugeNoob"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"HugeNoob"},"content":"    public void execute() {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"HugeNoob"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"HugeNoob"},"content":"            this.taskList.deleteTask(Integer.parseInt(args));","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"HugeNoob"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"HugeNoob"},"content":"            throw new DukeInvalidArgumentException(\"Stop trolling me bro. Please enter a numeric index.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"HugeNoob"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"HugeNoob":32}},{"path":"src/main/java/duke/commands/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":" * Represents a command that the user has inputted.","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"     * Constructs a new ExitCommand object.","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"     * @param taskList The current list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"     * @param args The arguments supplied by the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"    public ExitCommand(TaskList taskList, String args) {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":"        super(CommandType.EXIT, taskList, args);","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"HugeNoob"},"content":"     * No-op for Exit Command.","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"HugeNoob"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"HugeNoob"},"content":"    public void execute() {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"HugeNoob":26}},{"path":"src/main/java/duke/commands/FindTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":" * Represents a command to find tasks containing a user query in their","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":" * description.","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"public class FindTaskCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"     * Constructs a new FindTaskCommand object.","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":"     * @param taskList The current list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"HugeNoob"},"content":"     * @param args     The arguments supplied by the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"HugeNoob"},"content":"    public FindTaskCommand(TaskList taskList, String args) {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"HugeNoob"},"content":"        super(CommandType.FIND_TASK, taskList, args);","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"HugeNoob"},"content":"     * Finds tasks containing a user query in their description.","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"HugeNoob"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"HugeNoob"},"content":"    public void execute() {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"HugeNoob"},"content":"        ArrayList\u003cInteger\u003e found \u003d this.taskList.findTasks(this.args);","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"HugeNoob"},"content":"        if (found.size() \u003d\u003d 0) {","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"HugeNoob"},"content":"            Ui.println(\"No tasks found containing your query.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"HugeNoob"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"HugeNoob"},"content":"            int[] indexes \u003d found.stream().mapToInt(i -\u003e i).toArray();","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"HugeNoob"},"content":"            ArrayList\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"HugeNoob"},"content":"            lines.add(\"Nice! I\u0027ve found some related tasks:\");","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"HugeNoob"},"content":"            for (int i : indexes) {","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"HugeNoob"},"content":"                lines.add((i + 1) + \". \" + this.taskList.getTask(i).toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"HugeNoob"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"HugeNoob"},"content":"            Ui.printlns(lines.toArray(new String[lines.size()]));","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"HugeNoob"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"HugeNoob":42}},{"path":"src/main/java/duke/commands/ListTasksCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":" * Represents a command that the user has inputted.","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":"public class ListTasksCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"     * Constructs a new ListTasksCommand object.","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"     * @param taskList The current list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"     * @param args The arguments supplied by the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"    public ListTasksCommand(TaskList taskList, String args) {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":"        super(CommandType.LIST_TASKS, taskList, args);","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"HugeNoob"},"content":"     * Lists all the tasks in the list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"HugeNoob"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"HugeNoob"},"content":"    public void execute() {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"HugeNoob"},"content":"        this.taskList.listTasks();","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"HugeNoob":27}},{"path":"src/main/java/duke/commands/MarkTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"import duke.exceptions.DukeInvalidArgumentException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":" * Represents a command to mark a task as done.","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"public class MarkTaskCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"     * Constructs a new MarkTaskCommand object.","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"     * @param taskList The current list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"     * @param args The arguments supplied by the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":"    public MarkTaskCommand(TaskList taskList, String args) {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"HugeNoob"},"content":"        super(CommandType.MARK_TASK, taskList, args);","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"HugeNoob"},"content":"     * Marks a task as done in the list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"HugeNoob"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"HugeNoob"},"content":"    public void execute() {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"HugeNoob"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"HugeNoob"},"content":"            this.taskList.markTaskDone(Integer.parseInt(args));","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"HugeNoob"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"HugeNoob"},"content":"            throw new DukeInvalidArgumentException(\"Stop trolling me bro. Please enter a numeric index.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"HugeNoob"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"HugeNoob":32}},{"path":"src/main/java/duke/commands/UnmarkTaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.commands;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"import duke.exceptions.DukeInvalidArgumentException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":" * Represents a command to unmark a task as done.","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"public class UnmarkTaskCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"     * Constructs a new UnmarkTaskCommand object.","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"     * @param taskList The current list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"     * @param args The arguments supplied by the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":"    public UnmarkTaskCommand(TaskList taskList, String args) {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"HugeNoob"},"content":"        super(CommandType.UNMARK_TASK, taskList, args);","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"HugeNoob"},"content":"     * Unmarks a task as done in the list of tasks.","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"HugeNoob"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"HugeNoob"},"content":"    public void execute() {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"HugeNoob"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"HugeNoob"},"content":"            this.taskList.unmarkTaskDone(Integer.parseInt(args));","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"HugeNoob"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"HugeNoob"},"content":"            throw new DukeInvalidArgumentException(\"Stop trolling me bro. Please enter a numeric index.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"HugeNoob"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"HugeNoob":32}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":" * A generic exception class for Duke-related exceptions.","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":"public class DukeException extends RuntimeException {","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"     * Creates a new DukeException object.","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"     * @param message The message of the exception.","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"        super(message);","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"HugeNoob":16}},{"path":"src/main/java/duke/exceptions/DukeInvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":" * Exception thrown when the user inputs an invalid argument to any command.","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":"public class DukeInvalidArgumentException extends DukeException {","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"     * Creates a new DukeInvalidArgumentException object.","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"     * @param message The message of the exception.","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"    public DukeInvalidArgumentException(String message) {","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"        super(message);","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"HugeNoob":16}},{"path":"src/main/java/duke/exceptions/DukeInvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":" * Exception thrown when an invalid command is given.","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":"public class DukeInvalidCommandException extends DukeException {","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"     * Creates a new DukeInvalidCommandException object.","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"     * @param message The message of the exception.","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"    public DukeInvalidCommandException(String message) {","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"        super(message);","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"HugeNoob":16}},{"path":"src/main/java/duke/exceptions/DukeIoException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.exceptions;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":" * The DukeIoException is used to represent an exception that occurs when there is an error","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":" * reading or writing to the local disk.","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":"public class DukeIoException extends DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"     * Creates a new DukeIoException object.","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"     * @param message The message of the exception.","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"    public DukeIoException(String message) {","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"        super(message);","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"HugeNoob":17}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.parser;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"import duke.commands.AddDeadlineCommand;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":"import duke.commands.AddEventCommand;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":"import duke.commands.AddToDoCommand;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":"import duke.commands.Command;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":"import duke.commands.CommandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":"import duke.commands.DeleteTaskCommand;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"import duke.commands.ExitCommand;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"import duke.commands.FindTaskCommand;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"import duke.commands.ListTasksCommand;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"import duke.commands.MarkTaskCommand;","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"import duke.commands.UnmarkTaskCommand;","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"import duke.exceptions.DukeInvalidCommandException;","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"HugeNoob"},"content":" * The parser is used to parse user input into commands.","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"HugeNoob"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"HugeNoob"},"content":"public class Parser {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"HugeNoob"},"content":"    /** The task list to be used by the parser. */","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"HugeNoob"},"content":"    private final TaskList taskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"HugeNoob"},"content":"     * Creates a new Parser object.","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"HugeNoob"},"content":"     * @param taskList The task list to be used by the parser.","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"HugeNoob"},"content":"    public Parser(TaskList taskList) {","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"HugeNoob"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"HugeNoob"},"content":"     * Parses the given input into a command.","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"HugeNoob"},"content":"     * @param input The input to be parsed.","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"HugeNoob"},"content":"     * @return The command that was parsed.","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"HugeNoob"},"content":"     * @throws DukeInvalidCommandException If the given input is invalid.","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"HugeNoob"},"content":"    public Command parse(String input) throws DukeInvalidCommandException {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"HugeNoob"},"content":"        String[] parts \u003d input.split(\" \", 2);","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"HugeNoob"},"content":"        CommandType commandType \u003d CommandType.fromString(parts[0]);","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"HugeNoob"},"content":"        String commandArgs \u003d parts.length \u003e 1 ? parts[1].trim() : \"\";","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"HugeNoob"},"content":"        switch (commandType) {","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"HugeNoob"},"content":"        case EXIT:","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"HugeNoob"},"content":"            return new ExitCommand(this.taskList, commandArgs);","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"HugeNoob"},"content":"        case LIST_TASKS:","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"HugeNoob"},"content":"            return new ListTasksCommand(this.taskList, commandArgs);","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"HugeNoob"},"content":"        case ADD_TODO:","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"HugeNoob"},"content":"            return new AddToDoCommand(this.taskList, commandArgs);","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"HugeNoob"},"content":"        case ADD_DEADLINE:","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"HugeNoob"},"content":"            return new AddDeadlineCommand(this.taskList, commandArgs);","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"HugeNoob"},"content":"        case ADD_EVENT:","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"HugeNoob"},"content":"            return new AddEventCommand(this.taskList, commandArgs);","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"HugeNoob"},"content":"        case MARK_TASK:","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"HugeNoob"},"content":"            return new MarkTaskCommand(this.taskList, commandArgs);","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"HugeNoob"},"content":"        case UNMARK_TASK:","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"HugeNoob"},"content":"            return new UnmarkTaskCommand(this.taskList, commandArgs);","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"HugeNoob"},"content":"        case DELETE_TASK:","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"HugeNoob"},"content":"            return new DeleteTaskCommand(this.taskList, commandArgs);","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"HugeNoob"},"content":"        case FIND_TASK:","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"HugeNoob"},"content":"            return new FindTaskCommand(this.taskList, commandArgs);","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"HugeNoob"},"content":"        default:","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"HugeNoob"},"content":"            throw new DukeInvalidCommandException(\"I\u0027m gonna be honest, no idea what you\u0027re saying.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"HugeNoob"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"HugeNoob":79}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":"import java.io.File;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"import duke.exceptions.DukeIoException;","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"import duke.tasks.TaskType;","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"HugeNoob"},"content":" * The storage is used to save and load tasks from the local disk.","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"HugeNoob"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"HugeNoob"},"content":"public class Storage {","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"HugeNoob"},"content":"    /** The path to the save file. */","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"HugeNoob"},"content":"    private final String path;","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"HugeNoob"},"content":"     * Creates a new Storage object.","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"HugeNoob"},"content":"     * @param path The path to the save file.","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"HugeNoob"},"content":"     * @throws DukeException If there is an error creating the save file.","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"HugeNoob"},"content":"    public Storage(String path) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"HugeNoob"},"content":"        this.path \u003d path;","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"HugeNoob"},"content":"        File file \u003d new File(path);","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"HugeNoob"},"content":"        if (!file.exists()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"HugeNoob"},"content":"            Ui.printlns(new String[] { \"...No saved tasks found.\", \"Creating new save file for you...\" });","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"HugeNoob"},"content":"            try {","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"HugeNoob"},"content":"                file.getParentFile().mkdirs();","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"HugeNoob"},"content":"                FileWriter writer \u003d new FileWriter(file);","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"HugeNoob"},"content":"                writer.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"HugeNoob"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"HugeNoob"},"content":"                throw new DukeIoException(\"Error creating save file: \" + e);","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"HugeNoob"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"HugeNoob"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"HugeNoob"},"content":"     * Loads tasks from the save file into the given task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"HugeNoob"},"content":"     * @param tasklist The task list to be used.","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"HugeNoob"},"content":"     * @throws DukeException If there is an error loading tasks from the save file.","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"HugeNoob"},"content":"    public void load(TaskList tasklist) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"HugeNoob"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"HugeNoob"},"content":"            boolean isEmpty \u003d Files.size(Path.of(path)) \u003d\u003d 0;","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"HugeNoob"},"content":"            if (isEmpty) {","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"HugeNoob"},"content":"                Ui.println(\"Save file empty, you\u0027re good to go.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"HugeNoob"},"content":"                return;","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"HugeNoob"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"HugeNoob"},"content":"            Ui.println(\"Found some old tasks, replaying some commands...\");","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"HugeNoob"},"content":"            BufferedReader reader \u003d new BufferedReader(new FileReader(path));","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"HugeNoob"},"content":"            String line;","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"HugeNoob"},"content":"            while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"HugeNoob"},"content":"                String[] args \u003d line.split(\"\\\\|\\\\|\");","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"HugeNoob"},"content":"                TaskType type \u003d TaskType.valueOf(args[0]);","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"HugeNoob"},"content":"                boolean isDone \u003d args[1].equals(\"1\");","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"HugeNoob"},"content":"                tasklist.addTask(type, args[2]);","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"HugeNoob"},"content":"                if (isDone) {","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"HugeNoob"},"content":"                    tasklist.markTaskDone(tasklist.size());","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"HugeNoob"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"HugeNoob"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"HugeNoob"},"content":"            reader.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"HugeNoob"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"HugeNoob"},"content":"            throw new DukeIoException(\"Error loading tasks from save file: \" + e);","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"HugeNoob"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"HugeNoob"},"content":"     * Saves tasks from the given task list into the save file.","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"HugeNoob"},"content":"     * @param tasklist The task list to be used.","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"HugeNoob"},"content":"     * @throws DukeException If there is an error saving tasks to the save file.","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"HugeNoob"},"content":"    public void save(TaskList tasklist) {","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"HugeNoob"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"HugeNoob"},"content":"            String content \u003d \"\";","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"HugeNoob"},"content":"            FileWriter fileWriter \u003d new FileWriter(path, false);","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"HugeNoob"},"content":"            for (int i \u003d 0; i \u003c tasklist.size(); i++) {","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"HugeNoob"},"content":"                content +\u003d tasklist.getTask(i).getSaveFormat();","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"HugeNoob"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"HugeNoob"},"content":"            fileWriter.write(content);","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"HugeNoob"},"content":"            fileWriter.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"HugeNoob"},"content":"            Ui.println(\"...Successfully saved your tasks!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"HugeNoob"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"HugeNoob"},"content":"            throw new DukeIoException(\"Error saving tasks to local disk: \" + e);","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"HugeNoob"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":100,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"HugeNoob":100}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"import duke.exceptions.DukeInvalidArgumentException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":" * Represents a task that needs to be done before a specific date/time.","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"    /** The date/time of the deadline. */","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"    private String endTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"     * Creates a new Deadline object.","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"     * @param description The description of the deadline.","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":"     * @param endTime     The date/time of the deadline.","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"HugeNoob"},"content":"    public Deadline(String description, String endTime) throws DukeInvalidArgumentException {","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"HugeNoob"},"content":"        super(description);","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"HugeNoob"},"content":"        this.endTime \u003d Task.parseDateInput(endTime);","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"HugeNoob"},"content":"     * Returns the save format of the deadline, to be written to the save file.","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"HugeNoob"},"content":"     * @return The save format of the deadline.","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"HugeNoob"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"HugeNoob"},"content":"    public String getSaveFormat() {","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"HugeNoob"},"content":"        return String.format(\"DEADLINE||%d||%s /by %s\\n\", this.getIsDone() ? 1 : 0, this.getDescription(),","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"HugeNoob"},"content":"                this.endTime);","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"HugeNoob"},"content":"     * Returns the string representation of the deadline.","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"HugeNoob"},"content":"     * @return The string representation of the deadline.","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"HugeNoob"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"HugeNoob"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"HugeNoob"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(), Task.getDateOutputString(endTime));","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"HugeNoob":44}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"import duke.exceptions.DukeInvalidArgumentException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":" * A task that starts at a specific time and ends at a specific time.","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"    /** The start time of the event. */","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"    private String startTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"    /** The end time of the event. */","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"    private String endTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":"     * Creates a new Event object.","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"HugeNoob"},"content":"     * @param description The description of the event.","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"HugeNoob"},"content":"     * @param startTime   The start time of the event.","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"HugeNoob"},"content":"     * @param endTime     The end time of the event.","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"HugeNoob"},"content":"    public Event(String description, String startTime, String endTime) throws DukeInvalidArgumentException {","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"HugeNoob"},"content":"        super(description);","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"HugeNoob"},"content":"        this.startTime \u003d Task.parseDateInput(startTime);","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"HugeNoob"},"content":"        this.endTime \u003d Task.parseDateInput(endTime);","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"HugeNoob"},"content":"     * Returns the save format of the event, to be written to the save file.","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"HugeNoob"},"content":"     * @return The save format of the event.","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"HugeNoob"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"HugeNoob"},"content":"    public String getSaveFormat() {","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"HugeNoob"},"content":"        return String.format(\"EVENT||%d||%s /from %s /to %s\\n\", this.getIsDone() ? 1 : 0, this.getDescription(),","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"HugeNoob"},"content":"                this.startTime, this.endTime);","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"HugeNoob"},"content":"     * Returns the string representation of the event.","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":43,"author":{"gitId":"HugeNoob"},"content":"     * @return The string representation of the event.","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":45,"author":{"gitId":"HugeNoob"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":46,"author":{"gitId":"HugeNoob"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":47,"author":{"gitId":"HugeNoob"},"content":"        return String.format(\"[E]%s (from: %s to: %s)\", super.toString(), Task.getDateOutputString(startTime),","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"HugeNoob"},"content":"                Task.getDateOutputString(endTime));","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":50,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"HugeNoob":50}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":"import duke.exceptions.DukeInvalidArgumentException;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":" * An abstract class that represents a task.","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"    /** The date/time formatter for output to the user. */","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"    private static final DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"EEE dd MMM yyyy HH:mm\");","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"HugeNoob"},"content":"     * The date/time formatter for parsing user input.","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"HugeNoob"},"content":"     * This format is used to format dates internally.","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"HugeNoob"},"content":"    private static final DateTimeFormatter parseFormatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"HugeNoob"},"content":"    /** The description of the task. */","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"HugeNoob"},"content":"    private String description;","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"HugeNoob"},"content":"    /** Whether the task is done. */","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"HugeNoob"},"content":"    private boolean isDone;","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"HugeNoob"},"content":"     * Creates a new Task object.","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"HugeNoob"},"content":"     * @param input The description of the task.","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"HugeNoob"},"content":"    public Task(String input) {","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"HugeNoob"},"content":"        this.description \u003d input;","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"HugeNoob"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"HugeNoob"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"HugeNoob"},"content":"    public void markDone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":43,"author":{"gitId":"HugeNoob"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":45,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":46,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":47,"author":{"gitId":"HugeNoob"},"content":"     * Unmarks the task as not done.","lastModifiedDate":"2023-08-21"},{"lineNumber":48,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":49,"author":{"gitId":"HugeNoob"},"content":"    public void unmarkDone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":50,"author":{"gitId":"HugeNoob"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":51,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":52,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":53,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"HugeNoob"},"content":"     * Returns the description of the task.","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"HugeNoob"},"content":"     * @return The description of the task.","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"HugeNoob"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"HugeNoob"},"content":"        return this.description;","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"HugeNoob"},"content":"     * Returns whether the task is done.","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"HugeNoob"},"content":"     * @return Whether the task is done.","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"HugeNoob"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"HugeNoob"},"content":"        return this.isDone;","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"HugeNoob"},"content":"     * Returns the save format of the task, to be written to the save file.","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"HugeNoob"},"content":"     * @return The save format of the task.","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"HugeNoob"},"content":"    public abstract String getSaveFormat();","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"HugeNoob"},"content":"     * Parses the date input from the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"HugeNoob"},"content":"     * @param input The date input from the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"HugeNoob"},"content":"     * @return The parsed date input.","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"HugeNoob"},"content":"     * @throws DukeInvalidArgumentException If the date input is invalid.","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"HugeNoob"},"content":"    public static String parseDateInput(String input) throws DukeInvalidArgumentException {","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"HugeNoob"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"HugeNoob"},"content":"            return LocalDateTime.parse(input, parseFormatter).format(parseFormatter);","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"HugeNoob"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"HugeNoob"},"content":"            throw new DukeInvalidArgumentException(","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"HugeNoob"},"content":"                    \"Your date seems to be formatted wrongly. Please follow this format: yyyy-MM-dd HH:mm.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"HugeNoob"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"HugeNoob"},"content":"     * Returns the string representation of the date, to be shown to the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"HugeNoob"},"content":"     * @param input The date input from the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"HugeNoob"},"content":"     * @return The string representation of the date.","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"HugeNoob"},"content":"    public static String getDateOutputString(String input) {","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"HugeNoob"},"content":"        return LocalDateTime.parse(input, parseFormatter).format(outputFormatter);","lastModifiedDate":"2023-08-29"},{"lineNumber":102,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":103,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":104,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":105,"author":{"gitId":"HugeNoob"},"content":"     * Returns the string representation of the task.","lastModifiedDate":"2023-08-21"},{"lineNumber":106,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":107,"author":{"gitId":"HugeNoob"},"content":"     * @return The string representation of the task.","lastModifiedDate":"2023-08-21"},{"lineNumber":108,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":109,"author":{"gitId":"HugeNoob"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":110,"author":{"gitId":"HugeNoob"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":111,"author":{"gitId":"HugeNoob"},"content":"        return (this.isDone ? \"[X]\" : \"[ ]\") + \" \" + this.description;","lastModifiedDate":"2023-08-21"},{"lineNumber":112,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":113,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"HugeNoob":113}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":"import duke.exceptions.DukeInvalidArgumentException;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":" * The task list is used to store the user\u0027s tasks.","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"public class TaskList {","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"    /** The list that is used to store the user\u0027s tasks. */","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"    private ArrayList\u003cTask\u003e list;","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":"     * Creates a new TaskList object.","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"HugeNoob"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"HugeNoob"},"content":"        this.list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"HugeNoob"},"content":"     * Gets task at specified index.","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"HugeNoob"},"content":"     * @param index The index of the specified item.","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"HugeNoob"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"HugeNoob"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"HugeNoob"},"content":"        return this.list.get(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"HugeNoob"},"content":"     * Adds a new task to the list.","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"HugeNoob"},"content":"     * @param type       The type of task to be added.","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"HugeNoob"},"content":"     * @param taskString Information about the task to be added.","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"HugeNoob"},"content":"     * @throws DukeInvalidArgumentException If the given taskString is invalid.","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"HugeNoob"},"content":"    public void addTask(TaskType type, String taskString) throws DukeInvalidArgumentException {","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"HugeNoob"},"content":"        switch (type) {","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"HugeNoob"},"content":"        case TODO:","lastModifiedDate":"2023-08-21"},{"lineNumber":43,"author":{"gitId":"HugeNoob"},"content":"            if (taskString.equals(\"\")) {","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"HugeNoob"},"content":"                throw new DukeInvalidArgumentException(\"You didn\u0027t specify a task to do. \"","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"HugeNoob"},"content":"                        + \"Check that you\u0027re doing \\\"todo {description}\\\".\");","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"HugeNoob"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":47,"author":{"gitId":"HugeNoob"},"content":"            this.list.add(new ToDo(taskString));","lastModifiedDate":"2023-08-21"},{"lineNumber":48,"author":{"gitId":"HugeNoob"},"content":"            break;","lastModifiedDate":"2023-08-21"},{"lineNumber":49,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":50,"author":{"gitId":"HugeNoob"},"content":"        case DEADLINE:","lastModifiedDate":"2023-08-21"},{"lineNumber":51,"author":{"gitId":"HugeNoob"},"content":"            try {","lastModifiedDate":"2023-08-21"},{"lineNumber":52,"author":{"gitId":"HugeNoob"},"content":"                String[] deadlineParts \u003d taskString.split(\" /by \", 2);","lastModifiedDate":"2023-08-21"},{"lineNumber":53,"author":{"gitId":"HugeNoob"},"content":"                this.list.add(new Deadline(deadlineParts[0].trim(), deadlineParts[1].trim()));","lastModifiedDate":"2023-08-21"},{"lineNumber":54,"author":{"gitId":"HugeNoob"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-21"},{"lineNumber":55,"author":{"gitId":"HugeNoob"},"content":"                throw new DukeInvalidArgumentException(","lastModifiedDate":"2023-08-21"},{"lineNumber":56,"author":{"gitId":"HugeNoob"},"content":"                        \"Your deadline seems to be formatted wrongly. \"","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"HugeNoob"},"content":"                                + \"Check that you\u0027re doing: \\\"deadline {description} /by {yyyy-MM-dd HH:mm}\\\".\");","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"HugeNoob"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":59,"author":{"gitId":"HugeNoob"},"content":"            break;","lastModifiedDate":"2023-08-21"},{"lineNumber":60,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":61,"author":{"gitId":"HugeNoob"},"content":"        case EVENT:","lastModifiedDate":"2023-08-21"},{"lineNumber":62,"author":{"gitId":"HugeNoob"},"content":"            try {","lastModifiedDate":"2023-08-21"},{"lineNumber":63,"author":{"gitId":"HugeNoob"},"content":"                String[] eventParts \u003d taskString.split(\" /from \", 2);","lastModifiedDate":"2023-08-21"},{"lineNumber":64,"author":{"gitId":"HugeNoob"},"content":"                String description \u003d eventParts[0].trim();","lastModifiedDate":"2023-08-21"},{"lineNumber":65,"author":{"gitId":"HugeNoob"},"content":"                String[] eventTimeParts \u003d eventParts[1].trim().split(\" /to \", 2);","lastModifiedDate":"2023-08-21"},{"lineNumber":66,"author":{"gitId":"HugeNoob"},"content":"                this.list.add(new Event(description, eventTimeParts[0].trim(), eventTimeParts[1].trim()));","lastModifiedDate":"2023-08-21"},{"lineNumber":67,"author":{"gitId":"HugeNoob"},"content":"            } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-21"},{"lineNumber":68,"author":{"gitId":"HugeNoob"},"content":"                throw new DukeInvalidArgumentException(","lastModifiedDate":"2023-08-21"},{"lineNumber":69,"author":{"gitId":"HugeNoob"},"content":"                        \"Your event seems to be formatted wrongly. \"","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"HugeNoob"},"content":"                                + \"Check that you\u0027re doing: \\\"event {description} /from {yyyy-MM-dd HH:mm} \"","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"HugeNoob"},"content":"                                + \"/to {yyyy-MM-dd HH:mm}\\\".\");","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"HugeNoob"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":73,"author":{"gitId":"HugeNoob"},"content":"            break;","lastModifiedDate":"2023-08-21"},{"lineNumber":74,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":75,"author":{"gitId":"HugeNoob"},"content":"        default:","lastModifiedDate":"2023-08-21"},{"lineNumber":76,"author":{"gitId":"HugeNoob"},"content":"            throw new DukeInvalidArgumentException(\"I\u0027m gonna be honest, no idea what you\u0027re saying.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":77,"author":{"gitId":"HugeNoob"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":78,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":79,"author":{"gitId":"HugeNoob"},"content":"        Ui.printlns(new String[] {","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"HugeNoob"},"content":"            \"Got it. I\u0027ve added this task:\",","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"HugeNoob"},"content":"            this.list.get(this.list.size() - 1).toString(),","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"HugeNoob"},"content":"            \"Now you have \" + this.list.size() + \" tasks in the list.\"","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"HugeNoob"},"content":"        });","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":85,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":86,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":87,"author":{"gitId":"HugeNoob"},"content":"     * Marks specified task as done.","lastModifiedDate":"2023-08-21"},{"lineNumber":88,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":89,"author":{"gitId":"HugeNoob"},"content":"     * @param index The index of the task to be marked as done.","lastModifiedDate":"2023-08-21"},{"lineNumber":90,"author":{"gitId":"HugeNoob"},"content":"     * @throws DukeInvalidArgumentException If the index is invalid.","lastModifiedDate":"2023-08-21"},{"lineNumber":91,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":92,"author":{"gitId":"HugeNoob"},"content":"    public void markTaskDone(int index) throws DukeInvalidArgumentException {","lastModifiedDate":"2023-08-21"},{"lineNumber":93,"author":{"gitId":"HugeNoob"},"content":"        if (index \u003c\u003d 0 || index \u003e this.list.size()) {","lastModifiedDate":"2023-08-21"},{"lineNumber":94,"author":{"gitId":"HugeNoob"},"content":"            throw new DukeInvalidArgumentException(","lastModifiedDate":"2023-08-21"},{"lineNumber":95,"author":{"gitId":"HugeNoob"},"content":"                    \"You\u0027ve specified an invalid task number. Check your task list again with the \\\"list\\\" command.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":96,"author":{"gitId":"HugeNoob"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":97,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":98,"author":{"gitId":"HugeNoob"},"content":"        this.list.get(index - 1).markDone();","lastModifiedDate":"2023-08-21"},{"lineNumber":99,"author":{"gitId":"HugeNoob"},"content":"        Ui.printlns(new String[] { \"Nice! I\u0027ve marked this task as done:\", this.list.get(index - 1).toString() });","lastModifiedDate":"2023-08-29"},{"lineNumber":100,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":101,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":102,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":103,"author":{"gitId":"HugeNoob"},"content":"     * Unmarks specified task as not done.","lastModifiedDate":"2023-08-21"},{"lineNumber":104,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":105,"author":{"gitId":"HugeNoob"},"content":"     * @param index The index of the task to be unmarked as not done.","lastModifiedDate":"2023-08-21"},{"lineNumber":106,"author":{"gitId":"HugeNoob"},"content":"     * @throws DukeInvalidArgumentException If the index is invalid.","lastModifiedDate":"2023-08-21"},{"lineNumber":107,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":108,"author":{"gitId":"HugeNoob"},"content":"    public void unmarkTaskDone(int index) throws DukeInvalidArgumentException {","lastModifiedDate":"2023-08-21"},{"lineNumber":109,"author":{"gitId":"HugeNoob"},"content":"        if (index \u003c\u003d 0 || index \u003e this.list.size()) {","lastModifiedDate":"2023-08-21"},{"lineNumber":110,"author":{"gitId":"HugeNoob"},"content":"            throw new DukeInvalidArgumentException(","lastModifiedDate":"2023-08-21"},{"lineNumber":111,"author":{"gitId":"HugeNoob"},"content":"                    \"You\u0027ve specified an invalid task number. Check your task list again with the \\\"list\\\" command.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":112,"author":{"gitId":"HugeNoob"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":113,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":114,"author":{"gitId":"HugeNoob"},"content":"        this.list.get(index - 1).unmarkDone();","lastModifiedDate":"2023-08-21"},{"lineNumber":115,"author":{"gitId":"HugeNoob"},"content":"        Ui.printlns(new String[] { \"OK, I\u0027ve marked this task as not done yet:\", this.list.get(index - 1).toString() });","lastModifiedDate":"2023-08-29"},{"lineNumber":116,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":117,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":118,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":119,"author":{"gitId":"HugeNoob"},"content":"     * Deletes specified task.","lastModifiedDate":"2023-08-21"},{"lineNumber":120,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":121,"author":{"gitId":"HugeNoob"},"content":"     * @param index The index of the task to be deleted.","lastModifiedDate":"2023-08-21"},{"lineNumber":122,"author":{"gitId":"HugeNoob"},"content":"     * @throws DukeInvalidArgumentException If the index is invalid.","lastModifiedDate":"2023-08-21"},{"lineNumber":123,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":124,"author":{"gitId":"HugeNoob"},"content":"    public void deleteTask(int index) throws DukeInvalidArgumentException {","lastModifiedDate":"2023-08-21"},{"lineNumber":125,"author":{"gitId":"HugeNoob"},"content":"        if (index \u003c\u003d 0 || index \u003e this.list.size()) {","lastModifiedDate":"2023-08-21"},{"lineNumber":126,"author":{"gitId":"HugeNoob"},"content":"            throw new DukeInvalidArgumentException(","lastModifiedDate":"2023-08-21"},{"lineNumber":127,"author":{"gitId":"HugeNoob"},"content":"                    \"You\u0027ve specified an invalid task number. Check your task list again with the \\\"list\\\" command.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":128,"author":{"gitId":"HugeNoob"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":129,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":130,"author":{"gitId":"HugeNoob"},"content":"        Ui.printlns(new String[] { \"Noted. I\u0027ve removed this task:\", this.list.get(index - 1).toString() });","lastModifiedDate":"2023-08-29"},{"lineNumber":131,"author":{"gitId":"HugeNoob"},"content":"        this.list.remove(index - 1);","lastModifiedDate":"2023-08-21"},{"lineNumber":132,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":133,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":134,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":135,"author":{"gitId":"HugeNoob"},"content":"     * Lists all tasks.","lastModifiedDate":"2023-08-21"},{"lineNumber":136,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":137,"author":{"gitId":"HugeNoob"},"content":"    public void listTasks() {","lastModifiedDate":"2023-08-21"},{"lineNumber":138,"author":{"gitId":"HugeNoob"},"content":"        if (this.list.isEmpty()) {","lastModifiedDate":"2023-08-21"},{"lineNumber":139,"author":{"gitId":"HugeNoob"},"content":"            Ui.println(\"You have no tasks so far.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":140,"author":{"gitId":"HugeNoob"},"content":"        } else {","lastModifiedDate":"2023-08-21"},{"lineNumber":141,"author":{"gitId":"HugeNoob"},"content":"            String[] lines \u003d new String[1 + this.list.size()];","lastModifiedDate":"2023-08-29"},{"lineNumber":142,"author":{"gitId":"HugeNoob"},"content":"            lines[0] \u003d \"Here are the tasks in your list:\";","lastModifiedDate":"2023-08-29"},{"lineNumber":143,"author":{"gitId":"HugeNoob"},"content":"            for (int i \u003d 0; i \u003c this.list.size(); i++) {","lastModifiedDate":"2023-08-21"},{"lineNumber":144,"author":{"gitId":"HugeNoob"},"content":"                lines[i + 1] \u003d (i + 1) + \". \" + this.list.get(i);","lastModifiedDate":"2023-08-29"},{"lineNumber":145,"author":{"gitId":"HugeNoob"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":146,"author":{"gitId":"HugeNoob"},"content":"            Ui.printlns(lines);","lastModifiedDate":"2023-08-29"},{"lineNumber":147,"author":{"gitId":"HugeNoob"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":148,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":149,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":150,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":151,"author":{"gitId":"HugeNoob"},"content":"     * Returns the size of the list.","lastModifiedDate":"2023-08-30"},{"lineNumber":152,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":153,"author":{"gitId":"HugeNoob"},"content":"     * @return The size of the list.","lastModifiedDate":"2023-08-30"},{"lineNumber":154,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":155,"author":{"gitId":"HugeNoob"},"content":"    public int size() {","lastModifiedDate":"2023-08-29"},{"lineNumber":156,"author":{"gitId":"HugeNoob"},"content":"        return this.list.size();","lastModifiedDate":"2023-08-29"},{"lineNumber":157,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":158,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":159,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":160,"author":{"gitId":"HugeNoob"},"content":"     * Find tasks that contain a specified query in their description.","lastModifiedDate":"2023-08-30"},{"lineNumber":161,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":162,"author":{"gitId":"HugeNoob"},"content":"     * @param query A query specified by the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":163,"author":{"gitId":"HugeNoob"},"content":"     * @return An ArrayList containing the index of items that contain the specified","lastModifiedDate":"2023-08-30"},{"lineNumber":164,"author":{"gitId":"HugeNoob"},"content":"     *         query.","lastModifiedDate":"2023-08-30"},{"lineNumber":165,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":166,"author":{"gitId":"HugeNoob"},"content":"    public ArrayList\u003cInteger\u003e findTasks(String query) {","lastModifiedDate":"2023-08-30"},{"lineNumber":167,"author":{"gitId":"HugeNoob"},"content":"        ArrayList\u003cInteger\u003e result \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":168,"author":{"gitId":"HugeNoob"},"content":"        String loweredQuery \u003d query.toLowerCase();","lastModifiedDate":"2023-08-30"},{"lineNumber":169,"author":{"gitId":"HugeNoob"},"content":"        for (int i \u003d 0; i \u003c this.list.size(); i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":170,"author":{"gitId":"HugeNoob"},"content":"            if (this.list.get(i).getDescription().toLowerCase().contains(loweredQuery)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":171,"author":{"gitId":"HugeNoob"},"content":"                result.add(i);","lastModifiedDate":"2023-08-30"},{"lineNumber":172,"author":{"gitId":"HugeNoob"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":173,"author":{"gitId":"HugeNoob"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":174,"author":{"gitId":"HugeNoob"},"content":"        return result;","lastModifiedDate":"2023-08-30"},{"lineNumber":175,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":176,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"HugeNoob":176}},{"path":"src/main/java/duke/tasks/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":" * Represents different types of tasks.","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":"public enum TaskType {","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":"    TODO(\"todo\"),","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":"    DEADLINE(\"deadline\"),","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"    EVENT(\"event\");","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"    /** The string representation of the command. */","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"    private final String type;","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"     * The constructor is used to create a new command with the given value.","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":"     * @param value The string representation of the command.","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"HugeNoob"},"content":"    private TaskType(String type) {","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"HugeNoob"},"content":"        this.type \u003d type;","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"HugeNoob":22}},{"path":"src/main/java/duke/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":" * Represents tasks without any date/time attached to it.","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"     * Creates a new ToDo object.","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"     * @param description The description of the ToDo.","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"        super(description);","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"HugeNoob"},"content":"     * Returns the save format of the ToDo, to be written to the save file.","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"HugeNoob"},"content":"     * @return The save format of the ToDo.","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"HugeNoob"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"HugeNoob"},"content":"    public String getSaveFormat() {","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"HugeNoob"},"content":"        return String.format(\"TODO||%d||%s\\n\", this.getIsDone() ? 1 : 0, this.getDescription());","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"HugeNoob"},"content":"     * Returns the string representation of the ToDo.","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"HugeNoob"},"content":"     * @return The string representation of the ToDo.","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"HugeNoob"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"HugeNoob"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"HugeNoob"},"content":"        return String.format(\"[T]%s\", super.toString());","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"HugeNoob":37}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":" * Handles user interface outputs","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":"public class Ui {","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":"    /** The divider to be used to separate outputs */","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"    public static final String DIVIDER \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"     * Prints single-line input, with divider above and below.","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"     * @param input The input to be printed.","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"    public static void println(String input) {","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"HugeNoob"},"content":"        System.out.println(input);","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"HugeNoob"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"HugeNoob"},"content":"     * Prints multiline inputs, with divider above and below.","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"HugeNoob"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"HugeNoob"},"content":"     * @param input The inputs to be printed.","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"HugeNoob"},"content":"    public static void printlns(String[] input) {","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"HugeNoob"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"HugeNoob"},"content":"        for (int i \u003d 0; i \u003c input.length; i++) {","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"HugeNoob"},"content":"            System.out.println(input[i]);","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"HugeNoob"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"HugeNoob"},"content":"        System.out.println(DIVIDER);","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"HugeNoob"},"content":"     * Greets the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"HugeNoob"},"content":"    public static void greet() {","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"HugeNoob"},"content":"        Ui.printlns(new String[] { \"Hello! I\u0027m LilBro!\", \"What can I do for you?\" });","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"HugeNoob"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"HugeNoob"},"content":"     * Bids the user goodbye.","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"HugeNoob"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"HugeNoob"},"content":"    public static void bye() {","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"HugeNoob"},"content":"        Ui.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"HugeNoob":48}},{"path":"src/test/java/duke/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.parser;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":"import duke.commands.Command;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"import duke.commands.CommandType;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"import duke.exceptions.DukeInvalidCommandException;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"public class ParserTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"    public void parseValidCommandTypes_success() {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"        String[] validCommands \u003d { \"bye\", \"list\", \"todo\", \"deadline\", \"event\", \"mark\", \"unmark\", \"delete\" };","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":"        TaskList dummy \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"HugeNoob"},"content":"        for (String c : validCommands) {","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"HugeNoob"},"content":"            assertEquals(CommandType.fromString(c), new Parser(dummy).parse(c).getCommandType());","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"HugeNoob"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"HugeNoob"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"HugeNoob"},"content":"    public void parseDeadline_success() {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"HugeNoob"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"HugeNoob"},"content":"        Parser parser \u003d new Parser(taskList);","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"HugeNoob"},"content":"        Command command \u003d parser.parse(\"deadline homework /by 2023-08-30 23:59\");","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"HugeNoob"},"content":"        command.execute();","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"HugeNoob"},"content":"        taskList.getTask(0).markDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"HugeNoob"},"content":"        assertEquals(\"[D][X] homework (by: Wed 30 Aug 2023 23:59)\", taskList.getTask(0).toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"HugeNoob"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"HugeNoob"},"content":"    public void parseInvalidCommands_exceptionThrown() {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"HugeNoob"},"content":"        String[] invalidCommands \u003d { \"wow\", \"hi\" };","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"HugeNoob"},"content":"        TaskList dummy \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"HugeNoob"},"content":"        for (String c : invalidCommands) {","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"HugeNoob"},"content":"            assertThrows(DukeInvalidCommandException.class, () -\u003e new Parser(dummy).parse(c));","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"HugeNoob"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"HugeNoob":41}},{"path":"src/test/java/duke/tasks/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":"public class EventTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"    public void testGetSaveFormat() {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"        Event event \u003d new Event(\"2101 Tutorial\", \"2023-08-29 08:00\", \"2023-08-29 10:00\");","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"        assertEquals(\"EVENT||0||2101 Tutorial /from 2023-08-29 08:00 /to 2023-08-29 10:00\\n\", event.getSaveFormat());","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"    public void testToString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"        Event event \u003d new Event(\"2101 Tutorial\", \"2023-08-29 08:00\", \"2023-08-29 10:00\");","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":"        assertEquals(\"[E][ ] 2101 Tutorial (from: Tue 29 Aug 2023 08:00 to: Tue 29 Aug 2023 10:00)\", event.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"HugeNoob":19}},{"path":"src/test/java/duke/tasks/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":"import duke.exceptions.DukeInvalidArgumentException;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"public class TaskTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"    public void testParseDateInput() {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"        assertEquals(\"2023-08-29 08:00\", Task.parseDateInput(\"2023-08-29 08:00\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":"    public void parseInvalidDateInput_exceptionThrown() {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"HugeNoob"},"content":"        String[] invalidDates \u003d new String[] { \"29-08-2023\", \"2023-08-29\" };","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"HugeNoob"},"content":"        for (String d : invalidDates) {","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"HugeNoob"},"content":"            assertThrows(DukeInvalidArgumentException.class, () -\u003e Task.parseDateInput(d));","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"HugeNoob"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"HugeNoob"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"HugeNoob"},"content":"    public void testGetDateOutputString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"HugeNoob"},"content":"        Event event \u003d new Event(\"2101 Tutorial\", \"2023-08-29 08:00\", \"2023-08-29 10:00\");","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"HugeNoob"},"content":"        assertEquals(\"[E][ ] 2101 Tutorial (from: Tue 29 Aug 2023 08:00 to: Tue 29 Aug 2023 10:00)\", event.toString());","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"HugeNoob"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"HugeNoob"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"HugeNoob":29}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"HugeNoob"},"content":"yo","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"HugeNoob"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"HugeNoob"},"content":"delete 1","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"HugeNoob"},"content":"todo","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"HugeNoob"},"content":"todo     ","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"HugeNoob"},"content":"todo   read book","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"HugeNoob"},"content":"deadline","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"HugeNoob"},"content":"deadline /by ","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"HugeNoob"},"content":"deadline   /by 2023-08-29","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"HugeNoob"},"content":"deadline return book /by      ","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"HugeNoob"},"content":"deadline          what        /by         yes         ","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"HugeNoob"},"content":"deadline return book /by 2023-29-29","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"HugeNoob"},"content":"deadline return book /by 2023-29-08","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"HugeNoob"},"content":"deadline return book /by 2023-08-29","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"HugeNoob"},"content":"deadline return book /by 2023-08-29 11:11","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"event","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"HugeNoob"},"content":"event X /from Y","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"HugeNoob"},"content":"event X /to Y","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"HugeNoob"},"content":"event /from X /to Y","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"HugeNoob"},"content":"event    bruh   /from    today    /to   ytd","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"HugeNoob"},"content":"event project meeting /from Aug 6th 2pm /to 4pm","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"HugeNoob"},"content":"event project meeting /from 2023-08-29 11:11 /to 2023-08-30 11:11","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"HugeNoob"},"content":"todo join sports club","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"HugeNoob"},"content":"todo borrow book","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"HugeNoob"},"content":"find what","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"HugeNoob"},"content":"find meet","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"HugeNoob"},"content":"find book","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"HugeNoob"},"content":"mark 1","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"HugeNoob"},"content":"mark 4","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"HugeNoob"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"HugeNoob"},"content":"unmark 1","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"HugeNoob"},"content":"mark one","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"HugeNoob"},"content":"mark -1","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"HugeNoob"},"content":"mark 999","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"HugeNoob"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"HugeNoob"},"content":"delete 5","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"HugeNoob"},"content":"delete 5","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"HugeNoob"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"HugeNoob"},"content":"bye","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"HugeNoob":39}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"HugeNoob"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"HugeNoob"},"content":"java -classpath ../bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"HugeNoob"},"content":"# clean up data folder created by script","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"HugeNoob"},"content":"if [ -d \"./data\" ]","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"HugeNoob"},"content":"then","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"HugeNoob"},"content":"    rm -r ./data","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"HugeNoob"},"content":"fi","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"HugeNoob"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"HugeNoob":8,"-":36}}]
