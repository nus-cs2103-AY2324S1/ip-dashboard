[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":"checkstyle {","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"raydenlim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"raydenlim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"raydenlim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"raydenlim"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"raydenlim"},"content":"configurations {","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"raydenlim"},"content":"    runtime {","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"raydenlim"},"content":"        if (org.gradle.internal.os.OperatingSystem.current().isWindows()) {","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"raydenlim"},"content":"            resolutionStrategy.eachDependency { DependencyResolveDetails details -\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"raydenlim"},"content":"                if (details.requested.group \u003d\u003d \u0027org.openjfx\u0027) {","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"raydenlim"},"content":"                    details.useTarget \"org.openjfx:javafx-base:17.0.7:win\"","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"raydenlim"},"content":"                }","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"raydenlim"},"content":"            }","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"raydenlim"},"content":"        } else if (org.gradle.internal.os.OperatingSystem.current().isMacOsX()) {","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"raydenlim"},"content":"            resolutionStrategy.eachDependency { DependencyResolveDetails details -\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"raydenlim"},"content":"                if (details.requested.group \u003d\u003d \u0027org.openjfx\u0027) {","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"raydenlim"},"content":"                    details.useTarget \"org.openjfx:javafx-base:17.0.7:mac\"","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"raydenlim"},"content":"                }","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"raydenlim"},"content":"            }","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"raydenlim"},"content":"        } else if (org.gradle.internal.os.OperatingSystem.current().isLinux()) {","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"raydenlim"},"content":"            resolutionStrategy.eachDependency { DependencyResolveDetails details -\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"raydenlim"},"content":"                if (details.requested.group \u003d\u003d \u0027org.openjfx\u0027) {","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"raydenlim"},"content":"                    details.useTarget \"org.openjfx:javafx-base:17.0.7:linux\"","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"raydenlim"},"content":"                }","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"raydenlim"},"content":"            }","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"raydenlim"},"content":"    mainClass.set(\"app.Launcher\")","lastModifiedDate":"2023-09-15"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":77,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"raydenlim"},"content":"    archiveFileName \u003d \u0027duke.jar\u0027","lastModifiedDate":"2023-09-15"},{"lineNumber":80,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"raydenlim"},"content":"run {","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2023-09-02"},{"lineNumber":86,"author":{"gitId":"raydenlim"},"content":"    enableAssertions \u003d true;","lastModifiedDate":"2023-09-15"},{"lineNumber":87,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"raydenlim":49,"-":38}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"[D][ ] uabrgiub (by: 12 Dec 1212 00:00)","lastModifiedDate":"2023-09-15"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"[A][ ] iguiugbf","lastModifiedDate":"2023-09-15"}],"authorContributionMap":{"raydenlim":2}},{"path":"just for recommits.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"Woops, accidentally uncommitted A-JUnit on sourcetree, 1st time using it :P big oopsies","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"A-CheckStyle: Already implemented before in week 3 to check style","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"raydenlim":3}},{"path":"settings.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"rootProject.name \u003d \u0027IPgrade\u0027","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"raydenlim":2}},{"path":"src/main/java/Command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package command;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"import storage.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"import task.Task;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"import tasklist.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":" * The `AddCommand` class represents a command to add a task to the task list in the Duke application.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":" * It extends the `Command` class and is responsible for adding a specified task to the task list,","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":" * displaying a message indicating the task has been added, and saving the updated task list to storage.","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":" * This class encapsulates the behavior of adding a task to the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":"    private Task taskToAdd;","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":"     * Constructs a new `AddCommand` instance with the specified task to be added.","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":"     * @param taskToAdd The task to be added to the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"    public AddCommand(Task taskToAdd) {","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"        this.taskToAdd \u003d taskToAdd;","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"raydenlim"},"content":"     * Executes the \"Add\" command by adding the specified task to the task list,","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"raydenlim"},"content":"     * displaying a message indicating the task has been added, and saving the updated task list to storage.","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"raydenlim"},"content":"     * @param taskList The task list to which the task should be added.","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"raydenlim"},"content":"     * @param ui       The user interface for displaying feedback to the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"raydenlim"},"content":"     * @param storage  The storage component for saving the updated task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"raydenlim"},"content":"     * @return A message indicating that the task has been added.","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException An exception may be thrown if there is an error executing","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"raydenlim"},"content":"     *      the command (e.g., storage error).","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"raydenlim"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"raydenlim"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"raydenlim"},"content":"        assert taskToAdd !\u003d null : \"Task to add cannot be null.\";","lastModifiedDate":"2023-09-15"},{"lineNumber":43,"author":{"gitId":"raydenlim"},"content":"        taskList.addTask(taskToAdd);","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"raydenlim"},"content":"        storage.saveTask(taskList.getTasks());","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"raydenlim"},"content":"        return ui.showTaskAdded(taskToAdd, taskList.getTaskCount());","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"raydenlim":47}},{"path":"src/main/java/Command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package command;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"import storage.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"import tasklist.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":" * The `ByeCommand` class represents a command to exit the Duke application gracefully.","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":" * It extends the `Command` class and is responsible for displaying a goodbye message","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":" * to the user and saving the task list to storage.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":" * This class encapsulates the behavior of exiting the application.","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":" * When this command is executed, it signals the application to terminate.","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":"     * Executes the \"Bye\" command by displaying a goodbye message to the user and saving the task list to storage.","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":"     * @param taskList The task list (not used in this command).","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":"     * @param ui       The user interface for displaying the goodbye message.","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":"     * @param storage  The storage component for saving the task list (optional).","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":"     * @return A goodbye message.","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException An exception may be thrown if there is an error executing","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"     *      the command (e.g., storage error).","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"raydenlim"},"content":"        if (storage !\u003d null) {","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"raydenlim"},"content":"            storage.saveTask(taskList.getTasks());","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"raydenlim"},"content":"        return ui.showBye();","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"raydenlim":35}},{"path":"src/main/java/Command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package command;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"import storage.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"import tasklist.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":" * The `Command` abstract class represents a base class for various commands in the Duke application.","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":" * Subclasses of this class implement specific commands, such as adding tasks or listing tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":" * Each concrete command class must provide implementations for the `execute` method and the `isExit` method.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":" * The `execute` method defines the behavior of the command, and the `isExit` method indicates whether","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":" * the command should exit the application.","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":" * This abstract class ensures that all command classes share a common interface for execution and exit status.","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":"public abstract class Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":"     * Executes the specific command by performing the associated action on the task list, user interface, and storage.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":"     * Subclasses override this method to define the behavior of their respective commands.","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":"     * @param taskList The task list on which the command should operate.","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":"     * @param ui       The user interface for displaying feedback to the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"     * @param storage  The storage component for saving or retrieving data (not used in all commands).","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"     * @return A message indicating the result of executing the command.","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException An exception may be thrown if there is an error executing the command.","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":"    public abstract String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"raydenlim":30}},{"path":"src/main/java/Command/DeadLineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package command;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"import storage.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"import task.DeadLine;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"import tasklist.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":" * The `DeadLineCommand` class represents a command to add a deadline task to the task list in the Duke application.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":" * It extends the `Command` class and is responsible for creating a new deadline task with the specified details,","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":" * adding it to the task list, and saving the updated task list to storage.","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":" * This class encapsulates the behavior of adding a deadline task to the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":"public class DeadLineCommand extends Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":"    private String description;","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":"    private String by;","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":"     * Constructs a new `DeadLineCommand` instance with the specified deadline task details.","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":"     * @param description The description of the deadline task.","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"     * @param by          The deadline date and time by which the task should be completed.","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"    public DeadLineCommand(String description, String by) {","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"raydenlim"},"content":"     * Executes the \"Deadline\" command by creating a deadline task, adding it to the task list,","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"raydenlim"},"content":"     * and saving the updated list to storage. It also displays a message indicating that the task has been added.","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"raydenlim"},"content":"     * @param taskList The task list to which the deadline task should be added.","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"raydenlim"},"content":"     * @param ui       The user interface for displaying feedback to the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"raydenlim"},"content":"     * @param storage  The storage component for saving the updated task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"raydenlim"},"content":"     * @return A message indicating that the deadline task has been added.","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException An exception may be thrown if there is an error executing the","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"raydenlim"},"content":"     *      command (e.g., storage error).","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"raydenlim"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"raydenlim"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"raydenlim"},"content":"        assert description !\u003d null : \"Description cannot be null.\";","lastModifiedDate":"2023-09-15"},{"lineNumber":46,"author":{"gitId":"raydenlim"},"content":"        assert by !\u003d null : \"by attribute cannot be null.\";","lastModifiedDate":"2023-09-15"},{"lineNumber":47,"author":{"gitId":"raydenlim"},"content":"        DeadLine deadline \u003d new DeadLine(description, by);","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"raydenlim"},"content":"        taskList.addTask(deadline);","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"raydenlim"},"content":"        storage.saveTask(taskList.getTasks());","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"raydenlim"},"content":"        return ui.showTaskAdded(deadline, taskList.getTaskCount());","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"raydenlim":52}},{"path":"src/main/java/Command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package command;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"import storage.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"import task.Task;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"import tasklist.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":" * The `DeleteCommand` class represents a command to delete a task from the task list in the Duke application.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":" * It extends the `Command` class and is responsible for deleting a specified task from the task list,","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":" * displaying a message about the deleted task, and saving the updated task list to storage.","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":" * This class encapsulates the behavior of deleting a task from the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":" * It performs validation to ensure that the specified task index is valid.","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":"    private int taskIndex;","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":"     * Constructs a new `DeleteCommand` instance with the specified task index to be deleted.","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":"     * @param taskIndex The index of the task to be deleted.","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"    public DeleteCommand(int taskIndex) {","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"raydenlim"},"content":"     * Executes the \"Delete\" command by deleting the specified task from the task list,","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"raydenlim"},"content":"     * displaying a message about the deleted task, and saving the updated task list to storage.","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"raydenlim"},"content":"     * @param taskList The task list from which the task should be deleted.","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"raydenlim"},"content":"     * @param ui       The user interface for displaying feedback to the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"raydenlim"},"content":"     * @param storage  The storage component for saving the updated task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"raydenlim"},"content":"     * @return A message indicating that the specified task has been successfully deleted.","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException An exception may be thrown if:","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"raydenlim"},"content":"     *                       - The specified task index is out of range.","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"raydenlim"},"content":"     *                       - There is an error executing the command (e.g., storage error).","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"raydenlim"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"raydenlim"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"raydenlim"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"raydenlim"},"content":"            assert taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c\u003d taskList.getTaskCount() : \"Invalid task index/ out of range\";","lastModifiedDate":"2023-09-15"},{"lineNumber":46,"author":{"gitId":"raydenlim"},"content":"            Task removedTask \u003d taskList.deleteTask(taskIndex);","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"raydenlim"},"content":"            storage.saveTask(taskList.getTasks());","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"raydenlim"},"content":"            return ui.showDeletedTask(removedTask, taskList.getTaskCount());","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"raydenlim"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"raydenlim"},"content":"            throw new DukeException(\"Task index is out of range!\");","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"raydenlim":54}},{"path":"src/main/java/Command/EchoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package command;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"import storage.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"import tasklist.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":" * The `EchoCommand` class represents a command to display an echo message to the user in the Duke application.","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":" * It extends the `Command` class and is responsible for displaying a user-specified message as an echo response.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":" * This class encapsulates the behavior of echoing a message to the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":"public class EchoCommand extends Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":"    private String message;","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":"     * Constructs a new `EchoCommand` instance with the specified message to be echoed.","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":"     * @param message The message to be echoed to the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":"    public EchoCommand(String message) {","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":"        this.message \u003d message;","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":"     * Executes the \"Echo\" command by displaying the specified message as an echo response to","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":"     * the user through the user interface.","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"raydenlim"},"content":"     * @param taskList The task list (not used in this command).","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"raydenlim"},"content":"     * @param ui       The user interface for displaying the echo message.","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"raydenlim"},"content":"     * @param storage  The storage component (not used in this command).","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"raydenlim"},"content":"     * @return The echoed message.","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException An exception may be thrown if there is an error executing the command (e.g., UI error).","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"raydenlim"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"raydenlim"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"raydenlim"},"content":"        assert message !\u003d null : \"You cant echo nothing :(\";","lastModifiedDate":"2023-09-15"},{"lineNumber":40,"author":{"gitId":"raydenlim"},"content":"        return ui.showEcho(message);","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"raydenlim":42}},{"path":"src/main/java/Command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package command;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"import storage.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"import task.Event;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"import tasklist.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":" * The `EventCommand` class represents a command to add an event task to the task list in the Duke application.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":" * It extends the `Command` class and is responsible for creating a new event task with the specified details,","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":" * adding it to the task list, and saving the updated task list to storage.","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":" * This class encapsulates the behavior of adding an event task to the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":"    private String description;","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":"    private String from;","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":"    private String to;","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":"     * Constructs a new `EventCommand` instance with the specified event details.","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"     * @param description The description of the event task.","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"     * @param from        The starting date and time of the event.","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"     * @param to          The ending date and time of the event.","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":"    public EventCommand(String description, String from, String to) {","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"raydenlim"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"raydenlim"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"raydenlim"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"raydenlim"},"content":"     * Executes the \"Event\" command by creating an event task, adding it to the task list,","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"raydenlim"},"content":"     * and saving the updated list to storage. It also displays a message indicating that the task has been added.","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"raydenlim"},"content":"     * @param taskList The task list to which the event task should be added.","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"raydenlim"},"content":"     * @param ui       The user interface for displaying feedback to the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"raydenlim"},"content":"     * @param storage  The storage component for saving the updated task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"raydenlim"},"content":"     * @return A message indicating that the event has been added.","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException An exception may be thrown if there is an error","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"raydenlim"},"content":"     *      executing the command (e.g., storage error).","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"raydenlim"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"raydenlim"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"raydenlim"},"content":"        assert description !\u003d null : \"Description cannot be null.\";","lastModifiedDate":"2023-09-15"},{"lineNumber":49,"author":{"gitId":"raydenlim"},"content":"        assert from !\u003d null : \"from attribute cannot be null.\";","lastModifiedDate":"2023-09-15"},{"lineNumber":50,"author":{"gitId":"raydenlim"},"content":"        assert to !\u003d null : \"to attribute cannot be null.\";","lastModifiedDate":"2023-09-15"},{"lineNumber":51,"author":{"gitId":"raydenlim"},"content":"        Event event \u003d new Event(description, from, to);","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"raydenlim"},"content":"        taskList.addTask(event);","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"raydenlim"},"content":"        storage.saveTask(taskList.getTasks());","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"raydenlim"},"content":"        return ui.showTaskAdded(event, taskList.getTaskCount());","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"raydenlim":56}},{"path":"src/main/java/Command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package command;","lastModifiedDate":"2023-09-03"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"import storage.Storage;","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"import tasklist.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":" * Represents a command to find tasks that match a specified keyword in their descriptions.","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":"    private final String keyword;","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":"     * Initializes a new instance of the FindCommand class with the specified keyword.","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":"     * @param keyword The keyword to search for in task descriptions.","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"     * Executes the \"find\" command to search for tasks containing the specified keyword","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":"     * in their descriptions and displays the matching tasks.","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"raydenlim"},"content":"     * @param taskList   The task list to search for matching tasks.","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"raydenlim"},"content":"     * @param ui      The user interface to display the matching tasks.","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"raydenlim"},"content":"     * @param storage The storage system (not used in this command).","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"raydenlim"},"content":"     * @return A message displaying the list of tasks that match the specification","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException If an error occurs while executing the command.","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"raydenlim"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"raydenlim"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"raydenlim"},"content":"        assert keyword !\u003d null : \"Search word cannot be null.\";","lastModifiedDate":"2023-09-15"},{"lineNumber":39,"author":{"gitId":"raydenlim"},"content":"        return ui.showMatchingTasks(taskList.findTasks(keyword));","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"raydenlim":41}},{"path":"src/main/java/Command/HelpCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package command;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"import storage.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"import tasklist.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":" * The `HelpCommand` class represents a command to display a list of available commands and provide","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":" * help to the user in the Duke application.","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":" * It extends the `Command` class and is responsible for displaying a list of commands and their usage to the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":" * This class encapsulates the behavior of showing available commands through the user interface.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":" * It does not affect the task list or storage.","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":"public class HelpCommand extends Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":"     * Executes the \"Help\" command by displaying a list of available commands and their","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":"     * usage to the user through the user interface.","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":"     * @param taskList The task list (not used in this command).","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":"     * @param ui       The user interface for displaying the list of available commands.","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":"     * @param storage  The storage component (not used in this command).","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":"     * @return A message displaying a list of available commands.","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":"        return ui.showCommands();","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"raydenlim":30}},{"path":"src/main/java/Command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package command;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"import storage.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"import tasklist.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":" * The `ListCommand` class represents a command to list and display tasks in the Duke application.","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":" * It extends the `Command` class and is responsible for displaying the current list of tasks to the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":" * This class encapsulates the behavior of listing tasks and showing them through the user interface.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":"     * Executes the \"List\" command by displaying the current list of tasks to the user through the user interface.","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":"     * @param taskList The task list to be displayed.","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":"     * @param ui       The user interface for displaying the list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":"     * @param storage  The storage component (not used in this command).","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":"     * @returns A message displaying the list of tasks at hand.","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException An exception may be thrown if there is an error executing the command (e.g., UI error).","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"        return ui.showTasks(taskList);","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"raydenlim":29}},{"path":"src/main/java/Command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package command;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"import storage.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"import task.Task;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"import tasklist.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":" * The `MarkCommand` class represents a command to mark a task as completed in the Duke application.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":" * It extends the `Command` class and is responsible for updating the status of a specified task to \"done.\"","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":" * This class encapsulates the behavior of marking a task as completed and saving the updated task list to storage.","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":" * It also performs validation to ensure that the specified task index is valid and that the task is","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":" * not already marked as done.","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":" * If the specified task index is out of range or the task is already marked as done, an exception is thrown.","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":"    private int taskIndex;","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":"     * Constructs a new `MarkCommand` instance with the specified task index.","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"     * @param taskIndex The index of the task to be marked as completed.","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":"    public MarkCommand(int taskIndex) {","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"raydenlim"},"content":"     * Executes the \"Mark\" command by marking the specified task as completed and saving the updated list to storage.","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"raydenlim"},"content":"     * @param taskList The task list containing the task to be marked.","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"raydenlim"},"content":"     * @param ui       The user interface for displaying feedback to the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"raydenlim"},"content":"     * @param storage  The storage component for saving the updated task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"raydenlim"},"content":"     * @return A message indicating that the task has been marked as done.","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException An exception may be thrown if:","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"raydenlim"},"content":"     *                       - The specified task index is out of range.","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"raydenlim"},"content":"     *                       - The task is already marked as done.","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"raydenlim"},"content":"     *                       - There is an error executing the command (e.g., storage error).","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"raydenlim"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"raydenlim"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"raydenlim"},"content":"        if (taskIndex \u003c 0 || taskIndex \u003e\u003d taskList.getTaskCount()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"raydenlim"},"content":"            throw new DukeException(\"Invalid task index.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"raydenlim"},"content":"        assert taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c taskList.getTaskCount() : \"Invalid task index.\";","lastModifiedDate":"2023-09-15"},{"lineNumber":50,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"raydenlim"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"raydenlim"},"content":"            Task taskToMark \u003d taskList.getTasks().get(taskIndex);","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"raydenlim"},"content":"            if (!taskToMark.checkIsDone()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"raydenlim"},"content":"                taskToMark.isCompleted();","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"raydenlim"},"content":"                storage.saveTask(taskList.getTasks());","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"raydenlim"},"content":"                return ui.showTaskMarked(taskToMark);","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"raydenlim"},"content":"            } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"raydenlim"},"content":"                throw new DukeException(\"This task is already marked as done.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"raydenlim"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"raydenlim"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"raydenlim"},"content":"            throw new DukeException(\"Task index is out of range!\");","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"raydenlim":65}},{"path":"src/main/java/Command/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package command;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"import storage.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"import task.Task;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"import tasklist.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":" * The `ToDoCommand` class represents a command to add a \"ToDo\" task to the task list in the Duke application.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":" * It extends the `Command` class and is responsible for adding a specified task to the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":" * This class encapsulates the behavior of creating a \"ToDo\" task and saving it to storage.","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":"public class ToDoCommand extends Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":"    private Task taskToDo;","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":"     * Constructs a new `ToDoCommand` instance with the specified `Task` to be added as a \"ToDo\" task.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":"     * @param taskToDo The `Task` to be added as a \"ToDo\" task.","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":"    public ToDoCommand(Task taskToDo) {","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"        this.taskToDo \u003d taskToDo;","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":"     * Executes the \"ToDo\" command by adding the specified `Task` to the task","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"raydenlim"},"content":"     * list and saving the updated list to storage.","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"raydenlim"},"content":"     * @param taskList The task list to which the task should be added.","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"raydenlim"},"content":"     * @param ui       The user interface for interacting with the user (not used in this command).","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"raydenlim"},"content":"     * @param storage  The storage component for saving the updated task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"raydenlim"},"content":"     * @return A message indicating the task has been added.","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException An exception may be thrown if there is an error","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"raydenlim"},"content":"     *       executing the command (e.g., storage error).","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"raydenlim"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"raydenlim"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"raydenlim"},"content":"        assert taskToDo !\u003d null : \"Task todo cannot be null.\";","lastModifiedDate":"2023-09-15"},{"lineNumber":42,"author":{"gitId":"raydenlim"},"content":"        taskList.addTask(taskToDo);","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"raydenlim"},"content":"        storage.saveTask(taskList.getTasks());","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"raydenlim"},"content":"        return ui.showTaskAdded(taskToDo, taskList.getTaskCount());","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"raydenlim":46}},{"path":"src/main/java/Command/UnknownCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package command;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"import storage.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"import tasklist.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":" * The `UnknownCommand` class represents a command to handle unknown or invalid","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":" * user commands in the BloopBot application.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":" * It extends the `Command` class and is responsible for displaying an error message","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":" * when an unknown command is encountered.","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":" * This class is used to provide feedback to the user when an unrecognized command is entered.","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":"public class UnknownCommand extends Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":"    private String unknownCommand;","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":"     * Constructs a new `UnknownCommand` instance with the specified unknown command string.","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":"     * @param unknownCommand The unknown command entered by the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"    public UnknownCommand(String unknownCommand) {","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"        this.unknownCommand \u003d unknownCommand;","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"raydenlim"},"content":"     * Executes the unknown command by displaying an error message indicating that the command is unknown.","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"raydenlim"},"content":"     * @param taskList The task list (not used in this command).","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"raydenlim"},"content":"     * @param ui       The user interface for displaying error messages.","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"raydenlim"},"content":"     * @param storage  The storage component (not used in this command).","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"raydenlim"},"content":"     * @return An error message indicating that the command is unknown.","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException This exception is not thrown in this command.","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"raydenlim"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"raydenlim"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"raydenlim"},"content":"        return ui.showError(new DukeException(\"Unknown command: \" + unknownCommand));","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"raydenlim":42}},{"path":"src/main/java/Command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package command;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"import storage.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"import task.Task;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"import tasklist.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":" * The `UnmarkCommand` class represents a command to unmark a task as completed in the BloopBot application.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":" * It extends the `Command` class and is responsible for executing the unmark operation.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":" * This class takes a task index as input and marks the corresponding task as not completed.","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":"    private int taskIndex;","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":"     * Constructs a new `UnmarkCommand` instance with the specified task index.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":"     * @param taskIndex The index of the task to unmark.","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":"    public UnmarkCommand(int taskIndex) {","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":"     * Executes the unmark command by setting the selected task as not completed.","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"raydenlim"},"content":"     * @param taskList The task list where the task is stored.","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"raydenlim"},"content":"     * @param ui       The user interface for displaying messages.","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"raydenlim"},"content":"     * @param storage  The storage component for saving task data.","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"raydenlim"},"content":"     * @return A message indicating that the task has been unmarked as done.","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException If there is an issue executing the unmark command.","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"raydenlim"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"raydenlim"},"content":"    public String execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"raydenlim"},"content":"        if (taskIndex \u003c 0 || taskIndex \u003e\u003d taskList.getTaskCount()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"raydenlim"},"content":"            throw new DukeException(\"Invalid task index.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"raydenlim"},"content":"        assert taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c taskList.getTaskCount() : \"Invalid task index.\";","lastModifiedDate":"2023-09-15"},{"lineNumber":43,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"raydenlim"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"raydenlim"},"content":"            Task taskToUnmark \u003d taskList.getTasks().get(taskIndex);","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"raydenlim"},"content":"            if (taskToUnmark.checkIsDone()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"raydenlim"},"content":"                taskToUnmark.isNotCompleted();","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"raydenlim"},"content":"                storage.saveTask(taskList.getTasks());","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"raydenlim"},"content":"                return ui.showTaskUnmarked(taskToUnmark);","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"raydenlim"},"content":"            } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"raydenlim"},"content":"                throw new DukeException(\"This task is already marked as done.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"raydenlim"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"raydenlim"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"raydenlim"},"content":"            throw new DukeException(\"Task index is out of range!\");","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"raydenlim":58}},{"path":"src/main/java/Duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package duke;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"import command.Command;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"import parser.Parser;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":"import storage.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":"import tasklist.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":" * The `Duke` class serves as the main class for the BloopBot application.","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":" * It handles user interactions, command parsing, and task management.","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":" * This class initializes and manages the `TaskList`, `Ui`, and `Storage` components.","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":"    private Scanner scanner;","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":"    private Storage storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":"    private Ui ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"     * Constructs a new `Duke` instance and initializes its components.","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":"     * It creates a scanner for user input, initializes the task list, UI, and storage components,","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":"     * and loads tasks from a data file if available.","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"raydenlim"},"content":"     * @param filePath The file path where task data is stored.","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException     If an error occurs during initialization.","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"raydenlim"},"content":"     * @throws FileNotFoundException If the task data file is not found.","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"raydenlim"},"content":"    public Duke(String filePath) throws DukeException, FileNotFoundException {","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"raydenlim"},"content":"        String[] parts \u003d filePath.split(\"/\");","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"raydenlim"},"content":"        String directoryPath \u003d parts[0];","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"raydenlim"},"content":"        String textPath \u003d parts[1];","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"raydenlim"},"content":"        scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"raydenlim"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"raydenlim"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"raydenlim"},"content":"        assert directoryPath !\u003d null : \"Directory path cannot be empty\";","lastModifiedDate":"2023-09-15"},{"lineNumber":43,"author":{"gitId":"raydenlim"},"content":"        assert textPath !\u003d null : \"Text path cannot be empty\";","lastModifiedDate":"2023-09-15"},{"lineNumber":44,"author":{"gitId":"raydenlim"},"content":"        storage \u003d new Storage(directoryPath, textPath, taskList);","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"raydenlim"},"content":"        storage.loadTasks();","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"raydenlim"},"content":"     * Gets a response from Duke based on user input.","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"raydenlim"},"content":"     * @param userInput The user\u0027s input.","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"raydenlim"},"content":"     * @return A response generated by Duke.","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException If there is an issue with user input or task management.","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"raydenlim"},"content":"    public String getResponse(String userInput) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"raydenlim"},"content":"        String output;","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"raydenlim"},"content":"        try {","lastModifiedDate":"2023-08-24"},{"lineNumber":58,"author":{"gitId":"raydenlim"},"content":"            Command command \u003d Parser.parse(userInput);","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"raydenlim"},"content":"            output \u003d command.execute(taskList, ui, storage);","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"raydenlim"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":61,"author":{"gitId":"raydenlim"},"content":"            output \u003d ui.showError(e);","lastModifiedDate":"2023-09-07"},{"lineNumber":62,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"raydenlim"},"content":"        return output;","lastModifiedDate":"2023-09-07"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"raydenlim":62,"-":3}},{"path":"src/main/java/Duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package duke;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":" * The `DukeException` class represents custom exceptions that can be thrown by the BloopBot application.","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":" * It extends the base `Exception` class to provide specific error messages for different exceptional situations.","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":" * This class is used to handle and communicate application-specific errors.","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":"     * Constructs a new `DukeException` with the specified error message.","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":"     * @param message The error message associated with this exception.","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":"        super(message);","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"raydenlim":21}},{"path":"src/main/java/Parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package parser;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"import command.AddCommand;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"import command.ByeCommand;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"import command.Command;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":"import command.DeadLineCommand;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":"import command.DeleteCommand;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":"import command.EchoCommand;","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":"import command.EventCommand;","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":"import command.FindCommand;","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":"import command.HelpCommand;","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":"import command.ListCommand;","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":"import command.MarkCommand;","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":"import command.ToDoCommand;","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":"import command.UnmarkCommand;","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":"import task.Add;","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":"import task.DeadLine;","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":"import task.Event;","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":"import task.Task;","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":"import task.ToDo;","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":" * The `Parser` class is responsible for parsing user input and converting","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":" * it into appropriate commands and tasks for the BloopBot application.","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":" * It provides methods to parse user commands and task data from input strings.","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"raydenlim"},"content":"public class Parser {","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"raydenlim"},"content":"     * Parses a string containing task data and creates the corresponding `Task` object.","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"raydenlim"},"content":"     * @param taskData The string containing task data.","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"raydenlim"},"content":"     * @return The `Task` object created from the task data.","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"raydenlim"},"content":"     * @throws FileNotFoundException If the file for task data is not found.","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException If there is an issue parsing the task data.","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"raydenlim"},"content":"    public static Task parseTask(String taskData) throws FileNotFoundException, DukeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"raydenlim"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"raydenlim"},"content":"            String taskType \u003d taskData.substring(1, 2);","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"raydenlim"},"content":"            boolean isDone \u003d taskData.charAt(4) \u003d\u003d \u0027X\u0027;","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"raydenlim"},"content":"            String taskInfo \u003d taskData.substring(7);","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"raydenlim"},"content":"            Task taskToAdd \u003d null;","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"raydenlim"},"content":"            switch (taskType) {","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"raydenlim"},"content":"            case \"A\":","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"raydenlim"},"content":"                taskToAdd \u003d new Add(taskInfo);","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"raydenlim"},"content":"                break;","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"raydenlim"},"content":"            case \"T\":","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"raydenlim"},"content":"                taskToAdd \u003d new ToDo(taskInfo);","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"raydenlim"},"content":"                break;","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"raydenlim"},"content":"            case \"D\":","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"raydenlim"},"content":"                return createDeadLineTask(taskInfo);","lastModifiedDate":"2023-09-15"},{"lineNumber":58,"author":{"gitId":"raydenlim"},"content":"            case \"E\":","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"raydenlim"},"content":"                return createEventTask(taskInfo);","lastModifiedDate":"2023-09-15"},{"lineNumber":60,"author":{"gitId":"raydenlim"},"content":"            default:","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"raydenlim"},"content":"                throw new DukeException(\"File is corrupted!\");","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"raydenlim"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"raydenlim"},"content":"            if (taskToAdd !\u003d null) {","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"raydenlim"},"content":"                if (isDone) {","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"raydenlim"},"content":"                    taskToAdd.isCompleted();","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"raydenlim"},"content":"                }","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"raydenlim"},"content":"                return taskToAdd;","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"raydenlim"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"raydenlim"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"raydenlim"},"content":"            return new Task(\"(CORRUPTED) \" + taskData);","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"raydenlim"},"content":"        return null;","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":76,"author":{"gitId":"raydenlim"},"content":"     * Creates a DeadLine task based on task information.","lastModifiedDate":"2023-09-15"},{"lineNumber":77,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-15"},{"lineNumber":78,"author":{"gitId":"raydenlim"},"content":"     * @param taskInfo The task information string containing the task description and deadline.","lastModifiedDate":"2023-09-15"},{"lineNumber":79,"author":{"gitId":"raydenlim"},"content":"     * @return A DeadLine task instance based on the task information.","lastModifiedDate":"2023-09-15"},{"lineNumber":80,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException If there is an issue parsing the task information.","lastModifiedDate":"2023-09-15"},{"lineNumber":81,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":82,"author":{"gitId":"raydenlim"},"content":"    private static Task createDeadLineTask(String taskInfo) throws DukeException {","lastModifiedDate":"2023-09-15"},{"lineNumber":83,"author":{"gitId":"raydenlim"},"content":"        try {","lastModifiedDate":"2023-09-15"},{"lineNumber":84,"author":{"gitId":"raydenlim"},"content":"            String[] parts \u003d taskInfo.split(\" \\\\(by: \");","lastModifiedDate":"2023-09-15"},{"lineNumber":85,"author":{"gitId":"raydenlim"},"content":"            String description \u003d parts[0];","lastModifiedDate":"2023-09-15"},{"lineNumber":86,"author":{"gitId":"raydenlim"},"content":"            String by \u003d parts[1].substring(0, parts[1].length() - 1);","lastModifiedDate":"2023-09-15"},{"lineNumber":87,"author":{"gitId":"raydenlim"},"content":"            return new DeadLine(description, by);","lastModifiedDate":"2023-09-15"},{"lineNumber":88,"author":{"gitId":"raydenlim"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-15"},{"lineNumber":89,"author":{"gitId":"raydenlim"},"content":"            throw new DukeException(\"Error parsing Deadline task: \" + taskInfo);","lastModifiedDate":"2023-09-15"},{"lineNumber":90,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":91,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":92,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":93,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":94,"author":{"gitId":"raydenlim"},"content":"     * Creates an Event task based on task information.","lastModifiedDate":"2023-09-15"},{"lineNumber":95,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-15"},{"lineNumber":96,"author":{"gitId":"raydenlim"},"content":"     * @param taskInfo The task information string containing the task description and event details.","lastModifiedDate":"2023-09-15"},{"lineNumber":97,"author":{"gitId":"raydenlim"},"content":"     * @return An Event task instance based on the task information.","lastModifiedDate":"2023-09-15"},{"lineNumber":98,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException If there is an issue parsing the task information.","lastModifiedDate":"2023-09-15"},{"lineNumber":99,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":100,"author":{"gitId":"raydenlim"},"content":"    private static Task createEventTask(String taskInfo) throws DukeException {","lastModifiedDate":"2023-09-15"},{"lineNumber":101,"author":{"gitId":"raydenlim"},"content":"        try {","lastModifiedDate":"2023-09-15"},{"lineNumber":102,"author":{"gitId":"raydenlim"},"content":"            String[] parts \u003d taskInfo.split(\" \\\\(from: \");","lastModifiedDate":"2023-09-15"},{"lineNumber":103,"author":{"gitId":"raydenlim"},"content":"            String description \u003d parts[0];","lastModifiedDate":"2023-09-15"},{"lineNumber":104,"author":{"gitId":"raydenlim"},"content":"            String[] dateParts \u003d parts[1].split(\" to \");","lastModifiedDate":"2023-09-15"},{"lineNumber":105,"author":{"gitId":"raydenlim"},"content":"            String from \u003d dateParts[0];","lastModifiedDate":"2023-09-15"},{"lineNumber":106,"author":{"gitId":"raydenlim"},"content":"            String to \u003d dateParts[1].substring(0, dateParts[1].length() - 1);","lastModifiedDate":"2023-09-15"},{"lineNumber":107,"author":{"gitId":"raydenlim"},"content":"            return new Event(description, from, to);","lastModifiedDate":"2023-09-15"},{"lineNumber":108,"author":{"gitId":"raydenlim"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-15"},{"lineNumber":109,"author":{"gitId":"raydenlim"},"content":"            throw new DukeException(\"Error parsing Event task: \" + taskInfo);","lastModifiedDate":"2023-09-15"},{"lineNumber":110,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":111,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":112,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":113,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":114,"author":{"gitId":"raydenlim"},"content":"     * Parses a user input string and creates the corresponding `Command` object.","lastModifiedDate":"2023-09-02"},{"lineNumber":115,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":116,"author":{"gitId":"raydenlim"},"content":"     * @param input The user input string.","lastModifiedDate":"2023-09-02"},{"lineNumber":117,"author":{"gitId":"raydenlim"},"content":"     * @return The `Command` object created from the user input.","lastModifiedDate":"2023-09-02"},{"lineNumber":118,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException If there is an issue parsing the user input.","lastModifiedDate":"2023-09-02"},{"lineNumber":119,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":120,"author":{"gitId":"raydenlim"},"content":"    public static Command parse(String input) throws DukeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":121,"author":{"gitId":"raydenlim"},"content":"        String[] words \u003d input.split(\" \");","lastModifiedDate":"2023-09-02"},{"lineNumber":122,"author":{"gitId":"raydenlim"},"content":"        String command \u003d words[0].toLowerCase();","lastModifiedDate":"2023-09-02"},{"lineNumber":123,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":124,"author":{"gitId":"raydenlim"},"content":"        switch (command) {","lastModifiedDate":"2023-09-02"},{"lineNumber":125,"author":{"gitId":"raydenlim"},"content":"        case \"bye\":","lastModifiedDate":"2023-09-02"},{"lineNumber":126,"author":{"gitId":"raydenlim"},"content":"            return new ByeCommand();","lastModifiedDate":"2023-09-02"},{"lineNumber":127,"author":{"gitId":"raydenlim"},"content":"        case \"list\":","lastModifiedDate":"2023-09-02"},{"lineNumber":128,"author":{"gitId":"raydenlim"},"content":"            return new ListCommand();","lastModifiedDate":"2023-09-02"},{"lineNumber":129,"author":{"gitId":"raydenlim"},"content":"        case \"todo\":","lastModifiedDate":"2023-09-02"},{"lineNumber":130,"author":{"gitId":"raydenlim"},"content":"            return createToDoCommand(input);","lastModifiedDate":"2023-09-15"},{"lineNumber":131,"author":{"gitId":"raydenlim"},"content":"        case \"add\":","lastModifiedDate":"2023-09-15"},{"lineNumber":132,"author":{"gitId":"raydenlim"},"content":"            return createAddCommand(input);","lastModifiedDate":"2023-09-15"},{"lineNumber":133,"author":{"gitId":"raydenlim"},"content":"        case \"deadline\":","lastModifiedDate":"2023-09-15"},{"lineNumber":134,"author":{"gitId":"raydenlim"},"content":"            return createDeadLineCommand(input);","lastModifiedDate":"2023-09-15"},{"lineNumber":135,"author":{"gitId":"raydenlim"},"content":"        case \"event\":","lastModifiedDate":"2023-09-15"},{"lineNumber":136,"author":{"gitId":"raydenlim"},"content":"            return createEventCommand(input);","lastModifiedDate":"2023-09-15"},{"lineNumber":137,"author":{"gitId":"raydenlim"},"content":"        case \"unmark\":","lastModifiedDate":"2023-09-15"},{"lineNumber":138,"author":{"gitId":"raydenlim"},"content":"            return createUnmarkCommand(input);","lastModifiedDate":"2023-09-15"},{"lineNumber":139,"author":{"gitId":"raydenlim"},"content":"        case \"mark\":","lastModifiedDate":"2023-09-15"},{"lineNumber":140,"author":{"gitId":"raydenlim"},"content":"            return createMarkCommand(input);","lastModifiedDate":"2023-09-15"},{"lineNumber":141,"author":{"gitId":"raydenlim"},"content":"        case \"echo\":","lastModifiedDate":"2023-09-15"},{"lineNumber":142,"author":{"gitId":"raydenlim"},"content":"            return createEchoCommand(input);","lastModifiedDate":"2023-09-15"},{"lineNumber":143,"author":{"gitId":"raydenlim"},"content":"        case \"delete\":","lastModifiedDate":"2023-09-15"},{"lineNumber":144,"author":{"gitId":"raydenlim"},"content":"            return createDeleteCommand(input);","lastModifiedDate":"2023-09-15"},{"lineNumber":145,"author":{"gitId":"raydenlim"},"content":"        case \"help\":","lastModifiedDate":"2023-09-15"},{"lineNumber":146,"author":{"gitId":"raydenlim"},"content":"            return new HelpCommand();","lastModifiedDate":"2023-09-15"},{"lineNumber":147,"author":{"gitId":"raydenlim"},"content":"        case \"find\":","lastModifiedDate":"2023-09-15"},{"lineNumber":148,"author":{"gitId":"raydenlim"},"content":"            return createFindCommand(input);","lastModifiedDate":"2023-09-15"},{"lineNumber":149,"author":{"gitId":"raydenlim"},"content":"        default:","lastModifiedDate":"2023-09-15"},{"lineNumber":150,"author":{"gitId":"raydenlim"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t understand that command.\");","lastModifiedDate":"2023-09-15"},{"lineNumber":151,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":152,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":153,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":154,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":155,"author":{"gitId":"raydenlim"},"content":"     * Creates a ToDoCommand based on user input.","lastModifiedDate":"2023-09-15"},{"lineNumber":156,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-15"},{"lineNumber":157,"author":{"gitId":"raydenlim"},"content":"     * @param input The user input string containing the command and description.","lastModifiedDate":"2023-09-15"},{"lineNumber":158,"author":{"gitId":"raydenlim"},"content":"     * @return A ToDoCommand instance based on the user input.","lastModifiedDate":"2023-09-15"},{"lineNumber":159,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException If there is an issue parsing the input.","lastModifiedDate":"2023-09-15"},{"lineNumber":160,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":161,"author":{"gitId":"raydenlim"},"content":"    private static ToDoCommand createToDoCommand(String input) throws DukeException {","lastModifiedDate":"2023-09-15"},{"lineNumber":162,"author":{"gitId":"raydenlim"},"content":"        try {","lastModifiedDate":"2023-09-15"},{"lineNumber":163,"author":{"gitId":"raydenlim"},"content":"            String todoDesc \u003d input.substring(5).trim();","lastModifiedDate":"2023-09-15"},{"lineNumber":164,"author":{"gitId":"raydenlim"},"content":"            Task todoTask \u003d new ToDo(todoDesc);","lastModifiedDate":"2023-09-02"},{"lineNumber":165,"author":{"gitId":"raydenlim"},"content":"            return new ToDoCommand(todoTask);","lastModifiedDate":"2023-09-02"},{"lineNumber":166,"author":{"gitId":"raydenlim"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-15"},{"lineNumber":167,"author":{"gitId":"raydenlim"},"content":"            throw new DukeException(\"Error parsing ToDo command: \" + input);","lastModifiedDate":"2023-09-15"},{"lineNumber":168,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":169,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":170,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":171,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":172,"author":{"gitId":"raydenlim"},"content":"     * Creates an AddCommand based on user input.","lastModifiedDate":"2023-09-15"},{"lineNumber":173,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-15"},{"lineNumber":174,"author":{"gitId":"raydenlim"},"content":"     * @param input The user input string containing the command and description.","lastModifiedDate":"2023-09-15"},{"lineNumber":175,"author":{"gitId":"raydenlim"},"content":"     * @return An AddCommand instance based on the user input.","lastModifiedDate":"2023-09-15"},{"lineNumber":176,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException If there is an issue parsing the input.","lastModifiedDate":"2023-09-15"},{"lineNumber":177,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":178,"author":{"gitId":"raydenlim"},"content":"    private static AddCommand createAddCommand(String input) throws DukeException {","lastModifiedDate":"2023-09-15"},{"lineNumber":179,"author":{"gitId":"raydenlim"},"content":"        try {","lastModifiedDate":"2023-09-15"},{"lineNumber":180,"author":{"gitId":"raydenlim"},"content":"            String[] words \u003d input.split(\" \");","lastModifiedDate":"2023-09-15"},{"lineNumber":181,"author":{"gitId":"raydenlim"},"content":"            if (words.length \u003c 2) {","lastModifiedDate":"2023-09-15"},{"lineNumber":182,"author":{"gitId":"raydenlim"},"content":"                throw new DukeException(\"Please specify a task to add.\");","lastModifiedDate":"2023-09-15"},{"lineNumber":183,"author":{"gitId":"raydenlim"},"content":"            }","lastModifiedDate":"2023-09-15"},{"lineNumber":184,"author":{"gitId":"raydenlim"},"content":"            String addDesc \u003d input.substring(4).trim();","lastModifiedDate":"2023-09-02"},{"lineNumber":185,"author":{"gitId":"raydenlim"},"content":"            Task addTask \u003d new Add(addDesc);","lastModifiedDate":"2023-09-07"},{"lineNumber":186,"author":{"gitId":"raydenlim"},"content":"            return new AddCommand(addTask);","lastModifiedDate":"2023-09-02"},{"lineNumber":187,"author":{"gitId":"raydenlim"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-15"},{"lineNumber":188,"author":{"gitId":"raydenlim"},"content":"            throw new DukeException(\"Error parsing Add command: \" + input);","lastModifiedDate":"2023-09-15"},{"lineNumber":189,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":190,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":191,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":192,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":193,"author":{"gitId":"raydenlim"},"content":"     * Creates a DeadLineCommand based on user input.","lastModifiedDate":"2023-09-15"},{"lineNumber":194,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-15"},{"lineNumber":195,"author":{"gitId":"raydenlim"},"content":"     * @param input The user input string containing the command and description.","lastModifiedDate":"2023-09-15"},{"lineNumber":196,"author":{"gitId":"raydenlim"},"content":"     * @return A DeadLineCommand instance based on the user input.","lastModifiedDate":"2023-09-15"},{"lineNumber":197,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException If there is an issue parsing the input.","lastModifiedDate":"2023-09-15"},{"lineNumber":198,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":199,"author":{"gitId":"raydenlim"},"content":"    private static DeadLineCommand createDeadLineCommand(String input) throws DukeException {","lastModifiedDate":"2023-09-15"},{"lineNumber":200,"author":{"gitId":"raydenlim"},"content":"        try {","lastModifiedDate":"2023-09-15"},{"lineNumber":201,"author":{"gitId":"raydenlim"},"content":"            String deadlineDesc \u003d input.substring(8).trim();","lastModifiedDate":"2023-09-15"},{"lineNumber":202,"author":{"gitId":"raydenlim"},"content":"            if (!deadlineDesc.contains(\"/by\")) {","lastModifiedDate":"2023-09-02"},{"lineNumber":203,"author":{"gitId":"raydenlim"},"content":"                throw new DukeException(\"The deadline command should include \u0027/by\u0027.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":204,"author":{"gitId":"raydenlim"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":205,"author":{"gitId":"raydenlim"},"content":"            String[] deadlineParts \u003d deadlineDesc.split(\"/by\");","lastModifiedDate":"2023-09-02"},{"lineNumber":206,"author":{"gitId":"raydenlim"},"content":"            String description \u003d deadlineParts[0].trim();","lastModifiedDate":"2023-09-02"},{"lineNumber":207,"author":{"gitId":"raydenlim"},"content":"            String by \u003d deadlineParts[1].trim();","lastModifiedDate":"2023-09-02"},{"lineNumber":208,"author":{"gitId":"raydenlim"},"content":"            return new DeadLineCommand(description, by);","lastModifiedDate":"2023-09-02"},{"lineNumber":209,"author":{"gitId":"raydenlim"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-15"},{"lineNumber":210,"author":{"gitId":"raydenlim"},"content":"            throw new DukeException(\"Error parsing Deadline command: \" + input);","lastModifiedDate":"2023-09-15"},{"lineNumber":211,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":212,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":213,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":214,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":215,"author":{"gitId":"raydenlim"},"content":"     * Creates an EventCommand based on user input.","lastModifiedDate":"2023-09-15"},{"lineNumber":216,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-15"},{"lineNumber":217,"author":{"gitId":"raydenlim"},"content":"     * @param input The user input string containing the command and event description.","lastModifiedDate":"2023-09-15"},{"lineNumber":218,"author":{"gitId":"raydenlim"},"content":"     * @return An EventCommand instance based on the user input.","lastModifiedDate":"2023-09-15"},{"lineNumber":219,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException If there is an issue parsing the input.","lastModifiedDate":"2023-09-15"},{"lineNumber":220,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":221,"author":{"gitId":"raydenlim"},"content":"    private static EventCommand createEventCommand(String input) throws DukeException {","lastModifiedDate":"2023-09-15"},{"lineNumber":222,"author":{"gitId":"raydenlim"},"content":"        try {","lastModifiedDate":"2023-09-15"},{"lineNumber":223,"author":{"gitId":"raydenlim"},"content":"            String eventDesc \u003d input.substring(5).trim();","lastModifiedDate":"2023-09-15"},{"lineNumber":224,"author":{"gitId":"raydenlim"},"content":"            if (!eventDesc.contains(\"/from\") || !eventDesc.contains(\"/to\")) {","lastModifiedDate":"2023-09-02"},{"lineNumber":225,"author":{"gitId":"raydenlim"},"content":"                throw new DukeException(\"The event command should include \u0027/from\u0027 and \u0027/to\u0027.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":226,"author":{"gitId":"raydenlim"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":227,"author":{"gitId":"raydenlim"},"content":"            String[] eventParts \u003d eventDesc.split(\"/from\");","lastModifiedDate":"2023-09-02"},{"lineNumber":228,"author":{"gitId":"raydenlim"},"content":"            String eventDescription \u003d eventParts[0].trim();","lastModifiedDate":"2023-09-02"},{"lineNumber":229,"author":{"gitId":"raydenlim"},"content":"            String[] dateParts \u003d eventParts[1].split(\"/to\");","lastModifiedDate":"2023-09-02"},{"lineNumber":230,"author":{"gitId":"raydenlim"},"content":"            String from \u003d dateParts[0].trim();","lastModifiedDate":"2023-09-02"},{"lineNumber":231,"author":{"gitId":"raydenlim"},"content":"            String to \u003d dateParts[1].trim();","lastModifiedDate":"2023-09-02"},{"lineNumber":232,"author":{"gitId":"raydenlim"},"content":"            return new EventCommand(eventDescription, from, to);","lastModifiedDate":"2023-09-02"},{"lineNumber":233,"author":{"gitId":"raydenlim"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-15"},{"lineNumber":234,"author":{"gitId":"raydenlim"},"content":"            throw new DukeException(\"Error parsing Event command: \" + input);","lastModifiedDate":"2023-09-15"},{"lineNumber":235,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":236,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":237,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":238,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":239,"author":{"gitId":"raydenlim"},"content":"     * Creates a MarkCommand based on user input.","lastModifiedDate":"2023-09-15"},{"lineNumber":240,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-15"},{"lineNumber":241,"author":{"gitId":"raydenlim"},"content":"     * @param input The user input string containing the command and task number to mark as done.","lastModifiedDate":"2023-09-15"},{"lineNumber":242,"author":{"gitId":"raydenlim"},"content":"     * @return A MarkCommand instance based on the user input.","lastModifiedDate":"2023-09-15"},{"lineNumber":243,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException If there is an issue parsing the input.","lastModifiedDate":"2023-09-15"},{"lineNumber":244,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":245,"author":{"gitId":"raydenlim"},"content":"    private static MarkCommand createMarkCommand(String input) throws DukeException {","lastModifiedDate":"2023-09-15"},{"lineNumber":246,"author":{"gitId":"raydenlim"},"content":"        try {","lastModifiedDate":"2023-09-15"},{"lineNumber":247,"author":{"gitId":"raydenlim"},"content":"            String[] words \u003d input.split(\" \");","lastModifiedDate":"2023-09-15"},{"lineNumber":248,"author":{"gitId":"raydenlim"},"content":"            if (words.length \u003c 2) {","lastModifiedDate":"2023-09-02"},{"lineNumber":249,"author":{"gitId":"raydenlim"},"content":"                throw new DukeException(\"Please specify a task number to mark as done.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":250,"author":{"gitId":"raydenlim"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":251,"author":{"gitId":"raydenlim"},"content":"            int taskNumberToMark \u003d Integer.parseInt(words[1]) - 1;","lastModifiedDate":"2023-09-15"},{"lineNumber":252,"author":{"gitId":"raydenlim"},"content":"            return new MarkCommand(taskNumberToMark);","lastModifiedDate":"2023-09-02"},{"lineNumber":253,"author":{"gitId":"raydenlim"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-15"},{"lineNumber":254,"author":{"gitId":"raydenlim"},"content":"            throw new DukeException(\"Error parsing Mark command: \" + input);","lastModifiedDate":"2023-09-15"},{"lineNumber":255,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":256,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":257,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":258,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":259,"author":{"gitId":"raydenlim"},"content":"     * Creates an UnmarkCommand based on user input.","lastModifiedDate":"2023-09-15"},{"lineNumber":260,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-15"},{"lineNumber":261,"author":{"gitId":"raydenlim"},"content":"     * @param input The user input string containing the command and task number to unmark.","lastModifiedDate":"2023-09-15"},{"lineNumber":262,"author":{"gitId":"raydenlim"},"content":"     * @return An UnmarkCommand instance based on the user input.","lastModifiedDate":"2023-09-15"},{"lineNumber":263,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException If there is an issue parsing the input.","lastModifiedDate":"2023-09-15"},{"lineNumber":264,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":265,"author":{"gitId":"raydenlim"},"content":"    private static UnmarkCommand createUnmarkCommand(String input) throws DukeException {","lastModifiedDate":"2023-09-15"},{"lineNumber":266,"author":{"gitId":"raydenlim"},"content":"        try {","lastModifiedDate":"2023-09-15"},{"lineNumber":267,"author":{"gitId":"raydenlim"},"content":"            String[] words \u003d input.split(\" \");","lastModifiedDate":"2023-09-15"},{"lineNumber":268,"author":{"gitId":"raydenlim"},"content":"            if (words.length \u003c 2) {","lastModifiedDate":"2023-09-15"},{"lineNumber":269,"author":{"gitId":"raydenlim"},"content":"                throw new DukeException(\"Please specify a task number to unmark.\");","lastModifiedDate":"2023-09-15"},{"lineNumber":270,"author":{"gitId":"raydenlim"},"content":"            }","lastModifiedDate":"2023-09-15"},{"lineNumber":271,"author":{"gitId":"raydenlim"},"content":"            int taskNumberToUnmark \u003d Integer.parseInt(words[1]) - 1;","lastModifiedDate":"2023-09-15"},{"lineNumber":272,"author":{"gitId":"raydenlim"},"content":"            return new UnmarkCommand(taskNumberToUnmark);","lastModifiedDate":"2023-09-15"},{"lineNumber":273,"author":{"gitId":"raydenlim"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-15"},{"lineNumber":274,"author":{"gitId":"raydenlim"},"content":"            throw new DukeException(\"Error parsing Unmark command: \" + input);","lastModifiedDate":"2023-09-15"},{"lineNumber":275,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":276,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":277,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":278,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":279,"author":{"gitId":"raydenlim"},"content":"     * Creates an EchoCommand based on user input.","lastModifiedDate":"2023-09-15"},{"lineNumber":280,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-15"},{"lineNumber":281,"author":{"gitId":"raydenlim"},"content":"     * @param input The user input string containing the command and text for the echo.","lastModifiedDate":"2023-09-15"},{"lineNumber":282,"author":{"gitId":"raydenlim"},"content":"     * @return An EchoCommand instance based on the user input.","lastModifiedDate":"2023-09-15"},{"lineNumber":283,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException If there is an issue parsing the input.","lastModifiedDate":"2023-09-15"},{"lineNumber":284,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":285,"author":{"gitId":"raydenlim"},"content":"    private static EchoCommand createEchoCommand(String input) throws DukeException {","lastModifiedDate":"2023-09-15"},{"lineNumber":286,"author":{"gitId":"raydenlim"},"content":"        try {","lastModifiedDate":"2023-09-15"},{"lineNumber":287,"author":{"gitId":"raydenlim"},"content":"            String[] words \u003d input.split(\" \");","lastModifiedDate":"2023-09-15"},{"lineNumber":288,"author":{"gitId":"raydenlim"},"content":"            if (words.length \u003c 2) {","lastModifiedDate":"2023-09-02"},{"lineNumber":289,"author":{"gitId":"raydenlim"},"content":"                throw new DukeException(\"Please provide text for the echo command.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":290,"author":{"gitId":"raydenlim"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":291,"author":{"gitId":"raydenlim"},"content":"            String echoText \u003d input.substring(5).trim();","lastModifiedDate":"2023-09-15"},{"lineNumber":292,"author":{"gitId":"raydenlim"},"content":"            return new EchoCommand(echoText);","lastModifiedDate":"2023-09-02"},{"lineNumber":293,"author":{"gitId":"raydenlim"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-15"},{"lineNumber":294,"author":{"gitId":"raydenlim"},"content":"            throw new DukeException(\"Error parsing Echo command: \" + input);","lastModifiedDate":"2023-09-15"},{"lineNumber":295,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":296,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":297,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":298,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":299,"author":{"gitId":"raydenlim"},"content":"     * Creates a DeleteCommand based on user input.","lastModifiedDate":"2023-09-15"},{"lineNumber":300,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-15"},{"lineNumber":301,"author":{"gitId":"raydenlim"},"content":"     * @param input The user input string containing the command and task index to delete.","lastModifiedDate":"2023-09-15"},{"lineNumber":302,"author":{"gitId":"raydenlim"},"content":"     * @return A DeleteCommand instance based on the user input.","lastModifiedDate":"2023-09-15"},{"lineNumber":303,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException If there is an issue parsing the input.","lastModifiedDate":"2023-09-15"},{"lineNumber":304,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":305,"author":{"gitId":"raydenlim"},"content":"    private static DeleteCommand createDeleteCommand(String input) throws DukeException {","lastModifiedDate":"2023-09-15"},{"lineNumber":306,"author":{"gitId":"raydenlim"},"content":"        try {","lastModifiedDate":"2023-09-15"},{"lineNumber":307,"author":{"gitId":"raydenlim"},"content":"            String[] words \u003d input.split(\" \");","lastModifiedDate":"2023-09-15"},{"lineNumber":308,"author":{"gitId":"raydenlim"},"content":"            if (words.length \u003c 2) {","lastModifiedDate":"2023-09-15"},{"lineNumber":309,"author":{"gitId":"raydenlim"},"content":"                throw new DukeException(\"Please provide me a task index to delete\");","lastModifiedDate":"2023-09-15"},{"lineNumber":310,"author":{"gitId":"raydenlim"},"content":"            }","lastModifiedDate":"2023-09-15"},{"lineNumber":311,"author":{"gitId":"raydenlim"},"content":"            int taskNumToDel \u003d Integer.parseInt(words[1]) - 1;","lastModifiedDate":"2023-09-02"},{"lineNumber":312,"author":{"gitId":"raydenlim"},"content":"            return new DeleteCommand(taskNumToDel);","lastModifiedDate":"2023-09-02"},{"lineNumber":313,"author":{"gitId":"raydenlim"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-15"},{"lineNumber":314,"author":{"gitId":"raydenlim"},"content":"            throw new DukeException(\"Error parsing Delete command: \" + input);","lastModifiedDate":"2023-09-15"},{"lineNumber":315,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":316,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":317,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":318,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":319,"author":{"gitId":"raydenlim"},"content":"     * Creates a FindCommand based on user input.","lastModifiedDate":"2023-09-15"},{"lineNumber":320,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-15"},{"lineNumber":321,"author":{"gitId":"raydenlim"},"content":"     * @param input The user input string containing the command and keyword for searching.","lastModifiedDate":"2023-09-15"},{"lineNumber":322,"author":{"gitId":"raydenlim"},"content":"     * @return A FindCommand instance based on the user input.","lastModifiedDate":"2023-09-15"},{"lineNumber":323,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException If there is an issue parsing the input.","lastModifiedDate":"2023-09-15"},{"lineNumber":324,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":325,"author":{"gitId":"raydenlim"},"content":"    private static FindCommand createFindCommand(String input) throws DukeException {","lastModifiedDate":"2023-09-15"},{"lineNumber":326,"author":{"gitId":"raydenlim"},"content":"        try {","lastModifiedDate":"2023-09-15"},{"lineNumber":327,"author":{"gitId":"raydenlim"},"content":"            String[] words \u003d input.split(\" \");","lastModifiedDate":"2023-09-15"},{"lineNumber":328,"author":{"gitId":"raydenlim"},"content":"            if (words.length \u003c 2) {","lastModifiedDate":"2023-09-03"},{"lineNumber":329,"author":{"gitId":"raydenlim"},"content":"                throw new DukeException(\"Please provide a keyword for the find command.\");","lastModifiedDate":"2023-09-03"},{"lineNumber":330,"author":{"gitId":"raydenlim"},"content":"            }","lastModifiedDate":"2023-09-03"},{"lineNumber":331,"author":{"gitId":"raydenlim"},"content":"            String keyword \u003d input.substring(5).trim();","lastModifiedDate":"2023-09-03"},{"lineNumber":332,"author":{"gitId":"raydenlim"},"content":"            return new FindCommand(keyword);","lastModifiedDate":"2023-09-03"},{"lineNumber":333,"author":{"gitId":"raydenlim"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-15"},{"lineNumber":334,"author":{"gitId":"raydenlim"},"content":"            throw new DukeException(\"Error parsing Find command: \" + input);","lastModifiedDate":"2023-09-15"},{"lineNumber":335,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":336,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":337,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"raydenlim":337}},{"path":"src/main/java/Storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"import java.io.File;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":"import parser.Parser;","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":"import task.Task;","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":"import tasklist.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":" * The `Storage` class is responsible for managing the storage and retrieval of tasks in the BloopBot application.","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":" * It handles saving tasks to a file and loading tasks from a file.","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":" * This class ensures that tasks are persisted between program runs.","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":"public class Storage { // Previously named TaskListManager, serves the same purpose","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":"    private File file;","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":"    private String taskDataPath;","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":"     * Constructs a new `Storage` object with the specified directory path, file name, and `TaskList`.","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"raydenlim"},"content":"     * @param directoryPath The directory path where the task data file will be stored.","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"raydenlim"},"content":"     * @param fileName      The name of the task data file.","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"raydenlim"},"content":"     * @param taskList      The `TaskList` containing tasks to be managed by the storage.","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"raydenlim"},"content":"    public Storage(String directoryPath, String fileName, TaskList taskList) {","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"raydenlim"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"raydenlim"},"content":"        this.taskDataPath \u003d directoryPath + \"/\" + fileName;","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"raydenlim"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"raydenlim"},"content":"            if (new File(directoryPath).mkdirs()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"raydenlim"},"content":"                System.out.println(\"Directories are created.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"raydenlim"},"content":"            } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"raydenlim"},"content":"                System.out.println(\"Directories already exist.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"raydenlim"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"raydenlim"},"content":"            this.file \u003d new File(taskDataPath);","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"raydenlim"},"content":"            if (this.file.createNewFile()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"raydenlim"},"content":"                System.out.println(\"File is created: \" + this.file.getName());","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"raydenlim"},"content":"            } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"raydenlim"},"content":"                System.out.println(\"File already exists.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"raydenlim"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"raydenlim"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"raydenlim"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"raydenlim"},"content":"     * Saves the provided list of tasks to the task data file.","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"raydenlim"},"content":"     * @param tasks The list of tasks to be saved.","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"raydenlim"},"content":"     * @return A message indicating the result of the save operation.","lastModifiedDate":"2023-09-07"},{"lineNumber":62,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"raydenlim"},"content":"    public String saveTask(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-09-07"},{"lineNumber":64,"author":{"gitId":"raydenlim"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"raydenlim"},"content":"            FileWriter w \u003d new FileWriter(taskDataPath);","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"raydenlim"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"raydenlim"},"content":"                w.write(task.toString() + \"\\n\");","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"raydenlim"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"raydenlim"},"content":"            w.close();","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"raydenlim"},"content":"            return \"Tasks saved successfully!\";","lastModifiedDate":"2023-09-07"},{"lineNumber":71,"author":{"gitId":"raydenlim"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"raydenlim"},"content":"            return \"Error occurred when saving tasks to the file.\";","lastModifiedDate":"2023-09-07"},{"lineNumber":73,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":77,"author":{"gitId":"raydenlim"},"content":"     * Loads tasks from the task data file and adds them to the `TaskList`.","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":79,"author":{"gitId":"raydenlim"},"content":"     * @return A message indicating the result of the load operation.","lastModifiedDate":"2023-09-07"},{"lineNumber":80,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"raydenlim"},"content":"    public String loadTasks() {","lastModifiedDate":"2023-09-07"},{"lineNumber":82,"author":{"gitId":"raydenlim"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"raydenlim"},"content":"            File file \u003d new File(taskDataPath);","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"raydenlim"},"content":"            if (!file.exists()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"raydenlim"},"content":"                return \"No such file\";","lastModifiedDate":"2023-09-07"},{"lineNumber":86,"author":{"gitId":"raydenlim"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":87,"author":{"gitId":"raydenlim"},"content":"            Scanner fileScanner \u003d new Scanner(file);","lastModifiedDate":"2023-09-02"},{"lineNumber":88,"author":{"gitId":"raydenlim"},"content":"            while (fileScanner.hasNextLine()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":89,"author":{"gitId":"raydenlim"},"content":"                String taskData \u003d fileScanner.nextLine();","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"raydenlim"},"content":"                Task task \u003d Parser.parseTask(taskData);","lastModifiedDate":"2023-09-02"},{"lineNumber":91,"author":{"gitId":"raydenlim"},"content":"                if (task !\u003d null) {","lastModifiedDate":"2023-09-02"},{"lineNumber":92,"author":{"gitId":"raydenlim"},"content":"                    taskList.addTask(task);","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"raydenlim"},"content":"                }","lastModifiedDate":"2023-09-02"},{"lineNumber":94,"author":{"gitId":"raydenlim"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":95,"author":{"gitId":"raydenlim"},"content":"            fileScanner.close();","lastModifiedDate":"2023-09-02"},{"lineNumber":96,"author":{"gitId":"raydenlim"},"content":"            return \"Tasks loaded successfully.\";","lastModifiedDate":"2023-09-07"},{"lineNumber":97,"author":{"gitId":"raydenlim"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":98,"author":{"gitId":"raydenlim"},"content":"            return \"Error occurred when loading tasks from the file.\";","lastModifiedDate":"2023-09-07"},{"lineNumber":99,"author":{"gitId":"raydenlim"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":100,"author":{"gitId":"raydenlim"},"content":"            return \"File is corrupted :(\";","lastModifiedDate":"2023-09-07"},{"lineNumber":101,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":102,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":103,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"raydenlim":103}},{"path":"src/main/java/Task/Add.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package task;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":" * The `Add` class represents an \"add\" task in the BloopBot application.","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":" * It extends the base `Task` class and inherits its properties and methods.","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":" * An `Add` task includes a description and can be marked as completed or not completed.","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":" * This class is used to represent tasks created using the \"add\" command.","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":"public class Add extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":"     * Constructs a new `Add` task with the specified description.","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":"     * @param description The description of the `Add` task.","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":"    public Add(String description) {","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"raydenlim":22}},{"path":"src/main/java/Task/DeadLine.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package task;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":" * The `DeadLine` class represents a deadline task in the BloopBot application.","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":" * It extends the base `Task` class and inherits its properties and methods.","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":" * A `DeadLine` task includes a description and a deadline represented by a \"by\" string.","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":" * It can be marked as completed or not completed.","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":" * This class provides methods to create and format `DeadLine` tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":"public class DeadLine extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":"    protected LocalDateTime byDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":"    protected String by;","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":"     * Constructs a new `DeadLine` task with the specified description and deadline.","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":"     * @param description   The description of the `DeadLine` task.","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":"     * @param byDescription The deadline represented as a string.","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":"    public DeadLine(String description, String by) {","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"        this.byDateTime \u003d parseDateTime(by);","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"raydenlim"},"content":"     * Returns a string representation of the `DeadLine` task.","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"raydenlim"},"content":"     * The representation includes the task\u0027s type icon, status icon, description,","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"raydenlim"},"content":"     * and the deadline in a human-readable format.","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"raydenlim"},"content":"     * @return The string representation of the `DeadLine` task.","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"raydenlim"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"raydenlim"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"raydenlim"},"content":"        if (byDateTime !\u003d null) {","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"raydenlim"},"content":"            return getTask() + getStatusIcon() + \" \" + description + \" (by: \"","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"raydenlim"},"content":"                    + super.printDateTime(this.byDateTime) + \")\";","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"raydenlim"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"raydenlim"},"content":"            return getTask() + getStatusIcon() + \" \" + description + \" (by: \" + by + \")\";","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"raydenlim":46}},{"path":"src/main/java/Task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package task;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":" * The `Event` class represents an event task in the BloopBot application.","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":" * It extends the base `Task` class and inherits its properties and methods.","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":" * An `Event` task includes a description and a time period represented by \"from\" and \"to\" strings.","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":" * It can be marked as completed or not completed.","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":" * This class provides methods to create and format `Event` tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":"    protected String from;","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":"    protected String to;","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":"    protected LocalDateTime fromDate;","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":"    protected LocalDateTime toDate;","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":"     * Constructs a new `Event` task with the specified description and time period.","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":"     * @param description The description of the `Event` task.","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":"     * @param from        The starting date and time of the event.","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"     * @param to          The ending date and time of the event.","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"raydenlim"},"content":"        this.fromDate \u003d parseDateTime(from);","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"raydenlim"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"raydenlim"},"content":"        this.toDate \u003d parseDateTime(to);","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"raydenlim"},"content":"     * Returns a string representation of the `Event` task.","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"raydenlim"},"content":"     * The representation includes the task\u0027s type icon, status icon, description,","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"raydenlim"},"content":"     * and the time period in a human-readable format.","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"raydenlim"},"content":"     * @return The string representation of the `Event` task.","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"raydenlim"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"raydenlim"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"raydenlim"},"content":"        if (fromDate !\u003d null \u0026\u0026 toDate !\u003d null) {","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"raydenlim"},"content":"            return getTask() + getStatusIcon() + \" \" + description + \" (from: \" + super.printDateTime(this.fromDate)","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"raydenlim"},"content":"                    + \" to: \" + super.printDateTime(this.toDate) + \")\";","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"raydenlim"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"raydenlim"},"content":"            return getTask() + getStatusIcon() + \" \" + description + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"raydenlim":51}},{"path":"src/main/java/Task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package task;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":" * The `Task` class represents a generic task in the BloopBot application.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":" * It serves as the base class for different types of tasks, including Add, ToDo, DeadLine, and Event tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":" * A task contains a description and can be marked as completed or not completed.","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":" * It also provides methods for parsing and formatting date and time information.","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":"public class Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":"    protected String description;","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":"    protected String dateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":"     * Constructs a new task with the specified description.","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"     * @param taskDesc The description of the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"    public Task(String taskDesc) {","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":"        this.description \u003d taskDesc;","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"raydenlim"},"content":"     * Checks if the task is marked as completed.","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"raydenlim"},"content":"     * @return `true` if the task is marked as completed, `false` otherwise.","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"raydenlim"},"content":"    public boolean checkIsDone() {","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"raydenlim"},"content":"        return isDone;","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"raydenlim"},"content":"     * Gets the description of the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"raydenlim"},"content":"     * @return The description of the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"raydenlim"},"content":"    public String getDescription() {","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"raydenlim"},"content":"        return description;","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"raydenlim"},"content":"     * Marks the task as completed.","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"raydenlim"},"content":"    public void isCompleted() {","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"raydenlim"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-08-23"},{"lineNumber":55,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":56,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":57,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"raydenlim"},"content":"     * Marks the task as not completed.","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"raydenlim"},"content":"    public void isNotCompleted() {","lastModifiedDate":"2023-08-23"},{"lineNumber":61,"author":{"gitId":"raydenlim"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":62,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":63,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":64,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"raydenlim"},"content":"     * Gets the status icon of the task to represent its completion status.","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"raydenlim"},"content":"     * @return The status icon as a string, either \"[X]\" for completed or \"[ ]\" for not completed.","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"raydenlim"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-23"},{"lineNumber":70,"author":{"gitId":"raydenlim"},"content":"        return (isDone ? \"[X]\" : \"[ ]\");","lastModifiedDate":"2023-08-23"},{"lineNumber":71,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":72,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":73,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"raydenlim"},"content":"     * Gets a string representation of the task\u0027s type icon.","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"raydenlim"},"content":"     * This is used to identify the type of the task (Add, ToDo, DeadLine, Event).","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":77,"author":{"gitId":"raydenlim"},"content":"     * @return The type icon as a string.","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"raydenlim"},"content":"    public String getTask() {","lastModifiedDate":"2023-08-23"},{"lineNumber":80,"author":{"gitId":"raydenlim"},"content":"        return \"[\" + getTypeIcon() + \"]\";","lastModifiedDate":"2023-08-23"},{"lineNumber":81,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":82,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":83,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"raydenlim"},"content":"     * Gets the type icon of the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"raydenlim"},"content":"     * It identifies the type of task (A for Add, T for ToDo, D for DeadLine, E for Event).","lastModifiedDate":"2023-09-02"},{"lineNumber":86,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":87,"author":{"gitId":"raydenlim"},"content":"     * @return The type icon as a string.","lastModifiedDate":"2023-09-02"},{"lineNumber":88,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":89,"author":{"gitId":"raydenlim"},"content":"    public String getTypeIcon() {","lastModifiedDate":"2023-08-23"},{"lineNumber":90,"author":{"gitId":"raydenlim"},"content":"        if (this instanceof Add) {","lastModifiedDate":"2023-08-23"},{"lineNumber":91,"author":{"gitId":"raydenlim"},"content":"            return \"A\";","lastModifiedDate":"2023-08-23"},{"lineNumber":92,"author":{"gitId":"raydenlim"},"content":"        } else if (this instanceof ToDo) {","lastModifiedDate":"2023-08-23"},{"lineNumber":93,"author":{"gitId":"raydenlim"},"content":"            return \"T\";","lastModifiedDate":"2023-08-23"},{"lineNumber":94,"author":{"gitId":"raydenlim"},"content":"        } else if (this instanceof DeadLine) {","lastModifiedDate":"2023-08-23"},{"lineNumber":95,"author":{"gitId":"raydenlim"},"content":"            return \"D\";","lastModifiedDate":"2023-08-23"},{"lineNumber":96,"author":{"gitId":"raydenlim"},"content":"        } else if (this instanceof Event) {","lastModifiedDate":"2023-08-23"},{"lineNumber":97,"author":{"gitId":"raydenlim"},"content":"            return \"E\";","lastModifiedDate":"2023-08-23"},{"lineNumber":98,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":99,"author":{"gitId":"raydenlim"},"content":"        return \"\";","lastModifiedDate":"2023-09-02"},{"lineNumber":100,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":101,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":102,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":103,"author":{"gitId":"raydenlim"},"content":"     * Validates a date string against a specified date format.","lastModifiedDate":"2023-09-02"},{"lineNumber":104,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":105,"author":{"gitId":"raydenlim"},"content":"     * @param date   The date string to validate.","lastModifiedDate":"2023-09-02"},{"lineNumber":106,"author":{"gitId":"raydenlim"},"content":"     * @param format The expected date format (e.g., \"yyyy-MM-dd HH:mm\").","lastModifiedDate":"2023-09-02"},{"lineNumber":107,"author":{"gitId":"raydenlim"},"content":"     * @return true if the date string is valid; false otherwise.","lastModifiedDate":"2023-09-02"},{"lineNumber":108,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":109,"author":{"gitId":"raydenlim"},"content":"    private static boolean validateDate(String date, String format) {","lastModifiedDate":"2023-09-02"},{"lineNumber":110,"author":{"gitId":"raydenlim"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(format);","lastModifiedDate":"2023-09-02"},{"lineNumber":111,"author":{"gitId":"raydenlim"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":112,"author":{"gitId":"raydenlim"},"content":"            formatter.parse(date);","lastModifiedDate":"2023-09-02"},{"lineNumber":113,"author":{"gitId":"raydenlim"},"content":"            return true;","lastModifiedDate":"2023-09-02"},{"lineNumber":114,"author":{"gitId":"raydenlim"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":115,"author":{"gitId":"raydenlim"},"content":"            return false;","lastModifiedDate":"2023-09-02"},{"lineNumber":116,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":117,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":118,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":119,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":120,"author":{"gitId":"raydenlim"},"content":"     * Formats a LocalDateTime object as a string with the pattern \"dd MMM yyyy HH:mm\".","lastModifiedDate":"2023-09-02"},{"lineNumber":121,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":122,"author":{"gitId":"raydenlim"},"content":"     * @param dateTime The LocalDateTime object to be formatted.","lastModifiedDate":"2023-09-02"},{"lineNumber":123,"author":{"gitId":"raydenlim"},"content":"     * @return The formatted date and time as a string.","lastModifiedDate":"2023-09-02"},{"lineNumber":124,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":125,"author":{"gitId":"raydenlim"},"content":"    public String printDateTime(LocalDateTime dateTime) {","lastModifiedDate":"2023-09-01"},{"lineNumber":126,"author":{"gitId":"raydenlim"},"content":"        DateTimeFormatter printFormat \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm\");","lastModifiedDate":"2023-09-01"},{"lineNumber":127,"author":{"gitId":"raydenlim"},"content":"        String formattedDate \u003d dateTime.format(printFormat);","lastModifiedDate":"2023-09-01"},{"lineNumber":128,"author":{"gitId":"raydenlim"},"content":"        return formattedDate;","lastModifiedDate":"2023-09-01"},{"lineNumber":129,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":131,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":132,"author":{"gitId":"raydenlim"},"content":"     * Checks if dateTime.length() is of length 10 or 15","lastModifiedDate":"2023-09-02"},{"lineNumber":133,"author":{"gitId":"raydenlim"},"content":"     * then it returns format properly","lastModifiedDate":"2023-09-02"},{"lineNumber":134,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":135,"author":{"gitId":"raydenlim"},"content":"     * @param dateTime The date and time string to be parsed.","lastModifiedDate":"2023-09-02"},{"lineNumber":136,"author":{"gitId":"raydenlim"},"content":"     * @return The parsed LocalDateTime object.","lastModifiedDate":"2023-09-02"},{"lineNumber":137,"author":{"gitId":"raydenlim"},"content":"     * @throws IllegalArgumentException if the date format is invalid.","lastModifiedDate":"2023-09-02"},{"lineNumber":138,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":139,"author":{"gitId":"raydenlim"},"content":"    public LocalDateTime parseDateTime(String dateTime) {","lastModifiedDate":"2023-09-01"},{"lineNumber":140,"author":{"gitId":"raydenlim"},"content":"        if (dateTime.length() \u003d\u003d 15 || validateDate(dateTime, \"dd/MM/yyyy HHmm\")) {","lastModifiedDate":"2023-09-02"},{"lineNumber":141,"author":{"gitId":"raydenlim"},"content":"            return parseDateTime15(dateTime);","lastModifiedDate":"2023-09-02"},{"lineNumber":142,"author":{"gitId":"raydenlim"},"content":"        } else if (dateTime.length() \u003d\u003d 10 || validateDate(dateTime, \"dd/MM/yyyy\")) {","lastModifiedDate":"2023-09-02"},{"lineNumber":143,"author":{"gitId":"raydenlim"},"content":"            return parseDateTime10(dateTime);","lastModifiedDate":"2023-09-02"},{"lineNumber":144,"author":{"gitId":"raydenlim"},"content":"        } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":145,"author":{"gitId":"raydenlim"},"content":"            return parseDateTime15(dateTime);","lastModifiedDate":"2023-09-02"},{"lineNumber":146,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":147,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":148,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":149,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":150,"author":{"gitId":"raydenlim"},"content":"     * Parses a date and time string of length 10 as a LocalDateTime object.","lastModifiedDate":"2023-09-02"},{"lineNumber":151,"author":{"gitId":"raydenlim"},"content":"     * The expected format of the date is \"dd/MM/yyyy\".","lastModifiedDate":"2023-09-02"},{"lineNumber":152,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":153,"author":{"gitId":"raydenlim"},"content":"     * @param dateTime The date and time string to be parsed.","lastModifiedDate":"2023-09-02"},{"lineNumber":154,"author":{"gitId":"raydenlim"},"content":"     * @return The parsed LocalDateTime object.","lastModifiedDate":"2023-09-02"},{"lineNumber":155,"author":{"gitId":"raydenlim"},"content":"     * @throws IllegalArgumentException if the date format is invalid.","lastModifiedDate":"2023-09-02"},{"lineNumber":156,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":157,"author":{"gitId":"raydenlim"},"content":"    public LocalDateTime parseDateTime10(String dateTime) {","lastModifiedDate":"2023-09-02"},{"lineNumber":158,"author":{"gitId":"raydenlim"},"content":"        DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");","lastModifiedDate":"2023-09-02"},{"lineNumber":159,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":160,"author":{"gitId":"raydenlim"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":161,"author":{"gitId":"raydenlim"},"content":"            LocalDate date \u003d LocalDate.parse(dateTime, inputFormatter);","lastModifiedDate":"2023-09-02"},{"lineNumber":162,"author":{"gitId":"raydenlim"},"content":"            LocalDateTime opDate \u003d date.atStartOfDay();","lastModifiedDate":"2023-09-02"},{"lineNumber":163,"author":{"gitId":"raydenlim"},"content":"            return opDate;","lastModifiedDate":"2023-09-02"},{"lineNumber":164,"author":{"gitId":"raydenlim"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":165,"author":{"gitId":"raydenlim"},"content":"            return null;","lastModifiedDate":"2023-09-02"},{"lineNumber":166,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":167,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":168,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":169,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":170,"author":{"gitId":"raydenlim"},"content":"     * Parses a date and time string of length 15 as a LocalDateTime object.","lastModifiedDate":"2023-09-02"},{"lineNumber":171,"author":{"gitId":"raydenlim"},"content":"     * The expected format of the date is \"dd/MM/yyyy HHmm\".","lastModifiedDate":"2023-09-02"},{"lineNumber":172,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":173,"author":{"gitId":"raydenlim"},"content":"     * @param dateTime The date and time string to be parsed.","lastModifiedDate":"2023-09-02"},{"lineNumber":174,"author":{"gitId":"raydenlim"},"content":"     * @return The parsed LocalDateTime object.","lastModifiedDate":"2023-09-02"},{"lineNumber":175,"author":{"gitId":"raydenlim"},"content":"     * @throws IllegalArgumentException if the date format is invalid.","lastModifiedDate":"2023-09-02"},{"lineNumber":176,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":177,"author":{"gitId":"raydenlim"},"content":"    public LocalDateTime parseDateTime15(String dateTime) {","lastModifiedDate":"2023-09-02"},{"lineNumber":178,"author":{"gitId":"raydenlim"},"content":"        DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2023-09-02"},{"lineNumber":179,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":180,"author":{"gitId":"raydenlim"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":181,"author":{"gitId":"raydenlim"},"content":"            LocalDateTime fromDateTime \u003d LocalDateTime.parse(dateTime, inputFormatter);","lastModifiedDate":"2023-09-02"},{"lineNumber":182,"author":{"gitId":"raydenlim"},"content":"            DateTimeFormatter outputFormatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm\");","lastModifiedDate":"2023-09-02"},{"lineNumber":183,"author":{"gitId":"raydenlim"},"content":"            String formattedFrom \u003d fromDateTime.format(outputFormatter);","lastModifiedDate":"2023-09-02"},{"lineNumber":184,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":185,"author":{"gitId":"raydenlim"},"content":"            return LocalDateTime.parse(formattedFrom, outputFormatter);","lastModifiedDate":"2023-09-02"},{"lineNumber":186,"author":{"gitId":"raydenlim"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":187,"author":{"gitId":"raydenlim"},"content":"            return null;","lastModifiedDate":"2023-09-01"},{"lineNumber":188,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":189,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":190,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":191,"author":{"gitId":"raydenlim"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":192,"author":{"gitId":"raydenlim"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":193,"author":{"gitId":"raydenlim"},"content":"        return getTask() + getStatusIcon() + \" \" + description;","lastModifiedDate":"2023-08-23"},{"lineNumber":194,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":195,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"raydenlim":195}},{"path":"src/main/java/Task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package task;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":" * The `TaskType` enum represents the different types of commands or actions that can be performed","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":" * in the BloopBot application.","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":" * Each enum value corresponds to a specific command, and it is used to identify the user\u0027s intended action.","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":" * The possible `TaskType` values include:","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":" * - ADD: Represents the \"add\" command.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":" * - TODO: Represents the \"todo\" command.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":" * - DEADLINE: Represents the \"deadline\" command.","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":" * - EVENT: Represents the \"event\" command.","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":" * - LIST: Represents the \"list\" command.","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":" * - MARK: Represents the \"mark\" command.","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":" * - UNMARK: Represents the \"unmark\" command.","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":" * - DELETE: Represents the \"delete\" command.","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":" * - BYE: Represents the \"bye\" command.","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":" * - ECHO: Represents the \"echo\" command.","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":" * - UNKNOWN: Represents an unknown or unsupported command.","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":" * - HELP: Represents the \"help\" command.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"public enum TaskType {","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"    ADD, TODO, DEADLINE, EVENT, LIST, MARK, UNMARK, DELETE, BYE, ECHO, UNKNOWN, HELP","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"raydenlim":27}},{"path":"src/main/java/Task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package task;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":" * The `ToDo` class represents a task without a specific deadline or event time in the BloopBot application.","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":" * It extends the base `Task` class and inherits its properties and methods.","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":" * A `ToDo` task only has a description and can be marked as completed or not completed.","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":"     * Constructs a new `ToDo` task with the specified description.","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":"     * @param taskDesc The description of the `ToDo` task.","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":"    public ToDo(String taskDesc) {","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":"        super(taskDesc);","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"raydenlim":20}},{"path":"src/main/java/TaskList/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package tasklist;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"import task.Task;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":" * The `TaskList` class represents a collection of tasks in the BloopBot application.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":" * It provides methods to manipulate the task list, such as adding, deleting, marking, and displaying tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":"public class TaskList {","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":"     * Constructs a new `TaskList` object with an empty list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":"        taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":"     * @param taskDesc The task to be added.","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":"     * @return A message indicating the result of the add operation.","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"raydenlim"},"content":"    public String addTask(Task taskDesc) {","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"raydenlim"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"raydenlim"},"content":"            if (taskList.size() \u003c 100) {","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"raydenlim"},"content":"                taskList.add(taskDesc);","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"raydenlim"},"content":"                return \"Task added: \" + taskDesc.toString();","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"raydenlim"},"content":"            } else {","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"raydenlim"},"content":"                return \"100/100 Task limit reached. Pay to upgrade your account.\";","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"raydenlim"},"content":"            }","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"raydenlim"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"raydenlim"},"content":"            return \"Error adding the task: \" + e.getMessage();","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"raydenlim"},"content":"     * Displays the tasks in the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"raydenlim"},"content":"     * If the list is empty, a message indicating no tasks are present is displayed.","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"raydenlim"},"content":"     * @return A formatted string containing the task list or a message indicating no tasks.","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"raydenlim"},"content":"    public String displayTasks() {","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"raydenlim"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"raydenlim"},"content":"        if (taskList.isEmpty()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"raydenlim"},"content":"            output.append(\"No tasks present in the list\");","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"raydenlim"},"content":"        } else {","lastModifiedDate":"2023-08-23"},{"lineNumber":55,"author":{"gitId":"raydenlim"},"content":"            for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"raydenlim"},"content":"                output.append(\" \").append(i + 1).append(\".\").append(taskList.get(i)).append(\"\\n\");","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"raydenlim"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"raydenlim"},"content":"        return output.toString();","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":61,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":62,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"raydenlim"},"content":"     * Deletes a task from the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"raydenlim"},"content":"     * @param taskNum The index of the task to be deleted.","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"raydenlim"},"content":"     * @return The deleted task.","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException If the task index is invalid.","lastModifiedDate":"2023-09-07"},{"lineNumber":68,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"raydenlim"},"content":"    public Task deleteTask(int taskNum) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":70,"author":{"gitId":"raydenlim"},"content":"        if (taskNum \u003e\u003d 0 \u0026\u0026 taskNum \u003c taskList.size()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":71,"author":{"gitId":"raydenlim"},"content":"            Task removedTask \u003d taskList.remove(taskNum);","lastModifiedDate":"2023-08-24"},{"lineNumber":72,"author":{"gitId":"raydenlim"},"content":"            return removedTask;","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"raydenlim"},"content":"        } else {","lastModifiedDate":"2023-08-24"},{"lineNumber":74,"author":{"gitId":"raydenlim"},"content":"            throw new DukeException(\"Invalid task index.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":75,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":76,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":77,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":78,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"raydenlim"},"content":"     * Retrieves the list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"raydenlim"},"content":"     * @return The list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"raydenlim"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"raydenlim"},"content":"        return taskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":88,"author":{"gitId":"raydenlim"},"content":"     * Retrieves the number of tasks in the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":89,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"raydenlim"},"content":"     * @return The number of tasks in the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":91,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":92,"author":{"gitId":"raydenlim"},"content":"    public int getTaskCount() {","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"raydenlim"},"content":"        return taskList.size();","lastModifiedDate":"2023-09-02"},{"lineNumber":94,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":95,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":96,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":97,"author":{"gitId":"raydenlim"},"content":"     * Finds and returns a list of tasks that contain the specified keyword in their descriptions.","lastModifiedDate":"2023-09-03"},{"lineNumber":98,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":99,"author":{"gitId":"raydenlim"},"content":"     * @param keyword The keyword to search for in task descriptions.","lastModifiedDate":"2023-09-03"},{"lineNumber":100,"author":{"gitId":"raydenlim"},"content":"     * @return An ArrayList of tasks that match the keyword.","lastModifiedDate":"2023-09-03"},{"lineNumber":101,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":102,"author":{"gitId":"raydenlim"},"content":"    public ArrayList\u003cTask\u003e findTasks(String keyword) {","lastModifiedDate":"2023-09-03"},{"lineNumber":103,"author":{"gitId":"raydenlim"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-03"},{"lineNumber":104,"author":{"gitId":"raydenlim"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2023-09-03"},{"lineNumber":105,"author":{"gitId":"raydenlim"},"content":"            if (task.getDescription().contains(keyword)) {","lastModifiedDate":"2023-09-03"},{"lineNumber":106,"author":{"gitId":"raydenlim"},"content":"                matchingTasks.add(task);","lastModifiedDate":"2023-09-03"},{"lineNumber":107,"author":{"gitId":"raydenlim"},"content":"            }","lastModifiedDate":"2023-09-03"},{"lineNumber":108,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":109,"author":{"gitId":"raydenlim"},"content":"        return matchingTasks;","lastModifiedDate":"2023-09-03"},{"lineNumber":110,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":111,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"raydenlim":111}},{"path":"src/main/java/Ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"import task.Task;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"import tasklist.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":" * The `Ui` class is responsible for handling the user interface of the BloopBot application.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":" * It provides methods to display messages, read user input, and show information about tasks and commands.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":"public class Ui {","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":"    private static final String HELP_DESK \u003d \"List of Commands: Add, Deadline, Event, Todo, Echo,\"","lastModifiedDate":"2023-09-15"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":"            + \"Mark, Unmark, Delete, Find, Bye\\n\"","lastModifiedDate":"2023-09-15"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":"            + \"1. Add - Add a task to the list\\n\"","lastModifiedDate":"2023-09-15"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":"            + \"2. Deadline - Add a task with a deadline\\n\"","lastModifiedDate":"2023-09-15"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":"            + \"3. Event - Add an event task\\n\"","lastModifiedDate":"2023-09-15"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":"            + \"4. Todo - Add a todo task\\n\"","lastModifiedDate":"2023-09-15"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":"            + \"5. Echo - Echo a message\\n\"","lastModifiedDate":"2023-09-15"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":"            + \"6. Mark - Mark a task as done\\n\"","lastModifiedDate":"2023-09-15"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"            + \"7. Unmark - Unmark a task as done\\n\"","lastModifiedDate":"2023-09-15"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"            + \"8. Delete - Delete a task\\n\"","lastModifiedDate":"2023-09-15"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"            + \"9. Find - Find tasks by keyword\\n\"","lastModifiedDate":"2023-09-15"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":"            + \"10. Bye - Exit the program\";","lastModifiedDate":"2023-09-15"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":30,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"raydenlim"},"content":"     * Displays a welcome message to the user when the application starts.","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"raydenlim"},"content":"     * @return A welcome message.","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"raydenlim"},"content":"    public String showWelcome() {","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"raydenlim"},"content":"        return \"Hello!!! My name is BloopBloop\\n\" + \"What can I do for you? :)\";","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"raydenlim"},"content":"     * Displays a farewell message to the user when they exit the application.","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"raydenlim"},"content":"     * @return A farewell message.","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"raydenlim"},"content":"    public String showBye() {","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"raydenlim"},"content":"        return \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"raydenlim"},"content":"     * Displays an error message to the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"raydenlim"},"content":"     * @param e The DukeException containing the error message.","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"raydenlim"},"content":"     * @return An error message.","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"raydenlim"},"content":"    public String showError(DukeException e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"raydenlim"},"content":"        String errorMsg \u003d e.getMessage();","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"raydenlim"},"content":"        return \"Woops, Error: \" + errorMsg;","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"raydenlim"},"content":"     * Displays a list of available commands to the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"raydenlim"},"content":"     * @return A list of available commands.","lastModifiedDate":"2023-09-07"},{"lineNumber":63,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"raydenlim"},"content":"    public String showCommands() {","lastModifiedDate":"2023-09-07"},{"lineNumber":65,"author":{"gitId":"raydenlim"},"content":"        return HELP_DESK;","lastModifiedDate":"2023-09-15"},{"lineNumber":66,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"raydenlim"},"content":"     * Displays the list of tasks to the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"raydenlim"},"content":"     * @param taskList The TaskList containing the tasks to be displayed.","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"raydenlim"},"content":"     * @return A formatted string containing the list of tasks or a message indicating no tasks.","lastModifiedDate":"2023-09-07"},{"lineNumber":73,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"raydenlim"},"content":"    public String showTasks(TaskList taskList) {","lastModifiedDate":"2023-09-07"},{"lineNumber":75,"author":{"gitId":"raydenlim"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-09-07"},{"lineNumber":76,"author":{"gitId":"raydenlim"},"content":"        output.append(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2023-09-07"},{"lineNumber":77,"author":{"gitId":"raydenlim"},"content":"        output.append(taskList.displayTasks());","lastModifiedDate":"2023-09-07"},{"lineNumber":78,"author":{"gitId":"raydenlim"},"content":"        return output.toString();","lastModifiedDate":"2023-09-07"},{"lineNumber":79,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"raydenlim"},"content":"     * Displays a message to confirm the addition of a task.","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"raydenlim"},"content":"     * @param task       The added task.","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"raydenlim"},"content":"     * @param totalTasks The total number of tasks in the list.","lastModifiedDate":"2023-09-02"},{"lineNumber":86,"author":{"gitId":"raydenlim"},"content":"     * @return A message confirming the addition of the task.","lastModifiedDate":"2023-09-07"},{"lineNumber":87,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":88,"author":{"gitId":"raydenlim"},"content":"    public String showTaskAdded(Task task, int totalTasks) {","lastModifiedDate":"2023-09-07"},{"lineNumber":89,"author":{"gitId":"raydenlim"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-09-07"},{"lineNumber":90,"author":{"gitId":"raydenlim"},"content":"        output.append(\"Got it. I\u0027ve added this task:\\n\");","lastModifiedDate":"2023-09-07"},{"lineNumber":91,"author":{"gitId":"raydenlim"},"content":"        output.append(\"   \").append(task).append(\"\\n\");","lastModifiedDate":"2023-09-07"},{"lineNumber":92,"author":{"gitId":"raydenlim"},"content":"        output.append(\"Now you have \").append(totalTasks).append(\" tasks in the list.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":93,"author":{"gitId":"raydenlim"},"content":"        return output.toString();","lastModifiedDate":"2023-09-07"},{"lineNumber":94,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":95,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":96,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":97,"author":{"gitId":"raydenlim"},"content":"     * Displays a message to confirm the deletion of a task.","lastModifiedDate":"2023-09-02"},{"lineNumber":98,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":99,"author":{"gitId":"raydenlim"},"content":"     * @param task       The deleted task.","lastModifiedDate":"2023-09-02"},{"lineNumber":100,"author":{"gitId":"raydenlim"},"content":"     * @param totalTasks The total number of tasks in the list.","lastModifiedDate":"2023-09-02"},{"lineNumber":101,"author":{"gitId":"raydenlim"},"content":"     * @return A message confirming the deletion of the task.","lastModifiedDate":"2023-09-07"},{"lineNumber":102,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":103,"author":{"gitId":"raydenlim"},"content":"    public String showDeletedTask(Task task, int totalTasks) {","lastModifiedDate":"2023-09-07"},{"lineNumber":104,"author":{"gitId":"raydenlim"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-09-07"},{"lineNumber":105,"author":{"gitId":"raydenlim"},"content":"        output.append(\"Noted. I\u0027ve removed this task:\\n\");","lastModifiedDate":"2023-09-07"},{"lineNumber":106,"author":{"gitId":"raydenlim"},"content":"        output.append(\"   \").append(task).append(\"\\n\");","lastModifiedDate":"2023-09-07"},{"lineNumber":107,"author":{"gitId":"raydenlim"},"content":"        output.append(\"Now you have \").append(totalTasks).append(\" tasks in the list.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":108,"author":{"gitId":"raydenlim"},"content":"        return output.toString();","lastModifiedDate":"2023-09-07"},{"lineNumber":109,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":110,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":111,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":112,"author":{"gitId":"raydenlim"},"content":"     * Displays an echoed message to the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":113,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":114,"author":{"gitId":"raydenlim"},"content":"     * @param message The message to be echoed.","lastModifiedDate":"2023-09-02"},{"lineNumber":115,"author":{"gitId":"raydenlim"},"content":"     * @return The echoed message.","lastModifiedDate":"2023-09-07"},{"lineNumber":116,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":117,"author":{"gitId":"raydenlim"},"content":"    public String showEcho(String message) {","lastModifiedDate":"2023-09-07"},{"lineNumber":118,"author":{"gitId":"raydenlim"},"content":"        return \"Echo: \" + message;","lastModifiedDate":"2023-09-07"},{"lineNumber":119,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":120,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":121,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":122,"author":{"gitId":"raydenlim"},"content":"     * Displays a message to indicate that a task has been unmarked as done.","lastModifiedDate":"2023-09-02"},{"lineNumber":123,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":124,"author":{"gitId":"raydenlim"},"content":"     * @param taskToUnmark The task that was unmarked.","lastModifiedDate":"2023-09-02"},{"lineNumber":125,"author":{"gitId":"raydenlim"},"content":"     * @return A message indicating the task was unmarked.","lastModifiedDate":"2023-09-07"},{"lineNumber":126,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":127,"author":{"gitId":"raydenlim"},"content":"    public String showTaskUnmarked(Task taskToUnmark) {","lastModifiedDate":"2023-09-07"},{"lineNumber":128,"author":{"gitId":"raydenlim"},"content":"        return \"Task unmarked: \" + taskToUnmark.getDescription();","lastModifiedDate":"2023-09-07"},{"lineNumber":129,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":130,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":131,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":132,"author":{"gitId":"raydenlim"},"content":"     * Displays a message to indicate that a task has been marked as done.","lastModifiedDate":"2023-09-02"},{"lineNumber":133,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":134,"author":{"gitId":"raydenlim"},"content":"     * @param taskToUnmark The task that was marked as done.","lastModifiedDate":"2023-09-02"},{"lineNumber":135,"author":{"gitId":"raydenlim"},"content":"     * @return A message indicating the task was marked.","lastModifiedDate":"2023-09-07"},{"lineNumber":136,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":137,"author":{"gitId":"raydenlim"},"content":"    public String showTaskMarked(Task taskToUnmark) {","lastModifiedDate":"2023-09-07"},{"lineNumber":138,"author":{"gitId":"raydenlim"},"content":"        return \"Task marked: \" + taskToUnmark.getDescription();","lastModifiedDate":"2023-09-07"},{"lineNumber":139,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":140,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":141,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":142,"author":{"gitId":"raydenlim"},"content":"     * Displays a list of tasks that match a specified keyword in their descriptions.","lastModifiedDate":"2023-09-03"},{"lineNumber":143,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":144,"author":{"gitId":"raydenlim"},"content":"     * @param matchingTasks An ArrayList of tasks that match the specified keyword.","lastModifiedDate":"2023-09-03"},{"lineNumber":145,"author":{"gitId":"raydenlim"},"content":"     * @return A formatted string containing the matching tasks or a message indicating no matches.","lastModifiedDate":"2023-09-07"},{"lineNumber":146,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":147,"author":{"gitId":"raydenlim"},"content":"    public String showMatchingTasks(ArrayList\u003cTask\u003e matchingTasks) {","lastModifiedDate":"2023-09-07"},{"lineNumber":148,"author":{"gitId":"raydenlim"},"content":"        StringBuilder output \u003d new StringBuilder();","lastModifiedDate":"2023-09-07"},{"lineNumber":149,"author":{"gitId":"raydenlim"},"content":"        if (matchingTasks.isEmpty()) {","lastModifiedDate":"2023-09-03"},{"lineNumber":150,"author":{"gitId":"raydenlim"},"content":"            output.append(\"No matching tasks found.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":151,"author":{"gitId":"raydenlim"},"content":"        } else {","lastModifiedDate":"2023-09-03"},{"lineNumber":152,"author":{"gitId":"raydenlim"},"content":"            output.append(\"Here are the matching tasks in your list:\\n\");","lastModifiedDate":"2023-09-07"},{"lineNumber":153,"author":{"gitId":"raydenlim"},"content":"            for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {","lastModifiedDate":"2023-09-03"},{"lineNumber":154,"author":{"gitId":"raydenlim"},"content":"                output.append((i + 1)).append(\".\").append(matchingTasks.get(i).toString()).append(\"\\n\");","lastModifiedDate":"2023-09-07"},{"lineNumber":155,"author":{"gitId":"raydenlim"},"content":"            }","lastModifiedDate":"2023-09-03"},{"lineNumber":156,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":157,"author":{"gitId":"raydenlim"},"content":"        return output.toString();","lastModifiedDate":"2023-09-07"},{"lineNumber":158,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":159,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"raydenlim":159}},{"path":"src/main/java/app/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package app;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":" * The `DialogBox` class represents a graphical dialog box in the Duke chatbot application.","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":" * It contains a label for displaying text and an image for displaying an avatar or profile picture.","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":" * This class is designed to work with JavaFX and is used for both user and Duke\u0027s messages in the conversation.","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"raydenlim"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"raydenlim"},"content":"     * Creates a new `DialogBox` with the specified text and image.","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"raydenlim"},"content":"     * @param text The text to be displayed in the dialog box.","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"raydenlim"},"content":"     * @param img The image to be displayed in the dialog box.","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"raydenlim"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"raydenlim"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"raydenlim"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"raydenlim"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"raydenlim"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"raydenlim"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"raydenlim"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"raydenlim"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"raydenlim"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"raydenlim"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"raydenlim"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"raydenlim"},"content":"    private void flip() {","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"raydenlim"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"raydenlim"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"raydenlim"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"raydenlim"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":61,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":62,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":63,"author":{"gitId":"raydenlim"},"content":"     * Creates and returns a `DialogBox` for the user\u0027s message with the specified text and image.","lastModifiedDate":"2023-09-07"},{"lineNumber":64,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":65,"author":{"gitId":"raydenlim"},"content":"     * @param text The text of the user\u0027s message.","lastModifiedDate":"2023-09-07"},{"lineNumber":66,"author":{"gitId":"raydenlim"},"content":"     * @param img The image representing the user.","lastModifiedDate":"2023-09-07"},{"lineNumber":67,"author":{"gitId":"raydenlim"},"content":"     * @return A `DialogBox` for the user\u0027s message.","lastModifiedDate":"2023-09-07"},{"lineNumber":68,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":69,"author":{"gitId":"raydenlim"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-07"},{"lineNumber":70,"author":{"gitId":"raydenlim"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-09-07"},{"lineNumber":71,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":72,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":73,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":74,"author":{"gitId":"raydenlim"},"content":"     * Creates and returns a `DialogBox` for Duke\u0027s message with the specified text and image.","lastModifiedDate":"2023-09-07"},{"lineNumber":75,"author":{"gitId":"raydenlim"},"content":"     * The dialog box is flipped to display Duke\u0027s message on the left and the image on the right.","lastModifiedDate":"2023-09-07"},{"lineNumber":76,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":77,"author":{"gitId":"raydenlim"},"content":"     * @param text The text of Duke\u0027s message.","lastModifiedDate":"2023-09-07"},{"lineNumber":78,"author":{"gitId":"raydenlim"},"content":"     * @param img The image representing Duke.","lastModifiedDate":"2023-09-07"},{"lineNumber":79,"author":{"gitId":"raydenlim"},"content":"     * @return A flipped `DialogBox` for Duke\u0027s message.","lastModifiedDate":"2023-09-07"},{"lineNumber":80,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":81,"author":{"gitId":"raydenlim"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-09-07"},{"lineNumber":82,"author":{"gitId":"raydenlim"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-07"},{"lineNumber":83,"author":{"gitId":"raydenlim"},"content":"        db.flip();","lastModifiedDate":"2023-09-07"},{"lineNumber":84,"author":{"gitId":"raydenlim"},"content":"        return db;","lastModifiedDate":"2023-09-07"},{"lineNumber":85,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":86,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"raydenlim":86}},{"path":"src/main/java/app/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package app;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":"public class Launcher {","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":"     * The main entry point for launching the JavaFX application.","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":"     * @param args Command-line arguments (if any) to be passed to the JavaFX application.","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"raydenlim":20}},{"path":"src/main/java/app/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package app;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":" * The `Main` class serves as the entry point for the Duke chatbot application with a graphical user interface (GUI).","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":" * It initializes Duke, loads the GUI using JavaFX and FXML, and displays the main application window.","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":" * This class extends the JavaFX `Application` class and is responsible for launching the GUI.","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"    private Duke duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":"     * Constructs a new `Main` object and initializes the Duke chatbot.","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException If there is an issue with Duke\u0027s initialization.","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"raydenlim"},"content":"     * @throws FileNotFoundException If the task data file is not found.","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"raydenlim"},"content":"    public Main() throws DukeException, FileNotFoundException {","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"raydenlim"},"content":"        duke \u003d new Duke(\"data/tasks.txt\");","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"raydenlim"},"content":"     * The `start` method, required by JavaFX, initializes the GUI by loading the FXML layout and setting up the","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"raydenlim"},"content":"     * main application window. It also associates the Duke chatbot","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"raydenlim"},"content":"     * with the GUI controller and displays a welcome message.","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"raydenlim"},"content":"     * @param stage The primary stage for the JavaFX application.","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"raydenlim"},"content":"    @Override","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"raydenlim"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"raydenlim"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"raydenlim"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"raydenlim"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"raydenlim"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"raydenlim"},"content":"            stage.setTitle(\"Bloop Bloop\");","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"raydenlim"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"raydenlim"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"raydenlim"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().showWelcome();","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"raydenlim"},"content":"            stage.show();","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"raydenlim"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"raydenlim"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"raydenlim"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"raydenlim":59}},{"path":"src/main/java/app/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package app;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":" * The `MainWindow` class represents the main graphical user interface (GUI) window for","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":" * interacting with the Duke chatbot.","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":" * It includes input fields, a conversation display area, and methods for handling user input and displaying responses.","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":" * This class is designed to work with JavaFX and is part of a Duke chatbot application.","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"raydenlim"},"content":" *","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"raydenlim"},"content":" * @author raydenlim","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":" * @version 0.0.0","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"raydenlim"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"raydenlim"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"raydenlim"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"raydenlim"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"raydenlim"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"raydenlim"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"raydenlim"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"raydenlim"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"raydenlim"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"raydenlim"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"raydenlim"},"content":"    private Duke duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"raydenlim"},"content":"    private Ui ui \u003d new Ui();","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"raydenlim"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/maid.png\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"raydenlim"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/whale bloop bloop.png\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"raydenlim"},"content":"     * Initializes the main window, binding the scroll pane\u0027s vertical value to the dialog container\u0027s height property.","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"raydenlim"},"content":"     * This ensures that the conversation always scrolls to the latest message.","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"raydenlim"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"raydenlim"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"raydenlim"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"raydenlim"},"content":"     * Sets the Duke chatbot instance that this `MainWindow` interacts with.","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"raydenlim"},"content":"     * @param d The Duke chatbot instance to be set.","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"raydenlim"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"raydenlim"},"content":"        duke \u003d d;","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"raydenlim"},"content":"     * Handles user input by processing it with the Duke chatbot, displaying the user\u0027s input and Duke\u0027s response","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"raydenlim"},"content":"     * in the conversation container, and clearing the user input field.","lastModifiedDate":"2023-09-07"},{"lineNumber":61,"author":{"gitId":"raydenlim"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":62,"author":{"gitId":"raydenlim"},"content":"     * @throws DukeException If there is an issue processing the user input by Duke.","lastModifiedDate":"2023-09-07"},{"lineNumber":63,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":64,"author":{"gitId":"raydenlim"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":65,"author":{"gitId":"raydenlim"},"content":"    private void handleUserInput() throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":66,"author":{"gitId":"raydenlim"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-07"},{"lineNumber":67,"author":{"gitId":"raydenlim"},"content":"        String response \u003d duke.getResponse(userInput.getText());","lastModifiedDate":"2023-09-07"},{"lineNumber":68,"author":{"gitId":"raydenlim"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-07"},{"lineNumber":69,"author":{"gitId":"raydenlim"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-07"},{"lineNumber":70,"author":{"gitId":"raydenlim"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-09-07"},{"lineNumber":71,"author":{"gitId":"raydenlim"},"content":"        );","lastModifiedDate":"2023-09-07"},{"lineNumber":72,"author":{"gitId":"raydenlim"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-07"},{"lineNumber":73,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":74,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":75,"author":{"gitId":"raydenlim"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":76,"author":{"gitId":"raydenlim"},"content":"     * Displays the welcome message from the Duke chatbot in the conversation container.","lastModifiedDate":"2023-09-07"},{"lineNumber":77,"author":{"gitId":"raydenlim"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":78,"author":{"gitId":"raydenlim"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-09-07"},{"lineNumber":79,"author":{"gitId":"raydenlim"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(ui.showWelcome(), dukeImage));","lastModifiedDate":"2023-09-07"},{"lineNumber":80,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":81,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"raydenlim":81}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"raydenlim":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"app.MainWindow\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"raydenlim"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"raydenlim"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"raydenlim"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"raydenlim":19}},{"path":"src/test/java/duke/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"package duke;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"public class DukeTest {","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":"    @Test","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":"    public void testDummy1() {","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":"        assertEquals(1, 1);","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":"    @Test","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":"    public void testDummy2() {","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":"        assertEquals(2, 2);","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"raydenlim"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"raydenlim":16}},{"path":"text-ui-test/data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"[A][ ] Fish","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"[T][X] Gamble until bankrupt","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"[D][ ] plan summer break 2.0 (by: 2024)","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"[E][ ] project meeting (from: Mon 2pm to: 4pm)","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"[A][ ] Fish","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"[T][ ] Gamble until bankrupt","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"[D][ ] plan summer break 2.0 (by: 2024)","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":"[E][ ] project meeting (from: Mon 2pm to: 4pm)","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":"[A][ ] Fish","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":"[T][ ] Gamble until bankrupt","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":"[D][ ] plan summer break 2.0 (by: 2024)","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":"[E][ ] project meeting (from: Mon 2pm to: 4pm)","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"raydenlim":12}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"raydenlim"},"content":"echo Choo Choo Train!!!","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"raydenlim"},"content":"add Fish","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"raydenlim"},"content":"todo Gamble until bankrupt","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"raydenlim"},"content":"deadline plan summer break 2.0 /by 2024","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"raydenlim"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"raydenlim"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"raydenlim"},"content":"mark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"raydenlim"},"content":"mark 2","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"raydenlim"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"raydenlim"},"content":"unmark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"raydenlim"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"raydenlim"},"content":"delete 4","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"raydenlim"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"raydenlim"},"content":"sup","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"raydenlim"},"content":"bye","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"raydenlim":15}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"raydenlim"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"raydenlim":1,"-":38}}]
