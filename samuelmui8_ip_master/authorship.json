[{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":" * Encapsulates the different commands that can be given to the bot.","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"enum Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"    BYE,","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"    LIST,","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"    MARK,","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"    UNMARK,","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"    DELETE,","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"    TODO,","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"    DEADLINE,","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"    EVENT,","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"    INVALID","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"samuelmui8":16}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":" * Contains the chatbot Brobot. It allows users to add and delete different types of tasks and mark them","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":" * as complete or incomplete","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"        tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"    public void run() {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"        ui.printGreetings();","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"        while (true) {","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"            // keep prompting user until user enters \"bye\"","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"            String input \u003d scanner.nextLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"samuelmui8"},"content":"            String[] words \u003d input.split(\" \");","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"samuelmui8"},"content":"            Command command \u003d Parser.decideCommand(input);","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"samuelmui8"},"content":"            try {","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"samuelmui8"},"content":"                switch (command) {","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"samuelmui8"},"content":"                case BYE:","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"samuelmui8"},"content":"                    // exit program","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"samuelmui8"},"content":"                    ui.printExitMessage();","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"samuelmui8"},"content":"                    return;","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"samuelmui8"},"content":"                case LIST:","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"samuelmui8"},"content":"                    tasks.printList();","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"samuelmui8"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"samuelmui8"},"content":"                case MARK:","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"samuelmui8"},"content":"                    tasks.markTask(words[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"samuelmui8"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"samuelmui8"},"content":"                case UNMARK:","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"samuelmui8"},"content":"                    tasks.unmarkTask(words[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"samuelmui8"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"samuelmui8"},"content":"                case DELETE:","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"samuelmui8"},"content":"                    tasks.deleteTask(words[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"samuelmui8"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"samuelmui8"},"content":"                case TODO:","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"samuelmui8"},"content":"                    tasks.addTodo(input);","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"samuelmui8"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"samuelmui8"},"content":"                case EVENT:","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"samuelmui8"},"content":"                    tasks.addEvent(input);","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"samuelmui8"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"samuelmui8"},"content":"                case DEADLINE:","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"samuelmui8"},"content":"                    tasks.addDeadline(input);","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"samuelmui8"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"samuelmui8"},"content":"                default:","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"samuelmui8"},"content":"                    // invalid input","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"samuelmui8"},"content":"                    throw new DukeException(\"â˜¹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"samuelmui8"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"samuelmui8"},"content":"                storage.writeToFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"samuelmui8"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"samuelmui8"},"content":"                ui.printExceptionMessage(e);","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"samuelmui8"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":69,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":70,"author":{"gitId":"samuelmui8"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"samuelmui8"},"content":"        new Duke(\"./data/duke.txt\").run();","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":73,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":74,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"samuelmui8":73,"-":1}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":" * Encapsulates some exceptions that are specific to adding tasks on the Duke bot.","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"     * Constructor for a new Duke Exception.","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"     * @param message message to be displayed to the user.","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"        super(message);","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"    public void printException() {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"        System.out.println(\"-----------------------------------------------\");","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"        System.out.println(this.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"        System.out.println(\"-----------------------------------------------\");","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"samuelmui8":21}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Event;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":" * Class that deals with making sense of the user command.","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"public class Parser {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"     * Decides which command to give to the bot based on user input.","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"     * @param input The String input by the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"     * @return The command to be used by the bot.","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"    public static Command decideCommand(String input) {","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"            return Command.BYE;","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"        } else if (input.equals((\"list\"))) {","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"samuelmui8"},"content":"            return Command.LIST;","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"samuelmui8"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"samuelmui8"},"content":"            String[] words \u003d input.split(\" \");","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"samuelmui8"},"content":"            String command \u003d words[0];","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"samuelmui8"},"content":"            for (Command c : Command.values()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"samuelmui8"},"content":"                if (c.name().toLowerCase().equals(command)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"samuelmui8"},"content":"                    return c;","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"samuelmui8"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"samuelmui8"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"samuelmui8"},"content":"            return Command.INVALID;","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"samuelmui8"},"content":"     * Converts the String stored in the file into a Task object.","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"samuelmui8"},"content":"     * @param string The string stored in the file.","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"samuelmui8"},"content":"     * @return Task representation of the string stored.","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"samuelmui8"},"content":"     * @throws DukeException If the string stored is not in the correct format.","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"samuelmui8"},"content":"    public static Task stringToTask(String string) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"samuelmui8"},"content":"        String[] words \u003d string.split(\"\\\\s\\\\|\\\\s\");","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"samuelmui8"},"content":"        String taskType \u003d words[0];","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"samuelmui8"},"content":"        boolean done;","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"samuelmui8"},"content":"        if (words[1].equals(\"0\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"samuelmui8"},"content":"            done \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"samuelmui8"},"content":"        } else if (words[1].equals(\"1\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"samuelmui8"},"content":"            done \u003d true;","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"samuelmui8"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"samuelmui8"},"content":"            System.out.println(words[1]);","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"Field 2 (isMarked) is invalid\");","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"samuelmui8"},"content":"        Task t;","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"samuelmui8"},"content":"        switch (taskType) {","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"samuelmui8"},"content":"        case \"T\":","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"samuelmui8"},"content":"            if (words.length !\u003d 3) {","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"samuelmui8"},"content":"                throw new DukeException(\"Incorrect Format for todo task in file\");","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"samuelmui8"},"content":"            } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"samuelmui8"},"content":"                t \u003d new Todo(words[2]);","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"samuelmui8"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"samuelmui8"},"content":"            break;","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"samuelmui8"},"content":"        case \"D\":","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"samuelmui8"},"content":"            if (words.length !\u003d 4) {","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"samuelmui8"},"content":"                throw new DukeException(\"Incorrect Format for deadline task in file\");","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"samuelmui8"},"content":"            } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"samuelmui8"},"content":"                t \u003d new Deadline(stringToDate(words[3]), words[2]);","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"samuelmui8"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"samuelmui8"},"content":"            break;","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"samuelmui8"},"content":"        case \"E\":","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"samuelmui8"},"content":"            if (words.length !\u003d 5) {","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"samuelmui8"},"content":"                throw new DukeException(\"Incorrect Format for event task in file\");","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"samuelmui8"},"content":"            } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"samuelmui8"},"content":"                t \u003d new Event(stringToDate(words[3]), stringToDate(words[4]), words[2]);","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"samuelmui8"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"samuelmui8"},"content":"            break;","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"samuelmui8"},"content":"        default:","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"Field 1 (Task type) is invalid\");","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"samuelmui8"},"content":"        if (done) {","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"samuelmui8"},"content":"            t.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"samuelmui8"},"content":"        return t;","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"samuelmui8"},"content":"     * Converts the String input date to LocalDate.","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"samuelmui8"},"content":"     * @param input String representation of date in YYYY-MM-DD format.","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"samuelmui8"},"content":"     * @return LocalDate of date.","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"samuelmui8"},"content":"     * @throws DukeException If the string input does not match the required format.","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"samuelmui8"},"content":"    public static LocalDate stringToDate(String input) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"samuelmui8"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"samuelmui8"},"content":"        LocalDate date;","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"samuelmui8"},"content":"            date \u003d LocalDate.parse(input, formatter);","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"samuelmui8"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"Date input in wrong format. Please input as YYYY-MM-DD\");","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"samuelmui8"},"content":"        return date;","lastModifiedDate":"2023-08-30"},{"lineNumber":110,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"samuelmui8":112}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":"import java.io.File;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"import java.util.List;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":" * Class that deals with loading tasks from the file and saving tasks in the file.","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"public class Storage {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"    private String filePath;","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"    private List\u003cTask\u003e list;","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"     * Constructor for storage object. Initialises the filePath and list.","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"     * @param filePath The filePath of the file to read from and write to.","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"samuelmui8"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"samuelmui8"},"content":"        this.list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"samuelmui8"},"content":"     * Reads the file and adds all the tasks in the file into the list.","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"samuelmui8"},"content":"    public List\u003cTask\u003e load() {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"samuelmui8"},"content":"            // create data directory if it does not exist","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"samuelmui8"},"content":"            Files.createDirectories(Paths.get(\"./data\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"samuelmui8"},"content":"            File f \u003d new File(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"samuelmui8"},"content":"            f.createNewFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"samuelmui8"},"content":"            Scanner s \u003d new Scanner(f);","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"samuelmui8"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"samuelmui8"},"content":"                Task task \u003d Parser.stringToTask(s.nextLine());","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"samuelmui8"},"content":"                this.list.add(task);","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"samuelmui8"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"samuelmui8"},"content":"            return this.list;","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"samuelmui8"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"samuelmui8"},"content":"            System.out.println(\"Something went wrong reading the file.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"samuelmui8"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"samuelmui8"},"content":"            e.printException();","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"samuelmui8"},"content":"        // returns empty list if file is corrupted","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"samuelmui8"},"content":"        return this.list;","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"samuelmui8"},"content":"     * Writes all the tasks in the current list to the file.","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"samuelmui8"},"content":"     * @throws DukeException If some error occurs with the writing process.","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"samuelmui8"},"content":"    public void writeToFile() throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"samuelmui8"},"content":"            FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"samuelmui8"},"content":"            for (Task task : list) {","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"samuelmui8"},"content":"                fw.write(task.tasktoString() + \"\\n\");","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"samuelmui8"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"samuelmui8"},"content":"            fw.close();","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"samuelmui8"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"\\\"Something went wrong writing to the file.\\\"\");","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"samuelmui8":77}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Event;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"import java.util.List;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":" * Class that contains the task list e.g., it has operations to add/delete tasks in the list.","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"public class TaskList {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"    private List\u003cTask\u003e list;","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"     * Constructor for a TaskList object.","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"     * @param list List from storage for TaskList object to point to.","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"    public TaskList(List\u003cTask\u003e list) {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"        this.list \u003d list;","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"samuelmui8"},"content":"     * Adds given task to task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"samuelmui8"},"content":"     * @param task Task to be added.","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"samuelmui8"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"samuelmui8"},"content":"        this.list.add(task);","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"samuelmui8"},"content":"        System.out.println(\"-----------------------------------------------\");","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"samuelmui8"},"content":"        System.out.println(\"Got it bro! I\u0027ve added this task:\\n\" + task);","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"samuelmui8"},"content":"        System.out.println(\"Now you have \" + this.list.size() + \" tasks in the list\");","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"samuelmui8"},"content":"        System.out.println(\"-----------------------------------------------\");","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"samuelmui8"},"content":"     * Extracts task index from user input and deletes the task.","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"samuelmui8"},"content":"     * @param taskIndex The task index input by user.","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"samuelmui8"},"content":"     * @throws DukeException If the input is not a number or is out of range of the list.","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"samuelmui8"},"content":"    public void deleteTask(String taskIndex) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"samuelmui8"},"content":"            int index \u003d Integer.parseInt(taskIndex) - 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"samuelmui8"},"content":"            list.get(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"samuelmui8"},"content":"            System.out.println(\"-----------------------------------------------\");","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"samuelmui8"},"content":"            System.out.println(\"Noted! I\u0027ve removed this task from the list:\");","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"samuelmui8"},"content":"            System.out.println(\"\" + list.get(index));","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"samuelmui8"},"content":"            list.remove(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"samuelmui8"},"content":"            System.out.println(\"Now you have \" + list.size() + \" tasks in the list\");","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"samuelmui8"},"content":"            System.out.println(\"-----------------------------------------------\");","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"samuelmui8"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"samuelmui8"},"content":"            // number input is invalid","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"Invalid number\");","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"samuelmui8"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"samuelmui8"},"content":"            // user did not enter a number","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"Please key in a number\");","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"samuelmui8"},"content":"     * Extracts task index from user input and marks the task as done.","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"samuelmui8"},"content":"     * @param taskIndex The task index input by user.","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"samuelmui8"},"content":"     * @throws DukeException If the input is not a number or is out of range of the list.","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"samuelmui8"},"content":"    public void markTask(String taskIndex) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"samuelmui8"},"content":"            int index \u003d Integer.parseInt(taskIndex) - 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"samuelmui8"},"content":"            list.get(index).markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"samuelmui8"},"content":"            System.out.println(\"-----------------------------------------------\");","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"samuelmui8"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"samuelmui8"},"content":"            System.out.println(\"\" + list.get(index));","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"samuelmui8"},"content":"            System.out.println(\"-----------------------------------------------\");","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"samuelmui8"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"samuelmui8"},"content":"            // number input is invalid","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"Invalid number\");","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"samuelmui8"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"samuelmui8"},"content":"            // user did not enter a number","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"Please key in a number\");","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"samuelmui8"},"content":"     * Extracts task index from user input and marks the task as not done.","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"samuelmui8"},"content":"     * @param taskIndex The task index input by user.","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"samuelmui8"},"content":"     * @throws DukeException If the input is not a number or is out of range of the list.","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"samuelmui8"},"content":"    public void unmarkTask(String taskIndex) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"samuelmui8"},"content":"            int index \u003d Integer.parseInt(taskIndex) - 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"samuelmui8"},"content":"            list.get(index).unMark();","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"samuelmui8"},"content":"            System.out.println(\"-----------------------------------------------\");","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"samuelmui8"},"content":"            System.out.println(\"Nice! I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"samuelmui8"},"content":"            System.out.println(\"\" + list.get(index));","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"samuelmui8"},"content":"            System.out.println(\"-----------------------------------------------\");","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"samuelmui8"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"samuelmui8"},"content":"            // number input is invalid","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"Invalid number\");","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"samuelmui8"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"samuelmui8"},"content":"            // user did not enter a number","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"Please key in a number\");","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":110,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"samuelmui8"},"content":"     * Extracts task description from user input and adds a todo task.","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"samuelmui8"},"content":"     * @param input The text input by the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"samuelmui8"},"content":"     * @throws DukeException If the text input does not match the required regex pattern.","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"samuelmui8"},"content":"    public void addTodo(String input) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"samuelmui8"},"content":"        // Define regular expressions for pattern matching for todo","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"samuelmui8"},"content":"        Pattern todoPattern \u003d Pattern.compile(\"todo\\\\s+(.*?)$\");","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"samuelmui8"},"content":"        // Match the input string with the pattern","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"samuelmui8"},"content":"        Matcher matcher \u003d todoPattern.matcher(input);","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":125,"author":{"gitId":"samuelmui8"},"content":"        // Check if the input string matches the pattern","lastModifiedDate":"2023-08-30"},{"lineNumber":126,"author":{"gitId":"samuelmui8"},"content":"        if (matcher.matches()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":127,"author":{"gitId":"samuelmui8"},"content":"            String description \u003d matcher.group(1); // Extract task description","lastModifiedDate":"2023-08-30"},{"lineNumber":128,"author":{"gitId":"samuelmui8"},"content":"            Task task \u003d new Todo(description);","lastModifiedDate":"2023-08-30"},{"lineNumber":129,"author":{"gitId":"samuelmui8"},"content":"            addTask(task);","lastModifiedDate":"2023-08-30"},{"lineNumber":130,"author":{"gitId":"samuelmui8"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":131,"author":{"gitId":"samuelmui8"},"content":"            // Todo description is empty","lastModifiedDate":"2023-08-30"},{"lineNumber":132,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"â˜¹ OOPS!!! The description of a todo cannot be empty.\"","lastModifiedDate":"2023-08-30"},{"lineNumber":133,"author":{"gitId":"samuelmui8"},"content":"                    + \"\\ntodo ...\");","lastModifiedDate":"2023-08-30"},{"lineNumber":134,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":135,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":136,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":137,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":138,"author":{"gitId":"samuelmui8"},"content":"     * Extracts task description, start time and end time from user input and adds an event task.","lastModifiedDate":"2023-08-30"},{"lineNumber":139,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":140,"author":{"gitId":"samuelmui8"},"content":"     * @param input The text input by the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":141,"author":{"gitId":"samuelmui8"},"content":"     * @throws DukeException If the text input does not match the required regex pattern.","lastModifiedDate":"2023-08-30"},{"lineNumber":142,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":143,"author":{"gitId":"samuelmui8"},"content":"    public void addEvent(String input) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":144,"author":{"gitId":"samuelmui8"},"content":"        // Define regular expressions for pattern matching for event","lastModifiedDate":"2023-08-30"},{"lineNumber":145,"author":{"gitId":"samuelmui8"},"content":"        Pattern eventPattern \u003d Pattern.compile(\"event\\\\s+(.*?)\\\\s+/from\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":146,"author":{"gitId":"samuelmui8"},"content":"                \"\\\\s+(.*?)\\\\s+/to\\\\s+(.*?)$\");","lastModifiedDate":"2023-08-30"},{"lineNumber":147,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":148,"author":{"gitId":"samuelmui8"},"content":"        // Match the input string with the pattern","lastModifiedDate":"2023-08-30"},{"lineNumber":149,"author":{"gitId":"samuelmui8"},"content":"        Matcher matcher \u003d eventPattern.matcher(input);","lastModifiedDate":"2023-08-30"},{"lineNumber":150,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":151,"author":{"gitId":"samuelmui8"},"content":"        // Check if the input string matches the pattern","lastModifiedDate":"2023-08-30"},{"lineNumber":152,"author":{"gitId":"samuelmui8"},"content":"        if (matcher.matches()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":153,"author":{"gitId":"samuelmui8"},"content":"            String description \u003d matcher.group(1); // Extract event name","lastModifiedDate":"2023-08-30"},{"lineNumber":154,"author":{"gitId":"samuelmui8"},"content":"            LocalDate startDate \u003d Parser.stringToDate(matcher.group(2)); // Extract start date","lastModifiedDate":"2023-08-30"},{"lineNumber":155,"author":{"gitId":"samuelmui8"},"content":"            LocalDate endDate \u003d Parser.stringToDate(matcher.group(3));   // Extract end date","lastModifiedDate":"2023-08-30"},{"lineNumber":156,"author":{"gitId":"samuelmui8"},"content":"            Task task \u003d new Event(startDate, endDate, description);","lastModifiedDate":"2023-08-30"},{"lineNumber":157,"author":{"gitId":"samuelmui8"},"content":"            addTask(task);","lastModifiedDate":"2023-08-30"},{"lineNumber":158,"author":{"gitId":"samuelmui8"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":159,"author":{"gitId":"samuelmui8"},"content":"            // User did not follow event format","lastModifiedDate":"2023-08-30"},{"lineNumber":160,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"Input for event doesn\u0027t match the expected format.\"","lastModifiedDate":"2023-08-30"},{"lineNumber":161,"author":{"gitId":"samuelmui8"},"content":"                    + \"\\nevent ... /from ... /to ...\");","lastModifiedDate":"2023-08-30"},{"lineNumber":162,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":163,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":164,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":165,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":166,"author":{"gitId":"samuelmui8"},"content":"     * Extracts task description and due date from user input and adds a deadline task.","lastModifiedDate":"2023-08-30"},{"lineNumber":167,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":168,"author":{"gitId":"samuelmui8"},"content":"     * @param input The text input by the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":169,"author":{"gitId":"samuelmui8"},"content":"     * @throws DukeException If the text input does not match the required regex pattern.","lastModifiedDate":"2023-08-30"},{"lineNumber":170,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":171,"author":{"gitId":"samuelmui8"},"content":"    public void addDeadline(String input) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":172,"author":{"gitId":"samuelmui8"},"content":"        // Define regular expressions for pattern matching for deadline","lastModifiedDate":"2023-08-30"},{"lineNumber":173,"author":{"gitId":"samuelmui8"},"content":"        Pattern deadlinePattern \u003d Pattern.compile(\"deadline\\\\s+(.*?)\\\\s+/by\\\\s+(.*?)$\");","lastModifiedDate":"2023-08-30"},{"lineNumber":174,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":175,"author":{"gitId":"samuelmui8"},"content":"        // Match the input string with the pattern","lastModifiedDate":"2023-08-30"},{"lineNumber":176,"author":{"gitId":"samuelmui8"},"content":"        Matcher matcher \u003d deadlinePattern.matcher(input);","lastModifiedDate":"2023-08-30"},{"lineNumber":177,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":178,"author":{"gitId":"samuelmui8"},"content":"        // Check if the input string matches the pattern","lastModifiedDate":"2023-08-30"},{"lineNumber":179,"author":{"gitId":"samuelmui8"},"content":"        if (matcher.matches()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":180,"author":{"gitId":"samuelmui8"},"content":"            String description \u003d matcher.group(1); // Extract task description","lastModifiedDate":"2023-08-30"},{"lineNumber":181,"author":{"gitId":"samuelmui8"},"content":"            LocalDate dueDate \u003d Parser.stringToDate(matcher.group(2));  // Extract due date","lastModifiedDate":"2023-08-30"},{"lineNumber":182,"author":{"gitId":"samuelmui8"},"content":"            Task task \u003d new Deadline(dueDate, description);","lastModifiedDate":"2023-08-30"},{"lineNumber":183,"author":{"gitId":"samuelmui8"},"content":"            addTask(task);","lastModifiedDate":"2023-08-30"},{"lineNumber":184,"author":{"gitId":"samuelmui8"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":185,"author":{"gitId":"samuelmui8"},"content":"            // User did not follow deadline format","lastModifiedDate":"2023-08-30"},{"lineNumber":186,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"Input for deadline doesn\u0027t match the expected format.\"","lastModifiedDate":"2023-08-30"},{"lineNumber":187,"author":{"gitId":"samuelmui8"},"content":"                    + \"\\ndeadline ... /by ...\");","lastModifiedDate":"2023-08-30"},{"lineNumber":188,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":189,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":190,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":191,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":192,"author":{"gitId":"samuelmui8"},"content":"     * Prints all tasks in the list currently.","lastModifiedDate":"2023-08-30"},{"lineNumber":193,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":194,"author":{"gitId":"samuelmui8"},"content":"    public void printList() {","lastModifiedDate":"2023-08-30"},{"lineNumber":195,"author":{"gitId":"samuelmui8"},"content":"        System.out.println(\"-----------------------------------------------\");","lastModifiedDate":"2023-08-30"},{"lineNumber":196,"author":{"gitId":"samuelmui8"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-08-30"},{"lineNumber":197,"author":{"gitId":"samuelmui8"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":198,"author":{"gitId":"samuelmui8"},"content":"            System.out.println(\"\" + (i + 1) + \".\" + list.get(i));","lastModifiedDate":"2023-08-30"},{"lineNumber":199,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":200,"author":{"gitId":"samuelmui8"},"content":"        System.out.println(\"-----------------------------------------------\");","lastModifiedDate":"2023-08-30"},{"lineNumber":201,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":202,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":203,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"samuelmui8":203}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":" * Class that deals with interactions with the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"public class Ui {","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"     * Prints a welcome greeting for the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"    public void printGreetings() {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"        showLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"        System.out.println(\"Sup bro! I\u0027m Brobot\");","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"        showLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"     * Bids farewell to the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"    public void printExitMessage() {","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"        showLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"        System.out.println(\"Bye. Hope to see you again soon bro!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"        showLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"samuelmui8"},"content":"     * Prints the dukeException message.","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"samuelmui8"},"content":"     * @param e The dukeException to be printed.","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"samuelmui8"},"content":"    public void printExceptionMessage(DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"samuelmui8"},"content":"        e.printException();","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"samuelmui8"},"content":"     * Prints a divider line.","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"samuelmui8"},"content":"    public void showLine() {","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"samuelmui8"},"content":"        System.out.println(\"-----------------------------------------------\");","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"samuelmui8":44}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":" * Encapsulates a Deadline task. Deadline tasks have an end time and description.","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"    private LocalDate endDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"     * Constructor for a deadline task.","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"     * @param endDate     The deadline for deadline task","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"     * @param description task description","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"    public Deadline(LocalDate endDate, String description) {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"     * Returns the string representation of a deadline task with its status.","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"     * @return String representation of deadline.","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"samuelmui8"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"samuelmui8"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"samuelmui8"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.endDate + \")\";","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"samuelmui8"},"content":"     * Returns the string representation of the deadline task to be stored.","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"samuelmui8"},"content":"     * @return String representing deadline task to be stored.","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"samuelmui8"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"samuelmui8"},"content":"    public String tasktoString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"samuelmui8"},"content":"        return \"D | \" + super.tasktoString() + \" | \" + this.endDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"samuelmui8":41}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":" * Encapsulates an Event task. Event tasks have a start time, end time and description.","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"    private LocalDate startDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"    private LocalDate endDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"     * Constructor for a new event task object.","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"     * @param startDate   starting time of event","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"     * @param endDate     ending time of event","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"     * @param description task description of event","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"    public Event(LocalDate startDate, LocalDate endDate, String description) {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"samuelmui8"},"content":"     * Returns the string representation of a event task with its status.","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"samuelmui8"},"content":"     * @return String representation of event.","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"samuelmui8"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"samuelmui8"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"samuelmui8"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + this.startDate + \" to: \" + this.endDate + \")\";","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"samuelmui8"},"content":"     * Returns the string representation of the event task to be stored.","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"samuelmui8"},"content":"     * @return String representing event task to be stored.","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"samuelmui8"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"samuelmui8"},"content":"    public String tasktoString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"samuelmui8"},"content":"        return \"E | \" + super.tasktoString() + \" | \" + this.startDate + \" | \" + this.endDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"samuelmui8":46}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":" * Encapsulates a task. All tasks have a description and status (marked or unmarked).","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"    private String description;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"    private boolean isDone;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"     * Constructor for a task object.","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"     * @param description the task description","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"     * Returns status icon depending on whether task has been marked as done or not.","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"     * @return Status icon as a string.","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"    private String getStatusIcon() {","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"        return isDone ? \"X\" : \" \";","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"samuelmui8"},"content":"     * Mark task as done","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"samuelmui8"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"samuelmui8"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"samuelmui8"},"content":"     * Mark a task as not done","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"samuelmui8"},"content":"    public void unMark() {","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"samuelmui8"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"samuelmui8"},"content":"     * Returns the string representation of a task with its status.","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"samuelmui8"},"content":"     * @return String representation of task.","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"samuelmui8"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"samuelmui8"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"samuelmui8"},"content":"        return \"[\" + getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"samuelmui8"},"content":"     * Returns the string representation of the task to be stored.","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"samuelmui8"},"content":"     * @return String representing task to be stored.","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"samuelmui8"},"content":"    public String tasktoString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"samuelmui8"},"content":"        String statusNumber \u003d isDone ? \"1\" : \"0\";","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"samuelmui8"},"content":"        return statusNumber + \" | \" + this.description;","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"samuelmui8":62}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":" * Encapsulates a todo task. Todo tasks only have a description.","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"     * Constructor for a todo task object.","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"     * @param description task description of todo task","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"     * Returns the string representation of a todo task with its status.","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"     * @return String representation of todo.","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"samuelmui8"},"content":"     * Returns the string representation of the todo task to be stored.","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"samuelmui8"},"content":"     * @return String representing todo task to be stored.","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"samuelmui8"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"samuelmui8"},"content":"    public String tasktoString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"samuelmui8"},"content":"        return \"T | \" + super.tasktoString();","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"samuelmui8":38}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"todo borrow book","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"deadline return book /by 2023-03-28","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"event project meeting /from 2023-04-21 /to 2023-04-22","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":"blah","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":"todo","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"mark 1","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"deadline 123","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"mark 3","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"event abc","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"unmark 1","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"mark borrow book","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"mark 5","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"todo read book","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"todo join sports club","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"delete read book","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"delete 6","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"delete 4","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"deadline return book /by abc","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"event project meeting /from 2023-21-04 /to 2023-04-22","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"bye","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"samuelmui8":25}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\duke\\*.java","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"samuelmui8":1,"-":20}}]
