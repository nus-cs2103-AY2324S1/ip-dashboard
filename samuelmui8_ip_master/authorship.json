[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"samuelmui8"},"content":"    mainClass.set(\"duke.Launcher\")","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"samuelmui8"},"content":"mainClassName \u003d \u0027duke.Launcher\u0027","lastModifiedDate":"2023-09-15"},{"lineNumber":51,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":52,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"samuelmui8"},"content":"checkstyle {","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"samuelmui8"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":60,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":64,"author":{"gitId":"samuelmui8"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-09-15"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"samuelmui8":24,"-":41}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"**BroBot** is a desktop app for managing tasks, **optimized for use via a Command","lastModifiedDate":"2023-09-20"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":"Line Interface (CLI)** while still having the benefits of a Graphical User Interface (GUI).","lastModifiedDate":"2023-09-20"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":"BroBot supports **3 types of tasks**: todos, deadlines and events.","lastModifiedDate":"2023-09-20"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"## Quick start","lastModifiedDate":"2023-09-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"1. Ensure you have Java `11` or above installed in your Computer.","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"2. Download the latest `BroBot.jar` from [here]()","lastModifiedDate":"2023-09-20"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"3. Copy the file to the folder you want to use as the home folder for your BroBot.","lastModifiedDate":"2023-09-20"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"4. Double-click the file to start the app. The GUI similar to the below should appear in a few seconds.\u003cbr\u003e","lastModifiedDate":"2023-09-20"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"   ![Ui](StartScreen.png)","lastModifiedDate":"2023-09-20"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":15,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"❗ **Notes about the command format:**\u003cbr\u003e","lastModifiedDate":"2023-09-20"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"- First word of the command is the command word.\u003cbr\u003e","lastModifiedDate":"2023-09-20"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"  e.g. in `todo DESCRIPTION`, `todo` is the command word.","lastModifiedDate":"2023-09-20"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"- Words in `UPPER_CASE` are the parameters to be supplied by the user.\u003cbr\u003e","lastModifiedDate":"2023-09-20"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"  e.g. in `todo DESCRIPTION`, `DESCRIPTION` is a parameter which can be used as `todo read book`.","lastModifiedDate":"2023-09-20"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"### Adding a task: `todo`, `deadline`, `event`","lastModifiedDate":"2023-09-20"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"Adds a task to the task list.","lastModifiedDate":"2023-09-20"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":28,"author":{"gitId":"samuelmui8"},"content":"Formats:","lastModifiedDate":"2023-09-20"},{"lineNumber":29,"author":{"gitId":"samuelmui8"},"content":"`todo DESCRIPTION`","lastModifiedDate":"2023-09-20"},{"lineNumber":30,"author":{"gitId":"samuelmui8"},"content":"`deadline DESCRIPTION /by ENDDATE`","lastModifiedDate":"2023-09-20"},{"lineNumber":31,"author":{"gitId":"samuelmui8"},"content":"`event DESCRIPTION /from STARTDATE /to ENDDATE`","lastModifiedDate":"2023-09-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":33,"author":{"gitId":"samuelmui8"},"content":"Acceptable formats for `DESCRIPTION`: Any string of characters","lastModifiedDate":"2023-09-20"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":35,"author":{"gitId":"samuelmui8"},"content":"Acceptable formats for `STARTDATE`: `YYYY-MM-DD`","lastModifiedDate":"2023-09-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":37,"author":{"gitId":"samuelmui8"},"content":"Acceptable formats for `ENDDATE`: `YYYY-MM-DD`","lastModifiedDate":"2023-09-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":39,"author":{"gitId":"samuelmui8"},"content":"Examples of usage:","lastModifiedDate":"2023-09-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":41,"author":{"gitId":"samuelmui8"},"content":"- `todo read book`","lastModifiedDate":"2023-09-20"},{"lineNumber":42,"author":{"gitId":"samuelmui8"},"content":"- `deadline return book /by 2023-09-18`","lastModifiedDate":"2023-09-20"},{"lineNumber":43,"author":{"gitId":"samuelmui8"},"content":"- `event CS2103 Project Meeting /from 2023-08-18 /to 2023-08-18`","lastModifiedDate":"2023-09-20"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":45,"author":{"gitId":"samuelmui8"},"content":"Expected output on success:","lastModifiedDate":"2023-09-20"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":47,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":48,"author":{"gitId":"samuelmui8"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2023-09-20"},{"lineNumber":49,"author":{"gitId":"samuelmui8"},"content":"[T][ ] read book","lastModifiedDate":"2023-09-20"},{"lineNumber":50,"author":{"gitId":"samuelmui8"},"content":"Now you have 3 tasks in the list.","lastModifiedDate":"2023-09-20"},{"lineNumber":51,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":53,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":54,"author":{"gitId":"samuelmui8"},"content":"Got it bro! I\u0027ve added this task:","lastModifiedDate":"2023-09-20"},{"lineNumber":55,"author":{"gitId":"samuelmui8"},"content":"[D][ ] return book (by: 2023-09-18)","lastModifiedDate":"2023-09-20"},{"lineNumber":56,"author":{"gitId":"samuelmui8"},"content":"Now you have 4 tasks in the list.","lastModifiedDate":"2023-09-20"},{"lineNumber":57,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":59,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":60,"author":{"gitId":"samuelmui8"},"content":"Got it bro! I\u0027ve added this task:","lastModifiedDate":"2023-09-20"},{"lineNumber":61,"author":{"gitId":"samuelmui8"},"content":"[E][ ] Computing FOW (from: 2023-07-18 to: 2023-07-21)","lastModifiedDate":"2023-09-20"},{"lineNumber":62,"author":{"gitId":"samuelmui8"},"content":"Now you have 5 tasks in the list.","lastModifiedDate":"2023-09-20"},{"lineNumber":63,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":65,"author":{"gitId":"samuelmui8"},"content":"Expected output on failure:","lastModifiedDate":"2023-09-20"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":67,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":68,"author":{"gitId":"samuelmui8"},"content":"OOPS!!! The description of a todo cannot be empty.","lastModifiedDate":"2023-09-20"},{"lineNumber":69,"author":{"gitId":"samuelmui8"},"content":"todo {description}","lastModifiedDate":"2023-09-20"},{"lineNumber":70,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":71,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":72,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":73,"author":{"gitId":"samuelmui8"},"content":"Input for deadline doesn\u0027t match the expected format.","lastModifiedDate":"2023-09-20"},{"lineNumber":74,"author":{"gitId":"samuelmui8"},"content":"deadline {description} /by {endDate in YYYY-MM-DD}","lastModifiedDate":"2023-09-20"},{"lineNumber":75,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":76,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":77,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":78,"author":{"gitId":"samuelmui8"},"content":"Input for event doesn\u0027t match the expected format.","lastModifiedDate":"2023-09-20"},{"lineNumber":79,"author":{"gitId":"samuelmui8"},"content":"event {description} /from {startDate in YYYY-MM-DD} /to {endDate in YYYY-MM-DD}","lastModifiedDate":"2023-09-20"},{"lineNumber":80,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":81,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":82,"author":{"gitId":"samuelmui8"},"content":"### Listing all tasks: `list`","lastModifiedDate":"2023-09-20"},{"lineNumber":83,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":84,"author":{"gitId":"samuelmui8"},"content":"Lists all tasks in the task list.","lastModifiedDate":"2023-09-20"},{"lineNumber":85,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":86,"author":{"gitId":"samuelmui8"},"content":"Format: `list`","lastModifiedDate":"2023-09-20"},{"lineNumber":87,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":88,"author":{"gitId":"samuelmui8"},"content":"Expected output on success:","lastModifiedDate":"2023-09-20"},{"lineNumber":89,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":90,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":91,"author":{"gitId":"samuelmui8"},"content":"Here are the tasks in your list:","lastModifiedDate":"2023-09-20"},{"lineNumber":92,"author":{"gitId":"samuelmui8"},"content":"1. [T][ ] read book","lastModifiedDate":"2023-09-20"},{"lineNumber":93,"author":{"gitId":"samuelmui8"},"content":"2. [D][ ] return book (by: 2023-09-18)","lastModifiedDate":"2023-09-20"},{"lineNumber":94,"author":{"gitId":"samuelmui8"},"content":"3. [E][ ] Computing FOW (from: 2023-07-18 to: 2023-07-21)","lastModifiedDate":"2023-09-20"},{"lineNumber":95,"author":{"gitId":"samuelmui8"},"content":"4. [T][ ] do homework","lastModifiedDate":"2023-09-20"},{"lineNumber":96,"author":{"gitId":"samuelmui8"},"content":"5. [D][ ] submit assignment (by: 2023-09-20)","lastModifiedDate":"2023-09-20"},{"lineNumber":97,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":98,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":99,"author":{"gitId":"samuelmui8"},"content":"### Marking a task as done: `mark`","lastModifiedDate":"2023-09-20"},{"lineNumber":100,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":101,"author":{"gitId":"samuelmui8"},"content":"Marks a task as done.","lastModifiedDate":"2023-09-20"},{"lineNumber":102,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":103,"author":{"gitId":"samuelmui8"},"content":"Format: `mark INDEX`","lastModifiedDate":"2023-09-20"},{"lineNumber":104,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":105,"author":{"gitId":"samuelmui8"},"content":"Acceptable formats for `INDEX`: Any integer between 1 and the number of tasks in the task list (inclusive)","lastModifiedDate":"2023-09-20"},{"lineNumber":106,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":107,"author":{"gitId":"samuelmui8"},"content":"Example of usage: `mark 1`","lastModifiedDate":"2023-09-20"},{"lineNumber":108,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":109,"author":{"gitId":"samuelmui8"},"content":"Expected output on success:","lastModifiedDate":"2023-09-20"},{"lineNumber":110,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":111,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":112,"author":{"gitId":"samuelmui8"},"content":"Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2023-09-20"},{"lineNumber":113,"author":{"gitId":"samuelmui8"},"content":"[T][X] read book","lastModifiedDate":"2023-09-20"},{"lineNumber":114,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":115,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":116,"author":{"gitId":"samuelmui8"},"content":"Expected output on failure:","lastModifiedDate":"2023-09-20"},{"lineNumber":117,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":118,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":119,"author":{"gitId":"samuelmui8"},"content":"Invalid task index.","lastModifiedDate":"2023-09-20"},{"lineNumber":120,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":121,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":122,"author":{"gitId":"samuelmui8"},"content":"### Marking a task as undone: `unmark`","lastModifiedDate":"2023-09-20"},{"lineNumber":123,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":124,"author":{"gitId":"samuelmui8"},"content":"Marks a task as undone.","lastModifiedDate":"2023-09-20"},{"lineNumber":125,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":126,"author":{"gitId":"samuelmui8"},"content":"Format: `unmark INDEX`","lastModifiedDate":"2023-09-20"},{"lineNumber":127,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":128,"author":{"gitId":"samuelmui8"},"content":"Acceptable formats for `INDEX`: Any integer between 1 and the number of tasks in the task list (inclusive)","lastModifiedDate":"2023-09-20"},{"lineNumber":129,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":130,"author":{"gitId":"samuelmui8"},"content":"Example of usage: `unmark 1`","lastModifiedDate":"2023-09-20"},{"lineNumber":131,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":132,"author":{"gitId":"samuelmui8"},"content":"Expected output on success:","lastModifiedDate":"2023-09-20"},{"lineNumber":133,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":134,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":135,"author":{"gitId":"samuelmui8"},"content":"Nice! I\u0027ve marked this task as not done yet:","lastModifiedDate":"2023-09-20"},{"lineNumber":136,"author":{"gitId":"samuelmui8"},"content":"[T][ ] read book","lastModifiedDate":"2023-09-20"},{"lineNumber":137,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":138,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":139,"author":{"gitId":"samuelmui8"},"content":"Expected output on failure:","lastModifiedDate":"2023-09-20"},{"lineNumber":140,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":141,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":142,"author":{"gitId":"samuelmui8"},"content":"Invalid task index.","lastModifiedDate":"2023-09-20"},{"lineNumber":143,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":144,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":145,"author":{"gitId":"samuelmui8"},"content":"### Deleting a task: `delete`","lastModifiedDate":"2023-09-20"},{"lineNumber":146,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":147,"author":{"gitId":"samuelmui8"},"content":"Deletes a task from the task list.","lastModifiedDate":"2023-09-20"},{"lineNumber":148,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":149,"author":{"gitId":"samuelmui8"},"content":"Format: `delete INDEX`","lastModifiedDate":"2023-09-20"},{"lineNumber":150,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":151,"author":{"gitId":"samuelmui8"},"content":"Acceptable formats for `INDEX`: Any integer between 1 and the number of tasks in the task list (inclusive)","lastModifiedDate":"2023-09-20"},{"lineNumber":152,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":153,"author":{"gitId":"samuelmui8"},"content":"Example of usage: `delete 1`","lastModifiedDate":"2023-09-20"},{"lineNumber":154,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":155,"author":{"gitId":"samuelmui8"},"content":"Expected output on success:","lastModifiedDate":"2023-09-20"},{"lineNumber":156,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":157,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":158,"author":{"gitId":"samuelmui8"},"content":"Noted. I\u0027ve deleted this task from the list:","lastModifiedDate":"2023-09-20"},{"lineNumber":159,"author":{"gitId":"samuelmui8"},"content":"[T][ ] read book","lastModifiedDate":"2023-09-20"},{"lineNumber":160,"author":{"gitId":"samuelmui8"},"content":"Now you have 4 tasks in the list.","lastModifiedDate":"2023-09-20"},{"lineNumber":161,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":162,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":163,"author":{"gitId":"samuelmui8"},"content":"Expected output on failure:","lastModifiedDate":"2023-09-20"},{"lineNumber":164,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":165,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":166,"author":{"gitId":"samuelmui8"},"content":"Invalid task index.","lastModifiedDate":"2023-09-20"},{"lineNumber":167,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":168,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":169,"author":{"gitId":"samuelmui8"},"content":"### Finding a task: `find`","lastModifiedDate":"2023-09-20"},{"lineNumber":170,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":171,"author":{"gitId":"samuelmui8"},"content":"Find tasks in the task list that contain the given keyword.","lastModifiedDate":"2023-09-20"},{"lineNumber":172,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":173,"author":{"gitId":"samuelmui8"},"content":"Format: `find KEYWORD`","lastModifiedDate":"2023-09-20"},{"lineNumber":174,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":175,"author":{"gitId":"samuelmui8"},"content":"Acceptable formats for `KEYWORD`: Any string of characters","lastModifiedDate":"2023-09-20"},{"lineNumber":176,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":177,"author":{"gitId":"samuelmui8"},"content":"Example of usage: `find book`","lastModifiedDate":"2023-09-20"},{"lineNumber":178,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":179,"author":{"gitId":"samuelmui8"},"content":"Expected output on success:","lastModifiedDate":"2023-09-20"},{"lineNumber":180,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":181,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":182,"author":{"gitId":"samuelmui8"},"content":"Here are the matching tasks in your list:","lastModifiedDate":"2023-09-20"},{"lineNumber":183,"author":{"gitId":"samuelmui8"},"content":"1. [T][ ] read book","lastModifiedDate":"2023-09-20"},{"lineNumber":184,"author":{"gitId":"samuelmui8"},"content":"2. [D][ ] return book (by: 2023-09-18)","lastModifiedDate":"2023-09-20"},{"lineNumber":185,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":186,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":187,"author":{"gitId":"samuelmui8"},"content":"Expected output on failure:","lastModifiedDate":"2023-09-20"},{"lineNumber":188,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":189,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":190,"author":{"gitId":"samuelmui8"},"content":"OOPS!!! Field after find cannot be empty.","lastModifiedDate":"2023-09-20"},{"lineNumber":191,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":192,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":193,"author":{"gitId":"samuelmui8"},"content":"### Sorting tasks: `sort`","lastModifiedDate":"2023-09-20"},{"lineNumber":194,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":195,"author":{"gitId":"samuelmui8"},"content":"Sort tasks in the task list by date.","lastModifiedDate":"2023-09-20"},{"lineNumber":196,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":197,"author":{"gitId":"samuelmui8"},"content":"Format: `sort TASKTYPE`","lastModifiedDate":"2023-09-20"},{"lineNumber":198,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":199,"author":{"gitId":"samuelmui8"},"content":"Acceptable formats for `TASKTYPE`: `deadline`, `event`","lastModifiedDate":"2023-09-20"},{"lineNumber":200,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":201,"author":{"gitId":"samuelmui8"},"content":"Example of usage: `sort deadline`","lastModifiedDate":"2023-09-20"},{"lineNumber":202,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":203,"author":{"gitId":"samuelmui8"},"content":"Expected output on success:","lastModifiedDate":"2023-09-20"},{"lineNumber":204,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":205,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":206,"author":{"gitId":"samuelmui8"},"content":"Here are the sorted deadlines in your list:","lastModifiedDate":"2023-09-20"},{"lineNumber":207,"author":{"gitId":"samuelmui8"},"content":"1. [D][X] return book (by: 2023-09-18)","lastModifiedDate":"2023-09-20"},{"lineNumber":208,"author":{"gitId":"samuelmui8"},"content":"2. [D][ ] submit assignment (by: 2023-09-20)","lastModifiedDate":"2023-09-20"},{"lineNumber":209,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":210,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":211,"author":{"gitId":"samuelmui8"},"content":"Expected output on failure:","lastModifiedDate":"2023-09-20"},{"lineNumber":212,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":213,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":214,"author":{"gitId":"samuelmui8"},"content":"OOPS!!! Field after sort cannot be empty.","lastModifiedDate":"2023-09-20"},{"lineNumber":215,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":216,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":217,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":218,"author":{"gitId":"samuelmui8"},"content":"OOPS!!! Task type for sort can only be deadline or event.","lastModifiedDate":"2023-09-20"},{"lineNumber":219,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":220,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":221,"author":{"gitId":"samuelmui8"},"content":"### Exiting the program: `bye`","lastModifiedDate":"2023-09-20"},{"lineNumber":222,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":223,"author":{"gitId":"samuelmui8"},"content":"Exits the program.","lastModifiedDate":"2023-09-20"},{"lineNumber":224,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":225,"author":{"gitId":"samuelmui8"},"content":"Format: `bye`","lastModifiedDate":"2023-09-20"},{"lineNumber":226,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":227,"author":{"gitId":"samuelmui8"},"content":"Expected output on success:","lastModifiedDate":"2023-09-20"},{"lineNumber":228,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":229,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":230,"author":{"gitId":"samuelmui8"},"content":"Bye. Hope to see you again soon bro!","lastModifiedDate":"2023-09-20"},{"lineNumber":231,"author":{"gitId":"samuelmui8"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":232,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":233,"author":{"gitId":"samuelmui8"},"content":"### Reading the data","lastModifiedDate":"2023-09-20"},{"lineNumber":234,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":235,"author":{"gitId":"samuelmui8"},"content":"BroBot reads your tasks from the data file at `data/duke.txt` when it starts up.","lastModifiedDate":"2023-09-20"},{"lineNumber":236,"author":{"gitId":"samuelmui8"},"content":"If the file does not exist, it will create a new file at `data/duke.txt`.","lastModifiedDate":"2023-09-20"},{"lineNumber":237,"author":{"gitId":"samuelmui8"},"content":"If the file exists, it will load the data from the file.","lastModifiedDate":"2023-09-20"},{"lineNumber":238,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":239,"author":{"gitId":"samuelmui8"},"content":"### Saving the data","lastModifiedDate":"2023-09-20"},{"lineNumber":240,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":241,"author":{"gitId":"samuelmui8"},"content":"BroBot saves your tasks in the data file at `data/duke.txt` whenever the task list changes.","lastModifiedDate":"2023-09-20"}],"authorContributionMap":{"samuelmui8":215,"-":26}},{"path":"src/main/java/duke/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":" * Encapsulates the different commands that can be given to the bot.","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"enum Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"    BYE,","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"    LIST,","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"    MARK,","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"    UNMARK,","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"    DELETE,","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"    TODO,","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"    DEADLINE,","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"    EVENT,","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"    FIND,","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"    SORT,","lastModifiedDate":"2023-09-16"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"    INVALID","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"samuelmui8":18}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"samuelmui8"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"samuelmui8"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"samuelmui8"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"samuelmui8"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"samuelmui8"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"samuelmui8"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"samuelmui8"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"samuelmui8"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"samuelmui8"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"samuelmui8"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"samuelmui8"},"content":"    private void flip() {","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"samuelmui8"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"samuelmui8"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"samuelmui8"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"samuelmui8"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"samuelmui8"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"samuelmui8"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"samuelmui8"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"samuelmui8"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"samuelmui8"},"content":"        db.flip();","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"samuelmui8"},"content":"        return db;","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":61,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"samuelmui8":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"import java.util.concurrent.CompletableFuture;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":"import java.util.concurrent.TimeUnit;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":" * Contains the chatbot Brobot. It allows users to add and delete different types of tasks and mark them","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":" * as complete or incomplete","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"     * Constructor for an instance of Duke chatbot.","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"     * @param filePath the filePath to save the tasks to and load tasks from.","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"        tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"samuelmui8"},"content":"     * Returns a string response based on the user input.","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"samuelmui8"},"content":"     * @param input User string input.","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"samuelmui8"},"content":"     * @return Response by Brobot in string format.","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"samuelmui8"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"samuelmui8"},"content":"        Command command \u003d Parser.decideCommand(input);","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"samuelmui8"},"content":"        String response;","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"samuelmui8"},"content":"            switch (command) {","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"samuelmui8"},"content":"            case BYE:","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"samuelmui8"},"content":"                response \u003d Ui.getExitMessage();","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"samuelmui8"},"content":"                CompletableFuture.delayedExecutor(1, TimeUnit.SECONDS).execute(Platform::exit);","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"samuelmui8"},"content":"                break;","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"samuelmui8"},"content":"            case LIST:","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"samuelmui8"},"content":"                response \u003d tasks.getList();","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"samuelmui8"},"content":"                break;","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"samuelmui8"},"content":"            case MARK:","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"samuelmui8"},"content":"                response \u003d tasks.markTask(input);","lastModifiedDate":"2023-09-20"},{"lineNumber":49,"author":{"gitId":"samuelmui8"},"content":"                break;","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"samuelmui8"},"content":"            case UNMARK:","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"samuelmui8"},"content":"                response \u003d tasks.unmarkTask(input);","lastModifiedDate":"2023-09-20"},{"lineNumber":52,"author":{"gitId":"samuelmui8"},"content":"                break;","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"samuelmui8"},"content":"            case DELETE:","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"samuelmui8"},"content":"                response \u003d tasks.deleteTask(input);","lastModifiedDate":"2023-09-20"},{"lineNumber":55,"author":{"gitId":"samuelmui8"},"content":"                break;","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"samuelmui8"},"content":"            case TODO:","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"samuelmui8"},"content":"                response \u003d tasks.addTodo(input);","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"samuelmui8"},"content":"                break;","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"samuelmui8"},"content":"            case EVENT:","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"samuelmui8"},"content":"                response \u003d tasks.addEvent(input);","lastModifiedDate":"2023-09-07"},{"lineNumber":61,"author":{"gitId":"samuelmui8"},"content":"                break;","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"samuelmui8"},"content":"            case DEADLINE:","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"samuelmui8"},"content":"                response \u003d tasks.addDeadline(input);","lastModifiedDate":"2023-09-07"},{"lineNumber":64,"author":{"gitId":"samuelmui8"},"content":"                break;","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"samuelmui8"},"content":"            case FIND:","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"samuelmui8"},"content":"                response \u003d tasks.handleFind(input);","lastModifiedDate":"2023-09-16"},{"lineNumber":67,"author":{"gitId":"samuelmui8"},"content":"                break;","lastModifiedDate":"2023-09-16"},{"lineNumber":68,"author":{"gitId":"samuelmui8"},"content":"            case SORT:","lastModifiedDate":"2023-09-16"},{"lineNumber":69,"author":{"gitId":"samuelmui8"},"content":"                response \u003d tasks.handleSort(input);","lastModifiedDate":"2023-09-16"},{"lineNumber":70,"author":{"gitId":"samuelmui8"},"content":"                break;","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"samuelmui8"},"content":"            default:","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"samuelmui8"},"content":"                throw new DukeException(\"Bro, I\u0027m sorry but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-09-07"},{"lineNumber":73,"author":{"gitId":"samuelmui8"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"samuelmui8"},"content":"            storage.writeToFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"samuelmui8"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"samuelmui8"},"content":"            return e.toString();","lastModifiedDate":"2023-09-07"},{"lineNumber":79,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"samuelmui8"},"content":"        return response;","lastModifiedDate":"2023-09-07"},{"lineNumber":81,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":82,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":83,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":84,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"samuelmui8":83,"-":1}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":" * Encapsulates some exceptions that are specific to adding tasks on the Duke bot.","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"     * Constructor for a new Duke Exception.","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"     * @param message message to be displayed to the user.","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"        super(message);","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"    @Override","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"    public String toString() {","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"        return this.getMessage();","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"samuelmui8":20}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"public class Launcher {","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"samuelmui8":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"    private Duke duke \u003d new Duke(\"./data/duke.txt\");","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"    @Override","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"            stage.setTitle(\"BroBot\");","lastModifiedDate":"2023-09-20"},{"lineNumber":27,"author":{"gitId":"samuelmui8"},"content":"            stage.show();","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"samuelmui8"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"samuelmui8"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"samuelmui8":32}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"    private Duke duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/yuji.jpg\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"samuelmui8"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/gojo.jpg\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"samuelmui8"},"content":"     * Initializes the MainWindow","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"samuelmui8"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"samuelmui8"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"samuelmui8"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"samuelmui8"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"samuelmui8"},"content":"                DialogBox.getDukeDialog(Ui.getWelcomeMessage(), dukeImage)","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"samuelmui8"},"content":"        );","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"samuelmui8"},"content":"     * Sets duke to be the Duke instance passed in.","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"samuelmui8"},"content":"     * @param d Duke instance to be used as the bot.","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"samuelmui8"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"samuelmui8"},"content":"        duke \u003d d;","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"samuelmui8"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"samuelmui8"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"samuelmui8"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"samuelmui8"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"samuelmui8"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"samuelmui8"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"samuelmui8"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"samuelmui8"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"samuelmui8"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"samuelmui8"},"content":"        );","lastModifiedDate":"2023-09-07"},{"lineNumber":61,"author":{"gitId":"samuelmui8"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-07"},{"lineNumber":62,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":63,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"samuelmui8":63}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Event;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":" * Class that deals with making sense of the user command.","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"public class Parser {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"     * Decides which command to give to the bot based on user input.","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"     * @param input The String input by the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"     * @return The command to be used by the bot.","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"    public static Command decideCommand(String input) {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"        // return BYE and LIST only if the input matches exactly","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"samuelmui8"},"content":"            return Command.BYE;","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"samuelmui8"},"content":"        } else if (input.equals((\"list\"))) {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"samuelmui8"},"content":"            return Command.LIST;","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"samuelmui8"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"samuelmui8"},"content":"            String[] words \u003d input.split(\" \");","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"samuelmui8"},"content":"            String command \u003d words[0];","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"samuelmui8"},"content":"            for (Command c : Command.values()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"samuelmui8"},"content":"                if (c.name().toLowerCase().equals(command)","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"samuelmui8"},"content":"                        \u0026\u0026 !c.equals(Command.BYE) \u0026\u0026 !c.equals(Command.LIST)) {","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"samuelmui8"},"content":"                    return c;","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"samuelmui8"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"samuelmui8"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"samuelmui8"},"content":"            return Command.INVALID;","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"samuelmui8"},"content":"     * Converts the String stored in the file into a Task object.","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"samuelmui8"},"content":"     * @param string The string stored in the file.","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"samuelmui8"},"content":"     * @return Task representation of the string stored.","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"samuelmui8"},"content":"     * @throws DukeException If the string stored is not in the correct format.","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"samuelmui8"},"content":"    public static Task stringToTask(String string) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"samuelmui8"},"content":"        String[] words \u003d string.split(\"\\\\s\\\\|\\\\s\");","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"samuelmui8"},"content":"        if (checkTaskFormat(words)) {","lastModifiedDate":"2023-09-15"},{"lineNumber":54,"author":{"gitId":"samuelmui8"},"content":"            return createTask(words);","lastModifiedDate":"2023-09-15"},{"lineNumber":55,"author":{"gitId":"samuelmui8"},"content":"        } else {","lastModifiedDate":"2023-09-15"},{"lineNumber":56,"author":{"gitId":"samuelmui8"},"content":"            // should not reach this line","lastModifiedDate":"2023-09-15"},{"lineNumber":57,"author":{"gitId":"samuelmui8"},"content":"            assert false;","lastModifiedDate":"2023-09-15"},{"lineNumber":58,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"Task is not in the correct format\");","lastModifiedDate":"2023-09-15"},{"lineNumber":59,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":60,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":61,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":62,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":63,"author":{"gitId":"samuelmui8"},"content":"     * Checks if the task is marked as done.","lastModifiedDate":"2023-09-15"},{"lineNumber":64,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-09-15"},{"lineNumber":65,"author":{"gitId":"samuelmui8"},"content":"     * @param words The separate fields of the task.","lastModifiedDate":"2023-09-15"},{"lineNumber":66,"author":{"gitId":"samuelmui8"},"content":"     * @return True if the task is marked as done, false otherwise.","lastModifiedDate":"2023-09-15"},{"lineNumber":67,"author":{"gitId":"samuelmui8"},"content":"     * @throws DukeException If the marked field is invalid.","lastModifiedDate":"2023-09-15"},{"lineNumber":68,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":69,"author":{"gitId":"samuelmui8"},"content":"    private static boolean checkTaskMarked(String[] words) throws DukeException {","lastModifiedDate":"2023-09-15"},{"lineNumber":70,"author":{"gitId":"samuelmui8"},"content":"        if (words[1].equals(\"0\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"samuelmui8"},"content":"            return false;","lastModifiedDate":"2023-09-15"},{"lineNumber":72,"author":{"gitId":"samuelmui8"},"content":"        } else if (words[1].equals(\"1\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"samuelmui8"},"content":"            return true;","lastModifiedDate":"2023-09-15"},{"lineNumber":74,"author":{"gitId":"samuelmui8"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"Field 2 (isMarked) is invalid\");","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":78,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":79,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":80,"author":{"gitId":"samuelmui8"},"content":"     * Checks if the string representation of the task stored is in the correct format.","lastModifiedDate":"2023-09-15"},{"lineNumber":81,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-09-15"},{"lineNumber":82,"author":{"gitId":"samuelmui8"},"content":"     * @param words The separate fields of the task.","lastModifiedDate":"2023-09-15"},{"lineNumber":83,"author":{"gitId":"samuelmui8"},"content":"     * @return True if the task is in the correct format, throws an exception otherwise.","lastModifiedDate":"2023-09-15"},{"lineNumber":84,"author":{"gitId":"samuelmui8"},"content":"     * @throws DukeException If the task is not in the correct format.","lastModifiedDate":"2023-09-15"},{"lineNumber":85,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":86,"author":{"gitId":"samuelmui8"},"content":"    private static boolean checkTaskFormat(String[] words) throws DukeException {","lastModifiedDate":"2023-09-15"},{"lineNumber":87,"author":{"gitId":"samuelmui8"},"content":"        String taskType \u003d words[0];","lastModifiedDate":"2023-09-15"},{"lineNumber":88,"author":{"gitId":"samuelmui8"},"content":"        switch (taskType) {","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"samuelmui8"},"content":"        case \"T\":","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"samuelmui8"},"content":"            if (words.length !\u003d 3) {","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"samuelmui8"},"content":"                throw new DukeException(\"Incorrect Format for todo task in file\");","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"samuelmui8"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"samuelmui8"},"content":"            break;","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"samuelmui8"},"content":"        case \"D\":","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"samuelmui8"},"content":"            if (words.length !\u003d 4) {","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"samuelmui8"},"content":"                throw new DukeException(\"Incorrect Format for deadline task in file\");","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"samuelmui8"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"samuelmui8"},"content":"            break;","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"samuelmui8"},"content":"        case \"E\":","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"samuelmui8"},"content":"            if (words.length !\u003d 5) {","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"samuelmui8"},"content":"                throw new DukeException(\"Incorrect Format for event task in file\");","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"samuelmui8"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"samuelmui8"},"content":"            break;","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"samuelmui8"},"content":"        default:","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"Field 1 (Task type) is invalid\");","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"samuelmui8"},"content":"        return true;","lastModifiedDate":"2023-09-15"},{"lineNumber":108,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":109,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":110,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":111,"author":{"gitId":"samuelmui8"},"content":"     * Creates a Task object from the string representation of the task stored.","lastModifiedDate":"2023-09-15"},{"lineNumber":112,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-09-15"},{"lineNumber":113,"author":{"gitId":"samuelmui8"},"content":"     * @param words The separate fields of the task.","lastModifiedDate":"2023-09-15"},{"lineNumber":114,"author":{"gitId":"samuelmui8"},"content":"     * @return Task object created from the string representation.","lastModifiedDate":"2023-09-15"},{"lineNumber":115,"author":{"gitId":"samuelmui8"},"content":"     * @throws DukeException If the task type is invalid.","lastModifiedDate":"2023-09-15"},{"lineNumber":116,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":117,"author":{"gitId":"samuelmui8"},"content":"    private static Task createTask(String[] words) throws DukeException {","lastModifiedDate":"2023-09-15"},{"lineNumber":118,"author":{"gitId":"samuelmui8"},"content":"        Task t;","lastModifiedDate":"2023-09-15"},{"lineNumber":119,"author":{"gitId":"samuelmui8"},"content":"        String taskType \u003d words[0];","lastModifiedDate":"2023-09-15"},{"lineNumber":120,"author":{"gitId":"samuelmui8"},"content":"        boolean done \u003d checkTaskMarked(words);","lastModifiedDate":"2023-09-15"},{"lineNumber":121,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":122,"author":{"gitId":"samuelmui8"},"content":"        switch (taskType) {","lastModifiedDate":"2023-09-15"},{"lineNumber":123,"author":{"gitId":"samuelmui8"},"content":"        case \"T\":","lastModifiedDate":"2023-09-15"},{"lineNumber":124,"author":{"gitId":"samuelmui8"},"content":"            t \u003d new Todo(words[2]);","lastModifiedDate":"2023-09-15"},{"lineNumber":125,"author":{"gitId":"samuelmui8"},"content":"            break;","lastModifiedDate":"2023-09-15"},{"lineNumber":126,"author":{"gitId":"samuelmui8"},"content":"        case \"D\":","lastModifiedDate":"2023-09-15"},{"lineNumber":127,"author":{"gitId":"samuelmui8"},"content":"            t \u003d new Deadline(stringToDate(words[3]), words[2]);","lastModifiedDate":"2023-09-15"},{"lineNumber":128,"author":{"gitId":"samuelmui8"},"content":"            break;","lastModifiedDate":"2023-09-15"},{"lineNumber":129,"author":{"gitId":"samuelmui8"},"content":"        case \"E\":","lastModifiedDate":"2023-09-15"},{"lineNumber":130,"author":{"gitId":"samuelmui8"},"content":"            t \u003d new Event(stringToDate(words[3]), stringToDate(words[4]), words[2]);","lastModifiedDate":"2023-09-15"},{"lineNumber":131,"author":{"gitId":"samuelmui8"},"content":"            break;","lastModifiedDate":"2023-09-15"},{"lineNumber":132,"author":{"gitId":"samuelmui8"},"content":"        default:","lastModifiedDate":"2023-09-15"},{"lineNumber":133,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"Field 1 (Task type) is invalid\");","lastModifiedDate":"2023-09-15"},{"lineNumber":134,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":135,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":136,"author":{"gitId":"samuelmui8"},"content":"        if (done) {","lastModifiedDate":"2023-08-30"},{"lineNumber":137,"author":{"gitId":"samuelmui8"},"content":"            t.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":138,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":139,"author":{"gitId":"samuelmui8"},"content":"        return t;","lastModifiedDate":"2023-08-30"},{"lineNumber":140,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":141,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":142,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":143,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":144,"author":{"gitId":"samuelmui8"},"content":"     * Converts the String input date to LocalDate.","lastModifiedDate":"2023-08-30"},{"lineNumber":145,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":146,"author":{"gitId":"samuelmui8"},"content":"     * @param input String representation of date in YYYY-MM-DD format.","lastModifiedDate":"2023-08-30"},{"lineNumber":147,"author":{"gitId":"samuelmui8"},"content":"     * @return LocalDate of date.","lastModifiedDate":"2023-08-30"},{"lineNumber":148,"author":{"gitId":"samuelmui8"},"content":"     * @throws DukeException If the string input does not match the required format.","lastModifiedDate":"2023-08-30"},{"lineNumber":149,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":150,"author":{"gitId":"samuelmui8"},"content":"    public static LocalDate stringToDate(String input) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":151,"author":{"gitId":"samuelmui8"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2023-08-30"},{"lineNumber":152,"author":{"gitId":"samuelmui8"},"content":"        LocalDate date;","lastModifiedDate":"2023-08-30"},{"lineNumber":153,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":154,"author":{"gitId":"samuelmui8"},"content":"            date \u003d LocalDate.parse(input, formatter);","lastModifiedDate":"2023-08-30"},{"lineNumber":155,"author":{"gitId":"samuelmui8"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":156,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"Date input in wrong format. Please input as YYYY-MM-DD\");","lastModifiedDate":"2023-08-30"},{"lineNumber":157,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":158,"author":{"gitId":"samuelmui8"},"content":"        return date;","lastModifiedDate":"2023-08-30"},{"lineNumber":159,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":160,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":161,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"samuelmui8":161}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"import java.io.File;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"import java.util.List;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":" * Class that deals with loading tasks from the file and saving tasks in the file.","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"public class Storage {","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"    private String filePath;","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"    private List\u003cTask\u003e list;","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"     * Constructor for storage object. Initialises the filePath and list.","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"     * @param filePath The filePath of the file to read from and write to.","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"samuelmui8"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"samuelmui8"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"samuelmui8"},"content":"        this.list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"samuelmui8"},"content":"     * Reads the file and adds all the tasks from the file into the list.","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"samuelmui8"},"content":"     * @return The list containing tasks read from the file","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"samuelmui8"},"content":"    public List\u003cTask\u003e load() {","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"samuelmui8"},"content":"            // create data directory if it does not exist","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"samuelmui8"},"content":"            Files.createDirectories(Paths.get(\"./data\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"samuelmui8"},"content":"            File f \u003d new File(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"samuelmui8"},"content":"            Scanner s \u003d new Scanner(f);","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"samuelmui8"},"content":"            while (s.hasNext()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"samuelmui8"},"content":"                Task task \u003d Parser.stringToTask(s.nextLine());","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"samuelmui8"},"content":"                this.list.add(task);","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"samuelmui8"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"samuelmui8"},"content":"            return this.list;","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"samuelmui8"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"samuelmui8"},"content":"            System.out.println(\"Something went wrong reading the file.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"samuelmui8"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"samuelmui8"},"content":"            System.out.println(e);","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"samuelmui8"},"content":"        // returns empty list if file is corrupted","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"samuelmui8"},"content":"        return this.list;","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"samuelmui8"},"content":"     * Writes all the tasks in the current list to the file.","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"samuelmui8"},"content":"     * @throws DukeException If some error occurs with the writing process.","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"samuelmui8"},"content":"    public void writeToFile() throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"samuelmui8"},"content":"            FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"samuelmui8"},"content":"            for (Task task : list) {","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"samuelmui8"},"content":"                fw.write(task.tasktoString() + \"\\n\");","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"samuelmui8"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"samuelmui8"},"content":"            fw.close();","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"samuelmui8"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"Something went wrong writing to the file.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":74,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"samuelmui8":79}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":"import java.util.List;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-09-16"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Event;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":" * Class that contains the task list e.g., it has operations to add/delete tasks in the list.","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"public class TaskList {","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"    private List\u003cTask\u003e list;","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"     * Constructor for a TaskList object.","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"     * @param list List from storage for TaskList object to point to.","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"    public TaskList(List\u003cTask\u003e list) {","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"samuelmui8"},"content":"        this.list \u003d list;","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"samuelmui8"},"content":"     * Adds given task to task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"samuelmui8"},"content":"     * @param task Task to be added.","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"samuelmui8"},"content":"     * @return Message indicating task was added","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"samuelmui8"},"content":"    public String addTask(Task task) {","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"samuelmui8"},"content":"        this.list.add(task);","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"samuelmui8"},"content":"        return Ui.getAddTaskMessage(task, list);","lastModifiedDate":"2023-09-20"},{"lineNumber":39,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"samuelmui8"},"content":"     * Extracts task index from user input and deletes the task.","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"samuelmui8"},"content":"     * @param input The text input by the user.","lastModifiedDate":"2023-09-20"},{"lineNumber":45,"author":{"gitId":"samuelmui8"},"content":"     * @return Message indicating task was deleted.","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"samuelmui8"},"content":"     * @throws DukeException If the input is not a number or is out of range of the list.","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"samuelmui8"},"content":"    public String deleteTask(String input) throws DukeException {","lastModifiedDate":"2023-09-20"},{"lineNumber":49,"author":{"gitId":"samuelmui8"},"content":"        String[] words \u003d input.split(\" \");","lastModifiedDate":"2023-09-20"},{"lineNumber":50,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"samuelmui8"},"content":"            String taskIndex \u003d words[1];","lastModifiedDate":"2023-09-20"},{"lineNumber":52,"author":{"gitId":"samuelmui8"},"content":"            int index \u003d Integer.parseInt(taskIndex) - 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"samuelmui8"},"content":"            Task deletedTask \u003d list.get(index);","lastModifiedDate":"2023-09-20"},{"lineNumber":54,"author":{"gitId":"samuelmui8"},"content":"            assert index \u003e\u003d 0;","lastModifiedDate":"2023-09-20"},{"lineNumber":55,"author":{"gitId":"samuelmui8"},"content":"            list.remove(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"samuelmui8"},"content":"            return Ui.getDeleteTaskMessage(deletedTask, list);","lastModifiedDate":"2023-09-20"},{"lineNumber":57,"author":{"gitId":"samuelmui8"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"samuelmui8"},"content":"            // number input is invalid","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"Invalid task index.\");","lastModifiedDate":"2023-09-20"},{"lineNumber":60,"author":{"gitId":"samuelmui8"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"samuelmui8"},"content":"            // user did not enter a number","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"Please key in a task index.\");","lastModifiedDate":"2023-09-20"},{"lineNumber":63,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"samuelmui8"},"content":"     * Extracts task index from user input and marks the task as done.","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"samuelmui8"},"content":"     * @param input The text input by the user.","lastModifiedDate":"2023-09-20"},{"lineNumber":70,"author":{"gitId":"samuelmui8"},"content":"     * @return Message indicating task marked as done.","lastModifiedDate":"2023-09-07"},{"lineNumber":71,"author":{"gitId":"samuelmui8"},"content":"     * @throws DukeException If the input is not a number or is out of range of the list.","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"samuelmui8"},"content":"    public String markTask(String input) throws DukeException {","lastModifiedDate":"2023-09-20"},{"lineNumber":74,"author":{"gitId":"samuelmui8"},"content":"        String[] words \u003d input.split(\" \");","lastModifiedDate":"2023-09-20"},{"lineNumber":75,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"samuelmui8"},"content":"            String taskIndex \u003d words[1];","lastModifiedDate":"2023-09-20"},{"lineNumber":77,"author":{"gitId":"samuelmui8"},"content":"            int index \u003d Integer.parseInt(taskIndex) - 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"samuelmui8"},"content":"            list.get(index).markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"samuelmui8"},"content":"            assert index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();","lastModifiedDate":"2023-09-20"},{"lineNumber":80,"author":{"gitId":"samuelmui8"},"content":"            return Ui.getMarkedTaskMessage(list.get(index));","lastModifiedDate":"2023-09-20"},{"lineNumber":81,"author":{"gitId":"samuelmui8"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"samuelmui8"},"content":"            // number input is invalid","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"Invalid task index.\");","lastModifiedDate":"2023-09-20"},{"lineNumber":84,"author":{"gitId":"samuelmui8"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"samuelmui8"},"content":"            // user did not enter a number","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"Please key in a task index.\");","lastModifiedDate":"2023-09-20"},{"lineNumber":87,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"samuelmui8"},"content":"     * Extracts task index from user input and marks the task as not done.","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"samuelmui8"},"content":"     * @param input The text input by the user.","lastModifiedDate":"2023-09-20"},{"lineNumber":94,"author":{"gitId":"samuelmui8"},"content":"     * @return Message indicating task marked as not done.","lastModifiedDate":"2023-09-07"},{"lineNumber":95,"author":{"gitId":"samuelmui8"},"content":"     * @throws DukeException If the input is not a number or is out of range of the list.","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"samuelmui8"},"content":"    public String unmarkTask(String input) throws DukeException {","lastModifiedDate":"2023-09-20"},{"lineNumber":98,"author":{"gitId":"samuelmui8"},"content":"        String[] words \u003d input.split(\" \");","lastModifiedDate":"2023-09-20"},{"lineNumber":99,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"samuelmui8"},"content":"            String taskIndex \u003d words[1];","lastModifiedDate":"2023-09-20"},{"lineNumber":101,"author":{"gitId":"samuelmui8"},"content":"            int index \u003d Integer.parseInt(taskIndex) - 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"samuelmui8"},"content":"            list.get(index).unMark();","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"samuelmui8"},"content":"            assert index \u003e\u003d 0 \u0026\u0026 index \u003c list.size();","lastModifiedDate":"2023-09-20"},{"lineNumber":104,"author":{"gitId":"samuelmui8"},"content":"            return Ui.getUnmarkTaskMessage(list.get(index));","lastModifiedDate":"2023-09-20"},{"lineNumber":105,"author":{"gitId":"samuelmui8"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"samuelmui8"},"content":"            // number input is invalid","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"Invalid task index.\");","lastModifiedDate":"2023-09-20"},{"lineNumber":108,"author":{"gitId":"samuelmui8"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"samuelmui8"},"content":"            // user did not enter a number","lastModifiedDate":"2023-08-30"},{"lineNumber":110,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"Please key in a task index.\");","lastModifiedDate":"2023-09-20"},{"lineNumber":111,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"samuelmui8"},"content":"     * Extracts task description from user input and adds a todo task.","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"samuelmui8"},"content":"     * @param input The text input by the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"samuelmui8"},"content":"     * @return Message indicating todo was added.","lastModifiedDate":"2023-09-07"},{"lineNumber":119,"author":{"gitId":"samuelmui8"},"content":"     * @throws DukeException If the text input does not match the required regex pattern.","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"samuelmui8"},"content":"    public String addTodo(String input) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":122,"author":{"gitId":"samuelmui8"},"content":"        // Define regular expressions for pattern matching for todo","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"samuelmui8"},"content":"        Pattern todoPattern \u003d Pattern.compile(\"todo\\\\s+(.*?)$\");","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":125,"author":{"gitId":"samuelmui8"},"content":"        // Match the input string with the pattern","lastModifiedDate":"2023-08-30"},{"lineNumber":126,"author":{"gitId":"samuelmui8"},"content":"        Matcher matcher \u003d todoPattern.matcher(input.trim());","lastModifiedDate":"2023-08-31"},{"lineNumber":127,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":128,"author":{"gitId":"samuelmui8"},"content":"        // Check if the input string matches the pattern","lastModifiedDate":"2023-08-30"},{"lineNumber":129,"author":{"gitId":"samuelmui8"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2023-09-15"},{"lineNumber":130,"author":{"gitId":"samuelmui8"},"content":"            // Todo description is empty","lastModifiedDate":"2023-08-30"},{"lineNumber":131,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\"","lastModifiedDate":"2023-09-07"},{"lineNumber":132,"author":{"gitId":"samuelmui8"},"content":"                    + \"\\ntodo {description}\");","lastModifiedDate":"2023-08-31"},{"lineNumber":133,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":134,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":135,"author":{"gitId":"samuelmui8"},"content":"        String description \u003d matcher.group(1); // Extract task description","lastModifiedDate":"2023-09-15"},{"lineNumber":136,"author":{"gitId":"samuelmui8"},"content":"        Task task \u003d new Todo(description);","lastModifiedDate":"2023-09-15"},{"lineNumber":137,"author":{"gitId":"samuelmui8"},"content":"        return addTask(task);","lastModifiedDate":"2023-09-15"},{"lineNumber":138,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":139,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":140,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":141,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":142,"author":{"gitId":"samuelmui8"},"content":"     * Extracts task description, start time and end time from user input and adds an event task.","lastModifiedDate":"2023-08-30"},{"lineNumber":143,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":144,"author":{"gitId":"samuelmui8"},"content":"     * @param input The text input by the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":145,"author":{"gitId":"samuelmui8"},"content":"     * @return Message indicating event was added.","lastModifiedDate":"2023-09-07"},{"lineNumber":146,"author":{"gitId":"samuelmui8"},"content":"     * @throws DukeException If the text input does not match the required regex pattern.","lastModifiedDate":"2023-08-30"},{"lineNumber":147,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":148,"author":{"gitId":"samuelmui8"},"content":"    public String addEvent(String input) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":149,"author":{"gitId":"samuelmui8"},"content":"        // Define regular expressions for pattern matching for event","lastModifiedDate":"2023-08-30"},{"lineNumber":150,"author":{"gitId":"samuelmui8"},"content":"        Pattern eventPattern \u003d Pattern.compile(\"event\\\\s+(.*?)\\\\s+/from\"","lastModifiedDate":"2023-08-31"},{"lineNumber":151,"author":{"gitId":"samuelmui8"},"content":"                + \"\\\\s+(.*?)\\\\s+/to\\\\s+(.*?)$\");","lastModifiedDate":"2023-08-31"},{"lineNumber":152,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":153,"author":{"gitId":"samuelmui8"},"content":"        // Match the input string with the pattern","lastModifiedDate":"2023-08-30"},{"lineNumber":154,"author":{"gitId":"samuelmui8"},"content":"        Matcher matcher \u003d eventPattern.matcher(input);","lastModifiedDate":"2023-08-30"},{"lineNumber":155,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":156,"author":{"gitId":"samuelmui8"},"content":"        // Check if the input string matches the pattern","lastModifiedDate":"2023-08-30"},{"lineNumber":157,"author":{"gitId":"samuelmui8"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2023-09-15"},{"lineNumber":158,"author":{"gitId":"samuelmui8"},"content":"            // User did not follow event format","lastModifiedDate":"2023-09-15"},{"lineNumber":159,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"Input for event doesn\u0027t match the expected format.\"","lastModifiedDate":"2023-09-15"},{"lineNumber":160,"author":{"gitId":"samuelmui8"},"content":"                    + \"\\nevent {task} /from {startDate in YYYY-MM-DD} /to {endDate in YYYY-MM-DD}\");","lastModifiedDate":"2023-09-15"},{"lineNumber":161,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":162,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":163,"author":{"gitId":"samuelmui8"},"content":"        String description \u003d matcher.group(1); // Extract event name","lastModifiedDate":"2023-08-30"},{"lineNumber":164,"author":{"gitId":"samuelmui8"},"content":"        LocalDate startDate \u003d Parser.stringToDate(matcher.group(2)); // Extract start date","lastModifiedDate":"2023-08-30"},{"lineNumber":165,"author":{"gitId":"samuelmui8"},"content":"        LocalDate endDate \u003d Parser.stringToDate(matcher.group(3)); // Extract end date","lastModifiedDate":"2023-08-30"},{"lineNumber":166,"author":{"gitId":"samuelmui8"},"content":"        Task task \u003d new Event(startDate, endDate, description);","lastModifiedDate":"2023-08-30"},{"lineNumber":167,"author":{"gitId":"samuelmui8"},"content":"        return addTask(task);","lastModifiedDate":"2023-09-07"},{"lineNumber":168,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":169,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":170,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":171,"author":{"gitId":"samuelmui8"},"content":"     * Extracts task description and due date from user input and adds a deadline task.","lastModifiedDate":"2023-08-30"},{"lineNumber":172,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":173,"author":{"gitId":"samuelmui8"},"content":"     * @param input The text input by the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":174,"author":{"gitId":"samuelmui8"},"content":"     * @return Message indicating deadline was added.","lastModifiedDate":"2023-09-07"},{"lineNumber":175,"author":{"gitId":"samuelmui8"},"content":"     * @throws DukeException If the text input does not match the required regex pattern.","lastModifiedDate":"2023-08-30"},{"lineNumber":176,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":177,"author":{"gitId":"samuelmui8"},"content":"    public String addDeadline(String input) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":178,"author":{"gitId":"samuelmui8"},"content":"        // Define regular expressions for pattern matching for deadline","lastModifiedDate":"2023-08-30"},{"lineNumber":179,"author":{"gitId":"samuelmui8"},"content":"        Pattern deadlinePattern \u003d Pattern.compile(\"deadline\\\\s+(.*?)\\\\s+/by\\\\s+(.*?)$\");","lastModifiedDate":"2023-08-30"},{"lineNumber":180,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":181,"author":{"gitId":"samuelmui8"},"content":"        // Match the input string with the pattern","lastModifiedDate":"2023-08-30"},{"lineNumber":182,"author":{"gitId":"samuelmui8"},"content":"        Matcher matcher \u003d deadlinePattern.matcher(input);","lastModifiedDate":"2023-08-30"},{"lineNumber":183,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":184,"author":{"gitId":"samuelmui8"},"content":"        // Check if the input string matches the pattern","lastModifiedDate":"2023-08-30"},{"lineNumber":185,"author":{"gitId":"samuelmui8"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2023-09-15"},{"lineNumber":186,"author":{"gitId":"samuelmui8"},"content":"            // User did not follow deadline format","lastModifiedDate":"2023-08-30"},{"lineNumber":187,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"Input for deadline doesn\u0027t match the expected format.\"","lastModifiedDate":"2023-08-31"},{"lineNumber":188,"author":{"gitId":"samuelmui8"},"content":"                    + \"\\ndeadline {description} /by {endDate in YYYY-MM-DD}\");","lastModifiedDate":"2023-08-31"},{"lineNumber":189,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":190,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":191,"author":{"gitId":"samuelmui8"},"content":"        String description \u003d matcher.group(1); // Extract task description","lastModifiedDate":"2023-09-15"},{"lineNumber":192,"author":{"gitId":"samuelmui8"},"content":"        LocalDate dueDate \u003d Parser.stringToDate(matcher.group(2)); // Extract due date","lastModifiedDate":"2023-09-15"},{"lineNumber":193,"author":{"gitId":"samuelmui8"},"content":"        Task task \u003d new Deadline(dueDate, description);","lastModifiedDate":"2023-09-15"},{"lineNumber":194,"author":{"gitId":"samuelmui8"},"content":"        return addTask(task);","lastModifiedDate":"2023-09-15"},{"lineNumber":195,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":196,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":197,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":198,"author":{"gitId":"samuelmui8"},"content":"     * Returns all tasks in the list in a String format.","lastModifiedDate":"2023-09-07"},{"lineNumber":199,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":200,"author":{"gitId":"samuelmui8"},"content":"     * @return All the tasks in the list as a string.","lastModifiedDate":"2023-09-07"},{"lineNumber":201,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":202,"author":{"gitId":"samuelmui8"},"content":"    public String getList() {","lastModifiedDate":"2023-09-07"},{"lineNumber":203,"author":{"gitId":"samuelmui8"},"content":"        return Ui.getListAsString(list);","lastModifiedDate":"2023-09-20"},{"lineNumber":204,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":205,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":206,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":207,"author":{"gitId":"samuelmui8"},"content":"     * Returns all the tasks in the current list that matches the target string as a string.","lastModifiedDate":"2023-09-07"},{"lineNumber":208,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":209,"author":{"gitId":"samuelmui8"},"content":"     * @param target The search target to match to.","lastModifiedDate":"2023-08-31"},{"lineNumber":210,"author":{"gitId":"samuelmui8"},"content":"     * @return All the matching tasks as a string.","lastModifiedDate":"2023-09-07"},{"lineNumber":211,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":212,"author":{"gitId":"samuelmui8"},"content":"    private String getMatchingTasks(String target) {","lastModifiedDate":"2023-09-16"},{"lineNumber":213,"author":{"gitId":"samuelmui8"},"content":"        StringBuilder s \u003d new StringBuilder(\"Here are the matching tasks in your list:\\n\");","lastModifiedDate":"2023-09-07"},{"lineNumber":214,"author":{"gitId":"samuelmui8"},"content":"        int counter \u003d 1;","lastModifiedDate":"2023-09-06"},{"lineNumber":215,"author":{"gitId":"samuelmui8"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":216,"author":{"gitId":"samuelmui8"},"content":"            if (list.get(i).contains(target)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":217,"author":{"gitId":"samuelmui8"},"content":"                s.append(counter + \". \" + list.get(i) + \"\\n\");","lastModifiedDate":"2023-09-07"},{"lineNumber":218,"author":{"gitId":"samuelmui8"},"content":"                counter++;","lastModifiedDate":"2023-09-06"},{"lineNumber":219,"author":{"gitId":"samuelmui8"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":220,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":221,"author":{"gitId":"samuelmui8"},"content":"        return s.toString();","lastModifiedDate":"2023-09-07"},{"lineNumber":222,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":223,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":224,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":225,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":226,"author":{"gitId":"samuelmui8"},"content":"     * Extracts the search target from the user input and calls printMatchingTasks","lastModifiedDate":"2023-08-31"},{"lineNumber":227,"author":{"gitId":"samuelmui8"},"content":"     * to print the results that match.","lastModifiedDate":"2023-08-31"},{"lineNumber":228,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":229,"author":{"gitId":"samuelmui8"},"content":"     * @param input The text input by user.","lastModifiedDate":"2023-08-31"},{"lineNumber":230,"author":{"gitId":"samuelmui8"},"content":"     * @return All the matching tasks as a string.","lastModifiedDate":"2023-09-07"},{"lineNumber":231,"author":{"gitId":"samuelmui8"},"content":"     * @throws DukeException If the user left the search target blank.","lastModifiedDate":"2023-08-31"},{"lineNumber":232,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":233,"author":{"gitId":"samuelmui8"},"content":"    public String handleFind(String input) throws DukeException {","lastModifiedDate":"2023-09-16"},{"lineNumber":234,"author":{"gitId":"samuelmui8"},"content":"        // Define regular expressions for pattern matching for todo","lastModifiedDate":"2023-08-31"},{"lineNumber":235,"author":{"gitId":"samuelmui8"},"content":"        Pattern todoPattern \u003d Pattern.compile(\"find\\\\s+(.*?)$\");","lastModifiedDate":"2023-08-31"},{"lineNumber":236,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":237,"author":{"gitId":"samuelmui8"},"content":"        // Match the input string with the pattern","lastModifiedDate":"2023-08-31"},{"lineNumber":238,"author":{"gitId":"samuelmui8"},"content":"        Matcher matcher \u003d todoPattern.matcher(input.trim());","lastModifiedDate":"2023-08-31"},{"lineNumber":239,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":240,"author":{"gitId":"samuelmui8"},"content":"        // Check if the input string matches the pattern","lastModifiedDate":"2023-08-31"},{"lineNumber":241,"author":{"gitId":"samuelmui8"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2023-09-15"},{"lineNumber":242,"author":{"gitId":"samuelmui8"},"content":"            // find description is empty","lastModifiedDate":"2023-08-31"},{"lineNumber":243,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"OOPS!!! Field after find cannot be empty :(\");","lastModifiedDate":"2023-08-31"},{"lineNumber":244,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":245,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":246,"author":{"gitId":"samuelmui8"},"content":"        String target \u003d matcher.group(1); // Extract search target","lastModifiedDate":"2023-09-15"},{"lineNumber":247,"author":{"gitId":"samuelmui8"},"content":"        return getMatchingTasks(target); // Returns results","lastModifiedDate":"2023-09-15"},{"lineNumber":248,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":249,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":250,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":251,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-09-16"},{"lineNumber":252,"author":{"gitId":"samuelmui8"},"content":"     * Extracts the task type from the user input and calls printSortedTasks","lastModifiedDate":"2023-09-16"},{"lineNumber":253,"author":{"gitId":"samuelmui8"},"content":"     * to print the specified tasks type in sorted order.","lastModifiedDate":"2023-09-16"},{"lineNumber":254,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-09-16"},{"lineNumber":255,"author":{"gitId":"samuelmui8"},"content":"     * @param input The text input by user.","lastModifiedDate":"2023-09-16"},{"lineNumber":256,"author":{"gitId":"samuelmui8"},"content":"     * @return All the sorted tasks as a string.","lastModifiedDate":"2023-09-16"},{"lineNumber":257,"author":{"gitId":"samuelmui8"},"content":"     * @throws DukeException If the user left the task type blank or if the task type is invalid.","lastModifiedDate":"2023-09-16"},{"lineNumber":258,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-09-16"},{"lineNumber":259,"author":{"gitId":"samuelmui8"},"content":"    public String handleSort(String input) throws DukeException {","lastModifiedDate":"2023-09-16"},{"lineNumber":260,"author":{"gitId":"samuelmui8"},"content":"        // Define regular expressions for pattern matching for todo","lastModifiedDate":"2023-09-16"},{"lineNumber":261,"author":{"gitId":"samuelmui8"},"content":"        Pattern todoPattern \u003d Pattern.compile(\"sort\\\\s+(.*?)$\");","lastModifiedDate":"2023-09-16"},{"lineNumber":262,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":263,"author":{"gitId":"samuelmui8"},"content":"        // Match the input string with the pattern","lastModifiedDate":"2023-09-16"},{"lineNumber":264,"author":{"gitId":"samuelmui8"},"content":"        Matcher matcher \u003d todoPattern.matcher(input.trim());","lastModifiedDate":"2023-09-16"},{"lineNumber":265,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":266,"author":{"gitId":"samuelmui8"},"content":"        // Check if the input string matches the pattern","lastModifiedDate":"2023-09-16"},{"lineNumber":267,"author":{"gitId":"samuelmui8"},"content":"        if (!matcher.matches()) {","lastModifiedDate":"2023-09-16"},{"lineNumber":268,"author":{"gitId":"samuelmui8"},"content":"            // find description is empty","lastModifiedDate":"2023-09-16"},{"lineNumber":269,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"OOPS!!! Field after sort cannot be empty :(\");","lastModifiedDate":"2023-09-16"},{"lineNumber":270,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-09-16"},{"lineNumber":271,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":272,"author":{"gitId":"samuelmui8"},"content":"        String taskType \u003d matcher.group(1); // Extract task type","lastModifiedDate":"2023-09-16"},{"lineNumber":273,"author":{"gitId":"samuelmui8"},"content":"        List\u003c? extends Task\u003e sortedTasks \u003d sortTasks(taskType);","lastModifiedDate":"2023-09-16"},{"lineNumber":274,"author":{"gitId":"samuelmui8"},"content":"        return Ui.getSortedTasks(sortedTasks, taskType);","lastModifiedDate":"2023-09-20"},{"lineNumber":275,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":276,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":277,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":278,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-09-16"},{"lineNumber":279,"author":{"gitId":"samuelmui8"},"content":"     * Sorts the specified type of tasks in the current list by endDate for deadline","lastModifiedDate":"2023-09-16"},{"lineNumber":280,"author":{"gitId":"samuelmui8"},"content":"     * and startDate for event","lastModifiedDate":"2023-09-16"},{"lineNumber":281,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-09-16"},{"lineNumber":282,"author":{"gitId":"samuelmui8"},"content":"     * @param taskType The type of task to be sorted.","lastModifiedDate":"2023-09-16"},{"lineNumber":283,"author":{"gitId":"samuelmui8"},"content":"     * @return List of sorted tasks.","lastModifiedDate":"2023-09-16"},{"lineNumber":284,"author":{"gitId":"samuelmui8"},"content":"     * @throws DukeException If the task type is invalid.","lastModifiedDate":"2023-09-16"},{"lineNumber":285,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-09-16"},{"lineNumber":286,"author":{"gitId":"samuelmui8"},"content":"    private List\u003c? extends Task\u003e sortTasks(String taskType) throws DukeException {","lastModifiedDate":"2023-09-16"},{"lineNumber":287,"author":{"gitId":"samuelmui8"},"content":"        if (taskType.equals(\"deadline\")) {","lastModifiedDate":"2023-09-16"},{"lineNumber":288,"author":{"gitId":"samuelmui8"},"content":"            List\u003cDeadline\u003e deadlines \u003d list.stream()","lastModifiedDate":"2023-09-16"},{"lineNumber":289,"author":{"gitId":"samuelmui8"},"content":"                    .filter(task -\u003e task instanceof Deadline)","lastModifiedDate":"2023-09-16"},{"lineNumber":290,"author":{"gitId":"samuelmui8"},"content":"                    .map(task -\u003e (Deadline) task)","lastModifiedDate":"2023-09-16"},{"lineNumber":291,"author":{"gitId":"samuelmui8"},"content":"                    .sorted()","lastModifiedDate":"2023-09-16"},{"lineNumber":292,"author":{"gitId":"samuelmui8"},"content":"                    .collect(Collectors.toList());","lastModifiedDate":"2023-09-16"},{"lineNumber":293,"author":{"gitId":"samuelmui8"},"content":"            return deadlines;","lastModifiedDate":"2023-09-16"},{"lineNumber":294,"author":{"gitId":"samuelmui8"},"content":"        } else if (taskType.equals(\"event\")) {","lastModifiedDate":"2023-09-16"},{"lineNumber":295,"author":{"gitId":"samuelmui8"},"content":"            List\u003cEvent\u003e events \u003d list.stream()","lastModifiedDate":"2023-09-16"},{"lineNumber":296,"author":{"gitId":"samuelmui8"},"content":"                    .filter(task -\u003e task instanceof Event)","lastModifiedDate":"2023-09-16"},{"lineNumber":297,"author":{"gitId":"samuelmui8"},"content":"                    .map(task -\u003e (Event) task)","lastModifiedDate":"2023-09-16"},{"lineNumber":298,"author":{"gitId":"samuelmui8"},"content":"                    .sorted()","lastModifiedDate":"2023-09-16"},{"lineNumber":299,"author":{"gitId":"samuelmui8"},"content":"                    .collect(Collectors.toList());","lastModifiedDate":"2023-09-16"},{"lineNumber":300,"author":{"gitId":"samuelmui8"},"content":"            return events;","lastModifiedDate":"2023-09-16"},{"lineNumber":301,"author":{"gitId":"samuelmui8"},"content":"        } else {","lastModifiedDate":"2023-09-16"},{"lineNumber":302,"author":{"gitId":"samuelmui8"},"content":"            throw new DukeException(\"OOPS!!! Task type for sort can only be deadline or event.\");","lastModifiedDate":"2023-09-20"},{"lineNumber":303,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-09-16"},{"lineNumber":304,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":305,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"samuelmui8":305}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"import java.util.List;","lastModifiedDate":"2023-09-20"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-09-20"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":" * Class that deals with interactions with the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"public class Ui {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"     * Returns the welcome message.","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"     * @return Welcome message as a string.","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"    public static String getWelcomeMessage() {","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"        return \"Sup bro! I\u0027m Brobot\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"                + \"What can I do for you?\";","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"     * Returns the farewell message.","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"     * @return Exit message as a string.","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"samuelmui8"},"content":"    public static String getExitMessage() {","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"samuelmui8"},"content":"        return \"Bye. Hope to see you again soon bro!\";","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":32,"author":{"gitId":"samuelmui8"},"content":"     * Returns the message when a task is added.","lastModifiedDate":"2023-09-20"},{"lineNumber":33,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":34,"author":{"gitId":"samuelmui8"},"content":"     * @param task The task that is added.","lastModifiedDate":"2023-09-20"},{"lineNumber":35,"author":{"gitId":"samuelmui8"},"content":"     * @param list The list of tasks.","lastModifiedDate":"2023-09-20"},{"lineNumber":36,"author":{"gitId":"samuelmui8"},"content":"     * @return Message when a task is added.","lastModifiedDate":"2023-09-20"},{"lineNumber":37,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":38,"author":{"gitId":"samuelmui8"},"content":"    public static String getAddTaskMessage(Task task, List\u003cTask\u003e list) {","lastModifiedDate":"2023-09-20"},{"lineNumber":39,"author":{"gitId":"samuelmui8"},"content":"        return \"Got it bro! I\u0027ve added this task:\\n\" + task + \"\\n\"","lastModifiedDate":"2023-09-20"},{"lineNumber":40,"author":{"gitId":"samuelmui8"},"content":"                + \"Now you have \" + list.size() + \" tasks in the list\";","lastModifiedDate":"2023-09-20"},{"lineNumber":41,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":42,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":43,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":44,"author":{"gitId":"samuelmui8"},"content":"     * Returns the message when a task is deleted.","lastModifiedDate":"2023-09-20"},{"lineNumber":45,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":46,"author":{"gitId":"samuelmui8"},"content":"     * @param task The task that is deleted.","lastModifiedDate":"2023-09-20"},{"lineNumber":47,"author":{"gitId":"samuelmui8"},"content":"     * @param list The list of tasks.","lastModifiedDate":"2023-09-20"},{"lineNumber":48,"author":{"gitId":"samuelmui8"},"content":"     * @return Message when a task is deleted.","lastModifiedDate":"2023-09-20"},{"lineNumber":49,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":50,"author":{"gitId":"samuelmui8"},"content":"    public static String getDeleteTaskMessage(Task task, List\u003cTask\u003e list) {","lastModifiedDate":"2023-09-20"},{"lineNumber":51,"author":{"gitId":"samuelmui8"},"content":"        return \"Noted! I\u0027ve deleted this task from the list:\\n\"","lastModifiedDate":"2023-09-20"},{"lineNumber":52,"author":{"gitId":"samuelmui8"},"content":"                + task + \"\\nNow you have \" + list.size() + \" tasks in the list\";","lastModifiedDate":"2023-09-20"},{"lineNumber":53,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":54,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":55,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":56,"author":{"gitId":"samuelmui8"},"content":"     * Returns the message when a task is marked as done.","lastModifiedDate":"2023-09-20"},{"lineNumber":57,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":58,"author":{"gitId":"samuelmui8"},"content":"     * @param task The task that is marked as done.","lastModifiedDate":"2023-09-20"},{"lineNumber":59,"author":{"gitId":"samuelmui8"},"content":"     * @return Message when a task is marked as done.","lastModifiedDate":"2023-09-20"},{"lineNumber":60,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":61,"author":{"gitId":"samuelmui8"},"content":"    public static String getMarkedTaskMessage(Task task) {","lastModifiedDate":"2023-09-20"},{"lineNumber":62,"author":{"gitId":"samuelmui8"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\" + \"\" + task;","lastModifiedDate":"2023-09-20"},{"lineNumber":63,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":64,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":65,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":66,"author":{"gitId":"samuelmui8"},"content":"     * Returns the message when a task is unmarked.","lastModifiedDate":"2023-09-20"},{"lineNumber":67,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":68,"author":{"gitId":"samuelmui8"},"content":"     * @param task The task that is unmarked.","lastModifiedDate":"2023-09-20"},{"lineNumber":69,"author":{"gitId":"samuelmui8"},"content":"     * @return Message when a task is unmarked.","lastModifiedDate":"2023-09-20"},{"lineNumber":70,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":71,"author":{"gitId":"samuelmui8"},"content":"    public static String getUnmarkTaskMessage(Task task) {","lastModifiedDate":"2023-09-20"},{"lineNumber":72,"author":{"gitId":"samuelmui8"},"content":"        return \"Nice! I\u0027ve marked this task as not done yet:\\n\" + \"\" + task;","lastModifiedDate":"2023-09-20"},{"lineNumber":73,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":74,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":75,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":76,"author":{"gitId":"samuelmui8"},"content":"     * Returns all tasks in the list in a String format.","lastModifiedDate":"2023-09-20"},{"lineNumber":77,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":78,"author":{"gitId":"samuelmui8"},"content":"     * @return All the tasks in the list as a string.","lastModifiedDate":"2023-09-20"},{"lineNumber":79,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":80,"author":{"gitId":"samuelmui8"},"content":"    public static String getListAsString(List\u003cTask\u003e list) {","lastModifiedDate":"2023-09-20"},{"lineNumber":81,"author":{"gitId":"samuelmui8"},"content":"        StringBuilder s \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2023-09-20"},{"lineNumber":82,"author":{"gitId":"samuelmui8"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2023-09-20"},{"lineNumber":83,"author":{"gitId":"samuelmui8"},"content":"            s.append(\"\" + (i + 1) + \". \" + list.get(i) + \"\\n\");","lastModifiedDate":"2023-09-20"},{"lineNumber":84,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":85,"author":{"gitId":"samuelmui8"},"content":"        return s.toString();","lastModifiedDate":"2023-09-20"},{"lineNumber":86,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":87,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":88,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":89,"author":{"gitId":"samuelmui8"},"content":"     * Returns all the specified type of tasks in the current list in sorted order.","lastModifiedDate":"2023-09-20"},{"lineNumber":90,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":91,"author":{"gitId":"samuelmui8"},"content":"     * @param sortedTasks List of sorted tasks.","lastModifiedDate":"2023-09-20"},{"lineNumber":92,"author":{"gitId":"samuelmui8"},"content":"     * @param taskType    Type of task of sorted tasks.","lastModifiedDate":"2023-09-20"},{"lineNumber":93,"author":{"gitId":"samuelmui8"},"content":"     * @return List of sorted tasks as a string.","lastModifiedDate":"2023-09-20"},{"lineNumber":94,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":95,"author":{"gitId":"samuelmui8"},"content":"    public static String getSortedTasks(List\u003c? extends Task\u003e sortedTasks, String taskType) {","lastModifiedDate":"2023-09-20"},{"lineNumber":96,"author":{"gitId":"samuelmui8"},"content":"        StringBuilder s \u003d new StringBuilder(\"Here are the sorted \" + taskType + \"s in your list:\\n\");","lastModifiedDate":"2023-09-20"},{"lineNumber":97,"author":{"gitId":"samuelmui8"},"content":"        for (int i \u003d 0; i \u003c sortedTasks.size(); i++) {","lastModifiedDate":"2023-09-20"},{"lineNumber":98,"author":{"gitId":"samuelmui8"},"content":"            s.append(\"\" + (i + 1) + \". \" + sortedTasks.get(i) + \"\\n\");","lastModifiedDate":"2023-09-20"},{"lineNumber":99,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-09-20"},{"lineNumber":100,"author":{"gitId":"samuelmui8"},"content":"        return s.toString();","lastModifiedDate":"2023-09-20"},{"lineNumber":101,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-09-20"},{"lineNumber":102,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":103,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"samuelmui8":104}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":" * Encapsulates a Deadline task. Deadline tasks have an end time and description.","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"public class Deadline extends Task implements Comparable\u003cDeadline\u003e {","lastModifiedDate":"2023-09-16"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"    private LocalDate endDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"     * Constructor for a deadline task.","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"     * @param endDate     The deadline for deadline task","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"     * @param description task description","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"    public Deadline(LocalDate endDate, String description) {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"     * Returns the string representation of a deadline task with its status.","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"     * @return String representation of deadline.","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"samuelmui8"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"samuelmui8"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"samuelmui8"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.endDate + \")\";","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"samuelmui8"},"content":"     * Returns the string representation of the deadline task to be stored.","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"samuelmui8"},"content":"     * @return String representing deadline task to be stored.","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"samuelmui8"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"samuelmui8"},"content":"    public String tasktoString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"samuelmui8"},"content":"        return \"D | \" + super.tasktoString() + \" | \" + this.endDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":42,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-09-16"},{"lineNumber":43,"author":{"gitId":"samuelmui8"},"content":"     * Specifies the natural ordering of deadline tasks.","lastModifiedDate":"2023-09-16"},{"lineNumber":44,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-09-16"},{"lineNumber":45,"author":{"gitId":"samuelmui8"},"content":"     * @param deadline the object to be compared.","lastModifiedDate":"2023-09-16"},{"lineNumber":46,"author":{"gitId":"samuelmui8"},"content":"     * @return A negative integer, zero, or a positive integer as this","lastModifiedDate":"2023-09-16"},{"lineNumber":47,"author":{"gitId":"samuelmui8"},"content":"     *         deadline is less than, equal to, or greater than the specified deadline.","lastModifiedDate":"2023-09-16"},{"lineNumber":48,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-09-16"},{"lineNumber":49,"author":{"gitId":"samuelmui8"},"content":"    @Override","lastModifiedDate":"2023-09-16"},{"lineNumber":50,"author":{"gitId":"samuelmui8"},"content":"    public int compareTo(Deadline deadline) {","lastModifiedDate":"2023-09-16"},{"lineNumber":51,"author":{"gitId":"samuelmui8"},"content":"        return this.endDate.compareTo(deadline.endDate);","lastModifiedDate":"2023-09-16"},{"lineNumber":52,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":53,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"samuelmui8":53}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":" * Encapsulates an Event task. Event tasks have a start time, end time and description.","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"public class Event extends Task implements Comparable\u003cEvent\u003e {","lastModifiedDate":"2023-09-16"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"    private LocalDate startDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"    private LocalDate endDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"     * Constructor for a new event task object.","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"     * @param startDate   starting time of event","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"     * @param endDate     ending time of event","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"     * @param description task description of event","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"    public Event(LocalDate startDate, LocalDate endDate, String description) {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"        this.endDate \u003d endDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"samuelmui8"},"content":"     * Returns the string representation of a event task with its status.","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"samuelmui8"},"content":"     * @return String representation of event.","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"samuelmui8"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"samuelmui8"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"samuelmui8"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + this.startDate + \" to: \" + this.endDate + \")\";","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"samuelmui8"},"content":"     * Returns the string representation of the event task to be stored.","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"samuelmui8"},"content":"     * @return String representing event task to be stored.","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"samuelmui8"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"samuelmui8"},"content":"    public String tasktoString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"samuelmui8"},"content":"        return \"E | \" + super.tasktoString() + \" | \" + this.startDate + \" | \" + this.endDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-09-16"},{"lineNumber":47,"author":{"gitId":"samuelmui8"},"content":"     * Specifies the natural ordering of event tasks.","lastModifiedDate":"2023-09-16"},{"lineNumber":48,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-09-16"},{"lineNumber":49,"author":{"gitId":"samuelmui8"},"content":"     * @param event the object to be compared.","lastModifiedDate":"2023-09-16"},{"lineNumber":50,"author":{"gitId":"samuelmui8"},"content":"     * @return A negative integer, zero, or a positive integer as this event is less than,","lastModifiedDate":"2023-09-16"},{"lineNumber":51,"author":{"gitId":"samuelmui8"},"content":"     *         equal to, or greater than the specified event.","lastModifiedDate":"2023-09-16"},{"lineNumber":52,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-09-16"},{"lineNumber":53,"author":{"gitId":"samuelmui8"},"content":"    @Override","lastModifiedDate":"2023-09-16"},{"lineNumber":54,"author":{"gitId":"samuelmui8"},"content":"    public int compareTo(Event event) {","lastModifiedDate":"2023-09-16"},{"lineNumber":55,"author":{"gitId":"samuelmui8"},"content":"        return this.startDate.compareTo(event.startDate);","lastModifiedDate":"2023-09-16"},{"lineNumber":56,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-09-16"},{"lineNumber":57,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":58,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"samuelmui8":58}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":" * Encapsulates a task. All tasks have a description and status (marked or unmarked).","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"    private String description;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"    private boolean isDone;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"     * Constructor for a task object.","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"     * @param description the task description","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"     * Returns status icon depending on whether task has been marked as done or not.","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"     * @return Status icon as a string.","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"    private String getStatusIcon() {","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"        return isDone ? \"X\" : \" \";","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"samuelmui8"},"content":"     * Marks a task as done.","lastModifiedDate":"2023-09-19"},{"lineNumber":31,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"samuelmui8"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"samuelmui8"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"samuelmui8"},"content":"     * Marks a task as not done.","lastModifiedDate":"2023-09-19"},{"lineNumber":38,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"samuelmui8"},"content":"    public void unMark() {","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"samuelmui8"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"samuelmui8"},"content":"     * Returns the string representation of a task with its status.","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"samuelmui8"},"content":"     * @return String representation of task.","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"samuelmui8"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"samuelmui8"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"samuelmui8"},"content":"        return \"[\" + getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"samuelmui8"},"content":"     * Returns the string representation of the task to be stored.","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"samuelmui8"},"content":"     * @return String representing task to be stored.","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"samuelmui8"},"content":"    public String tasktoString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"samuelmui8"},"content":"        String statusNumber \u003d isDone ? \"1\" : \"0\";","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"samuelmui8"},"content":"        return statusNumber + \" | \" + this.description;","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"samuelmui8"},"content":"     * Checks if the task description contains the search target.","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"samuelmui8"},"content":"     * @param target The search target input by user.","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"samuelmui8"},"content":"     * @return True if description contains target, false otherwise.","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"samuelmui8"},"content":"    public boolean contains(String target) {","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"samuelmui8"},"content":"        return this.description.contains(target);","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-16"},{"lineNumber":73,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"samuelmui8":73}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":" * Encapsulates a todo task. Todo tasks only have a description.","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"     * Constructor for a todo task object.","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"     * @param description task description of todo task","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"     * Returns the string representation of a todo task with its status.","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"     * @return String representation of todo.","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"samuelmui8"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"samuelmui8"},"content":"     * Returns the string representation of the todo task to be stored.","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"samuelmui8"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"samuelmui8"},"content":"     * @return String representing todo task to be stored.","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"samuelmui8"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"samuelmui8"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"samuelmui8"},"content":"    public String tasktoString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"samuelmui8"},"content":"        return \"T | \" + super.tasktoString();","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"samuelmui8":38}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"        \u003cLabel fx:id\u003d\"dialog\" maxHeight\u003d\"1.7976931348623157E308\" style\u003d\"-fx-background-color: darkslategray; -fx-padding: 10; -fx-background-radius: 10; -fx-border-radius: 10; -fx-border-color: antiquewhite; -fx-border-width: 3; -fx-font-family: sans-serif;\" text\u003d\"Label\" textFill\u003d\"WHITE\" translateX\u003d\"-10.0\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"         \u003cpadding\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"            \u003cInsets bottom\u003d\"10.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"         \u003c/padding\u003e\u003c/Label\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"samuelmui8":19}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" style\u003d\"-fx-background-color: black;\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"388.0\" style\u003d\"-fx-background-color: black;\" /\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"samuelmui8":19}},{"path":"src/test/java/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"    public void toString_correctStringReturned() {","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"        Task task \u003d new Deadline(LocalDate.of(2023, 6, 23), \"abc\");","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"        assertEquals(\"[D][ ] abc (by: 2023-06-23)\", task.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"    public void taskToString_correctStringReturned() {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"        Task task \u003d new Deadline(LocalDate.of(2023, 6, 23), \"abc\");","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"        assertEquals(\"D | 0 | abc | 2023-06-23\", task.tasktoString());","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"samuelmui8"},"content":"    public void markAsDone_markedTaskReturned() {","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"samuelmui8"},"content":"        Task task \u003d new Deadline(LocalDate.of(2023, 6, 23), \"abc\");","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"samuelmui8"},"content":"        task.markAsDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"samuelmui8"},"content":"        assertEquals(\"D | 1 | abc | 2023-06-23\", task.tasktoString());","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"samuelmui8"},"content":"    public void unMark_unMarkedTaskReturned() {","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"samuelmui8"},"content":"        Task task \u003d new Deadline(LocalDate.of(2023, 6, 23), \"abc\");","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"samuelmui8"},"content":"        task.markAsDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"samuelmui8"},"content":"        task.unMark();","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"samuelmui8"},"content":"        assertEquals(\"D | 0 | abc | 2023-06-23\", task.tasktoString());","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"samuelmui8":40}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Event;","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"public class ParserTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"    public void decideCommand_invalidInput_invalid() {","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"        assertEquals(Command.INVALID, Parser.decideCommand(\"abc 123\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"    public void decideCommand_wrongByeFormat_invalid() {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"        assertEquals(Command.INVALID, Parser.decideCommand(\"bye bye\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"    public void decideCommand_wrongListInput_invalid() {","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"samuelmui8"},"content":"        assertEquals(Command.INVALID, Parser.decideCommand(\"list 123\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"samuelmui8"},"content":"    public void decideCommand_eventInput_event() {","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"samuelmui8"},"content":"        assertEquals(Command.EVENT, Parser.decideCommand(\"event abc\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"samuelmui8"},"content":"    public void decideCommand_deadlineInput_deadline() {","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"samuelmui8"},"content":"        assertEquals(Command.DEADLINE, Parser.decideCommand(\"deadline abc\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"samuelmui8"},"content":"    public void decideCommand_todoInput_todo() {","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"samuelmui8"},"content":"        assertEquals(Command.TODO, Parser.decideCommand(\"todo abc\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"samuelmui8"},"content":"    public void decideCommand_markInput_mark() {","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"samuelmui8"},"content":"        assertEquals(Command.MARK, Parser.decideCommand(\"mark abc\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"samuelmui8"},"content":"    public void decideCommand_unmarkInput_unmark() {","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"samuelmui8"},"content":"        assertEquals(Command.UNMARK, Parser.decideCommand(\"unmark abc\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"samuelmui8"},"content":"    public void decideCommand_correctListInput_list() {","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"samuelmui8"},"content":"        assertEquals(Command.LIST, Parser.decideCommand(\"list\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"samuelmui8"},"content":"    public void decideCommand_correctByeInput_bye() {","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"samuelmui8"},"content":"        assertEquals(Command.BYE, Parser.decideCommand(\"bye\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"samuelmui8"},"content":"    public void stringToTask_incorrectTaskType_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"samuelmui8"},"content":"            assertEquals(new Todo(\"abc\").toString(),","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"samuelmui8"},"content":"                    Parser.stringToTask(\"a | 1 | abc\").toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"samuelmui8"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"samuelmui8"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"samuelmui8"},"content":"            assertEquals(\"Field 1 (Task type) is invalid\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"samuelmui8"},"content":"    public void stringToTask_incorrectIsMarked_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"samuelmui8"},"content":"            assertEquals(new Todo(\"abc\").toString(), Parser.stringToTask(\"T | 3 | abc\").toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"samuelmui8"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"samuelmui8"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"samuelmui8"},"content":"            assertEquals(\"Field 2 (isMarked) is invalid\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"samuelmui8"},"content":"    public void stringToTask_incorrectTodoFormat_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"samuelmui8"},"content":"            assertEquals(new Todo(\"abc\").toString(), Parser.stringToTask(\"T | 1\").toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"samuelmui8"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"samuelmui8"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"samuelmui8"},"content":"            assertEquals(\"Incorrect Format for todo task in file\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"samuelmui8"},"content":"    public void stringToTask_incorrectDeadlineFormat_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"samuelmui8"},"content":"            assertEquals(new Deadline(LocalDate.of(2023, 6, 23), \"abc\").toString(),","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"samuelmui8"},"content":"                    Parser.stringToTask(\"D | 0 | abc\").toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"samuelmui8"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"samuelmui8"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":103,"author":{"gitId":"samuelmui8"},"content":"            assertEquals(\"Incorrect Format for deadline task in file\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":104,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":105,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":106,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"samuelmui8"},"content":"    public void stringToTask_incorrectEventFormat_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"samuelmui8"},"content":"            assertEquals(new Event(LocalDate.of(2023, 6, 23),","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"samuelmui8"},"content":"                            LocalDate.of(2023, 6, 24),","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"samuelmui8"},"content":"                            \"abc\").toString(),","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"samuelmui8"},"content":"                    Parser.stringToTask(\"E | 0 | abc | 2023-06-23\").toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":114,"author":{"gitId":"samuelmui8"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2023-08-31"},{"lineNumber":115,"author":{"gitId":"samuelmui8"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":116,"author":{"gitId":"samuelmui8"},"content":"            assertEquals(\"Incorrect Format for event task in file\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":117,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":118,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":119,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":120,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":121,"author":{"gitId":"samuelmui8"},"content":"    public void stringToTask_correctTodoFormat_todoTask() {","lastModifiedDate":"2023-08-31"},{"lineNumber":122,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":123,"author":{"gitId":"samuelmui8"},"content":"            assertEquals(new Todo(\"abc\").toString(),","lastModifiedDate":"2023-08-31"},{"lineNumber":124,"author":{"gitId":"samuelmui8"},"content":"                    Parser.stringToTask(\"T | 0 | abc\").toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":125,"author":{"gitId":"samuelmui8"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":126,"author":{"gitId":"samuelmui8"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":127,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":128,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":129,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":130,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":131,"author":{"gitId":"samuelmui8"},"content":"    public void stringToTask_correctDeadlineFormat_deadlineTask() {","lastModifiedDate":"2023-08-31"},{"lineNumber":132,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":133,"author":{"gitId":"samuelmui8"},"content":"            assertEquals(new Deadline(LocalDate.of(2023, 6, 23), \"abc\").toString(),","lastModifiedDate":"2023-08-31"},{"lineNumber":134,"author":{"gitId":"samuelmui8"},"content":"                    Parser.stringToTask(\"D | 0 | abc | 2023-06-23\").toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":135,"author":{"gitId":"samuelmui8"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":136,"author":{"gitId":"samuelmui8"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":137,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":138,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":139,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":140,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":141,"author":{"gitId":"samuelmui8"},"content":"    public void stringToTask_correctEventFormat_eventTask() {","lastModifiedDate":"2023-08-31"},{"lineNumber":142,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":143,"author":{"gitId":"samuelmui8"},"content":"            assertEquals(new Event(LocalDate.of(2023, 6, 23),","lastModifiedDate":"2023-08-31"},{"lineNumber":144,"author":{"gitId":"samuelmui8"},"content":"                            LocalDate.of(2023, 6, 24), \"abc\").toString(),","lastModifiedDate":"2023-08-31"},{"lineNumber":145,"author":{"gitId":"samuelmui8"},"content":"                    Parser.stringToTask(\"E | 0 | abc | 2023-06-23 | 2023-06-24\").toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":146,"author":{"gitId":"samuelmui8"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":147,"author":{"gitId":"samuelmui8"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":148,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":149,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":150,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"samuelmui8":150}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"samuelmui8"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"samuelmui8"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"samuelmui8"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"samuelmui8"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"samuelmui8"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"samuelmui8"},"content":"import java.util.List;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"samuelmui8"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"samuelmui8"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Event;","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"samuelmui8"},"content":"import duke.tasks.Todo;","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"samuelmui8"},"content":"public class TaskListTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"samuelmui8"},"content":"    private List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"samuelmui8"},"content":"    private Task task1 \u003d new Todo(\"abc\");","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"samuelmui8"},"content":"    private Task task2 \u003d new Event(LocalDate.of(2023, 8, 16),","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"samuelmui8"},"content":"            LocalDate.of(2023, 8, 27),","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"samuelmui8"},"content":"            \"read book\");","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"samuelmui8"},"content":"    private Task task3 \u003d new Deadline(LocalDate.of(2023, 5, 23), \"read book\");","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"samuelmui8"},"content":"    private TaskList taskList \u003d new TaskList(list);","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"samuelmui8"},"content":"    @BeforeEach","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"samuelmui8"},"content":"    public void init() {","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"samuelmui8"},"content":"        taskList.addTask(task1);","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"samuelmui8"},"content":"        taskList.addTask(task2);","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"samuelmui8"},"content":"        taskList.addTask(task3);","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"samuelmui8"},"content":"    public void addDeadline_wrongInputFormat_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"samuelmui8"},"content":"            taskList.addDeadline(\"deadline read book 2023-04-16\");","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"samuelmui8"},"content":"            Task task4 \u003d new Deadline(LocalDate.of(2023, 4, 16), \"read book\");","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"samuelmui8"},"content":"            assertEquals(task4.toString(), list.get(3).toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"samuelmui8"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"samuelmui8"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"samuelmui8"},"content":"            assertEquals(\"Input for deadline doesn\u0027t match the expected format.\"","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"samuelmui8"},"content":"                    + \"\\ndeadline {description} /by {endDate in YYYY-MM-DD}\", e.getMessage());","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"samuelmui8"},"content":"    public void addDeadline_wrongDateFormat_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"samuelmui8"},"content":"            taskList.addDeadline(\"deadline read book /by 2023-16-04\");","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"samuelmui8"},"content":"            Task task4 \u003d new Deadline(LocalDate.of(2023, 4, 16), \"read book\");","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"samuelmui8"},"content":"            assertEquals(task4.toString(), list.get(3).toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"samuelmui8"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"samuelmui8"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"samuelmui8"},"content":"            assertEquals(\"Date input in wrong format. Please input as YYYY-MM-DD\", e.getMessage());","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"samuelmui8"},"content":"    public void addDeadline_correctInput_taskAdded() {","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"samuelmui8"},"content":"            taskList.addDeadline(\"deadline read book /by 2023-04-16\");","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"samuelmui8"},"content":"            Task task4 \u003d new Deadline(LocalDate.of(2023, 4, 16), \"read book\");","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"samuelmui8"},"content":"            assertEquals(task4.toString(), list.get(3).toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"samuelmui8"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"samuelmui8"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"samuelmui8"},"content":"    public void markTask_invalidNumber_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"samuelmui8"},"content":"            Task task4 \u003d new Deadline(LocalDate.of(2023, 5, 23), \"read book\");","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"samuelmui8"},"content":"            task4.markAsDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"samuelmui8"},"content":"            taskList.markTask(\"mark 4\");","lastModifiedDate":"2023-09-20"},{"lineNumber":76,"author":{"gitId":"samuelmui8"},"content":"            assertEquals(task4.toString(), list.get(2).toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"samuelmui8"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"samuelmui8"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"samuelmui8"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"samuelmui8"},"content":"            assertEquals(\"Invalid task index.\", e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":81,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"samuelmui8"},"content":"    public void markTask_noNumber_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"samuelmui8"},"content":"            Task task4 \u003d new Deadline(LocalDate.of(2023, 5, 23), \"read book\");","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"samuelmui8"},"content":"            task4.markAsDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"samuelmui8"},"content":"            taskList.markTask(\"mark read book\");","lastModifiedDate":"2023-09-20"},{"lineNumber":90,"author":{"gitId":"samuelmui8"},"content":"            assertEquals(task4.toString(), list.get(2).toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"samuelmui8"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"samuelmui8"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"samuelmui8"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"samuelmui8"},"content":"            assertEquals(\"Please key in a task index.\", e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":95,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"samuelmui8"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"samuelmui8"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"samuelmui8"},"content":"    public void markTask_validNumber_taskMarked() {","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"samuelmui8"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"samuelmui8"},"content":"            Task task4 \u003d new Deadline(LocalDate.of(2023, 5, 23), \"read book\");","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"samuelmui8"},"content":"            task4.markAsDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":103,"author":{"gitId":"samuelmui8"},"content":"            taskList.markTask(\"mark 3\");","lastModifiedDate":"2023-09-20"},{"lineNumber":104,"author":{"gitId":"samuelmui8"},"content":"            assertEquals(task4.toString(), list.get(2).toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":105,"author":{"gitId":"samuelmui8"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":106,"author":{"gitId":"samuelmui8"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"samuelmui8"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"samuelmui8"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"samuelmui8"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"samuelmui8":109}}]
