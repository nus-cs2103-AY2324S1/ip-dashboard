[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"LuoZYi"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2023-09-20"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"LuoZYi"},"content":"    archiveFileName \u003d \u0027duke.jar\u0027","lastModifiedDate":"2023-09-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":39,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"LuoZYi":2,"-":41}},{"path":"duke/CustomException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LuoZYi"},"content":"package duke;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":3,"author":{"gitId":"LuoZYi"},"content":"/**","lastModifiedDate":"2023-09-20"},{"lineNumber":4,"author":{"gitId":"LuoZYi"},"content":" * A custom exception class that extends the base Exception class. It can be used to represent and handle","lastModifiedDate":"2023-09-20"},{"lineNumber":5,"author":{"gitId":"LuoZYi"},"content":" * custom exceptions in the Duke chatbot application.","lastModifiedDate":"2023-09-20"},{"lineNumber":6,"author":{"gitId":"LuoZYi"},"content":" */","lastModifiedDate":"2023-09-20"},{"lineNumber":7,"author":{"gitId":"LuoZYi"},"content":"public class CustomException extends Exception {","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"LuoZYi"},"content":"     * Constructs a new CustomException with a default error message.","lastModifiedDate":"2023-09-20"},{"lineNumber":11,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":12,"author":{"gitId":"LuoZYi"},"content":"    public CustomException() {","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"LuoZYi"},"content":"        super(\"Default custom exception message\");","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":17,"author":{"gitId":"LuoZYi"},"content":"     * Constructs a new CustomException with a specified error message.","lastModifiedDate":"2023-09-20"},{"lineNumber":18,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":19,"author":{"gitId":"LuoZYi"},"content":"     * @param message The custom error message associated with this exception.","lastModifiedDate":"2023-09-20"},{"lineNumber":20,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":21,"author":{"gitId":"LuoZYi"},"content":"    public CustomException(String message) {","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"LuoZYi"},"content":"        super(message);","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"LuoZYi"},"content":"}","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-20"}],"authorContributionMap":{"LuoZYi":25}},{"path":"duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LuoZYi"},"content":"package duke;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":3,"author":{"gitId":"LuoZYi"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-20"},{"lineNumber":4,"author":{"gitId":"LuoZYi"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-10"},{"lineNumber":5,"author":{"gitId":"LuoZYi"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"LuoZYi"},"content":"import java.util.Locale;","lastModifiedDate":"2023-09-20"},{"lineNumber":7,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":8,"author":{"gitId":"LuoZYi"},"content":"/**","lastModifiedDate":"2023-09-20"},{"lineNumber":9,"author":{"gitId":"LuoZYi"},"content":" * Represents a task with a specific deadline, which can be either a date and time or just a date.","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"LuoZYi"},"content":" * It extends the Task class and adds a \u0027by\u0027 field to store the deadline.","lastModifiedDate":"2023-09-20"},{"lineNumber":11,"author":{"gitId":"LuoZYi"},"content":" */","lastModifiedDate":"2023-09-20"},{"lineNumber":12,"author":{"gitId":"LuoZYi"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"LuoZYi"},"content":"    protected LocalDate by;","lastModifiedDate":"2023-09-10"},{"lineNumber":15,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":17,"author":{"gitId":"LuoZYi"},"content":"     * Constructs a Deadline task with a description and a deadline in the form of a LocalDateTime.","lastModifiedDate":"2023-09-20"},{"lineNumber":18,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":19,"author":{"gitId":"LuoZYi"},"content":"     * @param description The description of the Deadline task.","lastModifiedDate":"2023-09-20"},{"lineNumber":20,"author":{"gitId":"LuoZYi"},"content":"     * @param dateTime    The LocalDateTime representing the deadline date and time.","lastModifiedDate":"2023-09-20"},{"lineNumber":21,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":22,"author":{"gitId":"LuoZYi"},"content":"    public Deadline(String description, LocalDateTime dateTime) {","lastModifiedDate":"2023-09-10"},{"lineNumber":23,"author":{"gitId":"LuoZYi"},"content":"        super(description, dateTime);","lastModifiedDate":"2023-09-10"},{"lineNumber":24,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":27,"author":{"gitId":"LuoZYi"},"content":"     * Constructs a Deadline task with a description and a deadline in the form of a LocalDate.","lastModifiedDate":"2023-09-20"},{"lineNumber":28,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":29,"author":{"gitId":"LuoZYi"},"content":"     * @param description The description of the Deadline task.","lastModifiedDate":"2023-09-20"},{"lineNumber":30,"author":{"gitId":"LuoZYi"},"content":"     * @param date        The LocalDate representing the deadline date.","lastModifiedDate":"2023-09-20"},{"lineNumber":31,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":32,"author":{"gitId":"LuoZYi"},"content":"    public Deadline(String description, LocalDate date) {","lastModifiedDate":"2023-09-10"},{"lineNumber":33,"author":{"gitId":"LuoZYi"},"content":"        super(description);","lastModifiedDate":"2023-09-10"},{"lineNumber":34,"author":{"gitId":"LuoZYi"},"content":"        this.by \u003d date;","lastModifiedDate":"2023-09-10"},{"lineNumber":35,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":36,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":37,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":38,"author":{"gitId":"LuoZYi"},"content":"     * Returns a string representation of the Deadline task, including its status icon, description, and deadline.","lastModifiedDate":"2023-09-20"},{"lineNumber":39,"author":{"gitId":"LuoZYi"},"content":"     * The date and time format used is \"MMM dd yyyy HH:mm\" (e.g., \"Jan 01 2023 14:30\") for LocalDateTime","lastModifiedDate":"2023-09-20"},{"lineNumber":40,"author":{"gitId":"LuoZYi"},"content":"     * and \"MMM dd yyyy\" (e.g., \"Jan 01 2023\") for LocalDate, with the English locale.","lastModifiedDate":"2023-09-20"},{"lineNumber":41,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":42,"author":{"gitId":"LuoZYi"},"content":"     * @return A formatted string representing the Deadline task.","lastModifiedDate":"2023-09-20"},{"lineNumber":43,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":44,"author":{"gitId":"LuoZYi"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":45,"author":{"gitId":"LuoZYi"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":46,"author":{"gitId":"LuoZYi"},"content":"        String status \u003d \"[\" + getStatusIcon() + \"] \";","lastModifiedDate":"2023-08-24"},{"lineNumber":47,"author":{"gitId":"LuoZYi"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\", Locale.ENGLISH);","lastModifiedDate":"2023-09-20"},{"lineNumber":48,"author":{"gitId":"LuoZYi"},"content":"        return \" \" + \"[D]\" + status + description + \" (by: \" + dateTime.format(formatter) + \")\";","lastModifiedDate":"2023-09-20"},{"lineNumber":49,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":50,"author":{"gitId":"LuoZYi"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"LuoZYi":50}},{"path":"duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LuoZYi"},"content":"package duke;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":3,"author":{"gitId":"LuoZYi"},"content":"/**","lastModifiedDate":"2023-09-20"},{"lineNumber":4,"author":{"gitId":"LuoZYi"},"content":" * The Duke class represents a command-line chatbot that allows users to manage their tasks. Users can interact","lastModifiedDate":"2023-09-20"},{"lineNumber":5,"author":{"gitId":"LuoZYi"},"content":" * with Duke by providing various commands to add, list, mark, unmark, delete, and save tasks. Duke also stores","lastModifiedDate":"2023-09-20"},{"lineNumber":6,"author":{"gitId":"LuoZYi"},"content":" * tasks in a file for persistence across sessions.","lastModifiedDate":"2023-09-20"},{"lineNumber":7,"author":{"gitId":"LuoZYi"},"content":" *","lastModifiedDate":"2023-09-20"},{"lineNumber":8,"author":{"gitId":"LuoZYi"},"content":" * Duke supports the following commands:","lastModifiedDate":"2023-09-20"},{"lineNumber":9,"author":{"gitId":"LuoZYi"},"content":" * - \"bye\": Exits the chatbot and saves the task list to a file.","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"LuoZYi"},"content":" * - \"list\": Lists all tasks in the current task list.","lastModifiedDate":"2023-09-20"},{"lineNumber":11,"author":{"gitId":"LuoZYi"},"content":" * - \"mark \u003ctask_id\u003e\": Marks a task as done by its ID.","lastModifiedDate":"2023-09-20"},{"lineNumber":12,"author":{"gitId":"LuoZYi"},"content":" * - \"unmark \u003ctask_id\u003e\": Unmarks a previously marked task.","lastModifiedDate":"2023-09-20"},{"lineNumber":13,"author":{"gitId":"LuoZYi"},"content":" * - \"todo \u003cdescription\u003e\": Adds a to-do task with a description.","lastModifiedDate":"2023-09-20"},{"lineNumber":14,"author":{"gitId":"LuoZYi"},"content":" * - \"event \u003cdescription\u003e /from \u003cdatetime\u003e /to \u003cdatetime\u003e\": Adds an event task with a description, start date, and end date.","lastModifiedDate":"2023-09-20"},{"lineNumber":15,"author":{"gitId":"LuoZYi"},"content":" * - \"deadline \u003cdescription\u003e /by \u003cdatetime\u003e\": Adds a deadline task with a description and due date.","lastModifiedDate":"2023-09-20"},{"lineNumber":16,"author":{"gitId":"LuoZYi"},"content":" * - \"delete \u003ctask_id\u003e\": Deletes a task by its ID.","lastModifiedDate":"2023-09-20"},{"lineNumber":17,"author":{"gitId":"LuoZYi"},"content":" */","lastModifiedDate":"2023-09-20"},{"lineNumber":18,"author":{"gitId":"LuoZYi"},"content":"public class Duke {","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"LuoZYi"},"content":"    private final String filePath \u003d \"./data/duke.txt\";","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"LuoZYi"},"content":"    private Storage storage;","lastModifiedDate":"2023-09-14"},{"lineNumber":21,"author":{"gitId":"LuoZYi"},"content":"    private Ui ui;","lastModifiedDate":"2023-09-14"},{"lineNumber":22,"author":{"gitId":"LuoZYi"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":23,"author":{"gitId":"LuoZYi"},"content":"    private Parser parser;","lastModifiedDate":"2023-09-14"},{"lineNumber":24,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":26,"author":{"gitId":"LuoZYi"},"content":"     * Constructs a new Duke instance.","lastModifiedDate":"2023-09-20"},{"lineNumber":27,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":28,"author":{"gitId":"LuoZYi"},"content":"    public Duke() {","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"LuoZYi"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-09-14"},{"lineNumber":30,"author":{"gitId":"LuoZYi"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-09-14"},{"lineNumber":31,"author":{"gitId":"LuoZYi"},"content":"        parser \u003d new Parser();","lastModifiedDate":"2023-09-14"},{"lineNumber":32,"author":{"gitId":"LuoZYi"},"content":"        try {","lastModifiedDate":"2023-09-14"},{"lineNumber":33,"author":{"gitId":"LuoZYi"},"content":"            taskList \u003d new TaskList(storage.load());","lastModifiedDate":"2023-09-14"},{"lineNumber":34,"author":{"gitId":"LuoZYi"},"content":"        } catch (CustomException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":35,"author":{"gitId":"LuoZYi"},"content":"            System.out.println(\"Error loading tasks: \" + e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":36,"author":{"gitId":"LuoZYi"},"content":"            taskList \u003d new TaskList();","lastModifiedDate":"2023-09-14"},{"lineNumber":37,"author":{"gitId":"LuoZYi"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":39,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":40,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":41,"author":{"gitId":"LuoZYi"},"content":"     * Runs the Duke chatbot.","lastModifiedDate":"2023-09-20"},{"lineNumber":42,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":43,"author":{"gitId":"LuoZYi"},"content":"    public void run() {","lastModifiedDate":"2023-09-14"},{"lineNumber":44,"author":{"gitId":"LuoZYi"},"content":"        ui.greeting();","lastModifiedDate":"2023-09-14"},{"lineNumber":45,"author":{"gitId":"LuoZYi"},"content":"        try {","lastModifiedDate":"2023-09-14"},{"lineNumber":46,"author":{"gitId":"LuoZYi"},"content":"            while (true) {","lastModifiedDate":"2023-08-24"},{"lineNumber":47,"author":{"gitId":"LuoZYi"},"content":"                String response \u003d ui.getUserInput();","lastModifiedDate":"2023-09-14"},{"lineNumber":48,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":49,"author":{"gitId":"LuoZYi"},"content":"                // Use the parseCommandType method to determine the command type","lastModifiedDate":"2023-09-14"},{"lineNumber":50,"author":{"gitId":"LuoZYi"},"content":"                Parser.CommandType commandType \u003d parser.parseCommandType(response);","lastModifiedDate":"2023-09-14"},{"lineNumber":51,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":52,"author":{"gitId":"LuoZYi"},"content":"                switch (commandType) {","lastModifiedDate":"2023-09-14"},{"lineNumber":53,"author":{"gitId":"LuoZYi"},"content":"                    case BYE:","lastModifiedDate":"2023-09-14"},{"lineNumber":54,"author":{"gitId":"LuoZYi"},"content":"                        ui.exit();","lastModifiedDate":"2023-09-14"},{"lineNumber":55,"author":{"gitId":"LuoZYi"},"content":"                        ui.closeScanner();","lastModifiedDate":"2023-09-14"},{"lineNumber":56,"author":{"gitId":"LuoZYi"},"content":"                        try {","lastModifiedDate":"2023-09-14"},{"lineNumber":57,"author":{"gitId":"LuoZYi"},"content":"                            storage.save(taskList.getTaskArrayList());","lastModifiedDate":"2023-09-14"},{"lineNumber":58,"author":{"gitId":"LuoZYi"},"content":"                        } catch (CustomException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":59,"author":{"gitId":"LuoZYi"},"content":"                            System.out.println(\"Error saving tasks: \" + e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":60,"author":{"gitId":"LuoZYi"},"content":"                        }","lastModifiedDate":"2023-09-14"},{"lineNumber":61,"author":{"gitId":"LuoZYi"},"content":"                        return;","lastModifiedDate":"2023-09-14"},{"lineNumber":62,"author":{"gitId":"LuoZYi"},"content":"                    case LIST:","lastModifiedDate":"2023-09-14"},{"lineNumber":63,"author":{"gitId":"LuoZYi"},"content":"                        ui.showMessage(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-09-14"},{"lineNumber":64,"author":{"gitId":"LuoZYi"},"content":"                        taskList.listTasks();","lastModifiedDate":"2023-09-14"},{"lineNumber":65,"author":{"gitId":"LuoZYi"},"content":"                        continue;","lastModifiedDate":"2023-09-14"},{"lineNumber":66,"author":{"gitId":"LuoZYi"},"content":"                    case MARK:","lastModifiedDate":"2023-09-14"},{"lineNumber":67,"author":{"gitId":"LuoZYi"},"content":"                        try {","lastModifiedDate":"2023-09-21"},{"lineNumber":68,"author":{"gitId":"LuoZYi"},"content":"                            int markId \u003d Integer.parseInt(response.substring(5).trim());","lastModifiedDate":"2023-09-21"},{"lineNumber":69,"author":{"gitId":"LuoZYi"},"content":"                            String markMessage \u003d taskList.markTaskAsDone(markId);","lastModifiedDate":"2023-09-14"},{"lineNumber":70,"author":{"gitId":"LuoZYi"},"content":"                            ui.showMessage(markMessage);","lastModifiedDate":"2023-09-14"},{"lineNumber":71,"author":{"gitId":"LuoZYi"},"content":"                        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-21"},{"lineNumber":72,"author":{"gitId":"LuoZYi"},"content":"                            ui.showMessage(\"Invalid format. Key in an integer within range\");","lastModifiedDate":"2023-09-21"},{"lineNumber":73,"author":{"gitId":"LuoZYi"},"content":"                        }","lastModifiedDate":"2023-09-21"},{"lineNumber":74,"author":{"gitId":"LuoZYi"},"content":"                        continue;","lastModifiedDate":"2023-09-14"},{"lineNumber":75,"author":{"gitId":"LuoZYi"},"content":"                    case UNMARK:","lastModifiedDate":"2023-09-14"},{"lineNumber":76,"author":{"gitId":"LuoZYi"},"content":"                        try {","lastModifiedDate":"2023-09-21"},{"lineNumber":77,"author":{"gitId":"LuoZYi"},"content":"                            int unmarkId \u003d Integer.parseInt(response.substring(7).trim());","lastModifiedDate":"2023-09-21"},{"lineNumber":78,"author":{"gitId":"LuoZYi"},"content":"                            String unmarkMessage \u003d taskList.unmarkTask(unmarkId);","lastModifiedDate":"2023-09-14"},{"lineNumber":79,"author":{"gitId":"LuoZYi"},"content":"                            ui.showMessage(unmarkMessage);","lastModifiedDate":"2023-09-14"},{"lineNumber":80,"author":{"gitId":"LuoZYi"},"content":"                        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-21"},{"lineNumber":81,"author":{"gitId":"LuoZYi"},"content":"                            ui.showMessage(\"Invalid format. Key in an integer within range\");","lastModifiedDate":"2023-09-21"},{"lineNumber":82,"author":{"gitId":"LuoZYi"},"content":"                        }","lastModifiedDate":"2023-09-21"},{"lineNumber":83,"author":{"gitId":"LuoZYi"},"content":"                        continue;","lastModifiedDate":"2023-09-21"},{"lineNumber":84,"author":{"gitId":"LuoZYi"},"content":"                    case FIND:","lastModifiedDate":"2023-09-21"},{"lineNumber":85,"author":{"gitId":"LuoZYi"},"content":"                        ui.showMessage(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-09-21"},{"lineNumber":86,"author":{"gitId":"LuoZYi"},"content":"                        taskList.findTasks(response.substring(5));","lastModifiedDate":"2023-09-21"},{"lineNumber":87,"author":{"gitId":"LuoZYi"},"content":"                        continue;","lastModifiedDate":"2023-09-14"},{"lineNumber":88,"author":{"gitId":"LuoZYi"},"content":"                    case TODO:","lastModifiedDate":"2023-09-14"},{"lineNumber":89,"author":{"gitId":"LuoZYi"},"content":"                        String todoDescription \u003d response.substring(5);","lastModifiedDate":"2023-09-14"},{"lineNumber":90,"author":{"gitId":"LuoZYi"},"content":"                        Task toDo \u003d parser.addTodoTask(todoDescription);","lastModifiedDate":"2023-09-14"},{"lineNumber":91,"author":{"gitId":"LuoZYi"},"content":"                        String todoMessage \u003d taskList.addTask(toDo);","lastModifiedDate":"2023-09-14"},{"lineNumber":92,"author":{"gitId":"LuoZYi"},"content":"                        ui.showMessage(todoMessage);","lastModifiedDate":"2023-09-14"},{"lineNumber":93,"author":{"gitId":"LuoZYi"},"content":"                        continue;","lastModifiedDate":"2023-09-14"},{"lineNumber":94,"author":{"gitId":"LuoZYi"},"content":"                    case EVENT:","lastModifiedDate":"2023-09-14"},{"lineNumber":95,"author":{"gitId":"LuoZYi"},"content":"                        String[] eventParts \u003d response.split(\"/from|/to\");","lastModifiedDate":"2023-09-14"},{"lineNumber":96,"author":{"gitId":"LuoZYi"},"content":"                        if (eventParts.length \u003d\u003d 3) {","lastModifiedDate":"2023-09-14"},{"lineNumber":97,"author":{"gitId":"LuoZYi"},"content":"                            String eventDescription \u003d eventParts[0].substring(6).trim();","lastModifiedDate":"2023-09-14"},{"lineNumber":98,"author":{"gitId":"LuoZYi"},"content":"                            String from \u003d eventParts[1].trim();","lastModifiedDate":"2023-09-14"},{"lineNumber":99,"author":{"gitId":"LuoZYi"},"content":"                            String to \u003d eventParts[2].trim();","lastModifiedDate":"2023-09-14"},{"lineNumber":100,"author":{"gitId":"LuoZYi"},"content":"                            Task event \u003d parser.addEventTask(eventDescription, from, to);","lastModifiedDate":"2023-09-14"},{"lineNumber":101,"author":{"gitId":"LuoZYi"},"content":"                            String eventMessage \u003d taskList.addTask(event);","lastModifiedDate":"2023-09-14"},{"lineNumber":102,"author":{"gitId":"LuoZYi"},"content":"                            ui.showMessage(eventMessage);","lastModifiedDate":"2023-09-14"},{"lineNumber":103,"author":{"gitId":"LuoZYi"},"content":"                        } else {","lastModifiedDate":"2023-09-10"},{"lineNumber":104,"author":{"gitId":"LuoZYi"},"content":"                            ui.showMessage(\"Invalid event format. Use \u0027event \u003cdescription\u003e /from \u003cdatetime\u003e /to \u003cdatetime\u003e\u0027.\");","lastModifiedDate":"2023-09-14"},{"lineNumber":105,"author":{"gitId":"LuoZYi"},"content":"                        }","lastModifiedDate":"2023-09-14"},{"lineNumber":106,"author":{"gitId":"LuoZYi"},"content":"                        continue;","lastModifiedDate":"2023-09-14"},{"lineNumber":107,"author":{"gitId":"LuoZYi"},"content":"                    case DEADLINE:","lastModifiedDate":"2023-09-14"},{"lineNumber":108,"author":{"gitId":"LuoZYi"},"content":"                        String[] deadlineParts \u003d response.split(\"/by\", 2);","lastModifiedDate":"2023-09-14"},{"lineNumber":109,"author":{"gitId":"LuoZYi"},"content":"                        if (deadlineParts.length \u003d\u003d 2) {","lastModifiedDate":"2023-09-14"},{"lineNumber":110,"author":{"gitId":"LuoZYi"},"content":"                            String deadlineDescription \u003d deadlineParts[0].substring(9).trim();","lastModifiedDate":"2023-09-14"},{"lineNumber":111,"author":{"gitId":"LuoZYi"},"content":"                            String dateTimeString \u003d deadlineParts[1].trim();","lastModifiedDate":"2023-09-14"},{"lineNumber":112,"author":{"gitId":"LuoZYi"},"content":"                            Task deadline \u003d parser.addDeadlineTask(deadlineDescription, dateTimeString);","lastModifiedDate":"2023-09-14"},{"lineNumber":113,"author":{"gitId":"LuoZYi"},"content":"                            String deadlineMessage \u003d taskList.addTask(deadline);","lastModifiedDate":"2023-09-14"},{"lineNumber":114,"author":{"gitId":"LuoZYi"},"content":"                            ui.showMessage(deadlineMessage);","lastModifiedDate":"2023-09-14"},{"lineNumber":115,"author":{"gitId":"LuoZYi"},"content":"                        } else {","lastModifiedDate":"2023-09-10"},{"lineNumber":116,"author":{"gitId":"LuoZYi"},"content":"                            String message \u003d \"Invalid deadline format. Use \u0027deadline \u003cdescription\u003e /by \u003cdatetime\u003e\u0027.\";","lastModifiedDate":"2023-09-14"},{"lineNumber":117,"author":{"gitId":"LuoZYi"},"content":"                            ui.showMessage(message);","lastModifiedDate":"2023-09-14"},{"lineNumber":118,"author":{"gitId":"LuoZYi"},"content":"                        }","lastModifiedDate":"2023-09-10"},{"lineNumber":119,"author":{"gitId":"LuoZYi"},"content":"                        continue;","lastModifiedDate":"2023-09-14"},{"lineNumber":120,"author":{"gitId":"LuoZYi"},"content":"                    case DELETE:","lastModifiedDate":"2023-09-14"},{"lineNumber":121,"author":{"gitId":"LuoZYi"},"content":"                        int deleteId \u003d Integer.parseInt(response.substring(7));","lastModifiedDate":"2023-09-14"},{"lineNumber":122,"author":{"gitId":"LuoZYi"},"content":"                        String deleteMessage \u003d taskList.deleteTask(deleteId);","lastModifiedDate":"2023-09-14"},{"lineNumber":123,"author":{"gitId":"LuoZYi"},"content":"                        ui.showMessage(deleteMessage);","lastModifiedDate":"2023-09-14"},{"lineNumber":124,"author":{"gitId":"LuoZYi"},"content":"                        continue;","lastModifiedDate":"2023-09-14"},{"lineNumber":125,"author":{"gitId":"LuoZYi"},"content":"                    case INVALID:","lastModifiedDate":"2023-09-14"},{"lineNumber":126,"author":{"gitId":"LuoZYi"},"content":"                        ui.showMessage(\"I\u0027m sorry, I don\u0027t understand that command.\");","lastModifiedDate":"2023-09-14"},{"lineNumber":127,"author":{"gitId":"LuoZYi"},"content":"                }","lastModifiedDate":"2023-09-10"},{"lineNumber":128,"author":{"gitId":"LuoZYi"},"content":"                try {","lastModifiedDate":"2023-09-10"},{"lineNumber":129,"author":{"gitId":"LuoZYi"},"content":"                    storage.save(taskList.getTaskArrayList());","lastModifiedDate":"2023-09-14"},{"lineNumber":130,"author":{"gitId":"LuoZYi"},"content":"                } catch (CustomException e) {","lastModifiedDate":"2023-09-20"},{"lineNumber":131,"author":{"gitId":"LuoZYi"},"content":"                    System.out.println(\"Error saving tasks: \" + e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":132,"author":{"gitId":"LuoZYi"},"content":"                }","lastModifiedDate":"2023-09-10"},{"lineNumber":133,"author":{"gitId":"LuoZYi"},"content":"            }","lastModifiedDate":"2023-09-10"},{"lineNumber":134,"author":{"gitId":"LuoZYi"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-10"},{"lineNumber":135,"author":{"gitId":"LuoZYi"},"content":"            try {","lastModifiedDate":"2023-09-10"},{"lineNumber":136,"author":{"gitId":"LuoZYi"},"content":"                storage.save(taskList.getTaskArrayList());","lastModifiedDate":"2023-09-14"},{"lineNumber":137,"author":{"gitId":"LuoZYi"},"content":"            } catch (CustomException customException) {","lastModifiedDate":"2023-09-20"},{"lineNumber":138,"author":{"gitId":"LuoZYi"},"content":"                System.out.println(\"Error saving tasks: \" + customException.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":139,"author":{"gitId":"LuoZYi"},"content":"            }","lastModifiedDate":"2023-09-10"},{"lineNumber":140,"author":{"gitId":"LuoZYi"},"content":"        }","lastModifiedDate":"2023-09-10"},{"lineNumber":141,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":142,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":143,"author":{"gitId":"LuoZYi"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-24"},{"lineNumber":144,"author":{"gitId":"LuoZYi"},"content":"        Duke myBot \u003d new Duke();","lastModifiedDate":"2023-08-24"},{"lineNumber":145,"author":{"gitId":"LuoZYi"},"content":"        myBot.run();","lastModifiedDate":"2023-09-14"},{"lineNumber":146,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":147,"author":{"gitId":"LuoZYi"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"LuoZYi":147}},{"path":"duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LuoZYi"},"content":"package duke;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":3,"author":{"gitId":"LuoZYi"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"LuoZYi"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-10"},{"lineNumber":5,"author":{"gitId":"LuoZYi"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"LuoZYi"},"content":"import java.util.Locale;","lastModifiedDate":"2023-09-20"},{"lineNumber":7,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":8,"author":{"gitId":"LuoZYi"},"content":"/**","lastModifiedDate":"2023-09-20"},{"lineNumber":9,"author":{"gitId":"LuoZYi"},"content":" * Represents a task that has a start date and time and an end date and time, or just start and end dates.","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"LuoZYi"},"content":" * It extends the Task class and adds fields to store the event\u0027s timing information.","lastModifiedDate":"2023-09-20"},{"lineNumber":11,"author":{"gitId":"LuoZYi"},"content":" */","lastModifiedDate":"2023-09-20"},{"lineNumber":12,"author":{"gitId":"LuoZYi"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"LuoZYi"},"content":"    protected LocalDateTime fromDateTime;","lastModifiedDate":"2023-09-14"},{"lineNumber":15,"author":{"gitId":"LuoZYi"},"content":"    protected LocalDate fromDate;","lastModifiedDate":"2023-09-14"},{"lineNumber":16,"author":{"gitId":"LuoZYi"},"content":"    protected LocalDateTime toDateTime;","lastModifiedDate":"2023-09-14"},{"lineNumber":17,"author":{"gitId":"LuoZYi"},"content":"    protected LocalDate toDate;","lastModifiedDate":"2023-09-14"},{"lineNumber":18,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":19,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":20,"author":{"gitId":"LuoZYi"},"content":"     * Constructs an Event task with a description and specific start and end date and time.","lastModifiedDate":"2023-09-20"},{"lineNumber":21,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":22,"author":{"gitId":"LuoZYi"},"content":"     * @param description  The description of the Event task.","lastModifiedDate":"2023-09-20"},{"lineNumber":23,"author":{"gitId":"LuoZYi"},"content":"     * @param fromDateTime The LocalDateTime representing the event\u0027s start date and time.","lastModifiedDate":"2023-09-20"},{"lineNumber":24,"author":{"gitId":"LuoZYi"},"content":"     * @param toDateTime   The LocalDateTime representing the event\u0027s end date and time.","lastModifiedDate":"2023-09-20"},{"lineNumber":25,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":26,"author":{"gitId":"LuoZYi"},"content":"    public Event(String description, LocalDateTime fromDateTime, LocalDateTime toDateTime) {","lastModifiedDate":"2023-09-10"},{"lineNumber":27,"author":{"gitId":"LuoZYi"},"content":"        super(description);","lastModifiedDate":"2023-09-14"},{"lineNumber":28,"author":{"gitId":"LuoZYi"},"content":"        this.fromDateTime \u003d fromDateTime;","lastModifiedDate":"2023-09-14"},{"lineNumber":29,"author":{"gitId":"LuoZYi"},"content":"        this.toDateTime \u003d toDateTime;","lastModifiedDate":"2023-09-14"},{"lineNumber":30,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":31,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":32,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":33,"author":{"gitId":"LuoZYi"},"content":"     * Constructs an Event task with a description and specific start and end dates.","lastModifiedDate":"2023-09-20"},{"lineNumber":34,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":35,"author":{"gitId":"LuoZYi"},"content":"     * @param description The description of the Event task.","lastModifiedDate":"2023-09-20"},{"lineNumber":36,"author":{"gitId":"LuoZYi"},"content":"     * @param fromDate    The LocalDate representing the event\u0027s start date.","lastModifiedDate":"2023-09-20"},{"lineNumber":37,"author":{"gitId":"LuoZYi"},"content":"     * @param toDate      The LocalDate representing the event\u0027s end date.","lastModifiedDate":"2023-09-20"},{"lineNumber":38,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":39,"author":{"gitId":"LuoZYi"},"content":"    public Event(String description, LocalDate fromDate, LocalDate toDate) {","lastModifiedDate":"2023-09-14"},{"lineNumber":40,"author":{"gitId":"LuoZYi"},"content":"        super(description);","lastModifiedDate":"2023-09-14"},{"lineNumber":41,"author":{"gitId":"LuoZYi"},"content":"        this.fromDate \u003d fromDate;","lastModifiedDate":"2023-09-14"},{"lineNumber":42,"author":{"gitId":"LuoZYi"},"content":"        this.toDate \u003d toDate;","lastModifiedDate":"2023-09-14"},{"lineNumber":43,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":45,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":46,"author":{"gitId":"LuoZYi"},"content":"     * Returns a string representation of the Event task, including its status icon, description, and event timing.","lastModifiedDate":"2023-09-20"},{"lineNumber":47,"author":{"gitId":"LuoZYi"},"content":"     * The date and time format used is \"MMM dd yyyy HH:mm\" (e.g., \"Jan 01 2023 14:30\") for LocalDateTime","lastModifiedDate":"2023-09-20"},{"lineNumber":48,"author":{"gitId":"LuoZYi"},"content":"     * and \"MMM dd yyyy\" (e.g., \"Jan 01 2023\") for LocalDate, with the English locale.","lastModifiedDate":"2023-09-20"},{"lineNumber":49,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":50,"author":{"gitId":"LuoZYi"},"content":"     * @return A formatted string representing the Event task.","lastModifiedDate":"2023-09-20"},{"lineNumber":51,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":52,"author":{"gitId":"LuoZYi"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"LuoZYi"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"LuoZYi"},"content":"        String status \u003d \"[\" + getStatusIcon() + \"] \";","lastModifiedDate":"2023-08-24"},{"lineNumber":55,"author":{"gitId":"LuoZYi"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\", Locale.ENGLISH);","lastModifiedDate":"2023-09-20"},{"lineNumber":56,"author":{"gitId":"LuoZYi"},"content":"        DateTimeFormatter dateTimeFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\", Locale.ENGLISH);","lastModifiedDate":"2023-09-20"},{"lineNumber":57,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":58,"author":{"gitId":"LuoZYi"},"content":"        if (fromDateTime !\u003d null \u0026\u0026 toDateTime !\u003d null) {","lastModifiedDate":"2023-09-14"},{"lineNumber":59,"author":{"gitId":"LuoZYi"},"content":"            return \" \" + \"[E]\" + status + description +","lastModifiedDate":"2023-09-10"},{"lineNumber":60,"author":{"gitId":"LuoZYi"},"content":"                    \" (from: \" + fromDateTime.format(formatter) +","lastModifiedDate":"2023-09-20"},{"lineNumber":61,"author":{"gitId":"LuoZYi"},"content":"                    \" to: \" + toDateTime.format(formatter) + \")\";","lastModifiedDate":"2023-09-20"},{"lineNumber":62,"author":{"gitId":"LuoZYi"},"content":"        } else {","lastModifiedDate":"2023-09-14"},{"lineNumber":63,"author":{"gitId":"LuoZYi"},"content":"            return \" \" + \"[E]\" + status + description +","lastModifiedDate":"2023-09-14"},{"lineNumber":64,"author":{"gitId":"LuoZYi"},"content":"                    \" (from: \" + fromDate.format(dateTimeFormatter) +","lastModifiedDate":"2023-09-20"},{"lineNumber":65,"author":{"gitId":"LuoZYi"},"content":"                    \" to: \" + toDate.format(dateTimeFormatter) + \")\";","lastModifiedDate":"2023-09-20"},{"lineNumber":66,"author":{"gitId":"LuoZYi"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":67,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":68,"author":{"gitId":"LuoZYi"},"content":"}","lastModifiedDate":"2023-08-24"},{"lineNumber":69,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-20"}],"authorContributionMap":{"LuoZYi":69}},{"path":"duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LuoZYi"},"content":"package duke;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":3,"author":{"gitId":"LuoZYi"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"LuoZYi"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"LuoZYi"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"LuoZYi"},"content":"/**","lastModifiedDate":"2023-09-20"},{"lineNumber":8,"author":{"gitId":"LuoZYi"},"content":" * The Parser class provides methods for parsing user input and converting date/time strings into","lastModifiedDate":"2023-09-20"},{"lineNumber":9,"author":{"gitId":"LuoZYi"},"content":" * LocalDateTime or LocalDate objects. It also has methods for creating different types of tasks","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"LuoZYi"},"content":" * based on user input.","lastModifiedDate":"2023-09-20"},{"lineNumber":11,"author":{"gitId":"LuoZYi"},"content":" */","lastModifiedDate":"2023-09-20"},{"lineNumber":12,"author":{"gitId":"LuoZYi"},"content":"public class Parser {","lastModifiedDate":"2023-09-14"},{"lineNumber":13,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":14,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":15,"author":{"gitId":"LuoZYi"},"content":"     * Enum representing the types of commands that the parser can recognize.","lastModifiedDate":"2023-09-20"},{"lineNumber":16,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":17,"author":{"gitId":"LuoZYi"},"content":"    public enum CommandType {","lastModifiedDate":"2023-09-14"},{"lineNumber":18,"author":{"gitId":"LuoZYi"},"content":"        BYE, LIST, MARK, UNMARK, FIND, TODO, EVENT, DEADLINE, DELETE, INVALID","lastModifiedDate":"2023-09-21"},{"lineNumber":19,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":20,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":21,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":22,"author":{"gitId":"LuoZYi"},"content":"     * Parses a user command to determine its CommandType.","lastModifiedDate":"2023-09-20"},{"lineNumber":23,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":24,"author":{"gitId":"LuoZYi"},"content":"     * @param command The user command to be parsed.","lastModifiedDate":"2023-09-20"},{"lineNumber":25,"author":{"gitId":"LuoZYi"},"content":"     * @return The CommandType representing the parsed command.","lastModifiedDate":"2023-09-20"},{"lineNumber":26,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":27,"author":{"gitId":"LuoZYi"},"content":"    public CommandType parseCommandType(String command) {","lastModifiedDate":"2023-09-14"},{"lineNumber":28,"author":{"gitId":"LuoZYi"},"content":"        if (command.equals(\"bye\")) {","lastModifiedDate":"2023-09-14"},{"lineNumber":29,"author":{"gitId":"LuoZYi"},"content":"            return CommandType.BYE;","lastModifiedDate":"2023-09-14"},{"lineNumber":30,"author":{"gitId":"LuoZYi"},"content":"        } else if (command.equals(\"list\")) {","lastModifiedDate":"2023-09-14"},{"lineNumber":31,"author":{"gitId":"LuoZYi"},"content":"            return CommandType.LIST;","lastModifiedDate":"2023-09-14"},{"lineNumber":32,"author":{"gitId":"LuoZYi"},"content":"        } else if (command.startsWith(\"mark \")) {","lastModifiedDate":"2023-09-14"},{"lineNumber":33,"author":{"gitId":"LuoZYi"},"content":"            return CommandType.MARK;","lastModifiedDate":"2023-09-14"},{"lineNumber":34,"author":{"gitId":"LuoZYi"},"content":"        } else if (command.startsWith(\"unmark \")) {","lastModifiedDate":"2023-09-14"},{"lineNumber":35,"author":{"gitId":"LuoZYi"},"content":"            return CommandType.UNMARK;","lastModifiedDate":"2023-09-14"},{"lineNumber":36,"author":{"gitId":"LuoZYi"},"content":"        } else if(command.startsWith(\"find\")) {","lastModifiedDate":"2023-09-21"},{"lineNumber":37,"author":{"gitId":"LuoZYi"},"content":"            return CommandType.FIND;","lastModifiedDate":"2023-09-21"},{"lineNumber":38,"author":{"gitId":"LuoZYi"},"content":"        } else if (command.startsWith(\"todo \")) {","lastModifiedDate":"2023-09-14"},{"lineNumber":39,"author":{"gitId":"LuoZYi"},"content":"            return CommandType.TODO;","lastModifiedDate":"2023-09-14"},{"lineNumber":40,"author":{"gitId":"LuoZYi"},"content":"        } else if (command.startsWith(\"event \")) {","lastModifiedDate":"2023-09-14"},{"lineNumber":41,"author":{"gitId":"LuoZYi"},"content":"            return CommandType.EVENT;","lastModifiedDate":"2023-09-14"},{"lineNumber":42,"author":{"gitId":"LuoZYi"},"content":"        } else if (command.startsWith(\"deadline \")) {","lastModifiedDate":"2023-09-14"},{"lineNumber":43,"author":{"gitId":"LuoZYi"},"content":"            return CommandType.DEADLINE;","lastModifiedDate":"2023-09-14"},{"lineNumber":44,"author":{"gitId":"LuoZYi"},"content":"        } else if (command.startsWith(\"delete \")) {","lastModifiedDate":"2023-09-14"},{"lineNumber":45,"author":{"gitId":"LuoZYi"},"content":"            return CommandType.DELETE;","lastModifiedDate":"2023-09-14"},{"lineNumber":46,"author":{"gitId":"LuoZYi"},"content":"        } else {","lastModifiedDate":"2023-09-14"},{"lineNumber":47,"author":{"gitId":"LuoZYi"},"content":"            return CommandType.INVALID;","lastModifiedDate":"2023-09-14"},{"lineNumber":48,"author":{"gitId":"LuoZYi"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":49,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":50,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":51,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":52,"author":{"gitId":"LuoZYi"},"content":"     * Parses a date/time string and converts it into a LocalDateTime object. Supports two date/time formats.","lastModifiedDate":"2023-09-20"},{"lineNumber":53,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":54,"author":{"gitId":"LuoZYi"},"content":"     * @param dateTimeString The date/time string to be parsed.","lastModifiedDate":"2023-09-20"},{"lineNumber":55,"author":{"gitId":"LuoZYi"},"content":"     * @return The LocalDateTime object representing the parsed date/time, or null if parsing fails.","lastModifiedDate":"2023-09-20"},{"lineNumber":56,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":57,"author":{"gitId":"LuoZYi"},"content":"    public LocalDateTime parseCustomDateTime(String dateTimeString) {","lastModifiedDate":"2023-09-14"},{"lineNumber":58,"author":{"gitId":"LuoZYi"},"content":"        // Try parsing with \"dd/MM/yyyy HHmm\" format","lastModifiedDate":"2023-09-14"},{"lineNumber":59,"author":{"gitId":"LuoZYi"},"content":"        DateTimeFormatter formatter1 \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2023-09-14"},{"lineNumber":60,"author":{"gitId":"LuoZYi"},"content":"        try {","lastModifiedDate":"2023-09-14"},{"lineNumber":61,"author":{"gitId":"LuoZYi"},"content":"            return LocalDateTime.parse(dateTimeString, formatter1);","lastModifiedDate":"2023-09-14"},{"lineNumber":62,"author":{"gitId":"LuoZYi"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-14"},{"lineNumber":63,"author":{"gitId":"LuoZYi"},"content":"            // Parsing with the first format failed, try the second format below","lastModifiedDate":"2023-09-14"},{"lineNumber":64,"author":{"gitId":"LuoZYi"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":65,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":66,"author":{"gitId":"LuoZYi"},"content":"        // Try parsing with \"yyyy-MM-dd\" format","lastModifiedDate":"2023-09-14"},{"lineNumber":67,"author":{"gitId":"LuoZYi"},"content":"        DateTimeFormatter formatter2 \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2023-09-14"},{"lineNumber":68,"author":{"gitId":"LuoZYi"},"content":"        try {","lastModifiedDate":"2023-09-14"},{"lineNumber":69,"author":{"gitId":"LuoZYi"},"content":"            LocalDate date \u003d LocalDate.parse(dateTimeString, formatter2);","lastModifiedDate":"2023-09-14"},{"lineNumber":70,"author":{"gitId":"LuoZYi"},"content":"            return date.atStartOfDay();","lastModifiedDate":"2023-09-14"},{"lineNumber":71,"author":{"gitId":"LuoZYi"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-14"},{"lineNumber":72,"author":{"gitId":"LuoZYi"},"content":"            // Both parsing attempts failed","lastModifiedDate":"2023-09-14"},{"lineNumber":73,"author":{"gitId":"LuoZYi"},"content":"            return null;","lastModifiedDate":"2023-09-14"},{"lineNumber":74,"author":{"gitId":"LuoZYi"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":75,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":76,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":77,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":78,"author":{"gitId":"LuoZYi"},"content":"     * Parses a date string and converts it into a LocalDate object. Supports two date formats.","lastModifiedDate":"2023-09-20"},{"lineNumber":79,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":80,"author":{"gitId":"LuoZYi"},"content":"     * @param dateString The date string to be parsed.","lastModifiedDate":"2023-09-20"},{"lineNumber":81,"author":{"gitId":"LuoZYi"},"content":"     * @return The LocalDate object representing the parsed date, or null if parsing fails.","lastModifiedDate":"2023-09-20"},{"lineNumber":82,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":83,"author":{"gitId":"LuoZYi"},"content":"    public LocalDate parseCustomDate(String dateString) {","lastModifiedDate":"2023-09-14"},{"lineNumber":84,"author":{"gitId":"LuoZYi"},"content":"        // Try parsing with \"dd/MM/yyyy\" format","lastModifiedDate":"2023-09-14"},{"lineNumber":85,"author":{"gitId":"LuoZYi"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy\");","lastModifiedDate":"2023-09-14"},{"lineNumber":86,"author":{"gitId":"LuoZYi"},"content":"        try {","lastModifiedDate":"2023-09-14"},{"lineNumber":87,"author":{"gitId":"LuoZYi"},"content":"            return LocalDate.parse(dateString, formatter);","lastModifiedDate":"2023-09-14"},{"lineNumber":88,"author":{"gitId":"LuoZYi"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-14"},{"lineNumber":89,"author":{"gitId":"LuoZYi"},"content":"            // Parsing with the first format failed, try the second format below","lastModifiedDate":"2023-09-14"},{"lineNumber":90,"author":{"gitId":"LuoZYi"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":91,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":92,"author":{"gitId":"LuoZYi"},"content":"        // Try parsing with \"yyyy-MM-dd\" format","lastModifiedDate":"2023-09-14"},{"lineNumber":93,"author":{"gitId":"LuoZYi"},"content":"        DateTimeFormatter formatter2 \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2023-09-14"},{"lineNumber":94,"author":{"gitId":"LuoZYi"},"content":"        try {","lastModifiedDate":"2023-09-14"},{"lineNumber":95,"author":{"gitId":"LuoZYi"},"content":"            return LocalDate.parse(dateString, formatter2);","lastModifiedDate":"2023-09-14"},{"lineNumber":96,"author":{"gitId":"LuoZYi"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-14"},{"lineNumber":97,"author":{"gitId":"LuoZYi"},"content":"            // Both parsing attempts failed","lastModifiedDate":"2023-09-14"},{"lineNumber":98,"author":{"gitId":"LuoZYi"},"content":"            return null;","lastModifiedDate":"2023-09-14"},{"lineNumber":99,"author":{"gitId":"LuoZYi"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":100,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":101,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":102,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":103,"author":{"gitId":"LuoZYi"},"content":"     * Creates a Deadline task based on a description and a date/time string.","lastModifiedDate":"2023-09-20"},{"lineNumber":104,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":105,"author":{"gitId":"LuoZYi"},"content":"     * @param description    The description of the Deadline task.","lastModifiedDate":"2023-09-20"},{"lineNumber":106,"author":{"gitId":"LuoZYi"},"content":"     * @param dateTimeString The date/time string for the task\u0027s deadline.","lastModifiedDate":"2023-09-20"},{"lineNumber":107,"author":{"gitId":"LuoZYi"},"content":"     * @return The created Deadline task or null if parsing fails.","lastModifiedDate":"2023-09-20"},{"lineNumber":108,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":109,"author":{"gitId":"LuoZYi"},"content":"    public Deadline addDeadlineTask(String description, String dateTimeString) {","lastModifiedDate":"2023-09-14"},{"lineNumber":110,"author":{"gitId":"LuoZYi"},"content":"        LocalDateTime dateTime \u003d parseCustomDateTime(dateTimeString);","lastModifiedDate":"2023-09-14"},{"lineNumber":111,"author":{"gitId":"LuoZYi"},"content":"        LocalDate date \u003d parseCustomDate(dateTimeString);","lastModifiedDate":"2023-09-14"},{"lineNumber":112,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":113,"author":{"gitId":"LuoZYi"},"content":"        if (dateTime !\u003d null || date !\u003d null) {","lastModifiedDate":"2023-09-14"},{"lineNumber":114,"author":{"gitId":"LuoZYi"},"content":"            if (dateTime !\u003d null) {","lastModifiedDate":"2023-09-14"},{"lineNumber":115,"author":{"gitId":"LuoZYi"},"content":"                return new Deadline(description, dateTime);","lastModifiedDate":"2023-09-14"},{"lineNumber":116,"author":{"gitId":"LuoZYi"},"content":"            } else {","lastModifiedDate":"2023-09-14"},{"lineNumber":117,"author":{"gitId":"LuoZYi"},"content":"                return new Deadline(description, date);","lastModifiedDate":"2023-09-14"},{"lineNumber":118,"author":{"gitId":"LuoZYi"},"content":"            }","lastModifiedDate":"2023-09-14"},{"lineNumber":119,"author":{"gitId":"LuoZYi"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":120,"author":{"gitId":"LuoZYi"},"content":"        return null;","lastModifiedDate":"2023-09-14"},{"lineNumber":121,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":122,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":123,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":124,"author":{"gitId":"LuoZYi"},"content":"     * Creates an Event task based on a description and two date/time strings for start and end times.","lastModifiedDate":"2023-09-20"},{"lineNumber":125,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":126,"author":{"gitId":"LuoZYi"},"content":"     * @param description The description of the Event task.","lastModifiedDate":"2023-09-20"},{"lineNumber":127,"author":{"gitId":"LuoZYi"},"content":"     * @param from        The date/time string for the event\u0027s start time.","lastModifiedDate":"2023-09-20"},{"lineNumber":128,"author":{"gitId":"LuoZYi"},"content":"     * @param to          The date/time string for the event\u0027s end time.","lastModifiedDate":"2023-09-20"},{"lineNumber":129,"author":{"gitId":"LuoZYi"},"content":"     * @return The created Event task or null if parsing fails.","lastModifiedDate":"2023-09-20"},{"lineNumber":130,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":131,"author":{"gitId":"LuoZYi"},"content":"    public Event addEventTask(String description, String from, String to) {","lastModifiedDate":"2023-09-14"},{"lineNumber":132,"author":{"gitId":"LuoZYi"},"content":"        LocalDateTime fromDateTime \u003d parseCustomDateTime(from);","lastModifiedDate":"2023-09-14"},{"lineNumber":133,"author":{"gitId":"LuoZYi"},"content":"        LocalDate fromDate \u003d parseCustomDate(from);","lastModifiedDate":"2023-09-14"},{"lineNumber":134,"author":{"gitId":"LuoZYi"},"content":"        LocalDateTime toDateTime \u003d parseCustomDateTime(to);","lastModifiedDate":"2023-09-14"},{"lineNumber":135,"author":{"gitId":"LuoZYi"},"content":"        LocalDate toDate \u003d parseCustomDate(to);","lastModifiedDate":"2023-09-14"},{"lineNumber":136,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":137,"author":{"gitId":"LuoZYi"},"content":"        if ((fromDateTime !\u003d null \u0026\u0026 toDateTime !\u003d null) || (fromDate !\u003d null \u0026\u0026 toDate !\u003d null)) {","lastModifiedDate":"2023-09-14"},{"lineNumber":138,"author":{"gitId":"LuoZYi"},"content":"            Event event;","lastModifiedDate":"2023-09-14"},{"lineNumber":139,"author":{"gitId":"LuoZYi"},"content":"            if (fromDateTime !\u003d null \u0026\u0026 toDateTime !\u003d null) {","lastModifiedDate":"2023-09-14"},{"lineNumber":140,"author":{"gitId":"LuoZYi"},"content":"                event \u003d new Event(description, fromDateTime, toDateTime);","lastModifiedDate":"2023-09-14"},{"lineNumber":141,"author":{"gitId":"LuoZYi"},"content":"            } else {","lastModifiedDate":"2023-09-14"},{"lineNumber":142,"author":{"gitId":"LuoZYi"},"content":"                event \u003d new Event(description, fromDate, toDate);","lastModifiedDate":"2023-09-14"},{"lineNumber":143,"author":{"gitId":"LuoZYi"},"content":"            }","lastModifiedDate":"2023-09-14"},{"lineNumber":144,"author":{"gitId":"LuoZYi"},"content":"            return event;","lastModifiedDate":"2023-09-14"},{"lineNumber":145,"author":{"gitId":"LuoZYi"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":146,"author":{"gitId":"LuoZYi"},"content":"        return null;","lastModifiedDate":"2023-09-14"},{"lineNumber":147,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":148,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":149,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":150,"author":{"gitId":"LuoZYi"},"content":"     * Creates a ToDo task based on a description.","lastModifiedDate":"2023-09-20"},{"lineNumber":151,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":152,"author":{"gitId":"LuoZYi"},"content":"     * @param description The description of the ToDo task.","lastModifiedDate":"2023-09-20"},{"lineNumber":153,"author":{"gitId":"LuoZYi"},"content":"     * @return The created ToDo task.","lastModifiedDate":"2023-09-20"},{"lineNumber":154,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":155,"author":{"gitId":"LuoZYi"},"content":"    public ToDo addTodoTask(String description) {","lastModifiedDate":"2023-09-14"},{"lineNumber":156,"author":{"gitId":"LuoZYi"},"content":"        return new ToDo(description);","lastModifiedDate":"2023-09-14"},{"lineNumber":157,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":158,"author":{"gitId":"LuoZYi"},"content":"}","lastModifiedDate":"2023-09-14"}],"authorContributionMap":{"LuoZYi":158}},{"path":"duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LuoZYi"},"content":"package duke;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"LuoZYi"},"content":"import java.io.*;","lastModifiedDate":"2023-09-14"},{"lineNumber":3,"author":{"gitId":"LuoZYi"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"LuoZYi"},"content":"/**","lastModifiedDate":"2023-09-20"},{"lineNumber":6,"author":{"gitId":"LuoZYi"},"content":" * The Storage class handles the loading and saving of tasks to a file. It provides methods to load tasks from","lastModifiedDate":"2023-09-20"},{"lineNumber":7,"author":{"gitId":"LuoZYi"},"content":" * a specified file and save tasks to that file.","lastModifiedDate":"2023-09-20"},{"lineNumber":8,"author":{"gitId":"LuoZYi"},"content":" */","lastModifiedDate":"2023-09-20"},{"lineNumber":9,"author":{"gitId":"LuoZYi"},"content":"public class Storage {","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"LuoZYi"},"content":"    private String filePath;","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":12,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":13,"author":{"gitId":"LuoZYi"},"content":"     * Constructs a new Storage object with the specified file path.","lastModifiedDate":"2023-09-20"},{"lineNumber":14,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":15,"author":{"gitId":"LuoZYi"},"content":"     * @param filePath The path to the file where tasks are stored.","lastModifiedDate":"2023-09-20"},{"lineNumber":16,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":17,"author":{"gitId":"LuoZYi"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-09-14"},{"lineNumber":18,"author":{"gitId":"LuoZYi"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-09-14"},{"lineNumber":19,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":20,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":21,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":22,"author":{"gitId":"LuoZYi"},"content":"     * Loads tasks from the specified file.","lastModifiedDate":"2023-09-20"},{"lineNumber":23,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":24,"author":{"gitId":"LuoZYi"},"content":"     * @return An ArrayList of tasks loaded from the file. If the file doesn\u0027t exist or an error occurs during","lastModifiedDate":"2023-09-20"},{"lineNumber":25,"author":{"gitId":"LuoZYi"},"content":"     *         loading, an empty ArrayList is returned.","lastModifiedDate":"2023-09-20"},{"lineNumber":26,"author":{"gitId":"LuoZYi"},"content":"     * @throws CustomException If an error occurs during loading, including I/O errors or corrupted files.","lastModifiedDate":"2023-09-20"},{"lineNumber":27,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":28,"author":{"gitId":"LuoZYi"},"content":"    public ArrayList\u003cTask\u003e load() throws CustomException {","lastModifiedDate":"2023-09-20"},{"lineNumber":29,"author":{"gitId":"LuoZYi"},"content":"        ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-09-14"},{"lineNumber":30,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":31,"author":{"gitId":"LuoZYi"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2023-09-14"},{"lineNumber":32,"author":{"gitId":"LuoZYi"},"content":"        if (file.exists()) {","lastModifiedDate":"2023-09-14"},{"lineNumber":33,"author":{"gitId":"LuoZYi"},"content":"            try (FileInputStream fis \u003d new FileInputStream(file);","lastModifiedDate":"2023-09-14"},{"lineNumber":34,"author":{"gitId":"LuoZYi"},"content":"                 ObjectInputStream ois \u003d new ObjectInputStream(fis)) {","lastModifiedDate":"2023-09-14"},{"lineNumber":35,"author":{"gitId":"LuoZYi"},"content":"                // Read the taskArrayList from the file","lastModifiedDate":"2023-09-14"},{"lineNumber":36,"author":{"gitId":"LuoZYi"},"content":"                tasks \u003d (ArrayList\u003cTask\u003e) ois.readObject();","lastModifiedDate":"2023-09-14"},{"lineNumber":37,"author":{"gitId":"LuoZYi"},"content":"            } catch (IOException | ClassNotFoundException e) {","lastModifiedDate":"2023-09-14"},{"lineNumber":38,"author":{"gitId":"LuoZYi"},"content":"                // Handle exceptions, e.g., if the file is corrupted","lastModifiedDate":"2023-09-14"},{"lineNumber":39,"author":{"gitId":"LuoZYi"},"content":"                tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-14"},{"lineNumber":40,"author":{"gitId":"LuoZYi"},"content":"            }","lastModifiedDate":"2023-09-14"},{"lineNumber":41,"author":{"gitId":"LuoZYi"},"content":"        } else {","lastModifiedDate":"2023-09-14"},{"lineNumber":42,"author":{"gitId":"LuoZYi"},"content":"            tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-14"},{"lineNumber":43,"author":{"gitId":"LuoZYi"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":44,"author":{"gitId":"LuoZYi"},"content":"        return tasks;","lastModifiedDate":"2023-09-14"},{"lineNumber":45,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":46,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":47,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":48,"author":{"gitId":"LuoZYi"},"content":"     * Saves the provided ArrayList of tasks to the specified file.","lastModifiedDate":"2023-09-20"},{"lineNumber":49,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":50,"author":{"gitId":"LuoZYi"},"content":"     * @param tasks The ArrayList of tasks to be saved to the file.","lastModifiedDate":"2023-09-20"},{"lineNumber":51,"author":{"gitId":"LuoZYi"},"content":"     * @throws CustomException If an error occurs during saving, including I/O errors or directory creation errors.","lastModifiedDate":"2023-09-20"},{"lineNumber":52,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":53,"author":{"gitId":"LuoZYi"},"content":"    public void save(ArrayList\u003cTask\u003e tasks) throws CustomException {","lastModifiedDate":"2023-09-20"},{"lineNumber":54,"author":{"gitId":"LuoZYi"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2023-09-14"},{"lineNumber":55,"author":{"gitId":"LuoZYi"},"content":"        File directory \u003d file.getParentFile();","lastModifiedDate":"2023-09-14"},{"lineNumber":56,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":57,"author":{"gitId":"LuoZYi"},"content":"        try {","lastModifiedDate":"2023-09-14"},{"lineNumber":58,"author":{"gitId":"LuoZYi"},"content":"            // Create the directory if it doesn\u0027t exist","lastModifiedDate":"2023-09-14"},{"lineNumber":59,"author":{"gitId":"LuoZYi"},"content":"            if (!directory.exists()) {","lastModifiedDate":"2023-09-14"},{"lineNumber":60,"author":{"gitId":"LuoZYi"},"content":"                directory.mkdirs();","lastModifiedDate":"2023-09-14"},{"lineNumber":61,"author":{"gitId":"LuoZYi"},"content":"            }","lastModifiedDate":"2023-09-14"},{"lineNumber":62,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":63,"author":{"gitId":"LuoZYi"},"content":"            // Create the file if it doesn\u0027t exist","lastModifiedDate":"2023-09-14"},{"lineNumber":64,"author":{"gitId":"LuoZYi"},"content":"            if (!file.exists()) {","lastModifiedDate":"2023-09-14"},{"lineNumber":65,"author":{"gitId":"LuoZYi"},"content":"                file.createNewFile();","lastModifiedDate":"2023-09-14"},{"lineNumber":66,"author":{"gitId":"LuoZYi"},"content":"            }","lastModifiedDate":"2023-09-14"},{"lineNumber":67,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":68,"author":{"gitId":"LuoZYi"},"content":"            try (FileOutputStream fos \u003d new FileOutputStream(file);","lastModifiedDate":"2023-09-14"},{"lineNumber":69,"author":{"gitId":"LuoZYi"},"content":"                 ObjectOutputStream oos \u003d new ObjectOutputStream(fos)) {","lastModifiedDate":"2023-09-14"},{"lineNumber":70,"author":{"gitId":"LuoZYi"},"content":"                // Write the taskArrayList to the file","lastModifiedDate":"2023-09-14"},{"lineNumber":71,"author":{"gitId":"LuoZYi"},"content":"                oos.writeObject(tasks);","lastModifiedDate":"2023-09-14"},{"lineNumber":72,"author":{"gitId":"LuoZYi"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-09-14"},{"lineNumber":73,"author":{"gitId":"LuoZYi"},"content":"                System.out.println(\"Error saving tasks to file!\");","lastModifiedDate":"2023-09-14"},{"lineNumber":74,"author":{"gitId":"LuoZYi"},"content":"                // Throw a CustomException with a custom error message","lastModifiedDate":"2023-09-20"},{"lineNumber":75,"author":{"gitId":"LuoZYi"},"content":"                throw new CustomException(\"Error saving tasks to file: \" + e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":76,"author":{"gitId":"LuoZYi"},"content":"            }","lastModifiedDate":"2023-09-14"},{"lineNumber":77,"author":{"gitId":"LuoZYi"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-14"},{"lineNumber":78,"author":{"gitId":"LuoZYi"},"content":"            System.out.println(\"Error creating the file or directory!\");","lastModifiedDate":"2023-09-14"},{"lineNumber":79,"author":{"gitId":"LuoZYi"},"content":"            // Throw a CustomException with a custom error message","lastModifiedDate":"2023-09-20"},{"lineNumber":80,"author":{"gitId":"LuoZYi"},"content":"            throw new CustomException(\"Error creating file or directory: \" + e.getMessage());","lastModifiedDate":"2023-09-20"},{"lineNumber":81,"author":{"gitId":"LuoZYi"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":82,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":83,"author":{"gitId":"LuoZYi"},"content":"}","lastModifiedDate":"2023-09-14"},{"lineNumber":84,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"}],"authorContributionMap":{"LuoZYi":84}},{"path":"duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LuoZYi"},"content":"package duke;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":3,"author":{"gitId":"LuoZYi"},"content":"import java.io.Serializable;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"LuoZYi"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-10"},{"lineNumber":5,"author":{"gitId":"LuoZYi"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"LuoZYi"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-10"},{"lineNumber":7,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"LuoZYi"},"content":"/**","lastModifiedDate":"2023-09-20"},{"lineNumber":9,"author":{"gitId":"LuoZYi"},"content":" * Represents a general task with a description and optional date and time information.","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"LuoZYi"},"content":" * Implements the Serializable interface for storage.","lastModifiedDate":"2023-09-20"},{"lineNumber":11,"author":{"gitId":"LuoZYi"},"content":" */","lastModifiedDate":"2023-09-20"},{"lineNumber":12,"author":{"gitId":"LuoZYi"},"content":"public class Task implements Serializable {","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"LuoZYi"},"content":"    protected String description;","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"LuoZYi"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"LuoZYi"},"content":"    protected LocalDateTime dateTime;","lastModifiedDate":"2023-09-10"},{"lineNumber":16,"author":{"gitId":"LuoZYi"},"content":"    protected LocalDate date;","lastModifiedDate":"2023-09-10"},{"lineNumber":17,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":18,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":19,"author":{"gitId":"LuoZYi"},"content":"     * Constructs a Task object with a description.","lastModifiedDate":"2023-09-20"},{"lineNumber":20,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":21,"author":{"gitId":"LuoZYi"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-09-20"},{"lineNumber":22,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":23,"author":{"gitId":"LuoZYi"},"content":"    public Task(String description) {","lastModifiedDate":"2023-09-10"},{"lineNumber":24,"author":{"gitId":"LuoZYi"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"LuoZYi"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":29,"author":{"gitId":"LuoZYi"},"content":"     * Constructs a Task object with a description and a specific date and time.","lastModifiedDate":"2023-09-20"},{"lineNumber":30,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":31,"author":{"gitId":"LuoZYi"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-09-20"},{"lineNumber":32,"author":{"gitId":"LuoZYi"},"content":"     * @param dateTime    The LocalDateTime representing the date and time associated with the task.","lastModifiedDate":"2023-09-20"},{"lineNumber":33,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":34,"author":{"gitId":"LuoZYi"},"content":"    public Task(String description, LocalDateTime dateTime) {","lastModifiedDate":"2023-09-10"},{"lineNumber":35,"author":{"gitId":"LuoZYi"},"content":"        this(description);","lastModifiedDate":"2023-09-10"},{"lineNumber":36,"author":{"gitId":"LuoZYi"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2023-09-10"},{"lineNumber":37,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":39,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":40,"author":{"gitId":"LuoZYi"},"content":"     * Returns the status icon for the task.","lastModifiedDate":"2023-09-20"},{"lineNumber":41,"author":{"gitId":"LuoZYi"},"content":"     * \"X\" indicates a completed task, and \" \" indicates an incomplete task.","lastModifiedDate":"2023-09-20"},{"lineNumber":42,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":43,"author":{"gitId":"LuoZYi"},"content":"     * @return The status icon as a string.","lastModifiedDate":"2023-09-20"},{"lineNumber":44,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":45,"author":{"gitId":"LuoZYi"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-09-10"},{"lineNumber":46,"author":{"gitId":"LuoZYi"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2023-09-10"},{"lineNumber":47,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":48,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":49,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":50,"author":{"gitId":"LuoZYi"},"content":"     * Marks the task as done by setting the \u0027isDone\u0027 flag to true.","lastModifiedDate":"2023-09-20"},{"lineNumber":51,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":52,"author":{"gitId":"LuoZYi"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"LuoZYi"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":55,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":57,"author":{"gitId":"LuoZYi"},"content":"     * Marks the task as undone by setting the \u0027isDone\u0027 flag to false.","lastModifiedDate":"2023-09-20"},{"lineNumber":58,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":59,"author":{"gitId":"LuoZYi"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-08-24"},{"lineNumber":60,"author":{"gitId":"LuoZYi"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-24"},{"lineNumber":61,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":62,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":63,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":64,"author":{"gitId":"LuoZYi"},"content":"     * Returns a string representation of the task, including its status icon and description.","lastModifiedDate":"2023-09-20"},{"lineNumber":65,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":66,"author":{"gitId":"LuoZYi"},"content":"     * @return A formatted string representing the task.","lastModifiedDate":"2023-09-20"},{"lineNumber":67,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":68,"author":{"gitId":"LuoZYi"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":69,"author":{"gitId":"LuoZYi"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":70,"author":{"gitId":"LuoZYi"},"content":"        String status \u003d \"[\" + getStatusIcon() + \"] \";","lastModifiedDate":"2023-09-10"},{"lineNumber":71,"author":{"gitId":"LuoZYi"},"content":"        return status + description;","lastModifiedDate":"2023-09-10"},{"lineNumber":72,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":73,"author":{"gitId":"LuoZYi"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"LuoZYi":73}},{"path":"duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LuoZYi"},"content":"package duke;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":3,"author":{"gitId":"LuoZYi"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"LuoZYi"},"content":"import java.io.Serializable;","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"LuoZYi"},"content":"/**","lastModifiedDate":"2023-09-20"},{"lineNumber":7,"author":{"gitId":"LuoZYi"},"content":" * The TaskList class represents a list of tasks. It provides methods for adding, listing, deleting, and","lastModifiedDate":"2023-09-20"},{"lineNumber":8,"author":{"gitId":"LuoZYi"},"content":" * marking tasks as done or undone. TaskList can also be serialized to save and load tasks from a file.","lastModifiedDate":"2023-09-20"},{"lineNumber":9,"author":{"gitId":"LuoZYi"},"content":" */","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"LuoZYi"},"content":"public class TaskList implements Serializable {","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"LuoZYi"},"content":"    private ArrayList\u003cTask\u003e taskArrayList;","lastModifiedDate":"2023-09-14"},{"lineNumber":12,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":13,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":14,"author":{"gitId":"LuoZYi"},"content":"     * Constructs an empty TaskList.","lastModifiedDate":"2023-09-20"},{"lineNumber":15,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":16,"author":{"gitId":"LuoZYi"},"content":"    public TaskList() {","lastModifiedDate":"2023-09-14"},{"lineNumber":17,"author":{"gitId":"LuoZYi"},"content":"        taskArrayList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-20"},{"lineNumber":18,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":19,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":20,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":21,"author":{"gitId":"LuoZYi"},"content":"     * Constructs a TaskList with the given list of tasks.","lastModifiedDate":"2023-09-20"},{"lineNumber":22,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":23,"author":{"gitId":"LuoZYi"},"content":"     * @param tasks The list of tasks to initialize the TaskList with.","lastModifiedDate":"2023-09-20"},{"lineNumber":24,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":25,"author":{"gitId":"LuoZYi"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-09-14"},{"lineNumber":26,"author":{"gitId":"LuoZYi"},"content":"        taskArrayList \u003d tasks;","lastModifiedDate":"2023-09-20"},{"lineNumber":27,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":28,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":29,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":30,"author":{"gitId":"LuoZYi"},"content":"     * Lists all tasks in the TaskList, displaying their descriptions and statuses.","lastModifiedDate":"2023-09-20"},{"lineNumber":31,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":32,"author":{"gitId":"LuoZYi"},"content":"    public void listTasks() {","lastModifiedDate":"2023-09-14"},{"lineNumber":33,"author":{"gitId":"LuoZYi"},"content":"        for (int i \u003d 0; i \u003c taskArrayList.size(); i++) {","lastModifiedDate":"2023-09-14"},{"lineNumber":34,"author":{"gitId":"LuoZYi"},"content":"            Task task \u003d taskArrayList.get(i);","lastModifiedDate":"2023-09-14"},{"lineNumber":35,"author":{"gitId":"LuoZYi"},"content":"            System.out.println((i + 1) + \". \" + task);","lastModifiedDate":"2023-09-20"},{"lineNumber":36,"author":{"gitId":"LuoZYi"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":37,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":38,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":39,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":40,"author":{"gitId":"LuoZYi"},"content":"     * Deletes a task from the TaskList by its ID.","lastModifiedDate":"2023-09-20"},{"lineNumber":41,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":42,"author":{"gitId":"LuoZYi"},"content":"     * @param id The ID of the task to be deleted.","lastModifiedDate":"2023-09-20"},{"lineNumber":43,"author":{"gitId":"LuoZYi"},"content":"     * @return A message indicating the result of the deletion.","lastModifiedDate":"2023-09-20"},{"lineNumber":44,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":45,"author":{"gitId":"LuoZYi"},"content":"    public String deleteTask(int id) {","lastModifiedDate":"2023-09-14"},{"lineNumber":46,"author":{"gitId":"LuoZYi"},"content":"        if (id \u003e\u003d 1 \u0026\u0026 id \u003c\u003d taskArrayList.size()) {","lastModifiedDate":"2023-09-14"},{"lineNumber":47,"author":{"gitId":"LuoZYi"},"content":"            Task task \u003d taskArrayList.remove(id - 1);","lastModifiedDate":"2023-09-14"},{"lineNumber":48,"author":{"gitId":"LuoZYi"},"content":"            return \"Noted. I\u0027ve removed this task:\\n\" + task","lastModifiedDate":"2023-09-20"},{"lineNumber":49,"author":{"gitId":"LuoZYi"},"content":"                    + \"\\nNow you have \" + taskArrayList.size() + \" tasks in the list.\";","lastModifiedDate":"2023-09-14"},{"lineNumber":50,"author":{"gitId":"LuoZYi"},"content":"        } else {","lastModifiedDate":"2023-09-14"},{"lineNumber":51,"author":{"gitId":"LuoZYi"},"content":"            return \"Invalid task number. Please enter a valid task number.\";","lastModifiedDate":"2023-09-14"},{"lineNumber":52,"author":{"gitId":"LuoZYi"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":53,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":54,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":55,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":56,"author":{"gitId":"LuoZYi"},"content":"     * Adds a task to the TaskList.","lastModifiedDate":"2023-09-20"},{"lineNumber":57,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":58,"author":{"gitId":"LuoZYi"},"content":"     * @param task The task to be added.","lastModifiedDate":"2023-09-20"},{"lineNumber":59,"author":{"gitId":"LuoZYi"},"content":"     * @return A message indicating the result of the addition.","lastModifiedDate":"2023-09-20"},{"lineNumber":60,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":61,"author":{"gitId":"LuoZYi"},"content":"    public String addTask(Task task) {","lastModifiedDate":"2023-09-14"},{"lineNumber":62,"author":{"gitId":"LuoZYi"},"content":"        taskArrayList.add(task);","lastModifiedDate":"2023-09-14"},{"lineNumber":63,"author":{"gitId":"LuoZYi"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" + taskArrayList.get(taskArrayList.size() - 1)","lastModifiedDate":"2023-09-20"},{"lineNumber":64,"author":{"gitId":"LuoZYi"},"content":"                + \"\\nNow you have \" + taskArrayList.size() + \" tasks in the list.\";","lastModifiedDate":"2023-09-14"},{"lineNumber":65,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":66,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":67,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":68,"author":{"gitId":"LuoZYi"},"content":"     * Marks a task as done by its ID.","lastModifiedDate":"2023-09-20"},{"lineNumber":69,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":70,"author":{"gitId":"LuoZYi"},"content":"     * @param id The ID of the task to be marked as done.","lastModifiedDate":"2023-09-20"},{"lineNumber":71,"author":{"gitId":"LuoZYi"},"content":"     * @return A message indicating the result of marking the task as done.","lastModifiedDate":"2023-09-20"},{"lineNumber":72,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":73,"author":{"gitId":"LuoZYi"},"content":"    public String markTaskAsDone(int id) {","lastModifiedDate":"2023-09-14"},{"lineNumber":74,"author":{"gitId":"LuoZYi"},"content":"        if (id \u003e\u003d 1 \u0026\u0026 id \u003c\u003d taskArrayList.size()) {","lastModifiedDate":"2023-09-14"},{"lineNumber":75,"author":{"gitId":"LuoZYi"},"content":"            Task task \u003d taskArrayList.get(id - 1);","lastModifiedDate":"2023-09-14"},{"lineNumber":76,"author":{"gitId":"LuoZYi"},"content":"            if (!task.isDone) {","lastModifiedDate":"2023-09-14"},{"lineNumber":77,"author":{"gitId":"LuoZYi"},"content":"                task.markAsDone();","lastModifiedDate":"2023-09-14"},{"lineNumber":78,"author":{"gitId":"LuoZYi"},"content":"                return \"Nice! I\u0027ve marked this task as done:\\n\" + task;","lastModifiedDate":"2023-09-20"},{"lineNumber":79,"author":{"gitId":"LuoZYi"},"content":"            } else {","lastModifiedDate":"2023-09-14"},{"lineNumber":80,"author":{"gitId":"LuoZYi"},"content":"                return \"This task is already marked as done:\\n\" + task;","lastModifiedDate":"2023-09-20"},{"lineNumber":81,"author":{"gitId":"LuoZYi"},"content":"            }","lastModifiedDate":"2023-09-14"},{"lineNumber":82,"author":{"gitId":"LuoZYi"},"content":"        } else {","lastModifiedDate":"2023-09-14"},{"lineNumber":83,"author":{"gitId":"LuoZYi"},"content":"            return \"Invalid task number. Please enter a valid task number.\";","lastModifiedDate":"2023-09-14"},{"lineNumber":84,"author":{"gitId":"LuoZYi"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":85,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":86,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":87,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":88,"author":{"gitId":"LuoZYi"},"content":"     * Marks a task as undone (not done) by its ID.","lastModifiedDate":"2023-09-20"},{"lineNumber":89,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":90,"author":{"gitId":"LuoZYi"},"content":"     * @param id The ID of the task to be marked as undone.","lastModifiedDate":"2023-09-20"},{"lineNumber":91,"author":{"gitId":"LuoZYi"},"content":"     * @return A message indicating the result of marking the task as undone.","lastModifiedDate":"2023-09-20"},{"lineNumber":92,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":93,"author":{"gitId":"LuoZYi"},"content":"    public String unmarkTask(int id) {","lastModifiedDate":"2023-09-14"},{"lineNumber":94,"author":{"gitId":"LuoZYi"},"content":"        if (id \u003e\u003d 1 \u0026\u0026 id \u003c\u003d taskArrayList.size()) {","lastModifiedDate":"2023-09-14"},{"lineNumber":95,"author":{"gitId":"LuoZYi"},"content":"            Task task \u003d taskArrayList.get(id - 1);","lastModifiedDate":"2023-09-14"},{"lineNumber":96,"author":{"gitId":"LuoZYi"},"content":"            if (task.isDone) {","lastModifiedDate":"2023-09-14"},{"lineNumber":97,"author":{"gitId":"LuoZYi"},"content":"                task.markAsUndone();","lastModifiedDate":"2023-09-14"},{"lineNumber":98,"author":{"gitId":"LuoZYi"},"content":"                return \"OK, I\u0027ve marked this task as not done yet:\\n\" + task;","lastModifiedDate":"2023-09-20"},{"lineNumber":99,"author":{"gitId":"LuoZYi"},"content":"            } else {","lastModifiedDate":"2023-09-14"},{"lineNumber":100,"author":{"gitId":"LuoZYi"},"content":"                return \"This task is already marked as not done:\\n\" + task;","lastModifiedDate":"2023-09-20"},{"lineNumber":101,"author":{"gitId":"LuoZYi"},"content":"            }","lastModifiedDate":"2023-09-14"},{"lineNumber":102,"author":{"gitId":"LuoZYi"},"content":"        } else {","lastModifiedDate":"2023-09-14"},{"lineNumber":103,"author":{"gitId":"LuoZYi"},"content":"            return \"Invalid task number. Please enter a valid task number.\";","lastModifiedDate":"2023-09-14"},{"lineNumber":104,"author":{"gitId":"LuoZYi"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":105,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":106,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":107,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":108,"author":{"gitId":"LuoZYi"},"content":"     * Retrieves the ArrayList of tasks contained in the TaskList.","lastModifiedDate":"2023-09-20"},{"lineNumber":109,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":110,"author":{"gitId":"LuoZYi"},"content":"     * @return The ArrayList of tasks.","lastModifiedDate":"2023-09-20"},{"lineNumber":111,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":112,"author":{"gitId":"LuoZYi"},"content":"    protected ArrayList\u003cTask\u003e getTaskArrayList() {","lastModifiedDate":"2023-09-14"},{"lineNumber":113,"author":{"gitId":"LuoZYi"},"content":"        return taskArrayList;","lastModifiedDate":"2023-09-20"},{"lineNumber":114,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":115,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-21"},{"lineNumber":116,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-21"},{"lineNumber":117,"author":{"gitId":"LuoZYi"},"content":"     * Lists tasks in the TaskList whose description matches with keyword.","lastModifiedDate":"2023-09-21"},{"lineNumber":118,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-21"},{"lineNumber":119,"author":{"gitId":"LuoZYi"},"content":"     * @param key The keyword users are looking up for.","lastModifiedDate":"2023-09-21"},{"lineNumber":120,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-21"},{"lineNumber":121,"author":{"gitId":"LuoZYi"},"content":"    public void findTasks(String key) {","lastModifiedDate":"2023-09-21"},{"lineNumber":122,"author":{"gitId":"LuoZYi"},"content":"        for (int i \u003d 0; i \u003c taskArrayList.size(); i++) {","lastModifiedDate":"2023-09-21"},{"lineNumber":123,"author":{"gitId":"LuoZYi"},"content":"            Task task \u003d taskArrayList.get(i);","lastModifiedDate":"2023-09-21"},{"lineNumber":124,"author":{"gitId":"LuoZYi"},"content":"            if(task.description.contains(key)) {","lastModifiedDate":"2023-09-21"},{"lineNumber":125,"author":{"gitId":"LuoZYi"},"content":"                System.out.println((i + 1) + \". \" + task);","lastModifiedDate":"2023-09-21"},{"lineNumber":126,"author":{"gitId":"LuoZYi"},"content":"            }","lastModifiedDate":"2023-09-21"},{"lineNumber":127,"author":{"gitId":"LuoZYi"},"content":"        }","lastModifiedDate":"2023-09-21"},{"lineNumber":128,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-21"},{"lineNumber":129,"author":{"gitId":"LuoZYi"},"content":"}","lastModifiedDate":"2023-09-14"}],"authorContributionMap":{"LuoZYi":129}},{"path":"duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LuoZYi"},"content":"package duke;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":3,"author":{"gitId":"LuoZYi"},"content":"/**","lastModifiedDate":"2023-09-20"},{"lineNumber":4,"author":{"gitId":"LuoZYi"},"content":" * Represents a to-do task with a description but no specific date and time associated with it.","lastModifiedDate":"2023-09-20"},{"lineNumber":5,"author":{"gitId":"LuoZYi"},"content":" * Extends the Task class.","lastModifiedDate":"2023-09-20"},{"lineNumber":6,"author":{"gitId":"LuoZYi"},"content":" */","lastModifiedDate":"2023-09-20"},{"lineNumber":7,"author":{"gitId":"LuoZYi"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"LuoZYi"},"content":"     * Constructs a ToDo task with a description.","lastModifiedDate":"2023-09-20"},{"lineNumber":11,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":12,"author":{"gitId":"LuoZYi"},"content":"     * @param description The description of the ToDo task.","lastModifiedDate":"2023-09-20"},{"lineNumber":13,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":14,"author":{"gitId":"LuoZYi"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-09-10"},{"lineNumber":15,"author":{"gitId":"LuoZYi"},"content":"        super(description);","lastModifiedDate":"2023-09-10"},{"lineNumber":16,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":19,"author":{"gitId":"LuoZYi"},"content":"     * Returns a string representation of the ToDo task, including its status icon and description.","lastModifiedDate":"2023-09-20"},{"lineNumber":20,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":21,"author":{"gitId":"LuoZYi"},"content":"     * @return A formatted string representing the ToDo task.","lastModifiedDate":"2023-09-20"},{"lineNumber":22,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":23,"author":{"gitId":"LuoZYi"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"LuoZYi"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"LuoZYi"},"content":"        String status \u003d \"[\" + getStatusIcon() + \"] \";","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"LuoZYi"},"content":"        return \" [T]\" + status + description;","lastModifiedDate":"2023-09-20"},{"lineNumber":27,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"LuoZYi"},"content":"}","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-20"}],"authorContributionMap":{"LuoZYi":29}},{"path":"duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LuoZYi"},"content":"package duke;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":3,"author":{"gitId":"LuoZYi"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":5,"author":{"gitId":"LuoZYi"},"content":"/**","lastModifiedDate":"2023-09-20"},{"lineNumber":6,"author":{"gitId":"LuoZYi"},"content":" * The Ui class handles user interface interactions for the Duke chatbot.","lastModifiedDate":"2023-09-20"},{"lineNumber":7,"author":{"gitId":"LuoZYi"},"content":" * It provides methods for greeting the user, displaying messages, getting user input,","lastModifiedDate":"2023-09-20"},{"lineNumber":8,"author":{"gitId":"LuoZYi"},"content":" * and closing the input scanner.","lastModifiedDate":"2023-09-20"},{"lineNumber":9,"author":{"gitId":"LuoZYi"},"content":" */","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"LuoZYi"},"content":"public class Ui {","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"LuoZYi"},"content":"    private Scanner scanner;","lastModifiedDate":"2023-09-14"},{"lineNumber":12,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":13,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":14,"author":{"gitId":"LuoZYi"},"content":"     * Constructs a new Ui object and initializes the input scanner to read user input from the console.","lastModifiedDate":"2023-09-20"},{"lineNumber":15,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":16,"author":{"gitId":"LuoZYi"},"content":"    public Ui() {","lastModifiedDate":"2023-09-14"},{"lineNumber":17,"author":{"gitId":"LuoZYi"},"content":"        scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-09-14"},{"lineNumber":18,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":19,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":20,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":21,"author":{"gitId":"LuoZYi"},"content":"     * Displays a greeting message when the chatbot is initialized.","lastModifiedDate":"2023-09-20"},{"lineNumber":22,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":23,"author":{"gitId":"LuoZYi"},"content":"    protected void greeting() {","lastModifiedDate":"2023-09-14"},{"lineNumber":24,"author":{"gitId":"LuoZYi"},"content":"        System.out.println(\"Hello! I\u0027m Lakinta.\");","lastModifiedDate":"2023-09-20"},{"lineNumber":25,"author":{"gitId":"LuoZYi"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-09-20"},{"lineNumber":26,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":27,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":28,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":29,"author":{"gitId":"LuoZYi"},"content":"     * Displays a goodbye message when the chatbot is about to exit.","lastModifiedDate":"2023-09-20"},{"lineNumber":30,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":31,"author":{"gitId":"LuoZYi"},"content":"    protected void exit() {","lastModifiedDate":"2023-09-14"},{"lineNumber":32,"author":{"gitId":"LuoZYi"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-09-14"},{"lineNumber":33,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":34,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":35,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":36,"author":{"gitId":"LuoZYi"},"content":"     * Reads and retrieves user input from the console.","lastModifiedDate":"2023-09-20"},{"lineNumber":37,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":38,"author":{"gitId":"LuoZYi"},"content":"     * @return The user\u0027s input as a string.","lastModifiedDate":"2023-09-20"},{"lineNumber":39,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":40,"author":{"gitId":"LuoZYi"},"content":"    protected String getUserInput() {","lastModifiedDate":"2023-09-14"},{"lineNumber":41,"author":{"gitId":"LuoZYi"},"content":"        return scanner.nextLine();","lastModifiedDate":"2023-09-14"},{"lineNumber":42,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":43,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":44,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":45,"author":{"gitId":"LuoZYi"},"content":"     * Closes the input scanner when it\u0027s no longer needed.","lastModifiedDate":"2023-09-20"},{"lineNumber":46,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":47,"author":{"gitId":"LuoZYi"},"content":"    protected void closeScanner() {","lastModifiedDate":"2023-09-14"},{"lineNumber":48,"author":{"gitId":"LuoZYi"},"content":"        scanner.close();","lastModifiedDate":"2023-09-14"},{"lineNumber":49,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":50,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":51,"author":{"gitId":"LuoZYi"},"content":"    /**","lastModifiedDate":"2023-09-20"},{"lineNumber":52,"author":{"gitId":"LuoZYi"},"content":"     * Displays a message to the user.","lastModifiedDate":"2023-09-20"},{"lineNumber":53,"author":{"gitId":"LuoZYi"},"content":"     *","lastModifiedDate":"2023-09-20"},{"lineNumber":54,"author":{"gitId":"LuoZYi"},"content":"     * @param message The message to be displayed.","lastModifiedDate":"2023-09-20"},{"lineNumber":55,"author":{"gitId":"LuoZYi"},"content":"     */","lastModifiedDate":"2023-09-20"},{"lineNumber":56,"author":{"gitId":"LuoZYi"},"content":"    protected void showMessage(String message) {","lastModifiedDate":"2023-09-14"},{"lineNumber":57,"author":{"gitId":"LuoZYi"},"content":"        System.out.println(message);","lastModifiedDate":"2023-09-14"},{"lineNumber":58,"author":{"gitId":"LuoZYi"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":59,"author":{"gitId":"LuoZYi"},"content":"}","lastModifiedDate":"2023-09-14"},{"lineNumber":60,"author":{"gitId":"LuoZYi"},"content":"","lastModifiedDate":"2023-09-20"}],"authorContributionMap":{"LuoZYi":60}}]
