[{"path":"src/main/java/Corubi.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lululwtv"},"content":"import Tasks.*;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"lululwtv"},"content":"import Parser.Parser;","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"lululwtv"},"content":"import Ui.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"lululwtv"},"content":"import Storage.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"lululwtv"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"lululwtv"},"content":"public class Corubi {","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"lululwtv"},"content":"    private static Ui userUi;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"lululwtv"},"content":"    private static Storage store;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"lululwtv"},"content":"    private static TaskList tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"lululwtv"},"content":"    private static Parser parser;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"lululwtv"},"content":"    private static final String DIRECTORY \u003d \"./src/main/java/OUTPUT.txt\";","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"lululwtv"},"content":"     * Constructs a Corubi instance.","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"lululwtv"},"content":"     * @param dir The directory path for storing data.","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"lululwtv"},"content":"    private Corubi(String dir) {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"lululwtv"},"content":"        this.userUi \u003d new Ui();","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"lululwtv"},"content":"        this.tasks \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"lululwtv"},"content":"        this.parser \u003d new Parser();","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"lululwtv"},"content":"        this.store \u003d new Storage(dir, tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"lululwtv"},"content":"     * Starts the main execution of the Corubi chatbot.","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"lululwtv"},"content":"     * @throws IOException If an I/O operation is interrupted.","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"lululwtv"},"content":"    private static void run() throws IOException {","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"lululwtv"},"content":"        userUi.takeCommands(store, tasks, parser);","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"lululwtv"},"content":"     * The entry point of the Corubi application.","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"lululwtv"},"content":"     * @param args Command-line arguments (not used in this code).","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"lululwtv"},"content":"     * @throws IOException If an I/O operation is interrupted.","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"lululwtv"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"lululwtv"},"content":"        new Corubi(DIRECTORY).run();","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":45,"author":{"gitId":"lululwtv"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"lululwtv":45}},{"path":"src/main/java/CustomExceptions/WrongCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lululwtv"},"content":"package CustomExceptions;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"lululwtv"},"content":"public class WrongCommandException extends Exception {","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"lululwtv"},"content":"    public WrongCommandException(String command) {","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"lululwtv"},"content":"        super(command + \" is not a proper command! \" +","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"lululwtv"},"content":"                \"\\nPlease only use these following commands:\\n\" +","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"lululwtv"},"content":"                \"todo\\n\" +","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"lululwtv"},"content":"                \"deadline\\n\" +","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"lululwtv"},"content":"                \"event\\n\" +","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"lululwtv"},"content":"                \"mark\\n\" +","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"lululwtv"},"content":"                \"unmark\\n\" +","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"lululwtv"},"content":"                \"bye\");","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"lululwtv"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"lululwtv":13}},{"path":"src/main/java/OUTPUT.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lululwtv"},"content":"[E] [] fuck owens mum (from : Oct 2 3409 to: Oct 23 4390)","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"lululwtv":1}},{"path":"src/main/java/Parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lululwtv"},"content":"package Parser;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"lululwtv"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"lululwtv"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"lululwtv"},"content":"public class Parser {","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"lululwtv"},"content":"     * Extracts and returns a number from the given input string.","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"lululwtv"},"content":"     * @param input The input string to search for a number.","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"lululwtv"},"content":"     * @return The extracted number, or 0 if no number is found.","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"lululwtv"},"content":"    public int findNum(String input) {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"lululwtv"},"content":"        // Split the input by spaces","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"lululwtv"},"content":"        String[] splitInput \u003d input.split(\" \");","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"lululwtv"},"content":"        int number \u003d 0;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"lululwtv"},"content":"        // Iterate through the parts to find the number","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"lululwtv"},"content":"        for (String num : splitInput) {","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"lululwtv"},"content":"            try {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"lululwtv"},"content":"                number \u003d Integer.parseInt(num);","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"lululwtv"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"lululwtv"},"content":"                // Not a number, continue searching","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"lululwtv"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"lululwtv"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"lululwtv"},"content":"        return number;","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"lululwtv"},"content":"     * Extracts and returns the task name from the text file.","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"lululwtv"},"content":"     * @param taskinfo The task information from the text file.","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"lululwtv"},"content":"     * @param prefix   The prefix used to identify the task type.","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"lululwtv"},"content":"     * @return The extracted task name.","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"lululwtv"},"content":"    public String taskNameFromTextFile(String taskinfo, String prefix) {","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"lululwtv"},"content":"        return taskinfo.split(prefix)[0].split(\"] \")[2].split(\" \\\\(\")[0] + \" \";","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"lululwtv"},"content":"     * Extracts and returns the task name from the input string.","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"lululwtv"},"content":"     * @param input The user input string.","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"lululwtv"},"content":"     * @return The extracted task name.","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"lululwtv"},"content":"    public String taskName(String input) {","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"lululwtv"},"content":"        // Extract the task name based on the command type","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"lululwtv"},"content":"        String name;","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"lululwtv"},"content":"        if (input.contains(\"todo \")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"lululwtv"},"content":"            name \u003d input.split(\"todo \")[1];","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"lululwtv"},"content":"        } else if (input.contains(\"deadline \")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"lululwtv"},"content":"            String temp \u003d input.split(\"deadline \")[1];","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"lululwtv"},"content":"            String[] splitString \u003d temp.split(\"/by\");","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"lululwtv"},"content":"            name \u003d splitString[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"lululwtv"},"content":"        } else if (input.contains(\"event \")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"lululwtv"},"content":"            String temp \u003d input.split(\"event \")[1];","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"lululwtv"},"content":"            String taskName \u003d temp.split(\"/from\")[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"lululwtv"},"content":"            name \u003d taskName;","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"lululwtv"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"lululwtv"},"content":"            name \u003d \"\";","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"lululwtv"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"lululwtv"},"content":"        return name;","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"lululwtv"},"content":"     * Extracts and returns the task deadline from the input string.","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"lululwtv"},"content":"     * @param input The user input string.","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"lululwtv"},"content":"     * @return The extracted task deadline.","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"lululwtv"},"content":"    public String taskBy(String input) {","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"lululwtv"},"content":"        String temp \u003d input.split(\"deadline \")[1];","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"lululwtv"},"content":"        String[] splitString \u003d temp.split(\"/by\");","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"lululwtv"},"content":"        return splitString[1];","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"lululwtv"},"content":"     * Extracts and returns the task end time from the input string.","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"lululwtv"},"content":"     * @param input The user input string.","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"lululwtv"},"content":"     * @return The extracted task end time.","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"lululwtv"},"content":"    public String taskTo(String input) {","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"lululwtv"},"content":"        String temp \u003d input.split(\"event \")[1];","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"lululwtv"},"content":"        return temp.split(\"/to\")[1];","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"lululwtv"},"content":"     * Extracts and returns the task start time from the input string.","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"lululwtv"},"content":"     * @param input The user input string.","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"lululwtv"},"content":"     * @return The extracted task start time.","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"lululwtv"},"content":"    public String taskFrom(String input) {","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"lululwtv"},"content":"        String temp \u003d input.split(\"event \")[1];","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"lululwtv"},"content":"        String from \u003d temp.split(\" /to \")[0].split(\"/from \")[1];","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"lululwtv"},"content":"        return from;","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"lululwtv"},"content":"     * Extracts and returns the task start time from the text file.","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"lululwtv"},"content":"     * @param taskinfo The task information from the text file.","lastModifiedDate":"2023-08-31"},{"lineNumber":103,"author":{"gitId":"lululwtv"},"content":"     * @return The extracted task start time formatted as yyyy-MM-dd.","lastModifiedDate":"2023-08-31"},{"lineNumber":104,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":105,"author":{"gitId":"lululwtv"},"content":"    public String taskFromFromTextFile(String taskinfo) {","lastModifiedDate":"2023-08-31"},{"lineNumber":106,"author":{"gitId":"lululwtv"},"content":"        // Extract the \"from\" value","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"lululwtv"},"content":"        String fromPrefix \u003d \"from : \";","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"lululwtv"},"content":"        int fromIndex \u003d taskinfo.indexOf(fromPrefix) + fromPrefix.length();","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"lululwtv"},"content":"        int toIndex \u003d taskinfo.indexOf(\" to:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"lululwtv"},"content":"        String taskFromInput \u003d taskinfo.substring(fromIndex, toIndex);","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"lululwtv"},"content":"        // Parse the From input string to a LocalDate object","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"lululwtv"},"content":"        LocalDate from \u003d LocalDate.parse(taskFromInput, DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":114,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":115,"author":{"gitId":"lululwtv"},"content":"        // Format the LocalDate object to the desired output format","lastModifiedDate":"2023-08-31"},{"lineNumber":116,"author":{"gitId":"lululwtv"},"content":"        return from.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":117,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":118,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":119,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":120,"author":{"gitId":"lululwtv"},"content":"     * Extracts and returns the task end time from the text file.","lastModifiedDate":"2023-08-31"},{"lineNumber":121,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":122,"author":{"gitId":"lululwtv"},"content":"     * @param taskinfo The task information from the text file.","lastModifiedDate":"2023-08-31"},{"lineNumber":123,"author":{"gitId":"lululwtv"},"content":"     * @return The extracted task end time formatted as yyyy-MM-dd.","lastModifiedDate":"2023-08-31"},{"lineNumber":124,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":125,"author":{"gitId":"lululwtv"},"content":"    public String taskToFromTextFile(String taskinfo) {","lastModifiedDate":"2023-08-31"},{"lineNumber":126,"author":{"gitId":"lululwtv"},"content":"        // Extract the \"to\" value","lastModifiedDate":"2023-08-31"},{"lineNumber":127,"author":{"gitId":"lululwtv"},"content":"        String toPrefix \u003d \"to: \";","lastModifiedDate":"2023-08-31"},{"lineNumber":128,"author":{"gitId":"lululwtv"},"content":"        int toValueIndex \u003d taskinfo.indexOf(toPrefix) + toPrefix.length();","lastModifiedDate":"2023-08-31"},{"lineNumber":129,"author":{"gitId":"lululwtv"},"content":"        String taskToInput \u003d taskinfo.substring(toValueIndex, toValueIndex + \"MMM d yyyy\".length() + 1);","lastModifiedDate":"2023-08-31"},{"lineNumber":130,"author":{"gitId":"lululwtv"},"content":"        String fromPrefix \u003d \"from : \";","lastModifiedDate":"2023-08-31"},{"lineNumber":131,"author":{"gitId":"lululwtv"},"content":"        int fromIndex \u003d taskinfo.indexOf(fromPrefix) + fromPrefix.length();","lastModifiedDate":"2023-08-31"},{"lineNumber":132,"author":{"gitId":"lululwtv"},"content":"        int toIndex \u003d taskinfo.indexOf(\" to:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":133,"author":{"gitId":"lululwtv"},"content":"        String taskFromInput \u003d taskinfo.substring(fromIndex, toIndex);","lastModifiedDate":"2023-08-31"},{"lineNumber":134,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":135,"author":{"gitId":"lululwtv"},"content":"        // Parse the To input string to a LocalDate object","lastModifiedDate":"2023-08-31"},{"lineNumber":136,"author":{"gitId":"lululwtv"},"content":"        LocalDate to \u003d LocalDate.parse(taskFromInput, DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":137,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":138,"author":{"gitId":"lululwtv"},"content":"        // Format the LocalDate object to the desired output format","lastModifiedDate":"2023-08-31"},{"lineNumber":139,"author":{"gitId":"lululwtv"},"content":"        return to.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":140,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":141,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":142,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":143,"author":{"gitId":"lululwtv"},"content":"     * Extracts and returns the task deadline from the text file.","lastModifiedDate":"2023-08-31"},{"lineNumber":144,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":145,"author":{"gitId":"lululwtv"},"content":"     * @param taskinfo The task information from the text file.","lastModifiedDate":"2023-08-31"},{"lineNumber":146,"author":{"gitId":"lululwtv"},"content":"     * @return The extracted task deadline formatted as yyyy-MM-dd.","lastModifiedDate":"2023-08-31"},{"lineNumber":147,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":148,"author":{"gitId":"lululwtv"},"content":"    public String taskByFromTextFile(String taskinfo) {","lastModifiedDate":"2023-08-31"},{"lineNumber":149,"author":{"gitId":"lululwtv"},"content":"        String byPrefix \u003d \"by : \";","lastModifiedDate":"2023-08-31"},{"lineNumber":150,"author":{"gitId":"lululwtv"},"content":"        int byIndex \u003d taskinfo.indexOf(byPrefix) + byPrefix.length();","lastModifiedDate":"2023-08-31"},{"lineNumber":151,"author":{"gitId":"lululwtv"},"content":"        String taskByInput \u003d taskinfo.substring(byIndex, byIndex + \"MMM d yyyy\".length() + 1);","lastModifiedDate":"2023-08-31"},{"lineNumber":152,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":153,"author":{"gitId":"lululwtv"},"content":"        // Parse the By string to a LocalDate object","lastModifiedDate":"2023-08-31"},{"lineNumber":154,"author":{"gitId":"lululwtv"},"content":"        LocalDate date \u003d LocalDate.parse(taskByInput, DateTimeFormatter.ofPattern(\"MMM d yyyy\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":155,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":156,"author":{"gitId":"lululwtv"},"content":"        // Format the LocalDate object to the desired output format","lastModifiedDate":"2023-08-31"},{"lineNumber":157,"author":{"gitId":"lululwtv"},"content":"        return date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":158,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":159,"author":{"gitId":"lululwtv"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"lululwtv":159}},{"path":"src/main/java/Storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lululwtv"},"content":"package Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"lululwtv"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"lululwtv"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"lululwtv"},"content":"import java.io.File;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"lululwtv"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"lululwtv"},"content":"import Tasks.*;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"lululwtv"},"content":"import Parser.Parser;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"lululwtv"},"content":"import Ui.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"lululwtv"},"content":"public class Storage {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"lululwtv"},"content":"    private FileWriter pw;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"lululwtv"},"content":"    private String currdir;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"lululwtv"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"lululwtv"},"content":"    Ui userUi \u003d new Ui();","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"lululwtv"},"content":"     * Constructor for the Storage class.","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"lululwtv"},"content":"     * @param dir   The directory where the data is stored.","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"lululwtv"},"content":"     * @param tasks The TaskList instance for managing tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"lululwtv"},"content":"    public Storage(String dir, TaskList tasks) {","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"lululwtv"},"content":"        this.currdir \u003d dir;","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"lululwtv"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"lululwtv"},"content":"     * Loads tasks from the OUTPUT.txt file and adds them to the TaskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"lululwtv"},"content":"     * @param parser The Parser instance for parsing task details.","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"lululwtv"},"content":"     * @throws IOException If an I/O operation is interrupted.","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"lululwtv"},"content":"    public void load(Parser parser) throws IOException {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"lululwtv"},"content":"        try (Scanner fileScanner \u003d new Scanner(new File(\"./src/main/java/OUTPUT.txt\"))) {","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"lululwtv"},"content":"            System.out.println(\"Your leftover tasks are:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"lululwtv"},"content":"            int i \u003d 0;","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"lululwtv"},"content":"            while (fileScanner.hasNextLine()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"lululwtv"},"content":"                i++;","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"lululwtv"},"content":"                String taskInfo \u003d fileScanner.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"lululwtv"},"content":"                boolean isDone \u003d taskInfo.contains(\"[X] \");","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"lululwtv"},"content":"                if (taskInfo.contains(\"[T] \")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"lululwtv"},"content":"                    String taskName \u003d parser.taskNameFromTextFile(taskInfo, \"[T] \");","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"lululwtv"},"content":"                    Task newTask \u003d new ToDos(taskName, isDone);","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"lululwtv"},"content":"                    tasks.add(newTask);","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"lululwtv"},"content":"                    System.out.println(i + \". \" + newTask);","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"lululwtv"},"content":"                } else if (taskInfo.contains(\"[E]\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"lululwtv"},"content":"                    String taskName \u003d parser.taskNameFromTextFile(taskInfo, \"[E] \");","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"lululwtv"},"content":"                    String taskFrom \u003d parser.taskFromFromTextFile(taskInfo);","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"lululwtv"},"content":"                    String taskTo \u003d parser.taskToFromTextFile(taskInfo);","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"lululwtv"},"content":"                    Task newTask \u003d new Events(taskName, taskFrom, taskTo, isDone);","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"lululwtv"},"content":"                    tasks.add(newTask);","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"lululwtv"},"content":"                    System.out.println(i + \". \" + newTask);","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"lululwtv"},"content":"                } else if (taskInfo.contains(\"[D]\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"lululwtv"},"content":"                    String taskName \u003d parser.taskNameFromTextFile(taskInfo,\"[D] \");","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"lululwtv"},"content":"                    String taskBy \u003d parser.taskByFromTextFile(taskInfo);","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"lululwtv"},"content":"                    Task newTask \u003d new Deadlines(taskName, taskBy, isDone);","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"lululwtv"},"content":"                    tasks.add(newTask);","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"lululwtv"},"content":"                    System.out.println(i + \". \" + newTask);","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"lululwtv"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"lululwtv"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"lululwtv"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"lululwtv"},"content":"            System.out.println(\"\\nERROR: OUTPUT.txt file is not found in directory ./src/main/java/OUTPUT.txt!\\n\" +","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"lululwtv"},"content":"                    \"Creating OUTPUT.txt in the given directory now.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"lululwtv"},"content":"        } finally {","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"lululwtv"},"content":"            // Instance of PrintWriter to write new outputs to the file","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"lululwtv"},"content":"            pw \u003d new FileWriter(\"./src/main/java/OUTPUT.txt\", true);","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"lululwtv"},"content":"            userUi.start();","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"lululwtv"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"lululwtv"},"content":"     * Writes a task to the OUTPUT.txt file.","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"lululwtv"},"content":"     * @param task The task to be written.","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"lululwtv"},"content":"     * @throws IOException If an I/O operation is interrupted.","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"lululwtv"},"content":"    public void write(Task task) throws IOException {","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"lululwtv"},"content":"        pw.write(task.toString() + \"\\n\");","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"lululwtv"},"content":"        pw.flush();","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"lululwtv"},"content":"     * Overwrites the OUTPUT.txt file with updated task information.","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"lululwtv"},"content":"     * @throws IOException If an I/O operation is interrupted.","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"lululwtv"},"content":"    public void overwrite() throws IOException {","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"lululwtv"},"content":"        FileWriter nw \u003d new FileWriter(currdir);","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"lululwtv"},"content":"        pw \u003d nw;","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"lululwtv"},"content":"        pw.flush();","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"lululwtv"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"lululwtv"},"content":"            write(tasks.retrieve(i));","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"lululwtv"},"content":"            pw.flush();","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"lululwtv"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"lululwtv"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"lululwtv":98}},{"path":"src/main/java/Tasks/Deadlines.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lululwtv"},"content":"package Tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"lululwtv"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"lululwtv"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"lululwtv"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"lululwtv"},"content":"public class Deadlines extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"lululwtv"},"content":"    private LocalDate by;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"lululwtv"},"content":"    public Deadlines(String name, String by, boolean isDone) throws DateTimeParseException {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"lululwtv"},"content":"        super(name, isDone);","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"lululwtv"},"content":"        this.by \u003d LocalDate.parse(by.trim());","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"lululwtv"},"content":"    /*","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"lululwtv"},"content":"    Method name: toString","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"lululwtv"},"content":"    Description: Prints the task name and whether it is done","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"lululwtv"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"lululwtv"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"lululwtv"},"content":"        return \"[D] \" + super.toString() + \"(by : \" + this.by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"lululwtv"},"content":"    /*","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"lululwtv"},"content":"Method name: markDone","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"lululwtv"},"content":"Description: Checks the specified task","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"lululwtv"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"lululwtv"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"lululwtv"},"content":"    public void markDone() {","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"lululwtv"},"content":"        super.markDone();","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"lululwtv"},"content":"        System.out.println(\"Oki, I\u0027ve marked this task as done: \\n\" + this.toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"lululwtv"},"content":"    /*","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"lululwtv"},"content":"    Method name: unmarkDone","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"lululwtv"},"content":"    Description: Unchecks the specified task","lastModifiedDate":"2023-08-24"},{"lineNumber":37,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"lululwtv"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":39,"author":{"gitId":"lululwtv"},"content":"    public void unmarkDone() {","lastModifiedDate":"2023-08-24"},{"lineNumber":40,"author":{"gitId":"lululwtv"},"content":"        super.unmarkDone();","lastModifiedDate":"2023-08-24"},{"lineNumber":41,"author":{"gitId":"lululwtv"},"content":"        System.out.println(\"Damn bro...unmarked this task :( : \\n\" + this.toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":42,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":43,"author":{"gitId":"lululwtv"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"lululwtv":43}},{"path":"src/main/java/Tasks/Events.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lululwtv"},"content":"package Tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"lululwtv"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"lululwtv"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"lululwtv"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"lululwtv"},"content":"public class Events extends Task {","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"lululwtv"},"content":"    private LocalDate from;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"lululwtv"},"content":"    private LocalDate to;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"lululwtv"},"content":"     * Constructor for the Events class.","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"lululwtv"},"content":"     * @param name   The name of the event task.","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"lululwtv"},"content":"     * @param from   The starting date of the event.","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"lululwtv"},"content":"     * @param to     The ending date of the event.","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"lululwtv"},"content":"     * @param isDone Whether the event task is marked as done or not.","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"lululwtv"},"content":"     * @throws DateTimeParseException If there\u0027s an issue parsing the date strings.","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"lululwtv"},"content":"    public Events(String name, String from, String to, boolean isDone) throws DateTimeParseException {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"lululwtv"},"content":"        super(name, isDone);","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"lululwtv"},"content":"        this.from \u003d LocalDate.parse(from.trim());","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"lululwtv"},"content":"        this.to \u003d LocalDate.parse(to.trim());","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":26,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"lululwtv"},"content":"     * Returns a string representation of the event task, including its name, status, and date range.","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"lululwtv"},"content":"     * @return A formatted string representing the event task.","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"lululwtv"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"lululwtv"},"content":"    public String toString() {","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"lululwtv"},"content":"        return \"[E] \" + super.toString() + \"(from : \" + this.from.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \" to: \" + this.to.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":36,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"lululwtv"},"content":"     * Marks the event task as done and provides feedback.","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"lululwtv"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"lululwtv"},"content":"    public void markDone() {","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"lululwtv"},"content":"        super.markDone();","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"lululwtv"},"content":"        System.out.println(\"Oki, I\u0027ve marked this event task as done: \\n\" + this.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"lululwtv"},"content":"     * Unmarks the event task as done and provides feedback.","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"lululwtv"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":49,"author":{"gitId":"lululwtv"},"content":"    public void unmarkDone() {","lastModifiedDate":"2023-08-28"},{"lineNumber":50,"author":{"gitId":"lululwtv"},"content":"        super.unmarkDone();","lastModifiedDate":"2023-08-28"},{"lineNumber":51,"author":{"gitId":"lululwtv"},"content":"        System.out.println(\"Damn bro...unmarked this event task :( : \\n\" + this.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":53,"author":{"gitId":"lululwtv"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"lululwtv":53}},{"path":"src/main/java/Tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lululwtv"},"content":"package Tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"lululwtv"},"content":"public class Task {","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"lululwtv"},"content":"    private boolean isDone;","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"lululwtv"},"content":"    private final String NAME;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"lululwtv"},"content":"    final String DONE \u003d \"[X] \";","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"lululwtv"},"content":"    final String NOTDONE \u003d \"[] \";","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"lululwtv"},"content":"     * Constructor for the Task class.","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"lululwtv"},"content":"     * @param name   The name of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"lululwtv"},"content":"     * @param isDone Whether the task is marked as done or not.","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"lululwtv"},"content":"    Task(String name, boolean isDone) {","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"lululwtv"},"content":"        this.NAME \u003d name;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"lululwtv"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"lululwtv"},"content":"     * Checks if the task is marked as done.","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"lululwtv"},"content":"     * @return True if the task is done, false otherwise.","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"lululwtv"},"content":"    public boolean checkDone() {","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"lululwtv"},"content":"        return isDone;","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"lululwtv"},"content":"     * Returns a string representation of the task, including its name and status.","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"lululwtv"},"content":"     * @return A formatted string representing the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"lululwtv"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"lululwtv"},"content":"        return this.checkDone()","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"lululwtv"},"content":"                ? DONE + this.NAME","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"lululwtv"},"content":"                : NOTDONE + this.NAME;","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":39,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"lululwtv"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":42,"author":{"gitId":"lululwtv"},"content":"    public void markDone() {","lastModifiedDate":"2023-08-24"},{"lineNumber":43,"author":{"gitId":"lululwtv"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":45,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":46,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"lululwtv"},"content":"     * Unmarks the task as done.","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":49,"author":{"gitId":"lululwtv"},"content":"    public void unmarkDone() {","lastModifiedDate":"2023-08-24"},{"lineNumber":50,"author":{"gitId":"lululwtv"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-08-24"},{"lineNumber":51,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":52,"author":{"gitId":"lululwtv"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"lululwtv":52}},{"path":"src/main/java/Tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lululwtv"},"content":"package Tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"lululwtv"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"lululwtv"},"content":"public class TaskList {","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"lululwtv"},"content":"    private ArrayList\u003cTask\u003e enteredText \u003d new ArrayList();","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"lululwtv"},"content":"     * Adds a task to the task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"lululwtv"},"content":"     * @param task The task to be added.","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"lululwtv"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"lululwtv"},"content":"        enteredText.add(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"lululwtv"},"content":"     * Returns the number of tasks in the task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"lululwtv"},"content":"     * @return The number of tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"lululwtv"},"content":"    public int size() {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"lululwtv"},"content":"        return enteredText.size();","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"lululwtv"},"content":"     * Removes a task from the task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"lululwtv"},"content":"     * @param task The task to be removed.","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"lululwtv"},"content":"    public void remove(Task task) {","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"lululwtv"},"content":"        enteredText.remove(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"lululwtv"},"content":"     * Prints the list of tasks with their corresponding indices.","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"lululwtv"},"content":"    public void printList() {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"lululwtv"},"content":"        for (int i \u003d 0; i \u003c enteredText.size(); i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"lululwtv"},"content":"            System.out.printf(\"%d. %s \\n\", i + 1, enteredText.get(i).toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"lululwtv"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"lululwtv"},"content":"     * Retrieves a task from the task list by its index.","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"lululwtv"},"content":"     * @param index The index of the task to retrieve.","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"lululwtv"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"lululwtv"},"content":"    public Task retrieve(int index) {","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"lululwtv"},"content":"        return enteredText.get(index);","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"lululwtv"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"lululwtv":52}},{"path":"src/main/java/Tasks/ToDos.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lululwtv"},"content":"package Tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"lululwtv"},"content":"public class ToDos extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"lululwtv"},"content":"    public ToDos(String name, boolean isDone) {","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"lululwtv"},"content":"        super(name, isDone);","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"lululwtv"},"content":"    /*","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"lululwtv"},"content":"    Method name: toString","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"lululwtv"},"content":"    Description: Prints the task name and whether it is done","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"lululwtv"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"lululwtv"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"lululwtv"},"content":"        return \"[T] \" + super.toString();","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"lululwtv"},"content":"    /*","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"lululwtv"},"content":"    Method name: markDone","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"lululwtv"},"content":"    Description: Checks the specified task","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"lululwtv"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"lululwtv"},"content":"    public void markDone() {","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"lululwtv"},"content":"        super.markDone();","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"lululwtv"},"content":"        System.out.println(\"Oki, I\u0027ve marked this task as done: \\n\" + this.toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"lululwtv"},"content":"    /*","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"lululwtv"},"content":"    Method name: unmarkDone","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"lululwtv"},"content":"    Description: Unchecks the specified task","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"lululwtv"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"lululwtv"},"content":"    public void unmarkDone() {","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"lululwtv"},"content":"        super.unmarkDone();","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"lululwtv"},"content":"        System.out.println(\"Damn bro...unmarked this task :( : \\n\" + this.toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"lululwtv"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"lululwtv":36}},{"path":"src/main/java/Ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"lululwtv"},"content":"package Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"lululwtv"},"content":"import Tasks.*;","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"lululwtv"},"content":"import Parser.Parser;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"lululwtv"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"lululwtv"},"content":"import CustomExceptions.WrongCommandException;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"lululwtv"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"lululwtv"},"content":"import java.util.Collections;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"lululwtv"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"lululwtv"},"content":"import Storage.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"lululwtv"},"content":"public class Ui {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"lululwtv"},"content":"    // Setting of final parameters","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"lululwtv"},"content":"    final String name \u003d \"Corubi\";","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"lululwtv"},"content":"    final String divider \u003d \"---------------------------------------------------\";","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"lululwtv"},"content":"    // Array of Tasks that user has entered","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"lululwtv"},"content":"    String input;","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"lululwtv"},"content":"     * Displays the bot\u0027s greeting message.","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"lululwtv"},"content":"    public void start() {","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"lululwtv"},"content":"        // Initiate the bot greeting","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"lululwtv"},"content":"        System.out.println(divider);","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"lululwtv"},"content":"        System.out.println(\"Hello! I am \" + name + \". \\nWhat can I do for you?\");","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"lululwtv"},"content":"        System.out.println(divider);","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"lululwtv"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"lululwtv"},"content":"     * Handles user input and performs corresponding actions.","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"lululwtv"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"lululwtv"},"content":"     * @param store  The Storage instance for managing data persistence.","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"lululwtv"},"content":"     * @param tasks  The TaskList instance for managing tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"lululwtv"},"content":"     * @param parser The Parser instance for parsing user input.","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"lululwtv"},"content":"     * @throws IOException If an I/O operation is interrupted.","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"lululwtv"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"lululwtv"},"content":"    public void takeCommands(Storage store, TaskList tasks, Parser parser) throws IOException {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"lululwtv"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"lululwtv"},"content":"        store.load(parser);","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"lululwtv"},"content":"        input \u003d sc.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"lululwtv"},"content":"        // List of accepted commands","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"lululwtv"},"content":"        ArrayList\u003cString\u003e commands \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"lululwtv"},"content":"        String[] commandList \u003d {\"todo\", \"deadline\", \"event\", \"mark\", \"unmark\", \"bye\"};","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"lululwtv"},"content":"        Collections.addAll(commands, commandList);","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"lululwtv"},"content":"        // Exit the chatbot if the user says \"bye\"","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"lululwtv"},"content":"        while (!input.equals(\"bye\") \u0026\u0026 !input.equals(\"Bye\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"lululwtv"},"content":"            // If input is \"list\" command, show the list.","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"lululwtv"},"content":"            if (input.equals(\"list\") || input.equals(\"List\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"lululwtv"},"content":"                System.out.println(divider);","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"lululwtv"},"content":"                tasks.printList();","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"lululwtv"},"content":"                input \u003d sc.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"lululwtv"},"content":"            } else if (input.contains(\"unmark\") || input.contains(\"Unmark\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"lululwtv"},"content":"                // If command is unmark, then unmark the item","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"lululwtv"},"content":"                int number \u003d parser.findNum(input);","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"lululwtv"},"content":"                // Handle the exception if number provided is beyond the size of list","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"lululwtv"},"content":"                try {","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"lululwtv"},"content":"                    tasks.retrieve(number - 1).unmarkDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"lululwtv"},"content":"                } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"lululwtv"},"content":"                    System.out.println(number + \" is too high! List size is only \" + tasks.size());","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"lululwtv"},"content":"                } finally {","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"lululwtv"},"content":"                    System.out.println(divider);","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"lululwtv"},"content":"                    store.overwrite();","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"lululwtv"},"content":"                    input \u003d sc.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"lululwtv"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"lululwtv"},"content":"            } else if (input.contains(\"mark\") || input.contains(\"Mark\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"lululwtv"},"content":"                // If the input contains the word mark, mark the item number as done","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"lululwtv"},"content":"                int number \u003d parser.findNum(input);","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"lululwtv"},"content":"                // Handle the exception if number provided is beyond the size of list","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"lululwtv"},"content":"                try {","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"lululwtv"},"content":"                    tasks.retrieve(number - 1).markDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"lululwtv"},"content":"                } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"lululwtv"},"content":"                    System.out.println(number + \" is too high! List size is only \" + tasks.size());","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"lululwtv"},"content":"                } finally {","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"lululwtv"},"content":"                    System.out.println(divider);","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"lululwtv"},"content":"                    store.overwrite();","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"lululwtv"},"content":"                    input \u003d sc.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"lululwtv"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"lululwtv"},"content":"            } else if (input.contains(\"delete\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"lululwtv"},"content":"                // The delete command","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"lululwtv"},"content":"                int number \u003d parser.findNum(input);","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"lululwtv"},"content":"                // Handle the exception if number provided is beyond the size of list","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"lululwtv"},"content":"                try {","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"lululwtv"},"content":"                    Task index \u003d tasks.retrieve(number - 1);","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"lululwtv"},"content":"                    tasks.remove(index);","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"lululwtv"},"content":"                    System.out.printf(\"I have deleted the following task:\\n\" +","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"lululwtv"},"content":"                            \"%s\\n\" +","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"lululwtv"},"content":"                            \"Your list has %d items left\\n\\n\", index.toString(), tasks.size());","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"lululwtv"},"content":"                } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"lululwtv"},"content":"                    System.out.println(number + \" is too high! List size is only \" + tasks.size());","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"lululwtv"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"lululwtv"},"content":"                System.out.println(divider);","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"lululwtv"},"content":"                store.overwrite();","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"lululwtv"},"content":"                input \u003d sc.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"lululwtv"},"content":"            } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":103,"author":{"gitId":"lululwtv"},"content":"                // Add the input to the list","lastModifiedDate":"2023-08-31"},{"lineNumber":104,"author":{"gitId":"lululwtv"},"content":"                if (input.contains(\"todo \")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":105,"author":{"gitId":"lululwtv"},"content":"                    Task newTask \u003d new ToDos(parser.taskName(input), false);","lastModifiedDate":"2023-08-31"},{"lineNumber":106,"author":{"gitId":"lululwtv"},"content":"                    tasks.add(newTask);","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"lululwtv"},"content":"                    store.write(newTask);","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"lululwtv"},"content":"                    System.out.println(\"Okay! I have added the following task\\n\" + newTask);","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"lululwtv"},"content":"                } else if (input.contains(\"deadline \")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"lululwtv"},"content":"                    Task newTask \u003d new Deadlines(parser.taskName(input), parser.taskBy(input), false);","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"lululwtv"},"content":"                    tasks.add(newTask);","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"lululwtv"},"content":"                    System.out.println(\"Okay! I have added the following task\\n\" + newTask);","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"lululwtv"},"content":"                    store.write(newTask);","lastModifiedDate":"2023-08-31"},{"lineNumber":114,"author":{"gitId":"lululwtv"},"content":"                } else if (input.contains(\"event \")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":115,"author":{"gitId":"lululwtv"},"content":"                    Task newTask \u003d new Events(parser.taskName(input), parser.taskFrom(input), parser.taskTo(input), false);","lastModifiedDate":"2023-08-31"},{"lineNumber":116,"author":{"gitId":"lululwtv"},"content":"                    tasks.add(newTask);","lastModifiedDate":"2023-08-31"},{"lineNumber":117,"author":{"gitId":"lululwtv"},"content":"                    System.out.println(\"Okay! I have added the following task\\n\" + newTask.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":118,"author":{"gitId":"lululwtv"},"content":"                    store.write(newTask);","lastModifiedDate":"2023-08-31"},{"lineNumber":119,"author":{"gitId":"lululwtv"},"content":"                } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":120,"author":{"gitId":"lululwtv"},"content":"                    // Check if input command is in the list of accepted commands","lastModifiedDate":"2023-08-31"},{"lineNumber":121,"author":{"gitId":"lululwtv"},"content":"                    try {","lastModifiedDate":"2023-08-31"},{"lineNumber":122,"author":{"gitId":"lululwtv"},"content":"                        if (!commands.contains(input.split(\" \")[0])) {","lastModifiedDate":"2023-08-31"},{"lineNumber":123,"author":{"gitId":"lululwtv"},"content":"                            throw new WrongCommandException(input);","lastModifiedDate":"2023-08-31"},{"lineNumber":124,"author":{"gitId":"lululwtv"},"content":"                        }","lastModifiedDate":"2023-08-31"},{"lineNumber":125,"author":{"gitId":"lululwtv"},"content":"                    } catch (WrongCommandException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":126,"author":{"gitId":"lululwtv"},"content":"                        System.out.println(e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":127,"author":{"gitId":"lululwtv"},"content":"                    }","lastModifiedDate":"2023-08-31"},{"lineNumber":128,"author":{"gitId":"lululwtv"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":129,"author":{"gitId":"lululwtv"},"content":"                System.out.println(divider);","lastModifiedDate":"2023-08-31"},{"lineNumber":130,"author":{"gitId":"lululwtv"},"content":"                input \u003d sc.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":131,"author":{"gitId":"lululwtv"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":132,"author":{"gitId":"lululwtv"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":133,"author":{"gitId":"lululwtv"},"content":"        System.out.println(input + \" \" + input + \"...please come back soon :(\");","lastModifiedDate":"2023-08-31"},{"lineNumber":134,"author":{"gitId":"lululwtv"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":135,"author":{"gitId":"lululwtv"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"lululwtv":135}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"lululwtv"},"content":"todo Buy groceries","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"lululwtv"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"lululwtv"},"content":"mark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"lululwtv"},"content":"unmark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"lululwtv"},"content":"event Birthday party /from 2023-08-25 /to 2023-08-26","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"lululwtv"},"content":"deadline Submit report /by 2023-09-01","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"lululwtv":6}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"lululwtv"},"content":"java -classpath ..\\bin Corubi \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"lululwtv"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"lululwtv"},"content":"pause","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"lululwtv":3,"-":20}}]
