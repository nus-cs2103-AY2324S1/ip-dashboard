[{"path":"src/main/java/Bot.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sopa301"},"content":"import exceptions.*;","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"sopa301"},"content":"import java.io.File;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"sopa301"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"sopa301"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"sopa301"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"sopa301"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"sopa301"},"content":"import java.util.Iterator;","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"sopa301"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"sopa301"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"sopa301"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"sopa301"},"content":" * Main class for the bot.","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"sopa301"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"sopa301"},"content":"public class Bot {","lastModifiedDate":"2023-08-19"},{"lineNumber":16,"author":{"gitId":"sopa301"},"content":"    /** Regex pattern for mark commands. */","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"sopa301"},"content":"    private static final Pattern markPattern \u003d Pattern.compile(\"mark -?\\\\d+\");","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"sopa301"},"content":"    /** Regex pattern for unmark commands. */","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"sopa301"},"content":"    private static final Pattern unmarkPattern \u003d Pattern.compile(\"unmark -?\\\\d+\");","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"sopa301"},"content":"    /** Regex pattern for delete commands. */","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"sopa301"},"content":"    private static final Pattern deletePattern \u003d Pattern.compile(\"delete -?\\\\d+\");","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"sopa301"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-19"},{"lineNumber":23,"author":{"gitId":"sopa301"},"content":"        ArrayList\u003cTask\u003e lst \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"sopa301"},"content":"        File dataDir \u003d new File(\"./data\");","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"sopa301"},"content":"        File f \u003d new File(\"./data/bot.txt\");","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"sopa301"},"content":"        try {","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"sopa301"},"content":"            if (dataDir.isDirectory() \u0026\u0026 f.isFile()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"sopa301"},"content":"                Scanner scanner \u003d new Scanner(f);","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"sopa301"},"content":"                populateList(scanner, lst);","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"sopa301"},"content":"            } else {","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"sopa301"},"content":"                System.out.println(\"No data found, creating...\");","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"sopa301"},"content":"                dataDir.mkdir();","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"sopa301"},"content":"                f.createNewFile();","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"sopa301"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"sopa301"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"sopa301"},"content":"            // It shouldn\u0027t reach here.","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"sopa301"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"sopa301"},"content":"            return;","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"sopa301"},"content":"        } catch (IOException | SecurityException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"sopa301"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"sopa301"},"content":"            return;","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"sopa301"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-20"},{"lineNumber":44,"author":{"gitId":"sopa301"},"content":"        System.out.println(\"Hello! I\u0027m the trash gremlin Caelus!\\nWhat can I do for you?\");","lastModifiedDate":"2023-08-20"},{"lineNumber":45,"author":{"gitId":"sopa301"},"content":"        while (true) {","lastModifiedDate":"2023-08-20"},{"lineNumber":46,"author":{"gitId":"sopa301"},"content":"            try {","lastModifiedDate":"2023-08-20"},{"lineNumber":47,"author":{"gitId":"sopa301"},"content":"                String str \u003d sc.nextLine();","lastModifiedDate":"2023-08-20"},{"lineNumber":48,"author":{"gitId":"sopa301"},"content":"                if (str.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2023-08-20"},{"lineNumber":49,"author":{"gitId":"sopa301"},"content":"                    break;","lastModifiedDate":"2023-08-20"},{"lineNumber":50,"author":{"gitId":"sopa301"},"content":"                } else if (str.equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2023-08-20"},{"lineNumber":51,"author":{"gitId":"sopa301"},"content":"                    displayList(lst);","lastModifiedDate":"2023-08-20"},{"lineNumber":52,"author":{"gitId":"sopa301"},"content":"                } else if (str.startsWith(\"mark \")) {","lastModifiedDate":"2023-08-20"},{"lineNumber":53,"author":{"gitId":"sopa301"},"content":"                    markTask(str, lst);","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"sopa301"},"content":"                } else if (str.startsWith(\"unmark \")) {","lastModifiedDate":"2023-08-20"},{"lineNumber":55,"author":{"gitId":"sopa301"},"content":"                    unmarkTask(str, lst);","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"sopa301"},"content":"                } else if (Task.isTaskCommand(str)) {","lastModifiedDate":"2023-08-20"},{"lineNumber":57,"author":{"gitId":"sopa301"},"content":"                    addTask(str, lst);","lastModifiedDate":"2023-08-24"},{"lineNumber":58,"author":{"gitId":"sopa301"},"content":"                } else if (str.startsWith(\"delete \")) {","lastModifiedDate":"2023-08-20"},{"lineNumber":59,"author":{"gitId":"sopa301"},"content":"                    deleteTask(str, lst);","lastModifiedDate":"2023-08-24"},{"lineNumber":60,"author":{"gitId":"sopa301"},"content":"                } else {","lastModifiedDate":"2023-08-20"},{"lineNumber":61,"author":{"gitId":"sopa301"},"content":"                    throw new InvalidCommandException();","lastModifiedDate":"2023-08-20"},{"lineNumber":62,"author":{"gitId":"sopa301"},"content":"                }","lastModifiedDate":"2023-08-20"},{"lineNumber":63,"author":{"gitId":"sopa301"},"content":"                saveToFile(lst, f);","lastModifiedDate":"2023-08-25"},{"lineNumber":64,"author":{"gitId":"sopa301"},"content":"            } catch (BotException e) {","lastModifiedDate":"2023-08-20"},{"lineNumber":65,"author":{"gitId":"sopa301"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-08-20"},{"lineNumber":66,"author":{"gitId":"sopa301"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":67,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-19"},{"lineNumber":68,"author":{"gitId":"sopa301"},"content":"        System.out.println(\"Bye. I\u0027ll be at the nearest trash can!\");","lastModifiedDate":"2023-08-20"},{"lineNumber":69,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":70,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":71,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":72,"author":{"gitId":"sopa301"},"content":"     * Using a scanner with a data string on each line, add Tasks to the list provided.","lastModifiedDate":"2023-08-25"},{"lineNumber":73,"author":{"gitId":"sopa301"},"content":"     *","lastModifiedDate":"2023-08-25"},{"lineNumber":74,"author":{"gitId":"sopa301"},"content":"     * @param scanner Scanner object.","lastModifiedDate":"2023-08-25"},{"lineNumber":75,"author":{"gitId":"sopa301"},"content":"     * @param lst List to add tasks to.","lastModifiedDate":"2023-08-25"},{"lineNumber":76,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":77,"author":{"gitId":"sopa301"},"content":"    private static void populateList(Scanner scanner, ArrayList\u003cTask\u003e lst) {","lastModifiedDate":"2023-08-25"},{"lineNumber":78,"author":{"gitId":"sopa301"},"content":"        while (scanner.hasNextLine()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":79,"author":{"gitId":"sopa301"},"content":"            try {","lastModifiedDate":"2023-08-25"},{"lineNumber":80,"author":{"gitId":"sopa301"},"content":"                lst.add(Task.convertFromString(scanner.nextLine()));","lastModifiedDate":"2023-08-25"},{"lineNumber":81,"author":{"gitId":"sopa301"},"content":"            } catch (InvalidTaskException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":82,"author":{"gitId":"sopa301"},"content":"                System.out.println(\"Invalid task, skipping...\");","lastModifiedDate":"2023-08-25"},{"lineNumber":83,"author":{"gitId":"sopa301"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":84,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":85,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":86,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":87,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":88,"author":{"gitId":"sopa301"},"content":"     * Prints the list to console. Throws an EmptyListException if the list is empty.","lastModifiedDate":"2023-08-24"},{"lineNumber":89,"author":{"gitId":"sopa301"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":90,"author":{"gitId":"sopa301"},"content":"     * @param lst List to print.","lastModifiedDate":"2023-08-24"},{"lineNumber":91,"author":{"gitId":"sopa301"},"content":"     * @throws exceptions.EmptyListException If the list is empty.","lastModifiedDate":"2023-08-24"},{"lineNumber":92,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":93,"author":{"gitId":"sopa301"},"content":"    private static void displayList(ArrayList\u003cTask\u003e lst) throws EmptyListException {","lastModifiedDate":"2023-08-20"},{"lineNumber":94,"author":{"gitId":"sopa301"},"content":"        if (lst.size() \u003d\u003d 0) {","lastModifiedDate":"2023-08-20"},{"lineNumber":95,"author":{"gitId":"sopa301"},"content":"            throw new EmptyListException();","lastModifiedDate":"2023-08-20"},{"lineNumber":96,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":97,"author":{"gitId":"sopa301"},"content":"        StringBuilder out \u003d new StringBuilder().append(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2023-08-20"},{"lineNumber":98,"author":{"gitId":"sopa301"},"content":"        Iterator\u003cTask\u003e iter \u003d lst.iterator();","lastModifiedDate":"2023-08-20"},{"lineNumber":99,"author":{"gitId":"sopa301"},"content":"        int ctr \u003d 1;","lastModifiedDate":"2023-08-20"},{"lineNumber":100,"author":{"gitId":"sopa301"},"content":"        while (iter.hasNext()) {","lastModifiedDate":"2023-08-20"},{"lineNumber":101,"author":{"gitId":"sopa301"},"content":"            out.append(ctr).append(\". \").append(iter.next().toString()).append(\"\\n\");","lastModifiedDate":"2023-08-20"},{"lineNumber":102,"author":{"gitId":"sopa301"},"content":"            ctr++;","lastModifiedDate":"2023-08-20"},{"lineNumber":103,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":104,"author":{"gitId":"sopa301"},"content":"        out.deleteCharAt(out.length() - 1);","lastModifiedDate":"2023-08-20"},{"lineNumber":105,"author":{"gitId":"sopa301"},"content":"        System.out.println(out);","lastModifiedDate":"2023-08-24"},{"lineNumber":106,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":107,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":108,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":109,"author":{"gitId":"sopa301"},"content":"     * Prints the length of the list to console.","lastModifiedDate":"2023-08-24"},{"lineNumber":110,"author":{"gitId":"sopa301"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":111,"author":{"gitId":"sopa301"},"content":"     * @param lst List to print the length of.","lastModifiedDate":"2023-08-24"},{"lineNumber":112,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":113,"author":{"gitId":"sopa301"},"content":"    private static void displayListLength(ArrayList\u003cTask\u003e lst) {","lastModifiedDate":"2023-08-20"},{"lineNumber":114,"author":{"gitId":"sopa301"},"content":"        System.out.println(\"Now you have \" + lst.size() + \" task(s) in the list.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":115,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":116,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":117,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":118,"author":{"gitId":"sopa301"},"content":"     * Adds a task to the list and prints corresponding messages to the console.","lastModifiedDate":"2023-08-24"},{"lineNumber":119,"author":{"gitId":"sopa301"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":120,"author":{"gitId":"sopa301"},"content":"     * @param str Raw string to convert into a Task object.","lastModifiedDate":"2023-08-24"},{"lineNumber":121,"author":{"gitId":"sopa301"},"content":"     * @param lst List to add the task to.","lastModifiedDate":"2023-08-24"},{"lineNumber":122,"author":{"gitId":"sopa301"},"content":"     * @throws exceptions.InvalidTaskException If the task cannot be created from the string.","lastModifiedDate":"2023-08-24"},{"lineNumber":123,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":124,"author":{"gitId":"sopa301"},"content":"    private static void addTask(String str, ArrayList\u003cTask\u003e lst) throws InvalidTaskException {","lastModifiedDate":"2023-08-24"},{"lineNumber":125,"author":{"gitId":"sopa301"},"content":"        Task newTask \u003d Task.makeTask(str);","lastModifiedDate":"2023-08-24"},{"lineNumber":126,"author":{"gitId":"sopa301"},"content":"        System.out.println(\"Added:\\n\" + newTask.toString());","lastModifiedDate":"2023-08-20"},{"lineNumber":127,"author":{"gitId":"sopa301"},"content":"        lst.add(newTask);","lastModifiedDate":"2023-08-20"},{"lineNumber":128,"author":{"gitId":"sopa301"},"content":"        displayListLength(lst);","lastModifiedDate":"2023-08-20"},{"lineNumber":129,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":130,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":131,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":132,"author":{"gitId":"sopa301"},"content":"     * Marks the task in the list and prints corresponding messages to the console.","lastModifiedDate":"2023-08-24"},{"lineNumber":133,"author":{"gitId":"sopa301"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":134,"author":{"gitId":"sopa301"},"content":"     * @param str Raw string containing the command to mark the task.","lastModifiedDate":"2023-08-24"},{"lineNumber":135,"author":{"gitId":"sopa301"},"content":"     * @param lst List the task is in.","lastModifiedDate":"2023-08-24"},{"lineNumber":136,"author":{"gitId":"sopa301"},"content":"     * @throws exceptions.InvalidIndexException If a task does not exist at that index.","lastModifiedDate":"2023-08-24"},{"lineNumber":137,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":138,"author":{"gitId":"sopa301"},"content":"    private static void markTask(String str, ArrayList\u003cTask\u003e lst) throws InvalidIndexException {","lastModifiedDate":"2023-08-24"},{"lineNumber":139,"author":{"gitId":"sopa301"},"content":"        if (!markPattern.matcher(str).matches()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":140,"author":{"gitId":"sopa301"},"content":"            throw new InvalidIndexException();","lastModifiedDate":"2023-08-24"},{"lineNumber":141,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":142,"author":{"gitId":"sopa301"},"content":"        int index \u003d Integer.parseInt(str.substring(5)) - 1;","lastModifiedDate":"2023-08-24"},{"lineNumber":143,"author":{"gitId":"sopa301"},"content":"        if (index \u003c 0 || index \u003e\u003d lst.size()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":144,"author":{"gitId":"sopa301"},"content":"            throw new InvalidIndexException();","lastModifiedDate":"2023-08-24"},{"lineNumber":145,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":146,"author":{"gitId":"sopa301"},"content":"        lst.get(index).mark();","lastModifiedDate":"2023-08-24"},{"lineNumber":147,"author":{"gitId":"sopa301"},"content":"        System.out.println(\"I\u0027ll mark this as done:\\n\" + lst.get(index).toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":148,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":149,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":150,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":151,"author":{"gitId":"sopa301"},"content":"     * Unmarks a task in a list and prints corresponding messages to the console.","lastModifiedDate":"2023-08-24"},{"lineNumber":152,"author":{"gitId":"sopa301"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":153,"author":{"gitId":"sopa301"},"content":"     * @param str Raw string containing the command to unmark the task.","lastModifiedDate":"2023-08-24"},{"lineNumber":154,"author":{"gitId":"sopa301"},"content":"     * @param lst List the task is in.","lastModifiedDate":"2023-08-24"},{"lineNumber":155,"author":{"gitId":"sopa301"},"content":"     * @throws exceptions.InvalidIndexException If a task does not exist at that index.","lastModifiedDate":"2023-08-24"},{"lineNumber":156,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":157,"author":{"gitId":"sopa301"},"content":"    private static void unmarkTask(String str, ArrayList\u003cTask\u003e lst) throws InvalidIndexException {","lastModifiedDate":"2023-08-24"},{"lineNumber":158,"author":{"gitId":"sopa301"},"content":"        if (!unmarkPattern.matcher(str).matches()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":159,"author":{"gitId":"sopa301"},"content":"            throw new InvalidIndexException();","lastModifiedDate":"2023-08-24"},{"lineNumber":160,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":161,"author":{"gitId":"sopa301"},"content":"        int index \u003d Integer.parseInt(str.substring(7)) - 1;","lastModifiedDate":"2023-08-24"},{"lineNumber":162,"author":{"gitId":"sopa301"},"content":"        if (index \u003c 0 || index \u003e\u003d lst.size()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":163,"author":{"gitId":"sopa301"},"content":"            throw new InvalidIndexException();","lastModifiedDate":"2023-08-24"},{"lineNumber":164,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":165,"author":{"gitId":"sopa301"},"content":"        lst.get(index).unmark();","lastModifiedDate":"2023-08-24"},{"lineNumber":166,"author":{"gitId":"sopa301"},"content":"        System.out.println(\"I\u0027ll mark this as not done:\\n\" + lst.get(index).toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":167,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":168,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":169,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":170,"author":{"gitId":"sopa301"},"content":"     * Deletes a task from the list and prints corresponding messages to the console.","lastModifiedDate":"2023-08-24"},{"lineNumber":171,"author":{"gitId":"sopa301"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":172,"author":{"gitId":"sopa301"},"content":"     * @param str Raw string containing the command to delete a task.","lastModifiedDate":"2023-08-24"},{"lineNumber":173,"author":{"gitId":"sopa301"},"content":"     * @param lst List to delete the task from.","lastModifiedDate":"2023-08-24"},{"lineNumber":174,"author":{"gitId":"sopa301"},"content":"     * @throws exceptions.InvalidIndexException If a task does not exist at that index.","lastModifiedDate":"2023-08-24"},{"lineNumber":175,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":176,"author":{"gitId":"sopa301"},"content":"    private static void deleteTask(String str, ArrayList\u003cTask\u003e lst) throws InvalidIndexException {","lastModifiedDate":"2023-08-24"},{"lineNumber":177,"author":{"gitId":"sopa301"},"content":"        if (!deletePattern.matcher(str).matches()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":178,"author":{"gitId":"sopa301"},"content":"            throw new InvalidIndexException();","lastModifiedDate":"2023-08-24"},{"lineNumber":179,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":180,"author":{"gitId":"sopa301"},"content":"        int index \u003d Integer.parseInt(str.substring(7)) - 1;","lastModifiedDate":"2023-08-24"},{"lineNumber":181,"author":{"gitId":"sopa301"},"content":"        if (index \u003c 0 || index \u003e\u003d lst.size()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":182,"author":{"gitId":"sopa301"},"content":"            throw new InvalidIndexException();","lastModifiedDate":"2023-08-24"},{"lineNumber":183,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":184,"author":{"gitId":"sopa301"},"content":"        System.out.println(\"I\u0027ve removed this task:\\n\" + lst.remove(index).toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":185,"author":{"gitId":"sopa301"},"content":"        displayListLength(lst);","lastModifiedDate":"2023-08-24"},{"lineNumber":186,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":187,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":188,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":189,"author":{"gitId":"sopa301"},"content":"     * Saves the list to the given file. Overwrites content of the file.","lastModifiedDate":"2023-08-25"},{"lineNumber":190,"author":{"gitId":"sopa301"},"content":"     *","lastModifiedDate":"2023-08-25"},{"lineNumber":191,"author":{"gitId":"sopa301"},"content":"     * @param lst List to save.","lastModifiedDate":"2023-08-25"},{"lineNumber":192,"author":{"gitId":"sopa301"},"content":"     * @param f File to save list to.","lastModifiedDate":"2023-08-25"},{"lineNumber":193,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":194,"author":{"gitId":"sopa301"},"content":"    public static void saveToFile(ArrayList\u003cTask\u003e lst, File f) {","lastModifiedDate":"2023-08-25"},{"lineNumber":195,"author":{"gitId":"sopa301"},"content":"        if (lst.size() \u003c 1) {","lastModifiedDate":"2023-08-25"},{"lineNumber":196,"author":{"gitId":"sopa301"},"content":"            return;","lastModifiedDate":"2023-08-25"},{"lineNumber":197,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":198,"author":{"gitId":"sopa301"},"content":"        try {","lastModifiedDate":"2023-08-25"},{"lineNumber":199,"author":{"gitId":"sopa301"},"content":"            FileWriter fw \u003d new FileWriter(f);","lastModifiedDate":"2023-08-25"},{"lineNumber":200,"author":{"gitId":"sopa301"},"content":"            for (int i \u003d 0; i \u003c lst.size() - 1; i++) {","lastModifiedDate":"2023-08-25"},{"lineNumber":201,"author":{"gitId":"sopa301"},"content":"                fw.write(lst.get(i).convertToDataString());","lastModifiedDate":"2023-08-25"},{"lineNumber":202,"author":{"gitId":"sopa301"},"content":"                fw.write(System.lineSeparator());","lastModifiedDate":"2023-08-25"},{"lineNumber":203,"author":{"gitId":"sopa301"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":204,"author":{"gitId":"sopa301"},"content":"            fw.write(lst.get(lst.size() - 1).convertToDataString());","lastModifiedDate":"2023-08-25"},{"lineNumber":205,"author":{"gitId":"sopa301"},"content":"            fw.close();","lastModifiedDate":"2023-08-25"},{"lineNumber":206,"author":{"gitId":"sopa301"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":207,"author":{"gitId":"sopa301"},"content":"            System.out.println(\"Can\u0027t write to file.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":208,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":209,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":210,"author":{"gitId":"sopa301"},"content":"}","lastModifiedDate":"2023-08-19"}],"authorContributionMap":{"sopa301":210}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sopa301"},"content":"import exceptions.InvalidTaskException;","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"sopa301"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"sopa301"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"sopa301"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"sopa301"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"sopa301"},"content":" * Abstract task class for tasks that can be created for the task list in the chatbot.","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"sopa301"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"sopa301"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"sopa301"},"content":"     * Indicates if the task is completed.","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"sopa301"},"content":"    private boolean isDone \u003d false;","lastModifiedDate":"2023-08-20"},{"lineNumber":15,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"sopa301"},"content":"     * Name of the task","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"sopa301"},"content":"    private final String name;","lastModifiedDate":"2023-08-20"},{"lineNumber":19,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"sopa301"},"content":"     * Default constructor.","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"sopa301"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"sopa301"},"content":"     * @param name Name of the task.","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"sopa301"},"content":"    public Task(String name) {","lastModifiedDate":"2023-08-20"},{"lineNumber":26,"author":{"gitId":"sopa301"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-08-20"},{"lineNumber":27,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":28,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"sopa301"},"content":"     * Alternative constructor. Usually used when reading data from a file.","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"sopa301"},"content":"     *","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"sopa301"},"content":"     * @param name Name of the task.","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"sopa301"},"content":"     * @param isDone Completion status of task.","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"sopa301"},"content":"    protected Task(String name, boolean isDone) {","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"sopa301"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"sopa301"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":41,"author":{"gitId":"sopa301"},"content":"     * Gets completion status of the task.","lastModifiedDate":"2023-08-24"},{"lineNumber":42,"author":{"gitId":"sopa301"},"content":"     * @return True if the task is complete, false otherwise.","lastModifiedDate":"2023-08-24"},{"lineNumber":43,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"sopa301"},"content":"    @SuppressWarnings(\"BooleanMethodIsAlwaysInverted\")","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"sopa301"},"content":"    protected boolean isDone() {","lastModifiedDate":"2023-08-20"},{"lineNumber":46,"author":{"gitId":"sopa301"},"content":"        return this.isDone;","lastModifiedDate":"2023-08-20"},{"lineNumber":47,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":48,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":49,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":50,"author":{"gitId":"sopa301"},"content":"     * Gets the name of the task.","lastModifiedDate":"2023-08-24"},{"lineNumber":51,"author":{"gitId":"sopa301"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":52,"author":{"gitId":"sopa301"},"content":"     * @return Name of the task.","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"sopa301"},"content":"    protected String getName() {","lastModifiedDate":"2023-08-20"},{"lineNumber":55,"author":{"gitId":"sopa301"},"content":"        return this.name;","lastModifiedDate":"2023-08-20"},{"lineNumber":56,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":57,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":58,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":59,"author":{"gitId":"sopa301"},"content":"     * Gets the string representation of the task.","lastModifiedDate":"2023-08-24"},{"lineNumber":60,"author":{"gitId":"sopa301"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":61,"author":{"gitId":"sopa301"},"content":"     * @return String representation of task.","lastModifiedDate":"2023-08-24"},{"lineNumber":62,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":63,"author":{"gitId":"sopa301"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":64,"author":{"gitId":"sopa301"},"content":"    public String toString() {","lastModifiedDate":"2023-08-25"},{"lineNumber":65,"author":{"gitId":"sopa301"},"content":"        return \"[\" + (this.isDone() ? \"X\" : \" \") + \"] \" + this.getName();","lastModifiedDate":"2023-08-25"},{"lineNumber":66,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":67,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":68,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":69,"author":{"gitId":"sopa301"},"content":"     * Changes the task\u0027s completion status to complete.","lastModifiedDate":"2023-08-24"},{"lineNumber":70,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":71,"author":{"gitId":"sopa301"},"content":"    public void mark() {","lastModifiedDate":"2023-08-20"},{"lineNumber":72,"author":{"gitId":"sopa301"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-20"},{"lineNumber":73,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":74,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":75,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":76,"author":{"gitId":"sopa301"},"content":"     * Changes the task\u0027s completion status to incomplete.","lastModifiedDate":"2023-08-24"},{"lineNumber":77,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":78,"author":{"gitId":"sopa301"},"content":"    public void unmark() {","lastModifiedDate":"2023-08-20"},{"lineNumber":79,"author":{"gitId":"sopa301"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-20"},{"lineNumber":80,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":81,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":82,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":83,"author":{"gitId":"sopa301"},"content":"     * Creates a task based on the string input. Throws an InvalidTaskException","lastModifiedDate":"2023-08-24"},{"lineNumber":84,"author":{"gitId":"sopa301"},"content":"     * if no task can be created from the string.","lastModifiedDate":"2023-08-24"},{"lineNumber":85,"author":{"gitId":"sopa301"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":86,"author":{"gitId":"sopa301"},"content":"     * @param str Raw string to create task from.","lastModifiedDate":"2023-08-24"},{"lineNumber":87,"author":{"gitId":"sopa301"},"content":"     * @return Task object containing information from the string.","lastModifiedDate":"2023-08-24"},{"lineNumber":88,"author":{"gitId":"sopa301"},"content":"     * @throws InvalidTaskException If no task can be created.","lastModifiedDate":"2023-08-24"},{"lineNumber":89,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":90,"author":{"gitId":"sopa301"},"content":"    public static Task makeTask(String str) throws InvalidTaskException {","lastModifiedDate":"2023-08-20"},{"lineNumber":91,"author":{"gitId":"sopa301"},"content":"        Task newTask;","lastModifiedDate":"2023-08-20"},{"lineNumber":92,"author":{"gitId":"sopa301"},"content":"        if (str.startsWith(\"todo \")) {","lastModifiedDate":"2023-08-20"},{"lineNumber":93,"author":{"gitId":"sopa301"},"content":"            newTask \u003d ToDo.makeToDo(str);","lastModifiedDate":"2023-08-25"},{"lineNumber":94,"author":{"gitId":"sopa301"},"content":"        } else if (str.startsWith(\"deadline \")) {","lastModifiedDate":"2023-08-20"},{"lineNumber":95,"author":{"gitId":"sopa301"},"content":"            newTask \u003d Deadline.makeDeadline(str);","lastModifiedDate":"2023-08-25"},{"lineNumber":96,"author":{"gitId":"sopa301"},"content":"        } else {","lastModifiedDate":"2023-08-20"},{"lineNumber":97,"author":{"gitId":"sopa301"},"content":"            newTask \u003d Event.makeEvent(str);","lastModifiedDate":"2023-08-25"},{"lineNumber":98,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":99,"author":{"gitId":"sopa301"},"content":"        return newTask;","lastModifiedDate":"2023-08-20"},{"lineNumber":100,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":101,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":102,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":103,"author":{"gitId":"sopa301"},"content":"     * Reads a string of standardised data and constructs a Task object based on the information.","lastModifiedDate":"2023-08-25"},{"lineNumber":104,"author":{"gitId":"sopa301"},"content":"     *","lastModifiedDate":"2023-08-25"},{"lineNumber":105,"author":{"gitId":"sopa301"},"content":"     * @param str Data string.","lastModifiedDate":"2023-08-25"},{"lineNumber":106,"author":{"gitId":"sopa301"},"content":"     * @return Task object.","lastModifiedDate":"2023-08-25"},{"lineNumber":107,"author":{"gitId":"sopa301"},"content":"     * @throws InvalidTaskException If the task object cannot be created from the string.","lastModifiedDate":"2023-08-25"},{"lineNumber":108,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":109,"author":{"gitId":"sopa301"},"content":"    public static Task convertFromString(String str) throws InvalidTaskException {","lastModifiedDate":"2023-08-25"},{"lineNumber":110,"author":{"gitId":"sopa301"},"content":"        if (str.startsWith(\"t\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":111,"author":{"gitId":"sopa301"},"content":"            return ToDo.convertFromString(str);","lastModifiedDate":"2023-08-25"},{"lineNumber":112,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":113,"author":{"gitId":"sopa301"},"content":"        if (str.startsWith(\"d\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":114,"author":{"gitId":"sopa301"},"content":"            return Deadline.convertFromString(str);","lastModifiedDate":"2023-08-25"},{"lineNumber":115,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":116,"author":{"gitId":"sopa301"},"content":"        return Event.convertFromString(str);","lastModifiedDate":"2023-08-25"},{"lineNumber":117,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":118,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":119,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-25"},{"lineNumber":120,"author":{"gitId":"sopa301"},"content":"     * Creates data string of task.","lastModifiedDate":"2023-08-25"},{"lineNumber":121,"author":{"gitId":"sopa301"},"content":"     *","lastModifiedDate":"2023-08-25"},{"lineNumber":122,"author":{"gitId":"sopa301"},"content":"     * @return Data string.","lastModifiedDate":"2023-08-25"},{"lineNumber":123,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-25"},{"lineNumber":124,"author":{"gitId":"sopa301"},"content":"    public abstract String convertToDataString();","lastModifiedDate":"2023-08-25"},{"lineNumber":125,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":126,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":127,"author":{"gitId":"sopa301"},"content":"     * Checks if the raw string contains a task command.","lastModifiedDate":"2023-08-24"},{"lineNumber":128,"author":{"gitId":"sopa301"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":129,"author":{"gitId":"sopa301"},"content":"     * @param str Raw string to check.","lastModifiedDate":"2023-08-24"},{"lineNumber":130,"author":{"gitId":"sopa301"},"content":"     * @return True if a task command is found, false otherwise.","lastModifiedDate":"2023-08-24"},{"lineNumber":131,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":132,"author":{"gitId":"sopa301"},"content":"    public static boolean isTaskCommand(String str) {","lastModifiedDate":"2023-08-20"},{"lineNumber":133,"author":{"gitId":"sopa301"},"content":"        return str.startsWith(\"todo \") || str.startsWith(\"event \") ||str.startsWith(\"deadline \");","lastModifiedDate":"2023-08-20"},{"lineNumber":134,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":135,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":136,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":137,"author":{"gitId":"sopa301"},"content":"     * ToDo subclass. Contains a name.","lastModifiedDate":"2023-08-24"},{"lineNumber":138,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":139,"author":{"gitId":"sopa301"},"content":"    public static class ToDo extends Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":140,"author":{"gitId":"sopa301"},"content":"        /**","lastModifiedDate":"2023-08-24"},{"lineNumber":141,"author":{"gitId":"sopa301"},"content":"         * Default constructor.","lastModifiedDate":"2023-08-24"},{"lineNumber":142,"author":{"gitId":"sopa301"},"content":"         * @param name Name of task.","lastModifiedDate":"2023-08-24"},{"lineNumber":143,"author":{"gitId":"sopa301"},"content":"         */","lastModifiedDate":"2023-08-24"},{"lineNumber":144,"author":{"gitId":"sopa301"},"content":"        public ToDo(String name) {","lastModifiedDate":"2023-08-20"},{"lineNumber":145,"author":{"gitId":"sopa301"},"content":"            super(name);","lastModifiedDate":"2023-08-20"},{"lineNumber":146,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":147,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":148,"author":{"gitId":"sopa301"},"content":"        /**","lastModifiedDate":"2023-08-25"},{"lineNumber":149,"author":{"gitId":"sopa301"},"content":"         * Alternative constructor. Usually used when reading data from a file.","lastModifiedDate":"2023-08-25"},{"lineNumber":150,"author":{"gitId":"sopa301"},"content":"         *","lastModifiedDate":"2023-08-25"},{"lineNumber":151,"author":{"gitId":"sopa301"},"content":"         * @param name Name of ToDo.","lastModifiedDate":"2023-08-25"},{"lineNumber":152,"author":{"gitId":"sopa301"},"content":"         * @param isDone Completion status of Todo.","lastModifiedDate":"2023-08-25"},{"lineNumber":153,"author":{"gitId":"sopa301"},"content":"         */","lastModifiedDate":"2023-08-25"},{"lineNumber":154,"author":{"gitId":"sopa301"},"content":"        protected ToDo(String name, boolean isDone) {","lastModifiedDate":"2023-08-25"},{"lineNumber":155,"author":{"gitId":"sopa301"},"content":"            super(name, isDone);","lastModifiedDate":"2023-08-25"},{"lineNumber":156,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":157,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":158,"author":{"gitId":"sopa301"},"content":"        /**","lastModifiedDate":"2023-08-24"},{"lineNumber":159,"author":{"gitId":"sopa301"},"content":"         * String representation of the todo.","lastModifiedDate":"2023-08-24"},{"lineNumber":160,"author":{"gitId":"sopa301"},"content":"         *","lastModifiedDate":"2023-08-24"},{"lineNumber":161,"author":{"gitId":"sopa301"},"content":"         * @return String representation.","lastModifiedDate":"2023-08-24"},{"lineNumber":162,"author":{"gitId":"sopa301"},"content":"         */","lastModifiedDate":"2023-08-24"},{"lineNumber":163,"author":{"gitId":"sopa301"},"content":"        @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":164,"author":{"gitId":"sopa301"},"content":"        public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":165,"author":{"gitId":"sopa301"},"content":"            return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-25"},{"lineNumber":166,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":167,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":168,"author":{"gitId":"sopa301"},"content":"        /**","lastModifiedDate":"2023-08-25"},{"lineNumber":169,"author":{"gitId":"sopa301"},"content":"         * Reads a string of standardised data and creates a ToDo object.","lastModifiedDate":"2023-08-25"},{"lineNumber":170,"author":{"gitId":"sopa301"},"content":"         *","lastModifiedDate":"2023-08-25"},{"lineNumber":171,"author":{"gitId":"sopa301"},"content":"         * @param str Data string to read.","lastModifiedDate":"2023-08-25"},{"lineNumber":172,"author":{"gitId":"sopa301"},"content":"         * @return ToDo object.","lastModifiedDate":"2023-08-25"},{"lineNumber":173,"author":{"gitId":"sopa301"},"content":"         * @throws InvalidTaskException If an object cannot be created.","lastModifiedDate":"2023-08-25"},{"lineNumber":174,"author":{"gitId":"sopa301"},"content":"         */","lastModifiedDate":"2023-08-25"},{"lineNumber":175,"author":{"gitId":"sopa301"},"content":"        public static ToDo convertFromString(String str) throws InvalidTaskException {","lastModifiedDate":"2023-08-25"},{"lineNumber":176,"author":{"gitId":"sopa301"},"content":"            if (!str.matches(\"t/[01]/.+\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":177,"author":{"gitId":"sopa301"},"content":"                throw new InvalidTaskException(\"Could not read Todo.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":178,"author":{"gitId":"sopa301"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":179,"author":{"gitId":"sopa301"},"content":"            String[] arr \u003d str.split(\"/\");","lastModifiedDate":"2023-08-25"},{"lineNumber":180,"author":{"gitId":"sopa301"},"content":"            return new ToDo(arr[2], arr[1].equals(\"1\"));","lastModifiedDate":"2023-08-25"},{"lineNumber":181,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":182,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":183,"author":{"gitId":"sopa301"},"content":"        /**","lastModifiedDate":"2023-08-25"},{"lineNumber":184,"author":{"gitId":"sopa301"},"content":"         * Get data string representation.","lastModifiedDate":"2023-08-25"},{"lineNumber":185,"author":{"gitId":"sopa301"},"content":"         *","lastModifiedDate":"2023-08-25"},{"lineNumber":186,"author":{"gitId":"sopa301"},"content":"         * @return Data string.","lastModifiedDate":"2023-08-25"},{"lineNumber":187,"author":{"gitId":"sopa301"},"content":"         */","lastModifiedDate":"2023-08-25"},{"lineNumber":188,"author":{"gitId":"sopa301"},"content":"        public String convertToDataString() {","lastModifiedDate":"2023-08-25"},{"lineNumber":189,"author":{"gitId":"sopa301"},"content":"            return \"t/\" + (super.isDone() ? \"1\" : \"0\") + \"/\"  + super.getName();","lastModifiedDate":"2023-08-25"},{"lineNumber":190,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":191,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":192,"author":{"gitId":"sopa301"},"content":"        /**","lastModifiedDate":"2023-08-25"},{"lineNumber":193,"author":{"gitId":"sopa301"},"content":"         * Creates a ToDo object.","lastModifiedDate":"2023-08-25"},{"lineNumber":194,"author":{"gitId":"sopa301"},"content":"         *","lastModifiedDate":"2023-08-25"},{"lineNumber":195,"author":{"gitId":"sopa301"},"content":"         * @param str Raw string to create the ToDo object from.","lastModifiedDate":"2023-08-25"},{"lineNumber":196,"author":{"gitId":"sopa301"},"content":"         * @return ToDo object.","lastModifiedDate":"2023-08-25"},{"lineNumber":197,"author":{"gitId":"sopa301"},"content":"         * @throws InvalidTaskException If a ToDo object cannot be created from the string.","lastModifiedDate":"2023-08-25"},{"lineNumber":198,"author":{"gitId":"sopa301"},"content":"         */","lastModifiedDate":"2023-08-25"},{"lineNumber":199,"author":{"gitId":"sopa301"},"content":"        public static ToDo makeToDo(String str) throws InvalidTaskException {","lastModifiedDate":"2023-08-25"},{"lineNumber":200,"author":{"gitId":"sopa301"},"content":"            String name \u003d str.substring(4).trim();","lastModifiedDate":"2023-08-25"},{"lineNumber":201,"author":{"gitId":"sopa301"},"content":"            if (name.equals(\"\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":202,"author":{"gitId":"sopa301"},"content":"                throw new InvalidTaskException(\"Sorry, the todo description can\u0027t be empty.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":203,"author":{"gitId":"sopa301"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":204,"author":{"gitId":"sopa301"},"content":"            return new ToDo(name);","lastModifiedDate":"2023-08-25"},{"lineNumber":205,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":206,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":207,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":208,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":209,"author":{"gitId":"sopa301"},"content":"     * Deadline subclass. Contains a name and a time the deadline is due.","lastModifiedDate":"2023-08-24"},{"lineNumber":210,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":211,"author":{"gitId":"sopa301"},"content":"    public static class Deadline extends Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":212,"author":{"gitId":"sopa301"},"content":"        /**","lastModifiedDate":"2023-08-24"},{"lineNumber":213,"author":{"gitId":"sopa301"},"content":"         *  The time the deadline is due.","lastModifiedDate":"2023-08-24"},{"lineNumber":214,"author":{"gitId":"sopa301"},"content":"         */","lastModifiedDate":"2023-08-24"},{"lineNumber":215,"author":{"gitId":"sopa301"},"content":"        private final LocalDate by;","lastModifiedDate":"2023-08-25"},{"lineNumber":216,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":217,"author":{"gitId":"sopa301"},"content":"        /**","lastModifiedDate":"2023-08-24"},{"lineNumber":218,"author":{"gitId":"sopa301"},"content":"         * Default constructor.","lastModifiedDate":"2023-08-24"},{"lineNumber":219,"author":{"gitId":"sopa301"},"content":"         *","lastModifiedDate":"2023-08-24"},{"lineNumber":220,"author":{"gitId":"sopa301"},"content":"         * @param name Name of the deadline.","lastModifiedDate":"2023-08-24"},{"lineNumber":221,"author":{"gitId":"sopa301"},"content":"         * @param by The time the deadline is due.","lastModifiedDate":"2023-08-24"},{"lineNumber":222,"author":{"gitId":"sopa301"},"content":"         */","lastModifiedDate":"2023-08-24"},{"lineNumber":223,"author":{"gitId":"sopa301"},"content":"        public Deadline(String name, LocalDate by) {","lastModifiedDate":"2023-08-25"},{"lineNumber":224,"author":{"gitId":"sopa301"},"content":"            super(name);","lastModifiedDate":"2023-08-20"},{"lineNumber":225,"author":{"gitId":"sopa301"},"content":"            this.by \u003d by;","lastModifiedDate":"2023-08-20"},{"lineNumber":226,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":227,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":228,"author":{"gitId":"sopa301"},"content":"        /**","lastModifiedDate":"2023-08-25"},{"lineNumber":229,"author":{"gitId":"sopa301"},"content":"         * Alternative constructor. Usually used when reading data from a file.","lastModifiedDate":"2023-08-25"},{"lineNumber":230,"author":{"gitId":"sopa301"},"content":"         *","lastModifiedDate":"2023-08-25"},{"lineNumber":231,"author":{"gitId":"sopa301"},"content":"         * @param name Name of deadline","lastModifiedDate":"2023-08-25"},{"lineNumber":232,"author":{"gitId":"sopa301"},"content":"         * @param isDone Completion status of deadline","lastModifiedDate":"2023-08-25"},{"lineNumber":233,"author":{"gitId":"sopa301"},"content":"         * @param by The time the deadline is due.","lastModifiedDate":"2023-08-25"},{"lineNumber":234,"author":{"gitId":"sopa301"},"content":"         */","lastModifiedDate":"2023-08-25"},{"lineNumber":235,"author":{"gitId":"sopa301"},"content":"        protected Deadline(String name, boolean isDone, LocalDate by) {","lastModifiedDate":"2023-08-25"},{"lineNumber":236,"author":{"gitId":"sopa301"},"content":"            super(name, isDone);","lastModifiedDate":"2023-08-25"},{"lineNumber":237,"author":{"gitId":"sopa301"},"content":"            this.by \u003d by;","lastModifiedDate":"2023-08-25"},{"lineNumber":238,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":239,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":240,"author":{"gitId":"sopa301"},"content":"        /**","lastModifiedDate":"2023-08-24"},{"lineNumber":241,"author":{"gitId":"sopa301"},"content":"         * String representation of the deadline.","lastModifiedDate":"2023-08-24"},{"lineNumber":242,"author":{"gitId":"sopa301"},"content":"         * @return String representation.","lastModifiedDate":"2023-08-24"},{"lineNumber":243,"author":{"gitId":"sopa301"},"content":"         */","lastModifiedDate":"2023-08-24"},{"lineNumber":244,"author":{"gitId":"sopa301"},"content":"        @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":245,"author":{"gitId":"sopa301"},"content":"        public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":246,"author":{"gitId":"sopa301"},"content":"            return \"[D]\" + super.toString() + \"(by: \"","lastModifiedDate":"2023-08-25"},{"lineNumber":247,"author":{"gitId":"sopa301"},"content":"                    + this.getBy().format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))","lastModifiedDate":"2023-08-25"},{"lineNumber":248,"author":{"gitId":"sopa301"},"content":"                    + \")\";","lastModifiedDate":"2023-08-25"},{"lineNumber":249,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":250,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":251,"author":{"gitId":"sopa301"},"content":"        /**","lastModifiedDate":"2023-08-25"},{"lineNumber":252,"author":{"gitId":"sopa301"},"content":"         * Get the deadline time.","lastModifiedDate":"2023-08-25"},{"lineNumber":253,"author":{"gitId":"sopa301"},"content":"         *","lastModifiedDate":"2023-08-25"},{"lineNumber":254,"author":{"gitId":"sopa301"},"content":"         * @return Deadline time.","lastModifiedDate":"2023-08-25"},{"lineNumber":255,"author":{"gitId":"sopa301"},"content":"         */","lastModifiedDate":"2023-08-25"},{"lineNumber":256,"author":{"gitId":"sopa301"},"content":"        protected LocalDate getBy() {","lastModifiedDate":"2023-08-25"},{"lineNumber":257,"author":{"gitId":"sopa301"},"content":"            return this.by;","lastModifiedDate":"2023-08-25"},{"lineNumber":258,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":259,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":260,"author":{"gitId":"sopa301"},"content":"        /**","lastModifiedDate":"2023-08-25"},{"lineNumber":261,"author":{"gitId":"sopa301"},"content":"         * Reads a string of standardised data and constructs a Deadline object based on the information.","lastModifiedDate":"2023-08-25"},{"lineNumber":262,"author":{"gitId":"sopa301"},"content":"         *","lastModifiedDate":"2023-08-25"},{"lineNumber":263,"author":{"gitId":"sopa301"},"content":"         * @param str Data string.","lastModifiedDate":"2023-08-25"},{"lineNumber":264,"author":{"gitId":"sopa301"},"content":"         * @return Deadline object.","lastModifiedDate":"2023-08-25"},{"lineNumber":265,"author":{"gitId":"sopa301"},"content":"         * @throws InvalidTaskException If Deadline object cannot be created.","lastModifiedDate":"2023-08-25"},{"lineNumber":266,"author":{"gitId":"sopa301"},"content":"         */","lastModifiedDate":"2023-08-25"},{"lineNumber":267,"author":{"gitId":"sopa301"},"content":"        public static Deadline convertFromString(String str) throws InvalidTaskException {","lastModifiedDate":"2023-08-25"},{"lineNumber":268,"author":{"gitId":"sopa301"},"content":"            if (!str.matches(\"d/[01]/.+/.+\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":269,"author":{"gitId":"sopa301"},"content":"                throw new InvalidTaskException(\"Could not read Deadline.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":270,"author":{"gitId":"sopa301"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":271,"author":{"gitId":"sopa301"},"content":"            String[] arr \u003d str.split(\"/\");","lastModifiedDate":"2023-08-25"},{"lineNumber":272,"author":{"gitId":"sopa301"},"content":"            return new Deadline(arr[2], arr[1].equals(\"1\"),","lastModifiedDate":"2023-08-25"},{"lineNumber":273,"author":{"gitId":"sopa301"},"content":"                    LocalDate.parse(arr[3], DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")));","lastModifiedDate":"2023-08-25"},{"lineNumber":274,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":275,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":276,"author":{"gitId":"sopa301"},"content":"        /**","lastModifiedDate":"2023-08-25"},{"lineNumber":277,"author":{"gitId":"sopa301"},"content":"         * Creates a Deadline object.","lastModifiedDate":"2023-08-25"},{"lineNumber":278,"author":{"gitId":"sopa301"},"content":"         *","lastModifiedDate":"2023-08-25"},{"lineNumber":279,"author":{"gitId":"sopa301"},"content":"         * @param str Raw string to create the Deadline object from.","lastModifiedDate":"2023-08-25"},{"lineNumber":280,"author":{"gitId":"sopa301"},"content":"         * @return Deadline object.","lastModifiedDate":"2023-08-25"},{"lineNumber":281,"author":{"gitId":"sopa301"},"content":"         * @throws InvalidTaskException If a Deadline object cannot be created from the string.","lastModifiedDate":"2023-08-25"},{"lineNumber":282,"author":{"gitId":"sopa301"},"content":"         */","lastModifiedDate":"2023-08-25"},{"lineNumber":283,"author":{"gitId":"sopa301"},"content":"        public static Deadline makeDeadline(String str) throws InvalidTaskException {","lastModifiedDate":"2023-08-25"},{"lineNumber":284,"author":{"gitId":"sopa301"},"content":"            String[] comps \u003d str.split(\"/\");","lastModifiedDate":"2023-08-25"},{"lineNumber":285,"author":{"gitId":"sopa301"},"content":"            if (comps.length !\u003d 2) {","lastModifiedDate":"2023-08-25"},{"lineNumber":286,"author":{"gitId":"sopa301"},"content":"                throw new InvalidTaskException(\"Please make sure the deadline is written in the correct format:\\n\"","lastModifiedDate":"2023-08-25"},{"lineNumber":287,"author":{"gitId":"sopa301"},"content":"                        + \"deadline ... /by ...\");","lastModifiedDate":"2023-08-25"},{"lineNumber":288,"author":{"gitId":"sopa301"},"content":"            } else if (comps[0].trim().equals(\"deadline\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":289,"author":{"gitId":"sopa301"},"content":"                throw new InvalidTaskException(\"Sorry, the deadline description can\u0027t be empty.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":290,"author":{"gitId":"sopa301"},"content":"            } else if (comps[1].trim().equals(\"by\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":291,"author":{"gitId":"sopa301"},"content":"                throw new InvalidTaskException(\"Sorry, the deadline can\u0027t be empty.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":292,"author":{"gitId":"sopa301"},"content":"            } else if (!comps[1].startsWith(\"by\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":293,"author":{"gitId":"sopa301"},"content":"                throw new InvalidTaskException(\"Please make sure the deadline is written in the correct format:\\n\"","lastModifiedDate":"2023-08-25"},{"lineNumber":294,"author":{"gitId":"sopa301"},"content":"                        + \"deadline ... /by ...\");","lastModifiedDate":"2023-08-25"},{"lineNumber":295,"author":{"gitId":"sopa301"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":296,"author":{"gitId":"sopa301"},"content":"            LocalDate by;","lastModifiedDate":"2023-08-25"},{"lineNumber":297,"author":{"gitId":"sopa301"},"content":"            try {","lastModifiedDate":"2023-08-25"},{"lineNumber":298,"author":{"gitId":"sopa301"},"content":"                by \u003d LocalDate.parse(comps[1].substring(3).trim());","lastModifiedDate":"2023-08-25"},{"lineNumber":299,"author":{"gitId":"sopa301"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":300,"author":{"gitId":"sopa301"},"content":"                throw new InvalidTaskException(\"One or more dates are invalid.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":301,"author":{"gitId":"sopa301"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":302,"author":{"gitId":"sopa301"},"content":"            if (by.isBefore(LocalDate.now())) {","lastModifiedDate":"2023-08-25"},{"lineNumber":303,"author":{"gitId":"sopa301"},"content":"                throw new InvalidTaskException(\"Deadline can\u0027t be before now!\");","lastModifiedDate":"2023-08-25"},{"lineNumber":304,"author":{"gitId":"sopa301"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":305,"author":{"gitId":"sopa301"},"content":"            return new Deadline(comps[0].substring(9), by);","lastModifiedDate":"2023-08-25"},{"lineNumber":306,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":307,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":308,"author":{"gitId":"sopa301"},"content":"        /**","lastModifiedDate":"2023-08-25"},{"lineNumber":309,"author":{"gitId":"sopa301"},"content":"         * Returns data string representation.","lastModifiedDate":"2023-08-25"},{"lineNumber":310,"author":{"gitId":"sopa301"},"content":"         *","lastModifiedDate":"2023-08-25"},{"lineNumber":311,"author":{"gitId":"sopa301"},"content":"         * @return Data string.","lastModifiedDate":"2023-08-25"},{"lineNumber":312,"author":{"gitId":"sopa301"},"content":"         */","lastModifiedDate":"2023-08-25"},{"lineNumber":313,"author":{"gitId":"sopa301"},"content":"        public String convertToDataString() {","lastModifiedDate":"2023-08-25"},{"lineNumber":314,"author":{"gitId":"sopa301"},"content":"            return \"d/\" + (super.isDone() ? \"1\" : \"0\") + \"/\"  + super.getName()","lastModifiedDate":"2023-08-25"},{"lineNumber":315,"author":{"gitId":"sopa301"},"content":"                    + \"/\" + this.getBy();","lastModifiedDate":"2023-08-25"},{"lineNumber":316,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":317,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":318,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":319,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":320,"author":{"gitId":"sopa301"},"content":"     * Event subclass. Contains a name, event start time and end time.","lastModifiedDate":"2023-08-24"},{"lineNumber":321,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":322,"author":{"gitId":"sopa301"},"content":"    public static class Event extends Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":323,"author":{"gitId":"sopa301"},"content":"        /**","lastModifiedDate":"2023-08-24"},{"lineNumber":324,"author":{"gitId":"sopa301"},"content":"         * Event start time.","lastModifiedDate":"2023-08-24"},{"lineNumber":325,"author":{"gitId":"sopa301"},"content":"         */","lastModifiedDate":"2023-08-24"},{"lineNumber":326,"author":{"gitId":"sopa301"},"content":"        private final LocalDate from;","lastModifiedDate":"2023-08-25"},{"lineNumber":327,"author":{"gitId":"sopa301"},"content":"        /**","lastModifiedDate":"2023-08-24"},{"lineNumber":328,"author":{"gitId":"sopa301"},"content":"         * Event end time.","lastModifiedDate":"2023-08-24"},{"lineNumber":329,"author":{"gitId":"sopa301"},"content":"         */","lastModifiedDate":"2023-08-24"},{"lineNumber":330,"author":{"gitId":"sopa301"},"content":"        private final LocalDate to;","lastModifiedDate":"2023-08-25"},{"lineNumber":331,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":332,"author":{"gitId":"sopa301"},"content":"        /**","lastModifiedDate":"2023-08-24"},{"lineNumber":333,"author":{"gitId":"sopa301"},"content":"         * Default constructor.","lastModifiedDate":"2023-08-24"},{"lineNumber":334,"author":{"gitId":"sopa301"},"content":"         *","lastModifiedDate":"2023-08-24"},{"lineNumber":335,"author":{"gitId":"sopa301"},"content":"         * @param name Event name.","lastModifiedDate":"2023-08-24"},{"lineNumber":336,"author":{"gitId":"sopa301"},"content":"         * @param from Event start time.","lastModifiedDate":"2023-08-24"},{"lineNumber":337,"author":{"gitId":"sopa301"},"content":"         * @param to Event end time.","lastModifiedDate":"2023-08-24"},{"lineNumber":338,"author":{"gitId":"sopa301"},"content":"         */","lastModifiedDate":"2023-08-24"},{"lineNumber":339,"author":{"gitId":"sopa301"},"content":"        public Event(String name, LocalDate from, LocalDate to) {","lastModifiedDate":"2023-08-25"},{"lineNumber":340,"author":{"gitId":"sopa301"},"content":"            super(name);","lastModifiedDate":"2023-08-20"},{"lineNumber":341,"author":{"gitId":"sopa301"},"content":"            this.from \u003d from;","lastModifiedDate":"2023-08-20"},{"lineNumber":342,"author":{"gitId":"sopa301"},"content":"            this.to \u003d to;","lastModifiedDate":"2023-08-20"},{"lineNumber":343,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":344,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":345,"author":{"gitId":"sopa301"},"content":"        /**","lastModifiedDate":"2023-08-25"},{"lineNumber":346,"author":{"gitId":"sopa301"},"content":"         * Alternative constructor. Usually used when reading data from a file.","lastModifiedDate":"2023-08-25"},{"lineNumber":347,"author":{"gitId":"sopa301"},"content":"         *","lastModifiedDate":"2023-08-25"},{"lineNumber":348,"author":{"gitId":"sopa301"},"content":"         * @param name Name of task.","lastModifiedDate":"2023-08-25"},{"lineNumber":349,"author":{"gitId":"sopa301"},"content":"         * @param isDone Completion status of task.","lastModifiedDate":"2023-08-25"},{"lineNumber":350,"author":{"gitId":"sopa301"},"content":"         * @param from Start time of task.","lastModifiedDate":"2023-08-25"},{"lineNumber":351,"author":{"gitId":"sopa301"},"content":"         * @param to End time of task.","lastModifiedDate":"2023-08-25"},{"lineNumber":352,"author":{"gitId":"sopa301"},"content":"         */","lastModifiedDate":"2023-08-25"},{"lineNumber":353,"author":{"gitId":"sopa301"},"content":"        protected Event(String name, boolean isDone, LocalDate from, LocalDate to) {","lastModifiedDate":"2023-08-25"},{"lineNumber":354,"author":{"gitId":"sopa301"},"content":"            super(name, isDone);","lastModifiedDate":"2023-08-25"},{"lineNumber":355,"author":{"gitId":"sopa301"},"content":"            this.from \u003d from;","lastModifiedDate":"2023-08-25"},{"lineNumber":356,"author":{"gitId":"sopa301"},"content":"            this.to \u003d to;","lastModifiedDate":"2023-08-25"},{"lineNumber":357,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":358,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":359,"author":{"gitId":"sopa301"},"content":"        /**","lastModifiedDate":"2023-08-25"},{"lineNumber":360,"author":{"gitId":"sopa301"},"content":"         * Get event start time.","lastModifiedDate":"2023-08-25"},{"lineNumber":361,"author":{"gitId":"sopa301"},"content":"         *","lastModifiedDate":"2023-08-25"},{"lineNumber":362,"author":{"gitId":"sopa301"},"content":"         * @return Event start time.","lastModifiedDate":"2023-08-25"},{"lineNumber":363,"author":{"gitId":"sopa301"},"content":"         */","lastModifiedDate":"2023-08-25"},{"lineNumber":364,"author":{"gitId":"sopa301"},"content":"        protected LocalDate getFrom() {","lastModifiedDate":"2023-08-25"},{"lineNumber":365,"author":{"gitId":"sopa301"},"content":"            return this.from;","lastModifiedDate":"2023-08-25"},{"lineNumber":366,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":367,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":368,"author":{"gitId":"sopa301"},"content":"        /**","lastModifiedDate":"2023-08-25"},{"lineNumber":369,"author":{"gitId":"sopa301"},"content":"         * Get event end time.","lastModifiedDate":"2023-08-25"},{"lineNumber":370,"author":{"gitId":"sopa301"},"content":"         *","lastModifiedDate":"2023-08-25"},{"lineNumber":371,"author":{"gitId":"sopa301"},"content":"         * @return Event end time.","lastModifiedDate":"2023-08-25"},{"lineNumber":372,"author":{"gitId":"sopa301"},"content":"         */","lastModifiedDate":"2023-08-25"},{"lineNumber":373,"author":{"gitId":"sopa301"},"content":"        protected LocalDate getTo() {","lastModifiedDate":"2023-08-25"},{"lineNumber":374,"author":{"gitId":"sopa301"},"content":"            return this.to;","lastModifiedDate":"2023-08-25"},{"lineNumber":375,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":376,"author":{"gitId":"sopa301"},"content":"        /**","lastModifiedDate":"2023-08-24"},{"lineNumber":377,"author":{"gitId":"sopa301"},"content":"         * String representation of the event.","lastModifiedDate":"2023-08-24"},{"lineNumber":378,"author":{"gitId":"sopa301"},"content":"         * @return String representation.","lastModifiedDate":"2023-08-24"},{"lineNumber":379,"author":{"gitId":"sopa301"},"content":"         */","lastModifiedDate":"2023-08-24"},{"lineNumber":380,"author":{"gitId":"sopa301"},"content":"        @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":381,"author":{"gitId":"sopa301"},"content":"        public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":382,"author":{"gitId":"sopa301"},"content":"            return \"[E]\" + super.toString()","lastModifiedDate":"2023-08-25"},{"lineNumber":383,"author":{"gitId":"sopa301"},"content":"                    + \"(from: \"","lastModifiedDate":"2023-08-25"},{"lineNumber":384,"author":{"gitId":"sopa301"},"content":"                    + this.getFrom().format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))","lastModifiedDate":"2023-08-25"},{"lineNumber":385,"author":{"gitId":"sopa301"},"content":"                    + \" to: \" + this.getTo().format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))","lastModifiedDate":"2023-08-25"},{"lineNumber":386,"author":{"gitId":"sopa301"},"content":"                    + \")\";","lastModifiedDate":"2023-08-25"},{"lineNumber":387,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":388,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":389,"author":{"gitId":"sopa301"},"content":"        /**","lastModifiedDate":"2023-08-25"},{"lineNumber":390,"author":{"gitId":"sopa301"},"content":"         * Reads a string of standardised data and constructs an Event object based on the information.","lastModifiedDate":"2023-08-25"},{"lineNumber":391,"author":{"gitId":"sopa301"},"content":"         *","lastModifiedDate":"2023-08-25"},{"lineNumber":392,"author":{"gitId":"sopa301"},"content":"         * @param str Data string","lastModifiedDate":"2023-08-25"},{"lineNumber":393,"author":{"gitId":"sopa301"},"content":"         * @return Event object.","lastModifiedDate":"2023-08-25"},{"lineNumber":394,"author":{"gitId":"sopa301"},"content":"         * @throws InvalidTaskException If an Event object cannot be created.","lastModifiedDate":"2023-08-25"},{"lineNumber":395,"author":{"gitId":"sopa301"},"content":"         */","lastModifiedDate":"2023-08-25"},{"lineNumber":396,"author":{"gitId":"sopa301"},"content":"        public static Event convertFromString(String str) throws InvalidTaskException {","lastModifiedDate":"2023-08-25"},{"lineNumber":397,"author":{"gitId":"sopa301"},"content":"            if (!str.matches(\"e/[01]/.+/.+/.+\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":398,"author":{"gitId":"sopa301"},"content":"                throw new InvalidTaskException(\"Could not read Event.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":399,"author":{"gitId":"sopa301"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":400,"author":{"gitId":"sopa301"},"content":"            String[] arr \u003d str.split(\"/\");","lastModifiedDate":"2023-08-25"},{"lineNumber":401,"author":{"gitId":"sopa301"},"content":"            return new Event(arr[2], arr[1].equals(\"1\"), LocalDate.parse(arr[3]), LocalDate.parse(arr[4]));","lastModifiedDate":"2023-08-25"},{"lineNumber":402,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":403,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":404,"author":{"gitId":"sopa301"},"content":"        /**","lastModifiedDate":"2023-08-25"},{"lineNumber":405,"author":{"gitId":"sopa301"},"content":"         * Returns data string representation.","lastModifiedDate":"2023-08-25"},{"lineNumber":406,"author":{"gitId":"sopa301"},"content":"         *","lastModifiedDate":"2023-08-25"},{"lineNumber":407,"author":{"gitId":"sopa301"},"content":"         * @return Data string.","lastModifiedDate":"2023-08-25"},{"lineNumber":408,"author":{"gitId":"sopa301"},"content":"         */","lastModifiedDate":"2023-08-25"},{"lineNumber":409,"author":{"gitId":"sopa301"},"content":"        public String convertToDataString() {","lastModifiedDate":"2023-08-25"},{"lineNumber":410,"author":{"gitId":"sopa301"},"content":"            return \"e/\" + (super.isDone() ? \"1\" : \"0\") + \"/\"  + super.getName()","lastModifiedDate":"2023-08-25"},{"lineNumber":411,"author":{"gitId":"sopa301"},"content":"                    + \"/\" + this.getFrom() + \"/\" + this.getTo();","lastModifiedDate":"2023-08-25"},{"lineNumber":412,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":413,"author":{"gitId":"sopa301"},"content":"        /**","lastModifiedDate":"2023-08-25"},{"lineNumber":414,"author":{"gitId":"sopa301"},"content":"         * Creates an Event object.","lastModifiedDate":"2023-08-25"},{"lineNumber":415,"author":{"gitId":"sopa301"},"content":"         *","lastModifiedDate":"2023-08-25"},{"lineNumber":416,"author":{"gitId":"sopa301"},"content":"         * @param str Raw string to create the object from.","lastModifiedDate":"2023-08-25"},{"lineNumber":417,"author":{"gitId":"sopa301"},"content":"         * @return Event object.","lastModifiedDate":"2023-08-25"},{"lineNumber":418,"author":{"gitId":"sopa301"},"content":"         * @throws InvalidTaskException If the input string cannot create the Event object.","lastModifiedDate":"2023-08-25"},{"lineNumber":419,"author":{"gitId":"sopa301"},"content":"         */","lastModifiedDate":"2023-08-25"},{"lineNumber":420,"author":{"gitId":"sopa301"},"content":"        public static Event makeEvent(String str) throws InvalidTaskException {","lastModifiedDate":"2023-08-25"},{"lineNumber":421,"author":{"gitId":"sopa301"},"content":"            String[] comps \u003d str.split(\"/\");","lastModifiedDate":"2023-08-25"},{"lineNumber":422,"author":{"gitId":"sopa301"},"content":"            if (comps.length !\u003d 3) {","lastModifiedDate":"2023-08-25"},{"lineNumber":423,"author":{"gitId":"sopa301"},"content":"                throw new InvalidTaskException(\"Please make sure the event is written in the correct format:\\n\"","lastModifiedDate":"2023-08-25"},{"lineNumber":424,"author":{"gitId":"sopa301"},"content":"                        + \"event ... /from ... /to ...\");","lastModifiedDate":"2023-08-25"},{"lineNumber":425,"author":{"gitId":"sopa301"},"content":"            } else if (comps[0].trim().equals(\"event\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":426,"author":{"gitId":"sopa301"},"content":"                throw new InvalidTaskException(\"Sorry, the event description can\u0027t be empty.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":427,"author":{"gitId":"sopa301"},"content":"            } else if (comps[1].trim().equals(\"from\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":428,"author":{"gitId":"sopa301"},"content":"                throw new InvalidTaskException(\"Sorry, event start time can\u0027t be empty.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":429,"author":{"gitId":"sopa301"},"content":"            } else if (comps[2].trim().equals(\"to\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":430,"author":{"gitId":"sopa301"},"content":"                throw new InvalidTaskException(\"Sorry, event end time can\u0027t be empty.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":431,"author":{"gitId":"sopa301"},"content":"            } else if (!comps[1].startsWith(\"from \") || !comps[2].startsWith(\"to \")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":432,"author":{"gitId":"sopa301"},"content":"                throw new InvalidTaskException(\"Please make sure the event is written in the correct format:\\n\"","lastModifiedDate":"2023-08-25"},{"lineNumber":433,"author":{"gitId":"sopa301"},"content":"                        + \"event ... /from ... /to ...\");","lastModifiedDate":"2023-08-25"},{"lineNumber":434,"author":{"gitId":"sopa301"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":435,"author":{"gitId":"sopa301"},"content":"            LocalDate from, to;","lastModifiedDate":"2023-08-25"},{"lineNumber":436,"author":{"gitId":"sopa301"},"content":"            try {","lastModifiedDate":"2023-08-25"},{"lineNumber":437,"author":{"gitId":"sopa301"},"content":"                from \u003d LocalDate.parse(comps[1].substring(5).trim());","lastModifiedDate":"2023-08-25"},{"lineNumber":438,"author":{"gitId":"sopa301"},"content":"                to \u003d LocalDate.parse(comps[2].substring(3).trim());","lastModifiedDate":"2023-08-25"},{"lineNumber":439,"author":{"gitId":"sopa301"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":440,"author":{"gitId":"sopa301"},"content":"                throw new InvalidTaskException(\"One or more dates are invalid.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":441,"author":{"gitId":"sopa301"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":442,"author":{"gitId":"sopa301"},"content":"            if (from.isAfter(to)) {","lastModifiedDate":"2023-08-25"},{"lineNumber":443,"author":{"gitId":"sopa301"},"content":"                throw new InvalidTaskException(\"Event end time can\u0027t be before event start time!\");","lastModifiedDate":"2023-08-25"},{"lineNumber":444,"author":{"gitId":"sopa301"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":445,"author":{"gitId":"sopa301"},"content":"            return new Event(comps[0].substring(6), from, to);","lastModifiedDate":"2023-08-25"},{"lineNumber":446,"author":{"gitId":"sopa301"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":447,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":448,"author":{"gitId":"sopa301"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"sopa301":448}},{"path":"src/main/java/exceptions/BotException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sopa301"},"content":"package exceptions;","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"sopa301"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"sopa301"},"content":" * Supertype of all exceptions that occur specific to the bot.","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"sopa301"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"sopa301"},"content":"public class BotException extends Exception {","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"sopa301"},"content":"     * Default constructor.","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"sopa301"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"sopa301"},"content":"     * @param msg Message to be displayed when getMessage is called.","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"sopa301"},"content":"    public BotException(String msg) {","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"sopa301"},"content":"        super(msg);","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"sopa301"},"content":"}","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"sopa301":16}},{"path":"src/main/java/exceptions/EmptyListException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sopa301"},"content":"package exceptions;","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"sopa301"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"sopa301"},"content":" * Exception for when the task list is empty and a function requires an","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"sopa301"},"content":" * item in the task list.","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"sopa301"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"sopa301"},"content":"public class EmptyListException extends BotException{","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"sopa301"},"content":"     * Default constructor.","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"sopa301"},"content":"    public EmptyListException() {","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"sopa301"},"content":"        super(\"Oops, there are no tasks in your list!\");","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"sopa301"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"sopa301":14}},{"path":"src/main/java/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sopa301"},"content":"package exceptions;","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"sopa301"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"sopa301"},"content":" * Exception for when an invalid command is sent to the bot.","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"sopa301"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"sopa301"},"content":"public class InvalidCommandException extends BotException{","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"sopa301"},"content":"     * Default constructor. Currently set to Trash Gremlin Caelus personality.","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"sopa301"},"content":"    public InvalidCommandException() {","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"sopa301"},"content":"        super(\"Sorry, I dunno what you\u0027re saying. Must be the trash getting to my brain.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":13,"author":{"gitId":"sopa301"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"sopa301":13}},{"path":"src/main/java/exceptions/InvalidIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sopa301"},"content":"package exceptions;","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"sopa301"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"sopa301"},"content":" * Exception for when an index is given that is out of range for the requested operation.","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"sopa301"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"sopa301"},"content":"public class InvalidIndexException extends BotException {","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"sopa301"},"content":"     * Default constructor.","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"sopa301"},"content":"    public InvalidIndexException() {","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"sopa301"},"content":"        super(\"Sorry, that index doesn\u0027t exist. Please key in a valid index.\");","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"sopa301"},"content":"     * Constructor with variable message.","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"sopa301"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"sopa301"},"content":"     * @param msg Message to be displayed when getMessage is called.","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"sopa301"},"content":"    public InvalidIndexException(String msg) {","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"sopa301"},"content":"        super(msg);","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"sopa301"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"sopa301":21}},{"path":"src/main/java/exceptions/InvalidTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"sopa301"},"content":"package exceptions;","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"sopa301"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"sopa301"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"sopa301"},"content":" * Exception for incorrect inputs when creating a Task object.","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"sopa301"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"sopa301"},"content":"public class InvalidTaskException extends BotException {","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"sopa301"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"sopa301"},"content":"     * Constructor with variable message.","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"sopa301"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"sopa301"},"content":"     * @param msg Message to be displayed when getMessage is called.","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"sopa301"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"sopa301"},"content":"    public InvalidTaskException(String msg) {","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"sopa301"},"content":"        super(msg);","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"sopa301"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"sopa301"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"sopa301":15}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"sopa301"},"content":"hello","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"sopa301"},"content":"list","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"sopa301"},"content":"delete 1","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"sopa301"},"content":"delete 1","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"sopa301"},"content":"todo taskone","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"sopa301"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"sopa301"},"content":"mark 1","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"sopa301"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"sopa301"},"content":"unmark 1","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"sopa301"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"sopa301"},"content":"deadline tasktwo /by 2023-11-11","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"sopa301"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":13,"author":{"gitId":"sopa301"},"content":"event taskthree /from 2023-08-25 /to 2023-08-26","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"sopa301"},"content":"event taskfail /from 2020-11-22 /to 2019-11-11","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"sopa301"},"content":"deadline taskfail /by 2020-20-20","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"sopa301"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":17,"author":{"gitId":"sopa301"},"content":"mark 3","lastModifiedDate":"2023-08-20"},{"lineNumber":18,"author":{"gitId":"sopa301"},"content":"delete 3","lastModifiedDate":"2023-08-20"},{"lineNumber":19,"author":{"gitId":"sopa301"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":20,"author":{"gitId":"sopa301"},"content":"bye","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"sopa301":20}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"sopa301"},"content":"java -classpath ..\\bin Bot \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"sopa301":1,"-":20}}]
