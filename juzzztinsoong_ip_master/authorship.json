[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"juzzztinsoong"},"content":"checkstyle {","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"juzzztinsoong"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"juzzztinsoong"},"content":"    mainClass.set(\"Duke\")","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"juzzztinsoong"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":41,"juzzztinsoong":7}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"T # 0 # asdkfja 25/25","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"D # 1 # as # 2012-06-06 ","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"E # 0 # hi # 2023-12-23 10:00 # 2023-12-23 08:00","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"juzzztinsoong":3}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"import duke.commands.Command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":"import duke.utils.Parser;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":"import duke.utils.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"import duke.utils.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":" * @author juzzztinsoong","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"juzzztinsoong"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"juzzztinsoong"},"content":"    private TaskList tasklist;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"juzzztinsoong"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"juzzztinsoong"},"content":"     * Constructor method for Duke.","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"juzzztinsoong"},"content":"     * @param filepath duke.txt filepath.","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"juzzztinsoong"},"content":"    public Duke(String filepath) {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"juzzztinsoong"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"juzzztinsoong"},"content":"        storage \u003d new Storage(filepath);","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"juzzztinsoong"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"juzzztinsoong"},"content":"            tasklist \u003d storage.loadFromFile();","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"juzzztinsoong"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"juzzztinsoong"},"content":"            ui.showError(\"File failed to load\");","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"juzzztinsoong"},"content":"            tasklist \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"juzzztinsoong"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"juzzztinsoong"},"content":"     * Runs the program until the user enters a quit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"juzzztinsoong"},"content":"    private void run() {","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"juzzztinsoong"},"content":"        ui.showWelcome();","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"juzzztinsoong"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"juzzztinsoong"},"content":"        while (!isExit) {","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"juzzztinsoong"},"content":"            try {","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"juzzztinsoong"},"content":"                String fullcommand \u003d ui.readCommand();","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"juzzztinsoong"},"content":"                Command c \u003d Parser.parse(fullcommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"juzzztinsoong"},"content":"                c.execute(tasklist, ui, storage);","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"juzzztinsoong"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"juzzztinsoong"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"juzzztinsoong"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"juzzztinsoong"},"content":"            } finally {","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"juzzztinsoong"},"content":"                ui.showLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"juzzztinsoong"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"juzzztinsoong"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":50,"author":{"gitId":"juzzztinsoong"},"content":"        ui.showGoodbye();","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"juzzztinsoong"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"juzzztinsoong"},"content":"            storage.writeToFile(tasklist);","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"juzzztinsoong"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"juzzztinsoong"},"content":"            System.err.println(e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"juzzztinsoong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":57,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"juzzztinsoong"},"content":"     * Entry point for Duke. This is the main method that will be called.","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"juzzztinsoong"},"content":"     * @param args Command line arguments not used in this program.","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"juzzztinsoong"},"content":"        new Duke(\"data/duke.txt\").run();","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"juzzztinsoong":61,"-":4}},{"path":"src/main/java/duke/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.commands;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":"import duke.utils.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"import duke.utils.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":" * @author juzzztinsoong","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"juzzztinsoong"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"juzzztinsoong"},"content":"    public ByeCommand() {","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"juzzztinsoong"},"content":"    };","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"juzzztinsoong"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"juzzztinsoong"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"juzzztinsoong"},"content":"        return true;","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"juzzztinsoong"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"juzzztinsoong"},"content":"    public void execute(TaskList tasklist, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"juzzztinsoong"},"content":"        ui.print(\"Aw goodbye.. ಠ_ಠ\");","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"juzzztinsoong":25}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.commands;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":"import duke.utils.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"import duke.utils.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":" * @author juzzztinsoong","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"juzzztinsoong"},"content":"public abstract class Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"juzzztinsoong"},"content":"    public Command() {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"juzzztinsoong"},"content":"     * Loads the tasks into the tasklist. This is done when printing to CLI is not","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"juzzztinsoong"},"content":"     * necessary when executing a command.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"juzzztinsoong"},"content":"     * @param tasklist the tasklist to load.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"juzzztinsoong"},"content":"     * @throws DukeException if loading fails.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"juzzztinsoong"},"content":"    public void load(TaskList tasklist) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"juzzztinsoong"},"content":"     * Executes the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"juzzztinsoong"},"content":"     * @param tasklist the tasklist that is being executed upon.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"juzzztinsoong"},"content":"     * @param ui       the ui class to use for the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"juzzztinsoong"},"content":"     * @param storage  the storage class to use for the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"juzzztinsoong"},"content":"     * @throws DukeException if execution fails.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"juzzztinsoong"},"content":"    public void execute(TaskList tasklist, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"juzzztinsoong"},"content":"     * Returns true only for ByeCommand, else parent implementation applies to all","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"juzzztinsoong"},"content":"     * child Command classes.","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"juzzztinsoong"},"content":"     * @return true only for ByeCommand, false otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"juzzztinsoong"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"juzzztinsoong"},"content":"        return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"juzzztinsoong":44}},{"path":"src/main/java/duke/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.commands;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":"import duke.utils.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":"import duke.utils.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"juzzztinsoong"},"content":" * @author juzzztinsoong","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"juzzztinsoong"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"juzzztinsoong"},"content":"public class DeadlineCommand extends TaskCommand {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"juzzztinsoong"},"content":"    private LocalDate byDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"juzzztinsoong"},"content":"    private LocalTime byTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"juzzztinsoong"},"content":"     * Constructor method for DeadlineCommand.","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"juzzztinsoong"},"content":"     * @param description the description of the deadline. Cannot be empty.","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"juzzztinsoong"},"content":"     * @param isDone true if the deadline is done, false otherwise.","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"juzzztinsoong"},"content":"     * @param byDate the date to use for the deadline. Will not be displayed if null.","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"juzzztinsoong"},"content":"     * @param byTime the time to use for the deadline. Will not be displayed if null.","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"juzzztinsoong"},"content":"    public DeadlineCommand(String description, boolean isDone, LocalDate byDate, LocalTime byTime) {","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"juzzztinsoong"},"content":"        super(description, isDone);","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"juzzztinsoong"},"content":"        this.byDate \u003d byDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"juzzztinsoong"},"content":"        this.byTime \u003d byTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"juzzztinsoong"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"juzzztinsoong"},"content":"    public void load(TaskList tasklist) {","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"juzzztinsoong"},"content":"        tasklist.add(description, isDone, byDate, byTime);","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"juzzztinsoong"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"juzzztinsoong"},"content":"    public void execute(TaskList tasklist, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"juzzztinsoong"},"content":"        String deadlineString \u003d tasklist.add(description, isDone, byDate, byTime);","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"juzzztinsoong"},"content":"        ui.print(","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"juzzztinsoong"},"content":"                String.format(\"I\u0027ve added this deadline:\\n%s\\nNow you have %d tasks in the list.\", deadlineString,","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"juzzztinsoong"},"content":"                        tasklist.getSize()));","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"juzzztinsoong":43}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.commands;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":"import duke.utils.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"import duke.utils.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":" * @author juzzztinsoong","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"juzzztinsoong"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"juzzztinsoong"},"content":"    private int index;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"juzzztinsoong"},"content":"    public DeleteCommand(int index) {","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"juzzztinsoong"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"juzzztinsoong"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"juzzztinsoong"},"content":"    public void execute(TaskList tasklist, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"juzzztinsoong"},"content":"        ui.print(tasklist.delete(index));","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"juzzztinsoong":23}},{"path":"src/main/java/duke/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.commands;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":"import duke.utils.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":"import duke.utils.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"juzzztinsoong"},"content":" * @author juzzztinsoong","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"juzzztinsoong"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"juzzztinsoong"},"content":"public class EventCommand extends TaskCommand {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"juzzztinsoong"},"content":"    protected LocalDate fromDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"juzzztinsoong"},"content":"    protected LocalTime fromTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"juzzztinsoong"},"content":"    protected LocalDate toDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"juzzztinsoong"},"content":"    protected LocalTime toTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"juzzztinsoong"},"content":"     * Constructor method for EventCommand.","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"juzzztinsoong"},"content":"     * @param description the description of the deadline. Cannot be empty.","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"juzzztinsoong"},"content":"     * @param isDone true if the deadline is done, false otherwise.","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"juzzztinsoong"},"content":"     * @param fromDate the date to use for the event start. Will not be displayed if null.","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"juzzztinsoong"},"content":"     * @param fromTime the time to use for the event start. Will not be displayed if null.","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"juzzztinsoong"},"content":"     * @param toDate the date to use for the event end. Will not be displayed if null.","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"juzzztinsoong"},"content":"     * @param toTime the time to use for the event end. Will not be displayed if null.","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"juzzztinsoong"},"content":"    public EventCommand(String description, boolean isDone, LocalDate fromDate, LocalTime fromTime, LocalDate toDate,","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"juzzztinsoong"},"content":"            LocalTime toTime) {","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"juzzztinsoong"},"content":"        super(description, isDone);","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"juzzztinsoong"},"content":"        this.fromDate \u003d fromDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"juzzztinsoong"},"content":"        this.fromTime \u003d fromTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"juzzztinsoong"},"content":"        this.toDate \u003d toDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"juzzztinsoong"},"content":"        this.toTime \u003d toTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"juzzztinsoong"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"juzzztinsoong"},"content":"    public void load(TaskList tasklist) {","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"juzzztinsoong"},"content":"        tasklist.add(description, isDone, fromDate, fromTime, toDate, toTime);","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"juzzztinsoong"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"juzzztinsoong"},"content":"    public void execute(TaskList tasklist, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"juzzztinsoong"},"content":"        String eventString \u003d tasklist.add(description, isDone, fromDate, fromTime, toDate, toTime);","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"juzzztinsoong"},"content":"        ui.print(String.format(\"I\u0027ve added this event:\\n%s\\nNow you have %d tasks in the list.\", eventString,","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"juzzztinsoong"},"content":"                tasklist.getSize()));","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"juzzztinsoong":49}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.commands;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":"import duke.utils.Storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"import duke.utils.Ui;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":" * @author juzzztinsoong","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"juzzztinsoong"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"juzzztinsoong"},"content":"    private String description;","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"juzzztinsoong"},"content":"    public FindCommand(String description) {","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"juzzztinsoong"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"juzzztinsoong"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"juzzztinsoong"},"content":"    public void execute(TaskList tasklist, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"juzzztinsoong"},"content":"        ui.print(tasklist.find(description));","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"juzzztinsoong":23}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.commands;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":"import duke.utils.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":"import duke.utils.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":" * @author juzzztinsoong","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"juzzztinsoong"},"content":"    public ListCommand() {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"juzzztinsoong"},"content":"    };","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"juzzztinsoong"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"juzzztinsoong"},"content":"    public void execute(TaskList tasklist, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"juzzztinsoong"},"content":"        ui.print(tasklist.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"juzzztinsoong":19}},{"path":"src/main/java/duke/commands/MarkDoneCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.commands;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":"import duke.utils.Storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"import duke.utils.Ui;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":" * @author juzzztinsoong","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"juzzztinsoong"},"content":"public class MarkDoneCommand extends Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"juzzztinsoong"},"content":"    private boolean isDone;","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"juzzztinsoong"},"content":"    private int index;","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"juzzztinsoong"},"content":"     * Constructor method for MarkDoneCommand.","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"juzzztinsoong"},"content":"     * @param isDone true to mark the task as done, false to unmark it.","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"juzzztinsoong"},"content":"     * @param index the index of the task.","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"juzzztinsoong"},"content":"    public MarkDoneCommand(boolean isDone, int index) {","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"juzzztinsoong"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"juzzztinsoong"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"juzzztinsoong"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"juzzztinsoong"},"content":"    public void execute(TaskList tasklist, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"juzzztinsoong"},"content":"        ui.print(tasklist.setDone(isDone, index));","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"juzzztinsoong":31}},{"path":"src/main/java/duke/commands/TaskCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.commands;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":"import duke.utils.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":"import duke.utils.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":" * @author juzzztinsoong","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":"public abstract class TaskCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"juzzztinsoong"},"content":"    protected String description;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"juzzztinsoong"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"juzzztinsoong"},"content":"     * Constructor method for TaskCommand.","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"juzzztinsoong"},"content":"     * @param description the description of the todo.","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"juzzztinsoong"},"content":"     * @param isDone true if task is done, false otherwise.","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"juzzztinsoong"},"content":"    public TaskCommand(String description, boolean isDone) {","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"juzzztinsoong"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"juzzztinsoong"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"juzzztinsoong"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"juzzztinsoong"},"content":"    public void load(TaskList tasklist) {","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"juzzztinsoong"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"juzzztinsoong"},"content":"    public void execute(TaskList tasklist, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"juzzztinsoong":32}},{"path":"src/main/java/duke/commands/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.commands;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":"import duke.utils.Storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":"import duke.utils.Ui;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":" * @author juzzztinsoong","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":"public class TodoCommand extends TaskCommand {","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"juzzztinsoong"},"content":"    public TodoCommand(String description, boolean isDone) {","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"juzzztinsoong"},"content":"        super(description, isDone);","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"juzzztinsoong"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"juzzztinsoong"},"content":"    public void load(TaskList tasklist) {","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"juzzztinsoong"},"content":"        tasklist.add(description, isDone);","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"juzzztinsoong"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"juzzztinsoong"},"content":"    public void execute(TaskList tasklist, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"juzzztinsoong"},"content":"        String todoString \u003d tasklist.add(description, isDone);","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"juzzztinsoong"},"content":"        ui.print(String.format(\"I\u0027ve added this task:\\n%s\\nNow you have %d tasks in the list.\", todoString,","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"juzzztinsoong"},"content":"                tasklist.getSize()));","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"juzzztinsoong":27}},{"path":"src/main/java/duke/exceptions/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.exceptions;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":" * @author juzzztinsoong","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":"    private String errDescription;","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":"    public DukeException(String errDescription) {","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"juzzztinsoong"},"content":"        this.errDescription \u003d errDescription;","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"juzzztinsoong"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"juzzztinsoong"},"content":"        return \"OOPS! \" + errDescription;","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"juzzztinsoong"},"content":"    public String getMessage() {","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"juzzztinsoong"},"content":"        return \"OOPS! \" + errDescription;","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"juzzztinsoong":21}},{"path":"src/main/java/duke/exceptions/IncorrectFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.exceptions;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":" * @author juzzztinsoong","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"public class IncorrectFormatException extends DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":"    public IncorrectFormatException() {","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":"        super(\"You used the wrong format!\");","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"juzzztinsoong":10}},{"path":"src/main/java/duke/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.exceptions;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":" * @author juzzztinsoong","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"public class InvalidCommandException extends DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":"    public InvalidCommandException() {","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":"        super(\"I don\u0027t know what you meant!\");","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"juzzztinsoong":11}},{"path":"src/main/java/duke/exceptions/InvalidNumberException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.exceptions;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":" * @author juzzztinsoong","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"public class InvalidNumberException extends DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":"    public InvalidNumberException() {","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":"        super(\"You didn\u0027t specify the task number!\");","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"juzzztinsoong":11}},{"path":"src/main/java/duke/exceptions/NoSuchEntryException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.exceptions;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":" * @author juzzztinsoong","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"public class NoSuchEntryException extends DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":"    public NoSuchEntryException() {","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":"        super(\"There is no such entry!\");","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"juzzztinsoong":10}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":" * @author juzzztinsoong","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"juzzztinsoong"},"content":"    protected LocalDate byDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"juzzztinsoong"},"content":"    protected LocalTime byTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"juzzztinsoong"},"content":"     * Constructor method for Deadline.","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"juzzztinsoong"},"content":"     * @param description the description of the deadline. Cannot be empty.","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"juzzztinsoong"},"content":"     * @param isDone true if the deadline is done, false otherwise.","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"juzzztinsoong"},"content":"     * @param byDate the date to use for the deadline. Will not be displayed if null.","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"juzzztinsoong"},"content":"     * @param byTime the time to use for the deadline. Will not be displayed if null.","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"juzzztinsoong"},"content":"    public Deadline(String description, boolean isDone, LocalDate byDate, LocalTime byTime) {","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"juzzztinsoong"},"content":"        super(description, isDone);","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"juzzztinsoong"},"content":"        this.byDate \u003d byDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"juzzztinsoong"},"content":"        this.byTime \u003d byTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"juzzztinsoong"},"content":"     * Returns a String representation of this Deadline. The format is","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"juzzztinsoong"},"content":"     * \"[D][StatusIcon] Description (by: Date/Time)\"","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"juzzztinsoong"},"content":"     * @return a String representation of this Deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"juzzztinsoong"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"juzzztinsoong"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"juzzztinsoong"},"content":"        return String.format(\"[D][%s] %s (by: %s %s)\", getStatusIcon(), description, (","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"juzzztinsoong"},"content":"            byDate !\u003d null ? byDate : \"\"), (byTime !\u003d null ? byTime : \"\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"juzzztinsoong"},"content":"     * Returns a string representation of this Deadline. The format is D # Doneness","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"juzzztinsoong"},"content":"     * # Description # Date/Time.","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"juzzztinsoong"},"content":"     * Note that this is different from toString() as it is used for encoding data","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"juzzztinsoong"},"content":"     * in the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"juzzztinsoong"},"content":"     * @return a string representation of this Deadline for storage in the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"juzzztinsoong"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"juzzztinsoong"},"content":"    public String toFileString() {","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"juzzztinsoong"},"content":"        return String.format(\"D # %d # %s # %s %s\", (isDone ? 1 : 0), description, (","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"juzzztinsoong"},"content":"            byDate !\u003d null ? byDate : \"\"), (byTime !\u003d null ? byTime : \"\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"juzzztinsoong":50}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":" * @author juzzztinsoong","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"juzzztinsoong"},"content":"    protected LocalDate fromDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"juzzztinsoong"},"content":"    protected LocalTime fromTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"juzzztinsoong"},"content":"    protected LocalDate toDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"juzzztinsoong"},"content":"    protected LocalTime toTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"juzzztinsoong"},"content":"     * Constructor method for Event.","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"juzzztinsoong"},"content":"     * @param description the description of the deadline. Cannot be empty.","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"juzzztinsoong"},"content":"     * @param isDone true if the deadline is done, false otherwise.","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"juzzztinsoong"},"content":"     * @param fromDate the date to use for the event start. Will not be displayed if null.","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"juzzztinsoong"},"content":"     * @param fromTime the time to use for the event start. Will not be displayed if null.","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"juzzztinsoong"},"content":"     * @param toDate the date to use for the event end. Will not be displayed if null.","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"juzzztinsoong"},"content":"     * @param toTime the time to use for the event end. Will not be displayed if null.","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"juzzztinsoong"},"content":"    public Event(String description, boolean isDone, LocalDate fromDate, LocalTime fromTime, LocalDate toDate,","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"juzzztinsoong"},"content":"            LocalTime toTime) {","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"juzzztinsoong"},"content":"        super(description, isDone);","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"juzzztinsoong"},"content":"        this.fromDate \u003d fromDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"juzzztinsoong"},"content":"        this.fromTime \u003d fromTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"juzzztinsoong"},"content":"        this.toDate \u003d toDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"juzzztinsoong"},"content":"        this.toTime \u003d toTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"juzzztinsoong"},"content":"     * Returns a String representation of this Status. The format is","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"juzzztinsoong"},"content":"     * \"[E][StatusIcon] Description (from: Date/Time to: Date/Time)\"","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"juzzztinsoong"},"content":"     * @return a String representation of this Event.","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"juzzztinsoong"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"juzzztinsoong"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"juzzztinsoong"},"content":"        return String.format(\"[E][%s] %s (from: %s %s to: %s %s)\", getStatusIcon(), description, (","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"juzzztinsoong"},"content":"            fromDate !\u003d null ? fromDate : \"\"), (fromTime !\u003d null ? fromTime : \"\"), (","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"juzzztinsoong"},"content":"                toDate !\u003d null ? toDate : \"\"), (toTime !\u003d null ? toTime : \"\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"juzzztinsoong"},"content":"     * Returns a string representation of this Event. The format is E # Doneness #","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"juzzztinsoong"},"content":"     * Description # Date/Time # Date/Time.","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"juzzztinsoong"},"content":"     * Note that this is different from toString() as it is used for encoding data","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"juzzztinsoong"},"content":"     * in the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"juzzztinsoong"},"content":"     * @return a string representation of this Event for storage in the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"juzzztinsoong"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"juzzztinsoong"},"content":"    public String toFileString() {","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"juzzztinsoong"},"content":"        return String.format(\"E # %d # %s # %s %s # %s %s\", (isDone ? 1 : 0), description, (","lastModifiedDate":"2023-09-05"},{"lineNumber":56,"author":{"gitId":"juzzztinsoong"},"content":"            fromDate !\u003d null ? fromDate : \"\"), (fromTime !\u003d null ? fromTime : \"\"), (","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"juzzztinsoong"},"content":"                toDate !\u003d null ? toDate : \"\"), (toTime !\u003d null ? toTime : \"\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"juzzztinsoong":59}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":" * @author juzzztinsoong","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"public abstract class Task {","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":"    protected String description;","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":"    protected Task(String description, boolean isDone) {","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"juzzztinsoong"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"juzzztinsoong"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"juzzztinsoong"},"content":"     * Returns the icon to use for the status.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"juzzztinsoong"},"content":"     * @return the icon to use for the status or blank if task is not done.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"juzzztinsoong"},"content":"    protected String getStatusIcon() {","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"juzzztinsoong"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"juzzztinsoong"},"content":"     * Sets the status of the task as done or not done.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"juzzztinsoong"},"content":"     * @param isDone true if done, false otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"juzzztinsoong"},"content":"    protected void setDone(boolean isDone) {","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"juzzztinsoong"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":31,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"juzzztinsoong"},"content":"     * Returns a string representation of this Task. The string is formatted as","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"juzzztinsoong"},"content":"     * \"[ ][StatusIcon] Description\"","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"juzzztinsoong"},"content":"     * @return a string representation of this Task.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"juzzztinsoong"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":37,"author":{"gitId":"juzzztinsoong"},"content":"        return String.format(\"[ ][%s] %s\", getStatusIcon(), description);","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":39,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"juzzztinsoong"},"content":"     * Returns a string representation of this Task. The format is # Doneness #","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"juzzztinsoong"},"content":"     * Description.","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"juzzztinsoong"},"content":"     * Note that this is different from toString() as it is used for encoding data","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"juzzztinsoong"},"content":"     * in the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"juzzztinsoong"},"content":"     * @return a string representation of this Task for storage in the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"juzzztinsoong"},"content":"    public String toFileString() {","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"juzzztinsoong"},"content":"        return String.format(\"  # %d # %s\", (isDone ? 1 : 0), description);","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"juzzztinsoong":50}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":"import duke.exceptions.InvalidNumberException;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":"import duke.exceptions.NoSuchEntryException;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"juzzztinsoong"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"juzzztinsoong"},"content":" * @author juzzztinsoong","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"juzzztinsoong"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"juzzztinsoong"},"content":"public class TaskList {","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"juzzztinsoong"},"content":"    protected ArrayList\u003cTask\u003e list;","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"juzzztinsoong"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"juzzztinsoong"},"content":"        this.list \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"juzzztinsoong"},"content":"     * Adds a Todo to the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"juzzztinsoong"},"content":"     * @param description the description of the todo.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"juzzztinsoong"},"content":"     * @param isDone true if todo is done, false otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"juzzztinsoong"},"content":"     * @return the string format of the newly added Todo in the list to display to","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"juzzztinsoong"},"content":"     *         the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"juzzztinsoong"},"content":"    public String add(String description, boolean isDone) {","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"juzzztinsoong"},"content":"        Todo todo \u003d new Todo(description, isDone);","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"juzzztinsoong"},"content":"        list.add(todo);","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"juzzztinsoong"},"content":"        return todo.toString();","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"juzzztinsoong"},"content":"     * Adds a Deadline to the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"juzzztinsoong"},"content":"     * @param description the description of the deadline. Cannot be empty.","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"juzzztinsoong"},"content":"     * @param isDone true if the deadline is done, false otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"juzzztinsoong"},"content":"     * @param byDate the date to use for the deadline. Will not be displayed if null.","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"juzzztinsoong"},"content":"     * @param byTime the time to use for the deadline. Will not be displayed if null.","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"juzzztinsoong"},"content":"     * @return the string format of the newly added Deadline in the list to display","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"juzzztinsoong"},"content":"     *         to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"juzzztinsoong"},"content":"    public String add(String description, boolean isDone, LocalDate byDate, LocalTime byTime) {","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"juzzztinsoong"},"content":"        Deadline deadline \u003d new Deadline(description, isDone, byDate, byTime);","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"juzzztinsoong"},"content":"        list.add(deadline);","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"juzzztinsoong"},"content":"        return deadline.toString();","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"juzzztinsoong"},"content":"     * Adds an Event to the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"juzzztinsoong"},"content":"     * @param description the description of the deadline. Cannot be empty.","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"juzzztinsoong"},"content":"     * @param isDone true if the deadline is done, false otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"juzzztinsoong"},"content":"     * @param fromDate the date to use for the event start. Will not be displayed if null.","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"juzzztinsoong"},"content":"     * @param fromTime the time to use for the event start. Will not be displayed if null.","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"juzzztinsoong"},"content":"     * @param toDate the date to use for the event end. Will not be displayed if null.","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"juzzztinsoong"},"content":"     * @param toTime the time to use for the event end. Will not be displayed if null.","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"juzzztinsoong"},"content":"     * @return the string format of the newly added Event in the list to display to","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"juzzztinsoong"},"content":"     *         the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"juzzztinsoong"},"content":"    public String add(String description, boolean isDone, LocalDate fromDate, LocalTime fromTime, LocalDate toDate,","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"juzzztinsoong"},"content":"            LocalTime toTime) {","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"juzzztinsoong"},"content":"        Event event \u003d new Event(description, isDone, fromDate, fromTime, toDate, toTime);","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"juzzztinsoong"},"content":"        list.add(event);","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"juzzztinsoong"},"content":"        return event.toString();","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":66,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":67,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"juzzztinsoong"},"content":"     * Sets or unsets task as done at the specified index.","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"juzzztinsoong"},"content":"     * @param isDone true to mark the task as done, false to unmark it.","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"juzzztinsoong"},"content":"     * @param index the index of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"juzzztinsoong"},"content":"     * @return a string describing the status of the operation to display to the","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"juzzztinsoong"},"content":"     *         user.","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"juzzztinsoong"},"content":"     * @throws DukeException if the operation is not successful or the index is","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"juzzztinsoong"},"content":"     *                       invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"juzzztinsoong"},"content":"    public String setDone(boolean isDone, int index) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"juzzztinsoong"},"content":"        try {","lastModifiedDate":"2023-08-23"},{"lineNumber":78,"author":{"gitId":"juzzztinsoong"},"content":"            if (index \u003c 0 || index + 1 \u003e list.size()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":79,"author":{"gitId":"juzzztinsoong"},"content":"                throw new NoSuchEntryException();","lastModifiedDate":"2023-08-23"},{"lineNumber":80,"author":{"gitId":"juzzztinsoong"},"content":"            } else {","lastModifiedDate":"2023-08-22"},{"lineNumber":81,"author":{"gitId":"juzzztinsoong"},"content":"                // Mark this task as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"juzzztinsoong"},"content":"                if (isDone) {","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"juzzztinsoong"},"content":"                    if (list.get(index).isDone) {","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"juzzztinsoong"},"content":"                        return \"This task is already marked as done!\\n\" + list.get(index).toString();","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"juzzztinsoong"},"content":"                    } else {","lastModifiedDate":"2023-08-22"},{"lineNumber":86,"author":{"gitId":"juzzztinsoong"},"content":"                        list.get(index).setDone(true);","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"juzzztinsoong"},"content":"                        return \"This task is now marked as done!\\n\" + list.get(index).toString();","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"juzzztinsoong"},"content":"                    }","lastModifiedDate":"2023-08-22"},{"lineNumber":89,"author":{"gitId":"juzzztinsoong"},"content":"                } else {","lastModifiedDate":"2023-08-22"},{"lineNumber":90,"author":{"gitId":"juzzztinsoong"},"content":"                    // Mark this task as not done.","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"juzzztinsoong"},"content":"                    if (!list.get(index).isDone) {","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"juzzztinsoong"},"content":"                        return \"This task is already marked as not done!\\n\" + list.get(index).toString();","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"juzzztinsoong"},"content":"                    } else {","lastModifiedDate":"2023-08-22"},{"lineNumber":94,"author":{"gitId":"juzzztinsoong"},"content":"                        list.get(index).setDone(false);","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"juzzztinsoong"},"content":"                        return \"This task is now marked as not done!\\n\" + list.get(index).toString();","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"juzzztinsoong"},"content":"                    }","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"juzzztinsoong"},"content":"                }","lastModifiedDate":"2023-08-22"},{"lineNumber":98,"author":{"gitId":"juzzztinsoong"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":99,"author":{"gitId":"juzzztinsoong"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":100,"author":{"gitId":"juzzztinsoong"},"content":"            throw new InvalidNumberException();","lastModifiedDate":"2023-08-23"},{"lineNumber":101,"author":{"gitId":"juzzztinsoong"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":102,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":103,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":104,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"juzzztinsoong"},"content":"     * Deletes the entry at the specified index. This method is called by Duke to","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"juzzztinsoong"},"content":"     * delete an entry from the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"juzzztinsoong"},"content":"     * @param index index of the entry to delete.","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"juzzztinsoong"},"content":"     * @return a String with information about the operation that was performed.","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"juzzztinsoong"},"content":"     * @throws DukeException if the operation was not successful or index was","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"juzzztinsoong"},"content":"     *                       invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"juzzztinsoong"},"content":"    public String delete(int index) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"juzzztinsoong"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":114,"author":{"gitId":"juzzztinsoong"},"content":"            if (index \u003c 0 || index + 1 \u003e list.size()) {","lastModifiedDate":"2023-08-23"},{"lineNumber":115,"author":{"gitId":"juzzztinsoong"},"content":"                throw new NoSuchEntryException();","lastModifiedDate":"2023-08-23"},{"lineNumber":116,"author":{"gitId":"juzzztinsoong"},"content":"            } else {","lastModifiedDate":"2023-08-23"},{"lineNumber":117,"author":{"gitId":"juzzztinsoong"},"content":"                String tempString \u003d list.get(index).toString();","lastModifiedDate":"2023-08-23"},{"lineNumber":118,"author":{"gitId":"juzzztinsoong"},"content":"                list.remove(index);","lastModifiedDate":"2023-08-23"},{"lineNumber":119,"author":{"gitId":"juzzztinsoong"},"content":"                return String.format(\"I\u0027ve removed this task:\\n%s\\nNow you have %d task(s) in the list.\", tempString,","lastModifiedDate":"2023-08-31"},{"lineNumber":120,"author":{"gitId":"juzzztinsoong"},"content":"                        list.size());","lastModifiedDate":"2023-08-31"},{"lineNumber":121,"author":{"gitId":"juzzztinsoong"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":122,"author":{"gitId":"juzzztinsoong"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":123,"author":{"gitId":"juzzztinsoong"},"content":"            throw new InvalidNumberException();","lastModifiedDate":"2023-08-23"},{"lineNumber":124,"author":{"gitId":"juzzztinsoong"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":125,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":126,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":127,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":128,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":129,"author":{"gitId":"juzzztinsoong"},"content":"     * Returns a string containing all the tasks with the given description.","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"juzzztinsoong"},"content":"     * @return a string representation of the list in the form of a list of Task","lastModifiedDate":"2023-09-01"},{"lineNumber":131,"author":{"gitId":"juzzztinsoong"},"content":"     *         objects separated by new lines.","lastModifiedDate":"2023-09-01"},{"lineNumber":132,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"juzzztinsoong"},"content":"    public String find(String description) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":134,"author":{"gitId":"juzzztinsoong"},"content":"        if (!description.equals(\"\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":135,"author":{"gitId":"juzzztinsoong"},"content":"            String returnString \u003d new String(\"\");","lastModifiedDate":"2023-09-01"},{"lineNumber":136,"author":{"gitId":"juzzztinsoong"},"content":"            int i \u003d 0;","lastModifiedDate":"2023-09-01"},{"lineNumber":137,"author":{"gitId":"juzzztinsoong"},"content":"            for (Task entry : list) {","lastModifiedDate":"2023-09-01"},{"lineNumber":138,"author":{"gitId":"juzzztinsoong"},"content":"                if (entry.description.contains(description)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":139,"author":{"gitId":"juzzztinsoong"},"content":"                    returnString +\u003d (entry.toString() + \"\\n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":140,"author":{"gitId":"juzzztinsoong"},"content":"                    i++;","lastModifiedDate":"2023-09-01"},{"lineNumber":141,"author":{"gitId":"juzzztinsoong"},"content":"                }","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"juzzztinsoong"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"juzzztinsoong"},"content":"            // Returns a string that contains the task description and a summary of the valid tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":144,"author":{"gitId":"juzzztinsoong"},"content":"            if (!returnString.equals(\"\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":145,"author":{"gitId":"juzzztinsoong"},"content":"                return (returnString + String.format(\"There were %d tasks containing %s.\", i, description));","lastModifiedDate":"2023-09-01"},{"lineNumber":146,"author":{"gitId":"juzzztinsoong"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":147,"author":{"gitId":"juzzztinsoong"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"juzzztinsoong"},"content":"        return String.format(\"There were no tasks containing %s.\", description);","lastModifiedDate":"2023-09-01"},{"lineNumber":149,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":150,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":151,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":152,"author":{"gitId":"juzzztinsoong"},"content":"     * Returns a string representation of the list of all tasks to display to the","lastModifiedDate":"2023-09-01"},{"lineNumber":153,"author":{"gitId":"juzzztinsoong"},"content":"     * user.","lastModifiedDate":"2023-09-01"},{"lineNumber":154,"author":{"gitId":"juzzztinsoong"},"content":"     * @return a string representation of the list in the form of a list of Task","lastModifiedDate":"2023-09-01"},{"lineNumber":155,"author":{"gitId":"juzzztinsoong"},"content":"     *         objects separated by new lines.","lastModifiedDate":"2023-09-01"},{"lineNumber":156,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":157,"author":{"gitId":"juzzztinsoong"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":158,"author":{"gitId":"juzzztinsoong"},"content":"        String returnString \u003d new String(\"\");","lastModifiedDate":"2023-08-22"},{"lineNumber":159,"author":{"gitId":"juzzztinsoong"},"content":"        int i \u003d 1;","lastModifiedDate":"2023-08-22"},{"lineNumber":160,"author":{"gitId":"juzzztinsoong"},"content":"        for (Task entry : list) {","lastModifiedDate":"2023-08-22"},{"lineNumber":161,"author":{"gitId":"juzzztinsoong"},"content":"            returnString +\u003d (i + \".\" + entry.toString() + \"\\n\");","lastModifiedDate":"2023-08-22"},{"lineNumber":162,"author":{"gitId":"juzzztinsoong"},"content":"            i++;","lastModifiedDate":"2023-08-22"},{"lineNumber":163,"author":{"gitId":"juzzztinsoong"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":164,"author":{"gitId":"juzzztinsoong"},"content":"        returnString +\u003d String.format(\"You have %d task(s) in the list.\", i - 1);","lastModifiedDate":"2023-08-31"},{"lineNumber":165,"author":{"gitId":"juzzztinsoong"},"content":"        return returnString;","lastModifiedDate":"2023-08-22"},{"lineNumber":166,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":167,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":168,"author":{"gitId":"juzzztinsoong"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2023-08-29"},{"lineNumber":169,"author":{"gitId":"juzzztinsoong"},"content":"        return list.size() \u003d\u003d 0;","lastModifiedDate":"2023-08-29"},{"lineNumber":170,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":171,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":172,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":173,"author":{"gitId":"juzzztinsoong"},"content":"     * Removes and retreives the first item in the list to save to file.","lastModifiedDate":"2023-09-01"},{"lineNumber":174,"author":{"gitId":"juzzztinsoong"},"content":"     * @return String containing the file","lastModifiedDate":"2023-09-01"},{"lineNumber":175,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":176,"author":{"gitId":"juzzztinsoong"},"content":"    public String clearList() {","lastModifiedDate":"2023-08-29"},{"lineNumber":177,"author":{"gitId":"juzzztinsoong"},"content":"        String tempString \u003d list.get(0).toFileString();","lastModifiedDate":"2023-08-29"},{"lineNumber":178,"author":{"gitId":"juzzztinsoong"},"content":"        list.remove(0);","lastModifiedDate":"2023-08-29"},{"lineNumber":179,"author":{"gitId":"juzzztinsoong"},"content":"        return tempString;","lastModifiedDate":"2023-08-29"},{"lineNumber":180,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":181,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":182,"author":{"gitId":"juzzztinsoong"},"content":"    public int getSize() {","lastModifiedDate":"2023-08-29"},{"lineNumber":183,"author":{"gitId":"juzzztinsoong"},"content":"        return list.size();","lastModifiedDate":"2023-08-29"},{"lineNumber":184,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":185,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"juzzztinsoong":185}},{"path":"src/main/java/duke/tasks/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":" * @author juzzztinsoong","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":"    public Todo(String description, boolean isDone) {","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":"        super(description, isDone);","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"juzzztinsoong"},"content":"     * Returns a String representation of this Todo. The format is \"[T][StatusIcon]","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"juzzztinsoong"},"content":"     * Description\"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"juzzztinsoong"},"content":"     * @return a String representation of this Todo.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"juzzztinsoong"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"juzzztinsoong"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"juzzztinsoong"},"content":"        return String.format(\"[T][%s] %s\", getStatusIcon(), description);","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"juzzztinsoong"},"content":"     * Returns a string representation of this Todo. The format is T # Doneness #","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"juzzztinsoong"},"content":"     * Description.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"juzzztinsoong"},"content":"     * Note that this is different from toString() as it is used for encoding data","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"juzzztinsoong"},"content":"     * in the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"juzzztinsoong"},"content":"     * @return a string representation of this Todo for storage in the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"juzzztinsoong"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"juzzztinsoong"},"content":"    public String toFileString() {","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"juzzztinsoong"},"content":"        return String.format(\"T # %d # %s\", (isDone ? 1 : 0), description);","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"juzzztinsoong":33}},{"path":"src/main/java/duke/utils/DukeEnum.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.utils;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":" * @author juzzztinsoong","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"public enum DukeEnum {","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":"    LIST(\"list\"),","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":"    MARK(\"mark\"),","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":"    UNMARK(\"unmark\"),","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"juzzztinsoong"},"content":"    TODO(\"todo\"),","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"juzzztinsoong"},"content":"    DEADLINE(\"deadline\"),","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"juzzztinsoong"},"content":"    EVENT(\"event\"),","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"juzzztinsoong"},"content":"    DELETE(\"delete\"),","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"juzzztinsoong"},"content":"    BYE(\"bye\"),","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"juzzztinsoong"},"content":"    FIND(\"find\");","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"juzzztinsoong"},"content":"    private String text;","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"juzzztinsoong"},"content":"    DukeEnum(String text) {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"juzzztinsoong"},"content":"        this.text \u003d text;","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"juzzztinsoong"},"content":"     * Returns the string associated with each enum to enable the enum mapping.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"juzzztinsoong"},"content":"     * @return the text associated with each enum.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"juzzztinsoong"},"content":"    public String getText() {","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"juzzztinsoong"},"content":"        return text;","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"juzzztinsoong":32}},{"path":"src/main/java/duke/utils/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.utils;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"import duke.commands.ByeCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":"import duke.commands.Command;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":"import duke.commands.DeadlineCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":"import duke.commands.DeleteCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":"import duke.commands.EventCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"juzzztinsoong"},"content":"import duke.commands.FindCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"juzzztinsoong"},"content":"import duke.commands.ListCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"juzzztinsoong"},"content":"import duke.commands.MarkDoneCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"juzzztinsoong"},"content":"import duke.commands.TodoCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"juzzztinsoong"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"juzzztinsoong"},"content":"import duke.exceptions.IncorrectFormatException;","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"juzzztinsoong"},"content":"import duke.exceptions.InvalidCommandException;","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"juzzztinsoong"},"content":"import duke.exceptions.InvalidNumberException;","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"juzzztinsoong"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"juzzztinsoong"},"content":" * @author juzzztinsoong","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"juzzztinsoong"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"juzzztinsoong"},"content":"public class Parser {","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"juzzztinsoong"},"content":"    public Parser() {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"juzzztinsoong"},"content":"    };","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"juzzztinsoong"},"content":"    private static class DateTimeWrapper {","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"juzzztinsoong"},"content":"        private LocalDate date;","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"juzzztinsoong"},"content":"        private LocalTime time;","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"juzzztinsoong"},"content":"        private DateTimeWrapper(LocalDate date, LocalTime time) {","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"juzzztinsoong"},"content":"            this.date \u003d date;","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"juzzztinsoong"},"content":"            this.time \u003d time;","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"juzzztinsoong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"juzzztinsoong"},"content":"     * Parses the input and returns the command and its arguments as an array of","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"juzzztinsoong"},"content":"     * Strings.","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"juzzztinsoong"},"content":"     * If there is only one word in the input it returns an array of the input and","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"juzzztinsoong"},"content":"     * an empty string.","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"juzzztinsoong"},"content":"     * @param input the command given by the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"juzzztinsoong"},"content":"    private static String[] parseInput(String input) {","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"juzzztinsoong"},"content":"        int index \u003d input.indexOf(\u0027 \u0027);","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"juzzztinsoong"},"content":"        // Returns the input string as a list of strings.","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"juzzztinsoong"},"content":"        if (index \u003e -1) {","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"juzzztinsoong"},"content":"            return input.split(\" \", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"juzzztinsoong"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"juzzztinsoong"},"content":"            String[] tempString \u003d { input, \"\" };","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"juzzztinsoong"},"content":"            return tempString;","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"juzzztinsoong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"juzzztinsoong"},"content":"     * Parses file path and returns array of Strings representing each level in the","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"juzzztinsoong"},"content":"     * file path.","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"juzzztinsoong"},"content":"     * @param input path to be parsed.","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"juzzztinsoong"},"content":"    public static String[] parseFilePath(String input) {","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"juzzztinsoong"},"content":"        int index \u003d input.indexOf(\u0027/\u0027);","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"juzzztinsoong"},"content":"        // Returns the input string as a list of strings.","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"juzzztinsoong"},"content":"        if (index \u003e -1) {","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"juzzztinsoong"},"content":"            return input.split(\"/\", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"juzzztinsoong"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"juzzztinsoong"},"content":"            String[] tempString \u003d { input, \"\" };","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"juzzztinsoong"},"content":"            return tempString;","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"juzzztinsoong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"juzzztinsoong"},"content":"     * Parses an input into an integer. This is used to determine which element in a","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"juzzztinsoong"},"content":"     * list to perform an operation on.","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"juzzztinsoong"},"content":"     * @param input string to be parsed. Must be non-null and a valid integer.","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"juzzztinsoong"},"content":"     * @return The index of the input if input is valid.","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"juzzztinsoong"},"content":"     * @throws InvalidNumberException if input isn\u0027t valid.","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"juzzztinsoong"},"content":"    private static int parseIndex(String input) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"juzzztinsoong"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"juzzztinsoong"},"content":"            return Integer.parseInt(input) - 1;","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"juzzztinsoong"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"juzzztinsoong"},"content":"            throw new InvalidNumberException();","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"juzzztinsoong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"juzzztinsoong"},"content":"     * Parses the input and returns a DateTimeWrapper. This is a convenience method","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"juzzztinsoong"},"content":"     * for deadlineParser and eventParser that will try to parse the date and time","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"juzzztinsoong"},"content":"     * out of the input.","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"juzzztinsoong"},"content":"     * @param input the input to parse. Must be non-null and a valid date or time or","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"juzzztinsoong"},"content":"     *              both.","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"juzzztinsoong"},"content":"     * @return a DateTimeWrapper that contains the date and time of the input if","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"juzzztinsoong"},"content":"     *         applicable.","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"juzzztinsoong"},"content":"     * @throws IncorrectFormatException if input isn\u0027t valid.","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"juzzztinsoong"},"content":"    private static DateTimeWrapper parseDate(String input) throws IncorrectFormatException {","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"juzzztinsoong"},"content":"        // Input is parsed into two if it contains both a date and time component.","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"juzzztinsoong"},"content":"        String[] parsedInput \u003d parseInput(input);","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"juzzztinsoong"},"content":"        LocalDate date;","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"juzzztinsoong"},"content":"        LocalTime time;","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"juzzztinsoong"},"content":"        String i1 \u003d parsedInput[0].trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":103,"author":{"gitId":"juzzztinsoong"},"content":"        String i2 \u003d parsedInput[1].trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":104,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":105,"author":{"gitId":"juzzztinsoong"},"content":"        // Matches both halves of the input to the date.","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"juzzztinsoong"},"content":"        if (i1.matches(\"[0-9]{2}.[0-9]{2}.[0-9]{4}\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"juzzztinsoong"},"content":"            date \u003d LocalDate.parse(i1.substring(6, 10) + \"-\" + i1.substring(3, 5) + \"-\" + i1.substring(0, 2));","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"juzzztinsoong"},"content":"        } else if (i2.matches(\"[0-9]{2}.[0-9]{2}.[0-9]{4}\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"juzzztinsoong"},"content":"            date \u003d LocalDate.parse(i2.substring(6, 10) + \"-\" + i2.substring(3, 5) + \"-\" + i2.substring(0, 2));","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"juzzztinsoong"},"content":"        } else if (i1.matches(\"[0-9]{4}.[0-9]{2}.[0-9]{2}\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"juzzztinsoong"},"content":"            date \u003d LocalDate.parse(i1.substring(0, 4) + \"-\" + i1.substring(5, 7) + \"-\" + i1.substring(8, 10));","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"juzzztinsoong"},"content":"        } else if (i2.matches(\"[0-9]{4}.[0-9]{2}.[0-9]{2}\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"juzzztinsoong"},"content":"            date \u003d LocalDate.parse(i2.substring(0, 4) + \"-\" + i2.substring(5, 7) + \"-\" + i2.substring(8, 10));","lastModifiedDate":"2023-08-31"},{"lineNumber":114,"author":{"gitId":"juzzztinsoong"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":115,"author":{"gitId":"juzzztinsoong"},"content":"            date \u003d null;","lastModifiedDate":"2023-08-31"},{"lineNumber":116,"author":{"gitId":"juzzztinsoong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":117,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":118,"author":{"gitId":"juzzztinsoong"},"content":"        // Matches both halves of the input to the time.","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"juzzztinsoong"},"content":"        if (i1.matches(\"[0-9]{2}.[0-9]{2}.[0-9]{2}\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":120,"author":{"gitId":"juzzztinsoong"},"content":"            time \u003d LocalTime.parse(i1.substring(0, 2) + \":\" + i1.substring(3, 5) + \":\" + i1.substring(6, 8));","lastModifiedDate":"2023-08-31"},{"lineNumber":121,"author":{"gitId":"juzzztinsoong"},"content":"        } else if (i2.matches(\"[0-9]{2}.[0-9]{2}.[0-9]{2}\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":122,"author":{"gitId":"juzzztinsoong"},"content":"            time \u003d LocalTime.parse(i2.substring(0, 2) + \":\" + i2.substring(3, 5) + \":\" + i2.substring(6, 8));","lastModifiedDate":"2023-08-31"},{"lineNumber":123,"author":{"gitId":"juzzztinsoong"},"content":"        } else if (i1.matches(\"[0-9]{2}.[0-9]{2}\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":124,"author":{"gitId":"juzzztinsoong"},"content":"            time \u003d LocalTime.parse(i1.substring(0, 2) + \":\" + i1.substring(3, 5) + \":00\");","lastModifiedDate":"2023-08-31"},{"lineNumber":125,"author":{"gitId":"juzzztinsoong"},"content":"        } else if (i2.matches(\"[0-9]{2}.[0-9]{2}\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":126,"author":{"gitId":"juzzztinsoong"},"content":"            time \u003d LocalTime.parse(i2.substring(0, 2) + \":\" + i2.substring(3, 5) + \":00\");","lastModifiedDate":"2023-08-31"},{"lineNumber":127,"author":{"gitId":"juzzztinsoong"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":128,"author":{"gitId":"juzzztinsoong"},"content":"            time \u003d null;","lastModifiedDate":"2023-08-31"},{"lineNumber":129,"author":{"gitId":"juzzztinsoong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":130,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":131,"author":{"gitId":"juzzztinsoong"},"content":"        // Checks that the time and date fields are not null.","lastModifiedDate":"2023-09-01"},{"lineNumber":132,"author":{"gitId":"juzzztinsoong"},"content":"        if (time \u003d\u003d null \u0026\u0026 date \u003d\u003d null) {","lastModifiedDate":"2023-08-31"},{"lineNumber":133,"author":{"gitId":"juzzztinsoong"},"content":"            throw new IncorrectFormatException();","lastModifiedDate":"2023-08-31"},{"lineNumber":134,"author":{"gitId":"juzzztinsoong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":135,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":136,"author":{"gitId":"juzzztinsoong"},"content":"        return new DateTimeWrapper(date, time);","lastModifiedDate":"2023-08-31"},{"lineNumber":137,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":138,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":139,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":140,"author":{"gitId":"juzzztinsoong"},"content":"     * Parses a string and returns a ToDoCommand. If the string is empty an","lastModifiedDate":"2023-09-01"},{"lineNumber":141,"author":{"gitId":"juzzztinsoong"},"content":"     * IncorrectFormatException is thrown.","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"juzzztinsoong"},"content":"     * @param input the description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"juzzztinsoong"},"content":"     * @param isDone true if task is completed.","lastModifiedDate":"2023-09-01"},{"lineNumber":144,"author":{"gitId":"juzzztinsoong"},"content":"     * @return a ToDoCommand that can be executed on behalf of the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":145,"author":{"gitId":"juzzztinsoong"},"content":"     * @throws IncorrectFormatException if input string is empty.","lastModifiedDate":"2023-09-01"},{"lineNumber":146,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":147,"author":{"gitId":"juzzztinsoong"},"content":"    public static TodoCommand parseTodo(String input, boolean isDone) throws IncorrectFormatException {","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"juzzztinsoong"},"content":"        // Returns a new ToDoCommand object.","lastModifiedDate":"2023-09-01"},{"lineNumber":149,"author":{"gitId":"juzzztinsoong"},"content":"        if (input.equals(\"\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":150,"author":{"gitId":"juzzztinsoong"},"content":"            throw new IncorrectFormatException();","lastModifiedDate":"2023-08-31"},{"lineNumber":151,"author":{"gitId":"juzzztinsoong"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":152,"author":{"gitId":"juzzztinsoong"},"content":"            return new TodoCommand(input, isDone);","lastModifiedDate":"2023-09-01"},{"lineNumber":153,"author":{"gitId":"juzzztinsoong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":154,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":155,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":156,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":157,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":158,"author":{"gitId":"juzzztinsoong"},"content":"     * Parses the input and returns a DeadlineCommand.","lastModifiedDate":"2023-09-01"},{"lineNumber":159,"author":{"gitId":"juzzztinsoong"},"content":"     * @param input the string to parse. Must be in the format","lastModifiedDate":"2023-09-01"},{"lineNumber":160,"author":{"gitId":"juzzztinsoong"},"content":"     *              \"description isDone /by time/date/both\".","lastModifiedDate":"2023-09-01"},{"lineNumber":161,"author":{"gitId":"juzzztinsoong"},"content":"     * @param isDone true if task is completed.","lastModifiedDate":"2023-09-01"},{"lineNumber":162,"author":{"gitId":"juzzztinsoong"},"content":"     * @return a DeadlineCommand that can be executed on behalf of the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":163,"author":{"gitId":"juzzztinsoong"},"content":"     * @throws IncorrectFormatException if input string has invalid components.","lastModifiedDate":"2023-09-01"},{"lineNumber":164,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":165,"author":{"gitId":"juzzztinsoong"},"content":"    public static DeadlineCommand parseDeadline(String input, boolean isDone) throws IncorrectFormatException {","lastModifiedDate":"2023-09-01"},{"lineNumber":166,"author":{"gitId":"juzzztinsoong"},"content":"        int index \u003d input.indexOf(\" /by \");","lastModifiedDate":"2023-08-31"},{"lineNumber":167,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":168,"author":{"gitId":"juzzztinsoong"},"content":"        // Returns a new DeadlineCommand object.","lastModifiedDate":"2023-09-01"},{"lineNumber":169,"author":{"gitId":"juzzztinsoong"},"content":"        if (index \u003e -1) {","lastModifiedDate":"2023-08-31"},{"lineNumber":170,"author":{"gitId":"juzzztinsoong"},"content":"            String[] parsedInput \u003d input.split(\" /by \", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":171,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":172,"author":{"gitId":"juzzztinsoong"},"content":"            try {","lastModifiedDate":"2023-08-31"},{"lineNumber":173,"author":{"gitId":"juzzztinsoong"},"content":"                String description \u003d parsedInput[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":174,"author":{"gitId":"juzzztinsoong"},"content":"                DateTimeWrapper dates \u003d parseDate(parsedInput[1]);","lastModifiedDate":"2023-09-01"},{"lineNumber":175,"author":{"gitId":"juzzztinsoong"},"content":"                LocalDate byDate \u003d dates.date;","lastModifiedDate":"2023-08-31"},{"lineNumber":176,"author":{"gitId":"juzzztinsoong"},"content":"                LocalTime byTime \u003d dates.time;","lastModifiedDate":"2023-08-31"},{"lineNumber":177,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":178,"author":{"gitId":"juzzztinsoong"},"content":"                return new DeadlineCommand(description, isDone, byDate, byTime);","lastModifiedDate":"2023-09-01"},{"lineNumber":179,"author":{"gitId":"juzzztinsoong"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":180,"author":{"gitId":"juzzztinsoong"},"content":"                throw new IncorrectFormatException();","lastModifiedDate":"2023-08-31"},{"lineNumber":181,"author":{"gitId":"juzzztinsoong"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":182,"author":{"gitId":"juzzztinsoong"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":183,"author":{"gitId":"juzzztinsoong"},"content":"            throw new IncorrectFormatException();","lastModifiedDate":"2023-08-31"},{"lineNumber":184,"author":{"gitId":"juzzztinsoong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":185,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":186,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":187,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":188,"author":{"gitId":"juzzztinsoong"},"content":"     * Parses the input string and returns an EventCommand.","lastModifiedDate":"2023-09-01"},{"lineNumber":189,"author":{"gitId":"juzzztinsoong"},"content":"     * @param input the string to parse. Must be in the format","lastModifiedDate":"2023-09-01"},{"lineNumber":190,"author":{"gitId":"juzzztinsoong"},"content":"     *              \"description isDone /from time/date/both /to time/date/both\".","lastModifiedDate":"2023-09-01"},{"lineNumber":191,"author":{"gitId":"juzzztinsoong"},"content":"     * @param isDone true if task is completed.","lastModifiedDate":"2023-09-01"},{"lineNumber":192,"author":{"gitId":"juzzztinsoong"},"content":"     * @return an EventCommand that can be executed on behalf of the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":193,"author":{"gitId":"juzzztinsoong"},"content":"     * @throws IncorrectFormatException if input string has invalid components.","lastModifiedDate":"2023-09-01"},{"lineNumber":194,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":195,"author":{"gitId":"juzzztinsoong"},"content":"    public static EventCommand parseEvent(String input, boolean isDone) throws IncorrectFormatException {","lastModifiedDate":"2023-09-01"},{"lineNumber":196,"author":{"gitId":"juzzztinsoong"},"content":"        int indexFrom \u003d input.indexOf(\" /from \");","lastModifiedDate":"2023-08-31"},{"lineNumber":197,"author":{"gitId":"juzzztinsoong"},"content":"        int indexTo \u003d input.indexOf(\" /to \");","lastModifiedDate":"2023-08-31"},{"lineNumber":198,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":199,"author":{"gitId":"juzzztinsoong"},"content":"        // Returns a new EventCommand object.","lastModifiedDate":"2023-09-01"},{"lineNumber":200,"author":{"gitId":"juzzztinsoong"},"content":"        if (indexFrom \u003e -1 \u0026\u0026 indexTo \u003e -1) {","lastModifiedDate":"2023-08-31"},{"lineNumber":201,"author":{"gitId":"juzzztinsoong"},"content":"            String[] parsedInput \u003d { input.substring(0, indexFrom), input.substring(indexFrom + 7, indexTo),","lastModifiedDate":"2023-08-31"},{"lineNumber":202,"author":{"gitId":"juzzztinsoong"},"content":"                    input.substring(indexTo + 5, input.length()) };","lastModifiedDate":"2023-08-31"},{"lineNumber":203,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":204,"author":{"gitId":"juzzztinsoong"},"content":"            try {","lastModifiedDate":"2023-08-31"},{"lineNumber":205,"author":{"gitId":"juzzztinsoong"},"content":"                String description \u003d parsedInput[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":206,"author":{"gitId":"juzzztinsoong"},"content":"                DateTimeWrapper fromDateTime \u003d parseDate(parsedInput[1]);","lastModifiedDate":"2023-09-01"},{"lineNumber":207,"author":{"gitId":"juzzztinsoong"},"content":"                DateTimeWrapper toDateTime \u003d parseDate(parsedInput[2]);","lastModifiedDate":"2023-09-01"},{"lineNumber":208,"author":{"gitId":"juzzztinsoong"},"content":"                LocalDate fromDate \u003d fromDateTime.date;","lastModifiedDate":"2023-08-31"},{"lineNumber":209,"author":{"gitId":"juzzztinsoong"},"content":"                LocalTime fromTime \u003d fromDateTime.time;","lastModifiedDate":"2023-08-31"},{"lineNumber":210,"author":{"gitId":"juzzztinsoong"},"content":"                LocalDate toDate \u003d toDateTime.date;","lastModifiedDate":"2023-08-31"},{"lineNumber":211,"author":{"gitId":"juzzztinsoong"},"content":"                LocalTime toTime \u003d toDateTime.time;","lastModifiedDate":"2023-08-31"},{"lineNumber":212,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":213,"author":{"gitId":"juzzztinsoong"},"content":"                // Smart date guesser for incomplete date formats e.g.","lastModifiedDate":"2023-09-01"},{"lineNumber":214,"author":{"gitId":"juzzztinsoong"},"content":"                // 1/1/2023 12:00 to 16:00 will be assumed to be 1/1/2023 12:00 to 1/1/2023 16:00.","lastModifiedDate":"2023-09-01"},{"lineNumber":215,"author":{"gitId":"juzzztinsoong"},"content":"                if (toDate \u003d\u003d null \u0026\u0026 fromDate !\u003d null) {","lastModifiedDate":"2023-08-31"},{"lineNumber":216,"author":{"gitId":"juzzztinsoong"},"content":"                    toDate \u003d fromDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":217,"author":{"gitId":"juzzztinsoong"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":218,"author":{"gitId":"juzzztinsoong"},"content":"                if (toDate !\u003d null \u0026\u0026 fromDate \u003d\u003d null) {","lastModifiedDate":"2023-08-31"},{"lineNumber":219,"author":{"gitId":"juzzztinsoong"},"content":"                    fromDate \u003d toDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":220,"author":{"gitId":"juzzztinsoong"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":221,"author":{"gitId":"juzzztinsoong"},"content":"                if (fromTime \u003d\u003d null \u0026\u0026 toTime !\u003d null) {","lastModifiedDate":"2023-08-31"},{"lineNumber":222,"author":{"gitId":"juzzztinsoong"},"content":"                    fromTime \u003d toTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":223,"author":{"gitId":"juzzztinsoong"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":224,"author":{"gitId":"juzzztinsoong"},"content":"                if (fromTime !\u003d null \u0026\u0026 toTime \u003d\u003d null) {","lastModifiedDate":"2023-08-31"},{"lineNumber":225,"author":{"gitId":"juzzztinsoong"},"content":"                    toTime \u003d fromTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":226,"author":{"gitId":"juzzztinsoong"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":227,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":228,"author":{"gitId":"juzzztinsoong"},"content":"                return new EventCommand(description, isDone, fromDate, fromTime, toDate, toTime);","lastModifiedDate":"2023-09-01"},{"lineNumber":229,"author":{"gitId":"juzzztinsoong"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":230,"author":{"gitId":"juzzztinsoong"},"content":"                throw new IncorrectFormatException();","lastModifiedDate":"2023-08-31"},{"lineNumber":231,"author":{"gitId":"juzzztinsoong"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":232,"author":{"gitId":"juzzztinsoong"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":233,"author":{"gitId":"juzzztinsoong"},"content":"            throw new IncorrectFormatException();","lastModifiedDate":"2023-08-31"},{"lineNumber":234,"author":{"gitId":"juzzztinsoong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":235,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":236,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":237,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":238,"author":{"gitId":"juzzztinsoong"},"content":"     * Parses a file line and returns a Command. This is a helper method for loading","lastModifiedDate":"2023-09-01"},{"lineNumber":239,"author":{"gitId":"juzzztinsoong"},"content":"     * stored data into the tasklist.","lastModifiedDate":"2023-09-01"},{"lineNumber":240,"author":{"gitId":"juzzztinsoong"},"content":"     * @param input the input to be parsed.","lastModifiedDate":"2023-09-01"},{"lineNumber":241,"author":{"gitId":"juzzztinsoong"},"content":"     * @return a Command based on the input string or null if there was an error","lastModifiedDate":"2023-09-01"},{"lineNumber":242,"author":{"gitId":"juzzztinsoong"},"content":"     *         parsing the input.","lastModifiedDate":"2023-09-01"},{"lineNumber":243,"author":{"gitId":"juzzztinsoong"},"content":"     * @throws DukeException if file line has invalid format.","lastModifiedDate":"2023-09-01"},{"lineNumber":244,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":245,"author":{"gitId":"juzzztinsoong"},"content":"    public static Command parseFileContent(String input) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":246,"author":{"gitId":"juzzztinsoong"},"content":"        String[] parsedContent \u003d input.split(\" # \");","lastModifiedDate":"2023-08-31"},{"lineNumber":247,"author":{"gitId":"juzzztinsoong"},"content":"        boolean isDone \u003d Integer.parseInt(parsedContent[1]) \u003d\u003d 1;","lastModifiedDate":"2023-09-01"},{"lineNumber":248,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":249,"author":{"gitId":"juzzztinsoong"},"content":"        if (parsedContent.length \u003d\u003d 3 \u0026\u0026 parsedContent[0].charAt(0) \u003d\u003d \u0027T\u0027) {","lastModifiedDate":"2023-08-31"},{"lineNumber":250,"author":{"gitId":"juzzztinsoong"},"content":"            // Parse as Todo.","lastModifiedDate":"2023-09-01"},{"lineNumber":251,"author":{"gitId":"juzzztinsoong"},"content":"            return parseTodo(parsedContent[2], isDone);","lastModifiedDate":"2023-09-01"},{"lineNumber":252,"author":{"gitId":"juzzztinsoong"},"content":"        } else if (parsedContent.length \u003d\u003d 4 \u0026\u0026 parsedContent[0].charAt(0) \u003d\u003d \u0027D\u0027) {","lastModifiedDate":"2023-08-31"},{"lineNumber":253,"author":{"gitId":"juzzztinsoong"},"content":"            // Parse as Deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":254,"author":{"gitId":"juzzztinsoong"},"content":"            return parseDeadline(parsedContent[2] + \" /by \" + parsedContent[3], isDone);","lastModifiedDate":"2023-09-01"},{"lineNumber":255,"author":{"gitId":"juzzztinsoong"},"content":"        } else if (parsedContent.length \u003d\u003d 5 \u0026\u0026 parsedContent[0].charAt(0) \u003d\u003d \u0027E\u0027) {","lastModifiedDate":"2023-08-31"},{"lineNumber":256,"author":{"gitId":"juzzztinsoong"},"content":"            // Parse as Event.","lastModifiedDate":"2023-09-01"},{"lineNumber":257,"author":{"gitId":"juzzztinsoong"},"content":"            return parseEvent(parsedContent[2] + \" /from \" + parsedContent[3] + \" /to \" + parsedContent[4], isDone);","lastModifiedDate":"2023-09-01"},{"lineNumber":258,"author":{"gitId":"juzzztinsoong"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":259,"author":{"gitId":"juzzztinsoong"},"content":"            throw new DukeException(\"Invalid file format\");","lastModifiedDate":"2023-08-31"},{"lineNumber":260,"author":{"gitId":"juzzztinsoong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":261,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":262,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":263,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":264,"author":{"gitId":"juzzztinsoong"},"content":"     * Parses the input and returns a Command. This method is used to parse command","lastModifiedDate":"2023-09-01"},{"lineNumber":265,"author":{"gitId":"juzzztinsoong"},"content":"     * arguments that are sent to Duke.","lastModifiedDate":"2023-09-01"},{"lineNumber":266,"author":{"gitId":"juzzztinsoong"},"content":"     * @param input String that contains the command and arguments. Must be non-null","lastModifiedDate":"2023-09-01"},{"lineNumber":267,"author":{"gitId":"juzzztinsoong"},"content":"     *              and valid.","lastModifiedDate":"2023-09-01"},{"lineNumber":268,"author":{"gitId":"juzzztinsoong"},"content":"     * @return Command parsed from the input.","lastModifiedDate":"2023-09-01"},{"lineNumber":269,"author":{"gitId":"juzzztinsoong"},"content":"     * @throws DukeException to pass error message along to CLI.","lastModifiedDate":"2023-09-01"},{"lineNumber":270,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":271,"author":{"gitId":"juzzztinsoong"},"content":"    public static Command parse(String input) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":272,"author":{"gitId":"juzzztinsoong"},"content":"        String[] parsedInput \u003d parseInput(input);","lastModifiedDate":"2023-09-01"},{"lineNumber":273,"author":{"gitId":"juzzztinsoong"},"content":"        String command \u003d parsedInput[0].trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":274,"author":{"gitId":"juzzztinsoong"},"content":"        String args \u003d parsedInput[1].trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":275,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":276,"author":{"gitId":"juzzztinsoong"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":277,"author":{"gitId":"juzzztinsoong"},"content":"            DukeEnum commandtype \u003d map(command);","lastModifiedDate":"2023-08-31"},{"lineNumber":278,"author":{"gitId":"juzzztinsoong"},"content":"            // Returns a command object for the command type.","lastModifiedDate":"2023-09-01"},{"lineNumber":279,"author":{"gitId":"juzzztinsoong"},"content":"            switch (commandtype) {","lastModifiedDate":"2023-08-31"},{"lineNumber":280,"author":{"gitId":"juzzztinsoong"},"content":"            case BYE:","lastModifiedDate":"2023-08-31"},{"lineNumber":281,"author":{"gitId":"juzzztinsoong"},"content":"                return new ByeCommand();","lastModifiedDate":"2023-08-31"},{"lineNumber":282,"author":{"gitId":"juzzztinsoong"},"content":"            case LIST:","lastModifiedDate":"2023-08-31"},{"lineNumber":283,"author":{"gitId":"juzzztinsoong"},"content":"                return new ListCommand();","lastModifiedDate":"2023-08-31"},{"lineNumber":284,"author":{"gitId":"juzzztinsoong"},"content":"            case MARK:","lastModifiedDate":"2023-08-31"},{"lineNumber":285,"author":{"gitId":"juzzztinsoong"},"content":"                return new MarkDoneCommand(true, parseIndex(args));","lastModifiedDate":"2023-09-01"},{"lineNumber":286,"author":{"gitId":"juzzztinsoong"},"content":"            case UNMARK:","lastModifiedDate":"2023-08-31"},{"lineNumber":287,"author":{"gitId":"juzzztinsoong"},"content":"                return new MarkDoneCommand(false, parseIndex(args));","lastModifiedDate":"2023-09-01"},{"lineNumber":288,"author":{"gitId":"juzzztinsoong"},"content":"            case TODO:","lastModifiedDate":"2023-08-31"},{"lineNumber":289,"author":{"gitId":"juzzztinsoong"},"content":"                return parseTodo(args, false);","lastModifiedDate":"2023-09-01"},{"lineNumber":290,"author":{"gitId":"juzzztinsoong"},"content":"            case DEADLINE:","lastModifiedDate":"2023-08-31"},{"lineNumber":291,"author":{"gitId":"juzzztinsoong"},"content":"                return parseDeadline(args, false);","lastModifiedDate":"2023-09-01"},{"lineNumber":292,"author":{"gitId":"juzzztinsoong"},"content":"            case EVENT:","lastModifiedDate":"2023-08-31"},{"lineNumber":293,"author":{"gitId":"juzzztinsoong"},"content":"                return parseEvent(args, false);","lastModifiedDate":"2023-09-01"},{"lineNumber":294,"author":{"gitId":"juzzztinsoong"},"content":"            case DELETE:","lastModifiedDate":"2023-08-31"},{"lineNumber":295,"author":{"gitId":"juzzztinsoong"},"content":"                return new DeleteCommand(parseIndex(args));","lastModifiedDate":"2023-09-01"},{"lineNumber":296,"author":{"gitId":"juzzztinsoong"},"content":"            case FIND:","lastModifiedDate":"2023-09-01"},{"lineNumber":297,"author":{"gitId":"juzzztinsoong"},"content":"                return new FindCommand(args);","lastModifiedDate":"2023-09-01"},{"lineNumber":298,"author":{"gitId":"juzzztinsoong"},"content":"            default:","lastModifiedDate":"2023-08-31"},{"lineNumber":299,"author":{"gitId":"juzzztinsoong"},"content":"                throw new InvalidCommandException();","lastModifiedDate":"2023-08-31"},{"lineNumber":300,"author":{"gitId":"juzzztinsoong"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":301,"author":{"gitId":"juzzztinsoong"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":302,"author":{"gitId":"juzzztinsoong"},"content":"            throw e;","lastModifiedDate":"2023-08-31"},{"lineNumber":303,"author":{"gitId":"juzzztinsoong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":304,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":305,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":306,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":307,"author":{"gitId":"juzzztinsoong"},"content":"     * Maps a Duke command to a Duke enum. This is used to determine which command","lastModifiedDate":"2023-09-01"},{"lineNumber":308,"author":{"gitId":"juzzztinsoong"},"content":"     * to run for each user input.","lastModifiedDate":"2023-09-01"},{"lineNumber":309,"author":{"gitId":"juzzztinsoong"},"content":"     * @param command String representation of the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":310,"author":{"gitId":"juzzztinsoong"},"content":"     * @return The enum corresponding to the command or null if none is found in the","lastModifiedDate":"2023-09-01"},{"lineNumber":311,"author":{"gitId":"juzzztinsoong"},"content":"     *         enum.","lastModifiedDate":"2023-09-01"},{"lineNumber":312,"author":{"gitId":"juzzztinsoong"},"content":"     * @throws DukeException if the command is not found in the enum.","lastModifiedDate":"2023-09-01"},{"lineNumber":313,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":314,"author":{"gitId":"juzzztinsoong"},"content":"    public static DukeEnum map(String command) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":315,"author":{"gitId":"juzzztinsoong"},"content":"        for (DukeEnum e : DukeEnum.values()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":316,"author":{"gitId":"juzzztinsoong"},"content":"            // Returns the command that was entered by the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":317,"author":{"gitId":"juzzztinsoong"},"content":"            if (command.equals(e.getText())) {","lastModifiedDate":"2023-08-31"},{"lineNumber":318,"author":{"gitId":"juzzztinsoong"},"content":"                return e;","lastModifiedDate":"2023-08-31"},{"lineNumber":319,"author":{"gitId":"juzzztinsoong"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":320,"author":{"gitId":"juzzztinsoong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":321,"author":{"gitId":"juzzztinsoong"},"content":"        throw new InvalidCommandException();","lastModifiedDate":"2023-08-31"},{"lineNumber":322,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":323,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"juzzztinsoong":323}},{"path":"src/main/java/duke/utils/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.utils;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":"import java.io.File;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":"import java.nio.charset.StandardCharsets;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"juzzztinsoong"},"content":"import java.nio.file.StandardOpenOption;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"juzzztinsoong"},"content":"import java.util.List;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"juzzztinsoong"},"content":"import duke.commands.Command;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"juzzztinsoong"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"juzzztinsoong"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"juzzztinsoong"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"juzzztinsoong"},"content":" * @author juzzztinsoong","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"juzzztinsoong"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"juzzztinsoong"},"content":"public class Storage {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"juzzztinsoong"},"content":"    private Path path;","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"juzzztinsoong"},"content":"     * Constructor method for Storage.","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"juzzztinsoong"},"content":"     * @param filepath duke.txt filepath.","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"juzzztinsoong"},"content":"    public Storage(String filepath) {","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"juzzztinsoong"},"content":"        String homedir \u003d new File(System.getProperty(\"user.dir\")).getParent();","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"juzzztinsoong"},"content":"        String[] splitFilepath \u003d Parser.parseFilePath(filepath);","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"juzzztinsoong"},"content":"        this.path \u003d Paths.get(homedir, splitFilepath[0], splitFilepath[1]);","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"juzzztinsoong"},"content":"     * Loads saved data and returns the tasklist.","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"juzzztinsoong"},"content":"     * @return the tasklist that was loaded from the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"juzzztinsoong"},"content":"    public TaskList loadFromFile() throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"juzzztinsoong"},"content":"        if (Files.exists(path)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"juzzztinsoong"},"content":"            TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"juzzztinsoong"},"content":"            try {","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"juzzztinsoong"},"content":"                List\u003cString\u003e contents \u003d Files.readAllLines(path);","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"juzzztinsoong"},"content":"                for (String content : contents) {","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"juzzztinsoong"},"content":"                    Command c \u003d Parser.parseFileContent(content);","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"juzzztinsoong"},"content":"                    c.load(tasklist);","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"juzzztinsoong"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"juzzztinsoong"},"content":"                return tasklist;","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"juzzztinsoong"},"content":"            } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"juzzztinsoong"},"content":"                throw new DukeException(e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"juzzztinsoong"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"juzzztinsoong"},"content":"                throw new DukeException(e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"juzzztinsoong"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"juzzztinsoong"},"content":"                throw e;","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"juzzztinsoong"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"juzzztinsoong"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"juzzztinsoong"},"content":"            throw new DukeException(\"File not found\");","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"juzzztinsoong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"juzzztinsoong"},"content":"     * Writes tasklist to file. This method is used to write a file to the file","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"juzzztinsoong"},"content":"     * system. The file is created if it does not exist.","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"juzzztinsoong"},"content":"     * @param tasklist the tasklist to write to file.","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"juzzztinsoong"},"content":"    public void writeToFile(TaskList tasklist) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"juzzztinsoong"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"juzzztinsoong"},"content":"            // Creates a file if it doesn t exist.","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"juzzztinsoong"},"content":"            if (Files.notExists(path)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"juzzztinsoong"},"content":"                Files.createFile(path);","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"juzzztinsoong"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"juzzztinsoong"},"content":"            BufferedWriter writer \u003d Files.newBufferedWriter(path, StandardCharsets.UTF_8,","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"juzzztinsoong"},"content":"                    StandardOpenOption.TRUNCATE_EXISTING);","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"juzzztinsoong"},"content":"            // This method is used to flush the tasklist into the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"juzzztinsoong"},"content":"            while (!tasklist.isEmpty()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"juzzztinsoong"},"content":"                String tempString \u003d tasklist.clearList();","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"juzzztinsoong"},"content":"                writer.write(tempString + \"\\n\");","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"juzzztinsoong"},"content":"                writer.flush();","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"juzzztinsoong"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"juzzztinsoong"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"juzzztinsoong"},"content":"            throw new DukeException(e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"juzzztinsoong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"juzzztinsoong":85}},{"path":"src/main/java/duke/utils/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.utils;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":" * @author juzzztinsoong","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":"public class Ui {","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":"    private Scanner scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"juzzztinsoong"},"content":"    private static final String LINE \u003d \"――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――\\n\";","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"juzzztinsoong"},"content":"    private static final String LOGO \u003d \"     ______     _                     ______          __     ____        __ \\n\"","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"juzzztinsoong"},"content":"        + \"    / ____/____(_)___  ____ ____     /_  __/__  _  __/ /_   / __ )____  / /_\\n\"","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"juzzztinsoong"},"content":"        + \"   / /   / ___/ / __ \\\\/ __ `/ _ \\\\     / / / _ \\\\| |/_/ __/  / __  / __ \\\\/ __/\\n\"","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"juzzztinsoong"},"content":"        + \"  / /___/ /  / / / / / /_/ /  __/    / / /  __/\u003e  \u003c/ /_   / /_/ / /_/ / /_  \\n\"","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"juzzztinsoong"},"content":"        + \"  \\\\____/_/  /_/_/ /_/\\\\__, /\\\\___/    /_/  \\\\___/_/|_|\\\\__/  /_____/\\\\____/\\\\__/  \\n\"","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"juzzztinsoong"},"content":"        + \"                    /____/                                                  \\n\";","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"juzzztinsoong"},"content":"    public Ui() {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"juzzztinsoong"},"content":"        scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"juzzztinsoong"},"content":"     * Displays the welcome message to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"juzzztinsoong"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"juzzztinsoong"},"content":"        System.out.println(String.format(\"%sHi, I am a\\n%s\\nHow can I help you hehe.. (° ͜ʖ °)\\n%s\", LINE, LOGO, LINE));","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"juzzztinsoong"},"content":"     * Reads a command from the input stream, prints, then returns it. This method","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"juzzztinsoong"},"content":"     * is called by the command line interface to allow the user to select a command","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"juzzztinsoong"},"content":"     * to be executed.","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"juzzztinsoong"},"content":"     * @return String command entered by the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"juzzztinsoong"},"content":"    public String readCommand() {","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"juzzztinsoong"},"content":"        String input \u003d scanner.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"juzzztinsoong"},"content":"        System.out.println(String.format(\"You said: %s\\n%s\", input, LINE));","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"juzzztinsoong"},"content":"        return input;","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"juzzztinsoong"},"content":"     * Prints a string to the console. This is a convenience method for","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"juzzztinsoong"},"content":"     * System.out.println(str).","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"juzzztinsoong"},"content":"     * @param str string to print","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"juzzztinsoong"},"content":"    public void print(String str) {","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"juzzztinsoong"},"content":"        System.out.println(str);","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"juzzztinsoong"},"content":"     * Prints a divider line to the console.","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"juzzztinsoong"},"content":"    public void showLine() {","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"juzzztinsoong"},"content":"        System.out.println(LINE);","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"juzzztinsoong"},"content":"     * Prints an error message to the console. This method is called by the index","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"juzzztinsoong"},"content":"     * file when an error occurs.","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"juzzztinsoong"},"content":"     * @param message for display to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"juzzztinsoong"},"content":"    public void showError(String message) {","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"juzzztinsoong"},"content":"        System.out.println(message);","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"juzzztinsoong"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"juzzztinsoong"},"content":"     * Close the scanner and show goodbye. This is called when the user inputs the","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"juzzztinsoong"},"content":"     * closing command.","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"juzzztinsoong"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"juzzztinsoong"},"content":"    public void showGoodbye() {","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"juzzztinsoong"},"content":"        scanner.close();","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"juzzztinsoong":77}},{"path":"src/test/java/duke/tasks/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":"public class TaskListTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"juzzztinsoong"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"juzzztinsoong"},"content":"    public void Test1() {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"juzzztinsoong"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"juzzztinsoong"},"content":"        tasklist.add(\"hi\", true);","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"juzzztinsoong"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"juzzztinsoong"},"content":"            tasklist.delete(0);","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"juzzztinsoong"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"juzzztinsoong"},"content":"            // TODO Auto-generated catch block","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"juzzztinsoong"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"juzzztinsoong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"juzzztinsoong"},"content":"        assertEquals(tasklist.getSize(), new TaskList().getSize());","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"juzzztinsoong"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"juzzztinsoong"},"content":"    public void Test2() {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"juzzztinsoong"},"content":"        TaskList tasklist \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"juzzztinsoong"},"content":"        tasklist.add(\"hi\", true);","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"juzzztinsoong"},"content":"        assertEquals(tasklist.toString(), \"1.[T][X] hi\\nYou have 1 task(s) in the list.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"juzzztinsoong":30}},{"path":"src/test/java/duke/utils/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"package duke.utils;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":"import duke.commands.DeadlineCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"import duke.exceptions.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":"import duke.exceptions.IncorrectFormatException;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"juzzztinsoong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"juzzztinsoong"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"juzzztinsoong"},"content":"public class ParserTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"juzzztinsoong"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"juzzztinsoong"},"content":"    public void test1() {","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"juzzztinsoong"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"juzzztinsoong"},"content":"            assertEquals(Parser.parseDeadline(\"blah /by 12/12/2012 16:00\", false),","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"juzzztinsoong"},"content":"                    new DeadlineCommand(null, false, LocalDate.of(2012, 12, 12), LocalTime.of(16, 0)));","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"juzzztinsoong"},"content":"        } catch (IncorrectFormatException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"juzzztinsoong"},"content":"            // TODO Auto-generated catch block","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"juzzztinsoong"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"juzzztinsoong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"juzzztinsoong"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"juzzztinsoong"},"content":"    public void test2() {","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"juzzztinsoong"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"juzzztinsoong"},"content":"            assertEquals(Parser.map(\"delete\"), DukeEnum.DELETE);","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"juzzztinsoong"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"juzzztinsoong"},"content":"            // TODO Auto-generated catch block","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"juzzztinsoong"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"juzzztinsoong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"juzzztinsoong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"juzzztinsoong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"juzzztinsoong"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"juzzztinsoong":36}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"juzzztinsoong"},"content":"todo asdkfja 25/25","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"juzzztinsoong"},"content":"deadline as /by 2012/06/06","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"juzzztinsoong"},"content":"event hi /from 10:00 /to 08:00 23/12/2023","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"juzzztinsoong"},"content":"list","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"juzzztinsoong"},"content":"mark 2","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"juzzztinsoong"},"content":"unmark 1","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"juzzztinsoong"},"content":"find as","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"juzzztinsoong"},"content":"list","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"juzzztinsoong"},"content":"bye","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"juzzztinsoong":9}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"juzzztinsoong"},"content":"REM FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"-":20,"juzzztinsoong":1}}]
