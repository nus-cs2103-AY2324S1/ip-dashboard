[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"AryanG01"},"content":"# duke.Duke project template","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"AryanG01"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":22,"AryanG01":2}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"AryanG01"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"AryanG01"},"content":"checkstyle {","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"AryanG01"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"AryanG01"},"content":"}","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":19,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"AryanG01"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"AryanG01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"AryanG01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"AryanG01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"AryanG01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"AryanG01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"AryanG01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"AryanG01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"AryanG01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"AryanG01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"AryanG01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"AryanG01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"AryanG01"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"AryanG01"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"AryanG01"},"content":"    archiveFileName \u003d \u0027duke.jar\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":41,"AryanG01":22}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AryanG01"},"content":"package duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"AryanG01"},"content":"import duke.command.DukeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"AryanG01"},"content":"import duke.command.Parser;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"AryanG01"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"AryanG01"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"AryanG01"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"AryanG01"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"AryanG01"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"AryanG01"},"content":" * The Duke class represents a chatbot application.","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"AryanG01"},"content":" * It allows users to add, mark as done, mark as not done, delete, and list 3 different type of tasks.","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"AryanG01"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"AryanG01"},"content":"public class Duke {","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"AryanG01"},"content":"    private Storage storage;","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"AryanG01"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"AryanG01"},"content":"    private Ui ui;","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"AryanG01"},"content":"     * Constructs a Duke object with the specified file path for storage.","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"AryanG01"},"content":"     * @param filePath The file path where tasks are stored.","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"AryanG01"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"AryanG01"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"AryanG01"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"AryanG01"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"AryanG01"},"content":"            this.tasks \u003d new TaskList(this.storage.loadTasksFromFile());","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"AryanG01"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"AryanG01"},"content":"            this.ui.showLoadingError();","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"AryanG01"},"content":"            this.tasks \u003d new TaskList();","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"AryanG01"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"AryanG01"},"content":"     * Runs the Duke application.","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"AryanG01"},"content":"     * It displays a welcome message, reads user commands,","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"AryanG01"},"content":"     * and performs corresponding actions until the user exits.","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"AryanG01"},"content":"    public void run() {","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"AryanG01"},"content":"        this.ui.showWelcomeMessage();","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"AryanG01"},"content":"        int taskIndex;","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"AryanG01"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"AryanG01"},"content":"        while (true) {","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"AryanG01"},"content":"            String command \u003d scanner.nextLine();","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"AryanG01"},"content":"            try {","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"AryanG01"},"content":"                if (Parser.isBye(command)) {","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"AryanG01"},"content":"                    this.ui.showGoodbyeMessage();","lastModifiedDate":"2023-09-08"},{"lineNumber":59,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":60,"author":{"gitId":"AryanG01"},"content":"                    this.storage.saveTasksToFile(this.tasks.getAllTasks());","lastModifiedDate":"2023-09-08"},{"lineNumber":61,"author":{"gitId":"AryanG01"},"content":"                    break;","lastModifiedDate":"2023-08-24"},{"lineNumber":62,"author":{"gitId":"AryanG01"},"content":"                } else if (Parser.isList(command)) {","lastModifiedDate":"2023-09-06"},{"lineNumber":63,"author":{"gitId":"AryanG01"},"content":"                    this.ui.showTaskList(this.tasks.getAllTasks());","lastModifiedDate":"2023-09-08"},{"lineNumber":64,"author":{"gitId":"AryanG01"},"content":"                } else if (Parser.isMarkDone(command)) {","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"AryanG01"},"content":"                    taskIndex \u003d Parser.extractTaskIndex(command);","lastModifiedDate":"2023-09-08"},{"lineNumber":66,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":67,"author":{"gitId":"AryanG01"},"content":"                    this.tasks.markAsDone(taskIndex);","lastModifiedDate":"2023-09-08"},{"lineNumber":68,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":69,"author":{"gitId":"AryanG01"},"content":"                    this.ui.showTaskMarkedAsDone(this.tasks.getTask(taskIndex));","lastModifiedDate":"2023-09-08"},{"lineNumber":70,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":71,"author":{"gitId":"AryanG01"},"content":"                    this.storage.saveTasksToFile(this.tasks.getAllTasks());","lastModifiedDate":"2023-09-08"},{"lineNumber":72,"author":{"gitId":"AryanG01"},"content":"                } else if (Parser.isMarkNotDone(command)) {","lastModifiedDate":"2023-09-07"},{"lineNumber":73,"author":{"gitId":"AryanG01"},"content":"                    taskIndex \u003d Parser.extractTaskIndex(command);","lastModifiedDate":"2023-09-08"},{"lineNumber":74,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":75,"author":{"gitId":"AryanG01"},"content":"                    this.tasks.markAsNotDone(taskIndex);","lastModifiedDate":"2023-09-08"},{"lineNumber":76,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":77,"author":{"gitId":"AryanG01"},"content":"                    this.ui.showTaskMarkedAsNotDone(this.tasks.getTask(taskIndex));","lastModifiedDate":"2023-09-08"},{"lineNumber":78,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":79,"author":{"gitId":"AryanG01"},"content":"                    this.storage.saveTasksToFile(this.tasks.getAllTasks());","lastModifiedDate":"2023-09-08"},{"lineNumber":80,"author":{"gitId":"AryanG01"},"content":"                } else if (Parser.isDelete(command)) {","lastModifiedDate":"2023-09-07"},{"lineNumber":81,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":82,"author":{"gitId":"AryanG01"},"content":"                    taskIndex \u003d Parser.extractTaskIndex(command);","lastModifiedDate":"2023-09-08"},{"lineNumber":83,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":84,"author":{"gitId":"AryanG01"},"content":"                    Task deletedTask \u003d this.tasks.deleteTask(taskIndex);","lastModifiedDate":"2023-09-08"},{"lineNumber":85,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":86,"author":{"gitId":"AryanG01"},"content":"                    this.ui.showTaskDeleted(deletedTask, this.tasks.getTotalTasks());","lastModifiedDate":"2023-09-08"},{"lineNumber":87,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":88,"author":{"gitId":"AryanG01"},"content":"                    this.storage.saveTasksToFile(this.tasks.getAllTasks());","lastModifiedDate":"2023-09-08"},{"lineNumber":89,"author":{"gitId":"AryanG01"},"content":"                } else if (Parser.isFind(command)) {","lastModifiedDate":"2023-09-08"},{"lineNumber":90,"author":{"gitId":"AryanG01"},"content":"                    String keyword \u003d Parser.extractKeyword(command);","lastModifiedDate":"2023-09-08"},{"lineNumber":91,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":92,"author":{"gitId":"AryanG01"},"content":"                    ArrayList\u003cTask\u003e matchingTasks \u003d tasks.findTasksByKeyword(keyword);","lastModifiedDate":"2023-09-08"},{"lineNumber":93,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":94,"author":{"gitId":"AryanG01"},"content":"                    ui.showMatchingTasks(matchingTasks);","lastModifiedDate":"2023-09-08"},{"lineNumber":95,"author":{"gitId":"AryanG01"},"content":"                } else {","lastModifiedDate":"2023-09-07"},{"lineNumber":96,"author":{"gitId":"AryanG01"},"content":"                    Task newTask \u003d Parser.parseTask(command);","lastModifiedDate":"2023-09-07"},{"lineNumber":97,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":98,"author":{"gitId":"AryanG01"},"content":"                    this.tasks.addTask(newTask);","lastModifiedDate":"2023-09-08"},{"lineNumber":99,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":100,"author":{"gitId":"AryanG01"},"content":"                    this.ui.showTaskAdded(newTask, this.tasks.getTotalTasks());","lastModifiedDate":"2023-09-08"},{"lineNumber":101,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":102,"author":{"gitId":"AryanG01"},"content":"                    this.storage.saveTasksToFile(this.tasks.getAllTasks());","lastModifiedDate":"2023-09-08"},{"lineNumber":103,"author":{"gitId":"AryanG01"},"content":"                }","lastModifiedDate":"2023-09-07"},{"lineNumber":104,"author":{"gitId":"AryanG01"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":105,"author":{"gitId":"AryanG01"},"content":"                this.ui.showError(e.getMessage());","lastModifiedDate":"2023-09-08"},{"lineNumber":106,"author":{"gitId":"AryanG01"},"content":"            }","lastModifiedDate":"2023-09-07"},{"lineNumber":107,"author":{"gitId":"AryanG01"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":108,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":109,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":110,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":111,"author":{"gitId":"AryanG01"},"content":"     * The main method to start the Duke application.","lastModifiedDate":"2023-09-07"},{"lineNumber":112,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":113,"author":{"gitId":"AryanG01"},"content":"     * @param args The command-line arguments (not used in this application).","lastModifiedDate":"2023-09-07"},{"lineNumber":114,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":115,"author":{"gitId":"AryanG01"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-07"},{"lineNumber":116,"author":{"gitId":"AryanG01"},"content":"        new Duke(\"./src/main/java/duke/duke.txt\").run();","lastModifiedDate":"2023-09-06"},{"lineNumber":117,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":118,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":119,"author":{"gitId":"AryanG01"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"AryanG01":119}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AryanG01"},"content":"package duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"AryanG01"},"content":"import duke.command.DukeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"AryanG01"},"content":"import duke.command.Parser;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"AryanG01"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"AryanG01"},"content":"import java.io.*;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"AryanG01"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"AryanG01"},"content":"import java.util.List;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"AryanG01"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"AryanG01"},"content":" * The Storage class is responsible for loading and saving tasks to/from a file.","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"AryanG01"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"AryanG01"},"content":"public class Storage {","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"AryanG01"},"content":"    private String filePath;","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"AryanG01"},"content":"     * Constructs a Storage object with the specified file path.","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"AryanG01"},"content":"     * @param filePath The file path where tasks are stored.","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"AryanG01"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"AryanG01"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"AryanG01"},"content":"     * Loads tasks from a file and returns them as a list of tasks.","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"AryanG01"},"content":"     * @return An ArrayList of tasks loaded from the file.","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"AryanG01"},"content":"     * @throws DukeException If there is an error loading tasks from the file.","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"AryanG01"},"content":"    public ArrayList\u003cTask\u003e loadTasksFromFile() throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"AryanG01"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"AryanG01"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"AryanG01"},"content":"            File file \u003d new File(filePath);","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"AryanG01"},"content":"            if (!file.exists()) {","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"AryanG01"},"content":"                return tasks; // If the file doesn\u0027t exist yet, no need to load tasks","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"AryanG01"},"content":"            }","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"AryanG01"},"content":"            BufferedReader reader \u003d new BufferedReader(new FileReader(file));","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"AryanG01"},"content":"            String line;","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"AryanG01"},"content":"            while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"AryanG01"},"content":"                Task task \u003d Parser.parseFileLine(line);","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"AryanG01"},"content":"                tasks.add(task);","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"AryanG01"},"content":"            }","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"AryanG01"},"content":"            reader.close();","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"AryanG01"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"AryanG01"},"content":"            throw new DukeException(\"Error loading tasks from file: \" + e.getMessage());","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"AryanG01"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"AryanG01"},"content":"        return tasks;","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"AryanG01"},"content":"     * Saves a list of tasks to the file.","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"AryanG01"},"content":"     * @param tasks The list of tasks to be saved.","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"AryanG01"},"content":"     * @throws DukeException If there is an error saving tasks to the file.","lastModifiedDate":"2023-09-07"},{"lineNumber":61,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":62,"author":{"gitId":"AryanG01"},"content":"    public void saveTasksToFile(List\u003cTask\u003e tasks) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":63,"author":{"gitId":"AryanG01"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":64,"author":{"gitId":"AryanG01"},"content":"            FileWriter writer \u003d new FileWriter(filePath);","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"AryanG01"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"AryanG01"},"content":"                writer.write(task.toFileString() + \"\\n\");","lastModifiedDate":"2023-09-07"},{"lineNumber":67,"author":{"gitId":"AryanG01"},"content":"            }","lastModifiedDate":"2023-09-07"},{"lineNumber":68,"author":{"gitId":"AryanG01"},"content":"            writer.close();","lastModifiedDate":"2023-09-07"},{"lineNumber":69,"author":{"gitId":"AryanG01"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-06"},{"lineNumber":70,"author":{"gitId":"AryanG01"},"content":"            throw new DukeException(\"Error saving tasks to file: \" + e.getMessage());","lastModifiedDate":"2023-09-06"},{"lineNumber":71,"author":{"gitId":"AryanG01"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":72,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":73,"author":{"gitId":"AryanG01"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"AryanG01":73}},{"path":"src/main/java/duke/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AryanG01"},"content":"package duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"AryanG01"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"AryanG01"},"content":" * The TaskType enum represents different types of tasks in the Duke application.","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"AryanG01"},"content":" * It includes TODO, DEADLINE, and EVENT as possible task types.","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"AryanG01"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"AryanG01"},"content":"public enum TaskType {","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"AryanG01"},"content":"     * Represents a TODO task type.","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"AryanG01"},"content":"    TODO,","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"AryanG01"},"content":"     * Represents a DEADLINE task type.","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"AryanG01"},"content":"    DEADLINE,","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"AryanG01"},"content":"     * Represents an EVENT task type.","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"AryanG01"},"content":"    EVENT;","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"AryanG01"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"AryanG01":22}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AryanG01"},"content":"package duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"AryanG01"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"AryanG01"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"AryanG01"},"content":"import java.util.List;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"AryanG01"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"AryanG01"},"content":" * The Ui class provides user interface functionality for interacting with the Duke application.","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"AryanG01"},"content":" * It displays messages to the user, such as welcome messages, task lists, and error messages.","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"AryanG01"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"AryanG01"},"content":"public class Ui {","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"AryanG01"},"content":"     * Displays a welcome message to the user.","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"AryanG01"},"content":"    String line \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"AryanG01"},"content":"    public void showWelcomeMessage() {","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"AryanG01"},"content":"        System.out.println(line);","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"AryanG01"},"content":"        System.out.println(\" Hello! I\u0027m Axela\");","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"AryanG01"},"content":"        System.out.println(\" What can I do for you?\");","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"AryanG01"},"content":"        System.out.println(line);","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"AryanG01"},"content":"     * Displays a goodbye message to the user.","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"AryanG01"},"content":"    public void showGoodbyeMessage() {","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"AryanG01"},"content":"        System.out.println(line);","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"AryanG01"},"content":"        System.out.println(\" Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"AryanG01"},"content":"        System.out.println(line);","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"AryanG01"},"content":"     * Displays an error message when tasks cannot be loaded from a file.","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"AryanG01"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"AryanG01"},"content":"        System.out.println(line);","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"AryanG01"},"content":"        System.out.println(\"Error loading tasks from file.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"AryanG01"},"content":"        System.out.println(line);","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"AryanG01"},"content":"     * Displays a list of tasks to the user.","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"AryanG01"},"content":"     * @param taskList The list of tasks to display.","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"AryanG01"},"content":"    public void showTaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2023-09-08"},{"lineNumber":52,"author":{"gitId":"AryanG01"},"content":"        System.out.println(line);","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":54,"author":{"gitId":"AryanG01"},"content":"        System.out.println(\" Here are the tasks in your list:\");","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"AryanG01"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"AryanG01"},"content":"            System.out.println(\" \" + (i + 1) + \".\" + taskList.get(i));","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"AryanG01"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"AryanG01"},"content":"        System.out.println(line);","lastModifiedDate":"2023-09-08"},{"lineNumber":59,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":61,"author":{"gitId":"AryanG01"},"content":"    public void showMatchingTasks(ArrayList\u003cTask\u003e matchingTasks) {","lastModifiedDate":"2023-09-08"},{"lineNumber":62,"author":{"gitId":"AryanG01"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-09-08"},{"lineNumber":63,"author":{"gitId":"AryanG01"},"content":"        System.out.println(\" Here are the matching tasks in your list:\");","lastModifiedDate":"2023-09-08"},{"lineNumber":64,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":65,"author":{"gitId":"AryanG01"},"content":"        for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {","lastModifiedDate":"2023-09-08"},{"lineNumber":66,"author":{"gitId":"AryanG01"},"content":"            System.out.println(\" \" + (i + 1) + \".\" + matchingTasks.get(i));","lastModifiedDate":"2023-09-08"},{"lineNumber":67,"author":{"gitId":"AryanG01"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":68,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":69,"author":{"gitId":"AryanG01"},"content":"        System.out.println(\"____________________________________________________________\");","lastModifiedDate":"2023-09-08"},{"lineNumber":70,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":71,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":72,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":73,"author":{"gitId":"AryanG01"},"content":"     * Displays a message indicating that a task has been added.","lastModifiedDate":"2023-09-07"},{"lineNumber":74,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":75,"author":{"gitId":"AryanG01"},"content":"     * @param task       The task that has been added.","lastModifiedDate":"2023-09-07"},{"lineNumber":76,"author":{"gitId":"AryanG01"},"content":"     * @param totalTasks The total number of tasks after adding.","lastModifiedDate":"2023-09-07"},{"lineNumber":77,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":78,"author":{"gitId":"AryanG01"},"content":"    public void showTaskAdded(Task task, int totalTasks) {","lastModifiedDate":"2023-09-07"},{"lineNumber":79,"author":{"gitId":"AryanG01"},"content":"        System.out.println(line);","lastModifiedDate":"2023-09-08"},{"lineNumber":80,"author":{"gitId":"AryanG01"},"content":"        System.out.println(\" Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-09-07"},{"lineNumber":81,"author":{"gitId":"AryanG01"},"content":"        System.out.println(\"   \" + task);","lastModifiedDate":"2023-09-07"},{"lineNumber":82,"author":{"gitId":"AryanG01"},"content":"        System.out.println(\" Now you have \" + totalTasks + \" tasks in the list.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":83,"author":{"gitId":"AryanG01"},"content":"        System.out.println(line);","lastModifiedDate":"2023-09-08"},{"lineNumber":84,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":85,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":86,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":87,"author":{"gitId":"AryanG01"},"content":"     * Displays a message indicating that a task has been marked as done.","lastModifiedDate":"2023-09-07"},{"lineNumber":88,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":89,"author":{"gitId":"AryanG01"},"content":"     * @param task The task that has been marked as done.","lastModifiedDate":"2023-09-07"},{"lineNumber":90,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":91,"author":{"gitId":"AryanG01"},"content":"    public void showTaskMarkedAsDone(Task task) {","lastModifiedDate":"2023-09-07"},{"lineNumber":92,"author":{"gitId":"AryanG01"},"content":"        System.out.println(line);","lastModifiedDate":"2023-09-08"},{"lineNumber":93,"author":{"gitId":"AryanG01"},"content":"        System.out.println(\" Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-09-07"},{"lineNumber":94,"author":{"gitId":"AryanG01"},"content":"        System.out.println(\"   \" + task);","lastModifiedDate":"2023-09-07"},{"lineNumber":95,"author":{"gitId":"AryanG01"},"content":"        System.out.println(line);","lastModifiedDate":"2023-09-08"},{"lineNumber":96,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":97,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":98,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":99,"author":{"gitId":"AryanG01"},"content":"     * Displays a message indicating that a task has been marked as not done.","lastModifiedDate":"2023-09-07"},{"lineNumber":100,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":101,"author":{"gitId":"AryanG01"},"content":"     * @param task The task that has been marked as not done.","lastModifiedDate":"2023-09-07"},{"lineNumber":102,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":103,"author":{"gitId":"AryanG01"},"content":"    public void showTaskMarkedAsNotDone(Task task) {","lastModifiedDate":"2023-09-07"},{"lineNumber":104,"author":{"gitId":"AryanG01"},"content":"        System.out.println(line);","lastModifiedDate":"2023-09-08"},{"lineNumber":105,"author":{"gitId":"AryanG01"},"content":"        System.out.println(\" OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-09-07"},{"lineNumber":106,"author":{"gitId":"AryanG01"},"content":"        System.out.println(\"   \" + task);","lastModifiedDate":"2023-09-07"},{"lineNumber":107,"author":{"gitId":"AryanG01"},"content":"        System.out.println(line);","lastModifiedDate":"2023-09-08"},{"lineNumber":108,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":109,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":110,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":111,"author":{"gitId":"AryanG01"},"content":"     * Displays a message indicating that a task has been deleted.","lastModifiedDate":"2023-09-07"},{"lineNumber":112,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":113,"author":{"gitId":"AryanG01"},"content":"     * @param task       The task that has been deleted.","lastModifiedDate":"2023-09-07"},{"lineNumber":114,"author":{"gitId":"AryanG01"},"content":"     * @param totalTasks The total number of tasks after deletion.","lastModifiedDate":"2023-09-07"},{"lineNumber":115,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":116,"author":{"gitId":"AryanG01"},"content":"    public void showTaskDeleted(Task task, int totalTasks) {","lastModifiedDate":"2023-09-07"},{"lineNumber":117,"author":{"gitId":"AryanG01"},"content":"        System.out.println(line);","lastModifiedDate":"2023-09-08"},{"lineNumber":118,"author":{"gitId":"AryanG01"},"content":"        System.out.println(\" Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-09-07"},{"lineNumber":119,"author":{"gitId":"AryanG01"},"content":"        System.out.println(\"   \" + task);","lastModifiedDate":"2023-09-07"},{"lineNumber":120,"author":{"gitId":"AryanG01"},"content":"        System.out.println(\" Now you have \" + totalTasks + \" tasks in the list.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":121,"author":{"gitId":"AryanG01"},"content":"        System.out.println(line);","lastModifiedDate":"2023-09-08"},{"lineNumber":122,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":123,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":124,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":125,"author":{"gitId":"AryanG01"},"content":"     * Displays an error message to the user.","lastModifiedDate":"2023-09-07"},{"lineNumber":126,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":127,"author":{"gitId":"AryanG01"},"content":"     * @param message The error message to display.","lastModifiedDate":"2023-09-07"},{"lineNumber":128,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":129,"author":{"gitId":"AryanG01"},"content":"    public void showError(String message) {","lastModifiedDate":"2023-09-07"},{"lineNumber":130,"author":{"gitId":"AryanG01"},"content":"        System.out.println(line);","lastModifiedDate":"2023-09-08"},{"lineNumber":131,"author":{"gitId":"AryanG01"},"content":"        System.out.println(\" \" + message);","lastModifiedDate":"2023-09-07"},{"lineNumber":132,"author":{"gitId":"AryanG01"},"content":"        System.out.println(line);","lastModifiedDate":"2023-09-08"},{"lineNumber":133,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":134,"author":{"gitId":"AryanG01"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"AryanG01":134}},{"path":"src/main/java/duke/command/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AryanG01"},"content":"package duke.command;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"AryanG01"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"AryanG01"},"content":" * The DukeException class represents an exception specific to the Duke application.","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"AryanG01"},"content":" * It extends the base Exception class and provides a custom message for the exception.","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"AryanG01"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"AryanG01"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"AryanG01"},"content":"     * Constructs a DukeException with the specified error message.","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"AryanG01"},"content":"     * @param message The error message associated with the exception.","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"AryanG01"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"AryanG01"},"content":"        super(message);","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"AryanG01"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"AryanG01":16}},{"path":"src/main/java/duke/command/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AryanG01"},"content":"package duke.command;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"AryanG01"},"content":"import duke.TaskType;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"AryanG01"},"content":"import duke.task.DeadlineTask;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"AryanG01"},"content":"import duke.task.EventTask;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"AryanG01"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"AryanG01"},"content":"import duke.task.TodoTask;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"AryanG01"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"AryanG01"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"AryanG01"},"content":" * The Parser class is responsible for parsing user commands and generating corresponding Task objects.","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"AryanG01"},"content":" * It also provides utility methods for checking specific command types.","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"AryanG01"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"AryanG01"},"content":"public class Parser {","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"AryanG01"},"content":"     * Checks if the given command represents the \"bye\" command.","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"AryanG01"},"content":"     * @param command The user command to check.","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"AryanG01"},"content":"     * @return True if the command is \"bye,\" false otherwise.","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"AryanG01"},"content":"    public static boolean isBye(String command) {","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"AryanG01"},"content":"        return command.equalsIgnoreCase(\"bye\");","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"AryanG01"},"content":"     * Checks if the given command represents the \"list\" command.","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"AryanG01"},"content":"     * @param command The user command to check.","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"AryanG01"},"content":"     * @return True if the command is \"list,\" false otherwise.","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"AryanG01"},"content":"    public static boolean isList(String command) {","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"AryanG01"},"content":"        return command.equalsIgnoreCase(\"list\");","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"AryanG01"},"content":"     * Checks if the given command represents the \"mark\" command.","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"AryanG01"},"content":"     * @param command The user command to check.","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"AryanG01"},"content":"     * @return True if the command starts with \"mark,\" false otherwise.","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"AryanG01"},"content":"    public static boolean isMarkDone(String command) {","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"AryanG01"},"content":"        return command.startsWith(\"mark\");","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"AryanG01"},"content":"     * Checks if the given command represents the \"unmark\" command.","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"AryanG01"},"content":"     * @param command The user command to check.","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"AryanG01"},"content":"     * @return True if the command starts with \"unmark,\" false otherwise.","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"AryanG01"},"content":"    public static boolean isMarkNotDone(String command) {","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"AryanG01"},"content":"        return command.startsWith(\"unmark\");","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"AryanG01"},"content":"     * Checks if the given command represents the \"delete\" command.","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"AryanG01"},"content":"     * @param command The user command to check.","lastModifiedDate":"2023-09-07"},{"lineNumber":61,"author":{"gitId":"AryanG01"},"content":"     * @return True if the command starts with \"delete,\" false otherwise.","lastModifiedDate":"2023-09-07"},{"lineNumber":62,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":63,"author":{"gitId":"AryanG01"},"content":"    public static boolean isDelete(String command) {","lastModifiedDate":"2023-09-07"},{"lineNumber":64,"author":{"gitId":"AryanG01"},"content":"        return command.startsWith(\"delete\");","lastModifiedDate":"2023-09-07"},{"lineNumber":65,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":66,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":67,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":68,"author":{"gitId":"AryanG01"},"content":"     * Extracts the task index from the given command.","lastModifiedDate":"2023-09-07"},{"lineNumber":69,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":70,"author":{"gitId":"AryanG01"},"content":"     * @param command The user command containing the task index.","lastModifiedDate":"2023-09-07"},{"lineNumber":71,"author":{"gitId":"AryanG01"},"content":"     * @return The extracted task index.","lastModifiedDate":"2023-09-07"},{"lineNumber":72,"author":{"gitId":"AryanG01"},"content":"     * @throws DukeException If the task index cannot be extracted or is invalid.","lastModifiedDate":"2023-09-07"},{"lineNumber":73,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":74,"author":{"gitId":"AryanG01"},"content":"    public static int extractTaskIndex(String command) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":75,"author":{"gitId":"AryanG01"},"content":"        String[] parts \u003d command.split(\" \");","lastModifiedDate":"2023-09-07"},{"lineNumber":76,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":77,"author":{"gitId":"AryanG01"},"content":"        if (parts.length \u003c 2) {","lastModifiedDate":"2023-09-07"},{"lineNumber":78,"author":{"gitId":"AryanG01"},"content":"            throw new DukeException(\"OOPS!!! Please provide the task index.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":79,"author":{"gitId":"AryanG01"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":80,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":81,"author":{"gitId":"AryanG01"},"content":"        return Integer.parseInt(parts[1].trim()) - 1;","lastModifiedDate":"2023-09-06"},{"lineNumber":82,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":83,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":84,"author":{"gitId":"AryanG01"},"content":"    public static boolean isFind(String command) {","lastModifiedDate":"2023-09-08"},{"lineNumber":85,"author":{"gitId":"AryanG01"},"content":"        return command.startsWith(\"find\");","lastModifiedDate":"2023-09-08"},{"lineNumber":86,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":87,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":88,"author":{"gitId":"AryanG01"},"content":"    public static String extractKeyword(String command) {","lastModifiedDate":"2023-09-08"},{"lineNumber":89,"author":{"gitId":"AryanG01"},"content":"        return command.substring(\"find\".length()).trim();","lastModifiedDate":"2023-09-08"},{"lineNumber":90,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":91,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":92,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":93,"author":{"gitId":"AryanG01"},"content":"     * Parses the given command and generates a Task object based on its content.","lastModifiedDate":"2023-09-07"},{"lineNumber":94,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":95,"author":{"gitId":"AryanG01"},"content":"     * @param command The user command to parse.","lastModifiedDate":"2023-09-07"},{"lineNumber":96,"author":{"gitId":"AryanG01"},"content":"     * @return A Task object representing the parsed command.","lastModifiedDate":"2023-09-07"},{"lineNumber":97,"author":{"gitId":"AryanG01"},"content":"     * @throws DukeException If the command cannot be parsed or is invalid.","lastModifiedDate":"2023-09-07"},{"lineNumber":98,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":99,"author":{"gitId":"AryanG01"},"content":"    public static Task parseTask(String command) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":100,"author":{"gitId":"AryanG01"},"content":"        String[] parts \u003d command.split(\" \", 2);","lastModifiedDate":"2023-09-07"},{"lineNumber":101,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":102,"author":{"gitId":"AryanG01"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":103,"author":{"gitId":"AryanG01"},"content":"            TaskType taskType \u003d TaskType.valueOf(parts[0].toUpperCase());","lastModifiedDate":"2023-09-07"},{"lineNumber":104,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":105,"author":{"gitId":"AryanG01"},"content":"            switch (taskType) {","lastModifiedDate":"2023-09-07"},{"lineNumber":106,"author":{"gitId":"AryanG01"},"content":"                case TODO:","lastModifiedDate":"2023-09-07"},{"lineNumber":107,"author":{"gitId":"AryanG01"},"content":"                    // Parse the description, fromDate, and toDate","lastModifiedDate":"2023-09-06"},{"lineNumber":108,"author":{"gitId":"AryanG01"},"content":"                    String[] todoParts \u003d parts[1].split(\" /from \");","lastModifiedDate":"2023-09-07"},{"lineNumber":109,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":110,"author":{"gitId":"AryanG01"},"content":"                    if (todoParts.length !\u003d 2) {","lastModifiedDate":"2023-09-07"},{"lineNumber":111,"author":{"gitId":"AryanG01"},"content":"                        throw new DukeException(\"OOPS!!! Todo tasks must include \u0027/from\u0027 for date.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":112,"author":{"gitId":"AryanG01"},"content":"                    }","lastModifiedDate":"2023-09-06"},{"lineNumber":113,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":114,"author":{"gitId":"AryanG01"},"content":"                    String[] dateRange \u003d todoParts[1].split(\" /to \");","lastModifiedDate":"2023-09-07"},{"lineNumber":115,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":116,"author":{"gitId":"AryanG01"},"content":"                    if (dateRange.length !\u003d 2) {","lastModifiedDate":"2023-09-07"},{"lineNumber":117,"author":{"gitId":"AryanG01"},"content":"                        throw new DukeException(\"OOPS!!! Todo tasks must include \u0027/to\u0027 for the end date.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":118,"author":{"gitId":"AryanG01"},"content":"                    }","lastModifiedDate":"2023-09-07"},{"lineNumber":119,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":120,"author":{"gitId":"AryanG01"},"content":"                    LocalDate fromDate \u003d LocalDate.parse(dateRange[0]);","lastModifiedDate":"2023-09-07"},{"lineNumber":121,"author":{"gitId":"AryanG01"},"content":"                    LocalDate toDate \u003d LocalDate.parse(dateRange[1]);","lastModifiedDate":"2023-09-07"},{"lineNumber":122,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":123,"author":{"gitId":"AryanG01"},"content":"                    return new TodoTask(todoParts[0], fromDate, toDate, false);","lastModifiedDate":"2023-09-07"},{"lineNumber":124,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":125,"author":{"gitId":"AryanG01"},"content":"                case DEADLINE:","lastModifiedDate":"2023-09-07"},{"lineNumber":126,"author":{"gitId":"AryanG01"},"content":"                    // Parse the description and byDate","lastModifiedDate":"2023-09-06"},{"lineNumber":127,"author":{"gitId":"AryanG01"},"content":"                    String[] deadlineParts \u003d parts[1].split(\" /by \");","lastModifiedDate":"2023-09-07"},{"lineNumber":128,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":129,"author":{"gitId":"AryanG01"},"content":"                    if (deadlineParts.length !\u003d 2) {","lastModifiedDate":"2023-09-07"},{"lineNumber":130,"author":{"gitId":"AryanG01"},"content":"                        throw new DukeException(\"OOPS!!! Deadline tasks must include \u0027/by\u0027 for date.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":131,"author":{"gitId":"AryanG01"},"content":"                    }","lastModifiedDate":"2023-09-07"},{"lineNumber":132,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":133,"author":{"gitId":"AryanG01"},"content":"                    LocalDate byDate \u003d LocalDate.parse(deadlineParts[1]);","lastModifiedDate":"2023-09-07"},{"lineNumber":134,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":135,"author":{"gitId":"AryanG01"},"content":"                    return new DeadlineTask(deadlineParts[0], byDate, false);","lastModifiedDate":"2023-09-07"},{"lineNumber":136,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":137,"author":{"gitId":"AryanG01"},"content":"                case EVENT:","lastModifiedDate":"2023-09-07"},{"lineNumber":138,"author":{"gitId":"AryanG01"},"content":"                    // Parse the description and atDate","lastModifiedDate":"2023-09-06"},{"lineNumber":139,"author":{"gitId":"AryanG01"},"content":"                    String[] eventParts \u003d parts[1].split(\" /at \");","lastModifiedDate":"2023-09-07"},{"lineNumber":140,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":141,"author":{"gitId":"AryanG01"},"content":"                    if (eventParts.length !\u003d 2) {","lastModifiedDate":"2023-09-07"},{"lineNumber":142,"author":{"gitId":"AryanG01"},"content":"                        throw new DukeException(\"OOPS!!! Event tasks must include \u0027/at\u0027 for date.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":143,"author":{"gitId":"AryanG01"},"content":"                    }","lastModifiedDate":"2023-09-07"},{"lineNumber":144,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":145,"author":{"gitId":"AryanG01"},"content":"                    LocalDate atDate \u003d LocalDate.parse(eventParts[1]);","lastModifiedDate":"2023-09-07"},{"lineNumber":146,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":147,"author":{"gitId":"AryanG01"},"content":"                    return new EventTask(eventParts[0], atDate, false);","lastModifiedDate":"2023-09-07"},{"lineNumber":148,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":149,"author":{"gitId":"AryanG01"},"content":"                default:","lastModifiedDate":"2023-09-07"},{"lineNumber":150,"author":{"gitId":"AryanG01"},"content":"                    throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-09-07"},{"lineNumber":151,"author":{"gitId":"AryanG01"},"content":"            }","lastModifiedDate":"2023-09-07"},{"lineNumber":152,"author":{"gitId":"AryanG01"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-09-06"},{"lineNumber":153,"author":{"gitId":"AryanG01"},"content":"            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-09-07"},{"lineNumber":154,"author":{"gitId":"AryanG01"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":155,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":156,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":157,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":158,"author":{"gitId":"AryanG01"},"content":"     * Parses a line from a file and generates a Task object based on its content.","lastModifiedDate":"2023-09-07"},{"lineNumber":159,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":160,"author":{"gitId":"AryanG01"},"content":"     * @param line The line from the file to parse.","lastModifiedDate":"2023-09-07"},{"lineNumber":161,"author":{"gitId":"AryanG01"},"content":"     * @return A Task object representing the parsed line.","lastModifiedDate":"2023-09-07"},{"lineNumber":162,"author":{"gitId":"AryanG01"},"content":"     * @throws DukeException If the line cannot be parsed or is invalid.","lastModifiedDate":"2023-09-07"},{"lineNumber":163,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":164,"author":{"gitId":"AryanG01"},"content":"    public static Task parseFileLine(String line) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":165,"author":{"gitId":"AryanG01"},"content":"        // Parse the line and create tasks based on the format in the file","lastModifiedDate":"2023-09-06"},{"lineNumber":166,"author":{"gitId":"AryanG01"},"content":"        String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-09-07"},{"lineNumber":167,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":168,"author":{"gitId":"AryanG01"},"content":"        if (parts.length !\u003d 3) {","lastModifiedDate":"2023-09-07"},{"lineNumber":169,"author":{"gitId":"AryanG01"},"content":"            throw new DukeException(\"Invalid task format in the file.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":170,"author":{"gitId":"AryanG01"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":171,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":172,"author":{"gitId":"AryanG01"},"content":"        String taskType \u003d parts[0];","lastModifiedDate":"2023-09-07"},{"lineNumber":173,"author":{"gitId":"AryanG01"},"content":"        String description \u003d parts[2];","lastModifiedDate":"2023-09-07"},{"lineNumber":174,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":175,"author":{"gitId":"AryanG01"},"content":"        boolean isDone \u003d parts[1].equals(\"1\");","lastModifiedDate":"2023-09-08"},{"lineNumber":176,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":177,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":178,"author":{"gitId":"AryanG01"},"content":"        switch (taskType) {","lastModifiedDate":"2023-09-07"},{"lineNumber":179,"author":{"gitId":"AryanG01"},"content":"            case \"T\":","lastModifiedDate":"2023-09-07"},{"lineNumber":180,"author":{"gitId":"AryanG01"},"content":"                // Check if the description contains date information","lastModifiedDate":"2023-09-06"},{"lineNumber":181,"author":{"gitId":"AryanG01"},"content":"                String[] todoParts \u003d description.split(\" \\\\(from: | to: \", 3);","lastModifiedDate":"2023-09-07"},{"lineNumber":182,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":183,"author":{"gitId":"AryanG01"},"content":"                if (todoParts.length \u003d\u003d 3) {","lastModifiedDate":"2023-09-07"},{"lineNumber":184,"author":{"gitId":"AryanG01"},"content":"                    LocalDate fromDate \u003d LocalDate.parse(todoParts[1]);","lastModifiedDate":"2023-09-07"},{"lineNumber":185,"author":{"gitId":"AryanG01"},"content":"                    LocalDate toDate \u003d LocalDate.parse(todoParts[2].substring(0, todoParts[2].length() - 1));","lastModifiedDate":"2023-09-06"},{"lineNumber":186,"author":{"gitId":"AryanG01"},"content":"                    return new TodoTask(todoParts[0], fromDate, toDate, isDone);","lastModifiedDate":"2023-09-06"},{"lineNumber":187,"author":{"gitId":"AryanG01"},"content":"                } else {","lastModifiedDate":"2023-09-06"},{"lineNumber":188,"author":{"gitId":"AryanG01"},"content":"                    throw new DukeException(\"Invalid todo task format in the file.\");","lastModifiedDate":"2023-09-06"},{"lineNumber":189,"author":{"gitId":"AryanG01"},"content":"                }","lastModifiedDate":"2023-09-07"},{"lineNumber":190,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":191,"author":{"gitId":"AryanG01"},"content":"            case \"D\":","lastModifiedDate":"2023-09-07"},{"lineNumber":192,"author":{"gitId":"AryanG01"},"content":"                // Check if the description contains date information","lastModifiedDate":"2023-09-06"},{"lineNumber":193,"author":{"gitId":"AryanG01"},"content":"                String[] deadlineParts \u003d description.split(\" \\\\(by: \", 2);","lastModifiedDate":"2023-09-07"},{"lineNumber":194,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":195,"author":{"gitId":"AryanG01"},"content":"                if (deadlineParts.length \u003d\u003d 2) {","lastModifiedDate":"2023-09-07"},{"lineNumber":196,"author":{"gitId":"AryanG01"},"content":"                    LocalDate byDate \u003d LocalDate.parse(deadlineParts[1].substring(0, deadlineParts[1].length() - 1));","lastModifiedDate":"2023-09-06"},{"lineNumber":197,"author":{"gitId":"AryanG01"},"content":"                    return new DeadlineTask(deadlineParts[0], byDate, isDone);","lastModifiedDate":"2023-09-07"},{"lineNumber":198,"author":{"gitId":"AryanG01"},"content":"                } else {","lastModifiedDate":"2023-09-06"},{"lineNumber":199,"author":{"gitId":"AryanG01"},"content":"                    throw new DukeException(\"Invalid deadline task format in the file.\");","lastModifiedDate":"2023-09-06"},{"lineNumber":200,"author":{"gitId":"AryanG01"},"content":"                }","lastModifiedDate":"2023-09-07"},{"lineNumber":201,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":202,"author":{"gitId":"AryanG01"},"content":"            case \"E\":","lastModifiedDate":"2023-09-07"},{"lineNumber":203,"author":{"gitId":"AryanG01"},"content":"                // Check if the description contains date information","lastModifiedDate":"2023-09-06"},{"lineNumber":204,"author":{"gitId":"AryanG01"},"content":"                String[] eventParts \u003d description.split(\" \\\\(at: \", 2);","lastModifiedDate":"2023-09-07"},{"lineNumber":205,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":206,"author":{"gitId":"AryanG01"},"content":"                if (eventParts.length \u003d\u003d 2) {","lastModifiedDate":"2023-09-07"},{"lineNumber":207,"author":{"gitId":"AryanG01"},"content":"                    LocalDate atDate \u003d LocalDate.parse(eventParts[1].substring(0, eventParts[1].length() - 1));","lastModifiedDate":"2023-09-07"},{"lineNumber":208,"author":{"gitId":"AryanG01"},"content":"                    return new EventTask(eventParts[0], atDate, isDone);","lastModifiedDate":"2023-09-07"},{"lineNumber":209,"author":{"gitId":"AryanG01"},"content":"                } else {","lastModifiedDate":"2023-09-06"},{"lineNumber":210,"author":{"gitId":"AryanG01"},"content":"                    throw new DukeException(\"Invalid event task format in the file.\");","lastModifiedDate":"2023-09-06"},{"lineNumber":211,"author":{"gitId":"AryanG01"},"content":"                }","lastModifiedDate":"2023-09-07"},{"lineNumber":212,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":213,"author":{"gitId":"AryanG01"},"content":"            default:","lastModifiedDate":"2023-09-07"},{"lineNumber":214,"author":{"gitId":"AryanG01"},"content":"                throw new DukeException(\"Unknown task type in file.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":215,"author":{"gitId":"AryanG01"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":216,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":217,"author":{"gitId":"AryanG01"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"AryanG01":217}},{"path":"src/main/java/duke/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"AryanG01"},"content":"T | 1 | read book (from: 2019-10-15 to: 2020-10-10)","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"AryanG01"},"content":"D | 0 | feature essay (by: 2023-10-09)","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"AryanG01"},"content":"E | 1 | RVSS1002 (at: 2022-12-23)","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"AryanG01"},"content":"T | 0 | workshop (from: 2023-09-08 to: 2023-09-13)","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"AryanG01"},"content":"D | 1 | IS2238 report (by: 2023-09-10)","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"AryanG01"},"content":"E | 0 | CS2001 presentation (at: 2023-09-11)","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"AryanG01"},"content":"T | 0 | read book (from: 2019-10-15 to: 2019-10-15)","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"AryanG01"},"content":"D | 0 | read1 (by: 2023-01-23)","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"AryanG01"},"content":"D | 1 | read2 (by: 2022-02-13)","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"AryanG01":9}},{"path":"src/main/java/duke/task/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AryanG01"},"content":"package duke.task;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"AryanG01"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"AryanG01"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"AryanG01"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"AryanG01"},"content":" * The DeadlineTask class represents a task with a deadline type in the Duke application.","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"AryanG01"},"content":" * It extends the base Task class and includes an additional field for the deadline date.","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"AryanG01"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"AryanG01"},"content":"public class DeadlineTask extends Task {","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"AryanG01"},"content":"    private LocalDate byDate;","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"AryanG01"},"content":"     * Constructs a DeadlineTask with the specified description, deadline date, and completion status.","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"AryanG01"},"content":"     * @param description The description of the deadline task.","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"AryanG01"},"content":"     * @param byDate      The deadline date of the task.","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"AryanG01"},"content":"     * @param isDone      The completion status of the task (true if done, false otherwise).","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"AryanG01"},"content":"    public DeadlineTask(String description, LocalDate byDate, boolean isDone) {","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"AryanG01"},"content":"        super(description, isDone);","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"AryanG01"},"content":"        this.byDate \u003d byDate;","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"AryanG01"},"content":"     * Returns a string representation of the DeadlineTask, including task type, completion status, and description details.","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"AryanG01"},"content":"     * @return A string representation of the DeadlineTask.","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"AryanG01"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"AryanG01"},"content":"    public String toString() {","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"AryanG01"},"content":"        return \"[D]\" + super.toString() + \" \" + this.getDescriptionDetails();","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"AryanG01"},"content":"     * Converts the DeadlineTask to a string format suitable for saving to a file, including task type, completion status,","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"AryanG01"},"content":"     * description, and deadline date.","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"AryanG01"},"content":"     * @return A string formatted for file storage.","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"AryanG01"},"content":"    @Override","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"AryanG01"},"content":"    public String toFileString() {","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"AryanG01"},"content":"        return String.format(\"%s | %d | %s (by: %s)\", getTaskType(), this.isDone ? 1 : 0, this.description,","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"AryanG01"},"content":"                this.byDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")));","lastModifiedDate":"2023-09-08"},{"lineNumber":45,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"AryanG01"},"content":"     * Returns the task type identifier for a deadline task (i.e., \"D\").","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"AryanG01"},"content":"     * @return The task type identifier.","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"AryanG01"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"AryanG01"},"content":"    public String getTaskType() {","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"AryanG01"},"content":"        return \"D\";","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"AryanG01"},"content":"     * Returns the description details of the deadline task.","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"AryanG01"},"content":"     * @return The deadline task name together with the by date.","lastModifiedDate":"2023-09-07"},{"lineNumber":61,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":62,"author":{"gitId":"AryanG01"},"content":"    private String getDescriptionDetails() {","lastModifiedDate":"2023-09-07"},{"lineNumber":63,"author":{"gitId":"AryanG01"},"content":"        return this.description + \" (by: \" + this.byDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";","lastModifiedDate":"2023-09-08"},{"lineNumber":64,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":65,"author":{"gitId":"AryanG01"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"AryanG01":65}},{"path":"src/main/java/duke/task/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AryanG01"},"content":"package duke.task;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"AryanG01"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"AryanG01"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"AryanG01"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"AryanG01"},"content":" * The EventTask class represents a task with an event type in the Duke application.","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"AryanG01"},"content":" * It extends the base Task class and includes an additional field for the event date.","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"AryanG01"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"AryanG01"},"content":"public class EventTask extends Task {","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"AryanG01"},"content":"    private LocalDate atDate;","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"AryanG01"},"content":"     * Constructs an EventTask with the specified description, event date, and completion status.","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"AryanG01"},"content":"     * @param description The description of the event task.","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"AryanG01"},"content":"     * @param atDate      The date of the event.","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"AryanG01"},"content":"     * @param isDone      The completion status of the task (true if done, false otherwise).","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"AryanG01"},"content":"    public EventTask(String description, LocalDate atDate, boolean isDone) {","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"AryanG01"},"content":"        super(description, isDone);","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"AryanG01"},"content":"        this.atDate \u003d atDate;","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"AryanG01"},"content":"     * Returns a string representation of the EventTask, including task type, completion status, and description details.","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"AryanG01"},"content":"     * @return A string representation of the EventTask.","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"AryanG01"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"AryanG01"},"content":"    public String toString() {","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"AryanG01"},"content":"        return \"[E]\" + super.toString() + \" \" + this.getDescriptionDetails();","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"AryanG01"},"content":"     * Converts the EventTask to a string format suitable for saving to a file, including task type, completion status,","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"AryanG01"},"content":"     * description, and event date.","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"AryanG01"},"content":"     * @return A string formatted for file storage.","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"AryanG01"},"content":"    @Override","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"AryanG01"},"content":"    public String toFileString() {","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"AryanG01"},"content":"        return String.format(\"%s | %d | %s (at: %s)\", getTaskType(), this.isDone ? 1 : 0, this.description,","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"AryanG01"},"content":"                this.atDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")));","lastModifiedDate":"2023-09-08"},{"lineNumber":45,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"AryanG01"},"content":"     * Returns the task type identifier for an event task (i.e., \"E\").","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"AryanG01"},"content":"     * @return The task type identifier.","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"AryanG01"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"AryanG01"},"content":"    public String getTaskType() {","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"AryanG01"},"content":"        return \"E\";","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"AryanG01"},"content":"     * Returns the description details of the event task.","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"AryanG01"},"content":"     * @return The event task name together with the at date.","lastModifiedDate":"2023-09-07"},{"lineNumber":61,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":62,"author":{"gitId":"AryanG01"},"content":"    private String getDescriptionDetails() {","lastModifiedDate":"2023-09-07"},{"lineNumber":63,"author":{"gitId":"AryanG01"},"content":"        return this.description + \" (at: \" + this.atDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";","lastModifiedDate":"2023-09-08"},{"lineNumber":64,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":65,"author":{"gitId":"AryanG01"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"AryanG01":65}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AryanG01"},"content":"package duke.task;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"AryanG01"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"AryanG01"},"content":" * The Task class represents a task template in the Duke application.","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"AryanG01"},"content":" * It includes a description and a boolean flag indicating whether the task is done or not.","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"AryanG01"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"AryanG01"},"content":"public class Task {","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"AryanG01"},"content":"    protected String description;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"AryanG01"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"AryanG01"},"content":"     * Constructs a Task object with the specified description and done status.","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"AryanG01"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"AryanG01"},"content":"     * @param isDone      The status indicating whether the task is done (true) or not (false).","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"AryanG01"},"content":"    public Task(String description, boolean isDone) {","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"AryanG01"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"AryanG01"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"AryanG01"},"content":"     * Returns the status icon for the task.","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"AryanG01"},"content":"     * @return \"X\" if the task is done, or a space \" \" if the task is not done.","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"AryanG01"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"AryanG01"},"content":"        return this.isDone ? \"X\" : \" \";","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"AryanG01"},"content":"     * Marks the task as done by setting the isDone flag to true.","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"AryanG01"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"AryanG01"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"AryanG01"},"content":"     * Marks the task as not done by setting the isDone flag to false.","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"AryanG01"},"content":"    public void markAsNotDone() {","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"AryanG01"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"AryanG01"},"content":"     * Returns a string representation of the task, including its status icon.","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"AryanG01"},"content":"     * @return A string representation of the status of the task.","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"AryanG01"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":51,"author":{"gitId":"AryanG01"},"content":"    public String toString() {","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"AryanG01"},"content":"        return \"[\" + this.getStatusIcon() + \"]\";","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"AryanG01"},"content":"     * Returns a string representation of the task for saving to a file.","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"AryanG01"},"content":"     * @return A formatted string containing task type, status, and description.","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"AryanG01"},"content":"    public String toFileString() {","lastModifiedDate":"2023-09-07"},{"lineNumber":61,"author":{"gitId":"AryanG01"},"content":"        return String.format(\"%s | %d | %s\", this.getTaskType(), this.isDone ? 1 : 0, this.description);","lastModifiedDate":"2023-09-08"},{"lineNumber":62,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":63,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":64,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":65,"author":{"gitId":"AryanG01"},"content":"     * Gets the task type, which should be overridden in subclasses.","lastModifiedDate":"2023-09-07"},{"lineNumber":66,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":67,"author":{"gitId":"AryanG01"},"content":"     * @return The task type as a string.","lastModifiedDate":"2023-09-07"},{"lineNumber":68,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":69,"author":{"gitId":"AryanG01"},"content":"    public String getTaskType() {","lastModifiedDate":"2023-09-07"},{"lineNumber":70,"author":{"gitId":"AryanG01"},"content":"        return \"\";","lastModifiedDate":"2023-09-07"},{"lineNumber":71,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":72,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":73,"author":{"gitId":"AryanG01"},"content":"    public String getDescription() {","lastModifiedDate":"2023-09-08"},{"lineNumber":74,"author":{"gitId":"AryanG01"},"content":"        return description;","lastModifiedDate":"2023-09-08"},{"lineNumber":75,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":76,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":77,"author":{"gitId":"AryanG01"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"AryanG01":77}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AryanG01"},"content":"package duke.task;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"AryanG01"},"content":"import duke.command.DukeException;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"AryanG01"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"AryanG01"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"AryanG01"},"content":" * The TaskList class represents a list of tasks in the Duke application.","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"AryanG01"},"content":" * It provides methods for adding, deleting, marking tasks as done, and loading/saving tasks to a file.","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"AryanG01"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"AryanG01"},"content":"public class TaskList {","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"AryanG01"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"AryanG01"},"content":"     * Constructs an empty TaskList.","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"AryanG01"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"AryanG01"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"AryanG01"},"content":"     * Constructs a TaskList with the provided list of tasks.","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"AryanG01"},"content":"     * @param arr The list of tasks to initialize the TaskList.","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"AryanG01"},"content":"    public TaskList(ArrayList\u003cTask\u003e arr) {","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"AryanG01"},"content":"        tasks \u003d arr;","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"AryanG01"},"content":"     * Adds a task to the TaskList.","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"AryanG01"},"content":"     * @param task The task to add.","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"AryanG01"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"AryanG01"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"AryanG01"},"content":"     * Returns a string representation of all tasks in the TaskList.","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"AryanG01"},"content":"     * @return A string containing the list of tasks.","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"AryanG01"},"content":"    @Override","lastModifiedDate":"2023-08-26"},{"lineNumber":45,"author":{"gitId":"AryanG01"},"content":"    public String toString() {","lastModifiedDate":"2023-08-26"},{"lineNumber":46,"author":{"gitId":"AryanG01"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-08-26"},{"lineNumber":47,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"AryanG01"},"content":"        if (!this.tasks.isEmpty()) {","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"AryanG01"},"content":"            for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"AryanG01"},"content":"                sb.append(\" \").append(i + 1).append(\".\").append(this.tasks.get(i));","lastModifiedDate":"2023-09-08"},{"lineNumber":51,"author":{"gitId":"AryanG01"},"content":"                sb.append(\"\\n\");","lastModifiedDate":"2023-08-26"},{"lineNumber":52,"author":{"gitId":"AryanG01"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":53,"author":{"gitId":"AryanG01"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":54,"author":{"gitId":"AryanG01"},"content":"        return sb.toString();","lastModifiedDate":"2023-08-26"},{"lineNumber":55,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":56,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":57,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"AryanG01"},"content":"     * Returns an ArrayList of all tasks in the TaskList.","lastModifiedDate":"2023-09-08"},{"lineNumber":59,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"AryanG01"},"content":"     * @return An ArrayList of all tasks.","lastModifiedDate":"2023-09-08"},{"lineNumber":61,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":62,"author":{"gitId":"AryanG01"},"content":"    public ArrayList\u003cTask\u003e getAllTasks() {","lastModifiedDate":"2023-09-08"},{"lineNumber":63,"author":{"gitId":"AryanG01"},"content":"        return this.tasks;","lastModifiedDate":"2023-09-08"},{"lineNumber":64,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":67,"author":{"gitId":"AryanG01"},"content":"     * Returns the total number of tasks in the TaskList.","lastModifiedDate":"2023-09-07"},{"lineNumber":68,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":69,"author":{"gitId":"AryanG01"},"content":"     * @return The total number of tasks.","lastModifiedDate":"2023-09-07"},{"lineNumber":70,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":71,"author":{"gitId":"AryanG01"},"content":"    public int getTotalTasks() {","lastModifiedDate":"2023-09-06"},{"lineNumber":72,"author":{"gitId":"AryanG01"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-09-08"},{"lineNumber":73,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":74,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":75,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":76,"author":{"gitId":"AryanG01"},"content":"     * Gets a task from the TaskList based on its index.","lastModifiedDate":"2023-09-07"},{"lineNumber":77,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":78,"author":{"gitId":"AryanG01"},"content":"     * @param index The index of the task to retrieve.","lastModifiedDate":"2023-09-07"},{"lineNumber":79,"author":{"gitId":"AryanG01"},"content":"     * @return The task at the specified index, or null if the index is out of bounds.","lastModifiedDate":"2023-09-07"},{"lineNumber":80,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":81,"author":{"gitId":"AryanG01"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2023-09-06"},{"lineNumber":82,"author":{"gitId":"AryanG01"},"content":"        if (index \u003e\u003d 0 \u0026\u0026 index \u003c this.tasks.size()) {","lastModifiedDate":"2023-09-08"},{"lineNumber":83,"author":{"gitId":"AryanG01"},"content":"            return this.tasks.get(index);","lastModifiedDate":"2023-09-08"},{"lineNumber":84,"author":{"gitId":"AryanG01"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":85,"author":{"gitId":"AryanG01"},"content":"        return null;","lastModifiedDate":"2023-09-08"},{"lineNumber":86,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":87,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":88,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":89,"author":{"gitId":"AryanG01"},"content":"     * Marks a task as done based on its index in the TaskList.","lastModifiedDate":"2023-09-07"},{"lineNumber":90,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":91,"author":{"gitId":"AryanG01"},"content":"     * @param taskIndex The index of the task to mark as done.","lastModifiedDate":"2023-09-07"},{"lineNumber":92,"author":{"gitId":"AryanG01"},"content":"     * @throws DukeException If there is an error marking the task as done.","lastModifiedDate":"2023-09-07"},{"lineNumber":93,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":94,"author":{"gitId":"AryanG01"},"content":"    public void markAsDone(int taskIndex) throws DukeException {","lastModifiedDate":"2023-09-06"},{"lineNumber":95,"author":{"gitId":"AryanG01"},"content":"        if (taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c this.tasks.size()) {","lastModifiedDate":"2023-09-08"},{"lineNumber":96,"author":{"gitId":"AryanG01"},"content":"            this.tasks.get(taskIndex).markAsDone();","lastModifiedDate":"2023-09-08"},{"lineNumber":97,"author":{"gitId":"AryanG01"},"content":"        } else {","lastModifiedDate":"2023-09-06"},{"lineNumber":98,"author":{"gitId":"AryanG01"},"content":"            throw new DukeException(\"Invalid task index.\");","lastModifiedDate":"2023-09-06"},{"lineNumber":99,"author":{"gitId":"AryanG01"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":100,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":101,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":102,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":103,"author":{"gitId":"AryanG01"},"content":"     * Marks a task as not done based on its index in the TaskList.","lastModifiedDate":"2023-09-07"},{"lineNumber":104,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":105,"author":{"gitId":"AryanG01"},"content":"     * @param taskIndex The index of the task to mark as not done.","lastModifiedDate":"2023-09-07"},{"lineNumber":106,"author":{"gitId":"AryanG01"},"content":"     * @throws DukeException If there is an error marking the task as not done.","lastModifiedDate":"2023-09-07"},{"lineNumber":107,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":108,"author":{"gitId":"AryanG01"},"content":"    public void markAsNotDone(int taskIndex) throws DukeException {","lastModifiedDate":"2023-09-06"},{"lineNumber":109,"author":{"gitId":"AryanG01"},"content":"        if (taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c this.tasks.size()) {","lastModifiedDate":"2023-09-08"},{"lineNumber":110,"author":{"gitId":"AryanG01"},"content":"            this.tasks.get(taskIndex).markAsNotDone();","lastModifiedDate":"2023-09-08"},{"lineNumber":111,"author":{"gitId":"AryanG01"},"content":"        } else {","lastModifiedDate":"2023-09-06"},{"lineNumber":112,"author":{"gitId":"AryanG01"},"content":"            throw new DukeException(\"Invalid task index.\");","lastModifiedDate":"2023-09-06"},{"lineNumber":113,"author":{"gitId":"AryanG01"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":114,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":115,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":116,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":117,"author":{"gitId":"AryanG01"},"content":"     * Deletes a task from the TaskList based on its index.","lastModifiedDate":"2023-09-07"},{"lineNumber":118,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":119,"author":{"gitId":"AryanG01"},"content":"     * @param taskIndex The index of the task to delete.","lastModifiedDate":"2023-09-07"},{"lineNumber":120,"author":{"gitId":"AryanG01"},"content":"     * @return The deleted task.","lastModifiedDate":"2023-09-07"},{"lineNumber":121,"author":{"gitId":"AryanG01"},"content":"     * @throws DukeException If there is an error deleting the task.","lastModifiedDate":"2023-09-07"},{"lineNumber":122,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":123,"author":{"gitId":"AryanG01"},"content":"    public Task deleteTask(int taskIndex) throws DukeException {","lastModifiedDate":"2023-09-06"},{"lineNumber":124,"author":{"gitId":"AryanG01"},"content":"        if (taskIndex \u003e\u003d 0 \u0026\u0026 taskIndex \u003c this.tasks.size()) {","lastModifiedDate":"2023-09-08"},{"lineNumber":125,"author":{"gitId":"AryanG01"},"content":"            Task deletedTask \u003d this.tasks.remove(taskIndex);","lastModifiedDate":"2023-09-08"},{"lineNumber":126,"author":{"gitId":"AryanG01"},"content":"            return deletedTask;","lastModifiedDate":"2023-09-06"},{"lineNumber":127,"author":{"gitId":"AryanG01"},"content":"        } else {","lastModifiedDate":"2023-09-06"},{"lineNumber":128,"author":{"gitId":"AryanG01"},"content":"            throw new DukeException(\"Invalid task index.\");","lastModifiedDate":"2023-09-06"},{"lineNumber":129,"author":{"gitId":"AryanG01"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":130,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":131,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":132,"author":{"gitId":"AryanG01"},"content":"    public ArrayList\u003cTask\u003e findTasksByKeyword(String keyword) {","lastModifiedDate":"2023-09-08"},{"lineNumber":133,"author":{"gitId":"AryanG01"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-08"},{"lineNumber":134,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":135,"author":{"gitId":"AryanG01"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-09-08"},{"lineNumber":136,"author":{"gitId":"AryanG01"},"content":"            if (task.getDescription().contains(keyword)) {","lastModifiedDate":"2023-09-08"},{"lineNumber":137,"author":{"gitId":"AryanG01"},"content":"                matchingTasks.add(task);","lastModifiedDate":"2023-09-08"},{"lineNumber":138,"author":{"gitId":"AryanG01"},"content":"            }","lastModifiedDate":"2023-09-08"},{"lineNumber":139,"author":{"gitId":"AryanG01"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":140,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":141,"author":{"gitId":"AryanG01"},"content":"        return matchingTasks;","lastModifiedDate":"2023-09-08"},{"lineNumber":142,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":143,"author":{"gitId":"AryanG01"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"AryanG01":143}},{"path":"src/main/java/duke/task/TodoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AryanG01"},"content":"package duke.task;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"AryanG01"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"AryanG01"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"AryanG01"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"AryanG01"},"content":" * The TodoTask class represents a task with a to-do type in the Duke application.","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"AryanG01"},"content":" * It extends the base Task class and includes additional fields for date range information.","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"AryanG01"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"AryanG01"},"content":"public class TodoTask extends Task {","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"AryanG01"},"content":"    private LocalDate fromDate;","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"AryanG01"},"content":"    private LocalDate toDate;","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"AryanG01"},"content":"     * Constructs a TodoTask with the specified description, date range, and completion status.","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"AryanG01"},"content":"     * @param description The description of the to-do task.","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"AryanG01"},"content":"     * @param fromDate    The starting date of the date range.","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"AryanG01"},"content":"     * @param toDate      The ending date of the date range.","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"AryanG01"},"content":"     * @param isDone      The completion status of the task (true if done, false otherwise).","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"AryanG01"},"content":"    public TodoTask(String description, LocalDate fromDate, LocalDate toDate, boolean isDone) {","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"AryanG01"},"content":"        super(description, isDone);","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"AryanG01"},"content":"        this.fromDate \u003d fromDate;","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"AryanG01"},"content":"        this.toDate \u003d toDate;","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"AryanG01"},"content":"     * Returns a string representation of the TodoTask, including task type, completion status, and description details.","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"AryanG01"},"content":"     * @return A string representation of the TodoTask.","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"AryanG01"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"AryanG01"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"AryanG01"},"content":"        return \"[T]\" + super.toString() + \" \" + this.getDescriptionDetails();","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":37,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"AryanG01"},"content":"     * Converts the TodoTask to a string format suitable for saving to a file, including task type, completion status,","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"AryanG01"},"content":"     * description, and date range.","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"AryanG01"},"content":"     * @return A string formatted for file storage.","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"AryanG01"},"content":"    @Override","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"AryanG01"},"content":"    public String toFileString() {","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"AryanG01"},"content":"        return String.format(\"%s | %d | %s (from: %s to: %s)\", getTaskType(), this.isDone ? 1 : 0, this.description,","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"AryanG01"},"content":"                this.fromDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")),","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"AryanG01"},"content":"                this.toDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")));","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"AryanG01"},"content":"     * Returns the task type identifier for a to-do task (i.e., \"T\").","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"AryanG01"},"content":"     * @return The task type identifier.","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"AryanG01"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"AryanG01"},"content":"    public String getTaskType() {","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"AryanG01"},"content":"        return \"T\";","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"AryanG01"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":62,"author":{"gitId":"AryanG01"},"content":"     * Returns the description details of the to-do task.","lastModifiedDate":"2023-09-07"},{"lineNumber":63,"author":{"gitId":"AryanG01"},"content":"     *","lastModifiedDate":"2023-09-07"},{"lineNumber":64,"author":{"gitId":"AryanG01"},"content":"     * @return The to-do task name together with the from and to dates.","lastModifiedDate":"2023-09-07"},{"lineNumber":65,"author":{"gitId":"AryanG01"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":66,"author":{"gitId":"AryanG01"},"content":"    private String getDescriptionDetails() {","lastModifiedDate":"2023-08-24"},{"lineNumber":67,"author":{"gitId":"AryanG01"},"content":"        return this.description + \" (from: \" + this.fromDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) +","lastModifiedDate":"2023-09-08"},{"lineNumber":68,"author":{"gitId":"AryanG01"},"content":"                \" to: \" + this.toDate.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";","lastModifiedDate":"2023-09-08"},{"lineNumber":69,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":70,"author":{"gitId":"AryanG01"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"AryanG01":70}},{"path":"src/test/java/duke/DeadlineTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AryanG01"},"content":"package duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"AryanG01"},"content":"import duke.task.DeadlineTask;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"AryanG01"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"AryanG01"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"AryanG01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"AryanG01"},"content":"public class DeadlineTaskTest {","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"AryanG01"},"content":"    @Test","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"AryanG01"},"content":"    public void deadlineTaskTest1() {","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"AryanG01"},"content":"        DeadlineTask dl \u003d new DeadlineTask(\"test1\", LocalDate.parse(\"2019-10-15\"), false);","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"AryanG01"},"content":"        assertEquals( \"[D][ ] test1 (by: Oct 15 2019)\", dl.toString());","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"AryanG01"},"content":"    @Test","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"AryanG01"},"content":"    public void deadlineTaskTest2() {","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"AryanG01"},"content":"        DeadlineTask dl \u003d new DeadlineTask(\"test2\", LocalDate.parse(\"2020-12-01\"), true);","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"AryanG01"},"content":"        assertEquals( \"[D][X] test2 (by: Dec 01 2020)\", dl.toString());","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"AryanG01"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"AryanG01":23}},{"path":"src/test/java/duke/EventTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AryanG01"},"content":"package duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"AryanG01"},"content":"import duke.task.EventTask;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"AryanG01"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"AryanG01"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"AryanG01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"AryanG01"},"content":"public class EventTaskTest {","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"AryanG01"},"content":"    @Test","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"AryanG01"},"content":"    public void EventTaskTest1() {","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"AryanG01"},"content":"        EventTask et \u003d new EventTask(\"test1\", LocalDate.parse(\"2019-10-15\"), false);","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"AryanG01"},"content":"        assertEquals( \"[E][ ] test1 (at: Oct 15 2019)\", et.toString());","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"AryanG01"},"content":"    @Test","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"AryanG01"},"content":"    public void EventTaskTest2() {","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"AryanG01"},"content":"        EventTask et \u003d new EventTask(\"test2\", LocalDate.parse(\"2020-12-01\"), true);","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"AryanG01"},"content":"        assertEquals( \"[E][X] test2 (at: Dec 01 2020)\", et.toString());","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"AryanG01"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"AryanG01":23}},{"path":"src/test/java/duke/TodoTaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"AryanG01"},"content":"package duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"AryanG01"},"content":"import duke.task.TodoTask;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"AryanG01"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"AryanG01"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"AryanG01"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"AryanG01"},"content":"public class TodoTaskTest {","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"AryanG01"},"content":"    @Test","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"AryanG01"},"content":"    public void todoTaskTest1() {","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"AryanG01"},"content":"        TodoTask td \u003d new TodoTask(\"test1\", LocalDate.parse(\"2019-10-15\"), LocalDate.parse(\"2020-12-01\"), false);","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"AryanG01"},"content":"        assertEquals( \"[T][ ] test1 (from: Oct 15 2019 to: Dec 01 2020)\", td.toString());","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"AryanG01"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"AryanG01"},"content":"    @Test","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"AryanG01"},"content":"    public void todoTaskTest2() {","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"AryanG01"},"content":"        TodoTask td \u003d new TodoTask(\"test2\", LocalDate.parse(\"2019-10-15\"), LocalDate.parse(\"2020-12-01\"), true);","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"AryanG01"},"content":"        assertEquals( \"[T][X] test2 (from: Oct 15 2019 to: Dec 01 2020)\", td.toString());","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"AryanG01"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"AryanG01"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"AryanG01":23}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"AryanG01"},"content":"list","lastModifiedDate":"2023-08-25"},{"lineNumber":2,"author":{"gitId":"AryanG01"},"content":"todo read book","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"AryanG01"},"content":"deadline return book /by June 6th","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"AryanG01"},"content":"event project meeting /from Aug 6th 2pm /to 4pm","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"AryanG01"},"content":"todo join sports club","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"AryanG01"},"content":"todo borrow book","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"AryanG01"},"content":"mark 1","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"AryanG01"},"content":"mark 4","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"AryanG01"},"content":"list","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"AryanG01"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"AryanG01"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"AryanG01"},"content":"deadline do homework /by no idea :-p","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"AryanG01"},"content":"todo","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"AryanG01"},"content":"deadline","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"AryanG01"},"content":"event","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"AryanG01"},"content":"blah","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"AryanG01"},"content":"mark","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"AryanG01"},"content":"mark 9","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"AryanG01"},"content":"mark 8","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"AryanG01"},"content":"unmark","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"AryanG01"},"content":"unmark -1","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"AryanG01"},"content":"unmark 7","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"AryanG01"},"content":"delete","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"AryanG01"},"content":"delete 100","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"AryanG01"},"content":"delete 6","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"AryanG01"},"content":"list","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"AryanG01"},"content":"blah","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"AryanG01":27}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"AryanG01"},"content":"if not exist C:\\Users\\dell\\Desktop\\NUS_CS\\Modules\\Y2S1\\CS2100\\IP\\bin mkdir C:\\Users\\dell\\Desktop\\NUS_CS\\Modules\\Y2S1\\CS2100\\IP\\bin","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"AryanG01"},"content":"del ACTUAL.TXT","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"AryanG01"},"content":"javac  -cp C:\\Users\\dell\\Desktop\\NUS_CS\\Modules\\Y2S1\\CS2100\\IP\\src\\main\\java -Xlint:none -d C:\\Users\\dell\\Desktop\\NUS_CS\\Modules\\Y2S1\\CS2100\\IP\\bin C:\\Users\\dell\\Desktop\\NUS_CS\\Modules\\Y2S1\\CS2100\\IP\\src\\main\\java\\*.java","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"AryanG01"},"content":"\u003c\u003c\u003c\u003c\u003c\u003c\u003c HEAD","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"AryanG01"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"AryanG01"},"content":"\u003d\u003d\u003d\u003d\u003d\u003d\u003d","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"AryanG01"},"content":"java -classpath C:\\Users\\dell\\Desktop\\NUS_CS\\Modules\\Y2S1\\CS2100\\IP\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"AryanG01"},"content":"\u003e\u003e\u003e\u003e\u003e\u003e\u003e e5248c68952972df38e1725f70ec399f544663d6","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":17,"AryanG01":8}}]
