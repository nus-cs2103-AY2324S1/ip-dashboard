[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"# duke.Duke project template","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":22,"LWZ19":2}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"checkstyle {","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":43,"LWZ19":4}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"# User Guide","lastModifiedDate":"2019-07-29"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"### Feature-ABC","lastModifiedDate":"2021-07-17"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Description of the feature.","lastModifiedDate":"2021-07-17"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":9,"author":{"gitId":"-"},"content":"### Feature-XYZ","lastModifiedDate":"2021-07-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"Description of the feature.","lastModifiedDate":"2021-07-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"### `duke.Keyword` - Describe action","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"-"},"content":"Describe the action and its outcome.","lastModifiedDate":"2021-07-17"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"-"},"content":"Example of usage: ","lastModifiedDate":"2019-07-29"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":21,"author":{"gitId":"-"},"content":"`keyword (optional arguments)`","lastModifiedDate":"2019-07-29"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":23,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"Description of the outcome.","lastModifiedDate":"2021-07-17"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":27,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":28,"author":{"gitId":"-"},"content":"expected output","lastModifiedDate":"2021-07-17"},{"lineNumber":29,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"}],"authorContributionMap":{"-":28,"LWZ19":1}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import duke.command.Command;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":" * Represents a chatbot that helps users to keep track of their tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"     * Constructs a Duke object.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"     * @param foldPath The path of the folder to store the data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"     * @param fileName The name of the data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"    public Duke(String foldPath, String fileName) {","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"        this.storage \u003d new Storage(foldPath, fileName);","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"            this.taskList \u003d new TaskList(storage.load());","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"            storage.createFile();","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"            taskList \u003d new TaskList();","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"     * Runs the chatbot.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"    public void start() {","lastModifiedDate":"2023-08-22"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"        ui.showWelcome();","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"        while (!isExit) {","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"            try {","lastModifiedDate":"2023-08-22"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"                ui.showLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"                c.execute(taskList, ui, storage);","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"LWZ19"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":47,"author":{"gitId":"LWZ19"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"LWZ19"},"content":"            } finally {","lastModifiedDate":"2023-08-24"},{"lineNumber":49,"author":{"gitId":"LWZ19"},"content":"                ui.showLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"LWZ19"},"content":"                System.out.println();","lastModifiedDate":"2023-08-22"},{"lineNumber":51,"author":{"gitId":"LWZ19"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":52,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":54,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":55,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"LWZ19"},"content":"     * Runs the chatbot.","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"LWZ19"},"content":"     * @param args The command line arguments passed in.","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"LWZ19"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"LWZ19"},"content":"        Duke robot404 \u003d new Duke(\"./data\", \"duke.txt\");","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"LWZ19"},"content":"        robot404.start();","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"-":2,"LWZ19":62}},{"path":"src/main/java/duke/Keyword.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":" * Represents the keywords that the chatbot can understand.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"public enum Keyword {","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"    BYE(\"bye\"),","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"    LIST(\"list\"),","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"    MARK(\"mark\"),","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"    UNMARK(\"unmark\"),","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"    DELETE(\"delete\"),","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"    TODO(\"todo\"),","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"    EVENT(\"event\"),","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"    DEADLINE(\"deadline\"),","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"    PRINT_DATE(\"print_date\"),","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"    FIND(\"find\");","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"    private final String keyword;","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"    private Keyword(String keyword) {","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"    public String getKeyword() {","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"        return this.keyword;","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"LWZ19":27}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import duke.command.Command;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"import duke.command.PrintDateCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"import duke.exception.DeadlineException;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"import duke.exception.EventException;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"import duke.exception.FindException;","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"import duke.exception.ManipulateException;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"import duke.exception.PrintDateException;","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"import duke.exception.TodoException;","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":" * Represents a parser that parses user input and turn it into command","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":" * that the chatbot can execute.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":" * \u003cp\u003e\u003cbr\u003eCommands are in the form: {@code \u003ckeyword\u003e \u003ccommand body\u003e}\u003c/p\u003e\u003cbr\u003e","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":" * \u003cp\u003eWhere the command body is optional. The keyword is case-insensitive.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":" * The command body is the rest of the user input after the keyword.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":" * If the command body is present, it must be separated from the keyword by a space.\u003c/p\u003e","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"public class Parser {","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"     * Parses the user input and returns the corresponding command.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"     * @param fullCommand The user input.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"     * @return The corresponding command.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"     * @throws DukeException If the user input is invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"    public static Command parse(String fullCommand) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"        String[] split \u003d fullCommand.split(\" \");","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"        if (fullCommand.isEmpty() || split.length \u003d\u003d 0) {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"            throw new DukeException(\"OOPS!!! You have not entered anything!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"        Keyword key;","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"            key \u003d Keyword.valueOf(split[0].toUpperCase());","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"LWZ19"},"content":"            throw new DukeException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"LWZ19"},"content":"        if (split.length \u003d\u003d 1) {","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"LWZ19"},"content":"            return parseOneWordCommand(key);","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"LWZ19"},"content":"        String commandBody \u003d fullCommand.substring(split[0].length() + 1);","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"LWZ19"},"content":"        return parseMultiWordCommand(key, commandBody);","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"LWZ19"},"content":"     * Parses user input that only contains one word, and","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"LWZ19"},"content":"     * returns the corresponding command.","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"LWZ19"},"content":"     * @param key The keyword of the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"LWZ19"},"content":"     * @return The corresponding command.","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"LWZ19"},"content":"     * @throws DukeException If the user input is invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"LWZ19"},"content":"    private static Command parseOneWordCommand(Keyword key) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"LWZ19"},"content":"        String err \u003d String.format(\"OOPS!!! The description of a %s cannot be empty.\", key.getKeyword());","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"LWZ19"},"content":"        switch (key) {","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"LWZ19"},"content":"        case BYE:","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"LWZ19"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"LWZ19"},"content":"        case LIST:","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"LWZ19"},"content":"            return new ListCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"LWZ19"},"content":"        case TODO:","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"LWZ19"},"content":"            throw new TodoException(err);","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"LWZ19"},"content":"        case DEADLINE:","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"LWZ19"},"content":"            throw new DeadlineException(err);","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"LWZ19"},"content":"        case EVENT:","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"LWZ19"},"content":"            throw new EventException(err);","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"LWZ19"},"content":"        case MARK:","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"LWZ19"},"content":"        case UNMARK:","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"LWZ19"},"content":"        case DELETE:","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"LWZ19"},"content":"            throw new ManipulateException(err, key.getKeyword());","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"LWZ19"},"content":"        case PRINT_DATE:","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"LWZ19"},"content":"            throw new PrintDateException(err);","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"LWZ19"},"content":"        default: // Equivalent to case FIND","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"LWZ19"},"content":"            throw new FindException(err);","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"LWZ19"},"content":"     * Parses user input that contains more than one word, and","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"LWZ19"},"content":"     * returns the corresponding command.","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"LWZ19"},"content":"     * @param key The keyword of the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"LWZ19"},"content":"     * @param commandBody The main body of the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"LWZ19"},"content":"     * @return The corresponding command.","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"LWZ19"},"content":"     * @throws DukeException If the user input is invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"LWZ19"},"content":"    public static Command parseMultiWordCommand(Keyword key, String commandBody) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"LWZ19"},"content":"        switch (key) {","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"LWZ19"},"content":"        case BYE:","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"LWZ19"},"content":"            if (commandBody.equals(Ui.NAME)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"LWZ19"},"content":"                return new ExitCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"LWZ19"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":110,"author":{"gitId":"LWZ19"},"content":"            // fall through","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"LWZ19"},"content":"        case LIST:","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"LWZ19"},"content":"            String errMessage \u003d Ui.connectTwoLine(","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"LWZ19"},"content":"                    String.format(\"OOPS!!! The command for %s is invalid.\", key.getKeyword()),","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"LWZ19"},"content":"                    String.format(\"Enter in the form: \\\"%s\\\"\", key.getKeyword()));","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"LWZ19"},"content":"            throw new DukeException(errMessage);","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"LWZ19"},"content":"        case MARK:","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"LWZ19"},"content":"        case UNMARK:","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"LWZ19"},"content":"            return new MarkCommand(key, commandBody);","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"LWZ19"},"content":"        case DELETE:","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"LWZ19"},"content":"            return new DeleteCommand(commandBody);","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"LWZ19"},"content":"        case TODO:","lastModifiedDate":"2023-08-30"},{"lineNumber":125,"author":{"gitId":"LWZ19"},"content":"        case DEADLINE:","lastModifiedDate":"2023-08-30"},{"lineNumber":126,"author":{"gitId":"LWZ19"},"content":"        case EVENT:","lastModifiedDate":"2023-08-30"},{"lineNumber":127,"author":{"gitId":"LWZ19"},"content":"            return new AddCommand(key, commandBody);","lastModifiedDate":"2023-08-30"},{"lineNumber":128,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":129,"author":{"gitId":"LWZ19"},"content":"        case PRINT_DATE:","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"LWZ19"},"content":"            return new PrintDateCommand(commandBody);","lastModifiedDate":"2023-08-30"},{"lineNumber":131,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":132,"author":{"gitId":"LWZ19"},"content":"        default:","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"LWZ19"},"content":"            return new FindCommand(commandBody);","lastModifiedDate":"2023-09-01"},{"lineNumber":134,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":135,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":136,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"LWZ19":136}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import java.io.File;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"import java.util.List;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"import duke.task.Event;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":" * Storage class is used to load and save the task list to a file.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"public class Storage {","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"    public static final String SEPARATOR \u003d \" !%\u0026%! \";","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"    private File folder;","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"    private File file;","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"    private String filePath;","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"    private String folderPath;","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"     * Constructor for Storage class.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"     * @param folderPath The path of the folder to store the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"     * @param fileName   The name of the file to store the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"    public Storage(String folderPath, String fileName) {","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"        this.filePath \u003d folderPath + \"/\" + fileName;","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"        this.folderPath \u003d folderPath;","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"        this.file \u003d new File(this.filePath);","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"        this.folder \u003d new File(this.folderPath);","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"     * Load the task list from the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"     * \u003cp\u003eIf the file is not found or the format is wrong, it will throw an exception.\u003c/p\u003e","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"LWZ19"},"content":"     * @return List of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"LWZ19"},"content":"     * @throws DukeException If the file is not found or the format is wrong.","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"LWZ19"},"content":"    public List\u003cTask\u003e load() throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"LWZ19"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"LWZ19"},"content":"            Scanner sc \u003d new Scanner(this.file);","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"LWZ19"},"content":"            while (sc.hasNext()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"LWZ19"},"content":"                String[] temp \u003d sc.nextLine().split(SEPARATOR);","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"LWZ19"},"content":"                Task task;","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"LWZ19"},"content":"                switch (temp[0]) {","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"LWZ19"},"content":"                case \"T\":","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"LWZ19"},"content":"                    task \u003d new Todo(temp[2]);","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"LWZ19"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"LWZ19"},"content":"                case \"D\":","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"LWZ19"},"content":"                    task \u003d new Deadline(temp[2], Time.parseDateTime(temp[3]));","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"LWZ19"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"LWZ19"},"content":"                case \"E\":","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"LWZ19"},"content":"                    task \u003d new Event(temp[2], Time.parseDateTime(temp[3]), Time.parseDateTime(temp[4]));","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"LWZ19"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"LWZ19"},"content":"                default:","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"LWZ19"},"content":"                    throw new DukeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"LWZ19"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"LWZ19"},"content":"                if (temp[1].equals(\"1\")) {","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"LWZ19"},"content":"                    task.mark(true);","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"LWZ19"},"content":"                } else if (temp[1].equals(\"0\")) {","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"LWZ19"},"content":"                    task.mark(false);","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"LWZ19"},"content":"                } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"LWZ19"},"content":"                    throw new DukeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"LWZ19"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"LWZ19"},"content":"                taskList.add(task);","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"LWZ19"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":82,"author":{"gitId":"LWZ19"},"content":"            sc.close();","lastModifiedDate":"2023-08-27"},{"lineNumber":83,"author":{"gitId":"LWZ19"},"content":"        } catch (FileNotFoundException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"LWZ19"},"content":"            throw new DukeException();","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"LWZ19"},"content":"        return taskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":88,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":89,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"LWZ19"},"content":"     * Create a new file to store the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"LWZ19"},"content":"     * \u003cp\u003eIf the file already exists, it will clear the file.\u003cbr\u003e","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"LWZ19"},"content":"     * If the folder does not exist, it will create the folder.\u003cbr\u003e","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"LWZ19"},"content":"     * If the file cannot be created, it will throw a runtime exception.\u003c/p\u003e","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"LWZ19"},"content":"    public void createFile() {","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"LWZ19"},"content":"        if (!this.folder.exists()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"LWZ19"},"content":"            folder.mkdirs();","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":99,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":100,"author":{"gitId":"LWZ19"},"content":"            if (!file.exists()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"LWZ19"},"content":"                Files.createFile(Paths.get(this.filePath));","lastModifiedDate":"2023-08-29"},{"lineNumber":102,"author":{"gitId":"LWZ19"},"content":"            } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":103,"author":{"gitId":"LWZ19"},"content":"                clearFile();","lastModifiedDate":"2023-08-29"},{"lineNumber":104,"author":{"gitId":"LWZ19"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":105,"author":{"gitId":"LWZ19"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":106,"author":{"gitId":"LWZ19"},"content":"            /* Here is reach if something terrible happened.","lastModifiedDate":"2023-08-29"},{"lineNumber":107,"author":{"gitId":"LWZ19"},"content":"               It is best to throw a runtime exception. */","lastModifiedDate":"2023-08-29"},{"lineNumber":108,"author":{"gitId":"LWZ19"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-08-27"},{"lineNumber":109,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":110,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":111,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":112,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"LWZ19"},"content":"     * Clear the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"LWZ19"},"content":"     * @throws IOException If the file is not found.","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"LWZ19"},"content":"    private void clearFile() throws IOException {","lastModifiedDate":"2023-08-29"},{"lineNumber":118,"author":{"gitId":"LWZ19"},"content":"        FileWriter fw \u003d new FileWriter(this.filePath);","lastModifiedDate":"2023-08-29"},{"lineNumber":119,"author":{"gitId":"LWZ19"},"content":"        fw.write(\"\");","lastModifiedDate":"2023-08-29"},{"lineNumber":120,"author":{"gitId":"LWZ19"},"content":"        fw.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":121,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":122,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":123,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"LWZ19"},"content":"     * Append the text to the end of the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":125,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":126,"author":{"gitId":"LWZ19"},"content":"     * @param text The text to be appended.","lastModifiedDate":"2023-09-01"},{"lineNumber":127,"author":{"gitId":"LWZ19"},"content":"     * @throws DukeException If the file is not found.","lastModifiedDate":"2023-09-01"},{"lineNumber":128,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":129,"author":{"gitId":"LWZ19"},"content":"    public void appendFile(String text) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":130,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":131,"author":{"gitId":"LWZ19"},"content":"            FileWriter fw \u003d new FileWriter(this.filePath, true);","lastModifiedDate":"2023-08-29"},{"lineNumber":132,"author":{"gitId":"LWZ19"},"content":"            fw.write(text);","lastModifiedDate":"2023-08-27"},{"lineNumber":133,"author":{"gitId":"LWZ19"},"content":"            fw.write(\"\\n\");","lastModifiedDate":"2023-08-29"},{"lineNumber":134,"author":{"gitId":"LWZ19"},"content":"            fw.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":135,"author":{"gitId":"LWZ19"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":136,"author":{"gitId":"LWZ19"},"content":"            throw new DukeException();","lastModifiedDate":"2023-08-29"},{"lineNumber":137,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":138,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":139,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":140,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":141,"author":{"gitId":"LWZ19"},"content":"     * Change the file according to the keyword and index.","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"LWZ19"},"content":"     * \u003cp\u003eIf the index is \u003cb\u003eNEGATIVE\u003c/b\u003e, it will change \u003cb\u003eALL\u003c/b\u003e the tasks.\u003cbr\u003e","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"LWZ19"},"content":"     * If the keyword is \u003cb\u003eDELETE\u003c/b\u003e, it will delete the task.\u003cbr\u003e","lastModifiedDate":"2023-09-01"},{"lineNumber":144,"author":{"gitId":"LWZ19"},"content":"     * If the keyword is \u003cb\u003eMARK\u003c/b\u003e, it will mark the task.\u003cbr\u003e","lastModifiedDate":"2023-09-01"},{"lineNumber":145,"author":{"gitId":"LWZ19"},"content":"     * If the keyword is \u003cb\u003eUNMARK\u003c/b\u003e, it will unmark the task.\u003c/p\u003e","lastModifiedDate":"2023-09-01"},{"lineNumber":146,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":147,"author":{"gitId":"LWZ19"},"content":"     * @param key   The keyword to change the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"LWZ19"},"content":"     * @param index The index of the task to be changed.","lastModifiedDate":"2023-09-01"},{"lineNumber":149,"author":{"gitId":"LWZ19"},"content":"     * @throws DukeException If the file is not found.","lastModifiedDate":"2023-09-01"},{"lineNumber":150,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":151,"author":{"gitId":"LWZ19"},"content":"    public void changeFile(Keyword key, int index) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":152,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":153,"author":{"gitId":"LWZ19"},"content":"            String tempPath \u003d this.folderPath + \"/temp.txt\";","lastModifiedDate":"2023-08-29"},{"lineNumber":154,"author":{"gitId":"LWZ19"},"content":"            Files.copy(Paths.get(this.filePath), Paths.get(tempPath));","lastModifiedDate":"2023-08-29"},{"lineNumber":155,"author":{"gitId":"LWZ19"},"content":"            FileWriter fw \u003d new FileWriter(this.filePath);","lastModifiedDate":"2023-08-29"},{"lineNumber":156,"author":{"gitId":"LWZ19"},"content":"            fw.write(\"\"); // Clear the file","lastModifiedDate":"2023-08-29"},{"lineNumber":157,"author":{"gitId":"LWZ19"},"content":"            Scanner sc \u003d new Scanner(new File(tempPath));","lastModifiedDate":"2023-08-29"},{"lineNumber":158,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":159,"author":{"gitId":"LWZ19"},"content":"            if (key.equals(Keyword.DELETE)) {","lastModifiedDate":"2023-08-29"},{"lineNumber":160,"author":{"gitId":"LWZ19"},"content":"                if (index \u003e\u003d 0) {","lastModifiedDate":"2023-08-29"},{"lineNumber":161,"author":{"gitId":"LWZ19"},"content":"                    removeLine(index, sc, fw);","lastModifiedDate":"2023-08-29"},{"lineNumber":162,"author":{"gitId":"LWZ19"},"content":"                } // else delete all","lastModifiedDate":"2023-08-29"},{"lineNumber":163,"author":{"gitId":"LWZ19"},"content":"            } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":164,"author":{"gitId":"LWZ19"},"content":"                if (index \u003e\u003d 0) {","lastModifiedDate":"2023-08-29"},{"lineNumber":165,"author":{"gitId":"LWZ19"},"content":"                    markLine(index, key.equals(Keyword.MARK), sc, fw);","lastModifiedDate":"2023-08-29"},{"lineNumber":166,"author":{"gitId":"LWZ19"},"content":"                } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":167,"author":{"gitId":"LWZ19"},"content":"                    markAll(key.equals(Keyword.MARK), sc, fw);","lastModifiedDate":"2023-08-29"},{"lineNumber":168,"author":{"gitId":"LWZ19"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":169,"author":{"gitId":"LWZ19"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":170,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":171,"author":{"gitId":"LWZ19"},"content":"            sc.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":172,"author":{"gitId":"LWZ19"},"content":"            fw.close();","lastModifiedDate":"2023-08-27"},{"lineNumber":173,"author":{"gitId":"LWZ19"},"content":"            Files.delete(Paths.get(tempPath));","lastModifiedDate":"2023-08-29"},{"lineNumber":174,"author":{"gitId":"LWZ19"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":175,"author":{"gitId":"LWZ19"},"content":"            throw new DukeException();","lastModifiedDate":"2023-08-29"},{"lineNumber":176,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":177,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":178,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":179,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":180,"author":{"gitId":"LWZ19"},"content":"     * Remove the line with the index in the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":181,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":182,"author":{"gitId":"LWZ19"},"content":"     * @param index The index of the line to be removed.","lastModifiedDate":"2023-09-01"},{"lineNumber":183,"author":{"gitId":"LWZ19"},"content":"     * @param sc    The scanner of the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":184,"author":{"gitId":"LWZ19"},"content":"     * @param fw    The file writer of the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":185,"author":{"gitId":"LWZ19"},"content":"     * @throws IOException If the file is not found.","lastModifiedDate":"2023-09-01"},{"lineNumber":186,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":187,"author":{"gitId":"LWZ19"},"content":"    private void removeLine(int index, Scanner sc, FileWriter fw) throws IOException {","lastModifiedDate":"2023-08-29"},{"lineNumber":188,"author":{"gitId":"LWZ19"},"content":"        int curr \u003d 0;","lastModifiedDate":"2023-08-29"},{"lineNumber":189,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":190,"author":{"gitId":"LWZ19"},"content":"        while (sc.hasNext()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":191,"author":{"gitId":"LWZ19"},"content":"            if (curr !\u003d index) {","lastModifiedDate":"2023-08-29"},{"lineNumber":192,"author":{"gitId":"LWZ19"},"content":"                fw.write(sc.nextLine());","lastModifiedDate":"2023-08-29"},{"lineNumber":193,"author":{"gitId":"LWZ19"},"content":"                fw.write(\"\\n\");","lastModifiedDate":"2023-08-29"},{"lineNumber":194,"author":{"gitId":"LWZ19"},"content":"            } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":195,"author":{"gitId":"LWZ19"},"content":"                sc.nextLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":196,"author":{"gitId":"LWZ19"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":197,"author":{"gitId":"LWZ19"},"content":"            curr++;","lastModifiedDate":"2023-08-29"},{"lineNumber":198,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":199,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":200,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":201,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":202,"author":{"gitId":"LWZ19"},"content":"     * Mark or unmark the line with the index in the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":203,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":204,"author":{"gitId":"LWZ19"},"content":"     * @param index  The index of the line to be marked.","lastModifiedDate":"2023-09-01"},{"lineNumber":205,"author":{"gitId":"LWZ19"},"content":"     * @param isMark Whether to mark or unmark the line.","lastModifiedDate":"2023-09-01"},{"lineNumber":206,"author":{"gitId":"LWZ19"},"content":"     * @param sc     The scanner of the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":207,"author":{"gitId":"LWZ19"},"content":"     * @param fw     The file writer of the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":208,"author":{"gitId":"LWZ19"},"content":"     * @throws IOException If the file is not found.","lastModifiedDate":"2023-09-01"},{"lineNumber":209,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":210,"author":{"gitId":"LWZ19"},"content":"    public void markLine(int index, boolean isMark, Scanner sc, FileWriter fw) throws IOException {","lastModifiedDate":"2023-09-01"},{"lineNumber":211,"author":{"gitId":"LWZ19"},"content":"        int curr \u003d 0;","lastModifiedDate":"2023-08-29"},{"lineNumber":212,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":213,"author":{"gitId":"LWZ19"},"content":"        while (sc.hasNext()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":214,"author":{"gitId":"LWZ19"},"content":"            if (curr !\u003d index) {","lastModifiedDate":"2023-08-29"},{"lineNumber":215,"author":{"gitId":"LWZ19"},"content":"                fw.write(sc.nextLine());","lastModifiedDate":"2023-08-29"},{"lineNumber":216,"author":{"gitId":"LWZ19"},"content":"            } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":217,"author":{"gitId":"LWZ19"},"content":"                String task \u003d sc.nextLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":218,"author":{"gitId":"LWZ19"},"content":"                String result \u003d task.substring(0, SEPARATOR.length() + 1)","lastModifiedDate":"2023-08-31"},{"lineNumber":219,"author":{"gitId":"LWZ19"},"content":"                        + (isMark ? \"1\" : \"0\") + task.substring(SEPARATOR.length() + 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":220,"author":{"gitId":"LWZ19"},"content":"                fw.write(result);","lastModifiedDate":"2023-08-29"},{"lineNumber":221,"author":{"gitId":"LWZ19"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":222,"author":{"gitId":"LWZ19"},"content":"            fw.write(\"\\n\");","lastModifiedDate":"2023-08-29"},{"lineNumber":223,"author":{"gitId":"LWZ19"},"content":"            curr++;","lastModifiedDate":"2023-08-29"},{"lineNumber":224,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":225,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":226,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":227,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":228,"author":{"gitId":"LWZ19"},"content":"     * Mark or unmark all the lines in the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":229,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":230,"author":{"gitId":"LWZ19"},"content":"     * @param isMark Whether to mark or unmark the line.","lastModifiedDate":"2023-09-01"},{"lineNumber":231,"author":{"gitId":"LWZ19"},"content":"     * @param sc     The scanner of the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":232,"author":{"gitId":"LWZ19"},"content":"     * @param fw     The file writer of the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":233,"author":{"gitId":"LWZ19"},"content":"     * @throws IOException If the file is not found.","lastModifiedDate":"2023-09-01"},{"lineNumber":234,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":235,"author":{"gitId":"LWZ19"},"content":"    private void markAll(boolean isMark, Scanner sc, FileWriter fw) throws IOException {","lastModifiedDate":"2023-08-29"},{"lineNumber":236,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":237,"author":{"gitId":"LWZ19"},"content":"        while (sc.hasNext()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":238,"author":{"gitId":"LWZ19"},"content":"            String task \u003d sc.nextLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":239,"author":{"gitId":"LWZ19"},"content":"            String result \u003d task.substring(0, SEPARATOR.length() + 1)","lastModifiedDate":"2023-08-31"},{"lineNumber":240,"author":{"gitId":"LWZ19"},"content":"                    + (isMark ? \"1\" : \"0\") + task.substring(SEPARATOR.length() + 2) + \"\\n\";","lastModifiedDate":"2023-08-31"},{"lineNumber":241,"author":{"gitId":"LWZ19"},"content":"            fw.write(result);","lastModifiedDate":"2023-08-29"},{"lineNumber":242,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":243,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":244,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"LWZ19":244}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import java.util.List;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":" * Represents a list of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":" * @see Task","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"public class TaskList {","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"    private List\u003cTask\u003e taskList;","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"     * Constructs a {@code TaskList} with the given list of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"     * @param tasks the pre-given list of tasks","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"    public TaskList(List\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"        this.taskList \u003d tasks;","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"     * Constructs an empty {@code TaskList}.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"     * Adds a task to the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"     * @param task the task to be added","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"     * @param ui the ui to show the added task message to the user","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"    public void addTask(Task task, Ui ui) {","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"        taskList.add(task);","lastModifiedDate":"2023-08-24"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"        ui.showAddTask(task, taskList.size());","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"LWZ19"},"content":"     * Lists all the tasks in the {@code TaskList}.","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"LWZ19"},"content":"     * If the list is empty, an exception is thrown.","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"LWZ19"},"content":"     * @param ui the ui to show the list of tasks to the user","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"LWZ19"},"content":"     * @throws DukeException if the list is empty","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"LWZ19"},"content":"    public void listTask(Ui ui) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"LWZ19"},"content":"        if (taskList.isEmpty()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"LWZ19"},"content":"            throw new DukeException(\"OOPS!!! There is nothing in the list, yet!\");","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"LWZ19"},"content":"        String[] tasks \u003d new String[taskList.size()];","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"LWZ19"},"content":"        for (int i \u003d 0; i \u003c tasks.length; i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"LWZ19"},"content":"            tasks[i] \u003d taskList.get(i).toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"LWZ19"},"content":"        ui.showListTask(tasks);","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":62,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":63,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"LWZ19"},"content":"     * Prints all the tasks that are on the given date.","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"LWZ19"},"content":"     * If the list is empty, an exception is thrown.","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"LWZ19"},"content":"     * @param key the keyword to determine the type of task","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"LWZ19"},"content":"     * @param date the date to be checked","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"LWZ19"},"content":"     * @param ui the ui to show the list of tasks on the given date to the user","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"LWZ19"},"content":"     * @throws DukeException if the list is empty, or the keyword is invalid","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"LWZ19"},"content":"     *           or there is no task on the given date","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"LWZ19"},"content":"    public void printDateTask(Keyword key, LocalDate date, Ui ui) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"LWZ19"},"content":"        if (taskList.isEmpty()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"LWZ19"},"content":"            throw new DukeException(\"OOPS!!! There is nothing in the list, yet!\");","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"LWZ19"},"content":"        if (key.equals(Keyword.DEADLINE) || key.equals(Keyword.EVENT)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"LWZ19"},"content":"            List\u003cString\u003e tasksOnDate \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"LWZ19"},"content":"            for (Task task : taskList) {","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"LWZ19"},"content":"                if (task.onDate(key, date)) {","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"LWZ19"},"content":"                    tasksOnDate.add(task.toString());","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"LWZ19"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"LWZ19"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"LWZ19"},"content":"            if (!tasksOnDate.isEmpty()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"LWZ19"},"content":"                ui.showPrintDateTask(tasksOnDate.toArray(new String[0]),","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"LWZ19"},"content":"                        date.format(Time.DATE_DISPLAY_FORMATTER));","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"LWZ19"},"content":"            } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"LWZ19"},"content":"                throw new DukeException(String.format(\"OOPS!!! There is nothing happening on %s.\",","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"LWZ19"},"content":"                        date.format(Time.DATE_DISPLAY_FORMATTER)));","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"LWZ19"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"LWZ19"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"LWZ19"},"content":"            throw new DukeException(\"OOPS!!! This is not a valid command.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"LWZ19"},"content":"     * Deletes the task at the given index.","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"LWZ19"},"content":"     * If the index is invalid, an exception is thrown.","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"LWZ19"},"content":"     * @param index the index of the task to be deleted","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"LWZ19"},"content":"     * @param ui the ui to show the deleted task message to the user","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"LWZ19"},"content":"     * @throws DukeException if the index is invalid","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"LWZ19"},"content":"    public void deleteTask(int index, Ui ui) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"LWZ19"},"content":"        if (index \u003e\u003d taskList.size() || index \u003c 0) {","lastModifiedDate":"2023-08-24"},{"lineNumber":106,"author":{"gitId":"LWZ19"},"content":"            listTask(ui);","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"LWZ19"},"content":"            throw new DukeException(String.format(\"OOPS!!! There is no task %d to delete\", index + 1));","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":109,"author":{"gitId":"LWZ19"},"content":"        Task removedTask \u003d taskList.remove(index);","lastModifiedDate":"2023-08-24"},{"lineNumber":110,"author":{"gitId":"LWZ19"},"content":"        ui.showDeleteTask(removedTask, taskList.size());","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":112,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":113,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"LWZ19"},"content":"     * Marks or unmarks the task at the given index.","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"LWZ19"},"content":"     * If the index is invalid, an exception is thrown.","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"LWZ19"},"content":"     * @param index the index of the task to be marked or unmarked","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"LWZ19"},"content":"     * @param key the keyword to determine whether to mark or unmark the task","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"LWZ19"},"content":"     * @param ui the ui to show the marked or unmarked task message to the user","lastModifiedDate":"2023-09-01"},{"lineNumber":120,"author":{"gitId":"LWZ19"},"content":"     * @throws DukeException if the index is invalid or the keyword is invalid","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"LWZ19"},"content":"    public void markTask(int index, Keyword key, Ui ui) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":123,"author":{"gitId":"LWZ19"},"content":"        switch (key) {","lastModifiedDate":"2023-08-31"},{"lineNumber":124,"author":{"gitId":"LWZ19"},"content":"        case MARK:","lastModifiedDate":"2023-08-31"},{"lineNumber":125,"author":{"gitId":"LWZ19"},"content":"        case UNMARK:","lastModifiedDate":"2023-08-31"},{"lineNumber":126,"author":{"gitId":"LWZ19"},"content":"            break;","lastModifiedDate":"2023-08-31"},{"lineNumber":127,"author":{"gitId":"LWZ19"},"content":"        default:","lastModifiedDate":"2023-08-31"},{"lineNumber":128,"author":{"gitId":"LWZ19"},"content":"            throw new DukeException(\"OOPS!!! This is not a valid command.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":129,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":130,"author":{"gitId":"LWZ19"},"content":"        boolean isMark \u003d key.equals(Keyword.MARK);","lastModifiedDate":"2023-08-31"},{"lineNumber":131,"author":{"gitId":"LWZ19"},"content":"        if (index \u003e\u003d taskList.size() || index \u003c 0) {","lastModifiedDate":"2023-08-24"},{"lineNumber":132,"author":{"gitId":"LWZ19"},"content":"            String err \u003d String.format(\"OOPS!!! There is no task %d to %s\",","lastModifiedDate":"2023-08-30"},{"lineNumber":133,"author":{"gitId":"LWZ19"},"content":"                     index + 1, key.getKeyword());","lastModifiedDate":"2023-08-31"},{"lineNumber":134,"author":{"gitId":"LWZ19"},"content":"            listTask(ui);","lastModifiedDate":"2023-08-30"},{"lineNumber":135,"author":{"gitId":"LWZ19"},"content":"            throw new DukeException(err);","lastModifiedDate":"2023-08-30"},{"lineNumber":136,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":137,"author":{"gitId":"LWZ19"},"content":"        ui.showMarkTask(isMark, taskList.get(index).mark(isMark));","lastModifiedDate":"2023-08-30"},{"lineNumber":138,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":139,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":140,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":141,"author":{"gitId":"LWZ19"},"content":"     * Finds all the tasks that contain the given task keyword.","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"LWZ19"},"content":"     * @param taskKey the task keyword to be found","lastModifiedDate":"2023-09-01"},{"lineNumber":144,"author":{"gitId":"LWZ19"},"content":"     * @param ui the ui to show the found tasks message to the user","lastModifiedDate":"2023-09-01"},{"lineNumber":145,"author":{"gitId":"LWZ19"},"content":"     * @throws DukeException if the list is empty or the task is not found","lastModifiedDate":"2023-09-01"},{"lineNumber":146,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":147,"author":{"gitId":"LWZ19"},"content":"    public void findTask(String taskKey, Ui ui) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"LWZ19"},"content":"        if (taskList.isEmpty()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":149,"author":{"gitId":"LWZ19"},"content":"            throw new DukeException(\"OOPS!!! There is nothing in the list, yet!\");","lastModifiedDate":"2023-09-01"},{"lineNumber":150,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":151,"author":{"gitId":"LWZ19"},"content":"        List\u003cString\u003e tasksFound \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":152,"author":{"gitId":"LWZ19"},"content":"        List\u003cString\u003e taskIndexFound \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":153,"author":{"gitId":"LWZ19"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":154,"author":{"gitId":"LWZ19"},"content":"            String task \u003d taskList.get(i).toString();","lastModifiedDate":"2023-09-01"},{"lineNumber":155,"author":{"gitId":"LWZ19"},"content":"            String taskLowerCase \u003d task.toLowerCase();","lastModifiedDate":"2023-09-01"},{"lineNumber":156,"author":{"gitId":"LWZ19"},"content":"            if (taskLowerCase.contains(taskKey.toLowerCase())) {","lastModifiedDate":"2023-09-01"},{"lineNumber":157,"author":{"gitId":"LWZ19"},"content":"                tasksFound.add(task);","lastModifiedDate":"2023-09-01"},{"lineNumber":158,"author":{"gitId":"LWZ19"},"content":"                taskIndexFound.add(String.valueOf(i + 1));","lastModifiedDate":"2023-09-01"},{"lineNumber":159,"author":{"gitId":"LWZ19"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":160,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":161,"author":{"gitId":"LWZ19"},"content":"        if (tasksFound.isEmpty()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":162,"author":{"gitId":"LWZ19"},"content":"            throw new DukeException(String.format(","lastModifiedDate":"2023-09-01"},{"lineNumber":163,"author":{"gitId":"LWZ19"},"content":"                    \"OOPS!!! There is no task with %s.\", taskKey));","lastModifiedDate":"2023-09-01"},{"lineNumber":164,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":165,"author":{"gitId":"LWZ19"},"content":"        ui.showFindTask(tasksFound.toArray(new String[0]), taskIndexFound.toArray(new String[0]));","lastModifiedDate":"2023-09-01"},{"lineNumber":166,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":167,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":168,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":169,"author":{"gitId":"LWZ19"},"content":"     * Manipulates all the tasks in the {@code TaskList}.","lastModifiedDate":"2023-09-01"},{"lineNumber":170,"author":{"gitId":"LWZ19"},"content":"     * As of now, the supported manipulation includes mark, unmark and delete","lastModifiedDate":"2023-09-01"},{"lineNumber":171,"author":{"gitId":"LWZ19"},"content":"     * all tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":172,"author":{"gitId":"LWZ19"},"content":"     * If the list is empty or keyword is invalid, an exception is thrown.","lastModifiedDate":"2023-09-01"},{"lineNumber":173,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":174,"author":{"gitId":"LWZ19"},"content":"     * @param key the keyword to determine the type of manipulation","lastModifiedDate":"2023-09-01"},{"lineNumber":175,"author":{"gitId":"LWZ19"},"content":"     * @param ui the ui to show the manipulated tasks message to the user","lastModifiedDate":"2023-09-01"},{"lineNumber":176,"author":{"gitId":"LWZ19"},"content":"     * @throws DukeException if the list is empty or the keyword is invalid","lastModifiedDate":"2023-09-01"},{"lineNumber":177,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":178,"author":{"gitId":"LWZ19"},"content":"    public void manipulateAllTask(Keyword key, Ui ui) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":179,"author":{"gitId":"LWZ19"},"content":"        if (taskList.isEmpty()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":180,"author":{"gitId":"LWZ19"},"content":"            throw new DukeException(String.format(\"OOPS!!! There are no tasks to %s.\",","lastModifiedDate":"2023-08-31"},{"lineNumber":181,"author":{"gitId":"LWZ19"},"content":"                    key.getKeyword()));","lastModifiedDate":"2023-08-31"},{"lineNumber":182,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":183,"author":{"gitId":"LWZ19"},"content":"        if (key.equals(Keyword.DELETE)) {","lastModifiedDate":"2023-08-24"},{"lineNumber":184,"author":{"gitId":"LWZ19"},"content":"            taskList.clear();","lastModifiedDate":"2023-08-24"},{"lineNumber":185,"author":{"gitId":"LWZ19"},"content":"        } else if (key.equals(Keyword.MARK) || key.equals(Keyword.UNMARK)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":186,"author":{"gitId":"LWZ19"},"content":"            taskList.forEach(t -\u003e t.mark(key.equals(Keyword.MARK)));","lastModifiedDate":"2023-08-24"},{"lineNumber":187,"author":{"gitId":"LWZ19"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":188,"author":{"gitId":"LWZ19"},"content":"            throw new DukeException(\"OOPS!!! This is not a valid command.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":189,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":190,"author":{"gitId":"LWZ19"},"content":"        ui.showManipulateAllTask(key.getKeyword());","lastModifiedDate":"2023-08-30"},{"lineNumber":191,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":192,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"LWZ19":192}},{"path":"src/main/java/duke/Time.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":" * Time class is used to parse the date and time from","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":" * {@code String} to {@code LocalDateTime} or {@code LocalDate} object.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"public class Time {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"    private static final String DATE_FORMAT \u003d \"d/M/yyyy\";","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"    private static final String TIME_FORMAT \u003d \"HH:mm\";","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"    private static final String DATE_DISPLAY_FORMAT \u003d \"d MMM yyyy\";","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"    private static final String TIME_DISPLAY_FORMAT \u003d \"h:mma\";","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"    public static final DateTimeFormatter DATE_FORMATTER \u003d","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"            DateTimeFormatter.ofPattern(DATE_FORMAT);","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"    public static final DateTimeFormatter DATE_TIME_FORMATTER \u003d","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"            DateTimeFormatter.ofPattern(DATE_FORMAT + \" \" + TIME_FORMAT);","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"    public static final DateTimeFormatter DATE_TIME_DISPLAY_FORMATTER \u003d","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"            DateTimeFormatter.ofPattern(DATE_DISPLAY_FORMAT + \", \" + TIME_DISPLAY_FORMAT);","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"    public static final DateTimeFormatter DATE_DISPLAY_FORMATTER \u003d","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"            DateTimeFormatter.ofPattern(DATE_DISPLAY_FORMAT);","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"     * Parses the date and time from {@code String} to {@code LocalDateTime} object.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"     * \u003cp\u003eIf the format is wrong, it will throw an exception.\u003c/p\u003e","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"     * @param time The string to be parsed.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"     * @return The {@code LocalDateTime} object.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"     * @throws DukeException If the format is wrong.","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"    public static LocalDateTime parseDateTime(String time) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"            return LocalDateTime.parse(time, DATE_TIME_FORMATTER);","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"            throw new DukeException(Ui.connectTwoLine(\"OOPS!!! The date and time format is invalid.\",","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"                    String.format(\"Please use the format: \\\"%s %s\\\"\", DATE_FORMAT, TIME_FORMAT)));","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"LWZ19"},"content":"     * Parses the date from {@code String} to {@code LocalDate} object.","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"LWZ19"},"content":"     * \u003cp\u003eIf the format is wrong, it will throw an exception.\u003c/p\u003e","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"LWZ19"},"content":"     * @param time The string to be parsed.","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"LWZ19"},"content":"     * @return The {@code LocalDate} object.","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"LWZ19"},"content":"     * @throws DukeException If the format is wrong.","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"LWZ19"},"content":"    public static LocalDate parseDate(String time) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"LWZ19"},"content":"            return LocalDate.parse(time, DATE_FORMATTER);","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"LWZ19"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"LWZ19"},"content":"            throw new DukeException(Ui.connectTwoLine(\"OOPS!!! The date format is invalid.\",","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"LWZ19"},"content":"                    String.format(\"Please use the format: \\\"%s\\\"\", DATE_FORMAT)));","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"LWZ19":62}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":" * Ui class handles the interaction with the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":" * It contains methods to print messages to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":" * It also contains methods to read user input.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"public class Ui {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"    protected static final String INDENT \u003d \"     \";","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"    protected static final String NAME \u003d \"404\";","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"    private static final String NAME_ART \u003d","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"              \"               _                _               _                      \\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"            + \"           _  /\\\\ \\\\            / /\\\\          _  /\\\\ \\\\               \\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"            + \"          /\\\\_\\\\\\\\ \\\\ \\\\          / /  \\\\        /\\\\_\\\\\\\\ \\\\ \\\\        \\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"            + \"         / / / \\\\ \\\\ \\\\        / / /\\\\ \\\\      / / / \\\\ \\\\ \\\\          \\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"            + \"        / / /   \\\\ \\\\ \\\\      / / /\\\\ \\\\ \\\\    / / /   \\\\ \\\\ \\\\        \\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"            + \"        \\\\ \\\\ \\\\____\\\\ \\\\ \\\\    /_/ /  \\\\ \\\\ \\\\   \\\\ \\\\ \\\\____\\\\ \\\\ \\\\ \\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"            + \"         \\\\ \\\\________\\\\ \\\\   \\\\ \\\\ \\\\   \\\\ \\\\ \\\\   \\\\ \\\\________\\\\ \\\\ \\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"            + \"          \\\\/________/\\\\ \\\\   \\\\ \\\\ \\\\   \\\\ \\\\ \\\\   \\\\/________/\\\\ \\\\  \\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"            + \"                    \\\\ \\\\ \\\\   \\\\ \\\\ \\\\___\\\\ \\\\ \\\\            \\\\ \\\\ \\\\ \\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"            + \"                     \\\\ \\\\_\\\\   \\\\ \\\\/____\\\\ \\\\ \\\\            \\\\ \\\\_\\\\ \\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"            + \"                      \\\\/_/    \\\\_________\\\\/             \\\\/_/\";","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"    private Scanner sc;","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"     * Shows the welcome message to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"        String greeting \u003d String.format(\"%sHello! I\u0027m %s\\n%sWhat can I do for you?\",","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"                INDENT, NAME, INDENT);","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"        System.out.println(NAME_ART);","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"        showLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"        System.out.println(greeting);","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"        showLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"        System.out.println();","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"     * Shows the loading error message to the user, when the file loads unsuccessfully.","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"LWZ19"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"LWZ19"},"content":"        String goneWrongMessage \u003d","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"LWZ19"},"content":"                String.format(\"%sOOPS!!!Something terrible happened to the data file.\\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"LWZ19"},"content":"                              + \"%sDon\u0027t worry I will clean up the mess!\", INDENT, INDENT);","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"LWZ19"},"content":"        showLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"LWZ19"},"content":"        System.out.println(goneWrongMessage);","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"LWZ19"},"content":"        showLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"LWZ19"},"content":"     * Reads the user input for commands.","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"LWZ19"},"content":"     * @return the user input.","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"LWZ19"},"content":"    public String readCommand() {","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"LWZ19"},"content":"        if (this.sc \u003d\u003d null) {","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"LWZ19"},"content":"            this.sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"LWZ19"},"content":"        return sc.nextLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"LWZ19"},"content":"     * Shows the error message to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"LWZ19"},"content":"     * @param message the error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"LWZ19"},"content":"    public void showError(String message) {","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"LWZ19"},"content":"        System.out.printf(\"%s%s\\n\", INDENT, message);","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"LWZ19"},"content":"     * Shows the exit message to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"LWZ19"},"content":"     * Closes the scanner.","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"LWZ19"},"content":"    public void showExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"LWZ19"},"content":"        sc.close();","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"LWZ19"},"content":"        System.out.printf(\"%sBye. Hope to see you again soon!%n\", INDENT);","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"LWZ19"},"content":"     * Shows the line to separate each command and respond to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"LWZ19"},"content":"    public void showLine() {","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"LWZ19"},"content":"        String line \u003d \"    ____________________________________________________________\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"LWZ19"},"content":"                + \"   /_____/_____/_____/_____/_____/_____/_____/_____/_____/_____/\";","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"LWZ19"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"LWZ19"},"content":"     * Shows the added task message to the user, that contains the task","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"LWZ19"},"content":"     * detail and number of tasks in the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"LWZ19"},"content":"     * @param task the task to be added.","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"LWZ19"},"content":"     * @param taskListSize the number of tasks in the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"LWZ19"},"content":"    public void showAddTask(Task task, int taskListSize) {","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"LWZ19"},"content":"        System.out.printf(\"%sGot it. I\u0027ve added this task:\\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":104,"author":{"gitId":"LWZ19"},"content":"                          + \"%s  %s\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"LWZ19"},"content":"                          + \"%sNow you have %d tasks in the list.\\n\",","lastModifiedDate":"2023-08-31"},{"lineNumber":106,"author":{"gitId":"LWZ19"},"content":"                INDENT, INDENT, task, INDENT, taskListSize);","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"LWZ19"},"content":"     * Shows the delete task message to the user, that contains the task","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"LWZ19"},"content":"     * detail and number of tasks in the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"LWZ19"},"content":"     * @param removedTask the task to be deleted.","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"LWZ19"},"content":"     * @param taskListSize the number of tasks in the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"LWZ19"},"content":"    public void showDeleteTask(Task removedTask, int taskListSize) {","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"LWZ19"},"content":"        System.out.printf(\"%sNoted. I\u0027ve removed this task:%n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":118,"author":{"gitId":"LWZ19"},"content":"                          + \"%s  %s\\n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"LWZ19"},"content":"                          + \"%sNow you have %d tasks in the list.%n\",","lastModifiedDate":"2023-08-31"},{"lineNumber":120,"author":{"gitId":"LWZ19"},"content":"                INDENT, INDENT, removedTask, INDENT, taskListSize);","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"LWZ19"},"content":"     * Shows the mark or unmark task message to the user, that contains the task detail.","lastModifiedDate":"2023-09-01"},{"lineNumber":125,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":126,"author":{"gitId":"LWZ19"},"content":"     * @param isMark whether to mark or unmark the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":127,"author":{"gitId":"LWZ19"},"content":"     * @param task the task to be marked.","lastModifiedDate":"2023-09-01"},{"lineNumber":128,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":129,"author":{"gitId":"LWZ19"},"content":"    public void showMarkTask(boolean isMark, String task) {","lastModifiedDate":"2023-08-30"},{"lineNumber":130,"author":{"gitId":"LWZ19"},"content":"        String message \u003d isMark","lastModifiedDate":"2023-08-30"},{"lineNumber":131,"author":{"gitId":"LWZ19"},"content":"                ? \"Nice! I\u0027ve marked this task as done:\"","lastModifiedDate":"2023-08-30"},{"lineNumber":132,"author":{"gitId":"LWZ19"},"content":"                : \"OK, I\u0027ve marked this task as not done yet:\";","lastModifiedDate":"2023-08-30"},{"lineNumber":133,"author":{"gitId":"LWZ19"},"content":"        System.out.printf(\"%s%s\\n%s  %s\\n\", INDENT,","lastModifiedDate":"2023-09-01"},{"lineNumber":134,"author":{"gitId":"LWZ19"},"content":"                message, INDENT, task);","lastModifiedDate":"2023-09-01"},{"lineNumber":135,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":136,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":137,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":138,"author":{"gitId":"LWZ19"},"content":"     * Shows the manipulating all task messages to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":139,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":140,"author":{"gitId":"LWZ19"},"content":"     * @param keyword the keyword of the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":141,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"LWZ19"},"content":"    public void showManipulateAllTask(String keyword) {","lastModifiedDate":"2023-08-30"},{"lineNumber":143,"author":{"gitId":"LWZ19"},"content":"        System.out.printf(\"%sNoted. I will %s all tasks.\\n\", INDENT, keyword);","lastModifiedDate":"2023-09-01"},{"lineNumber":144,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":145,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":146,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":147,"author":{"gitId":"LWZ19"},"content":"     * Shows the list task message to the user,","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"LWZ19"},"content":"     * and lists all the tasks in the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":149,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":150,"author":{"gitId":"LWZ19"},"content":"     * @param tasks the string representation of the tasks in the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":151,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":152,"author":{"gitId":"LWZ19"},"content":"    public void showListTask(String[] tasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":153,"author":{"gitId":"LWZ19"},"content":"        System.out.printf(\"%sHere are the tasks in your list:\\n\", INDENT);","lastModifiedDate":"2023-08-30"},{"lineNumber":154,"author":{"gitId":"LWZ19"},"content":"        for (int i \u003d 0; i \u003c tasks.length; i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":155,"author":{"gitId":"LWZ19"},"content":"            System.out.printf(\"%s%d.%s\\n\", INDENT,","lastModifiedDate":"2023-09-01"},{"lineNumber":156,"author":{"gitId":"LWZ19"},"content":"                    i + 1, tasks[i]);","lastModifiedDate":"2023-09-01"},{"lineNumber":157,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":158,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":159,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":160,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":161,"author":{"gitId":"LWZ19"},"content":"     * Shows the print date task message to the user,","lastModifiedDate":"2023-09-01"},{"lineNumber":162,"author":{"gitId":"LWZ19"},"content":"     * and lists all the tasks that are happening on the specified date.","lastModifiedDate":"2023-09-01"},{"lineNumber":163,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":164,"author":{"gitId":"LWZ19"},"content":"     * @param tasksOnDate the string representation of the tasks happening on the specified date.","lastModifiedDate":"2023-09-01"},{"lineNumber":165,"author":{"gitId":"LWZ19"},"content":"     * @param date the String representation of the specified date.","lastModifiedDate":"2023-09-01"},{"lineNumber":166,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":167,"author":{"gitId":"LWZ19"},"content":"    public void showPrintDateTask(String[] tasksOnDate, String date) {","lastModifiedDate":"2023-09-01"},{"lineNumber":168,"author":{"gitId":"LWZ19"},"content":"        System.out.printf(\"%sHere are the %d tasks happening on %s:\\n\",","lastModifiedDate":"2023-08-30"},{"lineNumber":169,"author":{"gitId":"LWZ19"},"content":"                INDENT, tasksOnDate.length, date);","lastModifiedDate":"2023-08-30"},{"lineNumber":170,"author":{"gitId":"LWZ19"},"content":"        for (String task : tasksOnDate) {","lastModifiedDate":"2023-08-30"},{"lineNumber":171,"author":{"gitId":"LWZ19"},"content":"            System.out.printf(\"%s  %s\\n\", INDENT, task);","lastModifiedDate":"2023-09-01"},{"lineNumber":172,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":173,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":174,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":175,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":176,"author":{"gitId":"LWZ19"},"content":"     * Shows the find task message to the user,","lastModifiedDate":"2023-09-01"},{"lineNumber":177,"author":{"gitId":"LWZ19"},"content":"     * and lists all the tasks that contain the task keyword.","lastModifiedDate":"2023-09-01"},{"lineNumber":178,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":179,"author":{"gitId":"LWZ19"},"content":"     * @param tasksFound the array containing string representation","lastModifiedDate":"2023-09-01"},{"lineNumber":180,"author":{"gitId":"LWZ19"},"content":"     *                   of the tasks containing the task keyword.","lastModifiedDate":"2023-09-01"},{"lineNumber":181,"author":{"gitId":"LWZ19"},"content":"     * @param indices the array containing string representation for the","lastModifiedDate":"2023-09-01"},{"lineNumber":182,"author":{"gitId":"LWZ19"},"content":"     *                indices of the tasks in tasksFound.","lastModifiedDate":"2023-09-01"},{"lineNumber":183,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":184,"author":{"gitId":"LWZ19"},"content":"    public void showFindTask(String[] tasksFound, String[] indices) {","lastModifiedDate":"2023-09-01"},{"lineNumber":185,"author":{"gitId":"LWZ19"},"content":"        System.out.printf(\"%sHere are the matching tasks in your list:\\n\", INDENT);","lastModifiedDate":"2023-09-01"},{"lineNumber":186,"author":{"gitId":"LWZ19"},"content":"        for (int i \u003d 0; i \u003c tasksFound.length; i++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":187,"author":{"gitId":"LWZ19"},"content":"            System.out.printf(\"%s%s.%s\\n\", INDENT, indices[i], tasksFound[i]);","lastModifiedDate":"2023-09-01"},{"lineNumber":188,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":189,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":190,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":191,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":192,"author":{"gitId":"LWZ19"},"content":"     * Connects two Strings, such that it is uniform with formatting","lastModifiedDate":"2023-09-01"},{"lineNumber":193,"author":{"gitId":"LWZ19"},"content":"     * of the output display messages (e.g., indentations).","lastModifiedDate":"2023-09-01"},{"lineNumber":194,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":195,"author":{"gitId":"LWZ19"},"content":"     * @param lineOne the first string. To be placed at the front.","lastModifiedDate":"2023-09-01"},{"lineNumber":196,"author":{"gitId":"LWZ19"},"content":"     * @param lineTwo the second string. To be placed at the back.","lastModifiedDate":"2023-09-01"},{"lineNumber":197,"author":{"gitId":"LWZ19"},"content":"     * @return the connected string.","lastModifiedDate":"2023-09-01"},{"lineNumber":198,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":199,"author":{"gitId":"LWZ19"},"content":"    public static String connectTwoLine(String lineOne, String lineTwo) {","lastModifiedDate":"2023-08-30"},{"lineNumber":200,"author":{"gitId":"LWZ19"},"content":"        return String.format(\"%s\\n%s%s\", lineOne, INDENT, lineTwo);","lastModifiedDate":"2023-08-30"},{"lineNumber":201,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":202,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"LWZ19":202}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import duke.Keyword;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"import duke.Time;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"import duke.exception.DeadlineException;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"import duke.exception.EventException;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"import duke.task.Event;","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":" * Represents a command to add a task to the task list. A \u003ccode\u003eAddCommand\u003c/code\u003e","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":" * object corresponds to an executable command when the user wants to add a task","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":" * to the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"    private Keyword key;","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"    private String commandBody;","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"     * Constructs a \u003ccode\u003eAddCommand\u003c/code\u003e object.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"     * @param key the type of task to be added","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"     * @param commandBody the body of the command","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"    public AddCommand(Keyword key, String commandBody) {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"        super(false);","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"        this.key \u003d key;","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"        this.commandBody \u003d commandBody;","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"     * Executes the command to add a task to the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"     * @param taskList the task list to which the task is added","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"     * @param ui the user interface to print messages to the user","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"     * @param storage the storage to save the task list to","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"     * @throws DukeException if the command is invalid","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"LWZ19"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"LWZ19"},"content":"        Task task;","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"LWZ19"},"content":"        String err \u003d String.format(\"OOPS!!! The command for %s task is invalid.\", key.getKeyword());","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"LWZ19"},"content":"        switch(key) {","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"LWZ19"},"content":"        case TODO:","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"LWZ19"},"content":"            task \u003d new Todo(commandBody);","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"LWZ19"},"content":"            break;","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"LWZ19"},"content":"        case DEADLINE:","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"LWZ19"},"content":"            String[] deadlineTask \u003d commandBody.split(\" /by \");","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"LWZ19"},"content":"            if (deadlineTask.length !\u003d 2) {","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"LWZ19"},"content":"                throw new DeadlineException(err);","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"LWZ19"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"LWZ19"},"content":"            task \u003d new Deadline(deadlineTask[0], Time.parseDateTime(deadlineTask[1]));","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"LWZ19"},"content":"            break;","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"LWZ19"},"content":"        default: // equivalent to case EVENT","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"LWZ19"},"content":"            String[] eventTask \u003d commandBody.split(\" /from \");","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"LWZ19"},"content":"            if (eventTask.length !\u003d 2) {","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"LWZ19"},"content":"                throw new EventException(err);","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"LWZ19"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"LWZ19"},"content":"            String[] dates \u003d eventTask[1].split(\" /to \");","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"LWZ19"},"content":"            if (dates.length !\u003d 2) {","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"LWZ19"},"content":"                throw new EventException(err);","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"LWZ19"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"LWZ19"},"content":"            task \u003d new Event(eventTask[0], Time.parseDateTime(dates[0]), Time.parseDateTime(dates[1]));","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"LWZ19"},"content":"            break;","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"LWZ19"},"content":"        taskList.addTask(task, ui);","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"LWZ19"},"content":"        storage.appendFile(task.fileFormat());","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"LWZ19":78}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":" * Represents a command to be executed by the chatbot. A \u003ccode\u003eCommand\u003c/code\u003e object","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":" * corresponds to an executable command.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"public abstract class Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"    private boolean isExit;","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"     * Constructs a command.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"     * @param isExit Whether the command is an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"    public Command(boolean isExit) {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"        this.isExit \u003d isExit;","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"     * Returns whether the command is an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"     * @return Whether the command is an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"        return this.isExit;","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"     * Executes the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"     * @param taskList The task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"     * @param ui The user interface.","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"     * @param storage The storage.","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"     * @throws DukeException If an error occurs during execution.","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"    public abstract void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"LWZ19":42}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import duke.Keyword;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"import duke.exception.ManipulateException;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":" * Represents a command to delete a task. A \u003ccode\u003eDeleteCommand\u003c/code\u003e","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":" * object corresponds to an executable command to delete a task.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"    private String commandBody;","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"     * Constructs a \u003ccode\u003eDeleteCommand\u003c/code\u003e object.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"     * @param commandBody the body of the command","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"    public DeleteCommand(String commandBody) {","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"        super(false);","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"        this.commandBody \u003d commandBody;","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"     * Executes the command to delete a task.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"     * @param taskList the task list to which the task is added","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"     * @param ui the user interface to print messages to the user","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"     * @param storage the storage to save the task list to","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"     * @throws DukeException if the command is invalid","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"        String err \u003d \"OOPS!!! The command for delete task is invalid.\";","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"        int taskNum;","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"            if (!commandBody.equals(\"all\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"                taskNum \u003d Integer.parseInt(commandBody);","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"            } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"                taskList.manipulateAllTask(Keyword.DELETE, ui);","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"                storage.changeFile(Keyword.DELETE, -1);","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"LWZ19"},"content":"                return;","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"LWZ19"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"LWZ19"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"LWZ19"},"content":"            throw new ManipulateException(err, \"delete\");","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"LWZ19"},"content":"        taskList.deleteTask(taskNum - 1, ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"LWZ19"},"content":"        storage.changeFile(Keyword.DELETE, taskNum - 1);","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"LWZ19":54}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":" * Represents a command that exits the program. A \u003ccode\u003eExitCommand\u003c/code\u003e object","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":" * corresponds to an executable exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"     * Constructs a \u003ccode\u003eExitCommand\u003c/code\u003e object.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"    public ExitCommand() {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"        super(true);","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"     * Executes the command to exit the program.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"     * @param taskList the task list","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"     * @param ui       the user interface to print messages to the user","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"     * @param storage  the storage","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"        ui.showExit();","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"LWZ19":31}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":" * Represents a command to find tasks in the task list. A \u003ccode\u003eFindCommand\u003c/code\u003e object","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":" * corresponds to an executable find command. Upon execution, it will find tasks in the task list","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":" * that contain the task keyword specified by the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"    private String commandBody;","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"     * Constructs a \u003ccode\u003eFindCommand\u003c/code\u003e object.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"     * @param commandBody the command body","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"    public FindCommand(String commandBody) {","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"        super(false);","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"        this.commandBody \u003d commandBody;","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"     * Executes the command to find tasks in the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"     * @param taskList the task list to find tasks in","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"     * @param ui       the user interface to print messages to the user","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"     * @param storage  the storage","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"     * @throws DukeException if no tasks are found","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"        taskList.findTask(commandBody, ui);","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"LWZ19":39}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":" * Represents a command that lists all tasks in the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":" * A \u003ccode\u003eListCommand\u003c/code\u003e object corresponds to an executable command","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":" * to list all tasks in the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"     * Constructs a \u003ccode\u003eListCommand\u003c/code\u003e object.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"    public ListCommand() {","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"        super(false);","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"     * Executes the command to list all tasks in the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"     * @param taskList task list to be listed","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"     * @param ui       the user interface to print messages to the user","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"     * @param storage  the storage","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"     * @throws DukeException if there is nothing in the list","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"        taskList.listTask(ui);","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"LWZ19":34}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import duke.Keyword;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"import duke.exception.ManipulateException;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":" * Represents a command to mark or unmark a task.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":" * A \u003ccode\u003eMarkCommand\u003c/code\u003e object corresponds to an executable command","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":" * to mark or unmark a task.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"    private Keyword key;","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"    private String commandBody;","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"     * Constructs a \u003ccode\u003eMarkCommand\u003c/code\u003e object.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"     * @param key the operation to be done on the task","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"     * @param commandBody the body of the command","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"    public MarkCommand(Keyword key, String commandBody) {","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"        super(false);","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"        this.key \u003d key;","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"        this.commandBody \u003d commandBody;","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"     * Executes the command to mark or unmark a task.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"     * @param taskList the task list to be manipulated","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"     * @param ui the ui to interact with the user","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"     * @param storage the storage to save the task list","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"     * @throws DukeException if the command is invalid","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"        String err \u003d String.format(\"OOPS!!! The command for %s task is invalid.\", key.getKeyword());","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"        int taskNum;","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"            if (!commandBody.equals(\"all\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"LWZ19"},"content":"                taskNum \u003d Integer.parseInt(commandBody);","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"LWZ19"},"content":"            } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"LWZ19"},"content":"                taskList.manipulateAllTask(key, ui);","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"LWZ19"},"content":"                storage.changeFile(key, -1);","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"LWZ19"},"content":"                return;","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"LWZ19"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"LWZ19"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"LWZ19"},"content":"            throw new ManipulateException(err, key.getKeyword());","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"LWZ19"},"content":"        taskList.markTask(taskNum - 1, key, ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"LWZ19"},"content":"        storage.changeFile(key, taskNum - 1);","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"LWZ19":58}},{"path":"src/main/java/duke/command/PrintDateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import duke.Keyword;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"import duke.Time;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"import duke.exception.PrintDateException;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":" * Represents a print date command. A \u003ccode\u003ePrintDateCommand\u003c/code\u003e object","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":" * corresponds to an executable command that prints out all tasks that","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":" * are happening on a certain date when executed.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"public class PrintDateCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"    private String commandBody;","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"     * Constructs a \u003ccode\u003ePrintDateCommand\u003c/code\u003e object.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"     * @param commandBody The body of the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"    public PrintDateCommand(String commandBody) {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"        super(false);","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"        this.commandBody \u003d commandBody;","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"     * Prints out all tasks that are happening on a certain date.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"     * @param taskList The task list that contains the tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"     * @param ui The user interface to print out the tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"     * @param storage The storage.","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"     * @throws DukeException If the command is invalid, or if there is","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"     *             nothing in the list or if nothing is happening on that date.","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"    public void execute(TaskList taskList, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"        String err \u003d \"OOPS!!! The command for print_date task is invalid.\";","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"        String[] printTask \u003d commandBody.split(\" /on \");","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"        if (printTask.length !\u003d 2) {","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"            throw new PrintDateException(err);","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"LWZ19"},"content":"        if (!printTask[0].equals(\"deadline\") \u0026\u0026 !printTask[0].equals(\"event\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"LWZ19"},"content":"            throw new PrintDateException(err);","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"LWZ19"},"content":"        taskList.printDateTask(Keyword.valueOf(printTask[0].toUpperCase()), Time.parseDate(printTask[1]), ui);","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"LWZ19":52}},{"path":"src/main/java/duke/exception/DeadlineException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.exception;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":" * Represents a checked exception thrown when the deadline command is not in the correct format.","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"public class DeadlineException extends DukeException {","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"     * Constructs a DeadlineException.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"     * @param message The error message to be printed when the exception is caught.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"    public DeadlineException(String message) {","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"        super(Ui.connectTwoLine(message,","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"                \"Enter in the form: \\\"deadline [task_description] /by {d/M/yyyy HH:mm}\\\"\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"LWZ19":19}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.exception;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":" * Represents a checked exception thrown when the chatbot","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":" * encountered an error state.","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"     * Constructs a DukeException.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"     * @param message The error message to be printed when the exception is caught.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"        super(message);","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"     * Constructs a DukeException.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"    public DukeException() {","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"        super();","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"LWZ19":24}},{"path":"src/main/java/duke/exception/EventException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.exception;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":" * Represents an exception thrown when the user enters an invalid event command.","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"public class EventException extends DukeException {","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"     * Constructs an EventException.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"     * @param message The message to be printed when the exception is caught.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"    public EventException(String message) {","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"        super(Ui.connectTwoLine(message,","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"                \"Enter in the form: \\\"event [task_description] /from {d/M/yyyy HH:mm} /to {d/M/yyyy HH:mm}\\\"\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"LWZ19":19}},{"path":"src/main/java/duke/exception/FindException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.exception;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":" * Represents an exception thrown when the find command is invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"public class FindException extends DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"     * Constructs a \u003ccode\u003eFindException\u003c/code\u003e object.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"     * @param message The error message to be printed when the exception is caught.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"    public FindException(String message) {","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"        super(Ui.connectTwoLine(message,","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"                \"Enter in the form: \\\"find [task_keyword]\\\"\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"LWZ19":19}},{"path":"src/main/java/duke/exception/ManipulateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.exception;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":" * Represents an exception thrown when the user enters an invalid","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":" * manipulate command keyword.","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"public class ManipulateException extends DukeException {","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"     * Constructs a ManipulateException.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"     * @param message The message to be printed when the exception is caught.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"     * @param keyword The keyword that the user entered.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"    public ManipulateException(String message, String keyword) {","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"        super(Ui.connectTwoLine(message, String.format(","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"                \"Enter in the form: \\\"%s [task_number]\\\" or \\\"%s all\\\"\", keyword, keyword)));","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"LWZ19":21}},{"path":"src/main/java/duke/exception/PrintDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.exception;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":" * Represents an exception thrown when the user enters an invalid print_date command.","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"public class PrintDateException extends DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"     * Constructs a PrintDateException.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"     * @param message The message to be printed when the exception is caught.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"    public PrintDateException(String message) {","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"        super(Ui.connectTwoLine(message,","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"                \"Enter in the form: \\\"print_date [deadline/event] /on {d/M/yyyy}\\\"\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"LWZ19":19}},{"path":"src/main/java/duke/exception/TodoException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.exception;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":" * Represents an exception thrown when the user enters an invalid todo command.","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"public class TodoException extends DukeException {","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"     * Constructs a TodoException.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"     * @param message The message to be printed when the exception is caught.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"    public TodoException(String message) {","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"        super(Ui.connectTwoLine(message,","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"                \"Enter in the form: \\\"todo [task_description]\\\"\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"LWZ19":19}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"import duke.Keyword;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"import duke.Time;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":" * Represents a deadline task. A \u003ccode\u003eDeadline\u003c/code\u003e object corresponds to","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":" * a task with a description and a deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"     * Constructs a \u003ccode\u003eDeadline\u003c/code\u003e object with the given description and","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"     * deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"     * @param description The description of the deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"     * @param by The deadline of the deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"    public Deadline(String description, LocalDateTime by) {","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"        super(description);","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"     * Returns the file format of the deadline task.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"     * @return File format of the deadline task.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"    public String fileFormat() {","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"        return String.format(\"D%s%s%s%s\",","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"                Storage.SEPARATOR, super.fileFormat(),","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"                Storage.SEPARATOR, this.by.format(Time.DATE_TIME_FORMATTER));","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"     * Checks if the deadline task is on or before the given date. Returns true if","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"     * the given date is on or before the deadline of the deadline task.","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"     * Otherwise, returns false.","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"LWZ19"},"content":"     * @param key Keyword to check if it is the right type of task.","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"LWZ19"},"content":"     * @param date The date to check if the task is on or before.","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"LWZ19"},"content":"     * @return Whether the deadline task is on or before the given date.","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"LWZ19"},"content":"    public boolean onDate(Keyword key, LocalDate date) {","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"LWZ19"},"content":"        LocalDate by \u003d this.by.toLocalDate();","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"LWZ19"},"content":"        return key.equals(Keyword.DEADLINE)","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"LWZ19"},"content":"                \u0026\u0026 (by.isAfter(date) || by.equals(date));","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"LWZ19"},"content":"     * Returns the string representation of the deadline task.","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"LWZ19"},"content":"     * @return String representation of the deadline task.","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":64,"author":{"gitId":"LWZ19"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":65,"author":{"gitId":"LWZ19"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(),","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"LWZ19"},"content":"                this.by.format(Time.DATE_TIME_DISPLAY_FORMATTER));","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":68,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"LWZ19":68}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"import duke.Keyword;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"import duke.Time;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":" * Represents an event task with a start and end date/time. A \u003ccode\u003eEvent\u003c/code\u003e object","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":" * corresponds to a task represented by a description, a start date/time and an end date/time.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"    protected LocalDateTime from;","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"    protected LocalDateTime to;","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"     * Constructs a \u003ccode\u003eEvent\u003c/code\u003e object with the given description,","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"     * start date/time and end date/time.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"     * @param description Description of the event.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"     * @param from Start date/time of the event.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"     * @param to End date/time of the event.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"    public Event(String description, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"        super(description);","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"     * Returns the file format of the event task.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"     * @return File format of the event task.","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"    public String fileFormat() {","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"        return String.format(\"E%s%s%s%s%s%s\",","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"                Storage.SEPARATOR, super.fileFormat(),","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"                Storage.SEPARATOR, this.from.format(Time.DATE_TIME_FORMATTER),","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"                Storage.SEPARATOR, this.to.format(Time.DATE_TIME_FORMATTER));","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"LWZ19"},"content":"     * Checks if the event task is on the given date. Returns true","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"LWZ19"},"content":"     * if the given date is between the start and end date of the event task (inclusive).","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"LWZ19"},"content":"     * Otherwise, returns false.","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"LWZ19"},"content":"     * @param key Keyword to check if it is the right type of task.","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"LWZ19"},"content":"     * @param date The given date to check if the event task is on.","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"LWZ19"},"content":"     * @return Whether the event task is on the given date.","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"LWZ19"},"content":"    public boolean onDate(Keyword key, LocalDate date) {","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"LWZ19"},"content":"        LocalDate from \u003d this.from.toLocalDate();","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"LWZ19"},"content":"        LocalDate to \u003d this.to.toLocalDate();","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"LWZ19"},"content":"        return key.equals(Keyword.EVENT)","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"LWZ19"},"content":"                \u0026\u0026 (from.isBefore(date) || from.equals(date))","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"LWZ19"},"content":"                \u0026\u0026 (to.isAfter(date) || to.equals(date));","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"LWZ19"},"content":"     * Returns the string representation of the event task.","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"LWZ19"},"content":"     * @return String representation of the event task.","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":70,"author":{"gitId":"LWZ19"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":71,"author":{"gitId":"LWZ19"},"content":"        return String.format(\"[E]%s (from: %s to: %s)\", super.toString(),","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"LWZ19"},"content":"                this.from.format(Time.DATE_TIME_DISPLAY_FORMATTER),","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"LWZ19"},"content":"                this.to.format(Time.DATE_TIME_DISPLAY_FORMATTER));","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":75,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"LWZ19":75}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import duke.Keyword;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":" * Represents a task. A \u003ccode\u003eTask\u003c/code\u003e object corresponds to a task","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":" * described by a description and a boolean indicating whether the task","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":" * is done.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"    protected String description;","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"     * Constructs a \u003ccode\u003eTask\u003c/code\u003e object with the given description.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"     * @param description Description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"     * Returns the status of the task, whether it is done or not.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"     * \u003ccode\u003e\"X\"\u003c/code\u003e represents done, and a \u003ccode\u003e\" \"\u003c/code\u003e represents","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"     * not done.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"     * @return Status of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"     * Marks the task as done or not done.","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"     * @param isDone Status of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"     * @return String representation of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"    public String mark(boolean isDone) {","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"LWZ19"},"content":"        return this.toString();","lastModifiedDate":"2023-08-21"},{"lineNumber":47,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":48,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":49,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"LWZ19"},"content":"     * Returns the file format of the task for","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"LWZ19"},"content":"     * it to be stored and read from a file.","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"LWZ19"},"content":"     * @return File format of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"LWZ19"},"content":"    public String fileFormat() {","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"LWZ19"},"content":"        return String.format(\"%d%s%s\",","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"LWZ19"},"content":"                isDone ? 1 : 0, Storage.SEPARATOR, description);","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"LWZ19"},"content":"     * Returns whether the task is on or before the given date.","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"LWZ19"},"content":"     * @param key Keyword to check if it is the right type of task.","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"LWZ19"},"content":"     * @param date The date to check if the task is on or before.","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"LWZ19"},"content":"     * @return Whether the task is on or before the given date.","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"LWZ19"},"content":"    public boolean onDate(Keyword key, LocalDate date) {","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"LWZ19"},"content":"        return false;","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"LWZ19"},"content":"     * Returns the string representation of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"LWZ19"},"content":"     * @return String representation of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":77,"author":{"gitId":"LWZ19"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":78,"author":{"gitId":"LWZ19"},"content":"        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);","lastModifiedDate":"2023-08-21"},{"lineNumber":79,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":80,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"LWZ19":80}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":" * Represents a todo task. A \u003ccode\u003eTodo\u003c/code\u003e object corresponds to","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":" * a todo task described by a description.","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"     * Constructs a \u003ccode\u003eTodo\u003c/code\u003e object with the given description.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"     * @param description Description of the todo task.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"        super(description);","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"     * Returns the file format of the todo task for","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"     * it to be stored and read from a file.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"     * @return File format of the todo task.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"    public String fileFormat() {","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"        return String.format(\"T%s%s\", Storage.SEPARATOR, super.fileFormat());","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"     * Returns the string representation of the todo task.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"     * @return String representation of the todo task.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"        return String.format(\"[T]%s\", super.toString());","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"LWZ19":40}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"public class ParserTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"    public void parse_emptyCommand_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"            Parser.parse(\"\");","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"            assertEquals(\"OOPS!!! You have not entered anything!\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"            Parser.parse(\"        \");","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"            assertEquals(\"OOPS!!! You have not entered anything!\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"    public void parse_invalidCommand_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"            Parser.parse(\"InvalidCommand\");","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"            assertEquals(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means.\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"    public void parse_oneWordValidCommand_success() {","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"            Parser.parse(\"bye\");","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"            Parser.parse(\"list\");","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"LWZ19"},"content":"    public void parse_oneWordInvalidCommand_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"LWZ19"},"content":"            Parser.parse(\"todo\");","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"LWZ19"},"content":"            Parser.parse(\"unmark\");","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"LWZ19"},"content":"    public void parse_multiWordCommandInvalidCommand_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"LWZ19"},"content":"            Parser.parse(\"bye bye\");","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"LWZ19"},"content":"            Parser.parse(\"list the tasks\");","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"LWZ19":84}},{"path":"src/test/java/duke/StorageStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import java.util.List;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":" * Represents a storage stub.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":" * A \u003ccode\u003eStorageStub\u003c/code\u003e object corresponds to a storage","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":" * that does not actually write to a file. It is used for testing.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"public class StorageStub extends Storage {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"    public StorageStub() {","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"        super(\"\", \"\");","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"    public void changeFile(Keyword keyword, int taskNum) {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"    public List\u003cTask\u003e load() {","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"        return null;","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"    public void createFile() {","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"    public void appendFile(String text) {","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"LWZ19":34}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"public class TaskListTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"    public void deleteTask_validIndex_success() {","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"            taskList.addTask(new Todo(\"test\"), ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"            taskList.deleteTask(0, ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"    public void deleteTask_invalidIndex_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"            taskList.addTask(new Todo(\"test\"), ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"            taskList.deleteTask(-1, ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"            assertEquals(\"OOPS!!! There is no task 0 to delete\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"    public void deleteTask_emptyList_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"LWZ19"},"content":"            taskList.deleteTask(1, ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"LWZ19"},"content":"            assertEquals(\"OOPS!!! There is nothing in the list, yet!\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"LWZ19"},"content":"    public void listTask_emptyList_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"LWZ19"},"content":"            taskList.listTask(ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"LWZ19"},"content":"            assertEquals(\"OOPS!!! There is nothing in the list, yet!\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"LWZ19"},"content":"    public void listTask_nonEmptyList_success() {","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"LWZ19"},"content":"        taskList.addTask(new Todo(\"test\"), ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"LWZ19"},"content":"            taskList.listTask(ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"LWZ19"},"content":"    public void markTask_validIndex_success() {","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"LWZ19"},"content":"            taskList.addTask(new Todo(\"test\"), ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"LWZ19"},"content":"            taskList.markTask(0, Keyword.MARK, ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"LWZ19"},"content":"    public void markTask_invalidIndex_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"LWZ19"},"content":"            taskList.addTask(new Todo(\"test\"), ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"LWZ19"},"content":"            taskList.markTask(-1, Keyword.UNMARK, ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"LWZ19"},"content":"            assertEquals(\"OOPS!!! There is no task 0 to unmark\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":103,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":104,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":105,"author":{"gitId":"LWZ19"},"content":"    public void markTask_emptyList_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":106,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"LWZ19"},"content":"            taskList.markTask(0, Keyword.MARK, ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"LWZ19"},"content":"            assertEquals(\"OOPS!!! There is nothing in the list, yet!\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":114,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":115,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":116,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":117,"author":{"gitId":"LWZ19"},"content":"    public void manipulateAllTask_validIndex_success() {","lastModifiedDate":"2023-08-31"},{"lineNumber":118,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":119,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":120,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":121,"author":{"gitId":"LWZ19"},"content":"            taskList.addTask(new Todo(\"test\"), ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":122,"author":{"gitId":"LWZ19"},"content":"            taskList.manipulateAllTask(Keyword.DELETE, ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":123,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":124,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":125,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":126,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":127,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":128,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":129,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":130,"author":{"gitId":"LWZ19"},"content":"    public void manipulateAllTask_invalidCommand_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":131,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":132,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":133,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":134,"author":{"gitId":"LWZ19"},"content":"            taskList.addTask(new Todo(\"test\"), ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":135,"author":{"gitId":"LWZ19"},"content":"            taskList.manipulateAllTask(Keyword.BYE, ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":136,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":137,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":138,"author":{"gitId":"LWZ19"},"content":"            assertEquals(\"OOPS!!! This is not a valid command.\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":139,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":140,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":141,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":142,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":143,"author":{"gitId":"LWZ19"},"content":"    public void manipulateAllTask_emptyList_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":144,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":145,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":146,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":147,"author":{"gitId":"LWZ19"},"content":"            taskList.manipulateAllTask(Keyword.DELETE, ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":148,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":149,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":150,"author":{"gitId":"LWZ19"},"content":"            assertEquals(\"OOPS!!! There are no tasks to delete.\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":151,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":152,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":153,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":154,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":155,"author":{"gitId":"LWZ19"},"content":"    public void printDateTask_emptyList_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":156,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":157,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":158,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":159,"author":{"gitId":"LWZ19"},"content":"            taskList.printDateTask(Keyword.DEADLINE, Time.parseDate(\"1/1/2023\"), ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":160,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":161,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":162,"author":{"gitId":"LWZ19"},"content":"            assertEquals(\"OOPS!!! There is nothing in the list, yet!\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":163,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":164,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":165,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":166,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":167,"author":{"gitId":"LWZ19"},"content":"    public void printDateTask_noTaskToPrint_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":168,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":169,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":170,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":171,"author":{"gitId":"LWZ19"},"content":"            taskList.addTask(new Deadline(\"test\", Time.parseDateTime(\"1/1/2023 10:00\")), ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":172,"author":{"gitId":"LWZ19"},"content":"            taskList.printDateTask(Keyword.DEADLINE, Time.parseDate(\"2/1/2023\"), ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":173,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":174,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":175,"author":{"gitId":"LWZ19"},"content":"            assertEquals(\"OOPS!!! There is nothing happening on 2 Jan 2023.\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":176,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":177,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":178,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"LWZ19":178}},{"path":"src/test/java/duke/TimeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"public class TimeTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"    public void parseDateTime_validDateTime_success() {","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"            LocalDateTime dateTime \u003d Time.parseDateTime(\"1/1/2023 18:00\");","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"            assert dateTime.equals(LocalDateTime.of(2023, 1, 1, 18, 0));","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"            dateTime \u003d Time.parseDateTime(\"1/10/2023 18:02\");","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"            assert dateTime.equals(LocalDateTime.of(2023, 10, 1, 18, 2));","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"            dateTime \u003d Time.parseDateTime(\"10/1/2023 08:00\");","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"            assert dateTime.equals(LocalDateTime.of(2023, 1, 10, 8, 0));","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"    public void parseDateTime_invalidDateTime_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"            Time.parseDateTime(\"10/1/2023 8:0\");","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"            Time.parseDateTime(\"10/13/2023 13:00\");","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"LWZ19"},"content":"            Time.parseDateTime(\"32/12/2023 13:00\");","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"LWZ19"},"content":"            Time.parseDateTime(\"ABCDEF\");","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"LWZ19"},"content":"    public void parseDate_validDate_success() {","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"LWZ19"},"content":"            LocalDate date \u003d Time.parseDate(\"1/1/2023\");","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"LWZ19"},"content":"            LocalDate date2 \u003d Time.parseDate(\"31/3/2023\");","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"LWZ19"},"content":"            assert date.equals(LocalDate.of(2023, 1, 1));","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"LWZ19"},"content":"            assert date2.equals(LocalDate.of(2023, 3, 31));","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"LWZ19"},"content":"    public void parseDate_invalidDate_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"LWZ19"},"content":"            Time.parseDate(\"1/1/2023 18:00\");","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"LWZ19"},"content":"            Time.parseDate(\"ABCDEF\");","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"LWZ19"},"content":"            Time.parseDate(\"32/3/2023\");","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"LWZ19":97}},{"path":"src/test/java/duke/UiStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":" * Represents a UI stub.","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":" * A \u003ccode\u003eUiStub\u003c/code\u003e object corresponds to a UI","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":" * that does not actually print to the console. It is used for testing.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"public class UiStub extends Ui {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"    public String readCommand() {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"        return \"\";","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"    public void showError(String message) {","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"    public void showExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"    public void showLine() {","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"    public void showAddTask(Task task, int taskListSize) {","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"    public void showDeleteTask(Task removedTask, int taskListSize) {","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"LWZ19"},"content":"    public void showMarkTask(boolean isMark, String task) {","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"LWZ19"},"content":"    public void showManipulateAllTask(String keyword) {","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"LWZ19"},"content":"    public void showListTask(String[] tasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"LWZ19"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"LWZ19"},"content":"    public void showPrintDateTask(String[] tasksOnDate, String date) {","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"LWZ19":60}},{"path":"src/test/java/duke/command/AddCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"import duke.Keyword;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"import duke.StorageStub;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"import duke.UiStub;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"public class AddCommandTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"    public void execute_validCommand_success() {","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"        AddCommand add \u003d new AddCommand(Keyword.TODO, \"test\");","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"        StorageStub storage \u003d new StorageStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"        ArrayList\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList(list);","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"            add.execute(taskList, ui, storage);","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"            assertEquals(1, list.size());","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"            new AddCommand(Keyword.DEADLINE, \"test /by 1/1/2023 11:00\")","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"                    .execute(taskList, ui, storage);","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"            assertEquals(2, list.size());","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"    public void execute_invalidCommand_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"        AddCommand add \u003d new AddCommand(Keyword.DEADLINE, \"test\");","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"        StorageStub storage \u003d new StorageStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"LWZ19"},"content":"            add.execute(taskList, ui, storage);","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"LWZ19"},"content":"        add \u003d new AddCommand(Keyword.EVENT, \"test /from today /to tomorrow\");","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"LWZ19"},"content":"            add.execute(taskList, ui, storage);","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"LWZ19"},"content":"    public void isExitTest() {","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"LWZ19"},"content":"        AddCommand add \u003d new AddCommand(Keyword.TODO, \"\");","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"LWZ19"},"content":"        assertFalse(add.isExit());","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"LWZ19":65}},{"path":"src/test/java/duke/command/DeleteCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"import duke.StorageStub;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"import duke.UiStub;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"public class DeleteCommandTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"    public void execute_validCommand_success() {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"        DeleteCommand del \u003d new DeleteCommand(\"1\");","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"        StorageStub storage \u003d new StorageStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"        taskList.addTask(new Todo(\"test\"), ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"            del.execute(taskList, ui, storage);","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"    public void execute_emptyList_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"        DeleteCommand del \u003d new DeleteCommand(\"1\");","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"        StorageStub storage \u003d new StorageStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"            del.execute(taskList, ui, storage);","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"            assertEquals(\"OOPS!!! There is nothing in the list, yet!\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"LWZ19"},"content":"    public void execute_invalidCommand_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"LWZ19"},"content":"        DeleteCommand del \u003d new DeleteCommand(\"one\");","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"LWZ19"},"content":"        StorageStub storage \u003d new StorageStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"LWZ19"},"content":"        taskList.addTask(new Todo(\"test\"), ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"LWZ19"},"content":"            del.execute(taskList, ui, storage);","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"LWZ19"},"content":"    public void isExitTest() {","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"LWZ19"},"content":"        DeleteCommand del \u003d new DeleteCommand(\"\");","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"LWZ19"},"content":"        assertFalse(del.isExit());","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"LWZ19":67}},{"path":"src/test/java/duke/command/ExitCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"public class ExitCommandTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"    public void isExitTest() {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"        ExitCommand exit \u003d new ExitCommand();","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"        assertTrue(exit.isExit());","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"LWZ19":15}},{"path":"src/test/java/duke/command/FindCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"import duke.StorageStub;","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"import duke.UiStub;","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"import duke.task.Event;","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"public class FindCommandTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"    public void execute_validCommand_success() {","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"        FindCommand find \u003d new FindCommand(\"Book\");","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"        StorageStub storage \u003d new StorageStub();","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"        taskList.addTask(new Todo(\"test\"), ui);","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"        taskList.addTask(new Deadline(\"return books\",","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"                LocalDateTime.of(2023, 12, 2, 11, 59)), ui);","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"            find.execute(taskList, ui, storage);","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"    public void execute_emptyList_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"        FindCommand find \u003d new FindCommand(\"Book\");","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"        StorageStub storage \u003d new StorageStub();","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"LWZ19"},"content":"            find.execute(taskList, ui, storage);","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"LWZ19"},"content":"            assertEquals(\"OOPS!!! There is nothing in the list, yet!\", e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"LWZ19"},"content":"    public void execute_noDateFound_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"LWZ19"},"content":"        FindCommand find \u003d new FindCommand(\"Book\");","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"LWZ19"},"content":"        StorageStub storage \u003d new StorageStub();","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"LWZ19"},"content":"        taskList.addTask(new Event(\"test\",","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"LWZ19"},"content":"                LocalDateTime.of(2023, 12, 2, 11, 59),","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"LWZ19"},"content":"                LocalDateTime.of(2023, 12, 5, 11, 59)),","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"LWZ19"},"content":"                ui);","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"LWZ19"},"content":"            find.execute(taskList, ui, storage);","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"LWZ19"},"content":"            assertEquals(\"OOPS!!! There is no task with Book.\", e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"LWZ19"},"content":"    public void isExitTest() {","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"LWZ19"},"content":"        FindCommand find \u003d new FindCommand(\"\");","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"LWZ19"},"content":"        assertFalse(find.isExit());","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"LWZ19":76}},{"path":"src/test/java/duke/command/ListCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"import duke.StorageStub;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"import duke.UiStub;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"public class ListCommandTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"    public void execute_validList_success() {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"        ListCommand list \u003d new ListCommand();","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"        StorageStub storage \u003d new StorageStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"        taskList.addTask(new Todo(\"test\"), ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"            list.execute(taskList, ui, storage);","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"    public void execute_emptyList_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"        ListCommand list \u003d new ListCommand();","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"        StorageStub storage \u003d new StorageStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"            list.execute(taskList, ui, storage);","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"            assertEquals(\"OOPS!!! There is nothing in the list, yet!\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"LWZ19"},"content":"    public void isExitTest() {","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"LWZ19"},"content":"        ListCommand list \u003d new ListCommand();","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"LWZ19"},"content":"        assertFalse(list.isExit());","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"LWZ19":52}},{"path":"src/test/java/duke/command/MarkCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"import duke.Keyword;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"import duke.StorageStub;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"import duke.UiStub;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"public class MarkCommandTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"    public void execute_validCommand_success() {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"        MarkCommand mark \u003d new MarkCommand(Keyword.MARK, \"1\");","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"        StorageStub storage \u003d new StorageStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"        taskList.addTask(new Todo(\"test\"), ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"            mark.execute(taskList, ui, storage);","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"    public void execute_emptyList_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"        MarkCommand mark \u003d new MarkCommand(Keyword.MARK, \"1\");","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"        StorageStub storage \u003d new StorageStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"            mark.execute(taskList, ui, storage);","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"            assertEquals(\"OOPS!!! There is nothing in the list, yet!\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"LWZ19"},"content":"    public void execute_invalidCommand_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"LWZ19"},"content":"        MarkCommand mark \u003d new MarkCommand(Keyword.DELETE, \"1\");","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"LWZ19"},"content":"        StorageStub storage \u003d new StorageStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"LWZ19"},"content":"        taskList.addTask(new Todo(\"test\"), ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"LWZ19"},"content":"            mark.execute(taskList, ui, storage);","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"LWZ19"},"content":"        mark \u003d new MarkCommand(Keyword.MARK, \"2\");","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"LWZ19"},"content":"            mark.execute(taskList, ui, storage);","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"LWZ19"},"content":"    public void isExitTest() {","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"LWZ19"},"content":"        MarkCommand mark \u003d new MarkCommand(Keyword.MARK, \"\");","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"LWZ19"},"content":"        assertFalse(mark.isExit());","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"LWZ19":75}},{"path":"src/test/java/duke/command/PrintDateCommandTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"import duke.StorageStub;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"import duke.UiStub;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"public class PrintDateCommandTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"    public void execute_validCommand_success() {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"        PrintDateCommand pd \u003d new PrintDateCommand(\"deadline /on 2/12/2023\");","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"        StorageStub storage \u003d new StorageStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"        taskList.addTask(new Deadline(\"\",","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"                LocalDateTime.of(2023, 12, 2, 11, 59)), ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"            pd.execute(taskList, ui, storage);","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"    public void execute_emptyList_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"        PrintDateCommand pd \u003d new PrintDateCommand(\"deadline /on 2/12/2023\");","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"        StorageStub storage \u003d new StorageStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"            pd.execute(taskList, ui, storage);","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"LWZ19"},"content":"            assertEquals(\"OOPS!!! There is nothing in the list, yet!\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"LWZ19"},"content":"    public void execute_invalidCommand_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"LWZ19"},"content":"        PrintDateCommand mark \u003d new PrintDateCommand(\"test\");","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"LWZ19"},"content":"        StorageStub storage \u003d new StorageStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"LWZ19"},"content":"        taskList.addTask(new Deadline(\"\",","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"LWZ19"},"content":"                LocalDateTime.of(2023, 12, 2, 11, 59)), ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"LWZ19"},"content":"            mark.execute(taskList, ui, storage);","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"LWZ19"},"content":"    public void execute_noDateFound_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"LWZ19"},"content":"        PrintDateCommand mark \u003d new PrintDateCommand(\"deadline /on 3/12/2023\");","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"LWZ19"},"content":"        UiStub ui \u003d new UiStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"LWZ19"},"content":"        StorageStub storage \u003d new StorageStub();","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"LWZ19"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"LWZ19"},"content":"        taskList.addTask(new Deadline(\"\",","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"LWZ19"},"content":"                LocalDateTime.of(2023, 12, 2, 11, 59)), ui);","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"LWZ19"},"content":"            mark.execute(taskList, ui, storage);","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"LWZ19"},"content":"            assert true;","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"LWZ19"},"content":"    public void isExitTest() {","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"LWZ19"},"content":"        PrintDateCommand c \u003d new PrintDateCommand(\"\");","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"LWZ19"},"content":"        assertFalse(c.isExit());","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"LWZ19":87}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"import duke.Keyword;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"import duke.Time;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"    public void toStringTest() {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"            Deadline d \u003d new Deadline(\"return book\", Time.parseDateTime(\"2/12/2023 18:00\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"            assertEquals(\"[D][ ] return book (by: 2 Dec 2023, 6:00PM)\", d.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"            d.mark(true);","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"            assertEquals(\"[D][X] return book (by: 2 Dec 2023, 6:00PM)\", d.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"            d.mark(false);","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"            assertEquals(\"[D][ ] return book (by: 2 Dec 2023, 6:00PM)\", d.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"    public void fileFormatTest() {","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"            Deadline d \u003d new Deadline(\"return book\", Time.parseDateTime(\"2/12/2023 18:00\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"            String expectedUnmark \u003d \"D\" + Storage.SEPARATOR + \"0\" + Storage.SEPARATOR + \"return book\"","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"                    + Storage.SEPARATOR + \"2/12/2023 18:00\";","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"            String expectedMark \u003d \"D\" + Storage.SEPARATOR + \"1\" + Storage.SEPARATOR + \"return book\"","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"                    + Storage.SEPARATOR + \"2/12/2023 18:00\";","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"            assertEquals(expectedUnmark, d.fileFormat());","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"            d.mark(true);","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"            assertEquals(expectedMark, d.fileFormat());","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"            d.mark(false);","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"LWZ19"},"content":"            assertEquals(expectedUnmark, d.fileFormat());","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"LWZ19"},"content":"    public void onDateTest() {","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"LWZ19"},"content":"            Deadline d \u003d new Deadline(\"return book\", Time.parseDateTime(\"2/12/2023 18:00\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"LWZ19"},"content":"            assertFalse(d.onDate(Keyword.EVENT, LocalDate.parse(\"2023-12-02\")));","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"LWZ19"},"content":"            assertTrue(d.onDate(Keyword.DEADLINE, LocalDate.parse(\"2023-12-02\")));","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"LWZ19"},"content":"            assertTrue(d.onDate(Keyword.DEADLINE, LocalDate.parse(\"2023-12-01\")));","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"LWZ19"},"content":"            assertFalse(d.onDate(Keyword.DEADLINE, LocalDate.parse(\"2023-12-03\")));","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"LWZ19":64}},{"path":"src/test/java/duke/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"import duke.Keyword;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"import duke.Time;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"public class EventTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"    public void toStringTest() {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"            Event e \u003d new Event(\"project meeting\", Time.parseDateTime(\"1/12/2023 18:00\"),","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"                    Time.parseDateTime(\"2/12/2023 20:00\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"            assertEquals(\"[E][ ] project meeting (from: 1 Dec 2023, 6:00PM to: 2 Dec 2023, 8:00PM)\",","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"                    e.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"            e.mark(true);","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"            assertEquals(\"[E][X] project meeting (from: 1 Dec 2023, 6:00PM to: 2 Dec 2023, 8:00PM)\",","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"                    e.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"            e.mark(false);","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"            assertEquals(\"[E][ ] project meeting (from: 1 Dec 2023, 6:00PM to: 2 Dec 2023, 8:00PM)\",","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"                    e.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"    public void fileFormatTest() {","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"            Event e \u003d new Event(\"return book\", Time.parseDateTime(\"1/12/2023 18:00\"),","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"                    Time.parseDateTime(\"2/12/2023 20:00\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"            String expectedUnmark \u003d \"E\" + Storage.SEPARATOR + \"0\" + Storage.SEPARATOR + \"return book\"","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"                    + Storage.SEPARATOR + \"1/12/2023 18:00\" + Storage.SEPARATOR + \"2/12/2023 20:00\";","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"            String expectedMark \u003d \"E\" + Storage.SEPARATOR + \"1\" + Storage.SEPARATOR + \"return book\"","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"LWZ19"},"content":"                    + Storage.SEPARATOR + \"1/12/2023 18:00\" + Storage.SEPARATOR + \"2/12/2023 20:00\";","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"LWZ19"},"content":"            assertEquals(expectedUnmark, e.fileFormat());","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"LWZ19"},"content":"            e.mark(true);","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"LWZ19"},"content":"            assertEquals(expectedMark, e.fileFormat());","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"LWZ19"},"content":"            e.mark(false);","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"LWZ19"},"content":"            assertEquals(expectedUnmark, e.fileFormat());","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"LWZ19"},"content":"    public void onDateTest() {","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"LWZ19"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"LWZ19"},"content":"            Event e \u003d new Event(\"return book\", Time.parseDateTime(\"1/12/2023 18:00\"),","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"LWZ19"},"content":"                    Time.parseDateTime(\"2/12/2023 18:00\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"LWZ19"},"content":"            assertFalse(e.onDate(Keyword.DEADLINE, LocalDate.parse(\"2023-12-02\")));","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"LWZ19"},"content":"            assertTrue(e.onDate(Keyword.EVENT, LocalDate.parse(\"2023-12-02\")));","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"LWZ19"},"content":"            assertTrue(e.onDate(Keyword.EVENT, LocalDate.parse(\"2023-12-01\")));","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"LWZ19"},"content":"            assertFalse(e.onDate(Keyword.EVENT, LocalDate.parse(\"2023-12-03\")));","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"LWZ19"},"content":"            assertFalse(e.onDate(Keyword.EVENT, LocalDate.parse(\"2023-11-30\")));","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"LWZ19"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"LWZ19"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"LWZ19"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"LWZ19":71}},{"path":"src/test/java/duke/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"package duke.task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"import duke.Keyword;","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"public class TodoTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"    public void toStringTest() {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"        Todo t \u003d new Todo(\"return book\");","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"        assertEquals(\"[T][ ] return book\", t.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"        t.mark(true);","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"        assertEquals(\"[T][X] return book\", t.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"        t.mark(false);","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"        assertEquals(\"[T][ ] return book\", t.toString());","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"    public void fileFormatTest() {","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"        Todo t \u003d new Todo(\"return book\");","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"        String expectedUnmark \u003d \"T\" + Storage.SEPARATOR + \"0\" + Storage.SEPARATOR + \"return book\";","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"        String expectedMark \u003d \"T\" + Storage.SEPARATOR + \"1\" + Storage.SEPARATOR + \"return book\";","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"        assertEquals(expectedUnmark, t.fileFormat());","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"        t.mark(true);","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"        assertEquals(expectedMark, t.fileFormat());","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"        t.mark(false);","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"        assertEquals(expectedUnmark, t.fileFormat());","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"LWZ19"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"LWZ19"},"content":"    public void onDateTest() {","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"LWZ19"},"content":"        Todo d \u003d new Todo(\"return book\");","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"LWZ19"},"content":"        assertFalse(d.onDate(Keyword.EVENT, LocalDate.parse(\"2023-12-02\")));","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"LWZ19"},"content":"        assertFalse(d.onDate(Keyword.DEADLINE, LocalDate.parse(\"2023-12-02\")));","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"LWZ19"},"content":"        assertFalse(d.onDate(Keyword.TODO, LocalDate.parse(\"2023-12-01\")));","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"LWZ19"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"LWZ19"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"LWZ19":45}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"LWZ19"},"content":"todo read book","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"LWZ19"},"content":"deadline return book /by 6/6/2023 23:59","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LWZ19"},"content":"event project meeting /from 6/8/2023 14:00 /to 6/8/2023 16:00","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"LWZ19"},"content":"todo join sports club","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"LWZ19"},"content":"todo","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"LWZ19"},"content":"mark 1","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"LWZ19"},"content":"mark 4","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"LWZ19"},"content":"todo borrow book","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"LWZ19"},"content":"list tasks","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"LWZ19"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"LWZ19"},"content":"deadline return book /by 1/5/2023 23:59","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"LWZ19"},"content":"event project meeting /from 1/1/2023 00:00 /to 31/12/2023 23:59","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"LWZ19"},"content":"event borrow new book","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"LWZ19"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"LWZ19"},"content":"mark 2","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"LWZ19"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"LWZ19"},"content":"mark 10","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"print_date event /on 1/5/2023","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"LWZ19"},"content":"print_date deadline /on 2/5/2023","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"LWZ19"},"content":"mark 3","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"LWZ19"},"content":"mark 5","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"LWZ19"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"LWZ19"},"content":"unmark 5","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"LWZ19"},"content":"unmark 4","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"LWZ19"},"content":"mark 7","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"LWZ19"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"LWZ19"},"content":"delete","lastModifiedDate":"2023-08-22"},{"lineNumber":28,"author":{"gitId":"LWZ19"},"content":"delete 4","lastModifiedDate":"2023-08-22"},{"lineNumber":29,"author":{"gitId":"LWZ19"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"LWZ19"},"content":"unmark all","lastModifiedDate":"2023-08-22"},{"lineNumber":31,"author":{"gitId":"LWZ19"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":32,"author":{"gitId":"LWZ19"},"content":"delete all","lastModifiedDate":"2023-08-22"},{"lineNumber":33,"author":{"gitId":"LWZ19"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":34,"author":{"gitId":"LWZ19"},"content":"bye bye","lastModifiedDate":"2023-08-22"},{"lineNumber":35,"author":{"gitId":"LWZ19"},"content":"bye","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"LWZ19":35}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"LWZ19"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"LWZ19":1}}]
