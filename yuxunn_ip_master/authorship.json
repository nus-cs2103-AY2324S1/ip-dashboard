[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"# duke.Duke project template","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"yuxunn"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"yuxunn":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"yuxunn"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"yuxunn":1,"-":41}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"14","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"yuxunn"},"content":"T | 0 | Read a book","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yuxunn"},"content":"D | 0 | Finish report | null","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"yuxunn"},"content":"D | 0 | Finish report | null","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"yuxunn"},"content":"T | 0 | Read a book","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"yuxunn"},"content":"D | 0 | Finish report | null","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"yuxunn"},"content":"T | 0 | Read a book","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"yuxunn"},"content":"D | 0 | Finish report | null","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"yuxunn"},"content":"T | 0 | Read a book","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"yuxunn"},"content":"D | 0 | Finish report | null","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"yuxunn"},"content":"T | 0 | Read a book","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"yuxunn"},"content":"D | 0 | Finish report | null","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"yuxunn"},"content":"T | 0 | Read a book","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"yuxunn"},"content":"D | 0 | Finish report | null","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"yuxunn"},"content":"T | 0 | book","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"yuxunn":15}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"1","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yuxunn"},"content":"D | 0 | return book | null","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"yuxunn":2}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yuxunn"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"yuxunn"},"content":"//import java.io.FileWriter;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"yuxunn"},"content":"//import java.io.File;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"yuxunn"},"content":"//import java.io.IOException;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"yuxunn"},"content":"//import java.io.FileReader;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"yuxunn"},"content":"//import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"yuxunn"},"content":"//import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"yuxunn"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"yuxunn"},"content":" * The Duke class is a Personal Assistant Chatbot that","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"yuxunn"},"content":" * helps a person to keep track of various things","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"yuxunn"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"yuxunn"},"content":"    public Storage storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"yuxunn"},"content":"    public TaskList taskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"yuxunn"},"content":"    public Ui ui;","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"yuxunn"},"content":"     * Initializes a new instance of the Duke class.","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"yuxunn"},"content":"     * This constructor sets up the initial state of Duke.","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"yuxunn"},"content":"    public Duke(String fileDir) {","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"yuxunn"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"yuxunn"},"content":"        storage \u003d new Storage(fileDir);","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"yuxunn"},"content":"        String[] actions \u003d storage.loadActions();","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"yuxunn"},"content":"        boolean[] isDone \u003d storage.loadIsDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"yuxunn"},"content":"        String[] types \u003d storage.loadTypes();","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"yuxunn"},"content":"        int counter \u003d storage.load(\"./data/duke.txt\", actions, types, isDone);","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"yuxunn"},"content":"        if (actions !\u003d null \u0026\u0026 isDone !\u003d null \u0026\u0026 types !\u003d null \u0026\u0026 counter \u003e\u003d 0) {","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"yuxunn"},"content":"            taskList \u003d new TaskList(actions, isDone, types, counter);","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"yuxunn"},"content":"        } else {","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"yuxunn"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"yuxunn"},"content":"            String[] actions2 \u003d new String[100];","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"yuxunn"},"content":"            boolean[] isDone2 \u003d new boolean[100];","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"yuxunn"},"content":"            String[] types2 \u003d new String[100];","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"yuxunn"},"content":"            taskList \u003d new TaskList(actions2, isDone2, types2, 0);","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":41,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":43,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"yuxunn"},"content":"     * The run method starts Duke\u0027s interaction with user.","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"yuxunn"},"content":"     * run() serves as an entry point for duke\u0027s interaction.","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"yuxunn"},"content":"    public void run() {","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"yuxunn"},"content":"        ui.showWelcome();","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"yuxunn"},"content":"        boolean exit \u003d false;","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"yuxunn"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"yuxunn"},"content":"        while (exit !\u003d true) {","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"yuxunn"},"content":"            String input \u003d scanner.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"yuxunn"},"content":"            exit \u003d Parser.inputType(input, taskList, storage);","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":57,"author":{"gitId":"yuxunn"},"content":"        Storage.save(\"./data/duke.txt\", TaskList.actions, TaskList.type, TaskList.isDone, TaskList.dueString, TaskList.startTime, TaskList.endTime, TaskList.counter);","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"yuxunn"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"yuxunn"},"content":"        new Duke(\"./data/duke.txt\").run();","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"yuxunn"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"yuxunn":63,"-":2}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yuxunn"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"yuxunn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"yuxunn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"yuxunn"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"yuxunn"},"content":" * Parser class parses user input and executes corresponding commands.","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"yuxunn"},"content":" * Handles adding, list and marking tasks","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"yuxunn"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"yuxunn"},"content":"public class Parser {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"yuxunn"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"yuxunn"},"content":"     * Process user\u0027s input and performs the corresponding action.","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"yuxunn"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"yuxunn"},"content":"     * @param input User\u0027s input string.","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"yuxunn"},"content":"     * @param taskList task list to be updated","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"yuxunn"},"content":"     * @param storage stores the object for it to be saved.","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"yuxunn"},"content":"     * @return  true if program exits, false if still persist.","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"yuxunn"},"content":"    public static boolean inputType(String input, TaskList taskList, Storage storage) {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"yuxunn"},"content":"        if (input.startsWith(\"bye\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"yuxunn"},"content":"            System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"yuxunn"},"content":"            return true;","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"yuxunn"},"content":"        } else if (input.startsWith(\"delete\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"yuxunn"},"content":"            int num3 \u003d Integer.parseInt(input.substring(7).trim());","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"yuxunn"},"content":"            String action2 \u003d TaskList.helper(TaskList.actions[num3 - 1], TaskList.type[num3 - 1], TaskList.isDone[num3 - 1]);","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"yuxunn"},"content":"            for (int j \u003d num3 - 1; j \u003c TaskList.counter - 1; j++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"yuxunn"},"content":"                TaskList.actions[j] \u003d TaskList.actions[j + 1];","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"yuxunn"},"content":"                TaskList.type[j] \u003d TaskList.type[j + 1];","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"yuxunn"},"content":"                TaskList.isDone[j] \u003d TaskList.isDone[j + 1];","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"yuxunn"},"content":"            TaskList.counter \u003d TaskList.counter - 1;","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"yuxunn"},"content":"            System.out.println(\"Noted. I\u0027ve removed this task:\\n\" + action2);","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"yuxunn"},"content":"            System.out.println(\"Now you have \" + TaskList.counter + \" tasks in the list.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"yuxunn"},"content":"            Storage.save(\"data/tasks.txt\", TaskList.actions, TaskList.type, TaskList.isDone, TaskList.dueString, TaskList.startTime, TaskList.endTime, TaskList.counter);","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"yuxunn"},"content":"            return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"yuxunn"},"content":"        } else if (input.startsWith(\"list\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"yuxunn"},"content":"            System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"yuxunn"},"content":"            for (int i \u003d 0; i \u003c TaskList.counter; i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"yuxunn"},"content":"                String DMYString \u003d \"\";","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"yuxunn"},"content":"                if (TaskList.type[i].equals(\"D\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"yuxunn"},"content":"                    DMYString \u003d \"by \" + TaskList.dueString[i];","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"yuxunn"},"content":"                } else if (TaskList.type[i].equals(\"E\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"yuxunn"},"content":"                    LocalDateTime startTime \u003d TaskList.startTime[i];","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"yuxunn"},"content":"                    LocalDateTime endTime \u003d TaskList.endTime[i];","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"yuxunn"},"content":"                    DMYString \u003d \"from \" + TaskList.startTime[i]","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"yuxunn"},"content":"                            + \" to \" + TaskList.endTime[i];","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"yuxunn"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"yuxunn"},"content":"                System.out.println((i + 1) + \".\" + TaskList.helper(TaskList.actions[i], TaskList.type[i], TaskList.isDone[i]) + \" \" + DMYString);","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"yuxunn"},"content":"            return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"yuxunn"},"content":"        }else if (input.startsWith(\"todo\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"yuxunn"},"content":"            if (input.length() \u003c\u003d 4) {","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"yuxunn"},"content":"                System.out.println(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"yuxunn"},"content":"            } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"yuxunn"},"content":"                String action \u003d input.substring(5).trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"yuxunn"},"content":"                TaskList.todo(action);","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"yuxunn"},"content":"                return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"yuxunn"},"content":"        } else if (input.startsWith(\"deadline\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"yuxunn"},"content":"            String action \u003d input.substring(9, input.indexOf(\"/by\")).trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"yuxunn"},"content":"            // System.out.println(action + \"action\");","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"yuxunn"},"content":"            String by \u003d input.substring(input.indexOf(\"/by\") + 4).trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"yuxunn"},"content":"            LocalDateTime timeDeadline \u003d dateTask(by);","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"yuxunn"},"content":"            //  System.out.println(by);","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"yuxunn"},"content":"            TaskList.deadline(action, by, timeDeadline);","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"yuxunn"},"content":"            return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"yuxunn"},"content":"        } else if (input.startsWith(\"event\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"yuxunn"},"content":"            String action \u003d input.substring(6, input.indexOf(\"/from\")).trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"yuxunn"},"content":"            String from \u003d input.substring(input.indexOf(\"/from\") + 6, input.indexOf(\"/to\")).trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"yuxunn"},"content":"            String to \u003d input.substring(input.indexOf(\"/to\") + 4).trim();;","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"yuxunn"},"content":"            TaskList.event(action, from, to);","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"yuxunn"},"content":"            return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"yuxunn"},"content":"        } else if (input.startsWith(\"mark\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"yuxunn"},"content":"            int num \u003d Integer.parseInt(input.substring(5).trim());","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"yuxunn"},"content":"            if (num - 1 \u003c TaskList.counter) {","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"yuxunn"},"content":"                TaskList.isDone[num - 1] \u003d true;","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"yuxunn"},"content":"                return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"yuxunn"},"content":"        } else if (input.startsWith(\"unmark\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"yuxunn"},"content":"            int num2 \u003d Integer.parseInt(input.substring(7).trim());","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"yuxunn"},"content":"            if (num2 - 1 \u003c TaskList.counter) {","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"yuxunn"},"content":"                TaskList.isDone[num2 - 1] \u003d false;","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"yuxunn"},"content":"                System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"yuxunn"},"content":"                System.out.println(\"  \" + TaskList.helper(TaskList.actions[num2 - 1], TaskList.type[num2 - 1], TaskList.isDone[num2 - 1]));","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"yuxunn"},"content":"                return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"yuxunn"},"content":"            } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"yuxunn"},"content":"                System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"yuxunn"},"content":"        } else if (input.startsWith(\"find\")) {","lastModifiedDate":"2023-09-02"},{"lineNumber":92,"author":{"gitId":"yuxunn"},"content":"                find(input, taskList);","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"yuxunn"},"content":"                return false;","lastModifiedDate":"2023-09-02"},{"lineNumber":94,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"yuxunn"},"content":"        return true;","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":99,"author":{"gitId":"yuxunn"},"content":"     * Parse date and time and convert into LocalDateTime for storing.","lastModifiedDate":"2023-09-02"},{"lineNumber":100,"author":{"gitId":"yuxunn"},"content":"     * @param dateTimeStr String to be formatted to LocalDateTime.","lastModifiedDate":"2023-09-02"},{"lineNumber":101,"author":{"gitId":"yuxunn"},"content":"     * @return LocalDateTime of the parsed date and time.","lastModifiedDate":"2023-09-02"},{"lineNumber":102,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":103,"author":{"gitId":"yuxunn"},"content":"    private static LocalDateTime dateTask(String dateTimeStr) {","lastModifiedDate":"2023-08-31"},{"lineNumber":104,"author":{"gitId":"yuxunn"},"content":"        DateTimeFormatter DMYhelper \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");","lastModifiedDate":"2023-08-31"},{"lineNumber":105,"author":{"gitId":"yuxunn"},"content":"        // HHmm for the hour and minutes","lastModifiedDate":"2023-08-31"},{"lineNumber":106,"author":{"gitId":"yuxunn"},"content":"        return LocalDateTime.parse(dateTimeStr, DMYhelper);","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"yuxunn"},"content":"    public static void find(String input, TaskList taskList) {","lastModifiedDate":"2023-09-02"},{"lineNumber":109,"author":{"gitId":"yuxunn"},"content":"        String keyword \u003d input.substring(5).trim();","lastModifiedDate":"2023-09-02"},{"lineNumber":110,"author":{"gitId":"yuxunn"},"content":"        ArrayList\u003cString\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-02"},{"lineNumber":111,"author":{"gitId":"yuxunn"},"content":"        for (int i \u003d 0; i \u003c taskList.counter; i++) {","lastModifiedDate":"2023-09-02"},{"lineNumber":112,"author":{"gitId":"yuxunn"},"content":"            if (taskList.actions[i].contains(keyword)) {","lastModifiedDate":"2023-09-02"},{"lineNumber":113,"author":{"gitId":"yuxunn"},"content":"                matchingTasks.add(taskList.helper(taskList.actions[i], taskList.type[i], taskList.isDone[i]));","lastModifiedDate":"2023-09-02"},{"lineNumber":114,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":115,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":116,"author":{"gitId":"yuxunn"},"content":"        if (matchingTasks.isEmpty()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":117,"author":{"gitId":"yuxunn"},"content":"            System.out.println(\"No matching tasks found.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":118,"author":{"gitId":"yuxunn"},"content":"        } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":119,"author":{"gitId":"yuxunn"},"content":"            System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-09-02"},{"lineNumber":120,"author":{"gitId":"yuxunn"},"content":"            for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {","lastModifiedDate":"2023-09-02"},{"lineNumber":121,"author":{"gitId":"yuxunn"},"content":"                System.out.println((i + 1) + \".\" + matchingTasks.get(i));","lastModifiedDate":"2023-09-02"},{"lineNumber":122,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":123,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":124,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":125,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":126,"author":{"gitId":"yuxunn"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"yuxunn":126}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yuxunn"},"content":"import java.io.*;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"yuxunn"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"yuxunn"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"yuxunn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"yuxunn"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"yuxunn"},"content":" * The storage class handles saving and loading data.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"yuxunn"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"yuxunn"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"yuxunn"},"content":"public class Storage {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"yuxunn"},"content":"    private String fileDir;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"yuxunn"},"content":"    public Storage(String fileDir) {","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"yuxunn"},"content":"        this.fileDir \u003d fileDir;","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"yuxunn"},"content":"     * Saves the task data to a file for future retrival.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"yuxunn"},"content":"     * @param fileName name of file to save data.","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"yuxunn"},"content":"     * @param actions Array of actions.","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"yuxunn"},"content":"     * @param type Array of type of the action.","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"yuxunn"},"content":"     * @param isDone Array of boolean indicating whether an action is done.","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"yuxunn"},"content":"     * @param dueStrings Array of String indicating when action is due.","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"yuxunn"},"content":"     * @param startTimes Array indicating starting time of activity.","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"yuxunn"},"content":"     * @param endTimes Array indicating ending time of activity.","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"yuxunn"},"content":"     * @param counter The number of tasks in list.","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"yuxunn"},"content":"    public static void save(String fileName, String[] actions, String[] type, boolean[] isDone, String[] dueStrings, LocalDateTime[] startTimes, LocalDateTime[] endTimes, int counter) {","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"yuxunn"},"content":"        try (FileWriter writer \u003d new FileWriter(fileName)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"yuxunn"},"content":"            writer.write(counter + \"\\n\");","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"yuxunn"},"content":"            for (int i \u003d 0; i \u003c counter; i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"yuxunn"},"content":"                int isDoneNum \u003d isDone[i] ? 1 : 0;","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"yuxunn"},"content":"                writer.write(type[i] + \" | \" + isDoneNum + \" | \" + actions[i]);","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"yuxunn"},"content":"                if (type[i].equals(\"D\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"yuxunn"},"content":"                    writer.write(\" | \" + dueStrings[i]);","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"yuxunn"},"content":"                } else if (type[i].equals(\"E\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"yuxunn"},"content":"                    writer.write(\" | \" + startTimes[i].format(DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\"))","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"yuxunn"},"content":"                            + \" | \" + endTimes[i].format(DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\")));","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"yuxunn"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"yuxunn"},"content":"                writer.write(\"\\n\");","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"yuxunn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"yuxunn"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"yuxunn"},"content":"     * Loads the data retrived from the saved file.","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"yuxunn"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"yuxunn"},"content":"     * @param fileName File\u0027s name to save the data.","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"yuxunn"},"content":"     * @param actions Array to show name of action.","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"yuxunn"},"content":"     * @param type Array of the type of action.","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"yuxunn"},"content":"     * @param isDone Array of boolean indicating whether action is done.","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"yuxunn"},"content":"     * @return number of tasks saved in tasklist.","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"yuxunn"},"content":"    public static int load(String fileName, String[] actions, String[] type, boolean[] isDone) {","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"yuxunn"},"content":"        int count \u003d 0;","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"yuxunn"},"content":"        try (FileReader fileReader \u003d new FileReader(fileName)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"yuxunn"},"content":"            Scanner scanner \u003d new Scanner(fileReader);","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"yuxunn"},"content":"            while (scanner.hasNextLine() \u0026\u0026 count \u003c actions.length) {","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"yuxunn"},"content":"                String line \u003d scanner.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"yuxunn"},"content":"                String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"yuxunn"},"content":"                // to split the line read into the different parts action num and done","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"yuxunn"},"content":"                if (parts.length \u003e\u003d 3) {","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"yuxunn"},"content":"                    type[count] \u003d parts[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"yuxunn"},"content":"                    isDone[count] \u003d parts[1].equals(\"1\");","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"yuxunn"},"content":"                    actions[count] \u003d parts[2];","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"yuxunn"},"content":"                    count++;","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"yuxunn"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"yuxunn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"yuxunn"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"yuxunn"},"content":"        return count;","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"yuxunn"},"content":"     * Loads an array whether the activity is done.","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"yuxunn"},"content":"     * @return Array of whether the task is done.","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":86,"author":{"gitId":"yuxunn"},"content":"    public boolean[] loadIsDone() {","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"yuxunn"},"content":"        boolean[] isDone \u003d new boolean[100];","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"yuxunn"},"content":"        try (FileReader fileReader \u003d new FileReader(fileDir)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"yuxunn"},"content":"            Scanner scanner \u003d new Scanner(fileReader);","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"yuxunn"},"content":"            int count \u003d 0;","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"yuxunn"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"yuxunn"},"content":"                if (isDone.length \u003e count) {","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"yuxunn"},"content":"                    String line \u003d scanner.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"yuxunn"},"content":"                    String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"yuxunn"},"content":"                    if (parts.length \u003e\u003d 3) {","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"yuxunn"},"content":"                        isDone[count] \u003d parts[1].equals(\"1\");","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"yuxunn"},"content":"                        count++;","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"yuxunn"},"content":"                    }","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"yuxunn"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"yuxunn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"yuxunn"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-08-31"},{"lineNumber":103,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":104,"author":{"gitId":"yuxunn"},"content":"        return isDone;","lastModifiedDate":"2023-08-31"},{"lineNumber":105,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":106,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":108,"author":{"gitId":"yuxunn"},"content":"     * An array of type of activity.","lastModifiedDate":"2023-09-02"},{"lineNumber":109,"author":{"gitId":"yuxunn"},"content":"     * @return Array of activity\u0027s type.","lastModifiedDate":"2023-09-02"},{"lineNumber":110,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":111,"author":{"gitId":"yuxunn"},"content":"    public String[] loadTypes() {","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"yuxunn"},"content":"        String[] type \u003d new String[100];","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"yuxunn"},"content":"        int count \u003d 0;","lastModifiedDate":"2023-08-31"},{"lineNumber":114,"author":{"gitId":"yuxunn"},"content":"        try (FileReader fileReader \u003d new FileReader(fileDir)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":115,"author":{"gitId":"yuxunn"},"content":"            Scanner scanner \u003d new Scanner(fileReader);","lastModifiedDate":"2023-08-31"},{"lineNumber":116,"author":{"gitId":"yuxunn"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":117,"author":{"gitId":"yuxunn"},"content":"                if (type.length \u003e count) {","lastModifiedDate":"2023-08-31"},{"lineNumber":118,"author":{"gitId":"yuxunn"},"content":"                    count \u003d 0;","lastModifiedDate":"2023-08-31"},{"lineNumber":119,"author":{"gitId":"yuxunn"},"content":"                    String line \u003d scanner.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":120,"author":{"gitId":"yuxunn"},"content":"                    String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-08-31"},{"lineNumber":121,"author":{"gitId":"yuxunn"},"content":"                    if (parts.length \u003e\u003d 3) {","lastModifiedDate":"2023-08-31"},{"lineNumber":122,"author":{"gitId":"yuxunn"},"content":"                        type[count] \u003d parts[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":123,"author":{"gitId":"yuxunn"},"content":"                    }","lastModifiedDate":"2023-08-31"},{"lineNumber":124,"author":{"gitId":"yuxunn"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":125,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":126,"author":{"gitId":"yuxunn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":127,"author":{"gitId":"yuxunn"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-08-31"},{"lineNumber":128,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":129,"author":{"gitId":"yuxunn"},"content":"        return type;","lastModifiedDate":"2023-08-31"},{"lineNumber":130,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":131,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":132,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":133,"author":{"gitId":"yuxunn"},"content":"     * Loads the array of action.","lastModifiedDate":"2023-09-02"},{"lineNumber":134,"author":{"gitId":"yuxunn"},"content":"     * @return An array of actions.","lastModifiedDate":"2023-09-02"},{"lineNumber":135,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":136,"author":{"gitId":"yuxunn"},"content":"    public String[] loadActions() {","lastModifiedDate":"2023-08-31"},{"lineNumber":137,"author":{"gitId":"yuxunn"},"content":"        String[] actions \u003d new String[100];","lastModifiedDate":"2023-08-31"},{"lineNumber":138,"author":{"gitId":"yuxunn"},"content":"        int count \u003d 0;","lastModifiedDate":"2023-08-31"},{"lineNumber":139,"author":{"gitId":"yuxunn"},"content":"        try (FileReader fileReader \u003d new FileReader(fileDir)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":140,"author":{"gitId":"yuxunn"},"content":"            Scanner scanner \u003d new Scanner(fileReader);","lastModifiedDate":"2023-08-31"},{"lineNumber":141,"author":{"gitId":"yuxunn"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":142,"author":{"gitId":"yuxunn"},"content":"                if (actions.length \u003e count) {","lastModifiedDate":"2023-08-31"},{"lineNumber":143,"author":{"gitId":"yuxunn"},"content":"                    count \u003d 0;","lastModifiedDate":"2023-08-31"},{"lineNumber":144,"author":{"gitId":"yuxunn"},"content":"                    String line \u003d scanner.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":145,"author":{"gitId":"yuxunn"},"content":"                    String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-08-31"},{"lineNumber":146,"author":{"gitId":"yuxunn"},"content":"                    if (parts.length \u003e\u003d 3) {","lastModifiedDate":"2023-08-31"},{"lineNumber":147,"author":{"gitId":"yuxunn"},"content":"                        actions[count] \u003d parts[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":148,"author":{"gitId":"yuxunn"},"content":"                    }","lastModifiedDate":"2023-08-31"},{"lineNumber":149,"author":{"gitId":"yuxunn"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":150,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":151,"author":{"gitId":"yuxunn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":152,"author":{"gitId":"yuxunn"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-08-31"},{"lineNumber":153,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":154,"author":{"gitId":"yuxunn"},"content":"        return actions;","lastModifiedDate":"2023-08-31"},{"lineNumber":155,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":156,"author":{"gitId":"yuxunn"},"content":"}","lastModifiedDate":"2023-08-31"},{"lineNumber":157,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":158,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":159,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":160,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":161,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"yuxunn":161}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yuxunn"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"yuxunn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"yuxunn"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"yuxunn"},"content":" * The TaskList class is in charge of the different arrays","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"yuxunn"},"content":" * indicating the actions, whether it is done, the type, and the counter.","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"yuxunn"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"yuxunn"},"content":"public class TaskList {","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"yuxunn"},"content":"    public static String[] actions;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"yuxunn"},"content":"    public static boolean[] isDone;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"yuxunn"},"content":"    public static String[] type;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"yuxunn"},"content":"    public static int counter;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"yuxunn"},"content":"    public static String[] dueString \u003d new String[100];","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"yuxunn"},"content":"    public static LocalDateTime[] startTime \u003d new LocalDateTime[100];","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"yuxunn"},"content":"    public  static LocalDateTime[] endTime\u003d new LocalDateTime[100];","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"yuxunn"},"content":"     * Constructor of the TaskList","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"yuxunn"},"content":"     * @param actions Array of actions.","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"yuxunn"},"content":"     * @param isDone Array of whether the action is done.","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"yuxunn"},"content":"     * @param type Array of the different type of actions.","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"yuxunn"},"content":"     * @param counter Number of action in tasklist.","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"yuxunn"},"content":"    public TaskList(String[] actions, boolean[] isDone, String[] type, int counter){","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"yuxunn"},"content":"        TaskList.actions \u003d actions;","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"yuxunn"},"content":"        TaskList.isDone \u003d isDone;","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"yuxunn"},"content":"        TaskList.type \u003d type;","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"yuxunn"},"content":"        TaskList.counter \u003d counter;","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"yuxunn"},"content":"     * Formats and saves the to do type of action.","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"yuxunn"},"content":"     * @param action String of name of action.","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"yuxunn"},"content":"    public static void todo(String action) {","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"yuxunn"},"content":"        isDone[counter] \u003d false;","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"yuxunn"},"content":"        actions[counter] \u003d action;","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"yuxunn"},"content":"        type[counter] \u003d \"T\";","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"yuxunn"},"content":"        counter\u003d counter + 1;","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"yuxunn"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\\n\" + helper(action, \"T\", false));","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"yuxunn"},"content":"        System.out.println(\"Now you have \" + counter + \" tasks in the list.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"yuxunn"},"content":"     * Helper method to format the type of action.","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"yuxunn"},"content":"     * @param task Name of task.","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"yuxunn"},"content":"     * @param taskType Type of task.","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"yuxunn"},"content":"     * @param isDone True if done, false if not done.","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"yuxunn"},"content":"     * @return String with formatted type of tasktype.","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"yuxunn"},"content":"    public static String helper(String task, String taskType, boolean isDone) {","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"yuxunn"},"content":"        String taskIcon;","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"yuxunn"},"content":"        if (taskType.equals(\"T\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"yuxunn"},"content":"            taskIcon \u003d \"[T]\";","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"yuxunn"},"content":"        } else if (taskType.equals(\"D\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"yuxunn"},"content":"            taskIcon \u003d \"[D]\";","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"yuxunn"},"content":"        } else if (taskType.equals(\"E\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"yuxunn"},"content":"            taskIcon \u003d \"[E]\";","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"yuxunn"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"yuxunn"},"content":"            taskIcon \u003d \"[ ]\";","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"yuxunn"},"content":"        return taskIcon + \"[\" + (isDone ? \"X\" : \" \") + \"] \" + task;","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"yuxunn"},"content":"     * Helper method to format and save the deadline type of task.","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"yuxunn"},"content":"     * @param action Name of task.","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"yuxunn"},"content":"     * @param due String of when the task is due.","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"yuxunn"},"content":"     * @param by LocalDateTime of formatted due.","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"yuxunn"},"content":"    public static void deadline(String action, String due, LocalDateTime by) {","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"yuxunn"},"content":"        String byString \u003d due.trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"yuxunn"},"content":"        dueString[counter] \u003d byString;","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"yuxunn"},"content":"        actions[counter] \u003d action;","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"yuxunn"},"content":"        // System.out.println(action + \"hello\");","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"yuxunn"},"content":"        type[counter] \u003d \"D\";","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"yuxunn"},"content":"        isDone[counter] \u003d false;","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"yuxunn"},"content":"        counter \u003d counter + 1;","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"yuxunn"},"content":"        System.out.println(\"Got it. I\u0027ve added this task: \\n\" + helper(action, \"D\", false) + \" (by\" + \" \" + byString + \")\");","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"yuxunn"},"content":"        System.out.println(\"Now you have \" + counter + \" tasks in the list.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":89,"author":{"gitId":"yuxunn"},"content":"     * Helper to format and save action of event type.","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"yuxunn"},"content":"     * @param action Name of action.","lastModifiedDate":"2023-09-02"},{"lineNumber":91,"author":{"gitId":"yuxunn"},"content":"     * @param start String indicating start time.","lastModifiedDate":"2023-09-02"},{"lineNumber":92,"author":{"gitId":"yuxunn"},"content":"     * @param end String indicating the end time.","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":94,"author":{"gitId":"yuxunn"},"content":"    public static void event(String action, String start, String end) {","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"yuxunn"},"content":"        String from \u003d start.trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"yuxunn"},"content":"        String to \u003d end.trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"yuxunn"},"content":"        LocalDateTime startTimeEvent \u003d helper2(from);","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"yuxunn"},"content":"        LocalDateTime endTimeEvent \u003d helper2(to);","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"yuxunn"},"content":"        startTime[counter] \u003d startTimeEvent;","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"yuxunn"},"content":"        endTime[counter] \u003d endTimeEvent;","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"yuxunn"},"content":"        actions[counter] \u003d action;","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"yuxunn"},"content":"        isDone[counter] \u003d false;","lastModifiedDate":"2023-08-31"},{"lineNumber":103,"author":{"gitId":"yuxunn"},"content":"        type[counter] \u003d \"E\";","lastModifiedDate":"2023-08-31"},{"lineNumber":104,"author":{"gitId":"yuxunn"},"content":"        counter \u003d counter + 1;","lastModifiedDate":"2023-08-31"},{"lineNumber":105,"author":{"gitId":"yuxunn"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\\n\" + helper(action, \"E\", false) + \" (from: \" + from + \" to: \" + to + \")\");","lastModifiedDate":"2023-08-31"},{"lineNumber":106,"author":{"gitId":"yuxunn"},"content":"        System.out.println(\"Now you have \" + counter + \" tasks in the list.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":110,"author":{"gitId":"yuxunn"},"content":"     * Helper method to format the string into the LocalDateTime format.","lastModifiedDate":"2023-09-02"},{"lineNumber":111,"author":{"gitId":"yuxunn"},"content":"     * @param dateTimeStr String of the to-be-formatted date time.","lastModifiedDate":"2023-09-02"},{"lineNumber":112,"author":{"gitId":"yuxunn"},"content":"     * @return Formatted LocalDateTime version.","lastModifiedDate":"2023-09-02"},{"lineNumber":113,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":114,"author":{"gitId":"yuxunn"},"content":"    private static LocalDateTime helper2 (String dateTimeStr) {","lastModifiedDate":"2023-08-31"},{"lineNumber":115,"author":{"gitId":"yuxunn"},"content":"        DateTimeFormatter DMYhelper \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");","lastModifiedDate":"2023-08-31"},{"lineNumber":116,"author":{"gitId":"yuxunn"},"content":"        // HHmm for the hour and minutes","lastModifiedDate":"2023-08-31"},{"lineNumber":117,"author":{"gitId":"yuxunn"},"content":"        return LocalDateTime.parse(dateTimeStr, DMYhelper);","lastModifiedDate":"2023-08-31"},{"lineNumber":118,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":119,"author":{"gitId":"yuxunn"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"yuxunn":119}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yuxunn"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"yuxunn"},"content":" * Ui class handles the user interface related functions. Responsible for displaying the","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"yuxunn"},"content":" * messages to the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"yuxunn"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"yuxunn"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"yuxunn"},"content":"public class Ui {","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"yuxunn"},"content":"     * Displays welcome message","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"yuxunn"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"yuxunn"},"content":"        System.out.println(\"Hello! I\u0027m Bob\\nWhat can I do for you?\");","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"yuxunn"},"content":"     * Displays error message.","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"yuxunn"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"yuxunn"},"content":"            System.out.println(\"Error\");","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"yuxunn"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"yuxunn":23}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yuxunn"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yuxunn"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"yuxunn"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"yuxunn"},"content":"import duke.Parser;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"yuxunn"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"yuxunn"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"yuxunn"},"content":"import java.io.*;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"yuxunn"},"content":"public class DukeTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"yuxunn"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"yuxunn"},"content":"    public void testTodoCommand() {","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"yuxunn"},"content":"        Duke duke \u003d new Duke(\"./data/duke.txt\");","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"yuxunn"},"content":"        // Simulate user input to add a \"todo\" task","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"yuxunn"},"content":"        String simulatedUserInput \u003d \"todo Read a book\\nbye\\n\";","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"yuxunn"},"content":"        InputStream inputStream \u003d new ByteArrayInputStream(simulatedUserInput.getBytes());","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"yuxunn"},"content":"        System.setIn(inputStream);","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"yuxunn"},"content":"        // Redirect output to capture Duke\u0027s responses","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"yuxunn"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"yuxunn"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"yuxunn"},"content":"        // Run Duke","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"yuxunn"},"content":"        duke.run();","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"yuxunn"},"content":"        // Capture Duke\u0027s output","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"yuxunn"},"content":"        String dukeOutput \u003d outputStream.toString();","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"yuxunn"},"content":"        // Check if Duke\u0027s output contains the added \"todo\" task","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"yuxunn"},"content":"        assertTrue(dukeOutput.contains(\"Got it. I\u0027ve added this task:\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"yuxunn"},"content":"        assertTrue(dukeOutput.contains(\"[T][ ] Read a book\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"yuxunn"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"yuxunn"},"content":"    public void testDeadlineCommand() {","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"yuxunn"},"content":"        Duke duke \u003d new Duke(\"./data/duke.txt\");","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"yuxunn"},"content":"        // Simulate user input to add a \"deadline\" task","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"yuxunn"},"content":"        String simulatedUserInput \u003d \"deadline Finish report /by 30/08/2023 1430\\nbye\\n\";","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"yuxunn"},"content":"        InputStream inputStream \u003d new ByteArrayInputStream(simulatedUserInput.getBytes());","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"yuxunn"},"content":"        System.setIn(inputStream);","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"yuxunn"},"content":"        // Redirect output to capture Duke\u0027s responses","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"yuxunn"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"yuxunn"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"yuxunn"},"content":"        // Run Duke","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"yuxunn"},"content":"        duke.run();","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"yuxunn"},"content":"        // Capture Duke\u0027s output","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"yuxunn"},"content":"        String dukeOutput \u003d outputStream.toString();","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"yuxunn"},"content":"        // Check if Duke\u0027s output contains the added \"deadline\" task and displays it correctly","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"yuxunn"},"content":"        assertTrue(dukeOutput.contains(\"Got it. I\u0027ve added this task:\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"yuxunn"},"content":"        assertTrue(dukeOutput.contains(\"[D][ ] Finish report (by 30/08/2023 1430)\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"yuxunn"},"content":"}","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"yuxunn":60}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"todo borrow book","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"yuxunn"},"content":"todo sleep","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"yuxunn"},"content":"mark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"yuxunn"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"yuxunn"},"content":"bye","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"yuxunn":5}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"yuxunn"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"yuxunn":1,"-":20}}]
