[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"# Duke Project README","lastModifiedDate":"2023-09-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"yuxunn"},"content":"## Project Name","lastModifiedDate":"2023-09-20"},{"lineNumber":4,"author":{"gitId":"yuxunn"},"content":"Bob","lastModifiedDate":"2023-09-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"yuxunn"},"content":"## Description ","lastModifiedDate":"2023-09-20"},{"lineNumber":7,"author":{"gitId":"yuxunn"},"content":"Bob is a adapted version of Project Duke, a software project to build a product Duke, a personal assistant chatbot that helps a person keep track of various things.","lastModifiedDate":"2023-09-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"yuxunn"},"content":"## Table of Contents","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"yuxunn"},"content":"1. Installation","lastModifiedDate":"2023-09-20"},{"lineNumber":11,"author":{"gitId":"yuxunn"},"content":"1. Usage","lastModifiedDate":"2023-09-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"yuxunn"},"content":"## Installation","lastModifiedDate":"2023-09-20"},{"lineNumber":14,"author":{"gitId":"yuxunn"},"content":"1. clone the repository","lastModifiedDate":"2023-09-20"},{"lineNumber":15,"author":{"gitId":"yuxunn"},"content":"1. cd into ip","lastModifiedDate":"2023-09-20"},{"lineNumber":16,"author":{"gitId":"yuxunn"},"content":"2. run DukeLauncher","lastModifiedDate":"2023-09-20"},{"lineNumber":17,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":18,"author":{"gitId":"yuxunn"},"content":"## Usage ","lastModifiedDate":"2023-09-20"},{"lineNumber":19,"author":{"gitId":"yuxunn"},"content":"Here are some available commands you can try","lastModifiedDate":"2023-09-20"},{"lineNumber":20,"author":{"gitId":"yuxunn"},"content":"1. todo \u003cdescription\u003e - Add a todo task.","lastModifiedDate":"2023-09-20"},{"lineNumber":21,"author":{"gitId":"yuxunn"},"content":"1. deadline \u003cdescription\u003e /by \u003cdate\u003e - Add a deadline task.","lastModifiedDate":"2023-09-20"},{"lineNumber":22,"author":{"gitId":"yuxunn"},"content":"1. event \u003cdescription\u003e /from \u003cstart date\u003e /to \u003cend date\u003e - Add an event task.","lastModifiedDate":"2023-09-20"},{"lineNumber":23,"author":{"gitId":"yuxunn"},"content":"1. list - List all tasks","lastModifiedDate":"2023-09-20"},{"lineNumber":24,"author":{"gitId":"yuxunn"},"content":"1. done \u003ctask number\u003e - Mark a task as done.","lastModifiedDate":"2023-09-20"},{"lineNumber":25,"author":{"gitId":"yuxunn"},"content":"1. delete \u003ctask number\u003e - Delete a task.","lastModifiedDate":"2023-09-20"},{"lineNumber":26,"author":{"gitId":"yuxunn"},"content":"1. bye - Exit Duke.","lastModifiedDate":"2023-09-20"},{"lineNumber":27,"author":{"gitId":"yuxunn"},"content":"1. help - Display help message.","lastModifiedDate":"2023-09-20"},{"lineNumber":28,"author":{"gitId":"yuxunn"},"content":"Have fun playing around with Bob! ","lastModifiedDate":"2023-09-20"}],"authorContributionMap":{"yuxunn":24,"-":4}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"yuxunn"},"content":"  //  testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"yuxunn"},"content":" //   testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"yuxunn"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter-api:5.8.1\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"yuxunn"},"content":"    testRuntimeOnly \u0027org.junit.jupiter:junit-jupiter-engine:5.8.1\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"yuxunn"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"yuxunn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"yuxunn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"yuxunn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"yuxunn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"yuxunn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"yuxunn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"yuxunn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"yuxunn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"yuxunn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"yuxunn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"yuxunn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"yuxunn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"yuxunn"},"content":"    mainClass.set(\"duke.DukeLauncher\")","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"yuxunn":19,"-":39}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"1","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"yuxunn"},"content":"T | 0 | eat","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"yuxunn":2}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"# Duke Project README","lastModifiedDate":"2023-09-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"yuxunn"},"content":"## Project Name","lastModifiedDate":"2023-09-20"},{"lineNumber":4,"author":{"gitId":"yuxunn"},"content":"Bob","lastModifiedDate":"2023-09-20"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":6,"author":{"gitId":"yuxunn"},"content":"## Description ","lastModifiedDate":"2023-09-20"},{"lineNumber":7,"author":{"gitId":"yuxunn"},"content":"Bob is a adapted version of Project Duke, a software project to build a product Duke, a personal assistant chatbot that helps a person keep track of various things.","lastModifiedDate":"2023-09-20"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":9,"author":{"gitId":"yuxunn"},"content":"## Table of Contents","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"yuxunn"},"content":"1. Installation","lastModifiedDate":"2023-09-20"},{"lineNumber":11,"author":{"gitId":"yuxunn"},"content":"1. Usage","lastModifiedDate":"2023-09-20"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":13,"author":{"gitId":"yuxunn"},"content":"## Installation","lastModifiedDate":"2023-09-20"},{"lineNumber":14,"author":{"gitId":"yuxunn"},"content":"1. clone the repository","lastModifiedDate":"2023-09-20"},{"lineNumber":15,"author":{"gitId":"yuxunn"},"content":"1. cd into ip","lastModifiedDate":"2023-09-20"},{"lineNumber":16,"author":{"gitId":"yuxunn"},"content":"2. run DukeLauncher","lastModifiedDate":"2023-09-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":18,"author":{"gitId":"-"},"content":"## Usage ","lastModifiedDate":"2019-07-29"},{"lineNumber":19,"author":{"gitId":"yuxunn"},"content":"Here are some available commands you can try","lastModifiedDate":"2023-09-20"},{"lineNumber":20,"author":{"gitId":"yuxunn"},"content":"1. todo \u003cdescription\u003e - Add a todo task.","lastModifiedDate":"2023-09-20"},{"lineNumber":21,"author":{"gitId":"yuxunn"},"content":"1. deadline \u003cdescription\u003e /by \u003cdate\u003e - Add a deadline task.","lastModifiedDate":"2023-09-20"},{"lineNumber":22,"author":{"gitId":"yuxunn"},"content":"1. event \u003cdescription\u003e /from \u003cstart date\u003e /to \u003cend date\u003e - Add an event task.","lastModifiedDate":"2023-09-20"},{"lineNumber":23,"author":{"gitId":"yuxunn"},"content":"1. list - List all tasks","lastModifiedDate":"2023-09-20"},{"lineNumber":24,"author":{"gitId":"yuxunn"},"content":"1. done \u003ctask number\u003e - Mark a task as done.","lastModifiedDate":"2023-09-20"},{"lineNumber":25,"author":{"gitId":"yuxunn"},"content":"1. delete \u003ctask number\u003e - Delete a task.","lastModifiedDate":"2023-09-20"},{"lineNumber":26,"author":{"gitId":"yuxunn"},"content":"1. bye - Exit Duke.","lastModifiedDate":"2023-09-20"},{"lineNumber":27,"author":{"gitId":"yuxunn"},"content":"1. help - Display help message.","lastModifiedDate":"2023-09-20"},{"lineNumber":28,"author":{"gitId":"yuxunn"},"content":"Have fun playing around with Bob! ","lastModifiedDate":"2023-09-20"}],"authorContributionMap":{"yuxunn":22,"-":6}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"package duke;","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"yuxunn"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"yuxunn"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"yuxunn"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"yuxunn"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"yuxunn"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"yuxunn"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"yuxunn"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"yuxunn"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"yuxunn"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"yuxunn"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"yuxunn"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"yuxunn"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"yuxunn"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"yuxunn"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"yuxunn"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"yuxunn"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"yuxunn"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"yuxunn"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"yuxunn"},"content":"        try {","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"yuxunn"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"yuxunn"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"yuxunn"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"yuxunn"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"yuxunn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"yuxunn"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"yuxunn"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"yuxunn"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"yuxunn"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":45,"author":{"gitId":"yuxunn"},"content":"    private void flip() {","lastModifiedDate":"2023-09-08"},{"lineNumber":46,"author":{"gitId":"yuxunn"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"yuxunn"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"yuxunn"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"yuxunn"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":51,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":52,"author":{"gitId":"yuxunn"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"yuxunn"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-09-08"},{"lineNumber":54,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":55,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":56,"author":{"gitId":"yuxunn"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-09-08"},{"lineNumber":57,"author":{"gitId":"yuxunn"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-08"},{"lineNumber":58,"author":{"gitId":"yuxunn"},"content":"        db.flip();","lastModifiedDate":"2023-09-08"},{"lineNumber":59,"author":{"gitId":"yuxunn"},"content":"        return db;","lastModifiedDate":"2023-09-08"},{"lineNumber":60,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":61,"author":{"gitId":"yuxunn"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"yuxunn":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yuxunn"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"yuxunn"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"yuxunn"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"yuxunn"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"yuxunn"},"content":"import static duke.Parser.inputType;","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"yuxunn"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"yuxunn"},"content":" * The Duke class is a Personal Assistant Chatbot that","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"yuxunn"},"content":" * helps a person to keep track of various things","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"yuxunn"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"yuxunn"},"content":"public class Duke extends Application {","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"yuxunn"},"content":"    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"yuxunn"},"content":"    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"yuxunn"},"content":"    public Storage storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"yuxunn"},"content":"    public TaskList taskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"yuxunn"},"content":"    public Ui ui;","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"yuxunn"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"yuxunn"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"yuxunn"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"yuxunn"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"yuxunn"},"content":"    private Scene scene;","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"yuxunn"},"content":"     * Initializes a new instance of the Duke class.","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"yuxunn"},"content":"     * This constructor sets up the initial state of Duke.","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"yuxunn"},"content":"    public Duke() {","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"yuxunn"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"yuxunn"},"content":"        storage \u003d new Storage(\"./data/duke.txt\");","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"yuxunn"},"content":"        String[] actions \u003d storage.loadActions();","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"yuxunn"},"content":"        boolean[] isDone \u003d storage.loadIsDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"yuxunn"},"content":"        String[] types \u003d storage.loadTypes();","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"yuxunn"},"content":"        String[]  dueString \u003d storage.loadDueStrings();","lastModifiedDate":"2023-09-08"},{"lineNumber":46,"author":{"gitId":"yuxunn"},"content":"        LocalDateTime[] startTimes \u003d storage.loadStartTimes();","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"yuxunn"},"content":"        LocalDateTime[] endTimes \u003d storage.loadEndTimes();","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"yuxunn"},"content":"        int counter \u003d Storage.load(\"./data/duke.txt\", actions, types, isDone,dueString, startTimes,endTimes);","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"yuxunn"},"content":"        if (actions !\u003d null \u0026\u0026 isDone !\u003d null \u0026\u0026 types !\u003d null \u0026\u0026 counter \u003e\u003d 0) {","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"yuxunn"},"content":"            taskList \u003d new TaskList(actions, isDone, types, counter);","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"yuxunn"},"content":"        } else {","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"yuxunn"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"yuxunn"},"content":"            String[] actions2 \u003d new String[100];","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"yuxunn"},"content":"            boolean[] isDone2 \u003d new boolean[100];","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"yuxunn"},"content":"            String[] types2 \u003d new String[100];","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"yuxunn"},"content":"            taskList \u003d new TaskList(actions2, isDone2, types2, 0);","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":60,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":62,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":63,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":64,"author":{"gitId":"yuxunn"},"content":"    @Override","lastModifiedDate":"2023-09-08"},{"lineNumber":65,"author":{"gitId":"yuxunn"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-08"},{"lineNumber":66,"author":{"gitId":"yuxunn"},"content":"        Label helloWorld \u003d new Label(\"Hello World!\"); // Creating a new Label control","lastModifiedDate":"2023-09-08"},{"lineNumber":67,"author":{"gitId":"yuxunn"},"content":"        Scene scene \u003d new Scene(helloWorld); // Setting the scene to be our Label","lastModifiedDate":"2023-09-08"},{"lineNumber":68,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":69,"author":{"gitId":"yuxunn"},"content":"        stage.setScene(scene); // Setting the stage to show our screen","lastModifiedDate":"2023-09-08"},{"lineNumber":70,"author":{"gitId":"yuxunn"},"content":"        stage.show(); // Render the stage.","lastModifiedDate":"2023-09-08"},{"lineNumber":71,"author":{"gitId":"yuxunn"},"content":"        scrollPane \u003d new ScrollPane();","lastModifiedDate":"2023-09-08"},{"lineNumber":72,"author":{"gitId":"yuxunn"},"content":"        dialogContainer \u003d new VBox();","lastModifiedDate":"2023-09-08"},{"lineNumber":73,"author":{"gitId":"yuxunn"},"content":"        scrollPane.setContent(dialogContainer);","lastModifiedDate":"2023-09-08"},{"lineNumber":74,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":75,"author":{"gitId":"yuxunn"},"content":"        userInput \u003d new TextField();","lastModifiedDate":"2023-09-08"},{"lineNumber":76,"author":{"gitId":"yuxunn"},"content":"        sendButton \u003d new Button(\"Send\");","lastModifiedDate":"2023-09-08"},{"lineNumber":77,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":78,"author":{"gitId":"yuxunn"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();","lastModifiedDate":"2023-09-08"},{"lineNumber":79,"author":{"gitId":"yuxunn"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);","lastModifiedDate":"2023-09-08"},{"lineNumber":80,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":81,"author":{"gitId":"yuxunn"},"content":"        scene \u003d new Scene(mainLayout);","lastModifiedDate":"2023-09-08"},{"lineNumber":82,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":83,"author":{"gitId":"yuxunn"},"content":"        stage.setScene(scene);","lastModifiedDate":"2023-09-08"},{"lineNumber":84,"author":{"gitId":"yuxunn"},"content":"        stage.show();","lastModifiedDate":"2023-09-08"},{"lineNumber":85,"author":{"gitId":"yuxunn"},"content":"        stage.setTitle(\"Duke\");","lastModifiedDate":"2023-09-08"},{"lineNumber":86,"author":{"gitId":"yuxunn"},"content":"        stage.setResizable(false);","lastModifiedDate":"2023-09-08"},{"lineNumber":87,"author":{"gitId":"yuxunn"},"content":"        stage.setMinHeight(600.0);","lastModifiedDate":"2023-09-08"},{"lineNumber":88,"author":{"gitId":"yuxunn"},"content":"        stage.setMinWidth(400.0);","lastModifiedDate":"2023-09-08"},{"lineNumber":89,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":90,"author":{"gitId":"yuxunn"},"content":"        mainLayout.setPrefSize(400.0, 600.0);","lastModifiedDate":"2023-09-08"},{"lineNumber":91,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":92,"author":{"gitId":"yuxunn"},"content":"        scrollPane.setPrefSize(385, 535);","lastModifiedDate":"2023-09-08"},{"lineNumber":93,"author":{"gitId":"yuxunn"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);","lastModifiedDate":"2023-09-08"},{"lineNumber":94,"author":{"gitId":"yuxunn"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);","lastModifiedDate":"2023-09-08"},{"lineNumber":95,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":96,"author":{"gitId":"yuxunn"},"content":"        scrollPane.setVvalue(1.0);","lastModifiedDate":"2023-09-08"},{"lineNumber":97,"author":{"gitId":"yuxunn"},"content":"        scrollPane.setFitToWidth(true);","lastModifiedDate":"2023-09-08"},{"lineNumber":98,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":99,"author":{"gitId":"yuxunn"},"content":"        // You will need to import `javafx.scene.layout.Region` for this.","lastModifiedDate":"2023-09-08"},{"lineNumber":100,"author":{"gitId":"yuxunn"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);","lastModifiedDate":"2023-09-08"},{"lineNumber":101,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":102,"author":{"gitId":"yuxunn"},"content":"        userInput.setPrefWidth(325.0);","lastModifiedDate":"2023-09-08"},{"lineNumber":103,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":104,"author":{"gitId":"yuxunn"},"content":"        sendButton.setPrefWidth(55.0);","lastModifiedDate":"2023-09-08"},{"lineNumber":105,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":106,"author":{"gitId":"yuxunn"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);","lastModifiedDate":"2023-09-08"},{"lineNumber":107,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":108,"author":{"gitId":"yuxunn"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);","lastModifiedDate":"2023-09-08"},{"lineNumber":109,"author":{"gitId":"yuxunn"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);","lastModifiedDate":"2023-09-08"},{"lineNumber":110,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":111,"author":{"gitId":"yuxunn"},"content":"        AnchorPane.setLeftAnchor(userInput , 1.0);","lastModifiedDate":"2023-09-08"},{"lineNumber":112,"author":{"gitId":"yuxunn"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);","lastModifiedDate":"2023-09-08"},{"lineNumber":113,"author":{"gitId":"yuxunn"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {","lastModifiedDate":"2023-09-08"},{"lineNumber":114,"author":{"gitId":"yuxunn"},"content":"            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));","lastModifiedDate":"2023-09-08"},{"lineNumber":115,"author":{"gitId":"yuxunn"},"content":"            userInput.clear();","lastModifiedDate":"2023-09-08"},{"lineNumber":116,"author":{"gitId":"yuxunn"},"content":"        });","lastModifiedDate":"2023-09-08"},{"lineNumber":117,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":118,"author":{"gitId":"yuxunn"},"content":"        userInput.setOnAction((event) -\u003e {","lastModifiedDate":"2023-09-08"},{"lineNumber":119,"author":{"gitId":"yuxunn"},"content":"            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));","lastModifiedDate":"2023-09-08"},{"lineNumber":120,"author":{"gitId":"yuxunn"},"content":"            userInput.clear();","lastModifiedDate":"2023-09-08"},{"lineNumber":121,"author":{"gitId":"yuxunn"},"content":"        });","lastModifiedDate":"2023-09-08"},{"lineNumber":122,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":123,"author":{"gitId":"yuxunn"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));","lastModifiedDate":"2023-09-08"},{"lineNumber":124,"author":{"gitId":"yuxunn"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {","lastModifiedDate":"2023-09-08"},{"lineNumber":125,"author":{"gitId":"yuxunn"},"content":"            handleUserInput();","lastModifiedDate":"2023-09-08"},{"lineNumber":126,"author":{"gitId":"yuxunn"},"content":"        });","lastModifiedDate":"2023-09-08"},{"lineNumber":127,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":128,"author":{"gitId":"yuxunn"},"content":"        userInput.setOnAction((event) -\u003e {","lastModifiedDate":"2023-09-08"},{"lineNumber":129,"author":{"gitId":"yuxunn"},"content":"            handleUserInput();","lastModifiedDate":"2023-09-08"},{"lineNumber":130,"author":{"gitId":"yuxunn"},"content":"        });","lastModifiedDate":"2023-09-08"},{"lineNumber":131,"author":{"gitId":"yuxunn"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {","lastModifiedDate":"2023-09-08"},{"lineNumber":132,"author":{"gitId":"yuxunn"},"content":"            handleUserInput(); // Process user input when the Send button is clicked","lastModifiedDate":"2023-09-08"},{"lineNumber":133,"author":{"gitId":"yuxunn"},"content":"        });","lastModifiedDate":"2023-09-08"},{"lineNumber":134,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":135,"author":{"gitId":"yuxunn"},"content":"        userInput.setOnAction((event) -\u003e {","lastModifiedDate":"2023-09-08"},{"lineNumber":136,"author":{"gitId":"yuxunn"},"content":"            handleUserInput(); // Process user input when Enter is pressed","lastModifiedDate":"2023-09-08"},{"lineNumber":137,"author":{"gitId":"yuxunn"},"content":"        });","lastModifiedDate":"2023-09-08"},{"lineNumber":138,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":139,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":140,"author":{"gitId":"yuxunn"},"content":"     * The run method starts Duke\u0027s interaction with user.","lastModifiedDate":"2023-09-02"},{"lineNumber":141,"author":{"gitId":"yuxunn"},"content":"     * run() serves as an entry point for duke\u0027s interaction.","lastModifiedDate":"2023-09-02"},{"lineNumber":142,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":143,"author":{"gitId":"yuxunn"},"content":"    public void run() {","lastModifiedDate":"2023-08-31"},{"lineNumber":144,"author":{"gitId":"yuxunn"},"content":"        ui.showWelcome();","lastModifiedDate":"2023-08-31"},{"lineNumber":145,"author":{"gitId":"yuxunn"},"content":"        boolean exit \u003d false;","lastModifiedDate":"2023-08-31"},{"lineNumber":146,"author":{"gitId":"yuxunn"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-31"},{"lineNumber":147,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":148,"author":{"gitId":"yuxunn"},"content":"        while (!exit) {","lastModifiedDate":"2023-09-08"},{"lineNumber":149,"author":{"gitId":"yuxunn"},"content":"            String input \u003d scanner.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":150,"author":{"gitId":"yuxunn"},"content":"            if (input.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2023-09-08"},{"lineNumber":151,"author":{"gitId":"yuxunn"},"content":"                exit \u003d true;","lastModifiedDate":"2023-09-08"},{"lineNumber":152,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":153,"author":{"gitId":"yuxunn"},"content":"            String response \u003d inputType(input, taskList, storage);","lastModifiedDate":"2023-09-08"},{"lineNumber":154,"author":{"gitId":"yuxunn"},"content":"            if (!response.isEmpty()) {","lastModifiedDate":"2023-09-08"},{"lineNumber":155,"author":{"gitId":"yuxunn"},"content":"                System.out.println(response);","lastModifiedDate":"2023-09-08"},{"lineNumber":156,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-09-08"},{"lineNumber":157,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":158,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":159,"author":{"gitId":"yuxunn"},"content":"        // Save data before exiting","lastModifiedDate":"2023-09-08"},{"lineNumber":160,"author":{"gitId":"yuxunn"},"content":"        Storage.save(\"./data/duke.txt\", TaskList.actions, TaskList.type, TaskList.isDone, TaskList.dueString, TaskList.startTime, TaskList.endTime, TaskList.counter);","lastModifiedDate":"2023-08-31"},{"lineNumber":161,"author":{"gitId":"yuxunn"},"content":"        scanner.close();","lastModifiedDate":"2023-09-08"},{"lineNumber":162,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":163,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":164,"author":{"gitId":"yuxunn"},"content":"    private Label getDialogLabel(String text) {","lastModifiedDate":"2023-09-08"},{"lineNumber":165,"author":{"gitId":"yuxunn"},"content":"        Label textToAdd \u003d new Label(text);","lastModifiedDate":"2023-09-08"},{"lineNumber":166,"author":{"gitId":"yuxunn"},"content":"        textToAdd.setWrapText(true);","lastModifiedDate":"2023-09-08"},{"lineNumber":167,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":168,"author":{"gitId":"yuxunn"},"content":"        return textToAdd;","lastModifiedDate":"2023-09-08"},{"lineNumber":169,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":170,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":171,"author":{"gitId":"yuxunn"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-08"},{"lineNumber":172,"author":{"gitId":"yuxunn"},"content":"        String userText \u003d userInput.getText();","lastModifiedDate":"2023-09-08"},{"lineNumber":173,"author":{"gitId":"yuxunn"},"content":"        String dukeResponse \u003d String.valueOf(inputType(userText, taskList, storage));","lastModifiedDate":"2023-09-08"},{"lineNumber":174,"author":{"gitId":"yuxunn"},"content":"        dialogContainer.getChildren().add(DialogBox.getUserDialog(userText, user));","lastModifiedDate":"2023-09-08"},{"lineNumber":175,"author":{"gitId":"yuxunn"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(dukeResponse, duke));","lastModifiedDate":"2023-09-08"},{"lineNumber":176,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":177,"author":{"gitId":"yuxunn"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-08"},{"lineNumber":178,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":179,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":180,"author":{"gitId":"yuxunn"},"content":"    String getResponse(String input) {","lastModifiedDate":"2023-09-08"},{"lineNumber":181,"author":{"gitId":"yuxunn"},"content":"        return \"Duke heard: \" + input;","lastModifiedDate":"2023-09-08"},{"lineNumber":182,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":183,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":184,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":185,"author":{"gitId":"yuxunn"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-31"},{"lineNumber":186,"author":{"gitId":"yuxunn"},"content":"        new Duke().run();","lastModifiedDate":"2023-09-08"},{"lineNumber":187,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":188,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":189,"author":{"gitId":"yuxunn"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"yuxunn":188,"-":1}},{"path":"src/main/java/duke/DukeLauncher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"package duke;","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"yuxunn"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"yuxunn"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.control.TextArea;","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"yuxunn"},"content":"public class DukeLauncher {","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"yuxunn"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"yuxunn"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"yuxunn"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"yuxunn":18}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"package duke;","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"yuxunn"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"yuxunn"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"yuxunn"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"yuxunn"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"yuxunn"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"yuxunn"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"yuxunn"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"yuxunn"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"yuxunn"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"yuxunn"},"content":"    @Override","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"yuxunn"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"yuxunn"},"content":"        try {","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"yuxunn"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"yuxunn"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"yuxunn"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"yuxunn"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"yuxunn"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"yuxunn"},"content":"            stage.show();","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"yuxunn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"yuxunn"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"yuxunn"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"yuxunn":31}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"package duke;","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"yuxunn"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"yuxunn"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"yuxunn"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"yuxunn"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"yuxunn"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"yuxunn"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"yuxunn"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"yuxunn"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"yuxunn"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"yuxunn"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"yuxunn"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"yuxunn"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"yuxunn"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"yuxunn"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"yuxunn"},"content":"    private Duke duke;","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"yuxunn"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"yuxunn"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"yuxunn"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"yuxunn"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"yuxunn"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"yuxunn"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"yuxunn"},"content":"        duke \u003d d;","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"yuxunn"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"yuxunn"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"yuxunn"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"yuxunn"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"yuxunn"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"yuxunn"},"content":"        String response \u003d String.valueOf(Parser.inputType(input, duke.taskList, duke.storage));","lastModifiedDate":"2023-09-08"},{"lineNumber":45,"author":{"gitId":"yuxunn"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-08"},{"lineNumber":46,"author":{"gitId":"yuxunn"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"yuxunn"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"yuxunn"},"content":"        );","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"yuxunn"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":51,"author":{"gitId":"yuxunn"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"yuxunn":51}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yuxunn"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"yuxunn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"yuxunn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"yuxunn"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"yuxunn"},"content":" * Parser class parses user input and executes corresponding commands.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"yuxunn"},"content":" * Handles adding, list and marking tasks","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"yuxunn"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"yuxunn"},"content":"public class Parser {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"yuxunn"},"content":"    static boolean result \u003d false;","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"yuxunn"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"yuxunn"},"content":"     * Process user\u0027s input and performs the corresponding action.","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"yuxunn"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"yuxunn"},"content":"     * @param input User\u0027s input string.","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"yuxunn"},"content":"     * @param taskList task list to be updated","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"yuxunn"},"content":"     * @param storage stores the object for it to be saved.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"yuxunn"},"content":"     * @return  true if program exits, false if still persist.","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"yuxunn"},"content":"    public static String inputType(String input, TaskList taskList, Storage storage) {","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"yuxunn"},"content":"        assert input !\u003d null : \"Input cannot be null\";","lastModifiedDate":"2023-09-14"},{"lineNumber":25,"author":{"gitId":"yuxunn"},"content":"         Parser.result \u003d false;","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"yuxunn"},"content":"        String response \u003d \"\";","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"yuxunn"},"content":"        if (input.startsWith(\"bye\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"yuxunn"},"content":"            response \u003d\"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"yuxunn"},"content":"            Parser.result\u003d true;","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"yuxunn"},"content":"            return response;","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"yuxunn"},"content":"        } else if (input.startsWith(\"delete\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"yuxunn"},"content":"            int num3 \u003d Integer.parseInt(input.substring(7).trim());","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"yuxunn"},"content":"            assert num3 \u003e\u003d 1 \u0026\u0026 num3 \u003c\u003d TaskList.counter : \"Invalid task number for deletion\";","lastModifiedDate":"2023-09-14"},{"lineNumber":34,"author":{"gitId":"yuxunn"},"content":"            String action2 \u003d TaskList.helper(TaskList.actions[num3 - 1], TaskList.type[num3 - 1], TaskList.isDone[num3 - 1]);","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"yuxunn"},"content":"            for (int j \u003d num3 - 1; j \u003c TaskList.counter - 1; j++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"yuxunn"},"content":"                TaskList.actions[j] \u003d TaskList.actions[j + 1];","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"yuxunn"},"content":"                TaskList.type[j] \u003d TaskList.type[j + 1];","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"yuxunn"},"content":"                TaskList.isDone[j] \u003d TaskList.isDone[j + 1];","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"yuxunn"},"content":"            TaskList.counter \u003d TaskList.counter - 1;","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"yuxunn"},"content":"            response \u003d \"Noted. I\u0027ve removed this task:\\n\" + action2+ \"\\n Now you have\" + TaskList.counter + \" tasks in the list. \";","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"yuxunn"},"content":"            Storage.save(\"data/duke.txt\", TaskList.actions, TaskList.type, TaskList.isDone, TaskList.dueString, TaskList.startTime, TaskList.endTime, TaskList.counter);","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"yuxunn"},"content":"            Parser.result \u003d false;","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"yuxunn"},"content":"           return response;","lastModifiedDate":"2023-09-08"},{"lineNumber":45,"author":{"gitId":"yuxunn"},"content":"        } else if (input.startsWith(\"list\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"yuxunn"},"content":"               response \u003d TaskList.list(taskList);","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"yuxunn"},"content":"                Parser.result \u003d false;","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"yuxunn"},"content":"            return response;","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"yuxunn"},"content":"        }else if (input.startsWith(\"todo\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"yuxunn"},"content":"            assert input.length() \u003e 4 : \"Description of a todo cannot be empty.\";","lastModifiedDate":"2023-09-14"},{"lineNumber":51,"author":{"gitId":"yuxunn"},"content":"            if (input.length() \u003c\u003d 4) {","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"yuxunn"},"content":"                response \u003d \"☹ OOPS!!! The description of a todo cannot be empty.\";","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"yuxunn"},"content":"            } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"yuxunn"},"content":"                String action \u003d input.substring(5).trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"yuxunn"},"content":"                return TaskList.todo(action);","lastModifiedDate":"2023-09-08"},{"lineNumber":56,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"yuxunn"},"content":"        } else if (input.startsWith(\"deadline\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"yuxunn"},"content":"            String action \u003d input.substring(9, input.indexOf(\"/by\")).trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"yuxunn"},"content":"            String by \u003d input.substring(input.indexOf(\"/by\") + 4).trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"yuxunn"},"content":"            LocalDateTime timeDeadline \u003d dateTask(by);","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"yuxunn"},"content":"            return TaskList.deadline(action, by, timeDeadline);","lastModifiedDate":"2023-09-08"},{"lineNumber":62,"author":{"gitId":"yuxunn"},"content":"        } else if (input.startsWith(\"event\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"yuxunn"},"content":"            String action \u003d input.substring(6, input.indexOf(\"/from\")).trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"yuxunn"},"content":"            String from \u003d input.substring(input.indexOf(\"/from\") + 6, input.indexOf(\"/to\")).trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"yuxunn"},"content":"            String to \u003d input.substring(input.indexOf(\"/to\") + 4).trim();","lastModifiedDate":"2023-09-14"},{"lineNumber":66,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":67,"author":{"gitId":"yuxunn"},"content":"            return TaskList.event(action, from, to);","lastModifiedDate":"2023-09-08"},{"lineNumber":68,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":69,"author":{"gitId":"yuxunn"},"content":"        } else if (input.startsWith(\"mark\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"yuxunn"},"content":"            int num \u003d Integer.parseInt(input.substring(5).trim());","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"yuxunn"},"content":"            if (num - 1 \u003c TaskList.counter) {","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"yuxunn"},"content":"                TaskList.isDone[num - 1] \u003d true;","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"yuxunn"},"content":"                response \u003d \"ok, i marked this as done.\";","lastModifiedDate":"2023-09-08"},{"lineNumber":74,"author":{"gitId":"yuxunn"},"content":"                Parser.result \u003d false;","lastModifiedDate":"2023-09-08"},{"lineNumber":75,"author":{"gitId":"yuxunn"},"content":"               return response;","lastModifiedDate":"2023-09-08"},{"lineNumber":76,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"yuxunn"},"content":"        } else if (input.startsWith(\"unmark\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"yuxunn"},"content":"            int num2 \u003d Integer.parseInt(input.substring(7).trim());","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"yuxunn"},"content":"            if (num2 - 1 \u003c TaskList.counter) {","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"yuxunn"},"content":"                TaskList.isDone[num2 - 1] \u003d false;","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"yuxunn"},"content":"               response\u003d \"OK, I\u0027ve marked this task as not done yet:\"+ \"  \" + TaskList.helper(TaskList.actions[num2 - 1], TaskList.type[num2 - 1], TaskList.isDone[num2 - 1]);","lastModifiedDate":"2023-09-08"},{"lineNumber":82,"author":{"gitId":"yuxunn"},"content":"                Parser.result \u003d false;","lastModifiedDate":"2023-09-08"},{"lineNumber":83,"author":{"gitId":"yuxunn"},"content":"                return response;","lastModifiedDate":"2023-09-08"},{"lineNumber":84,"author":{"gitId":"yuxunn"},"content":"            } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"yuxunn"},"content":"                System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"yuxunn"},"content":"        } else if (input.startsWith(\"find\")) {","lastModifiedDate":"2023-09-02"},{"lineNumber":88,"author":{"gitId":"yuxunn"},"content":"                return find(input, taskList);","lastModifiedDate":"2023-09-08"},{"lineNumber":89,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"yuxunn"},"content":"      return \"error\";","lastModifiedDate":"2023-09-08"},{"lineNumber":91,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":94,"author":{"gitId":"yuxunn"},"content":"     * Parse date and time and convert into LocalDateTime for storing.","lastModifiedDate":"2023-09-02"},{"lineNumber":95,"author":{"gitId":"yuxunn"},"content":"     * @param dateTimeStr String to be formatted to LocalDateTime.","lastModifiedDate":"2023-09-02"},{"lineNumber":96,"author":{"gitId":"yuxunn"},"content":"     * @return LocalDateTime of the parsed date and time.","lastModifiedDate":"2023-09-02"},{"lineNumber":97,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":98,"author":{"gitId":"yuxunn"},"content":"    private static LocalDateTime dateTask(String dateTimeStr) {","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"yuxunn"},"content":"        DateTimeFormatter DMYhelper \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"yuxunn"},"content":"        return LocalDateTime.parse(dateTimeStr, DMYhelper);","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"yuxunn"},"content":"    public static String find(String input, TaskList taskList) {","lastModifiedDate":"2023-09-08"},{"lineNumber":103,"author":{"gitId":"yuxunn"},"content":"        assert input !\u003d null : \"Input cannot be null\";","lastModifiedDate":"2023-09-14"},{"lineNumber":104,"author":{"gitId":"yuxunn"},"content":"        String keyword \u003d input.substring(5).trim();","lastModifiedDate":"2023-09-02"},{"lineNumber":105,"author":{"gitId":"yuxunn"},"content":"        StringBuilder response \u003d new StringBuilder();","lastModifiedDate":"2023-09-08"},{"lineNumber":106,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":107,"author":{"gitId":"yuxunn"},"content":"        ArrayList\u003cString\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-02"},{"lineNumber":108,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":109,"author":{"gitId":"yuxunn"},"content":"        for (int i \u003d 0; i \u003c taskList.counter; i++) {","lastModifiedDate":"2023-09-02"},{"lineNumber":110,"author":{"gitId":"yuxunn"},"content":"            if (taskList.actions[i].contains(keyword)) {","lastModifiedDate":"2023-09-02"},{"lineNumber":111,"author":{"gitId":"yuxunn"},"content":"                matchingTasks.add(taskList.helper(taskList.actions[i], taskList.type[i], taskList.isDone[i]));","lastModifiedDate":"2023-09-02"},{"lineNumber":112,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":113,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":114,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":115,"author":{"gitId":"yuxunn"},"content":"        if (matchingTasks.isEmpty()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":116,"author":{"gitId":"yuxunn"},"content":"            response.append(\"No matching tasks found.\");","lastModifiedDate":"2023-09-08"},{"lineNumber":117,"author":{"gitId":"yuxunn"},"content":"        } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":118,"author":{"gitId":"yuxunn"},"content":"            response.append(\"Here are the matching tasks in your list:\\n\");","lastModifiedDate":"2023-09-08"},{"lineNumber":119,"author":{"gitId":"yuxunn"},"content":"            for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {","lastModifiedDate":"2023-09-02"},{"lineNumber":120,"author":{"gitId":"yuxunn"},"content":"                response.append((i + 1) + \".\" + matchingTasks.get(i));","lastModifiedDate":"2023-09-08"},{"lineNumber":121,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":122,"author":{"gitId":"yuxunn"},"content":"                // Append a newline character after each task except the last one","lastModifiedDate":"2023-09-08"},{"lineNumber":123,"author":{"gitId":"yuxunn"},"content":"                if (i \u003c matchingTasks.size() - 1) {","lastModifiedDate":"2023-09-08"},{"lineNumber":124,"author":{"gitId":"yuxunn"},"content":"                    response.append(\"\\n\");","lastModifiedDate":"2023-09-08"},{"lineNumber":125,"author":{"gitId":"yuxunn"},"content":"                }","lastModifiedDate":"2023-09-08"},{"lineNumber":126,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":127,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":128,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":129,"author":{"gitId":"yuxunn"},"content":"        return response.toString();","lastModifiedDate":"2023-09-08"},{"lineNumber":130,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":131,"author":{"gitId":"yuxunn"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"yuxunn":131}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yuxunn"},"content":"import java.io.*;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"yuxunn"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"yuxunn"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"yuxunn"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"yuxunn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"yuxunn"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"yuxunn"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"yuxunn"},"content":" * The storage class handles saving and loading data.","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"yuxunn"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"yuxunn"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"yuxunn"},"content":"public class Storage {","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"yuxunn"},"content":"    private String fileDir;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"yuxunn"},"content":"    public Storage(String fileDir) {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"yuxunn"},"content":"        this.fileDir \u003d fileDir;","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"yuxunn"},"content":"     * Saves the task data to a file for future retrival.","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"yuxunn"},"content":"     * @param fileName name of file to save data.","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"yuxunn"},"content":"     * @param actions Array of actions.","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"yuxunn"},"content":"     * @param type Array of type of the action.","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"yuxunn"},"content":"     * @param isDone Array of boolean indicating whether an action is done.","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"yuxunn"},"content":"     * @param dueStrings Array of String indicating when action is due.","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"yuxunn"},"content":"     * @param startTimes Array indicating starting time of activity.","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"yuxunn"},"content":"     * @param endTimes Array indicating ending time of activity.","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"yuxunn"},"content":"     * @param counter The number of tasks in list.","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"yuxunn"},"content":"    public static void save(String fileName, String[] actions, String[] type, boolean[] isDone, String[] dueStrings, LocalDateTime[] startTimes, LocalDateTime[] endTimes, int counter) {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"yuxunn"},"content":"        assert counter \u003e\u003d 0 : \"Counter should not be negative\";","lastModifiedDate":"2023-09-14"},{"lineNumber":35,"author":{"gitId":"yuxunn"},"content":"        try (FileWriter writer \u003d new FileWriter(fileName)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"yuxunn"},"content":"            writer.write(counter + \"\\n\");","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"yuxunn"},"content":"            for (int i \u003d 0; i \u003c counter; i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"yuxunn"},"content":"                int isDoneNum \u003d isDone[i] ? 1 : 0;","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"yuxunn"},"content":"                writer.write(type[i] + \" | \" + isDoneNum + \" | \" + actions[i]);","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"yuxunn"},"content":"                if (type[i].equals(\"D\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"yuxunn"},"content":"                    assert dueStrings[i] !\u003d null : \"Due string should not be null\";","lastModifiedDate":"2023-09-14"},{"lineNumber":43,"author":{"gitId":"yuxunn"},"content":"                    writer.write(\" | \" + dueStrings[i]);","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"yuxunn"},"content":"                } else if (type[i].equals(\"E\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"yuxunn"},"content":"                    assert startTimes[i] !\u003d null : \"Start time should not be null\";","lastModifiedDate":"2023-09-14"},{"lineNumber":46,"author":{"gitId":"yuxunn"},"content":"                    assert endTimes[i] !\u003d null : \"End time should not be null\";","lastModifiedDate":"2023-09-14"},{"lineNumber":47,"author":{"gitId":"yuxunn"},"content":"                    writer.write(\" | \" + startTimes[i].format(DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\"))","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"yuxunn"},"content":"                            + \" | \" + endTimes[i].format(DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\")));","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"yuxunn"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"yuxunn"},"content":"                writer.write(\"\\n\");","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"yuxunn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"yuxunn"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"yuxunn"},"content":"     * Loads the data retrived from the saved file.","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"yuxunn"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"yuxunn"},"content":"     * @param fileName File\u0027s name to save the data.","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"yuxunn"},"content":"     * @param actions Array to show name of action.","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"yuxunn"},"content":"     * @param type Array of the type of action.","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"yuxunn"},"content":"     * @param isDone Array of boolean indicating whether action is done.","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"yuxunn"},"content":"     * @return number of tasks saved in tasklist.","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"yuxunn"},"content":"    public static int load(String fileName, String[] actions, String[] type, boolean[] isDone, String[] dueStrings, LocalDateTime[] startTimes, LocalDateTime[] endTimes) {","lastModifiedDate":"2023-09-08"},{"lineNumber":68,"author":{"gitId":"yuxunn"},"content":"        int count \u003d 0;","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"yuxunn"},"content":"        try (FileReader fileReader \u003d new FileReader(fileName)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"yuxunn"},"content":"            Scanner scanner \u003d new Scanner(fileReader);","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"yuxunn"},"content":"            Arrays.fill(actions, null);","lastModifiedDate":"2023-09-14"},{"lineNumber":72,"author":{"gitId":"yuxunn"},"content":"            Arrays.fill(type, null);","lastModifiedDate":"2023-09-14"},{"lineNumber":73,"author":{"gitId":"yuxunn"},"content":"            Arrays.fill(isDone, false);","lastModifiedDate":"2023-09-14"},{"lineNumber":74,"author":{"gitId":"yuxunn"},"content":"            Arrays.fill(dueStrings, null); // Clear dueStrings array","lastModifiedDate":"2023-09-14"},{"lineNumber":75,"author":{"gitId":"yuxunn"},"content":"            Arrays.fill(startTimes, null); // Clear startTimes array","lastModifiedDate":"2023-09-14"},{"lineNumber":76,"author":{"gitId":"yuxunn"},"content":"            Arrays.fill(endTimes, null);   // Clear endTimes array","lastModifiedDate":"2023-09-14"},{"lineNumber":77,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":78,"author":{"gitId":"yuxunn"},"content":"            while (scanner.hasNextLine() \u0026\u0026 count \u003c actions.length) {","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"yuxunn"},"content":"                String line \u003d scanner.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"yuxunn"},"content":"                String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":82,"author":{"gitId":"yuxunn"},"content":"                if (parts.length \u003e\u003d 3) {","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"yuxunn"},"content":"                    type[count] \u003d parts[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"yuxunn"},"content":"                    isDone[count] \u003d parts[1].equals(\"1\");","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"yuxunn"},"content":"                    actions[count] \u003d parts[2];","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":87,"author":{"gitId":"yuxunn"},"content":"                    if (type[count].equals(\"D\")) {","lastModifiedDate":"2023-09-08"},{"lineNumber":88,"author":{"gitId":"yuxunn"},"content":"                        if (parts.length \u003e\u003d 4) {","lastModifiedDate":"2023-09-14"},{"lineNumber":89,"author":{"gitId":"yuxunn"},"content":"                            dueStrings[count] \u003d parts[3];","lastModifiedDate":"2023-09-08"},{"lineNumber":90,"author":{"gitId":"yuxunn"},"content":"                        } else {","lastModifiedDate":"2023-09-14"},{"lineNumber":91,"author":{"gitId":"yuxunn"},"content":"                            dueStrings[count] \u003d \"\"; // Set a default value","lastModifiedDate":"2023-09-14"},{"lineNumber":92,"author":{"gitId":"yuxunn"},"content":"                        }","lastModifiedDate":"2023-09-14"},{"lineNumber":93,"author":{"gitId":"yuxunn"},"content":"                    } if (type[count].equals(\"E\")) {","lastModifiedDate":"2023-09-14"},{"lineNumber":94,"author":{"gitId":"yuxunn"},"content":"                        if (parts.length \u003e\u003d 6) {","lastModifiedDate":"2023-09-14"},{"lineNumber":95,"author":{"gitId":"yuxunn"},"content":"                            String startTimeStr \u003d parts[4];","lastModifiedDate":"2023-09-14"},{"lineNumber":96,"author":{"gitId":"yuxunn"},"content":"                            String endTimeStr \u003d parts[5];","lastModifiedDate":"2023-09-14"},{"lineNumber":97,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":98,"author":{"gitId":"yuxunn"},"content":"                            LocalDateTime startTimeValue \u003d tryParseDateTime(startTimeStr, \"d/M/yyyy HHmm\");","lastModifiedDate":"2023-09-14"},{"lineNumber":99,"author":{"gitId":"yuxunn"},"content":"                            LocalDateTime endTimeValue \u003d tryParseDateTime(endTimeStr, \"d/M/yyyy HHmm\");","lastModifiedDate":"2023-09-14"},{"lineNumber":100,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":101,"author":{"gitId":"yuxunn"},"content":"                            if (startTimeValue !\u003d null \u0026\u0026 endTimeValue !\u003d null) {","lastModifiedDate":"2023-09-14"},{"lineNumber":102,"author":{"gitId":"yuxunn"},"content":"                                startTimes[count] \u003d startTimeValue;","lastModifiedDate":"2023-09-14"},{"lineNumber":103,"author":{"gitId":"yuxunn"},"content":"                                endTimes[count] \u003d endTimeValue;","lastModifiedDate":"2023-09-14"},{"lineNumber":104,"author":{"gitId":"yuxunn"},"content":"                            } else {","lastModifiedDate":"2023-09-14"},{"lineNumber":105,"author":{"gitId":"yuxunn"},"content":"                                // Handle parsing error, e.g., log a warning or set default values","lastModifiedDate":"2023-09-14"},{"lineNumber":106,"author":{"gitId":"yuxunn"},"content":"                            }","lastModifiedDate":"2023-09-14"},{"lineNumber":107,"author":{"gitId":"yuxunn"},"content":"                        } else {","lastModifiedDate":"2023-09-14"},{"lineNumber":108,"author":{"gitId":"yuxunn"},"content":"                            // Set startTimes and endTimes to appropriate default values or null","lastModifiedDate":"2023-09-14"},{"lineNumber":109,"author":{"gitId":"yuxunn"},"content":"                            startTimes[count] \u003d null;","lastModifiedDate":"2023-09-14"},{"lineNumber":110,"author":{"gitId":"yuxunn"},"content":"                            endTimes[count] \u003d null;","lastModifiedDate":"2023-09-14"},{"lineNumber":111,"author":{"gitId":"yuxunn"},"content":"                        }","lastModifiedDate":"2023-09-08"},{"lineNumber":112,"author":{"gitId":"yuxunn"},"content":"                    }","lastModifiedDate":"2023-09-08"},{"lineNumber":113,"author":{"gitId":"yuxunn"},"content":"                    count++;","lastModifiedDate":"2023-08-31"},{"lineNumber":114,"author":{"gitId":"yuxunn"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":115,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":116,"author":{"gitId":"yuxunn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":117,"author":{"gitId":"yuxunn"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":118,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":119,"author":{"gitId":"yuxunn"},"content":"        return count;","lastModifiedDate":"2023-08-31"},{"lineNumber":120,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":121,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":122,"author":{"gitId":"yuxunn"},"content":"    private static LocalDateTime tryParseDateTime(String dateTimeStr, String pattern) {","lastModifiedDate":"2023-09-14"},{"lineNumber":123,"author":{"gitId":"yuxunn"},"content":"        try {","lastModifiedDate":"2023-09-14"},{"lineNumber":124,"author":{"gitId":"yuxunn"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(pattern);","lastModifiedDate":"2023-09-14"},{"lineNumber":125,"author":{"gitId":"yuxunn"},"content":"            return LocalDateTime.parse(dateTimeStr, formatter);","lastModifiedDate":"2023-09-14"},{"lineNumber":126,"author":{"gitId":"yuxunn"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-14"},{"lineNumber":127,"author":{"gitId":"yuxunn"},"content":"            // Handle parsing error, e.g., log a warning or return null","lastModifiedDate":"2023-09-14"},{"lineNumber":128,"author":{"gitId":"yuxunn"},"content":"            return null;","lastModifiedDate":"2023-09-14"},{"lineNumber":129,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":130,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":131,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":132,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":133,"author":{"gitId":"yuxunn"},"content":"     * Loads an array whether the activity is done.","lastModifiedDate":"2023-09-02"},{"lineNumber":134,"author":{"gitId":"yuxunn"},"content":"     * @return Array of whether the task is done.","lastModifiedDate":"2023-09-02"},{"lineNumber":135,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":136,"author":{"gitId":"yuxunn"},"content":"    public boolean[] loadIsDone() {","lastModifiedDate":"2023-08-31"},{"lineNumber":137,"author":{"gitId":"yuxunn"},"content":"        boolean[] isDone \u003d new boolean[100];","lastModifiedDate":"2023-08-31"},{"lineNumber":138,"author":{"gitId":"yuxunn"},"content":"        try (FileReader fileReader \u003d new FileReader(fileDir)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":139,"author":{"gitId":"yuxunn"},"content":"            Scanner scanner \u003d new Scanner(fileReader);","lastModifiedDate":"2023-08-31"},{"lineNumber":140,"author":{"gitId":"yuxunn"},"content":"            int count \u003d 0;","lastModifiedDate":"2023-08-31"},{"lineNumber":141,"author":{"gitId":"yuxunn"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":142,"author":{"gitId":"yuxunn"},"content":"                if (isDone.length \u003e count) {","lastModifiedDate":"2023-08-31"},{"lineNumber":143,"author":{"gitId":"yuxunn"},"content":"                    String line \u003d scanner.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":144,"author":{"gitId":"yuxunn"},"content":"                    String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-08-31"},{"lineNumber":145,"author":{"gitId":"yuxunn"},"content":"                    if (parts.length \u003e\u003d 3) {","lastModifiedDate":"2023-08-31"},{"lineNumber":146,"author":{"gitId":"yuxunn"},"content":"                        isDone[count] \u003d parts[1].equals(\"1\");","lastModifiedDate":"2023-08-31"},{"lineNumber":147,"author":{"gitId":"yuxunn"},"content":"                        count++;","lastModifiedDate":"2023-08-31"},{"lineNumber":148,"author":{"gitId":"yuxunn"},"content":"                    }","lastModifiedDate":"2023-08-31"},{"lineNumber":149,"author":{"gitId":"yuxunn"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":150,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":151,"author":{"gitId":"yuxunn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":152,"author":{"gitId":"yuxunn"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-08-31"},{"lineNumber":153,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":154,"author":{"gitId":"yuxunn"},"content":"        return isDone;","lastModifiedDate":"2023-08-31"},{"lineNumber":155,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":156,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":157,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":158,"author":{"gitId":"yuxunn"},"content":"     * An array of type of activity.","lastModifiedDate":"2023-09-02"},{"lineNumber":159,"author":{"gitId":"yuxunn"},"content":"     * @return Array of activity\u0027s type.","lastModifiedDate":"2023-09-02"},{"lineNumber":160,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":161,"author":{"gitId":"yuxunn"},"content":"    public String[] loadTypes() {","lastModifiedDate":"2023-08-31"},{"lineNumber":162,"author":{"gitId":"yuxunn"},"content":"        String[] type \u003d new String[100];","lastModifiedDate":"2023-08-31"},{"lineNumber":163,"author":{"gitId":"yuxunn"},"content":"        int count \u003d 0;","lastModifiedDate":"2023-08-31"},{"lineNumber":164,"author":{"gitId":"yuxunn"},"content":"        try (FileReader fileReader \u003d new FileReader(fileDir)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":165,"author":{"gitId":"yuxunn"},"content":"            Scanner scanner \u003d new Scanner(fileReader);","lastModifiedDate":"2023-08-31"},{"lineNumber":166,"author":{"gitId":"yuxunn"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":167,"author":{"gitId":"yuxunn"},"content":"                if (type.length \u003e count) {","lastModifiedDate":"2023-08-31"},{"lineNumber":168,"author":{"gitId":"yuxunn"},"content":"                    count \u003d 0;","lastModifiedDate":"2023-08-31"},{"lineNumber":169,"author":{"gitId":"yuxunn"},"content":"                    String line \u003d scanner.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":170,"author":{"gitId":"yuxunn"},"content":"                    String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-08-31"},{"lineNumber":171,"author":{"gitId":"yuxunn"},"content":"                    if (parts.length \u003e\u003d 3) {","lastModifiedDate":"2023-08-31"},{"lineNumber":172,"author":{"gitId":"yuxunn"},"content":"                        type[count] \u003d parts[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":173,"author":{"gitId":"yuxunn"},"content":"                    }","lastModifiedDate":"2023-08-31"},{"lineNumber":174,"author":{"gitId":"yuxunn"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":175,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":176,"author":{"gitId":"yuxunn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":177,"author":{"gitId":"yuxunn"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-08-31"},{"lineNumber":178,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":179,"author":{"gitId":"yuxunn"},"content":"        return type;","lastModifiedDate":"2023-08-31"},{"lineNumber":180,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":181,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":182,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":183,"author":{"gitId":"yuxunn"},"content":"     * Loads the array of action.","lastModifiedDate":"2023-09-02"},{"lineNumber":184,"author":{"gitId":"yuxunn"},"content":"     * @return An array of actions.","lastModifiedDate":"2023-09-02"},{"lineNumber":185,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":186,"author":{"gitId":"yuxunn"},"content":"    public String[] loadActions() {","lastModifiedDate":"2023-08-31"},{"lineNumber":187,"author":{"gitId":"yuxunn"},"content":"        String[] actions \u003d new String[100];","lastModifiedDate":"2023-08-31"},{"lineNumber":188,"author":{"gitId":"yuxunn"},"content":"        int count \u003d 0;","lastModifiedDate":"2023-08-31"},{"lineNumber":189,"author":{"gitId":"yuxunn"},"content":"        try (FileReader fileReader \u003d new FileReader(fileDir)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":190,"author":{"gitId":"yuxunn"},"content":"            Scanner scanner \u003d new Scanner(fileReader);","lastModifiedDate":"2023-08-31"},{"lineNumber":191,"author":{"gitId":"yuxunn"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":192,"author":{"gitId":"yuxunn"},"content":"                if (actions.length \u003e count) {","lastModifiedDate":"2023-08-31"},{"lineNumber":193,"author":{"gitId":"yuxunn"},"content":"                    count \u003d 0;","lastModifiedDate":"2023-08-31"},{"lineNumber":194,"author":{"gitId":"yuxunn"},"content":"                    String line \u003d scanner.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":195,"author":{"gitId":"yuxunn"},"content":"                    String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-08-31"},{"lineNumber":196,"author":{"gitId":"yuxunn"},"content":"                    if (parts.length \u003e\u003d 3) {","lastModifiedDate":"2023-08-31"},{"lineNumber":197,"author":{"gitId":"yuxunn"},"content":"                        actions[count] \u003d parts[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":198,"author":{"gitId":"yuxunn"},"content":"                    }","lastModifiedDate":"2023-08-31"},{"lineNumber":199,"author":{"gitId":"yuxunn"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":200,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":201,"author":{"gitId":"yuxunn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":202,"author":{"gitId":"yuxunn"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-08-31"},{"lineNumber":203,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":204,"author":{"gitId":"yuxunn"},"content":"        return actions;","lastModifiedDate":"2023-08-31"},{"lineNumber":205,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":206,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":207,"author":{"gitId":"yuxunn"},"content":"    public String[] loadDueStrings() {","lastModifiedDate":"2023-09-08"},{"lineNumber":208,"author":{"gitId":"yuxunn"},"content":"        String[] dueStrings \u003d new String[100];","lastModifiedDate":"2023-09-08"},{"lineNumber":209,"author":{"gitId":"yuxunn"},"content":"        int count \u003d 0;","lastModifiedDate":"2023-09-08"},{"lineNumber":210,"author":{"gitId":"yuxunn"},"content":"        try (FileReader fileReader \u003d new FileReader(fileDir)) {","lastModifiedDate":"2023-09-08"},{"lineNumber":211,"author":{"gitId":"yuxunn"},"content":"            Scanner scanner \u003d new Scanner(fileReader);","lastModifiedDate":"2023-09-08"},{"lineNumber":212,"author":{"gitId":"yuxunn"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-09-08"},{"lineNumber":213,"author":{"gitId":"yuxunn"},"content":"                if (dueStrings.length \u003e count) {","lastModifiedDate":"2023-09-08"},{"lineNumber":214,"author":{"gitId":"yuxunn"},"content":"                    String line \u003d scanner.nextLine();","lastModifiedDate":"2023-09-08"},{"lineNumber":215,"author":{"gitId":"yuxunn"},"content":"                    String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-09-08"},{"lineNumber":216,"author":{"gitId":"yuxunn"},"content":"                    if (parts[0].equals(\"D\")) {","lastModifiedDate":"2023-09-08"},{"lineNumber":217,"author":{"gitId":"yuxunn"},"content":"                        dueStrings[count] \u003d parts[3]; // Assuming due string is at index 4","lastModifiedDate":"2023-09-08"},{"lineNumber":218,"author":{"gitId":"yuxunn"},"content":"                        count++;","lastModifiedDate":"2023-09-08"},{"lineNumber":219,"author":{"gitId":"yuxunn"},"content":"                    }","lastModifiedDate":"2023-09-08"},{"lineNumber":220,"author":{"gitId":"yuxunn"},"content":"                }","lastModifiedDate":"2023-09-08"},{"lineNumber":221,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-09-08"},{"lineNumber":222,"author":{"gitId":"yuxunn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-08"},{"lineNumber":223,"author":{"gitId":"yuxunn"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-09-08"},{"lineNumber":224,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":225,"author":{"gitId":"yuxunn"},"content":"        return dueStrings;","lastModifiedDate":"2023-09-08"},{"lineNumber":226,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":227,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":228,"author":{"gitId":"yuxunn"},"content":"    public LocalDateTime[] loadStartTimes() {","lastModifiedDate":"2023-09-08"},{"lineNumber":229,"author":{"gitId":"yuxunn"},"content":"        LocalDateTime[] startTimes \u003d new LocalDateTime[100];","lastModifiedDate":"2023-09-08"},{"lineNumber":230,"author":{"gitId":"yuxunn"},"content":"        int count \u003d 0;","lastModifiedDate":"2023-09-08"},{"lineNumber":231,"author":{"gitId":"yuxunn"},"content":"        try (FileReader fileReader \u003d new FileReader(fileDir)) {","lastModifiedDate":"2023-09-08"},{"lineNumber":232,"author":{"gitId":"yuxunn"},"content":"            Scanner scanner \u003d new Scanner(fileReader);","lastModifiedDate":"2023-09-08"},{"lineNumber":233,"author":{"gitId":"yuxunn"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-09-08"},{"lineNumber":234,"author":{"gitId":"yuxunn"},"content":"                if (startTimes.length \u003e count) {","lastModifiedDate":"2023-09-08"},{"lineNumber":235,"author":{"gitId":"yuxunn"},"content":"                    String line \u003d scanner.nextLine();","lastModifiedDate":"2023-09-08"},{"lineNumber":236,"author":{"gitId":"yuxunn"},"content":"                    String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-09-08"},{"lineNumber":237,"author":{"gitId":"yuxunn"},"content":"                    if (parts.length \u003e\u003d 6 \u0026\u0026 parts[0].equals(\"E\")) {","lastModifiedDate":"2023-09-08"},{"lineNumber":238,"author":{"gitId":"yuxunn"},"content":"                        startTimes[count] \u003d LocalDateTime.parse(parts[4], DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":239,"author":{"gitId":"yuxunn"},"content":"                        count++;","lastModifiedDate":"2023-09-08"},{"lineNumber":240,"author":{"gitId":"yuxunn"},"content":"                    }","lastModifiedDate":"2023-09-08"},{"lineNumber":241,"author":{"gitId":"yuxunn"},"content":"                }","lastModifiedDate":"2023-09-08"},{"lineNumber":242,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-09-08"},{"lineNumber":243,"author":{"gitId":"yuxunn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-08"},{"lineNumber":244,"author":{"gitId":"yuxunn"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-09-08"},{"lineNumber":245,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":246,"author":{"gitId":"yuxunn"},"content":"        return startTimes;","lastModifiedDate":"2023-09-08"},{"lineNumber":247,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":248,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":249,"author":{"gitId":"yuxunn"},"content":"    public LocalDateTime[] loadEndTimes() {","lastModifiedDate":"2023-09-08"},{"lineNumber":250,"author":{"gitId":"yuxunn"},"content":"        LocalDateTime[] endTimes \u003d new LocalDateTime[100];","lastModifiedDate":"2023-09-08"},{"lineNumber":251,"author":{"gitId":"yuxunn"},"content":"        int count \u003d 0;","lastModifiedDate":"2023-09-08"},{"lineNumber":252,"author":{"gitId":"yuxunn"},"content":"        try (FileReader fileReader \u003d new FileReader(fileDir)) {","lastModifiedDate":"2023-09-08"},{"lineNumber":253,"author":{"gitId":"yuxunn"},"content":"            Scanner scanner \u003d new Scanner(fileReader);","lastModifiedDate":"2023-09-08"},{"lineNumber":254,"author":{"gitId":"yuxunn"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-09-08"},{"lineNumber":255,"author":{"gitId":"yuxunn"},"content":"                if (endTimes.length \u003e count) {","lastModifiedDate":"2023-09-08"},{"lineNumber":256,"author":{"gitId":"yuxunn"},"content":"                    String line \u003d scanner.nextLine();","lastModifiedDate":"2023-09-08"},{"lineNumber":257,"author":{"gitId":"yuxunn"},"content":"                    String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-09-08"},{"lineNumber":258,"author":{"gitId":"yuxunn"},"content":"                    if (parts.length \u003e\u003d 6 \u0026\u0026 parts[0].equals(\"E\")) {","lastModifiedDate":"2023-09-08"},{"lineNumber":259,"author":{"gitId":"yuxunn"},"content":"                        endTimes[count] \u003d LocalDateTime.parse(parts[5], DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":260,"author":{"gitId":"yuxunn"},"content":"                        count++;","lastModifiedDate":"2023-09-08"},{"lineNumber":261,"author":{"gitId":"yuxunn"},"content":"                    }","lastModifiedDate":"2023-09-08"},{"lineNumber":262,"author":{"gitId":"yuxunn"},"content":"                }","lastModifiedDate":"2023-09-08"},{"lineNumber":263,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-09-08"},{"lineNumber":264,"author":{"gitId":"yuxunn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-08"},{"lineNumber":265,"author":{"gitId":"yuxunn"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-09-08"},{"lineNumber":266,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":267,"author":{"gitId":"yuxunn"},"content":"        return endTimes;","lastModifiedDate":"2023-09-08"},{"lineNumber":268,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":269,"author":{"gitId":"yuxunn"},"content":"}","lastModifiedDate":"2023-08-31"},{"lineNumber":270,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":271,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":272,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":273,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":274,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"yuxunn":274}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yuxunn"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"yuxunn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"yuxunn"},"content":"import java.util.*;","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"yuxunn"},"content":"import java.time.*;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"yuxunn"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"yuxunn"},"content":" * The TaskList class is in charge of the different arrays","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"yuxunn"},"content":" * indicating the actions, whether it is done, the type, and the counter.","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"yuxunn"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"yuxunn"},"content":"public class TaskList {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"yuxunn"},"content":"    public static String[] actions;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"yuxunn"},"content":"    public static boolean[] isDone;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"yuxunn"},"content":"    public static String[] type;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"yuxunn"},"content":"    public static int counter;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"yuxunn"},"content":"    public static String[] dueString \u003d new String[100];","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"yuxunn"},"content":"    public static LocalDateTime[] startTime \u003d new LocalDateTime[100];","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"yuxunn"},"content":"    public  static LocalDateTime[] endTime\u003d new LocalDateTime[100];","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"yuxunn"},"content":"     * Constructor of the TaskList","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"yuxunn"},"content":"     * @param actions Array of actions.","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"yuxunn"},"content":"     * @param isDone Array of whether the action is done.","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"yuxunn"},"content":"     * @param type Array of the different type of actions.","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"yuxunn"},"content":"     * @param counter Number of action in tasklist.","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"yuxunn"},"content":"    public TaskList(String[] actions, boolean[] isDone, String[] type, int counter){","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"yuxunn"},"content":"        TaskList.actions \u003d actions;","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"yuxunn"},"content":"        TaskList.isDone \u003d isDone;","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"yuxunn"},"content":"        TaskList.type \u003d type;","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"yuxunn"},"content":"        TaskList.counter \u003d counter;","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"yuxunn"},"content":"     * Formats and saves the to do type of action.","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"yuxunn"},"content":"     * @param action String of name of action.","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"yuxunn"},"content":"    public static String todo(String action) {","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"yuxunn"},"content":"        assert action !\u003d null \u0026\u0026 !action.isEmpty() : \"Action description cannot be null or empty\";","lastModifiedDate":"2023-09-14"},{"lineNumber":41,"author":{"gitId":"yuxunn"},"content":"        isDone[counter] \u003d false;","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"yuxunn"},"content":"        actions[counter] \u003d action;","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"yuxunn"},"content":"        type[counter] \u003d \"T\";","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"yuxunn"},"content":"        counter\u003d counter + 1;","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"yuxunn"},"content":"        String response \u003d \"\";","lastModifiedDate":"2023-09-08"},{"lineNumber":46,"author":{"gitId":"yuxunn"},"content":"        response \u003d \"Got it. I\u0027ve added this task:\\n\" + helper(action, \"T\", false) + \"\\nNow you have \" + counter + \" tasks in the list.\";","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"yuxunn"},"content":"        assert counter \u003e\u003d 0 : \"Counter should not be negative after adding a task\";","lastModifiedDate":"2023-09-14"},{"lineNumber":48,"author":{"gitId":"yuxunn"},"content":"        Storage.save(\"data/duke.txt\", actions, type, isDone, dueString, startTime, endTime, counter);","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"yuxunn"},"content":"        return response;","lastModifiedDate":"2023-09-08"},{"lineNumber":51,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"yuxunn"},"content":"     * Helper method to format the type of action.","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"yuxunn"},"content":"     * @param task Name of task.","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"yuxunn"},"content":"     * @param taskType Type of task.","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"yuxunn"},"content":"     * @param isDone True if done, false if not done.","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"yuxunn"},"content":"     * @return String with formatted type of tasktype.","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"yuxunn"},"content":"    public static String helper(String task, String taskType, boolean isDone) {","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"yuxunn"},"content":"        String taskIcon;","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"yuxunn"},"content":"        if (taskType.equals(\"T\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"yuxunn"},"content":"            taskIcon \u003d \"[T]\";","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"yuxunn"},"content":"        } else if (taskType.equals(\"D\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"yuxunn"},"content":"            taskIcon \u003d \"[D]\";","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"yuxunn"},"content":"        } else if (taskType.equals(\"E\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"yuxunn"},"content":"            taskIcon \u003d \"[E]\";","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"yuxunn"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"yuxunn"},"content":"            taskIcon \u003d \"[ ]\";","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"yuxunn"},"content":"        return taskIcon + \"[\" + (isDone ? \"X\" : \" \") + \"] \" + task;","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"yuxunn"},"content":"     * Helper method to format and save the deadline type of task.","lastModifiedDate":"2023-09-02"},{"lineNumber":77,"author":{"gitId":"yuxunn"},"content":"     * @param action Name of task.","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"yuxunn"},"content":"     * @param due String of when the task is due.","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"yuxunn"},"content":"     * @param by LocalDateTime of formatted due.","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"yuxunn"},"content":"    public static String deadline(String action, String due, LocalDateTime by) {","lastModifiedDate":"2023-09-08"},{"lineNumber":82,"author":{"gitId":"yuxunn"},"content":"        assert action !\u003d null \u0026\u0026 !action.isEmpty() : \"Action description cannot be null or empty\";","lastModifiedDate":"2023-09-14"},{"lineNumber":83,"author":{"gitId":"yuxunn"},"content":"        assert due !\u003d null \u0026\u0026 !due.isEmpty() : \"Due date description cannot be null or empty\";","lastModifiedDate":"2023-09-14"},{"lineNumber":84,"author":{"gitId":"yuxunn"},"content":"        assert by !\u003d null : \"Due date and time should not be null\";","lastModifiedDate":"2023-09-14"},{"lineNumber":85,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":86,"author":{"gitId":"yuxunn"},"content":"        String byString \u003d due.trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"yuxunn"},"content":"        dueString[counter] \u003d byString;","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"yuxunn"},"content":"        actions[counter] \u003d action;","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"yuxunn"},"content":"        type[counter] \u003d \"D\";","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"yuxunn"},"content":"        isDone[counter] \u003d false;","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"yuxunn"},"content":"        counter \u003d counter + 1;","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"yuxunn"},"content":"        String response \u003d \"\";","lastModifiedDate":"2023-09-08"},{"lineNumber":93,"author":{"gitId":"yuxunn"},"content":"        response \u003d \"Got it. I\u0027ve added this task: \\n\" + helper(action, \"D\", false) + \" (by\" + \" \" + byString + \")\" + \"\\n Now you have \" + counter + \" tasks in the list.\";","lastModifiedDate":"2023-09-08"},{"lineNumber":94,"author":{"gitId":"yuxunn"},"content":"        assert counter \u003e\u003d 0 : \"Counter should not be negative after adding a task\";","lastModifiedDate":"2023-09-14"},{"lineNumber":95,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":96,"author":{"gitId":"yuxunn"},"content":"        Storage.save(\"data/duke.txt\", actions, type, isDone, dueString, startTime, endTime, counter);","lastModifiedDate":"2023-09-08"},{"lineNumber":97,"author":{"gitId":"yuxunn"},"content":"        return response;","lastModifiedDate":"2023-09-08"},{"lineNumber":98,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":101,"author":{"gitId":"yuxunn"},"content":"     * Helper to format and save action of event type.","lastModifiedDate":"2023-09-02"},{"lineNumber":102,"author":{"gitId":"yuxunn"},"content":"     * @param action Name of action.","lastModifiedDate":"2023-09-02"},{"lineNumber":103,"author":{"gitId":"yuxunn"},"content":"     * @param from String indicating start time.","lastModifiedDate":"2023-09-14"},{"lineNumber":104,"author":{"gitId":"yuxunn"},"content":"     * @param to String indicating the end time.","lastModifiedDate":"2023-09-14"},{"lineNumber":105,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":106,"author":{"gitId":"yuxunn"},"content":"    public static String event(String action, String from, String to) {","lastModifiedDate":"2023-09-14"},{"lineNumber":107,"author":{"gitId":"yuxunn"},"content":"        assert action !\u003d null \u0026\u0026 !action.isEmpty() : \"Action description cannot be null or empty\";","lastModifiedDate":"2023-09-14"},{"lineNumber":108,"author":{"gitId":"yuxunn"},"content":"        assert from !\u003d null \u0026\u0026 !from.isEmpty() : \"Start time description cannot be null or empty\";","lastModifiedDate":"2023-09-14"},{"lineNumber":109,"author":{"gitId":"yuxunn"},"content":"        assert to !\u003d null \u0026\u0026 !to.isEmpty() : \"End time description cannot be null or empty\";","lastModifiedDate":"2023-09-14"},{"lineNumber":110,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":111,"author":{"gitId":"yuxunn"},"content":"        String response \u003d \"\";","lastModifiedDate":"2023-09-14"},{"lineNumber":112,"author":{"gitId":"yuxunn"},"content":"        LocalDateTime startTimeEvent;","lastModifiedDate":"2023-09-14"},{"lineNumber":113,"author":{"gitId":"yuxunn"},"content":"        LocalDateTime endTimeEvent;","lastModifiedDate":"2023-09-14"},{"lineNumber":114,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":115,"author":{"gitId":"yuxunn"},"content":"        if (from.matches(\"^\\\\d{1,2}/\\\\d{1,2}/\\\\d{4} \\\\d{4}$\") \u0026\u0026 to.matches(\"^\\\\d{1,2}/\\\\d{1,2}/\\\\d{4} \\\\d{4}$\")) {","lastModifiedDate":"2023-09-14"},{"lineNumber":116,"author":{"gitId":"yuxunn"},"content":"            startTimeEvent \u003d parseDateTime(from);","lastModifiedDate":"2023-09-14"},{"lineNumber":117,"author":{"gitId":"yuxunn"},"content":"            endTimeEvent \u003d parseDateTime(to);","lastModifiedDate":"2023-09-14"},{"lineNumber":118,"author":{"gitId":"yuxunn"},"content":"        } else {","lastModifiedDate":"2023-09-14"},{"lineNumber":119,"author":{"gitId":"yuxunn"},"content":"            startTimeEvent \u003d parseMonTime(from);","lastModifiedDate":"2023-09-14"},{"lineNumber":120,"author":{"gitId":"yuxunn"},"content":"            endTimeEvent \u003d parseMonTime(to);","lastModifiedDate":"2023-09-14"},{"lineNumber":121,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":122,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":123,"author":{"gitId":"yuxunn"},"content":"        startTime[counter] \u003d startTimeEvent;","lastModifiedDate":"2023-08-31"},{"lineNumber":124,"author":{"gitId":"yuxunn"},"content":"        endTime[counter] \u003d endTimeEvent;","lastModifiedDate":"2023-08-31"},{"lineNumber":125,"author":{"gitId":"yuxunn"},"content":"        actions[counter] \u003d action;","lastModifiedDate":"2023-08-31"},{"lineNumber":126,"author":{"gitId":"yuxunn"},"content":"        isDone[counter] \u003d false;","lastModifiedDate":"2023-08-31"},{"lineNumber":127,"author":{"gitId":"yuxunn"},"content":"        type[counter] \u003d \"E\";","lastModifiedDate":"2023-08-31"},{"lineNumber":128,"author":{"gitId":"yuxunn"},"content":"        counter \u003d counter + 1;","lastModifiedDate":"2023-08-31"},{"lineNumber":129,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":130,"author":{"gitId":"yuxunn"},"content":"        assert counter \u003e\u003d 0 : \"Counter should not be negative after adding a task\";","lastModifiedDate":"2023-09-14"},{"lineNumber":131,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":132,"author":{"gitId":"yuxunn"},"content":"        response \u003d \"Got it. I\u0027ve added this task:\\n\" + helper(action, \"E\", false) + \" (from: \" + from + \" to: \" + to + \")\" + \"\\nNow you have \" + counter + \" tasks in the list.\";","lastModifiedDate":"2023-09-08"},{"lineNumber":133,"author":{"gitId":"yuxunn"},"content":"        Storage.save(\"data/duke.txt\", actions, type, isDone, dueString, startTime, endTime, counter);","lastModifiedDate":"2023-09-08"},{"lineNumber":134,"author":{"gitId":"yuxunn"},"content":"        return response;","lastModifiedDate":"2023-09-08"},{"lineNumber":135,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":136,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":137,"author":{"gitId":"yuxunn"},"content":"    public static LocalDateTime parseMonTime(String monTime) {","lastModifiedDate":"2023-09-14"},{"lineNumber":138,"author":{"gitId":"yuxunn"},"content":"        // Split the input string into the day and time parts","lastModifiedDate":"2023-09-14"},{"lineNumber":139,"author":{"gitId":"yuxunn"},"content":"        String[] parts \u003d monTime.split(\" \");","lastModifiedDate":"2023-09-14"},{"lineNumber":140,"author":{"gitId":"yuxunn"},"content":"        String dayOfWeekStr \u003d parts[0];","lastModifiedDate":"2023-09-14"},{"lineNumber":141,"author":{"gitId":"yuxunn"},"content":"        String timeStr \u003d parts[1];","lastModifiedDate":"2023-09-14"},{"lineNumber":142,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":143,"author":{"gitId":"yuxunn"},"content":"        // Parse the day of the week","lastModifiedDate":"2023-09-14"},{"lineNumber":144,"author":{"gitId":"yuxunn"},"content":"        DayOfWeek dayOfWeek \u003d DayOfWeek.valueOf(dayOfWeekStr.toUpperCase());","lastModifiedDate":"2023-09-14"},{"lineNumber":145,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":146,"author":{"gitId":"yuxunn"},"content":"        // Parse the time in 12-hour format","lastModifiedDate":"2023-09-14"},{"lineNumber":147,"author":{"gitId":"yuxunn"},"content":"        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"ha\", Locale.US);","lastModifiedDate":"2023-09-14"},{"lineNumber":148,"author":{"gitId":"yuxunn"},"content":"        LocalTime time \u003d LocalTime.parse(timeStr, timeFormatter);","lastModifiedDate":"2023-09-14"},{"lineNumber":149,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":150,"author":{"gitId":"yuxunn"},"content":"        // Calculate the number of days to add to get to the specified day of the week","lastModifiedDate":"2023-09-14"},{"lineNumber":151,"author":{"gitId":"yuxunn"},"content":"        int daysToAdd \u003d (dayOfWeek.getValue() + 7 - DayOfWeek.MONDAY.getValue()) % 7;","lastModifiedDate":"2023-09-14"},{"lineNumber":152,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":153,"author":{"gitId":"yuxunn"},"content":"        // Get the current date and time","lastModifiedDate":"2023-09-14"},{"lineNumber":154,"author":{"gitId":"yuxunn"},"content":"        LocalDateTime now \u003d LocalDateTime.now();","lastModifiedDate":"2023-09-14"},{"lineNumber":155,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":156,"author":{"gitId":"yuxunn"},"content":"        // Calculate the target date and time","lastModifiedDate":"2023-09-14"},{"lineNumber":157,"author":{"gitId":"yuxunn"},"content":"        LocalDateTime targetDateTime \u003d now.plusDays(daysToAdd).withHour(time.getHour()).withMinute(time.getMinute());","lastModifiedDate":"2023-09-14"},{"lineNumber":158,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":159,"author":{"gitId":"yuxunn"},"content":"        return targetDateTime;","lastModifiedDate":"2023-09-14"},{"lineNumber":160,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":161,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":162,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":163,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":164,"author":{"gitId":"yuxunn"},"content":"    private static LocalDateTime parseDateTime(String dateTimeStr) {","lastModifiedDate":"2023-09-14"},{"lineNumber":165,"author":{"gitId":"yuxunn"},"content":"        DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");","lastModifiedDate":"2023-09-14"},{"lineNumber":166,"author":{"gitId":"yuxunn"},"content":"        return LocalDateTime.parse(dateTimeStr, formatter);","lastModifiedDate":"2023-09-14"},{"lineNumber":167,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":168,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":169,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":170,"author":{"gitId":"yuxunn"},"content":"    public static String list(TaskList taskList) {","lastModifiedDate":"2023-09-08"},{"lineNumber":171,"author":{"gitId":"yuxunn"},"content":"        StringBuilder response \u003d new StringBuilder(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2023-09-08"},{"lineNumber":172,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":173,"author":{"gitId":"yuxunn"},"content":"        for (int i \u003d 0; i \u003c taskList.counter; i++) {","lastModifiedDate":"2023-09-08"},{"lineNumber":174,"author":{"gitId":"yuxunn"},"content":"            String DMYString \u003d \"\";","lastModifiedDate":"2023-09-08"},{"lineNumber":175,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":176,"author":{"gitId":"yuxunn"},"content":"            if (taskList.type[i].equals(\"D\")) {","lastModifiedDate":"2023-09-08"},{"lineNumber":177,"author":{"gitId":"yuxunn"},"content":"                DMYString \u003d \"by \" + taskList.dueString[i];","lastModifiedDate":"2023-09-08"},{"lineNumber":178,"author":{"gitId":"yuxunn"},"content":"            } else if (taskList.type[i].equals(\"E\")) {","lastModifiedDate":"2023-09-08"},{"lineNumber":179,"author":{"gitId":"yuxunn"},"content":"                DMYString \u003d \"from \" + taskList.startTime[i] + \" to \" + taskList.endTime[i];","lastModifiedDate":"2023-09-08"},{"lineNumber":180,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":181,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":182,"author":{"gitId":"yuxunn"},"content":"            response.append((i + 1) + \".\" + taskList.helper(taskList.actions[i], taskList.type[i], taskList.isDone[i]) + \" \" + DMYString);","lastModifiedDate":"2023-09-08"},{"lineNumber":183,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":184,"author":{"gitId":"yuxunn"},"content":"            // Append a newline character after each task except the last one","lastModifiedDate":"2023-09-08"},{"lineNumber":185,"author":{"gitId":"yuxunn"},"content":"            if (i \u003c taskList.counter - 1) {","lastModifiedDate":"2023-09-08"},{"lineNumber":186,"author":{"gitId":"yuxunn"},"content":"                response.append(\"\\n\");","lastModifiedDate":"2023-09-08"},{"lineNumber":187,"author":{"gitId":"yuxunn"},"content":"            }","lastModifiedDate":"2023-09-08"},{"lineNumber":188,"author":{"gitId":"yuxunn"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":189,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":190,"author":{"gitId":"yuxunn"},"content":"        return response.toString();","lastModifiedDate":"2023-09-08"},{"lineNumber":191,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":192,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":193,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":194,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":195,"author":{"gitId":"yuxunn"},"content":"     * Helper method to format the string into the LocalDateTime format.","lastModifiedDate":"2023-09-02"},{"lineNumber":196,"author":{"gitId":"yuxunn"},"content":"     * @param dateTimeStr String of the to-be-formatted date time.","lastModifiedDate":"2023-09-02"},{"lineNumber":197,"author":{"gitId":"yuxunn"},"content":"     * @return Formatted LocalDateTime version.","lastModifiedDate":"2023-09-02"},{"lineNumber":198,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":199,"author":{"gitId":"yuxunn"},"content":"    private static LocalDateTime helper2 (String dateTimeStr) {","lastModifiedDate":"2023-08-31"},{"lineNumber":200,"author":{"gitId":"yuxunn"},"content":"        DateTimeFormatter DMYhelper \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");","lastModifiedDate":"2023-08-31"},{"lineNumber":201,"author":{"gitId":"yuxunn"},"content":"        // HHmm for the hour and minutes","lastModifiedDate":"2023-08-31"},{"lineNumber":202,"author":{"gitId":"yuxunn"},"content":"        return LocalDateTime.parse(dateTimeStr, DMYhelper);","lastModifiedDate":"2023-08-31"},{"lineNumber":203,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":204,"author":{"gitId":"yuxunn"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"yuxunn":204}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yuxunn"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"yuxunn"},"content":" * Ui class handles the user interface related functions. Responsible for displaying the","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"yuxunn"},"content":" * messages to the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"yuxunn"},"content":" *","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"yuxunn"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"yuxunn"},"content":"public class Ui {","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"yuxunn"},"content":"     * Displays welcome message","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"yuxunn"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"yuxunn"},"content":"        System.out.println(\"Hello! I\u0027m Bob\\nWhat can I do for you?\");","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"yuxunn"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"yuxunn"},"content":"     * Displays error message.","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"yuxunn"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"yuxunn"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"yuxunn"},"content":"            System.out.println(\"Error\");","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"yuxunn"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"yuxunn":23}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"yuxunn"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"yuxunn"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"yuxunn"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"yuxunn"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"yuxunn"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"yuxunn"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"yuxunn"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"yuxunn"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"yuxunn"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"yuxunn"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"yuxunn"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"yuxunn"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"yuxunn"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"yuxunn":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"yuxunn"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"yuxunn"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"yuxunn"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"yuxunn"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"yuxunn"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"yuxunn"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"yuxunn"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"yuxunn"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"yuxunn"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"yuxunn"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"yuxunn"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"yuxunn"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" /\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"yuxunn"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"yuxunn"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"yuxunn"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"yuxunn"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"yuxunn":19}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yuxunn"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yuxunn"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"yuxunn"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"yuxunn"},"content":"import duke.Parser;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"yuxunn"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"yuxunn"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"yuxunn"},"content":"import java.io.*;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"yuxunn"},"content":"public class DukeTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"yuxunn"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"yuxunn"},"content":"    public void testTodoCommand() {","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"yuxunn"},"content":"        Duke duke \u003d new Duke();","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"yuxunn"},"content":"        // Simulate user input to add a \"todo\" task","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"yuxunn"},"content":"        String simulatedUserInput \u003d \"todo Read a book\\nbye\\n\";","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"yuxunn"},"content":"        InputStream inputStream \u003d new ByteArrayInputStream(simulatedUserInput.getBytes());","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"yuxunn"},"content":"        System.setIn(inputStream);","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"yuxunn"},"content":"        // Redirect output to capture Duke\u0027s responses","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"yuxunn"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"yuxunn"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"yuxunn"},"content":"        // Run Duke","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"yuxunn"},"content":"        duke.run();","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"yuxunn"},"content":"        // Capture Duke\u0027s output","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"yuxunn"},"content":"        String dukeOutput \u003d outputStream.toString();","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"yuxunn"},"content":"        // Check if Duke\u0027s output contains the added \"todo\" task","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"yuxunn"},"content":"        assertTrue(dukeOutput.contains(\"Got it. I\u0027ve added this task:\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"yuxunn"},"content":"        assertTrue(dukeOutput.contains(\"[T][ ] Read a book\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"yuxunn"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"yuxunn"},"content":"    public void testDeadlineCommand() {","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"yuxunn"},"content":"        Duke duke \u003d new Duke();","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"yuxunn"},"content":"        // Simulate user input to add a \"deadline\" task","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"yuxunn"},"content":"        String simulatedUserInput \u003d \"deadline Finish report /by 30/08/2023 1430\\nbye\\n\";","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"yuxunn"},"content":"        InputStream inputStream \u003d new ByteArrayInputStream(simulatedUserInput.getBytes());","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"yuxunn"},"content":"        System.setIn(inputStream);","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"yuxunn"},"content":"        // Redirect output to capture Duke\u0027s responses","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"yuxunn"},"content":"        ByteArrayOutputStream outputStream \u003d new ByteArrayOutputStream();","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"yuxunn"},"content":"        System.setOut(new PrintStream(outputStream));","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"yuxunn"},"content":"        // Run Duke","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"yuxunn"},"content":"        duke.run();","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"yuxunn"},"content":"        // Capture Duke\u0027s output","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"yuxunn"},"content":"        String dukeOutput \u003d outputStream.toString();","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"yuxunn"},"content":"        // Check if Duke\u0027s output contains the added \"deadline\" task and displays it correctly","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"yuxunn"},"content":"        assertTrue(dukeOutput.contains(\"Got it. I\u0027ve added this task:\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"yuxunn"},"content":"        assertTrue(dukeOutput.contains(\"[D][ ] Finish report (by 30/08/2023 1430)\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"yuxunn"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"yuxunn"},"content":"}","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"yuxunn"},"content":"","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"yuxunn":60}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yuxunn"},"content":"todo borrow book","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"yuxunn"},"content":"todo sleep","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"yuxunn"},"content":"mark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"yuxunn"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"yuxunn"},"content":"bye","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"yuxunn":5}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"yuxunn"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"yuxunn":1,"-":20}}]
