[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"J-hta-n"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"J-hta-n"},"content":"}","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"J-hta-n"},"content":"checkstyle {","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"J-hta-n"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":19,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"J-hta-n"},"content":"    mainClass.set(\"seedu.duke.Ekud\")","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"J-hta-n"},"content":"    archiveBaseName \u003d \"ekud.jar\"","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":40,"J-hta-n":7}},{"path":"src/main/java/Ekud.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"J-hta-n"},"content":"import exceptions.*;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"J-hta-n"},"content":"import parser.Parser;","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"J-hta-n"},"content":"import storage.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"J-hta-n"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"J-hta-n"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"J-hta-n"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"J-hta-n"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"J-hta-n"},"content":" * The Ekud chatbot where the main functionality of this program runs in.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"J-hta-n"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"J-hta-n"},"content":"public class Ekud {","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"J-hta-n"},"content":"    // TaskList object to store and manipulate all of user\u0027s tasks, as well as","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"J-hta-n"},"content":"    // handle invalid inputs","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"J-hta-n"},"content":"    private final TaskList taskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"J-hta-n"},"content":"    // Storage object to handle loading and saving of tasks onto the hard disk.","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"J-hta-n"},"content":"    private final Storage storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"J-hta-n"},"content":"     * Constructor for the Ekud chatbot to intitialise its taskList and storage objects.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"J-hta-n"},"content":"     * @param storage Storage object initialised with a filepath to the saved tasks file.","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"J-hta-n"},"content":"    public Ekud(Storage storage) {","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"J-hta-n"},"content":"        this.taskList \u003d new TaskList();","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"J-hta-n"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"J-hta-n"},"content":"     * Main function to start running the Ekud chatbot.","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"J-hta-n"},"content":"     * @throws EkudIOException Exception involving improper reading or writing to the","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"J-hta-n"},"content":"     *      saved tasks file, which stops the program.","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"J-hta-n"},"content":"    public void start() throws EkudIOException {","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"J-hta-n"},"content":"        // Load up saved data","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"J-hta-n"},"content":"        this.storage.loadData(this.taskList);","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"J-hta-n"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"J-hta-n"},"content":"        Ui.intro();","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"J-hta-n"},"content":"        // Process user input","lastModifiedDate":"2023-08-24"},{"lineNumber":39,"author":{"gitId":"J-hta-n"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"J-hta-n"},"content":"        String userInput \u003d scanner.nextLine();","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"J-hta-n"},"content":"        String[] parsedInput \u003d parser.parseInput(userInput);","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"J-hta-n"},"content":"        String userCommand \u003d parsedInput[0];","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"J-hta-n"},"content":"        String userArgs \u003d parsedInput[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"J-hta-n"},"content":"        // Main chatbot functionality","lastModifiedDate":"2023-08-24"},{"lineNumber":45,"author":{"gitId":"J-hta-n"},"content":"        while (!userCommand.equals(\"end\")) {","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"J-hta-n"},"content":"            try {","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"J-hta-n"},"content":"                // throws EkudException for invalid inputs","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"J-hta-n"},"content":"                parser.parseAndExecute(userCommand, userArgs, this.taskList);","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"J-hta-n"},"content":"            } catch (EkudException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"J-hta-n"},"content":"                Ui.printMsg(e.toString()); // catch and print out EkudException message","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"J-hta-n"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"J-hta-n"},"content":"            // Process next line of user input","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"J-hta-n"},"content":"            userInput \u003d scanner.nextLine();","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"J-hta-n"},"content":"            parsedInput \u003d parser.parseInput(userInput);","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"J-hta-n"},"content":"            userCommand \u003d parsedInput[0];","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"J-hta-n"},"content":"            userArgs \u003d parsedInput[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"J-hta-n"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"J-hta-n"},"content":"        // Update saved tasks before exiting the program","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"J-hta-n"},"content":"        Ui.printMsg(\"Saving tasks...\");","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"J-hta-n"},"content":"        this.storage.saveData(this.taskList);","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"J-hta-n"},"content":"        Ui.outro();","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"J-hta-n"},"content":"        scanner.close();","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":65,"author":{"gitId":"J-hta-n"},"content":"    // Main chatbot program","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"J-hta-n"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"J-hta-n"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"J-hta-n"},"content":"            Storage storage \u003d new Storage(\"data/savedTasks.txt\");","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"J-hta-n"},"content":"            new Ekud(storage).start();","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"J-hta-n"},"content":"        } catch (EkudIOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"J-hta-n"},"content":"            System.out.println(e);","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"J-hta-n"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":74,"author":{"gitId":"J-hta-n"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"J-hta-n":74}},{"path":"src/main/java/exceptions/EkudException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"J-hta-n"},"content":"package exceptions;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"J-hta-n"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"J-hta-n"},"content":" * Represents an exception thrown by the Ekud chatbot.","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"J-hta-n"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"J-hta-n"},"content":"public class EkudException extends Exception {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"J-hta-n"},"content":"    public EkudException(String message) {","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"J-hta-n"},"content":"        super(message);","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"J-hta-n"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"J-hta-n":10}},{"path":"src/main/java/exceptions/EkudIOException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"J-hta-n"},"content":"package exceptions;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"J-hta-n"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"J-hta-n"},"content":" * Represents an error reading or writing to the saved tasks file.","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"J-hta-n"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"J-hta-n"},"content":"public class EkudIOException extends EkudException {","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"J-hta-n"},"content":"    public EkudIOException(String message) {","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"J-hta-n"},"content":"        super(message);","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"J-hta-n"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"J-hta-n":10}},{"path":"src/main/java/exceptions/EkudIllegalArgException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"J-hta-n"},"content":"package exceptions;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"J-hta-n"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"J-hta-n"},"content":" * Represents illegal arguments by the user after giving a command to the chatbot.","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"J-hta-n"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"J-hta-n"},"content":"public class EkudIllegalArgException extends EkudException {","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"J-hta-n"},"content":"    public EkudIllegalArgException(String message) {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"J-hta-n"},"content":"        super(message);","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"J-hta-n"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"J-hta-n":9}},{"path":"src/main/java/exceptions/EkudInvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"J-hta-n"},"content":"package exceptions;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"J-hta-n"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"J-hta-n"},"content":" * Represents invalid commands by the user to the chatbot.","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"J-hta-n"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"J-hta-n"},"content":"public class EkudInvalidCommandException extends EkudException {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"J-hta-n"},"content":"    public EkudInvalidCommandException(String message) {","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"J-hta-n"},"content":"        super(message);","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"J-hta-n"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"J-hta-n":10}},{"path":"src/main/java/parser/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"J-hta-n"},"content":"package parser;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"J-hta-n"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"J-hta-n"},"content":" * Represents a fixed set of input command strings which can be assigned to the","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"J-hta-n"},"content":" * Command variable.","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"J-hta-n"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"J-hta-n"},"content":"public enum Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"J-hta-n"},"content":"    SHOWTASKS(\"list\"),","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"J-hta-n"},"content":"    MARKTASKASDONE(\"mark\"),","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"J-hta-n"},"content":"    MARKTASKASNOTDONE(\"unmark\"),","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"J-hta-n"},"content":"    ADDTODO(\"todo\"),","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"J-hta-n"},"content":"    ADDDEADLINE(\"deadline\"),","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"J-hta-n"},"content":"    ADDEVENT(\"event\"),","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"J-hta-n"},"content":"    DELETETASK(\"delete\"),","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"J-hta-n"},"content":"    FIND(\"find\");","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"J-hta-n"},"content":"    private String command;","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"J-hta-n"},"content":"    private Command(String command) {","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"J-hta-n"},"content":"        this.command \u003d command;","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"J-hta-n"},"content":"    public static Command getCommand(String inputCommand) {","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"J-hta-n"},"content":"        for (Command command : Command.values()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"J-hta-n"},"content":"            if (command.command.equals(inputCommand)) {","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"J-hta-n"},"content":"                return command;","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"J-hta-n"},"content":"            }","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"J-hta-n"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"J-hta-n"},"content":"        return null;","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"J-hta-n"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"J-hta-n":28}},{"path":"src/main/java/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"J-hta-n"},"content":"package parser;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"J-hta-n"},"content":"import exceptions.*;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"J-hta-n"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"J-hta-n"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"J-hta-n"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"J-hta-n"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"J-hta-n"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"J-hta-n"},"content":" * The Parser class serves as an interface between the user and the chatbot by","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"J-hta-n"},"content":" * converting user inputs into commands and arguments that the chatbot understands,","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"J-hta-n"},"content":" * before finally calling the chatbot\u0027s TaskList to execute these commands.","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"J-hta-n"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"J-hta-n"},"content":"public class Parser {","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"J-hta-n"},"content":"     * Splits the user\u0027s input into command and arguments.","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"J-hta-n"},"content":"    public String[] parseInput(String userInput) {","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"J-hta-n"},"content":"        int firstSpace \u003d userInput.indexOf(\u0027 \u0027);","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"J-hta-n"},"content":"        String userCommand \u003d firstSpace \u003d\u003d -1 ? userInput : userInput.substring(0, firstSpace);","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"J-hta-n"},"content":"        String userArgs \u003d firstSpace \u003d\u003d -1 ? \"\" : userInput.substring(firstSpace + 1);","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"J-hta-n"},"content":"        return new String[]{userCommand, userArgs};","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"J-hta-n"},"content":"     * Core function for parsing user arguments based on the command and handling any invalid commands","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"J-hta-n"},"content":"     * or arguments, before the command is even executed.","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"J-hta-n"},"content":"     * @param userCommand Input command by the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"J-hta-n"},"content":"     * @param userArgs Args for the command supplied by the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"J-hta-n"},"content":"     * @throws EkudException Either invalid commands or illegal arguments for the commands.","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"J-hta-n"},"content":"    public void parseAndExecute(String userCommand, String userArgs, TaskList taskList)","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"J-hta-n"},"content":"            throws EkudException {","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"J-hta-n"},"content":"        Command command \u003d Command.getCommand(userCommand); // Command enum","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"J-hta-n"},"content":"        if (command \u003d\u003d null) {","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"J-hta-n"},"content":"            throw new EkudInvalidCommandException(\"Command not found :(\");","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"J-hta-n"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"J-hta-n"},"content":"        switch (command) {","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"J-hta-n"},"content":"        case SHOWTASKS:","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"J-hta-n"},"content":"            taskList.showTasks();","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"J-hta-n"},"content":"            break;","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"J-hta-n"},"content":"        case MARKTASKASDONE:","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"J-hta-n"},"content":"            try {","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"J-hta-n"},"content":"                int index \u003d Integer.valueOf(userArgs) - 1;","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"J-hta-n"},"content":"                taskList.markTaskAsDone(index);","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"J-hta-n"},"content":"                break;","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"J-hta-n"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"J-hta-n"},"content":"                throw new EkudIllegalArgException(\"Please input a valid index number :o\");","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"J-hta-n"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"J-hta-n"},"content":"        case MARKTASKASNOTDONE:","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"J-hta-n"},"content":"            try {","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"J-hta-n"},"content":"                int index \u003d Integer.valueOf(userArgs) - 1;","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"J-hta-n"},"content":"                taskList.markTaskAsNotDone(index);","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"J-hta-n"},"content":"                break;","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"J-hta-n"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"J-hta-n"},"content":"                throw new EkudIllegalArgException(\"Please input a valid index number :o\");","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"J-hta-n"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"J-hta-n"},"content":"        case ADDTODO:","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"J-hta-n"},"content":"            taskList.addToDo(userArgs);","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"J-hta-n"},"content":"            break;","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"J-hta-n"},"content":"        case ADDDEADLINE:","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"J-hta-n"},"content":"            try {","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"J-hta-n"},"content":"                String[] deadlineArgs \u003d userArgs.split(\" /by \");","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"J-hta-n"},"content":"                String description \u003d deadlineArgs[0];","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"J-hta-n"},"content":"                LocalDateTime dateTime \u003d this.parseDateTime(deadlineArgs[1]);","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"J-hta-n"},"content":"                taskList.addDeadline(description, dateTime);","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"J-hta-n"},"content":"                break;","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"J-hta-n"},"content":"            } catch (IndexOutOfBoundsException | DateTimeParseException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"J-hta-n"},"content":"                throw new EkudIllegalArgException(\"Deadline formatted wrongly\\n\" +","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"J-hta-n"},"content":"                        \"-\u003e Ensure \u0027deadline \u003cdescription\u003e /by \u003cdd-mm-yyyy\u003e OR \u003cdd-MM-yyyy hhmm\u003e\u0027 \" +","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"J-hta-n"},"content":"                        \"is followed\\n\"","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"J-hta-n"},"content":"                        + \"-\u003e For example: deadline finish quiz /by 03-10-2023 1830\");","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"J-hta-n"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"J-hta-n"},"content":"        case ADDEVENT:","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"J-hta-n"},"content":"            try {","lastModifiedDate":"2023-09-02"},{"lineNumber":77,"author":{"gitId":"J-hta-n"},"content":"                String[] eventArgs \u003d userArgs.split(\" /from \");","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"J-hta-n"},"content":"                String[] timings \u003d eventArgs[1].split(\" /to \");","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"J-hta-n"},"content":"                String description \u003d eventArgs[0];","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"J-hta-n"},"content":"                if (description.isBlank() || timings[0].isBlank() || timings[1].isBlank()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"J-hta-n"},"content":"                    throw new EkudIllegalArgException(\"Description/start/end shouldn\u0027t be empty :(\");","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"J-hta-n"},"content":"                }","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"J-hta-n"},"content":"                LocalDateTime fromDateTime \u003d this.parseDateTime(timings[0]);","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"J-hta-n"},"content":"                LocalDateTime toDateTime \u003d this.parseDateTime(timings[1]);","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"J-hta-n"},"content":"                taskList.addEvent(description, fromDateTime, toDateTime);","lastModifiedDate":"2023-09-02"},{"lineNumber":86,"author":{"gitId":"J-hta-n"},"content":"                break;","lastModifiedDate":"2023-09-02"},{"lineNumber":87,"author":{"gitId":"J-hta-n"},"content":"            } catch (IndexOutOfBoundsException | DateTimeParseException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":88,"author":{"gitId":"J-hta-n"},"content":"                throw new EkudIllegalArgException(\"Event formatted wrongly\\n\" +","lastModifiedDate":"2023-09-02"},{"lineNumber":89,"author":{"gitId":"J-hta-n"},"content":"                        \"-\u003e Ensure \u0027event \u003cdescription\u003e /from \u003cdd-MM-yyyy hhmm\u003e /to \u003cdd-MM-yyyy hhmm\u003e\u0027 \" +","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"J-hta-n"},"content":"                        \"is followed\\n\"","lastModifiedDate":"2023-09-02"},{"lineNumber":91,"author":{"gitId":"J-hta-n"},"content":"                        + \"-\u003e For example: event company dinner /from 03-10-2023 1730 /to \" +","lastModifiedDate":"2023-09-02"},{"lineNumber":92,"author":{"gitId":"J-hta-n"},"content":"                        \"03-10-2023 2215\");","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"J-hta-n"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":94,"author":{"gitId":"J-hta-n"},"content":"        case DELETETASK:","lastModifiedDate":"2023-09-02"},{"lineNumber":95,"author":{"gitId":"J-hta-n"},"content":"            try {","lastModifiedDate":"2023-09-02"},{"lineNumber":96,"author":{"gitId":"J-hta-n"},"content":"                int index \u003d Integer.valueOf(userArgs) - 1;","lastModifiedDate":"2023-09-02"},{"lineNumber":97,"author":{"gitId":"J-hta-n"},"content":"                taskList.deleteTask(index);","lastModifiedDate":"2023-09-02"},{"lineNumber":98,"author":{"gitId":"J-hta-n"},"content":"                break;","lastModifiedDate":"2023-09-02"},{"lineNumber":99,"author":{"gitId":"J-hta-n"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":100,"author":{"gitId":"J-hta-n"},"content":"                throw new EkudIllegalArgException(\"Please input a valid index number :o\");","lastModifiedDate":"2023-09-02"},{"lineNumber":101,"author":{"gitId":"J-hta-n"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":102,"author":{"gitId":"J-hta-n"},"content":"        case FIND:","lastModifiedDate":"2023-09-02"},{"lineNumber":103,"author":{"gitId":"J-hta-n"},"content":"            String[] keyword \u003d userArgs.split(\" \");","lastModifiedDate":"2023-09-02"},{"lineNumber":104,"author":{"gitId":"J-hta-n"},"content":"            if (keyword.length \u003d\u003d 0 || keyword[0].isBlank()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":105,"author":{"gitId":"J-hta-n"},"content":"                throw new EkudIllegalArgException(\"Keyword shouldn\u0027t be empty :(\");","lastModifiedDate":"2023-09-02"},{"lineNumber":106,"author":{"gitId":"J-hta-n"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":107,"author":{"gitId":"J-hta-n"},"content":"            if (keyword.length \u003e 1) {","lastModifiedDate":"2023-09-02"},{"lineNumber":108,"author":{"gitId":"J-hta-n"},"content":"                throw new EkudIllegalArgException(\"Please input a valid keyword (multiple words \" +","lastModifiedDate":"2023-09-02"},{"lineNumber":109,"author":{"gitId":"J-hta-n"},"content":"                        \"are not accepted) :(\");","lastModifiedDate":"2023-09-02"},{"lineNumber":110,"author":{"gitId":"J-hta-n"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":111,"author":{"gitId":"J-hta-n"},"content":"            taskList.findTasks(keyword[0]);","lastModifiedDate":"2023-09-02"},{"lineNumber":112,"author":{"gitId":"J-hta-n"},"content":"            break;","lastModifiedDate":"2023-09-02"},{"lineNumber":113,"author":{"gitId":"J-hta-n"},"content":"        default:","lastModifiedDate":"2023-09-02"},{"lineNumber":114,"author":{"gitId":"J-hta-n"},"content":"            throw new EkudInvalidCommandException(\"Command not found :(\");","lastModifiedDate":"2023-09-02"},{"lineNumber":115,"author":{"gitId":"J-hta-n"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":116,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":117,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":118,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":119,"author":{"gitId":"J-hta-n"},"content":"     * Parses the user\u0027s input date and time into a LocalDateTime object.","lastModifiedDate":"2023-09-02"},{"lineNumber":120,"author":{"gitId":"J-hta-n"},"content":"     * @param inputDateTime User\u0027s input dateTime in the format dd-MM-yyyy HHmm.","lastModifiedDate":"2023-09-02"},{"lineNumber":121,"author":{"gitId":"J-hta-n"},"content":"     * @return LocalDateTime","lastModifiedDate":"2023-09-02"},{"lineNumber":122,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":123,"author":{"gitId":"J-hta-n"},"content":"    public LocalDateTime parseDateTime(String inputDateTime) {","lastModifiedDate":"2023-09-02"},{"lineNumber":124,"author":{"gitId":"J-hta-n"},"content":"        String[] splitDateTime \u003d inputDateTime.split(\" \");","lastModifiedDate":"2023-09-02"},{"lineNumber":125,"author":{"gitId":"J-hta-n"},"content":"        String time \u003d splitDateTime.length \u003d\u003d 2 ? splitDateTime[1] : \"2359\";","lastModifiedDate":"2023-09-02"},{"lineNumber":126,"author":{"gitId":"J-hta-n"},"content":"        String date \u003d splitDateTime[0];","lastModifiedDate":"2023-09-02"},{"lineNumber":127,"author":{"gitId":"J-hta-n"},"content":"        return LocalDateTime.parse(","lastModifiedDate":"2023-09-02"},{"lineNumber":128,"author":{"gitId":"J-hta-n"},"content":"                date + \" \" + time, DateTimeFormatter.ofPattern(\"dd-MM-yyyy HHmm\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":129,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":130,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":131,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":132,"author":{"gitId":"J-hta-n"},"content":"     * Parses a date and time from the saved tasks file into a LocalDateTime object.","lastModifiedDate":"2023-09-02"},{"lineNumber":133,"author":{"gitId":"J-hta-n"},"content":"     * @param savedDateTime Saved dateTime in the format dd MMM yyyy h:mm a.","lastModifiedDate":"2023-09-02"},{"lineNumber":134,"author":{"gitId":"J-hta-n"},"content":"     * @return LocalDateTime","lastModifiedDate":"2023-09-02"},{"lineNumber":135,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":136,"author":{"gitId":"J-hta-n"},"content":"    public LocalDateTime parseSavedDateTime(String savedDateTime) {","lastModifiedDate":"2023-09-02"},{"lineNumber":137,"author":{"gitId":"J-hta-n"},"content":"        return LocalDateTime.parse(savedDateTime, DateTimeFormatter.ofPattern(\"dd MMM yyyy h:mm a\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":138,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":139,"author":{"gitId":"J-hta-n"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"J-hta-n":139}},{"path":"src/main/java/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"J-hta-n"},"content":"package storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"J-hta-n"},"content":"import exceptions.*;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"J-hta-n"},"content":"import parser.Parser;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"J-hta-n"},"content":"import tasks.Deadline;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"J-hta-n"},"content":"import tasks.Event;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"J-hta-n"},"content":"import tasks.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"J-hta-n"},"content":"import tasks.ToDo;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"J-hta-n"},"content":"import java.io.File;","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"J-hta-n"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"J-hta-n"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"J-hta-n"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"J-hta-n"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"J-hta-n"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"J-hta-n"},"content":" * The Storage class deals with handling the saved tasks file on the hard disk, by loading its contents","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"J-hta-n"},"content":" * into the chatbot upon startup (or creating a new dir/file if it doesn\u0027t exist), and updating its","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"J-hta-n"},"content":" * contents after the user is done with the chatbot.","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"J-hta-n"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"J-hta-n"},"content":"public class Storage {","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"J-hta-n"},"content":"    private final String path;","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"J-hta-n"},"content":"    private final File savedTasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"J-hta-n"},"content":"     * Constructor for Storage, which initialises the directory and file to save tasks in.","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"J-hta-n"},"content":"     * @param path Filepath for the saved tasks file.","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"J-hta-n"},"content":"     * @throws EkudIOException Exception involving the creation of the saved tasks file.","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"J-hta-n"},"content":"    public Storage(String path) throws EkudIOException {","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"J-hta-n"},"content":"        this.path \u003d path;","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"J-hta-n"},"content":"        File file \u003d new File(path);","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"J-hta-n"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"J-hta-n"},"content":"            if (!file.getParentFile().exists()) { // Create directory if it doesn\u0027t exist","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"J-hta-n"},"content":"                file.getParentFile().mkdirs();","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"J-hta-n"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"J-hta-n"},"content":"            if (!file.exists()) { // Create file if it doesn\u0027t exist","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"J-hta-n"},"content":"                System.out.println(\"Creating task file...\");","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"J-hta-n"},"content":"                file.createNewFile();","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"J-hta-n"},"content":"                System.out.println(\"Task file created successfully\");","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"J-hta-n"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"J-hta-n"},"content":"            this.savedTasks \u003d file;","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"J-hta-n"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"J-hta-n"},"content":"            throw new EkudIOException(\"Error with creating task file: \" + e);","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"J-hta-n"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"J-hta-n"},"content":"     * Loads saved tasks from the file into the chatbot\u0027s TaskList.","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"J-hta-n"},"content":"     * @param taskList The chatbot\u0027s TaskList to load tasks into.","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"J-hta-n"},"content":"     * @throws EkudIOException Exception involving improper loading of saved tasks into TaskList.","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"J-hta-n"},"content":"    public void loadData(TaskList taskList) throws EkudIOException {","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"J-hta-n"},"content":"        Parser parser \u003d new Parser(); // For parsing dateTime","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"J-hta-n"},"content":"        System.out.println(\"Loading up saved tasks...\");","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"J-hta-n"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"J-hta-n"},"content":"            Scanner scanner \u003d new Scanner(this.savedTasks);","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"J-hta-n"},"content":"            int curTask \u003d 0;","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"J-hta-n"},"content":"            while (scanner.hasNext()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"J-hta-n"},"content":"                // Saved tasks format eg:","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"J-hta-n"},"content":"                // T | 0 | task1","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"J-hta-n"},"content":"                // D | 1 | task2 | 1st Sep","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"J-hta-n"},"content":"                // E | 0 | task 3 | 1st Sep 2pm | 3rd Sep 2pm","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"J-hta-n"},"content":"                String[] taskDetails \u003d scanner.nextLine().split(\" \\\\| \");","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"J-hta-n"},"content":"                String taskType \u003d taskDetails[0];","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"J-hta-n"},"content":"                boolean isDone \u003d taskDetails[1].equals(\"X\");","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"J-hta-n"},"content":"                if (taskType.equals(\"T\")) {","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"J-hta-n"},"content":"                    taskList.addTask(new ToDo(taskDetails[2]));","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"J-hta-n"},"content":"                } else if (taskType.equals(\"D\")) {","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"J-hta-n"},"content":"                    LocalDateTime dateTime \u003d parser.parseSavedDateTime(taskDetails[3]);","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"J-hta-n"},"content":"                    taskList.addTask(new Deadline(taskDetails[2], dateTime));","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"J-hta-n"},"content":"                } else if (taskType.equals(\"E\")) {","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"J-hta-n"},"content":"                    LocalDateTime fromDateTime \u003d parser.parseSavedDateTime(taskDetails[3]);","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"J-hta-n"},"content":"                    LocalDateTime toDateTime \u003d parser.parseSavedDateTime(taskDetails[4]);","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"J-hta-n"},"content":"                    taskList.addTask(new Event(taskDetails[2], fromDateTime, toDateTime));","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"J-hta-n"},"content":"                }","lastModifiedDate":"2023-09-02"},{"lineNumber":77,"author":{"gitId":"J-hta-n"},"content":"                if (isDone) taskList.markDoneOnStart(curTask);","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"J-hta-n"},"content":"                curTask++;","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"J-hta-n"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"J-hta-n"},"content":"            if (curTask \u003d\u003d 0) {","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"J-hta-n"},"content":"                System.out.println(\"No saved tasks found\");","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"J-hta-n"},"content":"            } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"J-hta-n"},"content":"                System.out.println(\"Saved tasks loaded successfully\");","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"J-hta-n"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"J-hta-n"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":86,"author":{"gitId":"J-hta-n"},"content":"            throw new EkudIOException(\"Error with loading saved tasks: \" + e);","lastModifiedDate":"2023-09-02"},{"lineNumber":87,"author":{"gitId":"J-hta-n"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":88,"author":{"gitId":"J-hta-n"},"content":"            throw new EkudIOException(\"Error with parsing saved tasks: \" + e);","lastModifiedDate":"2023-09-02"},{"lineNumber":89,"author":{"gitId":"J-hta-n"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":91,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":92,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"J-hta-n"},"content":"     * Updates the saved task file with the latest tasks when the program ends.","lastModifiedDate":"2023-09-02"},{"lineNumber":94,"author":{"gitId":"J-hta-n"},"content":"     * @param taskList The chatbot\u0027s TaskList to save tasks from.","lastModifiedDate":"2023-09-02"},{"lineNumber":95,"author":{"gitId":"J-hta-n"},"content":"     * @throws EkudIOException Exception involving improper saving of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":96,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":97,"author":{"gitId":"J-hta-n"},"content":"    public void saveData(TaskList taskList) throws EkudIOException {","lastModifiedDate":"2023-09-02"},{"lineNumber":98,"author":{"gitId":"J-hta-n"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":99,"author":{"gitId":"J-hta-n"},"content":"            FileWriter fw \u003d new FileWriter(this.path);","lastModifiedDate":"2023-09-02"},{"lineNumber":100,"author":{"gitId":"J-hta-n"},"content":"            int len \u003d taskList.getSize();","lastModifiedDate":"2023-09-02"},{"lineNumber":101,"author":{"gitId":"J-hta-n"},"content":"            for (int i \u003d 0; i \u003c len; i++) {","lastModifiedDate":"2023-09-02"},{"lineNumber":102,"author":{"gitId":"J-hta-n"},"content":"                fw.write(taskList.getSaveTaskFormat(i) + \"\\n\");","lastModifiedDate":"2023-09-02"},{"lineNumber":103,"author":{"gitId":"J-hta-n"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":104,"author":{"gitId":"J-hta-n"},"content":"            fw.close();","lastModifiedDate":"2023-09-02"},{"lineNumber":105,"author":{"gitId":"J-hta-n"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":106,"author":{"gitId":"J-hta-n"},"content":"            throw new EkudIOException(\"Error with saving tasks: \" + e);","lastModifiedDate":"2023-09-02"},{"lineNumber":107,"author":{"gitId":"J-hta-n"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":108,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":109,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":110,"author":{"gitId":"J-hta-n"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"J-hta-n":110}},{"path":"src/main/java/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"J-hta-n"},"content":"package tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"J-hta-n"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"J-hta-n"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"J-hta-n"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"J-hta-n"},"content":" * Represents a task with a deadline.","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"J-hta-n"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"J-hta-n"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"J-hta-n"},"content":"    // dateTime object associated with this deadline","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"J-hta-n"},"content":"    LocalDateTime dateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"J-hta-n"},"content":"    public Deadline(String description, LocalDateTime dateTime) {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"J-hta-n"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"J-hta-n"},"content":"        this.dateTime \u003d dateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"J-hta-n"},"content":"     * Returns the user-friendly string format of this deadline\u0027s dateTime object.","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"J-hta-n"},"content":"     * @return String","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"J-hta-n"},"content":"    public String getDateTimeFormat() {","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"J-hta-n"},"content":"        return this.dateTime.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy h:mm a\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"J-hta-n"},"content":"     * Returns the compact saved format for this deadline.","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"J-hta-n"},"content":"     * @return String","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"J-hta-n"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"J-hta-n"},"content":"    public String getSaveFormat() {","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"J-hta-n"},"content":"        return String.format(\"D | %c | %s | %s\",","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"J-hta-n"},"content":"                this.getDoneSymbol(),","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"J-hta-n"},"content":"                this.description,","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"J-hta-n"},"content":"                this.getDateTimeFormat());","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"J-hta-n"},"content":"     * String representation of this deadline as a task.","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"J-hta-n"},"content":"     * @return String","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"J-hta-n"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"J-hta-n"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"J-hta-n"},"content":"        return String.format(\"[D][%c] %s (by: %s)\",","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"J-hta-n"},"content":"                this.getDoneSymbol(),","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"J-hta-n"},"content":"                this.description,","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"J-hta-n"},"content":"                this.getDateTimeFormat());","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"J-hta-n"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"J-hta-n":49}},{"path":"src/main/java/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"J-hta-n"},"content":"package tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"J-hta-n"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"J-hta-n"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"J-hta-n"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"J-hta-n"},"content":" * Represents a task with starting and ending dates/times.","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"J-hta-n"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"J-hta-n"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"J-hta-n"},"content":"    // Start and end dateTimes associated with this event.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"J-hta-n"},"content":"    LocalDateTime fromDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"J-hta-n"},"content":"    LocalDateTime toDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"J-hta-n"},"content":"    public Event(String description, LocalDateTime fromDateTime, LocalDateTime toDateTime) {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"J-hta-n"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"J-hta-n"},"content":"        this.fromDateTime \u003d fromDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"J-hta-n"},"content":"        this.toDateTime \u003d toDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"J-hta-n"},"content":"     * Private method used to help format this event\u0027s dateTime into a","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"J-hta-n"},"content":"     * more user-friendly format.","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"J-hta-n"},"content":"     * @param dateTime","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"J-hta-n"},"content":"     * @return String","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"J-hta-n"},"content":"    private String getDateTimeFormat(LocalDateTime dateTime) {","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"J-hta-n"},"content":"        return dateTime.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy h:mm a\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"J-hta-n"},"content":"     * Returns the compact saved format for this event.","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"J-hta-n"},"content":"     * @return String","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"J-hta-n"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"J-hta-n"},"content":"    public String getSaveFormat() {","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"J-hta-n"},"content":"        return String.format(\"E | %c | %s | %s | %s\",","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"J-hta-n"},"content":"                this.getDoneSymbol(),","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"J-hta-n"},"content":"                this.description,","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"J-hta-n"},"content":"                this.getDateTimeFormat(this.fromDateTime),","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"J-hta-n"},"content":"                this.getDateTimeFormat(this.toDateTime));","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"J-hta-n"},"content":"     * String representation of this event as a task.","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"J-hta-n"},"content":"     * @return String","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"J-hta-n"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"J-hta-n"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"J-hta-n"},"content":"        return String.format(\"[E][%c] %s (from: %s, to: %s)\",","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"J-hta-n"},"content":"                this.getDoneSymbol(),","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"J-hta-n"},"content":"                this.description,","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"J-hta-n"},"content":"                this.getDateTimeFormat(this.fromDateTime),","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"J-hta-n"},"content":"                this.getDateTimeFormat(this.toDateTime));","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":55,"author":{"gitId":"J-hta-n"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"J-hta-n":55}},{"path":"src/main/java/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"J-hta-n"},"content":"package tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"J-hta-n"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"J-hta-n"},"content":" * Represents a task created by the user.","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"J-hta-n"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"J-hta-n"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"J-hta-n"},"content":"    // Every task has a description","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"J-hta-n"},"content":"    protected String description;","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"J-hta-n"},"content":"    // Marks whether the task is completed already or not","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"J-hta-n"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"J-hta-n"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"J-hta-n"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"J-hta-n"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"J-hta-n"},"content":"    public void markAsDone() { this.isDone \u003d true; }","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"J-hta-n"},"content":"    public void markAsNotDone() { this.isDone \u003d false; }","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"J-hta-n"},"content":"     * Returns a checked symbol if this task is done.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"J-hta-n"},"content":"     * @return char","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"J-hta-n"},"content":"    public char getDoneSymbol() { return isDone ? \u0027X\u0027: \u0027 \u0027; }","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"J-hta-n"},"content":"     * Returns a compact format for saving this Task to the hard disk,","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"J-hta-n"},"content":"     * which is then easily parsed for future loading of saved tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"J-hta-n"},"content":"     * @return String","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"J-hta-n"},"content":"    abstract public String getSaveFormat();","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"J-hta-n"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"J-hta-n":31}},{"path":"src/main/java/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"J-hta-n"},"content":"package tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"J-hta-n"},"content":"import exceptions.EkudIllegalArgException;","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"J-hta-n"},"content":"import ui.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"J-hta-n"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"J-hta-n"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"J-hta-n"},"content":"import java.util.List;","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"J-hta-n"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"J-hta-n"},"content":" * TaskList handles task modifications and invalid user inputs for","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"J-hta-n"},"content":" * modifying tasks, and is a key component of the Ekud chatbot.","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"J-hta-n"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"J-hta-n"},"content":"public class TaskList {","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"J-hta-n"},"content":"    // Actual list storing the tasks","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"J-hta-n"},"content":"    private List\u003cTask\u003e tasks;","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"J-hta-n"},"content":"    // Constructor for TaskList","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"J-hta-n"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"J-hta-n"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"J-hta-n"},"content":"     * Prints this TaskList to the console.","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"J-hta-n"},"content":"    public void showTasks() {","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"J-hta-n"},"content":"        if (this.tasks.isEmpty()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"J-hta-n"},"content":"            Ui.printMsg(\"Your to-do list is currently empty :o\");","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"J-hta-n"},"content":"            return;","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"J-hta-n"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"J-hta-n"},"content":"        Ui.printDivider();","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"J-hta-n"},"content":"        System.out.println(\"Here is your to-do list:\");","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"J-hta-n"},"content":"        int len \u003d tasks.size();","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"J-hta-n"},"content":"        for (int i \u003d 0; i \u003c len; i++) {","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"J-hta-n"},"content":"            System.out.println(String.format(\"%d. %s\", i + 1, tasks.get(i).toString()));","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"J-hta-n"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"J-hta-n"},"content":"        Ui.printDivider();","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"J-hta-n"},"content":"     * Marks a specific task as done.","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"J-hta-n"},"content":"     * @param index Index number of task supplied by user.","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"J-hta-n"},"content":"     * @throws EkudIllegalArgException Illegal arg for index number.","lastModifiedDate":"2023-08-24"},{"lineNumber":42,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"J-hta-n"},"content":"    public void markTaskAsDone(int index) throws EkudIllegalArgException {","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"J-hta-n"},"content":"        try {","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"J-hta-n"},"content":"            Task task \u003d tasks.get(index);","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"J-hta-n"},"content":"            task.markAsDone();","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"J-hta-n"},"content":"            Ui.printMsg(\"The following task is marked done, sheeesh:\\n\"","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"J-hta-n"},"content":"                        + task.toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":49,"author":{"gitId":"J-hta-n"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"J-hta-n"},"content":"            throw new EkudIllegalArgException(\"Task index number is out of bounds :/\");","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"J-hta-n"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":53,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"J-hta-n"},"content":"     * Same as the markTaskAsDone() function, but used when loading saved tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"J-hta-n"},"content":"     * @param index","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"J-hta-n"},"content":"    public void markDoneOnStart(int index) {","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"J-hta-n"},"content":"        tasks.get(index).markAsDone();","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":63,"author":{"gitId":"J-hta-n"},"content":"     * Marks a specific task as not done.","lastModifiedDate":"2023-08-23"},{"lineNumber":64,"author":{"gitId":"J-hta-n"},"content":"     * @param index Index number of task supplied by user.","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"J-hta-n"},"content":"     * @throws EkudIllegalArgException Illegal arg for index number.","lastModifiedDate":"2023-08-24"},{"lineNumber":66,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":67,"author":{"gitId":"J-hta-n"},"content":"    public void markTaskAsNotDone(int index) throws EkudIllegalArgException {","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"J-hta-n"},"content":"        try {","lastModifiedDate":"2023-08-23"},{"lineNumber":69,"author":{"gitId":"J-hta-n"},"content":"            Task task \u003d tasks.get(index);","lastModifiedDate":"2023-08-23"},{"lineNumber":70,"author":{"gitId":"J-hta-n"},"content":"            task.markAsNotDone();","lastModifiedDate":"2023-08-23"},{"lineNumber":71,"author":{"gitId":"J-hta-n"},"content":"            Ui.printMsg(\"The following task is marked as not done yet:\\n\"","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"J-hta-n"},"content":"                        + task.toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":73,"author":{"gitId":"J-hta-n"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":74,"author":{"gitId":"J-hta-n"},"content":"            throw new EkudIllegalArgException(\"Task index number is out of bounds :/\");","lastModifiedDate":"2023-08-23"},{"lineNumber":75,"author":{"gitId":"J-hta-n"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":76,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":77,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":79,"author":{"gitId":"J-hta-n"},"content":"     * Prints a confirmation message for the user after adding a task.","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"J-hta-n"},"content":"     * @param task","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":82,"author":{"gitId":"J-hta-n"},"content":"    private void printAddedTask(Task task) {","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"J-hta-n"},"content":"        Ui.printMsg(String.format(","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"J-hta-n"},"content":"                \"Got it! I\u0027ve added this task:\\n%s\\nNow you have %d task(s) in the list.\",","lastModifiedDate":"2023-08-23"},{"lineNumber":85,"author":{"gitId":"J-hta-n"},"content":"                task.toString(),","lastModifiedDate":"2023-08-23"},{"lineNumber":86,"author":{"gitId":"J-hta-n"},"content":"                tasks.size()));","lastModifiedDate":"2023-08-23"},{"lineNumber":87,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":88,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":89,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"J-hta-n"},"content":"     * Adds an already initialised task to this TaskList, used for loading","lastModifiedDate":"2023-09-02"},{"lineNumber":91,"author":{"gitId":"J-hta-n"},"content":"     * saved tasks onto this TaskList on startup.","lastModifiedDate":"2023-09-02"},{"lineNumber":92,"author":{"gitId":"J-hta-n"},"content":"     * @param task","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":94,"author":{"gitId":"J-hta-n"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-09-02"},{"lineNumber":95,"author":{"gitId":"J-hta-n"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-09-02"},{"lineNumber":96,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":97,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":98,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":99,"author":{"gitId":"J-hta-n"},"content":"     * Adds a to-do task to this TaskList.","lastModifiedDate":"2023-08-23"},{"lineNumber":100,"author":{"gitId":"J-hta-n"},"content":"     * @param description Description of the to-do task.","lastModifiedDate":"2023-09-02"},{"lineNumber":101,"author":{"gitId":"J-hta-n"},"content":"     * @throws EkudIllegalArgException Illegal arg for to-do task.","lastModifiedDate":"2023-08-23"},{"lineNumber":102,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":103,"author":{"gitId":"J-hta-n"},"content":"    public void addToDo(String description) throws EkudIllegalArgException {","lastModifiedDate":"2023-08-23"},{"lineNumber":104,"author":{"gitId":"J-hta-n"},"content":"        if (description.isBlank()) { // isBlank() checks if string is all whitespace","lastModifiedDate":"2023-08-23"},{"lineNumber":105,"author":{"gitId":"J-hta-n"},"content":"            throw new EkudIllegalArgException(\"Description shouldn\u0027t be empty :(\");","lastModifiedDate":"2023-09-02"},{"lineNumber":106,"author":{"gitId":"J-hta-n"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":107,"author":{"gitId":"J-hta-n"},"content":"        ToDo newToDo \u003d new ToDo(description);","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"J-hta-n"},"content":"        this.tasks.add(newToDo);","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"J-hta-n"},"content":"        this.printAddedTask(newToDo);","lastModifiedDate":"2023-09-02"},{"lineNumber":110,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":111,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":112,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":113,"author":{"gitId":"J-hta-n"},"content":"     * Adds a deadline task to this TaskList.","lastModifiedDate":"2023-08-23"},{"lineNumber":114,"author":{"gitId":"J-hta-n"},"content":"     * @param description Description of the deadline task.","lastModifiedDate":"2023-09-02"},{"lineNumber":115,"author":{"gitId":"J-hta-n"},"content":"     * @param dateTime Date and time to complete this task by.","lastModifiedDate":"2023-09-02"},{"lineNumber":116,"author":{"gitId":"J-hta-n"},"content":"     * @throws EkudIllegalArgException Illegal arg(s) for deadline task.","lastModifiedDate":"2023-09-02"},{"lineNumber":117,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":118,"author":{"gitId":"J-hta-n"},"content":"    public void addDeadline(String description, LocalDateTime dateTime) throws EkudIllegalArgException {","lastModifiedDate":"2023-09-02"},{"lineNumber":119,"author":{"gitId":"J-hta-n"},"content":"        if (description.isBlank()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":120,"author":{"gitId":"J-hta-n"},"content":"            throw new EkudIllegalArgException(\"Description shouldn\u0027t be empty :(\");","lastModifiedDate":"2023-09-02"},{"lineNumber":121,"author":{"gitId":"J-hta-n"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":122,"author":{"gitId":"J-hta-n"},"content":"        Deadline newDeadline \u003d new Deadline(description, dateTime);","lastModifiedDate":"2023-08-31"},{"lineNumber":123,"author":{"gitId":"J-hta-n"},"content":"        this.tasks.add(newDeadline);","lastModifiedDate":"2023-08-31"},{"lineNumber":124,"author":{"gitId":"J-hta-n"},"content":"        this.printAddedTask(newDeadline);","lastModifiedDate":"2023-09-02"},{"lineNumber":125,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":126,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":127,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":128,"author":{"gitId":"J-hta-n"},"content":"     * Adds an event task to this TaskList.","lastModifiedDate":"2023-08-23"},{"lineNumber":129,"author":{"gitId":"J-hta-n"},"content":"     * @param description Description of the event task.","lastModifiedDate":"2023-09-02"},{"lineNumber":130,"author":{"gitId":"J-hta-n"},"content":"     * @param fromDateTime Date and time this event starts.","lastModifiedDate":"2023-09-02"},{"lineNumber":131,"author":{"gitId":"J-hta-n"},"content":"     * @param toDateTime Date and time this event ends.","lastModifiedDate":"2023-09-02"},{"lineNumber":132,"author":{"gitId":"J-hta-n"},"content":"     * @throws EkudIllegalArgException Illegal arg(s) for event task.","lastModifiedDate":"2023-08-23"},{"lineNumber":133,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":134,"author":{"gitId":"J-hta-n"},"content":"    public void addEvent(String description, LocalDateTime fromDateTime, LocalDateTime toDateTime)","lastModifiedDate":"2023-09-02"},{"lineNumber":135,"author":{"gitId":"J-hta-n"},"content":"            throws EkudIllegalArgException {","lastModifiedDate":"2023-09-02"},{"lineNumber":136,"author":{"gitId":"J-hta-n"},"content":"        if (description.isBlank()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":137,"author":{"gitId":"J-hta-n"},"content":"            throw new EkudIllegalArgException(\"Description shouldn\u0027t be empty :(\");","lastModifiedDate":"2023-09-02"},{"lineNumber":138,"author":{"gitId":"J-hta-n"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":139,"author":{"gitId":"J-hta-n"},"content":"        Event newEvent \u003d new Event(description, fromDateTime, toDateTime);","lastModifiedDate":"2023-08-31"},{"lineNumber":140,"author":{"gitId":"J-hta-n"},"content":"        this.tasks.add(newEvent);","lastModifiedDate":"2023-08-31"},{"lineNumber":141,"author":{"gitId":"J-hta-n"},"content":"        this.printAddedTask(newEvent);","lastModifiedDate":"2023-09-02"},{"lineNumber":142,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":143,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":144,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":145,"author":{"gitId":"J-hta-n"},"content":"     * Deletes a task from this TaskList and prints a confirmation message.","lastModifiedDate":"2023-08-24"},{"lineNumber":146,"author":{"gitId":"J-hta-n"},"content":"     * @param index Index number of task to be deleted as supplied by user.","lastModifiedDate":"2023-09-02"},{"lineNumber":147,"author":{"gitId":"J-hta-n"},"content":"     * @throws EkudIllegalArgException Illegal arg for index number.","lastModifiedDate":"2023-08-24"},{"lineNumber":148,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":149,"author":{"gitId":"J-hta-n"},"content":"    public void deleteTask(int index) throws EkudIllegalArgException {","lastModifiedDate":"2023-09-02"},{"lineNumber":150,"author":{"gitId":"J-hta-n"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":151,"author":{"gitId":"J-hta-n"},"content":"            throw new EkudIllegalArgException(\"You cannot delete from an empty task list :/\");","lastModifiedDate":"2023-08-24"},{"lineNumber":152,"author":{"gitId":"J-hta-n"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":153,"author":{"gitId":"J-hta-n"},"content":"        try {","lastModifiedDate":"2023-08-24"},{"lineNumber":154,"author":{"gitId":"J-hta-n"},"content":"            Task task \u003d tasks.get(index);","lastModifiedDate":"2023-08-24"},{"lineNumber":155,"author":{"gitId":"J-hta-n"},"content":"            this.tasks.remove(index);","lastModifiedDate":"2023-08-24"},{"lineNumber":156,"author":{"gitId":"J-hta-n"},"content":"            Ui.printMsg(String.format(","lastModifiedDate":"2023-09-02"},{"lineNumber":157,"author":{"gitId":"J-hta-n"},"content":"                    \"Alright, this task has been removed:\\n%s\\nNow you have %d task(s) in the list.\",","lastModifiedDate":"2023-08-24"},{"lineNumber":158,"author":{"gitId":"J-hta-n"},"content":"                    task.toString(),","lastModifiedDate":"2023-08-24"},{"lineNumber":159,"author":{"gitId":"J-hta-n"},"content":"                    tasks.size()));","lastModifiedDate":"2023-08-24"},{"lineNumber":160,"author":{"gitId":"J-hta-n"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":161,"author":{"gitId":"J-hta-n"},"content":"            throw new EkudIllegalArgException(\"Task index number is out of bounds :/\");","lastModifiedDate":"2023-08-24"},{"lineNumber":162,"author":{"gitId":"J-hta-n"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":163,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":164,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":165,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":166,"author":{"gitId":"J-hta-n"},"content":"     * Prints a list of tasks matching the user\u0027s keyword search.","lastModifiedDate":"2023-09-02"},{"lineNumber":167,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":168,"author":{"gitId":"J-hta-n"},"content":"    public void findTasks(String keyword) {","lastModifiedDate":"2023-09-02"},{"lineNumber":169,"author":{"gitId":"J-hta-n"},"content":"        List\u003cString\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-02"},{"lineNumber":170,"author":{"gitId":"J-hta-n"},"content":"        for (Task task: this.tasks) {","lastModifiedDate":"2023-09-02"},{"lineNumber":171,"author":{"gitId":"J-hta-n"},"content":"            if (task.description.contains(keyword)) {","lastModifiedDate":"2023-09-02"},{"lineNumber":172,"author":{"gitId":"J-hta-n"},"content":"                matchingTasks.add(task.toString());","lastModifiedDate":"2023-09-02"},{"lineNumber":173,"author":{"gitId":"J-hta-n"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":174,"author":{"gitId":"J-hta-n"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":175,"author":{"gitId":"J-hta-n"},"content":"        if (matchingTasks.isEmpty()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":176,"author":{"gitId":"J-hta-n"},"content":"            Ui.printMsg(String.format(","lastModifiedDate":"2023-09-02"},{"lineNumber":177,"author":{"gitId":"J-hta-n"},"content":"                    \"No tasks matching the keyword \u0027%s\u0027 were found :(\",","lastModifiedDate":"2023-09-02"},{"lineNumber":178,"author":{"gitId":"J-hta-n"},"content":"                    keyword","lastModifiedDate":"2023-09-02"},{"lineNumber":179,"author":{"gitId":"J-hta-n"},"content":"            ));","lastModifiedDate":"2023-09-02"},{"lineNumber":180,"author":{"gitId":"J-hta-n"},"content":"            return;","lastModifiedDate":"2023-09-02"},{"lineNumber":181,"author":{"gitId":"J-hta-n"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":182,"author":{"gitId":"J-hta-n"},"content":"        Ui.printDivider();","lastModifiedDate":"2023-09-02"},{"lineNumber":183,"author":{"gitId":"J-hta-n"},"content":"        System.out.println(\"Here are the matching tasks in your list: :\u003e\");","lastModifiedDate":"2023-09-02"},{"lineNumber":184,"author":{"gitId":"J-hta-n"},"content":"        for (String task: matchingTasks) {","lastModifiedDate":"2023-09-02"},{"lineNumber":185,"author":{"gitId":"J-hta-n"},"content":"            System.out.println(task);","lastModifiedDate":"2023-09-02"},{"lineNumber":186,"author":{"gitId":"J-hta-n"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":187,"author":{"gitId":"J-hta-n"},"content":"        Ui.printDivider();","lastModifiedDate":"2023-09-02"},{"lineNumber":188,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":189,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":190,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":191,"author":{"gitId":"J-hta-n"},"content":"     * Used by the storage object to save all tasks into the hard disk.","lastModifiedDate":"2023-09-02"},{"lineNumber":192,"author":{"gitId":"J-hta-n"},"content":"     * @return Number of tasks to be saved.","lastModifiedDate":"2023-09-02"},{"lineNumber":193,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":194,"author":{"gitId":"J-hta-n"},"content":"    public int getSize() {","lastModifiedDate":"2023-09-02"},{"lineNumber":195,"author":{"gitId":"J-hta-n"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-09-02"},{"lineNumber":196,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":197,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":198,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":199,"author":{"gitId":"J-hta-n"},"content":"     * Used by the storage object to format all tasks to be saved.","lastModifiedDate":"2023-09-02"},{"lineNumber":200,"author":{"gitId":"J-hta-n"},"content":"     * @param i Index number of task to be formatted.","lastModifiedDate":"2023-09-02"},{"lineNumber":201,"author":{"gitId":"J-hta-n"},"content":"     * @return Task formatted for saving.","lastModifiedDate":"2023-09-02"},{"lineNumber":202,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":203,"author":{"gitId":"J-hta-n"},"content":"    public String getSaveTaskFormat(int i) {","lastModifiedDate":"2023-09-02"},{"lineNumber":204,"author":{"gitId":"J-hta-n"},"content":"        return this.tasks.get(i).getSaveFormat();","lastModifiedDate":"2023-09-02"},{"lineNumber":205,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":206,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":207,"author":{"gitId":"J-hta-n"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"J-hta-n":207}},{"path":"src/main/java/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"J-hta-n"},"content":"package tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"J-hta-n"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"J-hta-n"},"content":" * Represents a task with no additional attributes.","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"J-hta-n"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"J-hta-n"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"J-hta-n"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"J-hta-n"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"J-hta-n"},"content":"     * Returns the compact saved format for this To Do.","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"J-hta-n"},"content":"     * @return String","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"J-hta-n"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"J-hta-n"},"content":"    public String getSaveFormat() {","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"J-hta-n"},"content":"        return String.format(\"T | %c | %s\",","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"J-hta-n"},"content":"                this.getDoneSymbol(),","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"J-hta-n"},"content":"                this.description);","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"J-hta-n"},"content":"     * String representation of this To Do as a task.","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"J-hta-n"},"content":"     * @return String","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"J-hta-n"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"J-hta-n"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"J-hta-n"},"content":"        return String.format(\"[T][%c] %s\",","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"J-hta-n"},"content":"                this.getDoneSymbol(),","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"J-hta-n"},"content":"                this.description);","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"J-hta-n"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"J-hta-n":31}},{"path":"src/main/java/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"J-hta-n"},"content":"package ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"J-hta-n"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"J-hta-n"},"content":" * The Ui class deals with user interactions by converting the output of the chatbot","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"J-hta-n"},"content":" * to a more user-friendly output.","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"J-hta-n"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"J-hta-n"},"content":"public class Ui {","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"J-hta-n"},"content":"    // Basic UI \u0026 messages for the chatbot to print to console","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"J-hta-n"},"content":"    private static final String HORIZONTAL_LINE \u003d \"-~-~-~-~-~-~-~-~--~-~-~-~-~-~-~-~-\";","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"J-hta-n"},"content":"    private static final String INTRO \u003d \"Hello there! I\u0027m Ekud. :)\\n\" +","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"J-hta-n"},"content":"            \"What can I do for you? :O\";","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"J-hta-n"},"content":"    private static final String OUTRO \u003d \"Goodbye, have a nice day! :p\";","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"J-hta-n"},"content":"     * Prints a message formatted in between 2 horizontal lines for the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"J-hta-n"},"content":"     * @param message Text to be printed.","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"J-hta-n"},"content":"    public static void printMsg(String message) {","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"J-hta-n"},"content":"        System.out.println(String.format(\"%s\\n%s\\n%s\",","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"J-hta-n"},"content":"                HORIZONTAL_LINE,","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"J-hta-n"},"content":"                message,","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"J-hta-n"},"content":"                HORIZONTAL_LINE));","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"J-hta-n"},"content":"     * Prints the horizontal line divider.","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"J-hta-n"},"content":"    public static void printDivider() {","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"J-hta-n"},"content":"        System.out.println(HORIZONTAL_LINE);","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"J-hta-n"},"content":"     * Prints the chatbot\u0027s intro message.","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"J-hta-n"},"content":"    public static void intro() {","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"J-hta-n"},"content":"        printMsg(INTRO);","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"J-hta-n"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"J-hta-n"},"content":"     * Prints the chatbot\u0027s outro message.","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"J-hta-n"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"J-hta-n"},"content":"    public static void outro() {","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"J-hta-n"},"content":"        printMsg(OUTRO);","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"J-hta-n"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"J-hta-n":46}},{"path":"src/test/java/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"J-hta-n"},"content":"package parser;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"J-hta-n"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"J-hta-n"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"J-hta-n"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"J-hta-n"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"J-hta-n"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"J-hta-n"},"content":"public class ParserTest {","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"J-hta-n"},"content":"    @Test","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"J-hta-n"},"content":"    public void parseInput_emptyInput_runsWithoutException() {","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"J-hta-n"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"J-hta-n"},"content":"            Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"J-hta-n"},"content":"            String[] expectedOutput \u003d new String[]{ \"\", \"\"};","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"J-hta-n"},"content":"            String[] actualOutput \u003d parser.parseInput(\"\");","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"J-hta-n"},"content":"            assertEquals(true, Arrays.equals(expectedOutput, actualOutput));","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"J-hta-n"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"J-hta-n"},"content":"            fail();","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"J-hta-n"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"J-hta-n"},"content":"    @Test","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"J-hta-n"},"content":"    public void parseUserDateTime_correctFormat_success() {","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"J-hta-n"},"content":"        Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"J-hta-n"},"content":"        LocalDateTime expectedOutput \u003d LocalDateTime.of(2023, 8, 10, 17, 30);","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"J-hta-n"},"content":"        LocalDateTime actualOutput \u003d parser.parseDateTime(\"10-08-2023 1730\");","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"J-hta-n"},"content":"        assertEquals(true, expectedOutput.isEqual(actualOutput));","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"J-hta-n"},"content":"    @Test","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"J-hta-n"},"content":"    public void parseUserDateTime_incorrectFormat_dateTimeParseExceptionThrown() {","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"J-hta-n"},"content":"        assertThrows(DateTimeParseException.class,","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"J-hta-n"},"content":"                () -\u003e {","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"J-hta-n"},"content":"                    Parser parser \u003d new Parser();","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"J-hta-n"},"content":"                    parser.parseDateTime(\"10/08/23 5.30pm\");","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"J-hta-n"},"content":"                });","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"J-hta-n"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"J-hta-n":39}},{"path":"src/test/java/tasks/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"J-hta-n"},"content":"package tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"J-hta-n"},"content":"import exceptions.EkudIllegalArgException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"J-hta-n"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"J-hta-n"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"J-hta-n"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"J-hta-n"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"J-hta-n"},"content":"public class TaskListTest {","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"J-hta-n"},"content":"    @Test","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"J-hta-n"},"content":"    public void deleteTask_emptyTaskList_throwsException() {","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"J-hta-n"},"content":"        assertThrows(EkudIllegalArgException.class,","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"J-hta-n"},"content":"                () -\u003e {","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"J-hta-n"},"content":"                    TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"J-hta-n"},"content":"                    taskList.deleteTask(0);","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"J-hta-n"},"content":"                });","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"J-hta-n"},"content":"    @Test","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"J-hta-n"},"content":"    public void addEvent_successful() {","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"J-hta-n"},"content":"        assertAll(() -\u003e {","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"J-hta-n"},"content":"            TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"J-hta-n"},"content":"            taskList.addEvent(","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"J-hta-n"},"content":"                    \"test event\",","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"J-hta-n"},"content":"                    LocalDateTime.of(2023, 8, 10, 17, 30),","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"J-hta-n"},"content":"                    LocalDateTime.of(2023, 8,10, 21, 30)","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"J-hta-n"},"content":"            );","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"J-hta-n"},"content":"        });","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"J-hta-n"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"J-hta-n"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"J-hta-n":30}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"J-hta-n"},"content":"hi","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"J-hta-n"},"content":"todo","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"J-hta-n"},"content":"todo get groceries","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"J-hta-n"},"content":"todo go for a run","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"J-hta-n"},"content":"deadline finish quiz /by Saturday","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"J-hta-n"},"content":"deadline quiz 2 by Saturday","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"J-hta-n"},"content":"event meeting /from Sat 1pm /to Sat 2pm","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"J-hta-n"},"content":"event meeting from Sat 1pm to Sat 2pm","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"J-hta-n"},"content":"event dinner /from Fri 6pm /to8pm","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"J-hta-n"},"content":"event dinner /from Fri 6pm /to 8pm","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"J-hta-n"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"J-hta-n"},"content":"mark 1","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"J-hta-n"},"content":"mark 5","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"J-hta-n"},"content":"mark 6","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"J-hta-n"},"content":"mark 0","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"J-hta-n"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"J-hta-n"},"content":"unmark 1","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"J-hta-n"},"content":"unmark 6","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"J-hta-n"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"J-hta-n"},"content":"delete 0","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"J-hta-n"},"content":"delete 1","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"J-hta-n"},"content":"delete 5","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"J-hta-n"},"content":"delete 3","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"J-hta-n"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"J-hta-n"},"content":"mark2","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"J-hta-n"},"content":"mark w","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"J-hta-n"},"content":"end","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"J-hta-n":27}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"J-hta-n"},"content":"java -classpath ..\\bin Ekud \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"J-hta-n":1}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"J-hta-n"},"content":"java -classpath ../bin Ekud \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":37,"J-hta-n":1}}]
