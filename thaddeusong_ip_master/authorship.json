[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"## Duke Project","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"\u003e Beware the stories you read or tell; subtly, at night, beneath the waters of consciousness, they are altering your world. - [Ben Okri](https://en.wikipedia.org/wiki/Ben_Okri)","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":"This project is","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":"- **Text**-based","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":"- *Easy* to use","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":"This project helps you to:","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":"1. Track tasks","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"2. Stay on target","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"thaddeusong"},"content":"3. Practise programming","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"thaddeusong"},"content":":+1:","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"thaddeusong"},"content":"Features:","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"thaddeusong"},"content":"- [x] Managing tasks","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"thaddeusong"},"content":"- [ ] Managing deadlines (coming soon)","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"thaddeusong"},"content":"- [ ] Reminders (coming soon)","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"thaddeusong"},"content":"\u003e If you Java programmer, you can use it to practice Java too. Here\u0027s the main method:","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"thaddeusong"},"content":"```java","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"thaddeusong"},"content":"public class Main {","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"thaddeusong"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"thaddeusong"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"thaddeusong":25,"-":5}},{"path":"src/main/java/Duke/application/Application.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"package Duke.application;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"import Duke.duke.Duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"thaddeusong"},"content":"import Duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":"import Duke.storage.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":"import Duke.task.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":"import Duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":" * The application that manages UI and the taskList.","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"public class Application {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"thaddeusong"},"content":"    private TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"thaddeusong"},"content":"    private final Duke duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"thaddeusong"},"content":"    private final Storage storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"thaddeusong"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"thaddeusong"},"content":"     * Constructs an Application object.","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"thaddeusong"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"thaddeusong"},"content":"     * @param duke The main Duke instance associated with this application.","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"thaddeusong"},"content":"     * @param storage The storage object responsible for data persistence.","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"thaddeusong"},"content":"     * @throws DukeException If there\u0027s an issue with initializing the application or loading tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"thaddeusong"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"thaddeusong"},"content":"    public Application(Duke duke, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"thaddeusong"},"content":"        this.duke \u003d duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"thaddeusong"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"thaddeusong"},"content":"        loadTaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"thaddeusong"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"thaddeusong"},"content":"     * Shuts down application.","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"thaddeusong"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"thaddeusong"},"content":"    public void kill() {","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"thaddeusong"},"content":"        saveTaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"thaddeusong"},"content":"        duke.kill();","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"thaddeusong"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"thaddeusong"},"content":"     * Adds a task to the application\u0027s task list and storage.","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"thaddeusong"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"thaddeusong"},"content":"     * @param task The task to be added.","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"thaddeusong"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"thaddeusong"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"thaddeusong"},"content":"        taskList.addTask(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"thaddeusong"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"thaddeusong"},"content":"     * Removes a task from the application\u0027s task list and storage.","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"thaddeusong"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"thaddeusong"},"content":"     * @param task The task to be removed.","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"thaddeusong"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"thaddeusong"},"content":"    public void removeTask(Task task) {","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"thaddeusong"},"content":"        storage.removeLine(taskList.findTaskIndex(task) + 1);","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"thaddeusong"},"content":"        taskList.removeTask(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"thaddeusong"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"thaddeusong"},"content":"     * Loads the task list from storage into the application.","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"thaddeusong"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"thaddeusong"},"content":"     * @throws DukeException If there\u0027s an issue with loading tasks from storage.","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"thaddeusong"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"thaddeusong"},"content":"    public void loadTaskList() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"thaddeusong"},"content":"        taskList \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"thaddeusong"},"content":"        String line;","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"thaddeusong"},"content":"        int currentLine \u003d 1;","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"thaddeusong"},"content":"        while(!(line \u003d storage.getLine(currentLine)).equals(\"\")) {","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"thaddeusong"},"content":"            taskList.addTask(Task.parse(line));","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"thaddeusong"},"content":"            currentLine++;","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"thaddeusong"},"content":"    public void saveTaskList() {","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"thaddeusong"},"content":"        storage.clear();","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"thaddeusong"},"content":"        for(int i \u003d 0; i \u003c getTaskCount(); i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"thaddeusong"},"content":"            Task task \u003d taskList.getTask(i);","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"thaddeusong"},"content":"            storage.addLine(task.toSaveFormat());","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"thaddeusong"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"thaddeusong"},"content":"     * Returns the number of tasks in the application\u0027s task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"thaddeusong"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"thaddeusong"},"content":"     * @return The number of tasks.","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"thaddeusong"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"thaddeusong"},"content":"    public int getTaskCount() {","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"thaddeusong"},"content":"        return taskList.getTaskCount();","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"thaddeusong"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"thaddeusong"},"content":"     * Retrieves a task from the application\u0027s task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"thaddeusong"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"thaddeusong"},"content":"     * @param index The index of the task to retrieve.","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"thaddeusong"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"thaddeusong"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"thaddeusong"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"thaddeusong"},"content":"        return taskList.getTask(index);","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"thaddeusong"},"content":"    public TaskList getTaskList() {","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"thaddeusong"},"content":"        return taskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":103,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":104,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":105,"author":{"gitId":"thaddeusong"},"content":"    public TaskList findMatchingTasks(String content) {","lastModifiedDate":"2023-08-31"},{"lineNumber":106,"author":{"gitId":"thaddeusong"},"content":"        TaskList matchingTasks \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"thaddeusong"},"content":"        for(int i \u003d 0; i \u003c getTaskCount(); i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"thaddeusong"},"content":"            if(taskList.getTask(i).containsString(content)) {","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"thaddeusong"},"content":"                matchingTasks.addTask(taskList.getTask(i));","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"thaddeusong"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"thaddeusong"},"content":"        return matchingTasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":114,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"thaddeusong":114}},{"path":"src/main/java/Duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"package Duke.command;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"import Duke.exception.*;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"thaddeusong"},"content":"import Duke.message.Message;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":"import Duke.task.Task;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":"import Duke.application.Application;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":" * Represents an abstract command that interacts with the application with some content string.","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":"public abstract class Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"    protected String content;","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"thaddeusong"},"content":"    protected Command(String content){","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"thaddeusong"},"content":"        this.content \u003d content;","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"thaddeusong"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"thaddeusong"},"content":"     * Creates a Command instance based on the given command name and content.","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"thaddeusong"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"thaddeusong"},"content":"     * @param commandName The name of the command.","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"thaddeusong"},"content":"     * @param content The content associated with the command.","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"thaddeusong"},"content":"     * @return A Command instance corresponding to the specified command name.","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"thaddeusong"},"content":"     * @throws NoCommandFoundException If the provided command name is not recognized.","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"thaddeusong"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"thaddeusong"},"content":"    public static Command of(String commandName, String content)","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"thaddeusong"},"content":"            throws NoCommandFoundException {","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"thaddeusong"},"content":"        switch (commandName) {","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"thaddeusong"},"content":"        case \"bye\":","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"thaddeusong"},"content":"            return new Bye(content);","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"thaddeusong"},"content":"        case \"todo\":","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"thaddeusong"},"content":"            return new Todo(content);","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"thaddeusong"},"content":"        case \"deadline\":","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"thaddeusong"},"content":"            return new Deadline(content);","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"thaddeusong"},"content":"        case \"event\":","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"thaddeusong"},"content":"            return new Event(content);","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"thaddeusong"},"content":"        case \"find\":","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"thaddeusong"},"content":"            return new Find(content);","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"thaddeusong"},"content":"        case \"list\":","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"thaddeusong"},"content":"            return new List(content);","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"thaddeusong"},"content":"        case \"mark\":","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"thaddeusong"},"content":"            return new Mark(content);","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"thaddeusong"},"content":"        case \"unmark\":","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"thaddeusong"},"content":"            return new Unmark(content);","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"thaddeusong"},"content":"        case \"delete\":","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"thaddeusong"},"content":"            return new Delete(content);","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"thaddeusong"},"content":"        default:","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"thaddeusong"},"content":"            throw new NoCommandFoundException(commandName);","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"thaddeusong"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"thaddeusong"},"content":"     * Executes the command and interacts with the application.","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"thaddeusong"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"thaddeusong"},"content":"     * @param application The application instance with which the command interacts.","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"thaddeusong"},"content":"     * @return A Message instance representing the result of executing the command.","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"thaddeusong"},"content":"     * @throws DukeException If an error occurs during command execution.","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"thaddeusong"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"thaddeusong"},"content":"    public abstract Message execute(Application application) throws DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"thaddeusong"},"content":" * Represents a command to exit the application.","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"thaddeusong"},"content":"class Bye extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"thaddeusong"},"content":"    protected Bye(String content) {","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"thaddeusong"},"content":"        super(content);","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"thaddeusong"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"thaddeusong"},"content":"    public Message execute(Application application) {","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"thaddeusong"},"content":"        application.kill();","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"thaddeusong"},"content":"        return Message.onExit();","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"thaddeusong"},"content":" * Represents a command to add a To-do task to the task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"thaddeusong"},"content":"class Todo extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"thaddeusong"},"content":"    protected Todo(String content) {","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"thaddeusong"},"content":"        super(content);","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"thaddeusong"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"thaddeusong"},"content":"    public Message execute(Application application)","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"thaddeusong"},"content":"            throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"thaddeusong"},"content":"        Task task \u003d Task.of(content, Task.TaskType.TODO);","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"thaddeusong"},"content":"        application.addTask(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"thaddeusong"},"content":"        return Message.onTaskAdd(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"thaddeusong"},"content":" * Represents a command to add a Deadline task to the task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"thaddeusong"},"content":"class Deadline extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"thaddeusong"},"content":"    protected Deadline(String content) {","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"thaddeusong"},"content":"        super(content);","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"thaddeusong"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"thaddeusong"},"content":"    public Message execute(Application application)","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"thaddeusong"},"content":"            throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"thaddeusong"},"content":"        Task task \u003d Task.of(content, Task.TaskType.DEADLINE);","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"thaddeusong"},"content":"        application.addTask(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":103,"author":{"gitId":"thaddeusong"},"content":"        return Message.onTaskAdd(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":104,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":105,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-29"},{"lineNumber":106,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"thaddeusong"},"content":" * Represents a command to add an Event task to the task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"thaddeusong"},"content":"class Event extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":111,"author":{"gitId":"thaddeusong"},"content":"    protected Event(String content) {","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"thaddeusong"},"content":"        super(content);","lastModifiedDate":"2023-08-29"},{"lineNumber":113,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":114,"author":{"gitId":"thaddeusong"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":115,"author":{"gitId":"thaddeusong"},"content":"    public Message execute(Application application)","lastModifiedDate":"2023-08-31"},{"lineNumber":116,"author":{"gitId":"thaddeusong"},"content":"            throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":117,"author":{"gitId":"thaddeusong"},"content":"        Task task \u003d Task.of(content, Task.TaskType.EVENT);","lastModifiedDate":"2023-08-31"},{"lineNumber":118,"author":{"gitId":"thaddeusong"},"content":"        application.addTask(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":119,"author":{"gitId":"thaddeusong"},"content":"        return Message.onTaskAdd((task));","lastModifiedDate":"2023-08-31"},{"lineNumber":120,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":121,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-29"},{"lineNumber":122,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":123,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":124,"author":{"gitId":"thaddeusong"},"content":" * Represents a command to list tasks in the application.","lastModifiedDate":"2023-08-31"},{"lineNumber":125,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":126,"author":{"gitId":"thaddeusong"},"content":"class List extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":127,"author":{"gitId":"thaddeusong"},"content":"    protected List(String content) {","lastModifiedDate":"2023-08-31"},{"lineNumber":128,"author":{"gitId":"thaddeusong"},"content":"        super(content);","lastModifiedDate":"2023-08-29"},{"lineNumber":129,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":130,"author":{"gitId":"thaddeusong"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":131,"author":{"gitId":"thaddeusong"},"content":"    public Message execute(Application application) {","lastModifiedDate":"2023-08-31"},{"lineNumber":132,"author":{"gitId":"thaddeusong"},"content":"        return Message.accumulateList(Message.convertTasks(application.getTaskList()), \"\\n\").chainTo(","lastModifiedDate":"2023-08-31"},{"lineNumber":133,"author":{"gitId":"thaddeusong"},"content":"                Message.onList(application.getTaskList()), \"\\n\");","lastModifiedDate":"2023-08-31"},{"lineNumber":134,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":135,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-29"},{"lineNumber":136,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":137,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":138,"author":{"gitId":"thaddeusong"},"content":" * Represents a command to mark a task as completed.","lastModifiedDate":"2023-08-31"},{"lineNumber":139,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":140,"author":{"gitId":"thaddeusong"},"content":"class Mark extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":141,"author":{"gitId":"thaddeusong"},"content":"    protected Mark(String content) {","lastModifiedDate":"2023-08-31"},{"lineNumber":142,"author":{"gitId":"thaddeusong"},"content":"        super(content);","lastModifiedDate":"2023-08-29"},{"lineNumber":143,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":144,"author":{"gitId":"thaddeusong"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":145,"author":{"gitId":"thaddeusong"},"content":"    public Message execute(Application application)","lastModifiedDate":"2023-08-31"},{"lineNumber":146,"author":{"gitId":"thaddeusong"},"content":"            throws InvalidTaskIndexException, TaskIndexOutOfRangeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":147,"author":{"gitId":"thaddeusong"},"content":"        int taskIndex;","lastModifiedDate":"2023-08-29"},{"lineNumber":148,"author":{"gitId":"thaddeusong"},"content":"        Task task;","lastModifiedDate":"2023-08-29"},{"lineNumber":149,"author":{"gitId":"thaddeusong"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":150,"author":{"gitId":"thaddeusong"},"content":"            taskIndex \u003d Integer.parseInt(content) - 1;","lastModifiedDate":"2023-08-29"},{"lineNumber":151,"author":{"gitId":"thaddeusong"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":152,"author":{"gitId":"thaddeusong"},"content":"            throw new InvalidTaskIndexException(content);","lastModifiedDate":"2023-08-29"},{"lineNumber":153,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":154,"author":{"gitId":"thaddeusong"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":155,"author":{"gitId":"thaddeusong"},"content":"            task \u003d application.getTask(taskIndex);","lastModifiedDate":"2023-08-31"},{"lineNumber":156,"author":{"gitId":"thaddeusong"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":157,"author":{"gitId":"thaddeusong"},"content":"            throw new TaskIndexOutOfRangeException(String.valueOf(taskIndex));","lastModifiedDate":"2023-08-29"},{"lineNumber":158,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":159,"author":{"gitId":"thaddeusong"},"content":"        task.setCompleted();","lastModifiedDate":"2023-08-31"},{"lineNumber":160,"author":{"gitId":"thaddeusong"},"content":"        return Message.onTaskComplete(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":161,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":162,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-29"},{"lineNumber":163,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":164,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":165,"author":{"gitId":"thaddeusong"},"content":" * Represents a command to unmark a completed task.","lastModifiedDate":"2023-08-31"},{"lineNumber":166,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":167,"author":{"gitId":"thaddeusong"},"content":"class Unmark extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":168,"author":{"gitId":"thaddeusong"},"content":"    protected Unmark(String content) {","lastModifiedDate":"2023-08-31"},{"lineNumber":169,"author":{"gitId":"thaddeusong"},"content":"        super(content);","lastModifiedDate":"2023-08-29"},{"lineNumber":170,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":171,"author":{"gitId":"thaddeusong"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":172,"author":{"gitId":"thaddeusong"},"content":"    public Message execute(Application application)","lastModifiedDate":"2023-08-31"},{"lineNumber":173,"author":{"gitId":"thaddeusong"},"content":"            throws InvalidTaskIndexException, TaskIndexOutOfRangeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":174,"author":{"gitId":"thaddeusong"},"content":"        int taskIndex;","lastModifiedDate":"2023-08-29"},{"lineNumber":175,"author":{"gitId":"thaddeusong"},"content":"        Task task;","lastModifiedDate":"2023-08-29"},{"lineNumber":176,"author":{"gitId":"thaddeusong"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":177,"author":{"gitId":"thaddeusong"},"content":"            taskIndex \u003d Integer.parseInt(content) - 1;","lastModifiedDate":"2023-08-29"},{"lineNumber":178,"author":{"gitId":"thaddeusong"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":179,"author":{"gitId":"thaddeusong"},"content":"            throw new InvalidTaskIndexException(content);","lastModifiedDate":"2023-08-29"},{"lineNumber":180,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":181,"author":{"gitId":"thaddeusong"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":182,"author":{"gitId":"thaddeusong"},"content":"            task \u003d application.getTask(taskIndex);","lastModifiedDate":"2023-08-31"},{"lineNumber":183,"author":{"gitId":"thaddeusong"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":184,"author":{"gitId":"thaddeusong"},"content":"            throw new TaskIndexOutOfRangeException(String.valueOf(taskIndex));","lastModifiedDate":"2023-08-29"},{"lineNumber":185,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":186,"author":{"gitId":"thaddeusong"},"content":"        task.setUncompleted();","lastModifiedDate":"2023-08-31"},{"lineNumber":187,"author":{"gitId":"thaddeusong"},"content":"        return Message.onTaskUncomplete(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":188,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":189,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-29"},{"lineNumber":190,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":191,"author":{"gitId":"thaddeusong"},"content":"class Find extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":192,"author":{"gitId":"thaddeusong"},"content":"    public Find(String content) {","lastModifiedDate":"2023-08-31"},{"lineNumber":193,"author":{"gitId":"thaddeusong"},"content":"        super(content);","lastModifiedDate":"2023-08-31"},{"lineNumber":194,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":195,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":196,"author":{"gitId":"thaddeusong"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":197,"author":{"gitId":"thaddeusong"},"content":"    public Message execute(Application application) {","lastModifiedDate":"2023-08-31"},{"lineNumber":198,"author":{"gitId":"thaddeusong"},"content":"        return Message.onTaskFind().chainTo(","lastModifiedDate":"2023-08-31"},{"lineNumber":199,"author":{"gitId":"thaddeusong"},"content":"                Message.accumulateList(Message.convertTasks(application.findMatchingTasks(content)), \"\\n\"),","lastModifiedDate":"2023-08-31"},{"lineNumber":200,"author":{"gitId":"thaddeusong"},"content":"                \"\\n\");","lastModifiedDate":"2023-08-31"},{"lineNumber":201,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":202,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-31"},{"lineNumber":203,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":204,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":205,"author":{"gitId":"thaddeusong"},"content":" * Represents a command to delete a task from the task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":206,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":207,"author":{"gitId":"thaddeusong"},"content":"class Delete extends Command {","lastModifiedDate":"2023-08-29"},{"lineNumber":208,"author":{"gitId":"thaddeusong"},"content":"    protected Delete(String content) {","lastModifiedDate":"2023-08-31"},{"lineNumber":209,"author":{"gitId":"thaddeusong"},"content":"        super(content);","lastModifiedDate":"2023-08-29"},{"lineNumber":210,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":211,"author":{"gitId":"thaddeusong"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":212,"author":{"gitId":"thaddeusong"},"content":"    public Message execute(Application application)","lastModifiedDate":"2023-08-31"},{"lineNumber":213,"author":{"gitId":"thaddeusong"},"content":"            throws InvalidTaskIndexException, TaskIndexOutOfRangeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":214,"author":{"gitId":"thaddeusong"},"content":"        int taskIndex;","lastModifiedDate":"2023-08-29"},{"lineNumber":215,"author":{"gitId":"thaddeusong"},"content":"        Task task;","lastModifiedDate":"2023-08-29"},{"lineNumber":216,"author":{"gitId":"thaddeusong"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":217,"author":{"gitId":"thaddeusong"},"content":"            taskIndex \u003d Integer.parseInt(content) - 1;","lastModifiedDate":"2023-08-29"},{"lineNumber":218,"author":{"gitId":"thaddeusong"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":219,"author":{"gitId":"thaddeusong"},"content":"            throw new InvalidTaskIndexException(content);","lastModifiedDate":"2023-08-29"},{"lineNumber":220,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":221,"author":{"gitId":"thaddeusong"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":222,"author":{"gitId":"thaddeusong"},"content":"            task \u003d application.getTask(taskIndex);","lastModifiedDate":"2023-08-31"},{"lineNumber":223,"author":{"gitId":"thaddeusong"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":224,"author":{"gitId":"thaddeusong"},"content":"            throw new TaskIndexOutOfRangeException(String.valueOf(taskIndex));","lastModifiedDate":"2023-08-29"},{"lineNumber":225,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":226,"author":{"gitId":"thaddeusong"},"content":"        application.removeTask((task));","lastModifiedDate":"2023-08-31"},{"lineNumber":227,"author":{"gitId":"thaddeusong"},"content":"        return Message.onTaskDelete(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":228,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":229,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"thaddeusong":229}},{"path":"src/main/java/Duke/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"package Duke.duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"import Duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"thaddeusong"},"content":"import Duke.message.Message;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":"import Duke.parser.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":"import Duke.storage.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":"import Duke.application.Application;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":" * Represents the main class of the Duke application, responsible for initializing and running the application.","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"public class Duke {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"thaddeusong"},"content":"    @SuppressWarnings(\"FieldCanBeLocal\")","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"thaddeusong"},"content":"    private final String name \u003d \"Iris\";","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"thaddeusong"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"thaddeusong"},"content":"    private Application application;","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"thaddeusong"},"content":"    private boolean isAwake \u003d true;","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"thaddeusong"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"thaddeusong"},"content":"     * Constructs a Duke object and initializes the components.","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"thaddeusong"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"thaddeusong"},"content":"     * @param filePath The file path for data storage.","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"thaddeusong"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"thaddeusong"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"thaddeusong"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"thaddeusong"},"content":"            ui \u003d new Ui();","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"thaddeusong"},"content":"            Storage storage \u003d new Storage(filePath);","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"thaddeusong"},"content":"            application \u003d new Application(this, storage);","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"thaddeusong"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"thaddeusong"},"content":"            ui.showError(e);","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"thaddeusong"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"thaddeusong"},"content":"     * Initiates the execution of the Duke application.","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"thaddeusong"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"thaddeusong"},"content":"    public void run() {","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"thaddeusong"},"content":"        ui.showMessage(Message.onGreeting(name));","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"thaddeusong"},"content":"        while(isAwake){","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"thaddeusong"},"content":"            try {","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"thaddeusong"},"content":"                if(ui.hasNext())","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"thaddeusong"},"content":"                    ui.showMessage(ui.parseLine().execute(application));","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"thaddeusong"},"content":"            } catch (DukeException de){","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"thaddeusong"},"content":"                ui.showError(de);","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"thaddeusong"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"thaddeusong"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"thaddeusong"},"content":"     * Shuts down the program.","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"thaddeusong"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"thaddeusong"},"content":"    public void kill() {","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"thaddeusong"},"content":"        isAwake \u003d false;","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"thaddeusong"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"thaddeusong"},"content":"     * Entry point for Duke.","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"thaddeusong"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"thaddeusong"},"content":"     * @param args Unused.","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"thaddeusong"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"thaddeusong"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"thaddeusong"},"content":"        new Duke(\"C:\\\\Users\\\\ortt2\\\\Documents\\\\ip\\\\src\\\\data\\\\tasks.txt\").run();","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"thaddeusong":66}},{"path":"src/main/java/Duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"package Duke.exception;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"import Duke.message.ErrorMessage;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":" * An abstract class for custom exceptions specific to Duke.","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"thaddeusong"},"content":"public abstract class DukeException extends Exception{","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":"    protected DukeException(String message) {","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":"        super(message);","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"thaddeusong"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"thaddeusong"},"content":"     * Generates an error message object based on the exception\u0027s content.","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"thaddeusong"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"thaddeusong"},"content":"     * @param content Additional content related to the error.","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"thaddeusong"},"content":"     * @return An ErrorMessage object representing the error message.","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"thaddeusong"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"thaddeusong"},"content":"    public abstract ErrorMessage generateErrorMessage(String content);","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"thaddeusong":21}},{"path":"src/main/java/Duke/exception/EmptyTaskDescException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"package Duke.exception;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"import Duke.message.ErrorMessage;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":" * An exception that is thrown when a task description is empty.","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"thaddeusong"},"content":"public class EmptyTaskDescException extends DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":"    public EmptyTaskDescException(String message) {","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":"        super(message);","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"thaddeusong"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"thaddeusong"},"content":"    public ErrorMessage generateErrorMessage(String content) {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"thaddeusong"},"content":"        return new ErrorMessage(\"A task description cannot be empty.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"thaddeusong":19}},{"path":"src/main/java/Duke/exception/FileNotFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"package Duke.exception;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"import Duke.message.ErrorMessage;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":" * An exception that is thrown when the file cannot be found.","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":"public class FileNotFoundException extends DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"thaddeusong"},"content":"    public FileNotFoundException(String name) {","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":"        super(name);","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"    public ErrorMessage generateErrorMessage(String content) {","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"thaddeusong"},"content":"        return new ErrorMessage(\"There is no file at \" + content);","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"thaddeusong":15}},{"path":"src/main/java/Duke/exception/InvalidTaskFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"package Duke.exception;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"import Duke.message.ErrorMessage;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":" * An exception that is thrown when a task format is invalid.","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"thaddeusong"},"content":"public class InvalidTaskFormatException extends DukeException{","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":"    public InvalidTaskFormatException(String message) {","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":"        super(message);","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"thaddeusong"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"thaddeusong"},"content":"    public ErrorMessage generateErrorMessage(String content) {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"thaddeusong"},"content":"        return new ErrorMessage(content + \" isn\u0027t the right format for this kind of task.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"thaddeusong":17}},{"path":"src/main/java/Duke/exception/InvalidTaskIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"package Duke.exception;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"import Duke.message.ErrorMessage;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":" *","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":" * An exception that is thrown when a task index is invalid.","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"thaddeusong"},"content":"public class InvalidTaskIndexException extends DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":"    public InvalidTaskIndexException(String message) {","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":"        super(message);","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"thaddeusong"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"thaddeusong"},"content":"    public ErrorMessage generateErrorMessage(String content) {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"thaddeusong"},"content":"        return new ErrorMessage(content + \" isn\u0027t a number.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"thaddeusong":17}},{"path":"src/main/java/Duke/exception/InvalidTimeFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"package Duke.exception;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"import Duke.message.ErrorMessage;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":" * An exception that is thrown when a time format is invalid.","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"thaddeusong"},"content":"public class InvalidTimeFormatException extends DukeException{","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":"    public InvalidTimeFormatException(String message) {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":"        super(message);","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"thaddeusong"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"thaddeusong"},"content":"    public ErrorMessage generateErrorMessage(String content) {","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"thaddeusong"},"content":"        return new ErrorMessage(content + \" isn\u0027t the right time format.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"thaddeusong":17}},{"path":"src/main/java/Duke/exception/NoCommandFoundException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"package Duke.exception;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"import Duke.message.ErrorMessage;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":" * An exception that is thrown when a no matching command is found.","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"thaddeusong"},"content":"public class NoCommandFoundException extends DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":"    public NoCommandFoundException(String message){","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":"        super(message);","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"thaddeusong"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"thaddeusong"},"content":"    public ErrorMessage generateErrorMessage(String content) {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"thaddeusong"},"content":"        return new ErrorMessage(\"Sorry, I don\u0027t know what \" + content + \" means.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"thaddeusong":18}},{"path":"src/main/java/Duke/exception/TaskIndexOutOfRangeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"package Duke.exception;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"import Duke.message.ErrorMessage;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":" * An exception that is thrown when a task index is out of range.","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"thaddeusong"},"content":"public class TaskIndexOutOfRangeException extends DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":"    public TaskIndexOutOfRangeException(String message) {","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":"        super(message);","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"thaddeusong"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"thaddeusong"},"content":"    public ErrorMessage generateErrorMessage(String content) {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"thaddeusong"},"content":"        return new ErrorMessage(content + 1 + \" is out of range of the task list.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"thaddeusong":17}},{"path":"src/main/java/Duke/message/ErrorMessage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"package Duke.message;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"thaddeusong"},"content":" * Represents an error message that can be displayed to the user.","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":" * Extends the {@link Message} class.","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":"public class ErrorMessage extends Message{","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":"    String errorLine \u003d \"!-!-!-!-!-!-!-!-!-!-!-!-!-!-!-!\";","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":"    public ErrorMessage(String content) {","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":"        super(content);","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"thaddeusong"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"thaddeusong"},"content":"    public void print() {","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"thaddeusong"},"content":"        System.out.println(errorLine);","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"thaddeusong"},"content":"        System.out.println(this);","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"thaddeusong"},"content":"        System.out.println(errorLine);","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"thaddeusong":21}},{"path":"src/main/java/Duke/message/Message.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"package Duke.message;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"import Duke.task.Task;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"thaddeusong"},"content":"import Duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":"import java.util.List;","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":"public class Message {","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":"    final private static String horizontalLine \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":"    final private String content;","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"thaddeusong"},"content":"    public Message(String content) {","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"thaddeusong"},"content":"        this.content \u003d content;","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"thaddeusong"},"content":"    public static List\u003cMessage\u003e convertTasks(TaskList taskList) {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"thaddeusong"},"content":"        List\u003cMessage\u003e messages \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"thaddeusong"},"content":"        for (int i \u003d 0; i \u003c taskList.getTaskCount(); i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"thaddeusong"},"content":"            messages.add((new Message((i + 1) + \". \" + taskList.getTask(i).toString())));","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"thaddeusong"},"content":"        return messages;","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"thaddeusong"},"content":"    public static Message onGreeting(String name) {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"thaddeusong"},"content":"        return new Message(\"Hello, I\u0027m \" + name + \".\\n\" + \"What can I do for you?\");","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"thaddeusong"},"content":"    public static Message onExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"thaddeusong"},"content":"        return new Message(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"thaddeusong"},"content":"    public static Message onTaskAdd(Task task) {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"thaddeusong"},"content":"        return new Message(\"added: \" + task.toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":37,"author":{"gitId":"thaddeusong"},"content":"    public static Message onTaskComplete(Task task) {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"thaddeusong"},"content":"        return new Message(\"Nice! I\u0027ve marked this task as done:\\n\" + task.toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":39,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":40,"author":{"gitId":"thaddeusong"},"content":"    public static Message onTaskUncomplete(Task task) {","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"thaddeusong"},"content":"        return new Message(\"OK, I\u0027ve marked this task as not done yet:\\n\" + task.toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":42,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":43,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"thaddeusong"},"content":"    public static Message onTaskDelete(Task task) {","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"thaddeusong"},"content":"        return new Message(\"I\u0027ve removed this task: \\n\" + task.toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":46,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":47,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":48,"author":{"gitId":"thaddeusong"},"content":"    public static Message onTaskFind() {","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"thaddeusong"},"content":"        return new Message(\"Here are the matching tasks in your list\");","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"thaddeusong"},"content":"    public static Message onList(TaskList tasks) {","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"thaddeusong"},"content":"        return new Message(\"There are \" + tasks.getTaskCount() + \" tasks in the list.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"thaddeusong"},"content":"    public Message chainTo(Message message, String splitString) {","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"thaddeusong"},"content":"        return new Message(this.content + splitString + message.content);","lastModifiedDate":"2023-08-24"},{"lineNumber":57,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":58,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":59,"author":{"gitId":"thaddeusong"},"content":"    public static Message accumulateList(List\u003c? extends Message\u003e messages, String splitString) {","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"thaddeusong"},"content":"        Message chainedMessage \u003d new Message(\"\");","lastModifiedDate":"2023-08-24"},{"lineNumber":61,"author":{"gitId":"thaddeusong"},"content":"        if (messages.size() \u003e 0) {","lastModifiedDate":"2023-08-24"},{"lineNumber":62,"author":{"gitId":"thaddeusong"},"content":"            chainedMessage \u003d messages.get(0);","lastModifiedDate":"2023-08-24"},{"lineNumber":63,"author":{"gitId":"thaddeusong"},"content":"            for (int i \u003d 1; i \u003c messages.size(); i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"thaddeusong"},"content":"                Message message \u003d messages.get(i);","lastModifiedDate":"2023-08-24"},{"lineNumber":65,"author":{"gitId":"thaddeusong"},"content":"                chainedMessage \u003d chainedMessage.chainTo(message, splitString);","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"thaddeusong"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":67,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":68,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":69,"author":{"gitId":"thaddeusong"},"content":"        return chainedMessage;","lastModifiedDate":"2023-08-24"},{"lineNumber":70,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":71,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":72,"author":{"gitId":"thaddeusong"},"content":"    public void print() {","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"thaddeusong"},"content":"        System.out.println(horizontalLine);","lastModifiedDate":"2023-08-24"},{"lineNumber":74,"author":{"gitId":"thaddeusong"},"content":"        System.out.println(this);","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"thaddeusong"},"content":"        System.out.println(horizontalLine);","lastModifiedDate":"2023-08-24"},{"lineNumber":76,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":77,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"thaddeusong"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"thaddeusong"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"thaddeusong"},"content":"        return content;","lastModifiedDate":"2023-08-24"},{"lineNumber":81,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":82,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":83,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"thaddeusong":83}},{"path":"src/main/java/Duke/parser/InputParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"package Duke.parser;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"thaddeusong"},"content":"import Duke.command.*;","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"import Duke.exception.*;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":" * Parses user input and returns the corresponding command object.","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"thaddeusong"},"content":"public class InputParser {","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":"    public Command parseInput(String input)","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":"        throws DukeException{","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":"        String[] inputComponents \u003d input.trim().split(\" \", 2);","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"        String commandName \u003d inputComponents[0];","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"thaddeusong"},"content":"        String content \u003d \"\";","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"thaddeusong"},"content":"        if(inputComponents.length \u003e 1) {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"thaddeusong"},"content":"            content \u003d inputComponents[1];","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"thaddeusong"},"content":"        return Command.of(commandName, content);","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"thaddeusong":19}},{"path":"src/main/java/Duke/parser/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"package Duke.parser;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"import Duke.command.Command;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"thaddeusong"},"content":"import Duke.exception.DukeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":"import Duke.message.Message;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":" * Handles user interactions, input parsing, and displaying messages.","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"public class Ui {","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"thaddeusong"},"content":"    Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"thaddeusong"},"content":"    private final InputParser parser \u003d new InputParser();","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"thaddeusong"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"thaddeusong"},"content":"     * Parses the next line of user input into a Command object.","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"thaddeusong"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"thaddeusong"},"content":"     * @return A Command object corresponding to the parsed user input.","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"thaddeusong"},"content":"     * @throws DukeException If there\u0027s an issue with parsing the input or creating the command.","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"thaddeusong"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"thaddeusong"},"content":"    public Command parseLine() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"thaddeusong"},"content":"        return parser.parseInput(scanner.nextLine());","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"thaddeusong"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"thaddeusong"},"content":"     * Checks if there is more user input to be read.","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"thaddeusong"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"thaddeusong"},"content":"     * @return true if there is more input, false otherwise.","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"thaddeusong"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"thaddeusong"},"content":"    public boolean hasNext() {","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"thaddeusong"},"content":"        return scanner.hasNext();","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"thaddeusong"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"thaddeusong"},"content":"     * Displays the provided message to the user.","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"thaddeusong"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"thaddeusong"},"content":"     * @param message The message to be displayed.","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"thaddeusong"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"thaddeusong"},"content":"    public void showMessage(Message message) {","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"thaddeusong"},"content":"        message.print();","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"thaddeusong"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"thaddeusong"},"content":"     * Displays an error message generated from the provided DukeException.","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"thaddeusong"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"thaddeusong"},"content":"     * @param e The DukeException that triggered the error.","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"thaddeusong"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"thaddeusong"},"content":"    public void showError(DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"thaddeusong"},"content":"        e.generateErrorMessage(e.getMessage()).print();","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"thaddeusong":52}},{"path":"src/main/java/Duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"package Duke.storage;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"import Duke.exception.FileNotFoundException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"thaddeusong"},"content":"import java.io.*;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":"import java.util.List;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"thaddeusong"},"content":"public class Storage {","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":"    String filePath;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":"    private File file;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":"    private BufferedWriter bufferedWriter;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"thaddeusong"},"content":"    public Storage(String filePath) throws FileNotFoundException {","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"thaddeusong"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"thaddeusong"},"content":"        file \u003d new File(filePath);","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"thaddeusong"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"thaddeusong"},"content":"            bufferedWriter \u003d new BufferedWriter(new FileWriter(file, true));","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"thaddeusong"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"thaddeusong"},"content":"            throw new FileNotFoundException(filePath);","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"thaddeusong"},"content":"    public void addLine(String line) {","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"thaddeusong"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"thaddeusong"},"content":"            bufferedWriter.write(line);","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"thaddeusong"},"content":"            bufferedWriter.newLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"thaddeusong"},"content":"            bufferedWriter.flush();","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"thaddeusong"},"content":"        } catch (IOException e){","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"thaddeusong"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"thaddeusong"},"content":"    public String getLine(int index) {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"thaddeusong"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"thaddeusong"},"content":"            BufferedReader bufferedReader \u003d new BufferedReader(new FileReader(file));","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"thaddeusong"},"content":"            String line;","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"thaddeusong"},"content":"            int currentLine \u003d 1;","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"thaddeusong"},"content":"            while ((line \u003d bufferedReader.readLine()) !\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"thaddeusong"},"content":"                if(index \u003d\u003d currentLine) {","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"thaddeusong"},"content":"                    return line;","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"thaddeusong"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"thaddeusong"},"content":"                currentLine++;","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"thaddeusong"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"thaddeusong"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"thaddeusong"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"thaddeusong"},"content":"        return \"\";","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"thaddeusong"},"content":"    public void removeLine(int lineIndex) {","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"thaddeusong"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"thaddeusong"},"content":"            List\u003cString\u003e lines \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"thaddeusong"},"content":"            BufferedReader bufferedReader \u003d new BufferedReader(new FileReader(file));","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"thaddeusong"},"content":"            String line;","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"thaddeusong"},"content":"            int currentLine \u003d 1;","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"thaddeusong"},"content":"            while ((line \u003d bufferedReader.readLine()) !\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"thaddeusong"},"content":"                if (currentLine !\u003d lineIndex) {","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"thaddeusong"},"content":"                    lines.add(line);","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"thaddeusong"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"thaddeusong"},"content":"                currentLine++;","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"thaddeusong"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"thaddeusong"},"content":"            bufferedWriter.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"thaddeusong"},"content":"            bufferedReader.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"thaddeusong"},"content":"            file \u003d new File(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"thaddeusong"},"content":"            bufferedWriter \u003d new BufferedWriter(new FileWriter(file));","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"thaddeusong"},"content":"            for (String lineToAdd : lines) {","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"thaddeusong"},"content":"                bufferedWriter.write(lineToAdd);","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"thaddeusong"},"content":"                bufferedWriter.newLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"thaddeusong"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"thaddeusong"},"content":"            bufferedWriter.flush();","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"thaddeusong"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"thaddeusong"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"thaddeusong"},"content":"    public void clear() {   // Create a FileWriter with the given file path","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"thaddeusong"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"thaddeusong"},"content":"            FileWriter fileWriter \u003d new FileWriter(file);","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"thaddeusong"},"content":"            // Overwrite the file content with an empty string","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"thaddeusong"},"content":"            fileWriter.write(\"\");","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"thaddeusong"},"content":"            // Close the FileWriter","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"thaddeusong"},"content":"            fileWriter.close();","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"thaddeusong"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"thaddeusong"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"thaddeusong":90}},{"path":"src/main/java/Duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"package Duke.task;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"import Duke.exception.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"thaddeusong"},"content":"import Duke.exception.InvalidTaskFormatException;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":"import Duke.exception.InvalidTimeFormatException;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"thaddeusong"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"thaddeusong"},"content":" * Represents a deadline task that has a name and deadline time.","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"thaddeusong"},"content":" * Extends the {@link Task} class.","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"thaddeusong"},"content":"public class Deadline extends Task{","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"thaddeusong"},"content":"    final private LocalDateTime deadlineTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"thaddeusong"},"content":"    public Deadline(String task) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"thaddeusong"},"content":"        super(task.split(\"/\",2)[0]);","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"thaddeusong"},"content":"        String[] taskComponents \u003d task.split(\"/\",2);","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"thaddeusong"},"content":"        String[] timeComponents;","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"thaddeusong"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"thaddeusong"},"content":"            timeComponents \u003d taskComponents[1].split(\" \", 3);","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"thaddeusong"},"content":"            if (timeComponents.length \u003c 3) {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"thaddeusong"},"content":"                throw new InvalidTimeFormatException(taskComponents[1]);","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"thaddeusong"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"thaddeusong"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"thaddeusong"},"content":"            throw new InvalidTaskFormatException(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"thaddeusong"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"thaddeusong"},"content":"            deadlineTime \u003d LocalDateTime.of(LocalDate.parse(timeComponents[1]),","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"thaddeusong"},"content":"                    LocalTime.parse(timeComponents[2]));","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"thaddeusong"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"thaddeusong"},"content":"            throw new InvalidTimeFormatException(taskComponents[1]);","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"thaddeusong"},"content":"    public static Deadline unpackSaveFormat(String savedTask) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"thaddeusong"},"content":"        String[] components \u003d savedTask.split(\"\\\\|\", 3);","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"thaddeusong"},"content":"        Deadline task \u003d new Deadline(components[1] + \"/by \" + components[0]);","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"thaddeusong"},"content":"        if(components[2].equals(\"true\"))","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"thaddeusong"},"content":"            task.setCompleted();","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"thaddeusong"},"content":"        else","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"thaddeusong"},"content":"            task.setUncompleted();","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"thaddeusong"},"content":"        return task;","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"thaddeusong"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"thaddeusong"},"content":"    public String toString() {","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"thaddeusong"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + deadlineTime.toLocalDate().toString() + \",\"","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"thaddeusong"},"content":"                + deadlineTime.toLocalTime().toString() + \")\";","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"thaddeusong"},"content":"    public String toSaveFormat(){","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"thaddeusong"},"content":"        return \"deadline:\" + deadlineTime.toLocalDate().toString() + \" \"","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"thaddeusong"},"content":"                + deadlineTime.toLocalTime().toString() + \"|\" + super.toSaveFormat();","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"thaddeusong":57}},{"path":"src/main/java/Duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"package Duke.task;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"import Duke.exception.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"thaddeusong"},"content":"import Duke.exception.InvalidTaskFormatException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":"import Duke.exception.InvalidTimeFormatException;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"thaddeusong"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"thaddeusong"},"content":" * Represents an event task that has a name, start time, and end time.","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"thaddeusong"},"content":" * Extends the {@link Task} class.","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"thaddeusong"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"thaddeusong"},"content":"    final private LocalDateTime startTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"thaddeusong"},"content":"    final private LocalDateTime endTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"thaddeusong"},"content":"    public Event(String task) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"thaddeusong"},"content":"        super(task.split(\"/\", 3)[0]);","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"thaddeusong"},"content":"        String[] taskComponents \u003d task.split(\"/\", 3);","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"thaddeusong"},"content":"        String[] startTimeComponents;","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"thaddeusong"},"content":"        String[] endTimeComponents;","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"thaddeusong"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"thaddeusong"},"content":"            startTimeComponents \u003d taskComponents[1].split(\" \", 3);","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"thaddeusong"},"content":"            endTimeComponents \u003d taskComponents[2].split(\" \", 3);","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"thaddeusong"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"thaddeusong"},"content":"            throw new InvalidTaskFormatException(task);","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"thaddeusong"},"content":"        if (startTimeComponents.length \u003c 3) {","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"thaddeusong"},"content":"            throw new InvalidTimeFormatException(taskComponents[1]);","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"thaddeusong"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"thaddeusong"},"content":"            this.startTime \u003d LocalDateTime.of(LocalDate.parse(startTimeComponents[1]),","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"thaddeusong"},"content":"                    LocalTime.parse(startTimeComponents[2]));","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"thaddeusong"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"thaddeusong"},"content":"            throw new InvalidTimeFormatException(taskComponents[1]);","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"thaddeusong"},"content":"        if (endTimeComponents.length \u003c 2) {","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"thaddeusong"},"content":"            throw new InvalidTimeFormatException(taskComponents[2]);","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"thaddeusong"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"thaddeusong"},"content":"            this.endTime \u003d LocalDateTime.of(LocalDate.parse(endTimeComponents[1]),","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"thaddeusong"},"content":"                    LocalTime.parse(endTimeComponents[2]));","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"thaddeusong"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"thaddeusong"},"content":"            throw new InvalidTimeFormatException(taskComponents[2]);","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"thaddeusong"},"content":"    public static Event unpackSaveFormat(String savedTask) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"thaddeusong"},"content":"        String[] components \u003d savedTask.split(\"\\\\|\", 4);","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"thaddeusong"},"content":"        Event task \u003d new Event(components[2] + \"/from \" + components[0] + \"/to \" + components[1]);","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"thaddeusong"},"content":"        if(components[3].equals(\"true\"))","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"thaddeusong"},"content":"            task.setCompleted();","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"thaddeusong"},"content":"        else","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"thaddeusong"},"content":"            task.setUncompleted();","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"thaddeusong"},"content":"        return task;","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"thaddeusong"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"thaddeusong"},"content":"    public String toString() {","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"thaddeusong"},"content":"        return \"[E]\" + super.toString() + \" (from: \" +","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"thaddeusong"},"content":"                startTime.toLocalDate().toString() + \",\" + startTime.toLocalTime().toString() + \" to: \" +","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"thaddeusong"},"content":"                endTime.toLocalDate().toString() + \",\" + endTime.toLocalTime().toString() + \")\";","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"thaddeusong"},"content":"    public String toSaveFormat(){","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"thaddeusong"},"content":"        return \"event:\" +","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"thaddeusong"},"content":"                startTime.toLocalDate().toString() + \" \" + startTime.toLocalTime().toString() + \"|\" +","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"thaddeusong"},"content":"                endTime.toLocalDate().toString() + \" \" + endTime.toLocalTime() + \"|\" + super.toSaveFormat();","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"thaddeusong":71}},{"path":"src/main/java/Duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"package Duke.task;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"import Duke.exception.DukeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"thaddeusong"},"content":"import Duke.exception.EmptyTaskDescException;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":"import Duke.exception.NoCommandFoundException;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"thaddeusong"},"content":" * Represents a task with a name and completion status.","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":"    final private String name;","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"    private boolean completed \u003d false;","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"thaddeusong"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"thaddeusong"},"content":"     * Parses a task from a line of text.","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"thaddeusong"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"thaddeusong"},"content":"     * @param line The line of text containing task information.","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"thaddeusong"},"content":"     * @return A Task object parsed from the input line.","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"thaddeusong"},"content":"     * @throws DukeException If there\u0027s an issue with parsing the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"thaddeusong"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"thaddeusong"},"content":"    public static Task parse(String line)","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"thaddeusong"},"content":"            throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"thaddeusong"},"content":"        String[] components \u003d line.split(\":\", 2);","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"thaddeusong"},"content":"        TaskType taskType \u003d components[0].equals(\"todo\") ? TaskType.TODO","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"thaddeusong"},"content":"                          : components[0].equals(\"deadline\") ? TaskType.DEADLINE","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"thaddeusong"},"content":"                          : TaskType.EVENT;","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"thaddeusong"},"content":"        String content \u003d components[1];","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"thaddeusong"},"content":"        switch (taskType) {","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"thaddeusong"},"content":"        case TODO:","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"thaddeusong"},"content":"            return Todo.unpackSaveFormat(content);","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"thaddeusong"},"content":"        case DEADLINE:","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"thaddeusong"},"content":"            return Deadline.unpackSaveFormat(content);","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"thaddeusong"},"content":"        case EVENT:","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"thaddeusong"},"content":"            return Event.unpackSaveFormat(content);","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"thaddeusong"},"content":"        default:","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"thaddeusong"},"content":"            throw new NoCommandFoundException(taskType.name());","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"thaddeusong"},"content":"    public boolean containsString(String content) {","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"thaddeusong"},"content":"        return name.contains(content);","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"thaddeusong"},"content":"    public enum TaskType {","lastModifiedDate":"2023-08-24"},{"lineNumber":46,"author":{"gitId":"thaddeusong"},"content":"        TODO,","lastModifiedDate":"2023-08-24"},{"lineNumber":47,"author":{"gitId":"thaddeusong"},"content":"        DEADLINE,","lastModifiedDate":"2023-08-24"},{"lineNumber":48,"author":{"gitId":"thaddeusong"},"content":"        EVENT","lastModifiedDate":"2023-08-24"},{"lineNumber":49,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":50,"author":{"gitId":"thaddeusong"},"content":"    public Task(String name) throws EmptyTaskDescException {","lastModifiedDate":"2023-08-28"},{"lineNumber":51,"author":{"gitId":"thaddeusong"},"content":"        if(name.isBlank()) {","lastModifiedDate":"2023-08-24"},{"lineNumber":52,"author":{"gitId":"thaddeusong"},"content":"            throw new EmptyTaskDescException(\"Name cannot be blank.\");","lastModifiedDate":"2023-08-28"},{"lineNumber":53,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"thaddeusong"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-08-24"},{"lineNumber":55,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":57,"author":{"gitId":"thaddeusong"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"thaddeusong"},"content":"     * Creates a Task object based on the provided content and task type.","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"thaddeusong"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"thaddeusong"},"content":"     * @param task The content of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"thaddeusong"},"content":"     * @param taskType The type of the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"thaddeusong"},"content":"     * @return A Task object of the specified type.","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"thaddeusong"},"content":"     * @throws DukeException If there\u0027s an issue with creating the task.","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"thaddeusong"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"thaddeusong"},"content":"    public static Task of(String task, TaskType taskType)","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"thaddeusong"},"content":"            throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"thaddeusong"},"content":"        switch (taskType) {","lastModifiedDate":"2023-08-24"},{"lineNumber":68,"author":{"gitId":"thaddeusong"},"content":"            case TODO:","lastModifiedDate":"2023-08-24"},{"lineNumber":69,"author":{"gitId":"thaddeusong"},"content":"                return new Todo(task);","lastModifiedDate":"2023-08-24"},{"lineNumber":70,"author":{"gitId":"thaddeusong"},"content":"            case DEADLINE:","lastModifiedDate":"2023-08-24"},{"lineNumber":71,"author":{"gitId":"thaddeusong"},"content":"                return new Deadline(task);","lastModifiedDate":"2023-08-24"},{"lineNumber":72,"author":{"gitId":"thaddeusong"},"content":"            case EVENT:","lastModifiedDate":"2023-08-24"},{"lineNumber":73,"author":{"gitId":"thaddeusong"},"content":"                return new Event(task);","lastModifiedDate":"2023-08-24"},{"lineNumber":74,"author":{"gitId":"thaddeusong"},"content":"            default:","lastModifiedDate":"2023-08-24"},{"lineNumber":75,"author":{"gitId":"thaddeusong"},"content":"                throw new NoCommandFoundException(taskType.name());","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"thaddeusong"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":77,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":78,"author":{"gitId":"thaddeusong"},"content":"    public void setCompleted(){","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"thaddeusong"},"content":"        completed \u003d true;","lastModifiedDate":"2023-08-24"},{"lineNumber":80,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":81,"author":{"gitId":"thaddeusong"},"content":"    public void setUncompleted(){","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"thaddeusong"},"content":"        completed \u003d false;","lastModifiedDate":"2023-08-24"},{"lineNumber":83,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":84,"author":{"gitId":"thaddeusong"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"thaddeusong"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":86,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":87,"author":{"gitId":"thaddeusong"},"content":"        return completed ? \"[X] \" + name : \"[ ] \" + name;","lastModifiedDate":"2023-08-24"},{"lineNumber":88,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":89,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":90,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":91,"author":{"gitId":"thaddeusong"},"content":"    public String toSaveFormat(){","lastModifiedDate":"2023-08-28"},{"lineNumber":92,"author":{"gitId":"thaddeusong"},"content":"        return name + \"|\" + completed;","lastModifiedDate":"2023-08-28"},{"lineNumber":93,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":94,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"thaddeusong":94}},{"path":"src/main/java/Duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"package Duke.task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"thaddeusong"},"content":"import java.util.List;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":"public class TaskList {","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":"    private final List\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":"        taskList.add(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"thaddeusong"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"thaddeusong"},"content":"        return taskList.get(index);","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"thaddeusong"},"content":"    public void removeTask(Task task) {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"thaddeusong"},"content":"        taskList.remove(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"thaddeusong"},"content":"    public int findTaskIndex(Task task) {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"thaddeusong"},"content":"        return taskList.indexOf(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"thaddeusong"},"content":"    public int getTaskCount() {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"thaddeusong"},"content":"        return taskList.size();","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"thaddeusong":28}},{"path":"src/main/java/Duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"package Duke.task;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"import Duke.exception.EmptyTaskDescException;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":" * Represents a to-do task that has a name.","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":" * Extends the {@link Task} class.","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"thaddeusong"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":"public class Todo extends Task{","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":"    public Todo(String task) throws EmptyTaskDescException {","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":"        super(task);","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"thaddeusong"},"content":"    public static Todo unpackSaveFormat(String savedTask) throws EmptyTaskDescException {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"thaddeusong"},"content":"        String[] components \u003d savedTask.split(\"\\\\|\", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"thaddeusong"},"content":"        Todo task \u003d new Todo(components[0]);","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"thaddeusong"},"content":"        if(components[1].equals(\"true\"))","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"thaddeusong"},"content":"            task.setCompleted();","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"thaddeusong"},"content":"        else","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"thaddeusong"},"content":"            task.setUncompleted();","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"thaddeusong"},"content":"        return task;","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"thaddeusong"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"thaddeusong"},"content":"    public String toString() {","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"thaddeusong"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"thaddeusong"},"content":"    public String toSaveFormat(){","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"thaddeusong"},"content":"        return \"todo:\" + super.toSaveFormat();","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"thaddeusong":30}},{"path":"src/test/java/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"package task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"import Duke.exception.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"thaddeusong"},"content":"import Duke.task.Deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":"    public void testDeadlineConstructor() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"        assertEquals(new Deadline(\"a/by 2020-02-10 10:15\").toString(), \"[D][ ] a (by: 2020-02-10,10:15)\");","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"thaddeusong"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"thaddeusong"},"content":"    public void testDeadlineToSaveFormat() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"thaddeusong"},"content":"        assertEquals(new Deadline(\"a/by 2020-02-10 10:15\").toSaveFormat(), \"deadline:2020-02-10,10:15|a|false\");","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"thaddeusong":19}},{"path":"src/test/java/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"package task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"import Duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"thaddeusong"},"content":"import Duke.task.Event;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":"public class EventTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":"    public void testEventConstructor() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"        assertEquals(new Event(\"a/from 2020-02-10 10:15/to 2020-02-10 10:20\").toString(), \"[E][ ] a (from: 2020-02-10,10:15 to: 2020-02-10,10:20)\");","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"thaddeusong"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"thaddeusong"},"content":"    public void testEventToSaveFormat() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"thaddeusong"},"content":"        assertEquals(new Event(\"a/from 2020-02-10 10:15/to 2020-02-10 10:20\").toSaveFormat(), \"event:2020-02-10 10:15|2020-02-10 10:20|a|false\");","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"thaddeusong":19}},{"path":"src/test/java/task/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"package task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"import Duke.exception.EmptyTaskDescException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"thaddeusong"},"content":"import Duke.task.Todo;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":"public class TodoTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":"    public void testTodoConstructor() throws EmptyTaskDescException {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"        assertEquals(new Todo(\"a\").toString(), \"[T][ ] a\");","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"thaddeusong"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"thaddeusong"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"thaddeusong"},"content":"    public void testTodoToSaveFormat() throws EmptyTaskDescException {","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"thaddeusong"},"content":"        assertEquals(new Todo(\"a\").toSaveFormat(), \"todo:a|false\");","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"thaddeusong"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"thaddeusong"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"thaddeusong":19}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"thaddeusong"},"content":"hello","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"thaddeusong"},"content":"todo a","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"thaddeusong"},"content":"deadline b / by jun 1","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"thaddeusong"},"content":"event c / from jun 1 / to jun 2","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"thaddeusong"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"thaddeusong"},"content":"mark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"thaddeusong"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"thaddeusong"},"content":"mark 2","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"thaddeusong"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":"unmark 2","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":"list","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"thaddeusong":11}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"thaddeusong"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Task\\*.java","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"thaddeusong"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke\\*.java","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"thaddeusong"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\DukeException\\*.java","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"thaddeusong":3,"-":20}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"thaddeusong"},"content":"if ! (javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"thaddeusong"},"content":"      javac  -cp ..\\src\\main\\java\\Duke -Xlint:none -d ..\\bin ..\\src\\main\\java\\Duke\\*.java","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"thaddeusong"},"content":"      javac  -cp ..\\src\\main\\java\\DukeException -Xlint:none -d ..\\bin ..\\src\\main\\java\\DukeException\\*.java","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"thaddeusong"},"content":"      javac  -cp ..\\src\\main\\java\\Task -Xlint:none -d ..\\bin ..\\src\\main\\java\\Task\\*.java)","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"thaddeusong":4,"-":37}}]
