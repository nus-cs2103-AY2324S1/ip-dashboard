[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"LimJH2002"},"content":"//    mainClassName \u003d \u0027simon.Simon.Main\u0027","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"LimJH2002"},"content":"    mainClass.set(\"simon.Launcher\")","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"LimJH2002"},"content":"checkstyle {","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"LimJH2002"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"LimJH2002"},"content":"    archiveFileName \u003d \u0027simon.jar\u0027","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"LimJH2002"},"content":"    archiveBaseName \u003d \"simon\"","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"LimJH2002":22,"-":42}},{"path":"data/testSaveFile.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"T | 0 | Test Task","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"LimJH2002":1}},{"path":"src/main/java/simon/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package simon;","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"LimJH2002"},"content":"        try {","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"LimJH2002"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"LimJH2002"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"LimJH2002"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"LimJH2002"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"LimJH2002"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"LimJH2002"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"LimJH2002"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-08"},{"lineNumber":45,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":46,"author":{"gitId":"LimJH2002"},"content":"    private void flip() {","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"LimJH2002"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"LimJH2002"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"LimJH2002"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"LimJH2002"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-08"},{"lineNumber":51,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":52,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"LimJH2002"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-08"},{"lineNumber":54,"author":{"gitId":"LimJH2002"},"content":"        DialogBox db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-08"},{"lineNumber":55,"author":{"gitId":"LimJH2002"},"content":"        db.getStyleClass().add(\"user-dialog\");","lastModifiedDate":"2023-09-08"},{"lineNumber":56,"author":{"gitId":"LimJH2002"},"content":"        ((VBox) db.getChildren().get(0)).setAlignment(Pos.CENTER_RIGHT);","lastModifiedDate":"2023-09-08"},{"lineNumber":57,"author":{"gitId":"LimJH2002"},"content":"        return db;","lastModifiedDate":"2023-09-08"},{"lineNumber":58,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":59,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":60,"author":{"gitId":"LimJH2002"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-09-08"},{"lineNumber":61,"author":{"gitId":"LimJH2002"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-08"},{"lineNumber":62,"author":{"gitId":"LimJH2002"},"content":"        db.flip();","lastModifiedDate":"2023-09-08"},{"lineNumber":63,"author":{"gitId":"LimJH2002"},"content":"        db.getStyleClass().add(\"duke-dialog\");","lastModifiedDate":"2023-09-08"},{"lineNumber":64,"author":{"gitId":"LimJH2002"},"content":"        ((VBox) db.getChildren().get(1)).setAlignment(Pos.CENTER_LEFT);","lastModifiedDate":"2023-09-08"},{"lineNumber":65,"author":{"gitId":"LimJH2002"},"content":"        return db;","lastModifiedDate":"2023-09-08"},{"lineNumber":66,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":67,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":68,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"LimJH2002":68}},{"path":"src/main/java/simon/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package simon;","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"public class Launcher {","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"LimJH2002":13}},{"path":"src/main/java/simon/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package simon;","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"import java.util.Objects;","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"import simon.MainWindow;","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":" * A GUI for Simon using FXML.","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"    private Simon simon \u003d new Simon();","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"    @Override","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"        try {","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"            scene.getStylesheets().add(Objects.requireNonNull(getClass().getResource(\"/view/styles.css\")).toExternalForm());","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(simon);","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"            stage.show();","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"LimJH2002"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"LimJH2002"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"LimJH2002":34}},{"path":"src/main/java/simon/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package simon;","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"import simon.DialogBox;","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"    private Simon simon;","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"LimJH2002"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"LimJH2002"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"        Ui.showWelcome();","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"LimJH2002"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"LimJH2002"},"content":"                DialogBox.getDukeDialog(ui.getOutput() , dukeImage)","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"LimJH2002"},"content":"        );","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"LimJH2002"},"content":"    public void setDuke(Simon d) {","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"LimJH2002"},"content":"        simon \u003d d;","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":45,"author":{"gitId":"LimJH2002"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-08"},{"lineNumber":46,"author":{"gitId":"LimJH2002"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"LimJH2002"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"LimJH2002"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"LimJH2002"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-08"},{"lineNumber":51,"author":{"gitId":"LimJH2002"},"content":"        String response \u003d simon.getResponse(input);","lastModifiedDate":"2023-09-08"},{"lineNumber":52,"author":{"gitId":"LimJH2002"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"LimJH2002"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-08"},{"lineNumber":54,"author":{"gitId":"LimJH2002"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-09-08"},{"lineNumber":55,"author":{"gitId":"LimJH2002"},"content":"        );","lastModifiedDate":"2023-09-08"},{"lineNumber":56,"author":{"gitId":"LimJH2002"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-08"},{"lineNumber":57,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":58,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"LimJH2002":58}},{"path":"src/main/java/simon/Simon.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package simon;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"import simon.command.Parser;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"import simon.task.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":" * The main class for the {@code Simon} application.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":" * It handles the primary loop of the application and interacts with the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"public class Simon extends Application {","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"    /** List of tasks maintained by the {@code Simon} application. */","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"    /** Storage handler for saving and loading tasks from a file. */","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"    private final Storage storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"    /** UI handler for displaying messages and prompts to the user. */","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"    private final Ui ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"LimJH2002"},"content":"    /** Horizontal line for UI formatting. */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"    protected static final String SPACE \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LimJH2002"},"content":"    /** Horizontal line with newline prefix for UI formatting. */","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LimJH2002"},"content":"    protected static final String NSPACE \u003d \"\\n____________________________________________________________\";","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"    /** Horizontal line with newline suffix for UI formatting. */","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"    protected static final String SPACEN \u003d \"____________________________________________________________\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"LimJH2002"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"LimJH2002"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"LimJH2002"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"LimJH2002"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"LimJH2002"},"content":"    private Scene scene;","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"LimJH2002"},"content":"    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":45,"author":{"gitId":"LimJH2002"},"content":"    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":46,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"LimJH2002"},"content":"    public Simon() {","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"LimJH2002"},"content":"        this(\"data/simon.txt\");  // use default filePath","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"LimJH2002"},"content":"     * Constructs a new {@code Simon} application instance.","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"LimJH2002"},"content":"     * @param filePath Path to the file where tasks will be saved and loaded from.","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"LimJH2002"},"content":"    public Simon(String filePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"LimJH2002"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"LimJH2002"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"LimJH2002"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"LimJH2002"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"LimJH2002"},"content":"        } catch (SimonException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"LimJH2002"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"LimJH2002"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":66,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":67,"author":{"gitId":"LimJH2002"},"content":"    public void run2(String inData) {","lastModifiedDate":"2023-09-08"},{"lineNumber":68,"author":{"gitId":"LimJH2002"},"content":"        ui.showWelcome();","lastModifiedDate":"2023-09-08"},{"lineNumber":69,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":70,"author":{"gitId":"LimJH2002"},"content":"        Parser.Command command \u003d Parser.parseCommand(inData.split(\" \")[0]);","lastModifiedDate":"2023-09-08"},{"lineNumber":71,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":72,"author":{"gitId":"LimJH2002"},"content":"        try {","lastModifiedDate":"2023-09-08"},{"lineNumber":73,"author":{"gitId":"LimJH2002"},"content":"            switch (command) {","lastModifiedDate":"2023-09-08"},{"lineNumber":74,"author":{"gitId":"LimJH2002"},"content":"                case LIST:","lastModifiedDate":"2023-09-08"},{"lineNumber":75,"author":{"gitId":"LimJH2002"},"content":"                    ui.listTasks(tasks);","lastModifiedDate":"2023-09-08"},{"lineNumber":76,"author":{"gitId":"LimJH2002"},"content":"                    break;","lastModifiedDate":"2023-09-08"},{"lineNumber":77,"author":{"gitId":"LimJH2002"},"content":"                case TODO:","lastModifiedDate":"2023-09-08"},{"lineNumber":78,"author":{"gitId":"LimJH2002"},"content":"                case DEADLINE:","lastModifiedDate":"2023-09-08"},{"lineNumber":79,"author":{"gitId":"LimJH2002"},"content":"                case EVENT:","lastModifiedDate":"2023-09-08"},{"lineNumber":80,"author":{"gitId":"LimJH2002"},"content":"                    Task newTask \u003d Parser.parseAddTask(inData, command);","lastModifiedDate":"2023-09-08"},{"lineNumber":81,"author":{"gitId":"LimJH2002"},"content":"                    tasks.addTask(newTask);","lastModifiedDate":"2023-09-08"},{"lineNumber":82,"author":{"gitId":"LimJH2002"},"content":"                    storage.save(tasks.getAllTasks());","lastModifiedDate":"2023-09-08"},{"lineNumber":83,"author":{"gitId":"LimJH2002"},"content":"                    ui.showAddedTask(newTask, tasks.getTaskCount());","lastModifiedDate":"2023-09-08"},{"lineNumber":84,"author":{"gitId":"LimJH2002"},"content":"                    break;","lastModifiedDate":"2023-09-08"},{"lineNumber":85,"author":{"gitId":"LimJH2002"},"content":"                case UNMARK:","lastModifiedDate":"2023-09-08"},{"lineNumber":86,"author":{"gitId":"LimJH2002"},"content":"                    Task unmarkedTask \u003d tasks.markTask(inData, false);","lastModifiedDate":"2023-09-08"},{"lineNumber":87,"author":{"gitId":"LimJH2002"},"content":"                    storage.save(tasks.getAllTasks());","lastModifiedDate":"2023-09-08"},{"lineNumber":88,"author":{"gitId":"LimJH2002"},"content":"                    ui.showMarkedTask(false, unmarkedTask);","lastModifiedDate":"2023-09-08"},{"lineNumber":89,"author":{"gitId":"LimJH2002"},"content":"                    break;","lastModifiedDate":"2023-09-08"},{"lineNumber":90,"author":{"gitId":"LimJH2002"},"content":"                case MARK:","lastModifiedDate":"2023-09-08"},{"lineNumber":91,"author":{"gitId":"LimJH2002"},"content":"                    Task markedTask \u003d tasks.markTask(inData, true);","lastModifiedDate":"2023-09-08"},{"lineNumber":92,"author":{"gitId":"LimJH2002"},"content":"                    storage.save(tasks.getAllTasks());","lastModifiedDate":"2023-09-08"},{"lineNumber":93,"author":{"gitId":"LimJH2002"},"content":"                    ui.showMarkedTask(true, markedTask);","lastModifiedDate":"2023-09-08"},{"lineNumber":94,"author":{"gitId":"LimJH2002"},"content":"                    break;","lastModifiedDate":"2023-09-08"},{"lineNumber":95,"author":{"gitId":"LimJH2002"},"content":"                case DELETE:","lastModifiedDate":"2023-09-08"},{"lineNumber":96,"author":{"gitId":"LimJH2002"},"content":"                    Task deletedTask \u003d tasks.deleteTask(inData);","lastModifiedDate":"2023-09-08"},{"lineNumber":97,"author":{"gitId":"LimJH2002"},"content":"                    storage.save(tasks.getAllTasks());","lastModifiedDate":"2023-09-08"},{"lineNumber":98,"author":{"gitId":"LimJH2002"},"content":"                    ui.showDeletedTask(deletedTask, tasks.getTaskCount());","lastModifiedDate":"2023-09-08"},{"lineNumber":99,"author":{"gitId":"LimJH2002"},"content":"                    break;","lastModifiedDate":"2023-09-08"},{"lineNumber":100,"author":{"gitId":"LimJH2002"},"content":"                case FIND:","lastModifiedDate":"2023-09-08"},{"lineNumber":101,"author":{"gitId":"LimJH2002"},"content":"                    TaskList matchedTasks \u003d tasks.findTasks(inData);","lastModifiedDate":"2023-09-08"},{"lineNumber":102,"author":{"gitId":"LimJH2002"},"content":"                    ui.showMatchingTasks(matchedTasks);","lastModifiedDate":"2023-09-08"},{"lineNumber":103,"author":{"gitId":"LimJH2002"},"content":"                    break;","lastModifiedDate":"2023-09-08"},{"lineNumber":104,"author":{"gitId":"LimJH2002"},"content":"                case BYE:","lastModifiedDate":"2023-09-08"},{"lineNumber":105,"author":{"gitId":"LimJH2002"},"content":"                    ui.showGoodbye();","lastModifiedDate":"2023-09-08"},{"lineNumber":106,"author":{"gitId":"LimJH2002"},"content":"                    return;","lastModifiedDate":"2023-09-08"},{"lineNumber":107,"author":{"gitId":"LimJH2002"},"content":"                case UNKNOWN:","lastModifiedDate":"2023-09-08"},{"lineNumber":108,"author":{"gitId":"LimJH2002"},"content":"                default:","lastModifiedDate":"2023-09-08"},{"lineNumber":109,"author":{"gitId":"LimJH2002"},"content":"                    ui.showUnknownCommand();","lastModifiedDate":"2023-09-08"},{"lineNumber":110,"author":{"gitId":"LimJH2002"},"content":"            }","lastModifiedDate":"2023-09-08"},{"lineNumber":111,"author":{"gitId":"LimJH2002"},"content":"        } catch (SimonException se) {","lastModifiedDate":"2023-09-08"},{"lineNumber":112,"author":{"gitId":"LimJH2002"},"content":"            ui.showError(se.getMessage());","lastModifiedDate":"2023-09-08"},{"lineNumber":113,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":114,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":115,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":116,"author":{"gitId":"LimJH2002"},"content":"    @Override","lastModifiedDate":"2023-09-08"},{"lineNumber":117,"author":{"gitId":"LimJH2002"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-08"},{"lineNumber":118,"author":{"gitId":"LimJH2002"},"content":"        //Step 1. Setting up required components","lastModifiedDate":"2023-09-08"},{"lineNumber":119,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":120,"author":{"gitId":"LimJH2002"},"content":"        //The container for the content of the chat to scroll.","lastModifiedDate":"2023-09-08"},{"lineNumber":121,"author":{"gitId":"LimJH2002"},"content":"        scrollPane \u003d new ScrollPane();","lastModifiedDate":"2023-09-08"},{"lineNumber":122,"author":{"gitId":"LimJH2002"},"content":"        dialogContainer \u003d new VBox();","lastModifiedDate":"2023-09-08"},{"lineNumber":123,"author":{"gitId":"LimJH2002"},"content":"        scrollPane.setContent(dialogContainer);","lastModifiedDate":"2023-09-08"},{"lineNumber":124,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":125,"author":{"gitId":"LimJH2002"},"content":"        userInput \u003d new TextField();","lastModifiedDate":"2023-09-08"},{"lineNumber":126,"author":{"gitId":"LimJH2002"},"content":"        sendButton \u003d new Button(\"Send\");","lastModifiedDate":"2023-09-08"},{"lineNumber":127,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":128,"author":{"gitId":"LimJH2002"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();","lastModifiedDate":"2023-09-08"},{"lineNumber":129,"author":{"gitId":"LimJH2002"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);","lastModifiedDate":"2023-09-08"},{"lineNumber":130,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":131,"author":{"gitId":"LimJH2002"},"content":"        scene \u003d new Scene(mainLayout);","lastModifiedDate":"2023-09-08"},{"lineNumber":132,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":133,"author":{"gitId":"LimJH2002"},"content":"        stage.setScene(scene);","lastModifiedDate":"2023-09-08"},{"lineNumber":134,"author":{"gitId":"LimJH2002"},"content":"        stage.show();","lastModifiedDate":"2023-09-08"},{"lineNumber":135,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":136,"author":{"gitId":"LimJH2002"},"content":"        //Step 2. Formatting the window to look as expected","lastModifiedDate":"2023-09-08"},{"lineNumber":137,"author":{"gitId":"LimJH2002"},"content":"        stage.setTitle(\"Simon\");","lastModifiedDate":"2023-09-08"},{"lineNumber":138,"author":{"gitId":"LimJH2002"},"content":"        stage.setResizable(false);","lastModifiedDate":"2023-09-08"},{"lineNumber":139,"author":{"gitId":"LimJH2002"},"content":"        stage.setMinHeight(600.0);","lastModifiedDate":"2023-09-08"},{"lineNumber":140,"author":{"gitId":"LimJH2002"},"content":"        stage.setMinWidth(400.0);","lastModifiedDate":"2023-09-08"},{"lineNumber":141,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":142,"author":{"gitId":"LimJH2002"},"content":"        mainLayout.setPrefSize(400.0, 600.0);","lastModifiedDate":"2023-09-08"},{"lineNumber":143,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":144,"author":{"gitId":"LimJH2002"},"content":"        scrollPane.setPrefSize(385, 535);","lastModifiedDate":"2023-09-08"},{"lineNumber":145,"author":{"gitId":"LimJH2002"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);","lastModifiedDate":"2023-09-08"},{"lineNumber":146,"author":{"gitId":"LimJH2002"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);","lastModifiedDate":"2023-09-08"},{"lineNumber":147,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":148,"author":{"gitId":"LimJH2002"},"content":"        scrollPane.setVvalue(1.0);","lastModifiedDate":"2023-09-08"},{"lineNumber":149,"author":{"gitId":"LimJH2002"},"content":"        scrollPane.setFitToWidth(true);","lastModifiedDate":"2023-09-08"},{"lineNumber":150,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":151,"author":{"gitId":"LimJH2002"},"content":"        // You will need to import `javafx.scene.layout.Region` for this.","lastModifiedDate":"2023-09-08"},{"lineNumber":152,"author":{"gitId":"LimJH2002"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);","lastModifiedDate":"2023-09-08"},{"lineNumber":153,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":154,"author":{"gitId":"LimJH2002"},"content":"        userInput.setPrefWidth(325.0);","lastModifiedDate":"2023-09-08"},{"lineNumber":155,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":156,"author":{"gitId":"LimJH2002"},"content":"        sendButton.setPrefWidth(55.0);","lastModifiedDate":"2023-09-08"},{"lineNumber":157,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":158,"author":{"gitId":"LimJH2002"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);","lastModifiedDate":"2023-09-08"},{"lineNumber":159,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":160,"author":{"gitId":"LimJH2002"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);","lastModifiedDate":"2023-09-08"},{"lineNumber":161,"author":{"gitId":"LimJH2002"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);","lastModifiedDate":"2023-09-08"},{"lineNumber":162,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":163,"author":{"gitId":"LimJH2002"},"content":"        AnchorPane.setLeftAnchor(userInput , 1.0);","lastModifiedDate":"2023-09-08"},{"lineNumber":164,"author":{"gitId":"LimJH2002"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);","lastModifiedDate":"2023-09-08"},{"lineNumber":165,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":166,"author":{"gitId":"LimJH2002"},"content":"        //Part 3. Add functionality to handle user input.","lastModifiedDate":"2023-09-08"},{"lineNumber":167,"author":{"gitId":"LimJH2002"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {","lastModifiedDate":"2023-09-08"},{"lineNumber":168,"author":{"gitId":"LimJH2002"},"content":"            handleUserInput();","lastModifiedDate":"2023-09-08"},{"lineNumber":169,"author":{"gitId":"LimJH2002"},"content":"        });","lastModifiedDate":"2023-09-08"},{"lineNumber":170,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":171,"author":{"gitId":"LimJH2002"},"content":"        userInput.setOnAction((event) -\u003e {","lastModifiedDate":"2023-09-08"},{"lineNumber":172,"author":{"gitId":"LimJH2002"},"content":"            handleUserInput();","lastModifiedDate":"2023-09-08"},{"lineNumber":173,"author":{"gitId":"LimJH2002"},"content":"        });","lastModifiedDate":"2023-09-08"},{"lineNumber":174,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":175,"author":{"gitId":"LimJH2002"},"content":"        //Scroll down to the end every time dialogContainer\u0027s height changes.","lastModifiedDate":"2023-09-08"},{"lineNumber":176,"author":{"gitId":"LimJH2002"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));","lastModifiedDate":"2023-09-08"},{"lineNumber":177,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":178,"author":{"gitId":"LimJH2002"},"content":"        // more code to be added here later","lastModifiedDate":"2023-09-08"},{"lineNumber":179,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":180,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":181,"author":{"gitId":"LimJH2002"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-08"},{"lineNumber":182,"author":{"gitId":"LimJH2002"},"content":"        String userText \u003d userInput.getText();","lastModifiedDate":"2023-09-08"},{"lineNumber":183,"author":{"gitId":"LimJH2002"},"content":"        String dukeText \u003d getResponse(userInput.getText());","lastModifiedDate":"2023-09-08"},{"lineNumber":184,"author":{"gitId":"LimJH2002"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-08"},{"lineNumber":185,"author":{"gitId":"LimJH2002"},"content":"                DialogBox.getUserDialog(userText, user),","lastModifiedDate":"2023-09-08"},{"lineNumber":186,"author":{"gitId":"LimJH2002"},"content":"                DialogBox.getDukeDialog(dukeText, duke)","lastModifiedDate":"2023-09-08"},{"lineNumber":187,"author":{"gitId":"LimJH2002"},"content":"        );","lastModifiedDate":"2023-09-08"},{"lineNumber":188,"author":{"gitId":"LimJH2002"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-08"},{"lineNumber":189,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":190,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":191,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":192,"author":{"gitId":"LimJH2002"},"content":"     * You should have your own function to generate a response to user input.","lastModifiedDate":"2023-09-08"},{"lineNumber":193,"author":{"gitId":"LimJH2002"},"content":"     * Replace this stub with your completed method.","lastModifiedDate":"2023-09-08"},{"lineNumber":194,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":195,"author":{"gitId":"LimJH2002"},"content":"    String getResponse(String input) {","lastModifiedDate":"2023-09-08"},{"lineNumber":196,"author":{"gitId":"LimJH2002"},"content":"        Ui.clearOutput();","lastModifiedDate":"2023-09-09"},{"lineNumber":197,"author":{"gitId":"LimJH2002"},"content":"        if (input !\u003d null) {","lastModifiedDate":"2023-09-08"},{"lineNumber":198,"author":{"gitId":"LimJH2002"},"content":"            run2(input);","lastModifiedDate":"2023-09-08"},{"lineNumber":199,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":200,"author":{"gitId":"LimJH2002"},"content":"        return this.ui.getOutput();","lastModifiedDate":"2023-09-08"},{"lineNumber":201,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":202,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":203,"author":{"gitId":"LimJH2002"},"content":"    public void logMessages(String... messages) {","lastModifiedDate":"2023-09-09"},{"lineNumber":204,"author":{"gitId":"LimJH2002"},"content":"        for (String msg : messages) {","lastModifiedDate":"2023-09-09"},{"lineNumber":205,"author":{"gitId":"LimJH2002"},"content":"            System.out.println(\"[DEBUG]: \" + msg);","lastModifiedDate":"2023-09-09"},{"lineNumber":206,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":207,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":208,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":209,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"LimJH2002":209}},{"path":"src/main/java/simon/SimonAscii.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package simon;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":" * The {@code SimonAscii} class provides an ASCII representation for the name \"Simon\".","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":" * This class contains a static method to retrieve the ASCII representation.","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"public class SimonAscii {","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"    /** ASCII representation of the name \"Simon\". */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"    private static final String name \u003d","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"            \"     _______. __  .___  ___.   ______   .__   __. \\n\" +","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"                    \"    /       ||  | |   \\\\/   |  /  __  \\\\  |  \\\\ |  | \\n\" +","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"                    \"   |   (----`|  | |  \\\\  /  | |  |  |  | |   \\\\|  | \\n\" +","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"                    \"    \\\\   \\\\    |  | |  |\\\\/|  | |  |  |  | |  . `  | \\n\" +","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"                    \".----)   |   |  | |  |  |  | |  `--\u0027  | |  |\\\\   | \\n\" +","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"                    \"|_______/    |__| |__|  |__|  \\\\______/  |__| \\\\__| \\n\";","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"     * Returns the ASCII representation of the name \"Simon\".","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"     * @return A string containing the ASCII representation.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"    public static String toStr() {","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"        return name;","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"LimJH2002":26}},{"path":"src/main/java/simon/SimonException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package simon;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":" * The {@code SimonException} class represents exceptions specific to the Simon application.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":" * This custom exception class extends the Java {@link Exception} class and is used","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":" * to handle and represent errors that can occur during the operation of the Simon application.","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"public class SimonException extends Exception {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"     * Constructs a new {@code SimonException} with the specified detail message.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"     * @param message The detail message which provides more information about the error.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"    public SimonException(String message) {","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"        super(message);","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"LimJH2002":18}},{"path":"src/main/java/simon/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package simon;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"import java.io.File;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"import java.io.PrintWriter;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"import simon.task.Deadline;","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"import simon.task.Event;","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"import simon.task.Task;","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"import simon.task.ToDo;","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":" * The {@code Storage} class handles the loading and saving of tasks to a specified file.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":" * It ensures that tasks are persisted across multiple runs of the Simon application.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"public class Storage {","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"    /** The path to the file where tasks are stored. */","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"    private final String filePath;","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"     * Constructs a new {@code Storage} instance with the specified file path.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LimJH2002"},"content":"     * @param filePath The path to the file used for storing tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"     * Loads tasks from the specified file. If the file does not exist, it is created.","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"LimJH2002"},"content":"     * @return An {@code ArrayList} of tasks loaded from the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"LimJH2002"},"content":"     * @throws SimonException If there is an error parsing the saved data.","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"LimJH2002"},"content":"    public ArrayList\u003cTask\u003e load() throws SimonException {","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"LimJH2002"},"content":"        ArrayList\u003cTask\u003e loadedTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"LimJH2002"},"content":"        // Ensure data directory exists","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"LimJH2002"},"content":"        File dir \u003d new File(\"./data\");","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"LimJH2002"},"content":"        if (!dir.exists()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"LimJH2002"},"content":"            dir.mkdir();","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"LimJH2002"},"content":"        // Ensure simon.txt file exists","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"LimJH2002"},"content":"        File file \u003d new File(this.filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"LimJH2002"},"content":"        if (!file.exists()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"LimJH2002"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"LimJH2002"},"content":"                file.createNewFile();","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"LimJH2002"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"LimJH2002"},"content":"                System.out.println(\"An error occurred while creating the data file.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"LimJH2002"},"content":"                e.printStackTrace();","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"LimJH2002"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"LimJH2002"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"LimJH2002"},"content":"            Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"LimJH2002"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\");","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"LimJH2002"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"LimJH2002"},"content":"                String data \u003d scanner.nextLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"LimJH2002"},"content":"                String[] parts \u003d data.split(\" \\\\| \");","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"LimJH2002"},"content":"                switch (parts[0]) {","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"LimJH2002"},"content":"                    case \"T\":","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"LimJH2002"},"content":"                        ToDo todo \u003d new ToDo(parts[2]);","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"LimJH2002"},"content":"                        if (parts[1].equals(\"1\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"LimJH2002"},"content":"                            todo.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"LimJH2002"},"content":"                        }","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"LimJH2002"},"content":"                        loadedTasks.add(todo);","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"LimJH2002"},"content":"                        break;","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"LimJH2002"},"content":"                    case \"D\":","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"LimJH2002"},"content":"                        LocalDateTime endDateTime \u003d LocalDateTime.parse(parts[3], formatter);","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"LimJH2002"},"content":"                        Deadline deadline \u003d new Deadline(parts[2], endDateTime.format(formatter));","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"LimJH2002"},"content":"                        if (parts[1].equals(\"1\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"LimJH2002"},"content":"                            deadline.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"LimJH2002"},"content":"                        }","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"LimJH2002"},"content":"                        loadedTasks.add(deadline);","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"LimJH2002"},"content":"                        break;","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"LimJH2002"},"content":"                    case \"E\":","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"LimJH2002"},"content":"                        String startDateTimeStr \u003d parts[3];","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"LimJH2002"},"content":"                        String endDateTimeStr \u003d parts[4];","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"LimJH2002"},"content":"                        LocalDateTime startDateTime \u003d LocalDateTime.parse(startDateTimeStr, formatter);","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"LimJH2002"},"content":"                        LocalDateTime endDateTime2 \u003d LocalDateTime.parse(endDateTimeStr, formatter);","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"LimJH2002"},"content":"                        Event event \u003d new Event(parts[2], startDateTime.format(formatter), endDateTime2.format(formatter));","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"LimJH2002"},"content":"                        if (parts[1].equals(\"1\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"LimJH2002"},"content":"                            event.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"LimJH2002"},"content":"                        }","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"LimJH2002"},"content":"                        loadedTasks.add(event);","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"LimJH2002"},"content":"                        break;","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"LimJH2002"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"LimJH2002"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"LimJH2002"},"content":"            scanner.close();","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"LimJH2002"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"LimJH2002"},"content":"            System.out.println(\"Data file not found. Starting with an empty task list.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"LimJH2002"},"content":"        } catch (SimonException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"LimJH2002"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"LimJH2002"},"content":"        return loadedTasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"LimJH2002"},"content":"     * Saves the provided list of tasks to the specified file.","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"LimJH2002"},"content":"     * @param tasks The {@code ArrayList} of tasks to be saved.","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"LimJH2002"},"content":"    public void save(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"LimJH2002"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"LimJH2002"},"content":"            PrintWriter writer \u003d new PrintWriter(this.filePath);","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"LimJH2002"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"LimJH2002"},"content":"                if (task instanceof ToDo) {","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"LimJH2002"},"content":"                    writer.println(\"T | \" + (task.isDone ? \"1\" : \"0\") + \" | \" + task.taskName);","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"LimJH2002"},"content":"                } else if (task instanceof Deadline) {","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"LimJH2002"},"content":"                    Deadline deadline \u003d (Deadline) task;","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"LimJH2002"},"content":"                    writer.println(\"D | \" + (task.isDone ? \"1\" : \"0\") + \" | \" + task.taskName + \" | \" + deadline.endDateTime.format(DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"LimJH2002"},"content":"                } else if (task instanceof Event) {","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"LimJH2002"},"content":"                    Event event \u003d (Event) task;","lastModifiedDate":"2023-08-30"},{"lineNumber":123,"author":{"gitId":"LimJH2002"},"content":"                    writer.println(\"E | \" + (task.isDone ? \"1\" : \"0\") + \" | \" + task.taskName + \" | \" + event.startDateTime.format(DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\")) + \" | \" + event.endDateTime.format(DateTimeFormatter.ofPattern(\"d/M/yyyy HHmm\")));","lastModifiedDate":"2023-08-30"},{"lineNumber":124,"author":{"gitId":"LimJH2002"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":125,"author":{"gitId":"LimJH2002"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":126,"author":{"gitId":"LimJH2002"},"content":"            writer.close();","lastModifiedDate":"2023-08-30"},{"lineNumber":127,"author":{"gitId":"LimJH2002"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":128,"author":{"gitId":"LimJH2002"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-08-30"},{"lineNumber":129,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":130,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":131,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"LimJH2002":131}},{"path":"src/main/java/simon/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package simon;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"import simon.task.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":" * The {@code TaskList} class manages a list of tasks, allowing for operations such as","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":" * adding, marking, and deleting tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"public class TaskList {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"    /** List containing tasks. */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"     * Constructs a new empty {@code TaskList}.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"     * Constructs a new {@code TaskList} with the given list of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"     * @param tasks Initial list of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"     * Adds a task to the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LimJH2002"},"content":"     * @param task The task to be added.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"LimJH2002"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"        tasks.add(task);","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"LimJH2002"},"content":"     * Marks or unmarks a task as done based on the provided index.","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"LimJH2002"},"content":"     * @param inData The input string containing the task index.","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"LimJH2002"},"content":"     * @param markAsDone Whether the task should be marked as done or undone.","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"LimJH2002"},"content":"     * @return The task that was marked or unmarked.","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"LimJH2002"},"content":"     * @throws SimonException If there\u0027s an issue with the provided index.","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"LimJH2002"},"content":"    public Task markTask(String inData, boolean markAsDone) throws SimonException {","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"LimJH2002"},"content":"        int index \u003d parseIndex(inData);","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"LimJH2002"},"content":"        validateIndex(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"LimJH2002"},"content":"        if (markAsDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"LimJH2002"},"content":"            tasks.get(index).markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"LimJH2002"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"LimJH2002"},"content":"            tasks.get(index).markAsUndone();","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"LimJH2002"},"content":"        return tasks.get(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"LimJH2002"},"content":"     * Deletes a task from the list based on the provided index.","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"LimJH2002"},"content":"     * @param inData The input string containing the task index.","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"LimJH2002"},"content":"     * @return The task that was deleted.","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"LimJH2002"},"content":"     * @throws SimonException If there\u0027s an issue with the provided index.","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"LimJH2002"},"content":"    public Task deleteTask(String inData) throws SimonException {","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"LimJH2002"},"content":"        int index \u003d parseIndex(inData);","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"LimJH2002"},"content":"        validateIndex(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"LimJH2002"},"content":"        Task task \u003d tasks.get(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"LimJH2002"},"content":"        tasks.remove(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"LimJH2002"},"content":"        return task;","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"LimJH2002"},"content":"     * Parses the provided input data to extract the task index.","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"LimJH2002"},"content":"     * @param inData The input string containing the task index.","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"LimJH2002"},"content":"     * @return The parsed task index.","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"LimJH2002"},"content":"     * @throws SimonException If the provided data does not contain a valid index.","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"LimJH2002"},"content":"    private int parseIndex(String inData) throws SimonException {","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"LimJH2002"},"content":"        String[] split \u003d inData.split(\" \");","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"LimJH2002"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"LimJH2002"},"content":"            return Integer.parseInt(split[1]) - 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"LimJH2002"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"LimJH2002"},"content":"            throw new SimonException(\"Please provide a valid task number.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"LimJH2002"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"LimJH2002"},"content":"            throw new SimonException(\"Please provide a task number.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"LimJH2002"},"content":"     * Validates if the given index is within the bounds of the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"LimJH2002"},"content":"     * @param index The task index to validate.","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"LimJH2002"},"content":"     * @throws SimonException If the index is out of bounds.","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"LimJH2002"},"content":"    private void validateIndex(int index) throws SimonException {","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"LimJH2002"},"content":"        if (this.tasks.isEmpty()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"LimJH2002"},"content":"            throw new SimonException(\"There are no tasks to modify.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"LimJH2002"},"content":"        if (index \u003c 0 || index \u003e\u003d this.tasks.size()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"LimJH2002"},"content":"            throw new SimonException(\"Invalid task number. Choose a number between 1 and \" + tasks.size() + \".\");","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":110,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"LimJH2002"},"content":"     * Retrieves a task from the list based on its index.","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"LimJH2002"},"content":"     * @param index The index of the task to retrieve.","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"LimJH2002"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"LimJH2002"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"LimJH2002"},"content":"        return this.tasks.get(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":119,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":120,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"LimJH2002"},"content":"     * Returns the number of tasks in the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"LimJH2002"},"content":"     * @return The total number of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":125,"author":{"gitId":"LimJH2002"},"content":"    public int getTaskCount() {","lastModifiedDate":"2023-08-30"},{"lineNumber":126,"author":{"gitId":"LimJH2002"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-08-30"},{"lineNumber":127,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":128,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":129,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"LimJH2002"},"content":"     * Returns a copy of all tasks in the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":131,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":132,"author":{"gitId":"LimJH2002"},"content":"     * @return An {@code ArrayList} containing all tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":134,"author":{"gitId":"LimJH2002"},"content":"    public ArrayList\u003cTask\u003e getAllTasks() {","lastModifiedDate":"2023-08-30"},{"lineNumber":135,"author":{"gitId":"LimJH2002"},"content":"        return new ArrayList\u003c\u003e(this.tasks);","lastModifiedDate":"2023-08-30"},{"lineNumber":136,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":137,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":138,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":139,"author":{"gitId":"LimJH2002"},"content":"     * Parses the input to retrieve the keyword and finds tasks containing the keyword.","lastModifiedDate":"2023-09-01"},{"lineNumber":140,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":141,"author":{"gitId":"LimJH2002"},"content":"     * @param inData The input command to be parsed.","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"LimJH2002"},"content":"     * @return A TaskList containing the matched tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"LimJH2002"},"content":"     * @throws SimonException If the input format is incorrect or no keyword is provided.","lastModifiedDate":"2023-09-01"},{"lineNumber":144,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":145,"author":{"gitId":"LimJH2002"},"content":"    public TaskList findTasks(String inData) throws SimonException {","lastModifiedDate":"2023-09-01"},{"lineNumber":146,"author":{"gitId":"LimJH2002"},"content":"        String keyword \u003d parseKeyword(inData);","lastModifiedDate":"2023-09-01"},{"lineNumber":147,"author":{"gitId":"LimJH2002"},"content":"        validateKeyword(keyword);","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"LimJH2002"},"content":"        return find(keyword);","lastModifiedDate":"2023-09-01"},{"lineNumber":149,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":150,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":151,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":152,"author":{"gitId":"LimJH2002"},"content":"     * Parses the input to retrieve the keyword for the find command.","lastModifiedDate":"2023-09-01"},{"lineNumber":153,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":154,"author":{"gitId":"LimJH2002"},"content":"     * @param inData The input command to be parsed.","lastModifiedDate":"2023-09-01"},{"lineNumber":155,"author":{"gitId":"LimJH2002"},"content":"     * @return The keyword from the input command.","lastModifiedDate":"2023-09-01"},{"lineNumber":156,"author":{"gitId":"LimJH2002"},"content":"     * @throws SimonException If no keyword is provided.","lastModifiedDate":"2023-09-01"},{"lineNumber":157,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":158,"author":{"gitId":"LimJH2002"},"content":"    private String parseKeyword(String inData) throws SimonException {","lastModifiedDate":"2023-09-01"},{"lineNumber":159,"author":{"gitId":"LimJH2002"},"content":"        String[] split \u003d inData.split(\" \");","lastModifiedDate":"2023-09-01"},{"lineNumber":160,"author":{"gitId":"LimJH2002"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":161,"author":{"gitId":"LimJH2002"},"content":"            return split[1];","lastModifiedDate":"2023-09-01"},{"lineNumber":162,"author":{"gitId":"LimJH2002"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":163,"author":{"gitId":"LimJH2002"},"content":"            throw new SimonException(\"Please provide a keyword to search.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":164,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":165,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":166,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":167,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":168,"author":{"gitId":"LimJH2002"},"content":"     * Validates that the keyword is not empty or null.","lastModifiedDate":"2023-09-01"},{"lineNumber":169,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":170,"author":{"gitId":"LimJH2002"},"content":"     * @param keyword The keyword to be validated.","lastModifiedDate":"2023-09-01"},{"lineNumber":171,"author":{"gitId":"LimJH2002"},"content":"     * @throws SimonException If the keyword is empty or null.","lastModifiedDate":"2023-09-01"},{"lineNumber":172,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":173,"author":{"gitId":"LimJH2002"},"content":"    private void validateKeyword(String keyword) throws SimonException {","lastModifiedDate":"2023-09-01"},{"lineNumber":174,"author":{"gitId":"LimJH2002"},"content":"        if (keyword \u003d\u003d null || keyword.trim().isEmpty()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":175,"author":{"gitId":"LimJH2002"},"content":"            throw new SimonException(\"Keyword cannot be empty. Please provide a valid keyword.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":176,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":177,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":178,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":179,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":180,"author":{"gitId":"LimJH2002"},"content":"     * Finds tasks that contain the given keyword.","lastModifiedDate":"2023-09-01"},{"lineNumber":181,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":182,"author":{"gitId":"LimJH2002"},"content":"     * @param keyword The keyword to be searched in tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":183,"author":{"gitId":"LimJH2002"},"content":"     * @return A TaskList containing the matched tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":184,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":185,"author":{"gitId":"LimJH2002"},"content":"    private TaskList find(String keyword) {","lastModifiedDate":"2023-09-01"},{"lineNumber":186,"author":{"gitId":"LimJH2002"},"content":"        ArrayList\u003cTask\u003e matchedTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":187,"author":{"gitId":"LimJH2002"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":188,"author":{"gitId":"LimJH2002"},"content":"            if (task.toString().contains(keyword)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":189,"author":{"gitId":"LimJH2002"},"content":"                matchedTasks.add(task);","lastModifiedDate":"2023-09-01"},{"lineNumber":190,"author":{"gitId":"LimJH2002"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":191,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":192,"author":{"gitId":"LimJH2002"},"content":"        return new TaskList(matchedTasks);","lastModifiedDate":"2023-09-01"},{"lineNumber":193,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":194,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":195,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":196,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"LimJH2002":196}},{"path":"src/main/java/simon/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package simon;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"import simon.task.Task;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":" * The {@code Ui} class handles interactions with the user by displaying","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":" * messages and reading user input.","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"public class Ui {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"    private static StringBuilder output;","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"    public Ui() {","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"        output \u003d new StringBuilder();","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"     * Displays the welcome message.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"    public static void showWelcome() {","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"        clearOutput();","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"        output.append(\"Hello! I\u0027m Simon\\nWhat can I do for you?\\n\");","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"     * Displays the goodbye message.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"    public void showGoodbye() {","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"        clearOutput();","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"        output.append(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"     * Displays an error message indicating a loading error.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LimJH2002"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"LimJH2002"},"content":"        clearOutput();","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"        output.append(\"Data file not found. Starting with an empty task list.\");","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"LimJH2002"},"content":"     * Displays the given error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"LimJH2002"},"content":"     * @param message The error message to be displayed.","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"LimJH2002"},"content":"    public void showError(String message) {","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"LimJH2002"},"content":"        clearOutput();","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"LimJH2002"},"content":"        output.append(message);","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"LimJH2002"},"content":"     * Displays a message indicating a task has been added.","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"LimJH2002"},"content":"     * @param task  The added task.","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"LimJH2002"},"content":"     * @param count The current number of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"LimJH2002"},"content":"    public void showAddedTask(Task task, int count) {","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"LimJH2002"},"content":"        clearOutput();","lastModifiedDate":"2023-09-08"},{"lineNumber":58,"author":{"gitId":"LimJH2002"},"content":"        output.append(\"Got it. I\u0027ve added this task:\\n\" + \" \").append(task).append(String.format(\"\\nNow you have %d %s in the list.\",","lastModifiedDate":"2023-09-09"},{"lineNumber":59,"author":{"gitId":"LimJH2002"},"content":"                count, count \u003e 1 ? \"tasks\" : \"task\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":60,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"LimJH2002"},"content":"     * Displays a message indicating a task has been deleted.","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"LimJH2002"},"content":"     * @param task  The deleted task.","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"LimJH2002"},"content":"     * @param count The current number of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"LimJH2002"},"content":"    public void showDeletedTask(Task task, int count) {","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"LimJH2002"},"content":"        clearOutput();","lastModifiedDate":"2023-09-08"},{"lineNumber":70,"author":{"gitId":"LimJH2002"},"content":"        output.append(\"Noted. I\u0027ve removed this task:\\n\").append(task).append(String.format(\"\\nNow you have %d %s in the list.\",","lastModifiedDate":"2023-09-09"},{"lineNumber":71,"author":{"gitId":"LimJH2002"},"content":"                count, count \u003e 1 ? \"tasks\" : \"task\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":72,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"LimJH2002"},"content":"     * Displays a message indicating a task\u0027s status has been changed.","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"LimJH2002"},"content":"     * @param marked True if the task is marked as done, false otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"LimJH2002"},"content":"     * @param task   The task whose status has been changed.","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"LimJH2002"},"content":"    public void showMarkedTask(boolean marked, Task task) {","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"LimJH2002"},"content":"        clearOutput();","lastModifiedDate":"2023-09-08"},{"lineNumber":82,"author":{"gitId":"LimJH2002"},"content":"        if (marked) {","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"LimJH2002"},"content":"            output.append(\"Nice! I\u0027ve marked this task as done:\\n \").append(task);","lastModifiedDate":"2023-09-08"},{"lineNumber":84,"author":{"gitId":"LimJH2002"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"LimJH2002"},"content":"            output.append(\"OK, I\u0027ve marked this task as not done yet:\\n \").append(task);","lastModifiedDate":"2023-09-08"},{"lineNumber":86,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"LimJH2002"},"content":"     * Displays a message indicating an unknown command was entered.","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"LimJH2002"},"content":"    public void showUnknownCommand() {","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"LimJH2002"},"content":"        clearOutput();","lastModifiedDate":"2023-09-08"},{"lineNumber":94,"author":{"gitId":"LimJH2002"},"content":"        output.append(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-09-08"},{"lineNumber":95,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"LimJH2002"},"content":"     * Lists all tasks in the provided task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"LimJH2002"},"content":"     * @param tasks The task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"LimJH2002"},"content":"    public void listTasks(TaskList tasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"LimJH2002"},"content":"        clearOutput();","lastModifiedDate":"2023-09-08"},{"lineNumber":104,"author":{"gitId":"LimJH2002"},"content":"        for (int i \u003d 0; i \u003c tasks.getTaskCount(); i++) {","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"LimJH2002"},"content":"            output.append((i + 1)).append(\".\").append(tasks.getTask(i)).append(\"\\n\");","lastModifiedDate":"2023-09-09"},{"lineNumber":106,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"LimJH2002"},"content":"     * Displays the tasks that match the given keyword.","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"LimJH2002"},"content":"     * @param matchedTasks An ArrayList of tasks that match the keyword.","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"LimJH2002"},"content":"    public void showMatchingTasks(TaskList matchedTasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"LimJH2002"},"content":"        clearOutput();","lastModifiedDate":"2023-09-08"},{"lineNumber":116,"author":{"gitId":"LimJH2002"},"content":"        output.append(\"Here are the matching tasks in your list:\\n\");","lastModifiedDate":"2023-09-09"},{"lineNumber":117,"author":{"gitId":"LimJH2002"},"content":"        for (int i \u003d 0; i \u003c matchedTasks.getTaskCount(); i++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"LimJH2002"},"content":"            output.append((i + 1)).append(\".\").append(matchedTasks.getTask(i)).append(\"\\n\");","lastModifiedDate":"2023-09-09"},{"lineNumber":119,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":120,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":123,"author":{"gitId":"LimJH2002"},"content":"     * Returns the next line of input from the user.","lastModifiedDate":"2023-09-08"},{"lineNumber":124,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":125,"author":{"gitId":"LimJH2002"},"content":"     * @return The next line of input from the user.","lastModifiedDate":"2023-09-08"},{"lineNumber":126,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":127,"author":{"gitId":"LimJH2002"},"content":"    public String getOutput() {","lastModifiedDate":"2023-09-08"},{"lineNumber":128,"author":{"gitId":"LimJH2002"},"content":"        return output.toString();","lastModifiedDate":"2023-09-08"},{"lineNumber":129,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":130,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":131,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":132,"author":{"gitId":"LimJH2002"},"content":"     * Clears the output.","lastModifiedDate":"2023-09-08"},{"lineNumber":133,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":134,"author":{"gitId":"LimJH2002"},"content":"    public static void clearOutput() {","lastModifiedDate":"2023-09-08"},{"lineNumber":135,"author":{"gitId":"LimJH2002"},"content":"        output \u003d new StringBuilder();","lastModifiedDate":"2023-09-08"},{"lineNumber":136,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":137,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"LimJH2002":137}},{"path":"src/main/java/simon/command/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package simon.command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"import simon.SimonException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"import simon.task.Deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"import simon.task.Event;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"import simon.task.Task;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"import simon.task.ToDo;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":" * The {@code Parser} class is responsible for interpreting user input commands and","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":" * converting them into actions that the Simon application can understand and execute.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":" * It serves as a bridge between user inputs and the internal representation of commands.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"public class Parser {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"     * Enumeration of valid commands that the Simon application can process.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"     * Each command type corresponds to a specific action or operation","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"     * that can be performed by the Simon application.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"    public enum Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"        TODO, DEADLINE, EVENT, LIST, MARK, UNMARK, DELETE, BYE, FIND, UNKNOWN","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"     * Converts a given raw user input into its corresponding {@code Command} type.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"     * If the input does not match any known command, it defaults to {@code UNKNOWN}.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LimJH2002"},"content":"     * @param input The raw user input command as a string.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LimJH2002"},"content":"     * @return The {@code Command} enumeration representing the type of command.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"    public static Command parseCommand(String input) {","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"LimJH2002"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"LimJH2002"},"content":"            return Parser.Command.valueOf(input.toUpperCase());","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"LimJH2002"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"            return Parser.Command.UNKNOWN;","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"LimJH2002"},"content":"     * Analyzes the input data to construct a specific {@code Task} object based on","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"LimJH2002"},"content":"     * the provided command type. This method can handle various task types like","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"LimJH2002"},"content":"     * {@code ToDo}, {@code Deadline}, and {@code Event}.","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"LimJH2002"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"LimJH2002"},"content":"     * The method throws a {@code SimonException} for invalid or incomplete user inputs.","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"LimJH2002"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"LimJH2002"},"content":"     * @param inData The raw user input string containing task details.","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"LimJH2002"},"content":"     * @param commandType The type of command the user input string represents.","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"LimJH2002"},"content":"     * @return A {@code Task} object representing the task detailed in the user input.","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"LimJH2002"},"content":"     * @throws SimonException If there is an error in interpreting the user input.","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"LimJH2002"},"content":"    public static Task parseAddTask(String inData, Command commandType) throws SimonException {","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"LimJH2002"},"content":"        Task task;","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"LimJH2002"},"content":"        switch (commandType) {","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"LimJH2002"},"content":"            case TODO:","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"LimJH2002"},"content":"                String description \u003d inData.split(\"todo \").length \u003e 1 ? inData.split(\"todo \")[1] : \"\";","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"LimJH2002"},"content":"                if (description.trim().isEmpty()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"LimJH2002"},"content":"                    throw new SimonException(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"LimJH2002"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"LimJH2002"},"content":"                task \u003d new ToDo(description);","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"LimJH2002"},"content":"                break;","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"LimJH2002"},"content":"            case DEADLINE:","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"LimJH2002"},"content":"                String[] deadlineParts \u003d inData.split(\"deadline \");","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"LimJH2002"},"content":"                if (deadlineParts.length \u003c\u003d 1 || !inData.contains(\" /by \")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"LimJH2002"},"content":"                    throw new SimonException(\"☹ OOPS!!! The format for deadline is incorrect. Expected format: \u0027deadline [task description] /by [dd/mm/yyyy HHmm]\u0027. Time(HHmm) is optional.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"LimJH2002"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"LimJH2002"},"content":"                String nameDeadline \u003d deadlineParts.length \u003e 1 ? deadlineParts[1].split(\" /by \")[0] : \"\";","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"LimJH2002"},"content":"                if (nameDeadline.trim().isEmpty()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"LimJH2002"},"content":"                    throw new SimonException(\"☹ OOPS!!! The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"LimJH2002"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"LimJH2002"},"content":"                String endDate \u003d deadlineParts[1].split(\" /by \").length \u003e 1 ? deadlineParts[1].split(\" /by \")[1] : \"\";","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"LimJH2002"},"content":"                if (endDate.trim().isEmpty()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"LimJH2002"},"content":"                    throw new SimonException(\"☹ OOPS!!! The deadline date cannot be empty.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"LimJH2002"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"LimJH2002"},"content":"                task \u003d new Deadline(nameDeadline, endDate);","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"LimJH2002"},"content":"                break;","lastModifiedDate":"2023-08-30"},{"lineNumber":81,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"LimJH2002"},"content":"            case EVENT:","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"LimJH2002"},"content":"                String[] eventParts \u003d inData.split(\"event \");","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"LimJH2002"},"content":"                if (eventParts.length \u003c\u003d 1 || !inData.contains(\"/from \") || !inData.contains(\"/to \")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"LimJH2002"},"content":"                    throw new SimonException(\"☹ OOPS!!! The format for event is incorrect. Expected format: \u0027event [event description] /from [dd/mm/yyyy HHmm] /to [dd/mm/yyyy HHmm]\u0027. The time(HHmm) is optional.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"LimJH2002"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"LimJH2002"},"content":"                String[] fromToParts \u003d eventParts[1].split(\" /from \");","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"LimJH2002"},"content":"                if (fromToParts.length \u003c 2) {","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"LimJH2002"},"content":"                    throw new SimonException(\"☹ OOPS!!! The format for event is missing \u0027from\u0027 information.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"LimJH2002"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"LimJH2002"},"content":"                String eventName \u003d fromToParts[0].trim();","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"LimJH2002"},"content":"                if (eventName.isEmpty()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"LimJH2002"},"content":"                    throw new SimonException(\"☹ OOPS!!! The description of an event cannot be empty.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"LimJH2002"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":98,"author":{"gitId":"LimJH2002"},"content":"                String[] toParts \u003d fromToParts[1].split(\" /to \");","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"LimJH2002"},"content":"                if (toParts.length \u003c 2) {","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"LimJH2002"},"content":"                    throw new SimonException(\"☹ OOPS!!! The format for event is missing \u0027to\u0027 information.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"LimJH2002"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"LimJH2002"},"content":"                String startDate \u003d toParts[0].trim();","lastModifiedDate":"2023-08-30"},{"lineNumber":104,"author":{"gitId":"LimJH2002"},"content":"                String endDateEvent \u003d toParts[1].trim();","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":106,"author":{"gitId":"LimJH2002"},"content":"                task \u003d new Event(eventName, startDate, endDateEvent);","lastModifiedDate":"2023-08-30"},{"lineNumber":107,"author":{"gitId":"LimJH2002"},"content":"                break;","lastModifiedDate":"2023-08-30"},{"lineNumber":108,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"LimJH2002"},"content":"            default:","lastModifiedDate":"2023-08-30"},{"lineNumber":110,"author":{"gitId":"LimJH2002"},"content":"                throw new SimonException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"LimJH2002"},"content":"        return task;","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"LimJH2002":114}},{"path":"src/main/java/simon/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package simon.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"import simon.SimonException;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":" * The {@code Deadline} class extends the {@code Task} class and represents a task","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":" * that has a specific end date and time by which it should be completed.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"    /** The end date and time for this deadline task. */","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"    public final LocalDateTime endDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"    /** Formatter to parse date and time input provided by the user. */","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"    private static final DateTimeFormatter INPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy[ HHmm]\");","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"    /** Formatter to format date and time for output display. */","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"    private static final DateTimeFormatter OUTPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy, h:mm a\");","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"     * Constructs a new Deadline task.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"     * @param taskName The name or description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"     * @param endDate The end date and time string for this deadline.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"     * @throws SimonException If the provided date and time format is incorrect.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LimJH2002"},"content":"    public Deadline(String taskName, String endDate) throws SimonException {","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"LimJH2002"},"content":"        super(taskName);","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"            // If no time specified, append \" 0000\"","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"LimJH2002"},"content":"            if (!endDate.contains(\" \")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"LimJH2002"},"content":"                endDate +\u003d \" 0000\";","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"LimJH2002"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"            this.endDateTime \u003d LocalDateTime.parse(endDate, INPUT_FORMATTER);","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"LimJH2002"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"LimJH2002"},"content":"            throw new SimonException(\"The date and time format is incorrect. Expected format: d/M/yyyy [HHmm].\");","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"LimJH2002"},"content":"     * Converts this Deadline task to a string format suitable for display.","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"LimJH2002"},"content":"     * @return A string representation of this Deadline task.","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"LimJH2002"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"LimJH2002"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"LimJH2002"},"content":"        return \" [D]\" + (super.isDone ? \"[X] \" : \"[ ] \") + super.toString() + \" (by: \" + endDateTime.format(OUTPUT_FORMATTER) + \")\";","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":53,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"LimJH2002":53}},{"path":"src/main/java/simon/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package simon.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"import simon.SimonException;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":" * The {@code Event} class extends the {@code Task} class and represents a task","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":" * that has a specific start and end date and time defining the duration of the event.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"    /** The start date and time of this event. */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"    public LocalDateTime startDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"    /** The end date and time of this event. */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"    public LocalDateTime endDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"    /** Formatter to parse date and time input provided by the user. */","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"    private static final DateTimeFormatter INPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"d/M/yyyy[ HHmm]\");","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"    /** Formatter to format date and time for output display. */","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"    private static final DateTimeFormatter OUTPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy, h:mm a\");","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"     * Constructs a new Event task with the given name, start date, and end date.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LimJH2002"},"content":"     * @param taskName The name or description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LimJH2002"},"content":"     * @param startDate The start date and time string for this event.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"     * @param endDate The end date and time string for this event.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"     * @throws SimonException If the provided date and time format is incorrect or if the end time is before the start time.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LimJH2002"},"content":"    public Event(String taskName, String startDate, String endDate) throws SimonException {","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"LimJH2002"},"content":"        super(taskName);","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"            // If no time specified, append \" 0000\"","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"LimJH2002"},"content":"            if (!startDate.contains(\" \")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"LimJH2002"},"content":"                startDate +\u003d \" 0000\";","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"LimJH2002"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"LimJH2002"},"content":"            if (!endDate.contains(\" \")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"LimJH2002"},"content":"                endDate +\u003d \" 0000\";","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"LimJH2002"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"LimJH2002"},"content":"            this.startDateTime \u003d LocalDateTime.parse(startDate, INPUT_FORMATTER);","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"LimJH2002"},"content":"            this.endDateTime \u003d LocalDateTime.parse(endDate, INPUT_FORMATTER);","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"LimJH2002"},"content":"            // Validate that endDateTime is after startDateTime","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"LimJH2002"},"content":"            if (!endDateTime.isAfter(startDateTime)) {","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"LimJH2002"},"content":"                throw new SimonException(\"The end time should be after the start time.\");","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"LimJH2002"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"LimJH2002"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"LimJH2002"},"content":"            throw new SimonException(\"The date and time format is incorrect. Expected format: d/M/yyyy [HHmm].\");","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"LimJH2002"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"LimJH2002"},"content":"     * Converts this Event task to a string format suitable for display.","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"LimJH2002"},"content":"     * @return A string representation of this Event task.","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"LimJH2002"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":65,"author":{"gitId":"LimJH2002"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":66,"author":{"gitId":"LimJH2002"},"content":"        return \" [E]\" + (super.isDone ? \"[X] \" : \"[ ] \") + super.toString() +","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"LimJH2002"},"content":"                \" (from: \" + startDateTime.format(OUTPUT_FORMATTER) +","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"LimJH2002"},"content":"                \" to: \" + endDateTime.format(OUTPUT_FORMATTER) + \")\";","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":70,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"LimJH2002":70}},{"path":"src/main/java/simon/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package simon.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":" * The {@code Task} class represents a general task with a description and a completion status.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":" * This class serves as the base class for other specialized task types.","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"public class Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"    /** The name or description of the task. */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"    public String taskName;","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"    /** Flag indicating whether the task has been completed. */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"    public boolean isDone;","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"     * Constructs a new Task with the given name or description.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"     * @param taskName The name or description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"    public Task(String taskName) {","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"     * Marks this task as completed.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-22"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":31,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"     * Marks this task as not completed.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LimJH2002"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-08-22"},{"lineNumber":36,"author":{"gitId":"LimJH2002"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":39,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"LimJH2002"},"content":"     * Converts this task to a string format suitable for display.","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"LimJH2002"},"content":"     * @return A string representation of this task.","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"LimJH2002"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":45,"author":{"gitId":"LimJH2002"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":46,"author":{"gitId":"LimJH2002"},"content":"        return this.taskName;","lastModifiedDate":"2023-08-22"},{"lineNumber":47,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":48,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"LimJH2002":48}},{"path":"src/main/java/simon/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package simon.task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":" * The {@code ToDo} class extends the {@code Task} class and represents a basic task","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":" * with no specific start or end time.","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"     * Constructs a new ToDo task with the given name.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"     * @param taskName The name or description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"    public ToDo(String taskName) {","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"        super(taskName);","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"     * Converts this ToDo task to a string format suitable for display.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"     * @return A string representation of this ToDo task.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"        return \" [T]\" + (super.isDone ? \"[X] \" : \"[ ] \") + super.toString();","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"LimJH2002":27}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.shape.Circle?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" styleClass\u003d\"dialog-box\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"        \u003cVBox alignment\u003d\"CENTER_LEFT\" HBox.hgrow\u003d\"ALWAYS\" style\u003d\"-fx-padding: 10;\"\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"            \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"                \u003cHBox.margin\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"                    \u003cInsets bottom\u003d\"5\" left\u003d\"5\" right\u003d\"5\" top\u003d\"5\"/\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"                \u003c/HBox.margin\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"            \u003c/Label\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"        \u003c/VBox\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"            \u003cclip\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"                \u003c!-- Clip the ImageView into a circle --\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"                \u003cCircle centerX\u003d\"50\" centerY\u003d\"50\" radius\u003d\"50\" /\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"            \u003c/clip\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"        \u003c/ImageView\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"        \u003cInsets bottom\u003d\"10.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"10.0\" /\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"LimJH2002":29}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"simon.MainWindow\"\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"LimJH2002":19}},{"path":"src/test/java/simon/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package simon;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"import simon.task.Task;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"import simon.task.ToDo;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"public class StorageTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"    public void load_validFile_tasksLoaded() throws SimonException {","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"        Storage storage \u003d new Storage(\"data/testFile.txt\");","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"        ArrayList\u003cTask\u003e tasks \u003d storage.load();","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"        assertTrue(tasks.isEmpty());","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"    public void save_validTasks_tasksSaved() throws SimonException {","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"        tasks.add(new ToDo(\"Test Task\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"        Storage storage \u003d new Storage(\"data/testSaveFile.txt\");","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"        storage.save(tasks);","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"        ArrayList\u003cTask\u003e loadedTasks \u003d storage.load();","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"        assertEquals(tasks.size(), loadedTasks.size());","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"LimJH2002":27}},{"path":"src/test/java/simon/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package simon;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"import simon.task.Task;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"import simon.task.ToDo;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"public class TaskListTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"    public void markTask_validIndex_taskMarkedAsDone() throws SimonException {","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"        tasks.addTask(new ToDo(\"Sample Task\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"        Task markedTask \u003d tasks.markTask(\"mark 1\", true);","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"        assertTrue(markedTask.isDone);","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"    public void markTask_invalidIndex_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"        assertThrows(SimonException.class, () -\u003e tasks.markTask(\"100\", true));","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"    public void deleteTask_validIndex_taskDeleted() throws SimonException {","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"        tasks.addTask(new ToDo(\"Sample Task\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"        Task deletedTask \u003d tasks.deleteTask(\"delete 1\");","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"        assertEquals(\"Sample Task\", deletedTask.taskName);","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LimJH2002"},"content":"        assertEquals(0, tasks.getTaskCount());","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LimJH2002"},"content":"    public void deleteTask_invalidIndex_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LimJH2002"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"LimJH2002"},"content":"        assertThrows(SimonException.class, () -\u003e tasks.deleteTask(\"delete 100\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"LimJH2002"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"LimJH2002"},"content":"    public void addTask_multipleTasks_addedSuccessfully() throws SimonException {","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"LimJH2002"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"LimJH2002"},"content":"        tasks.addTask(new ToDo(\"Task 1\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"LimJH2002"},"content":"        tasks.addTask(new ToDo(\"Task 2\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"LimJH2002"},"content":"        tasks.addTask(new ToDo(\"Task 3\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"LimJH2002"},"content":"        assertEquals(3, tasks.getTaskCount());","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"LimJH2002"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"LimJH2002"},"content":"    public void deleteTask_multipleTasks_deletedSuccessfully() throws SimonException {","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"LimJH2002"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"LimJH2002"},"content":"        tasks.addTask(new ToDo(\"Task 1\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"LimJH2002"},"content":"        tasks.addTask(new ToDo(\"Task 2\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"LimJH2002"},"content":"        tasks.addTask(new ToDo(\"Task 3\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"LimJH2002"},"content":"        Task deletedTask1 \u003d tasks.deleteTask(\"delete 1\");","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"LimJH2002"},"content":"        assertEquals(\"Task 1\", deletedTask1.taskName);","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"LimJH2002"},"content":"        assertEquals(2, tasks.getTaskCount());","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"LimJH2002"},"content":"        Task deletedTask2 \u003d tasks.deleteTask(\"delete 2\");","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"LimJH2002"},"content":"        assertEquals(\"Task 3\", deletedTask2.taskName);","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"LimJH2002"},"content":"        assertEquals(1, tasks.getTaskCount());","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"LimJH2002"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"LimJH2002"},"content":"    public void markTask_emptyTaskList_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"LimJH2002"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"LimJH2002"},"content":"        assertThrows(SimonException.class, () -\u003e tasks.markTask(\"mark 1\", true));","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"LimJH2002"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"LimJH2002"},"content":"    public void findTasks_matchingKeyword_returnMatchingTasks() throws SimonException {","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"LimJH2002"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"LimJH2002"},"content":"        tasks.addTask(new ToDo(\"Read book\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"LimJH2002"},"content":"        tasks.addTask(new ToDo(\"Return book\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"LimJH2002"},"content":"        tasks.addTask(new ToDo(\"Watch movie\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"LimJH2002"},"content":"        TaskList foundTasks \u003d tasks.findTasks(\"find book\");","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"LimJH2002"},"content":"        assertEquals(2, foundTasks.getTaskCount());","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"LimJH2002"},"content":"        assertTrue(foundTasks.getTask(0).toString().contains(\"Read book\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"LimJH2002"},"content":"        assertTrue(foundTasks.getTask(1).toString().contains(\"Return book\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"LimJH2002"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"LimJH2002"},"content":"    public void findTasks_noMatch_returnEmptyList() throws SimonException {","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"LimJH2002"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"LimJH2002"},"content":"        tasks.addTask(new ToDo(\"Read book\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"LimJH2002"},"content":"        tasks.addTask(new ToDo(\"Watch movie\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"LimJH2002"},"content":"        TaskList foundTasks \u003d tasks.findTasks(\"find exercise\");","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"LimJH2002"},"content":"        assertEquals(0, foundTasks.getTaskCount());","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"LimJH2002"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"LimJH2002"},"content":"    public void findTasks_emptyList_returnEmptyList() throws SimonException {","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"LimJH2002"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"LimJH2002"},"content":"        TaskList foundTasks \u003d tasks.findTasks(\"find book\");","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"LimJH2002"},"content":"        assertEquals(0, foundTasks.getTaskCount());","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"LimJH2002"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"LimJH2002"},"content":"    public void getTask_validIndex_returnTask() throws SimonException {","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"LimJH2002"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"LimJH2002"},"content":"        tasks.addTask(new ToDo(\"Sample Task\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"LimJH2002"},"content":"        Task retrievedTask \u003d tasks.getTask(0);","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"LimJH2002"},"content":"        assertEquals(\"Sample Task\", retrievedTask.taskName);","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"LimJH2002"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"LimJH2002"},"content":"    public void getTask_invalidIndex_outOfBoundsException() {","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"LimJH2002"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"LimJH2002"},"content":"        tasks.addTask(new ToDo(\"Sample Task\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"LimJH2002"},"content":"        assertThrows(IndexOutOfBoundsException.class, () -\u003e tasks.getTask(100));","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"LimJH2002":119}},{"path":"src/test/java/simon/command/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package simon.command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"import simon.SimonException;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"import simon.task.Task;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"public class ParserTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"    public void parseAddTask_validToDoInput_todoAdded() throws SimonException {","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"        String input \u003d \"todo Sample Task\";","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"        Task task \u003d Parser.parseAddTask(input, Parser.Command.TODO);","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"        assertEquals(\"Sample Task\", task.taskName);","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"    public void parseAddTask_invalidInput_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"        String input \u003d \"todo\";","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"        assertThrows(SimonException.class, () -\u003e Parser.parseAddTask(input, Parser.Command.TODO));","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"    // Assuming the functionality for DEADLINE and EVENT","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"    public void parseAddTask_validDeadlineInput_deadlineAdded() throws SimonException {","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"        String input \u003d \"deadline Sample Task /by 01/01/2023 1800\";","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"        Task task \u003d Parser.parseAddTask(input, Parser.Command.DEADLINE);","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"        assertEquals(\"Sample Task\", task.taskName);","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LimJH2002"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"    public void parseAddTask_validEventInput_eventAdded() throws SimonException {","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"        String input \u003d \"event Sample Event /from 01/01/2023 1800 /to 02/01/2023 1800\";","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LimJH2002"},"content":"        Task task \u003d Parser.parseAddTask(input, Parser.Command.EVENT);","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LimJH2002"},"content":"        assertEquals(\"Sample Event\", task.taskName);","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"LimJH2002"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"LimJH2002"},"content":"    public void parseAddTask_invalidDeadlineFormat_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"LimJH2002"},"content":"        String input \u003d \"deadline Sample Task\";","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"LimJH2002"},"content":"        assertThrows(SimonException.class, () -\u003e Parser.parseAddTask(input, Parser.Command.DEADLINE));","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"LimJH2002"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"LimJH2002"},"content":"    public void parseAddTask_invalidEventFormat_exceptionThrown() {","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"LimJH2002"},"content":"        String input \u003d \"event Sample Event /from 01/01/2023 1800\";","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"LimJH2002"},"content":"        assertThrows(SimonException.class, () -\u003e Parser.parseAddTask(input, Parser.Command.EVENT));","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"LimJH2002":49}},{"path":"src/test/java/simon/task/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"package simon.task;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"import simon.SimonException;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"public class TaskTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"    public void markAsDone_taskNotDone_taskMarkedAsDone() {","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"        Task task \u003d new ToDo(\"Sample Task\");","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"        task.markAsDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"        assertTrue(task.isDone);","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"    public void markAsUndone_taskDone_taskMarkedAsUndone() {","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"        Task task \u003d new ToDo(\"Sample Task\");","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"        task.markAsDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"        task.markAsUndone();","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"        assertFalse(task.isDone);","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"    public void deadline_toString_formattedCorrectly() throws SimonException {","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"        Deadline deadline \u003d new Deadline(\"Submit Report\", \"12/12/2023 2359\");","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"        String expected \u003d \" [D][ ] Submit Report (by: Dec 12 2023, 11:59 PM)\";","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"        assertEquals(expected, deadline.toString());","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"LimJH2002"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"LimJH2002"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"LimJH2002"},"content":"    public void event_toString_formattedCorrectly() throws SimonException {","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"LimJH2002"},"content":"        Event event \u003d new Event(\"Team Meeting\", \"12/12/2023 1400\", \"12/12/2023 1600\");","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"LimJH2002"},"content":"        String expected \u003d \" [E][ ] Team Meeting (from: Dec 12 2023, 2:00 PM to: Dec 12 2023, 4:00 PM)\";","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"LimJH2002"},"content":"        assertEquals(expected, event.toString());","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"LimJH2002"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"LimJH2002"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"LimJH2002":37}},{"path":"text-ui-test/data/simon.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"T | 1 | This is a very long description just to test Simon\u0027s ability to handle long inputs without breaking or malfunctioning in any way","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"T | 1 | This is a very long description just to test Simon\u0027s ability to handle long inputs without breaking or malfunctioning in any way","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"T | 0 | This is a very long description just to test Simon\u0027s ability to handle long inputs without breaking or malfunctioning in any way","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"T | 0 | This is a very long description just to test Simon\u0027s ability to handle long inputs without breaking or malfunctioning in any way","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"T | 0 | This is a very long description just to test Simon\u0027s ability to handle long inputs without breaking or malfunctioning in any way","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"LimJH2002":5}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"LimJH2002"},"content":"todo borrow book","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"LimJH2002"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"LimJH2002"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"LimJH2002"},"content":"deadline do homework /by no idea :-p","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"LimJH2002"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"LimJH2002"},"content":"unknowncommand","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"LimJH2002"},"content":"mark 5","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"LimJH2002"},"content":"unmark 5","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"LimJH2002"},"content":"delete 1","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"LimJH2002"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"LimJH2002"},"content":"delete 5","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"LimJH2002"},"content":"todo","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"LimJH2002"},"content":"deadline submit report","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"LimJH2002"},"content":"event team lunch /from Tue 12pm","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"LimJH2002"},"content":"delete abc","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"todo This is a very long description just to test Simon\u0027s ability to handle long inputs without breaking or malfunctioning in any way","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"LimJH2002"},"content":"mark 2","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"LimJH2002"},"content":"unmark 3","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"LimJH2002"},"content":"deadline /by next Monday","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"LimJH2002"},"content":"event team dinner /from Wed 8pm","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"LimJH2002"},"content":"mark xyz","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"LimJH2002"},"content":"unmark abc","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"unmark 10","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"LimJH2002"},"content":"mark 10","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"LimJH2002"},"content":"deadline /by","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"LimJH2002"},"content":"event /from Thu 9am /to 11am","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"LimJH2002"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"LimJH2002"},"content":"bye","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"LimJH2002":28}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"LimJH2002"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/simon/*/*.java","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"LimJH2002"},"content":"java -classpath ../bin Simon \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"LimJH2002":2,"-":36}}]
