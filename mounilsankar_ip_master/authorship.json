[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.13\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"    mainClass.set(\"seedu.duke.Duke\")","lastModifiedDate":"2023-08-05"},{"lineNumber":49,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"mounilsankar"},"content":"    enableAssertions \u003d true;","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"mounilsankar"},"content":"checkstyle {","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"mounilsankar"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":65,"author":{"gitId":"mounilsankar"},"content":"javafx {","lastModifiedDate":"2023-09-08"},{"lineNumber":66,"author":{"gitId":"mounilsankar"},"content":"    version \u003d \"17.0.7\"","lastModifiedDate":"2023-09-08"},{"lineNumber":67,"author":{"gitId":"mounilsankar"},"content":"    modules \u003d [ \u0027javafx.controls\u0027 , \u0027javafx.fxml\u0027]","lastModifiedDate":"2023-09-08"},{"lineNumber":68,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":69,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"mounilsankar":26,"-":43}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"D|0|return book |2019-10-15T18:00","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"E|0|join club |2019-01-14T19:00|2019-01-18T19:00","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"T|0|nothing","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"T|0|hi","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"mounilsankar":4}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke;","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"import javafx.geometry.Insets;","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"import javafx.scene.layout.Background;","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"import javafx.scene.layout.BackgroundFill;","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"import javafx.scene.layout.CornerRadii;","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"import javafx.scene.paint.Color;","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"    private Label dialog \u003d new Label();","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"    private ImageView displayPicture \u003d new ImageView();","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"    private DialogBox(Label label, ImageView img) {","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"        try {","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"        dialog.setText(label.getText());","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"        displayPicture.setImage(img.getImage());","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"    private void flip() {","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-08"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-08"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"mounilsankar"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-08"},{"lineNumber":54,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":55,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":56,"author":{"gitId":"mounilsankar"},"content":"    public static DialogBox getUserDialog(Label label, ImageView img) {","lastModifiedDate":"2023-09-08"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"        var db \u003d new DialogBox(label, img);","lastModifiedDate":"2023-09-08"},{"lineNumber":58,"author":{"gitId":"mounilsankar"},"content":"        db.setBackground(new Background(new BackgroundFill(Color.web(\"#F1807E\"),","lastModifiedDate":"2023-09-08"},{"lineNumber":59,"author":{"gitId":"mounilsankar"},"content":"                CornerRadii.EMPTY, Insets.EMPTY)));","lastModifiedDate":"2023-09-08"},{"lineNumber":60,"author":{"gitId":"mounilsankar"},"content":"        return db;","lastModifiedDate":"2023-09-08"},{"lineNumber":61,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":62,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":63,"author":{"gitId":"mounilsankar"},"content":"    public static DialogBox getDukeDialog(Label label, ImageView img) {","lastModifiedDate":"2023-09-08"},{"lineNumber":64,"author":{"gitId":"mounilsankar"},"content":"        var db \u003d new DialogBox(label, img);","lastModifiedDate":"2023-09-08"},{"lineNumber":65,"author":{"gitId":"mounilsankar"},"content":"        db.setBackground(new Background(new BackgroundFill(Color.web(\"#6CABDD\"),","lastModifiedDate":"2023-09-08"},{"lineNumber":66,"author":{"gitId":"mounilsankar"},"content":"                CornerRadii.EMPTY, Insets.EMPTY)));","lastModifiedDate":"2023-09-08"},{"lineNumber":67,"author":{"gitId":"mounilsankar"},"content":"        db.flip();","lastModifiedDate":"2023-09-08"},{"lineNumber":68,"author":{"gitId":"mounilsankar"},"content":"        return db;","lastModifiedDate":"2023-09-08"},{"lineNumber":69,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":70,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"mounilsankar":70}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import duke.command.Command;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":" * Represents the command line chat application Duke","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"     * Constructor for Duke class.","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"    public Duke() {","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"        this.storage \u003d new Storage(\"./data/duke.txt\");","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"        try {","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"            tasks \u003d new TaskList(this.storage.readTasksFromFile());","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"     * Constructs a Duke instance with the specified file path.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"     * @param filePath File path which the Duke instance reads and writes from.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"            tasks \u003d new TaskList(this.storage.readTasksFromFile());","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"    private void run() {","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"        Ui.greet();","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"        while (!isExit) {","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"            try {","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"                Ui.showError(e);","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"mounilsankar"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":55,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"    String getResponse(String input) {","lastModifiedDate":"2023-09-08"},{"lineNumber":58,"author":{"gitId":"mounilsankar"},"content":"        try {","lastModifiedDate":"2023-09-08"},{"lineNumber":59,"author":{"gitId":"mounilsankar"},"content":"            Command command \u003d Parser.parse(input);","lastModifiedDate":"2023-09-08"},{"lineNumber":60,"author":{"gitId":"mounilsankar"},"content":"            String response \u003d command.execute(tasks, ui, storage);","lastModifiedDate":"2023-09-08"},{"lineNumber":61,"author":{"gitId":"mounilsankar"},"content":"            if (command.isExit()) {","lastModifiedDate":"2023-09-08"},{"lineNumber":62,"author":{"gitId":"mounilsankar"},"content":"                javafx.application.Platform.exit();","lastModifiedDate":"2023-09-08"},{"lineNumber":63,"author":{"gitId":"mounilsankar"},"content":"            }","lastModifiedDate":"2023-09-08"},{"lineNumber":64,"author":{"gitId":"mounilsankar"},"content":"            return response;","lastModifiedDate":"2023-09-08"},{"lineNumber":65,"author":{"gitId":"mounilsankar"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-08"},{"lineNumber":66,"author":{"gitId":"mounilsankar"},"content":"            return Ui.showError(e);","lastModifiedDate":"2023-09-08"},{"lineNumber":67,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":68,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":69,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":70,"author":{"gitId":"mounilsankar"},"content":"    String getWelcomeMessage() {","lastModifiedDate":"2023-09-08"},{"lineNumber":71,"author":{"gitId":"mounilsankar"},"content":"        return Ui.greet();","lastModifiedDate":"2023-09-08"},{"lineNumber":72,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":73,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-09-08"},{"lineNumber":74,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":75,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":76,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"mounilsankar":75,"-":1}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke;","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"public class Launcher {","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"mounilsankar":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke;","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"        try {","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().addWelcomeMessage();","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"            stage.show();","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"mounilsankar":31}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke;","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"public class MainWindow {","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"    private Duke duke;","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"        duke \u003d d;","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"     * Adds the welcome message to screen.","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"    public void addWelcomeMessage() {","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"        Label welcomeLabel \u003d new Label(duke.getWelcomeMessage());","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"        dialogContainer.getChildren().addAll(DialogBox.getDukeDialog(welcomeLabel, new ImageView(dukeImage)));","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"    @FXML","lastModifiedDate":"2023-09-08"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-08"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"        Label input \u003d new Label(userInput.getText());","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"mounilsankar"},"content":"        Label response \u003d new Label(duke.getResponse(userInput.getText()));","lastModifiedDate":"2023-09-08"},{"lineNumber":54,"author":{"gitId":"mounilsankar"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-08"},{"lineNumber":55,"author":{"gitId":"mounilsankar"},"content":"                DialogBox.getUserDialog(input, new ImageView(userImage)),","lastModifiedDate":"2023-09-08"},{"lineNumber":56,"author":{"gitId":"mounilsankar"},"content":"                DialogBox.getDukeDialog(response, new ImageView(dukeImage))","lastModifiedDate":"2023-09-08"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"        );","lastModifiedDate":"2023-09-08"},{"lineNumber":58,"author":{"gitId":"mounilsankar"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-08"},{"lineNumber":59,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-09-08"},{"lineNumber":60,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"mounilsankar":60}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import duke.command.Command;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import duke.command.DeadlineCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import duke.command.EventCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"import duke.command.TodoCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"import duke.exception.InvalidTaskException;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":" * Represents a parser class to parse user commands for Duke","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"public class Parser {","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"     * Parses a string input and returns the corresponding Command object.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"     * If the command is invalid throws InvalidTaskException","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"     * @param fullCommand The String command that is inputeby the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"     * @return Command object corresponding to the string command.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"    public static Command parse(String fullCommand) {","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"        //read first word in command","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"        String[] words \u003d fullCommand.split(\" \", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"        switch (words[0]) {","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"        case \"bye\":","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"            return new ExitCommand(fullCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"        case \"delete\":","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"            return new DeleteCommand(fullCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"        case \"list\":","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"            return new ListCommand(fullCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"        case \"mark\":","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"            return new MarkCommand(fullCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"        case \"unmark\":","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"            return new UnmarkCommand(fullCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"        case \"todo\":","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"            return new TodoCommand(fullCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"        case \"deadline\":","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"            return new DeadlineCommand(fullCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"        case \"event\":","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"            return new EventCommand(fullCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"        case \"find\":","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"            return new FindCommand(fullCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"        default:","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"            throw new InvalidTaskException();","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"mounilsankar":52}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import java.io.File;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":" * Represents a storage class which takes care of the reading","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":" * and writing of the list of tasks for Duke","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"public class Storage {","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"    public static final String DATETIME_INPUT_FORMAT \u003d \"yyyy-MM-dd HHmm\";","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"    public static final DateTimeFormatter","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"            DATE_TIME_INPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(DATETIME_INPUT_FORMAT);","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"    private final String FILE_PATH;","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"     * Constructs a Storage instance with the specified filePath","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"     * @param filePath The file path to read and write from","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"        this.FILE_PATH \u003d filePath;","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"     * Writes the tasks in the task list to a file as specified","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"     * @param taskList The list of tasks to write","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"     * @throws IOException Throws IOException when the writing is unsuccessful","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"    public void writeTasksToFile(ArrayList\u003cTask\u003e taskList) throws IOException {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"        //check if file path exists already or not","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"        String fileDirectory \u003d \"./\" + FILE_PATH.split(\"/\", 2)[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"        File dir \u003d new File(fileDirectory);","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"        if (!dir.exists()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"            dir.mkdir();","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"        FileWriter fw \u003d new FileWriter(FILE_PATH);","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"            fw.write(task.writeFileFormat() + \"\\n\");","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"        fw.close();","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"     * Reads saved tasks from file path","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"mounilsankar"},"content":"     * @return Returns an arraylist of tasks","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"mounilsankar"},"content":"     * @throws FileNotFoundException Throws FileNotFoundException if the file path does not exist","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"mounilsankar"},"content":"    public ArrayList\u003cTask\u003e readTasksFromFile() throws FileNotFoundException {","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"        File file \u003d new File(FILE_PATH);","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"mounilsankar"},"content":"        Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"mounilsankar"},"content":"        ArrayList\u003cTask\u003e savedTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"mounilsankar"},"content":"        while (scanner.hasNext()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"mounilsankar"},"content":"            String line \u003d scanner.nextLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"mounilsankar"},"content":"            Task task \u003d Task.readFromFile(line);","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"mounilsankar"},"content":"            if (task !\u003d null) {","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"mounilsankar"},"content":"                savedTasks.add(task);","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"mounilsankar"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"mounilsankar"},"content":"        return savedTasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"mounilsankar":69}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":" * A class to represent a list of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"public class TaskList {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"     * Constructs a new task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"     * Constructs a new task list with the given list of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"     * @param tasks The list of tasks to add.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"        this.taskList \u003d tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"     * Adds a task to the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"     * @param t The task to add.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"    public String addTask(Task t) {","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"        this.taskList.add(t);","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"        sb.append(\"Got it. I\u0027ve added this task:\\n\");","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"        sb.append(t + \"\\n\");","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"        sb.append(\"Now you have \" + this.taskList.size() + \" in the list.\" + \"\\n\");","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"        return sb.toString();","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"     * Gets the list of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"     * @return The list of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"        return this.taskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"mounilsankar"},"content":"     * Deletes a task from the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"mounilsankar"},"content":"     * @param i The index of the task to delete.","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"mounilsankar"},"content":"    public String deleteTask(int i) {","lastModifiedDate":"2023-09-08"},{"lineNumber":59,"author":{"gitId":"mounilsankar"},"content":"        Task t \u003d this.taskList.get(i);","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"mounilsankar"},"content":"        this.taskList.remove(i);","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"mounilsankar"},"content":"        int length \u003d this.taskList.size();","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"mounilsankar"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-09-08"},{"lineNumber":63,"author":{"gitId":"mounilsankar"},"content":"        sb.append(\"Noted! I\u0027ve removed this task:\" + \"\\n\");","lastModifiedDate":"2023-09-08"},{"lineNumber":64,"author":{"gitId":"mounilsankar"},"content":"        sb.append(t + \"\\n\");","lastModifiedDate":"2023-09-08"},{"lineNumber":65,"author":{"gitId":"mounilsankar"},"content":"        sb.append(\"Now you have \" + length + \" tasks in the list.\" + \"\\n\");","lastModifiedDate":"2023-09-08"},{"lineNumber":66,"author":{"gitId":"mounilsankar"},"content":"        return sb.toString();","lastModifiedDate":"2023-09-08"},{"lineNumber":67,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"mounilsankar"},"content":"     * Prints the tasks in the list that contain the String s.","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"mounilsankar"},"content":"     * @param s The string to search among the tasks","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"mounilsankar"},"content":"    public String findMatching(String s) {","lastModifiedDate":"2023-09-08"},{"lineNumber":75,"author":{"gitId":"mounilsankar"},"content":"        int index \u003d 1;","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"mounilsankar"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-09-08"},{"lineNumber":77,"author":{"gitId":"mounilsankar"},"content":"        sb.append(\"Here are the matching tasks in your list:\" + \"\\n\");","lastModifiedDate":"2023-09-08"},{"lineNumber":78,"author":{"gitId":"mounilsankar"},"content":"        for (Task t : this.taskList) {","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"mounilsankar"},"content":"            if (t.contains(s)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"mounilsankar"},"content":"                sb.append(index + \".\" + t + \"\\n\");","lastModifiedDate":"2023-09-08"},{"lineNumber":81,"author":{"gitId":"mounilsankar"},"content":"                index +\u003d 1;","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"mounilsankar"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"mounilsankar"},"content":"        return sb.toString();","lastModifiedDate":"2023-09-08"},{"lineNumber":85,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"mounilsankar"},"content":"     * Prints the tasks in the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"mounilsankar"},"content":"    public String printTasks() {","lastModifiedDate":"2023-09-08"},{"lineNumber":91,"author":{"gitId":"mounilsankar"},"content":"        int len \u003d this.taskList.size();","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"mounilsankar"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-09-08"},{"lineNumber":93,"author":{"gitId":"mounilsankar"},"content":"        sb.append(\"Here are the tasks in your list:\" + \"\\n\");","lastModifiedDate":"2023-09-08"},{"lineNumber":94,"author":{"gitId":"mounilsankar"},"content":"        for (int i \u003d 0; i \u003c len; i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"mounilsankar"},"content":"            int taskNumber \u003d i + 1;","lastModifiedDate":"2023-09-04"},{"lineNumber":96,"author":{"gitId":"mounilsankar"},"content":"            Task t \u003d this.taskList.get(i);","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"mounilsankar"},"content":"            sb.append(taskNumber","lastModifiedDate":"2023-09-08"},{"lineNumber":98,"author":{"gitId":"mounilsankar"},"content":"                    + \".\"","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"mounilsankar"},"content":"                    + t + \"\\n\");","lastModifiedDate":"2023-09-08"},{"lineNumber":100,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"mounilsankar"},"content":"        return sb.toString();","lastModifiedDate":"2023-09-08"},{"lineNumber":102,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":103,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"mounilsankar":103}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":" * The Ui class handles user interface interactions and displays messages to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"public class Ui {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"    private static final String HORIZONTAL_LINE \u003d \"_____________________________________________________________\";","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"    private Scanner scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"     * Constructs a Ui object and initializes the scanner to read user input.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"    public Ui() {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"     * Reads and returns a user command from the standard input.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"     * @return A string representing the user\u0027s input command.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"    public String readCommand() {","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"        String command \u003d scanner.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"        return command;","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"     * Displays a greeting message to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"    public static String greet() {","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"        String logo \u003d \"       .__\\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"                + \"  ____ |__| ____   ____\\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"                + \"/    \\\\|  |/    \\\\ /  _  \\\\\\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"                + \"|   |  \\\\  |   |  (  \u003c_\u003e )\\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"                + \"|___|  /__|___|  /\\\\____/\\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"                + \"     \\\\/        \\\\/\";","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"        sb.append(\"Hello from\\n\" + logo + \"\\n\");","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"        sb.append(\"Hello! I\u0027m NINO!\" + \"\\n\");","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"        sb.append(\"What can I do for you?\" + \"\\n\");","lastModifiedDate":"2023-09-08"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"        return sb.toString();","lastModifiedDate":"2023-09-08"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"     * Displays an error message to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"     * @param e A DukeException representing the error to be displayed.","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"mounilsankar"},"content":"    public static String showError(DukeException e) {","lastModifiedDate":"2023-09-08"},{"lineNumber":54,"author":{"gitId":"mounilsankar"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-09-08"},{"lineNumber":55,"author":{"gitId":"mounilsankar"},"content":"        sb.append(e.getMessage() + \"\\n\");","lastModifiedDate":"2023-09-08"},{"lineNumber":56,"author":{"gitId":"mounilsankar"},"content":"        return sb.toString();","lastModifiedDate":"2023-09-08"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"mounilsankar":58}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":" * The Command class is an abstract base class for all commands that can be executed in the Duke application.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":" * Each concrete subclass of Command represents a specific user command.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"public abstract class Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"    protected String fullCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"     * Constructs a new Command object with the specified full command string.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"     * @param fullCommand The full command string as entered by the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"    public Command(String fullCommand) {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"        this.fullCommand \u003d fullCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"     * Checks if the command is an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"     * @return true if the command is an exit command; false otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"     * Executes the command, performing the necessary actions on the task list, user interface, and storage.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"     * @param tasks   The task list to be operated on by the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"     * @param ui      The user interface to display messages or interact with the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"     * @param storage The storage object to read from or write to a data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"    public abstract String execute(TaskList tasks , Ui ui, Storage storage);","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"mounilsankar":38}},{"path":"src/main/java/duke/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"import duke.exception.InvalidDateException;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":" * The DeadlineCommand class represents a command to add a Deadline task to the task list in the Duke application.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":" * It parses the user input and handles exceptions related to invalid input or date formatting.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"     * Constructs a new DeadlineCommand object with the specified full command string.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"     * @param fullCommand The full command string as entered by the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"    public DeadlineCommand(String fullCommand) {","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"        super(fullCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"     * Executes the deadline command, adding a new deadline task to the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"     * @param tasks   The task list to which the deadline task will be added.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"     * @param ui      The user interface for displaying messages to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"     * @param storage The storage object for reading from or writing to a data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"     * @throws InvalidArgumentException If the command is missing required arguments.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"     * @throws InvalidDateException      If the date provided is in an invalid format.","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"    public String execute(TaskList tasks , Ui ui, Storage storage)","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"            throws InvalidArgumentException, InvalidDateException {","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"        String[] words \u003d this.fullCommand.split(\" \", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"        if (words.length \u003c 2) {","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"            throw new InvalidArgumentException(\"deadline\");","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"            String[] taskWithDeadline \u003d words[1].split(\"/\", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"            String c \u003d taskWithDeadline[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"            if (taskWithDeadline.length \u003c 2) {","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"                throw new InvalidArgumentException(\"deadline\");","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"            String[] splitTask \u003d taskWithDeadline[1].split(\" \", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"            if (splitTask.length \u003c 2) {","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"                throw new InvalidArgumentException(\"deadline\");","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"            } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"mounilsankar"},"content":"                try {","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"mounilsankar"},"content":"                    LocalDateTime deadline \u003d LocalDateTime.parse(splitTask[1], Storage.DATE_TIME_INPUT_FORMATTER);","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"mounilsankar"},"content":"                    Deadline t \u003d new Deadline(c, deadline);","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"mounilsankar"},"content":"                    String s \u003d tasks.addTask(t);","lastModifiedDate":"2023-09-08"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"                    return s;","lastModifiedDate":"2023-09-08"},{"lineNumber":58,"author":{"gitId":"mounilsankar"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"mounilsankar"},"content":"                    throw new InvalidDateException();","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"mounilsankar"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"mounilsankar"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"mounilsankar"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"mounilsankar"},"content":"        return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"mounilsankar":68}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":" * The DeleteCommand class represents a command to delete a task","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":" * It parses the user input and handles exceptions related to invalid input.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"     * Constructs a new DeleteCommand object with the specified full command string.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"     * @param fullCommand The full command string as entered by the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"    public DeleteCommand(String fullCommand) {","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"        super(fullCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"     * Executes the Delete command, deleting a task in the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"     * @param tasks   The task list in which the task is to be deleted.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"     * @param ui      The user interface for displaying messages to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"     * @param storage The storage object for reading from or writing to a data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"     * @throws InvalidArgumentException If the command is missing required arguments.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"    public String execute(TaskList tasks , Ui ui, Storage storage) throws InvalidArgumentException {","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"        String[] words \u003d this.fullCommand.split(\" \", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"            String s \u003d tasks.deleteTask(Integer.parseInt(words[1]) - 1);","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"            return s;","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"            throw new InvalidArgumentException(\"☹ OOPS!!! I\u0027m sorry, please enter a valid index to mark\");","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"        return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"mounilsankar":45}},{"path":"src/main/java/duke/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"import duke.exception.InvalidDateException;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"import duke.task.Event;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":" * The EventCommand class represents a command to add a Event task to the task list in the Duke application.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":" * It parses the user input and handles exceptions related to invalid input or date formatting.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"     * Constructs a new EventCommand object with the specified full command string.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"     * @param fullCommand The full command string as entered by the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"    public EventCommand(String fullCommand) {","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"        super(fullCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"     * Executes the Event command, adding a new Event task to the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"     * @param tasks   The task list to which the Event task will be added.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"     * @param ui      The user interface for displaying messages to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"     * @param storage The storage object for reading from or writing to a data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"     * @throws InvalidArgumentException If the command is missing required arguments.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"     * @throws InvalidDateException      If the date provided is in an invalid format.","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"    public String execute(TaskList tasks , Ui ui, Storage storage)","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"            throws InvalidArgumentException, InvalidDateException {","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"        String[] words \u003d this.fullCommand.split(\" \", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"        if (words.length \u003c 2) {","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"            throw new InvalidArgumentException(\"event\");","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"            String[] splitCommand \u003d words[1].split(\"/\", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"            if (splitCommand.length \u003c 2) {","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"                throw new InvalidArgumentException(\"event\");","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"            String c \u003d splitCommand[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"            String[] splitDeadline \u003d splitCommand[1].split(\"/\", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"            if (splitDeadline.length \u003c 2) {","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"                throw new InvalidArgumentException(\"event\");","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"            } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"mounilsankar"},"content":"                if (splitDeadline[0].split(\" \", 2).length \u003c 2","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"mounilsankar"},"content":"                        || splitDeadline[1].split(\" \", 2).length \u003c 2) {","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"mounilsankar"},"content":"                    throw new InvalidArgumentException(\"event\");","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"mounilsankar"},"content":"                } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"                    try {","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"mounilsankar"},"content":"                        LocalDateTime from \u003d LocalDateTime.parse(splitDeadline[0].split(\" \", 2)[1]","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"mounilsankar"},"content":"                                .strip(), Storage.DATE_TIME_INPUT_FORMATTER);","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"mounilsankar"},"content":"                        LocalDateTime to \u003d LocalDateTime.parse(splitDeadline[1].split(\" \", 2)[1]","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"mounilsankar"},"content":"                                .strip(), Storage.DATE_TIME_INPUT_FORMATTER);","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"mounilsankar"},"content":"                        Event t \u003d new Event(c, from, to);","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"mounilsankar"},"content":"                        String s \u003d tasks.addTask(t);","lastModifiedDate":"2023-09-08"},{"lineNumber":64,"author":{"gitId":"mounilsankar"},"content":"                        return s;","lastModifiedDate":"2023-09-08"},{"lineNumber":65,"author":{"gitId":"mounilsankar"},"content":"                    } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"mounilsankar"},"content":"                        throw new InvalidDateException();","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"mounilsankar"},"content":"                    }","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"mounilsankar"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"mounilsankar"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"mounilsankar"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"mounilsankar"},"content":"        return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"mounilsankar":76}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":" * The ExitCommand class represents a command to exit the application.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":" * It parses the user input.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"     * Constructs a new ExitCommand object with the specified full command string.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"     * @param fullCommand The full command string as entered by the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"    public ExitCommand(String fullCommand) {","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"        super(fullCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"     * Executes the Exit command, adding a new deadline task to the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"     * @param tasks   The task list from which the tasks will be read from.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"     * @param ui      The user interface for displaying messages to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"     * @param storage The storage object for reading from or writing to a data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"     * @throws DukeException If there is an error writing to file.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"        sb.append(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"            storage.writeTasksToFile(tasks.getTasks());","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"            return sb.toString();","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"            throw new DukeException(\"Error in writing taskList to file!\");","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"        return true;","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"mounilsankar":48}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke.command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import duke.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":" * The FindCommand class represents a command to search for tasks in the Duke application.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":" * It searches for tasks that match a given keyword and displays the results to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"     * Constructs a new FindCommand object with the specified full command string.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"     * @param fullCommand The full command string as entered by the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"    public FindCommand(String fullCommand) {","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"        super(fullCommand);","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"     * Checks if the command is an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"     * @return false since FindCommand is not an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"        return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"     * Executes the find command, searching for tasks that match a given keyword.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"     * @param tasks   The task list to search for matching tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"     * @param ui      The user interface for displaying messages to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"     * @param storage The storage object for reading from or writing to a data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"     * @throws InvalidArgumentException If the command is missing the keyword.","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"    public String execute(TaskList tasks , Ui ui, Storage storage) {","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"        String[] words \u003d this.fullCommand.split(\" \", 2);","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"        if (words.length \u003c 2) {","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"            throw new InvalidArgumentException(\"find\");","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"        String s \u003d tasks.findMatching(words[1]);","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"        return s;","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"mounilsankar":50}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":" * The ListCommand class represents a command to list current tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":" * It parses the user input.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"     * Constructs a new ListCommand object with the specified full command string.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"     * @param fullCommand The full command string as entered by the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"    public ListCommand(String fullCommand) {","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"        super(fullCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"     * Executes the List command, printing the list of current tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"     * @param tasks   The task list which contains the list of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"     * @param ui      The user interface for displaying messages to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"     * @param storage The storage object for reading from or writing to a data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"    public String execute(TaskList tasks , Ui ui, Storage storage) {","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"        sb.append(tasks.printTasks());","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"        return sb.toString();","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"        return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"mounilsankar":39}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":" * The MarkCommand class represents a command to mark tasks as complete.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":" * It parses the user input and handles exceptions related to invalid input.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"     * Constructs a new MarkCommand object with the specified full command string.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"     * @param fullCommand The full command string as entered by the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"    public MarkCommand(String fullCommand) {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"        super(fullCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"     * Executes the Mark command, marking a task in tasks as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"     * @param tasks   The task list containing the tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"     * @param ui      The user interface for displaying messages to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"     * @param storage The storage object for reading from or writing to a data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"     * @throws InvalidArgumentException If the command is missing required arguments.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"    public String execute(TaskList tasks , Ui ui, Storage storage) {","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"            String[] words \u003d this.fullCommand.split(\" \", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"            Task t \u003d tasks.getTasks().get(Integer.parseInt(words[1]) - 1);","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"            t.markDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"            StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"            sb.append(\"Nice! I\u0027ve marked this task as done:\" + \"\\n\");","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"            sb.append(t + \"\\n\");","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"            return sb.toString();","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"            throw new InvalidArgumentException(\"☹ OOPS!!! I\u0027m sorry, please enter a valid index to mark\");","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"        return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"mounilsankar":50}},{"path":"src/main/java/duke/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":" * The TodoCommand class represents a command to add a Todo task to the task list in the Duke application.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":" * It parses the user input and handles exceptions related to invalid input.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"     * Constructs a new TodoCommand object with the specified full command string.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"     * @param fullCommand The full command string as entered by the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"    public TodoCommand(String fullCommand) {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"        super(fullCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"     * Executes the Todo command, adding a new Todo task to the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"     * @param tasks   The task list to which the Todo task will be added.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"     * @param ui      The user interface for displaying messages to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"     * @param storage The storage object for reading from or writing to a data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"     * @throws InvalidArgumentException If the command is missing required arguments.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"    public String execute(TaskList tasks , Ui ui, Storage storage) throws InvalidArgumentException {","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"        String[] words \u003d this.fullCommand.split(\" \", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"        if (words.length \u003c 2) {","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"            throw new InvalidArgumentException(\"todo\");","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"            Todo t \u003d new Todo(words[1]);","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"            String s \u003d tasks.addTask(t);","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"            return s;","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"        return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"mounilsankar":47}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":" * The UnmarkCommand class represents a command to unmark tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":" * It parses the user input and handles exceptions related to invalid input.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"     * Constructs a new UnmarkCommand object with the specified full command string.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"     * @param fullCommand The full command string as entered by the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"    public UnmarkCommand(String fullCommand) {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"        super(fullCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"     * Executes the Unmark command, marking a task in tasks as not done.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"     * @param tasks   The task list containing the tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"     * @param ui      The user interface for displaying messages to the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"     * @param storage The storage object for reading from or writing to a data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"     * @throws InvalidArgumentException If the command is missing required arguments.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"    public String execute(TaskList tasks , Ui ui, Storage storage) throws InvalidArgumentException {","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"            String[] words \u003d this.fullCommand.split(\" \", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"            Task t \u003d tasks.getTasks().get(Integer.parseInt(words[1]) - 1);","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"            t.markUndone();","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"            StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"            sb.append(\"OK, I\u0027ve marked this task as not done yet:\" + \"\\n\");","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"            sb.append(t + \"\\n\");","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"            return sb.toString();","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"            throw new InvalidArgumentException(\"☹ OOPS!!! I\u0027m sorry, please enter a valid index to mark\");","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"        return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"mounilsankar":50}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke.exception;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":" * The DukeException class represents exceptions specific to the Duke application.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":" * It is a subclass of RuntimeException and is used to handle custom application-related exceptions.","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"public class DukeException extends RuntimeException {","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"     * Constructs a new DukeException with the specified error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"     * @param message The error message that describes the cause of the exception.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"        super(message);","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"mounilsankar":17}},{"path":"src/main/java/duke/exception/InvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke.exception;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":" * The InvalidArgumentException class represents an exception that is thrown when invalid arguments","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":" * are provided to a command in the Duke application.","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":" * It is a subclass of DukeException and provides a specific error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"public class InvalidArgumentException extends DukeException {","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"     * Constructs a new InvalidArgumentException with a custom error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"     * @param s The name of the command for which the arguments are invalid.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"    public InvalidArgumentException(String s) {","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"        super(\"☹ OOPS!!! I\u0027m sorry, but arguments to \" + s + \" cannot be empty\");","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"mounilsankar":18}},{"path":"src/main/java/duke/exception/InvalidDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke.exception;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":" * The InvalidDateException class represents an exception that is thrown when invalid dates","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":" * are input to a command in the Duke application.","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":" * It is a subclass of DukeException and provides a specific error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"public class InvalidDateException extends DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"     * Constructs a new InvalidDateException with an error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"    public InvalidDateException() {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"        super(\"☹ OOPS!!! I\u0027m sorry, but your date is in the incorrect format! \"","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"                + \"please key it in yyyy-mm-dd format! :-(\");","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"mounilsankar":17}},{"path":"src/main/java/duke/exception/InvalidTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke.exception;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":" * The InvalidTaskException class represents an exception that is thrown when invalid taks","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":" * are input to a command in the Duke application.","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":" * It is a subclass of DukeException and provides a specific error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"public class InvalidTaskException extends DukeException {","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"     * Constructs a new InvalidTaskException with an error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"    public InvalidTaskException() {","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"        super(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"mounilsankar":16}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke.task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":" * The Deadline class represents a deadline task in the Duke application.","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":" * It is a subclass of the Task class and inherits its properties and methods.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"    private LocalDateTime deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"     * Constructs a new Deadline object with the specified description and deadline date and time.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"     * @param description The description of the deadline task.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"     * @param deadline    The deadline date and time of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"    public Deadline(String description, LocalDateTime deadline) {","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"     * Reads a deadline task from a file and returns a corresponding Deadline object.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"     * @param components An array of components parsed from a data file line.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"     * @return A Deadline object representing the deadline task read from the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"    public static Deadline readFromFile(String[] components) {","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"        boolean isDone \u003d components[1].equals(\"1\");","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"        Deadline deadline \u003d new Deadline(components[2], LocalDateTime.parse(components[3]));","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"        if (isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"            deadline.markDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"        return deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"     * Returns the task in the format suitable for writing to a data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"     * @return A string in the file format representing the deadline task.","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"    public String writeFileFormat() {","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"        return \"D|\" + super.writeFileFormat() + \"|\" + this.deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"     * Returns a string representation of the deadline task, including its status icon, description,","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"     * and the deadline date and time.","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"mounilsankar"},"content":"     * @return A string representation of the deadline task.","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"mounilsankar"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"        return \"[D] \"","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"mounilsankar"},"content":"                + super.toString()","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"mounilsankar"},"content":"                + \"(by: \"","lastModifiedDate":"2023-08-23"},{"lineNumber":60,"author":{"gitId":"mounilsankar"},"content":"                + this.deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HHmm\"))","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"mounilsankar"},"content":"                + \")\";","lastModifiedDate":"2023-08-23"},{"lineNumber":62,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":63,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"mounilsankar":63}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke.task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":" * The Event class represents an event task in the Duke application.","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":" * It is a subclass of the Task class and inherits its properties and methods.","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"    private LocalDateTime start;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"    private LocalDateTime end;","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"     * Constructs a new Event object with the specified description, start, and end date and time.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"     * @param description The description of the event task.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"     * @param start       The start date and time of the event.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"     * @param end         The end date and time of the event.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"    public Event(String description, LocalDateTime start, LocalDateTime end) {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"     * Reads an event task from a file and returns a corresponding Event object.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"     * @param components An array of components parsed from a data file line.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"     * @return An Event object representing the event task read from the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"    public static Event readFromFile(String[] components) {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"        boolean isDone \u003d components[1].equals(\"1\");","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"        Event event \u003d new Event(components[2], LocalDateTime.parse(components[3]),","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"                LocalDateTime.parse(components[4]));","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"        if (isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"            event.markDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"        return event;","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"     * Returns the task in the format suitable for writing to a data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"     * @return A string in the file format representing the event task.","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"    public String writeFileFormat() {","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"        //store as E|1/0|this.start|this.end","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"        return \"E|\" + super.writeFileFormat() + \"|\" + this.start + \"|\" + this.end;","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"mounilsankar"},"content":"     * Returns a string representation of the event task, including its status icon, description,","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"mounilsankar"},"content":"     * and the start and end date and time.","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"     * @return A string representation of the event task.","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":60,"author":{"gitId":"mounilsankar"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":61,"author":{"gitId":"mounilsankar"},"content":"        return \"[E] \"","lastModifiedDate":"2023-08-23"},{"lineNumber":62,"author":{"gitId":"mounilsankar"},"content":"                + super.toString()","lastModifiedDate":"2023-08-23"},{"lineNumber":63,"author":{"gitId":"mounilsankar"},"content":"                + \"(from: \"","lastModifiedDate":"2023-08-23"},{"lineNumber":64,"author":{"gitId":"mounilsankar"},"content":"                + this.start.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HHmm\"))","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"mounilsankar"},"content":"                + \" to: \"","lastModifiedDate":"2023-08-23"},{"lineNumber":66,"author":{"gitId":"mounilsankar"},"content":"                + this.end.format(DateTimeFormatter.ofPattern(\"MMM d yyyy HHmm\"))","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"mounilsankar"},"content":"                + \")\";","lastModifiedDate":"2023-08-23"},{"lineNumber":68,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":69,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"mounilsankar":69}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke.task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":" * The Task class represents a generic task in the Duke application.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"public class Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"    protected static final String DATETIME_INPUT_FORMAT \u003d \"yyyy-MM-dd HHmm\";","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"    protected String description;","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"     * Constructs a new Task object with the specified description.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"     * Reads a task from a file and returns a corresponding Task object.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"     * @param line The line containing task information from the data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"     * @return A Task object representing the task read from the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"    public static Task readFromFile(String line) {","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"        String[] components \u003d line.split(\"\\\\|\");","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"        switch(components[0]) {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"        case(\"T\"):","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"            return Todo.readFromFile(components);","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"        case(\"D\"):","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"            return Deadline.readFromFile(components);","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"        case(\"E\"):","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"            return Event.readFromFile(components);","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"        default:","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"            return null;","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"     * Returns the task in the format suitable for writing to a data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"     * @return A string in the file format representing the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"    public String writeFileFormat() {","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"        return (this.isDone ? \"1\" : \"0\") + \"|\" + this.description;","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"     * Gets the status icon for the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"mounilsankar"},"content":"     * @return \"X\" if the task is done, \" \" (space) otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"mounilsankar"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-23"},{"lineNumber":56,"author":{"gitId":"mounilsankar"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-08-23"},{"lineNumber":57,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"mounilsankar"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"mounilsankar"},"content":"    public void markDone() {","lastModifiedDate":"2023-08-23"},{"lineNumber":63,"author":{"gitId":"mounilsankar"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-23"},{"lineNumber":64,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":65,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":66,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"mounilsankar"},"content":"     * Marks the task as not done.","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"mounilsankar"},"content":"    public void markUndone() {","lastModifiedDate":"2023-08-23"},{"lineNumber":70,"author":{"gitId":"mounilsankar"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":71,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":72,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"mounilsankar"},"content":"     * Returns a boolean value indicating if the tasks description contains the string s.","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"mounilsankar"},"content":"     * @param s The String to be searched in task descripton","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"mounilsankar"},"content":"     * @return A true if s in task description and false if not.","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"mounilsankar"},"content":"    public boolean contains(String s) {","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"mounilsankar"},"content":"        return this.description.contains(s);","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"mounilsankar"},"content":"     * Returns a string representation of the task, including its status icon and description.","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"mounilsankar"},"content":"     * @return A string representation of the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":89,"author":{"gitId":"mounilsankar"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":90,"author":{"gitId":"mounilsankar"},"content":"        return (\"[\"","lastModifiedDate":"2023-08-23"},{"lineNumber":91,"author":{"gitId":"mounilsankar"},"content":"                + this.getStatusIcon()","lastModifiedDate":"2023-08-23"},{"lineNumber":92,"author":{"gitId":"mounilsankar"},"content":"                + \"] \"","lastModifiedDate":"2023-08-23"},{"lineNumber":93,"author":{"gitId":"mounilsankar"},"content":"                + this.description);","lastModifiedDate":"2023-08-23"},{"lineNumber":94,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":95,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"mounilsankar":95}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke.task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":" * The Todo class represents a to-do task in the Duke application.","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":" * It is a subclass of the Task class and inherits its properties and methods.","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"     * Constructs a new Todo object with the specified description.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"     * @param description The description of the todo task.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"     * Reads a todo task from a file and returns a corresponding Todo object.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"     * @param components An array of components parsed from a data file line.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"     * @return A Todo object representing the to-do task read from the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"    public static Todo readFromFile(String[] components) {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"        boolean isDone \u003d components[1].equals(\"1\");","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"        Todo todo \u003d new Todo(components[2]);","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"        if (isDone) {","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"            todo.markDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"        return todo;","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"     * Returns the task in the format suitable for writing to a data file.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"     * @return A string in the file format representing the todo task.","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"    public String writeFileFormat() {","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"        return \"T|\" + super.writeFileFormat();","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"     * Returns a string representation of the todo task, including its status icon and description.","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"     * @return A string representation of the todo task.","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"mounilsankar"},"content":"        return \"[T] \" + super.toString();","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"mounilsankar":52}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"someotherlable\" wrapText\u003d\"true\"/\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"10.0\" right\u003d\"10.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"mounilsankar":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-08"}],"authorContributionMap":{"mounilsankar":19}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"import duke.command.DeadlineCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"import duke.command.EventCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"import duke.command.TodoCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"import duke.exception.InvalidTaskException;","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"public class ParserTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"    public void parse_validCommands() {","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"        // Test valid commands and their corresponding Command classes","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"        assertEquals(ExitCommand.class, Parser.parse(\"bye\").getClass());","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"        assertEquals(DeleteCommand.class, Parser.parse(\"delete 2\").getClass());","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"        assertEquals(ListCommand.class, Parser.parse(\"list\").getClass());","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"        assertEquals(MarkCommand.class, Parser.parse(\"mark 1\").getClass());","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"        assertEquals(UnmarkCommand.class, Parser.parse(\"unmark 3\").getClass());","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"        assertEquals(TodoCommand.class, Parser.parse(\"todo Buy groceries\").getClass());","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"        assertEquals(DeadlineCommand.class,","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"                Parser.parse(\"deadline Submit report /by 2023-09-10 1900\")","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"                        .getClass());","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"        assertEquals(EventCommand.class,","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"mounilsankar"},"content":"                Parser.parse(\"event Team meeting /from 2023-09-15 1900 /to 2023-09-15 2100\")","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"mounilsankar"},"content":"                        .getClass());","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"mounilsankar"},"content":"    public void parse_invalidCommand_exceptionThrown() {","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"mounilsankar"},"content":"        // Test an invalid command","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"mounilsankar"},"content":"        assertThrows(InvalidTaskException.class, () -\u003e {","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"mounilsankar"},"content":"            Parser.parse(\"invalidCommand\");","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"mounilsankar"},"content":"        });","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"mounilsankar"},"content":"        assertThrows(InvalidTaskException.class, () -\u003e {","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"mounilsankar"},"content":"            Parser.parse(\"\");","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"mounilsankar"},"content":"        });","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"mounilsankar"},"content":"        assertThrows(InvalidTaskException.class, () -\u003e {","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"mounilsankar"},"content":"            Parser.parse(\" \");","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"mounilsankar"},"content":"        });","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"mounilsankar":49}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"public class TaskListTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"    public void testAddTask() {","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"mounilsankar"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"mounilsankar"},"content":"        Todo task \u003d new Todo(\"Buy groceries\");","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"mounilsankar"},"content":"        tasks.addTask(task);","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"mounilsankar"},"content":"        assertEquals(1, tasks.getTasks().size());","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"mounilsankar"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"mounilsankar"},"content":"    public void testDeleteTask() {","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"mounilsankar"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"mounilsankar"},"content":"        Todo task1 \u003d new Todo(\"Buy groceries\");","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"mounilsankar"},"content":"        Todo task2 \u003d new Todo(\"Do dishes\");","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"mounilsankar"},"content":"        tasks.addTask(task1);","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"mounilsankar"},"content":"        tasks.addTask(task2);","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"mounilsankar"},"content":"        assertEquals(2, tasks.getTasks().size());","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"mounilsankar"},"content":"        tasks.deleteTask(1);","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"mounilsankar"},"content":"        assertEquals(1, tasks.getTasks().size());","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"mounilsankar"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"mounilsankar"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"mounilsankar"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"mounilsankar":31}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"mounilsankar"},"content":"todo read book","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"mounilsankar"},"content":"deadline return book /by June 6th","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"mounilsankar"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"mounilsankar"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"mounilsankar"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"mounilsankar"},"content":"mark 1","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"mounilsankar"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"mounilsankar"},"content":"unmark 1","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"mounilsankar"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"mounilsankar"},"content":"todo","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"mounilsankar"},"content":"bye","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"mounilsankar":11}}]
