[{"path":"src/main/java/ChatBot.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayshawntan"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"rayshawntan"},"content":"import java.util.List;","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"rayshawntan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"rayshawntan"},"content":"public class ChatBot {","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"rayshawntan"},"content":"    private static List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"rayshawntan"},"content":"    private static final String lineBreak \u003d \"____________________________________________________________\\n\";","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"rayshawntan"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"rayshawntan"},"content":"        // Introduction message","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"rayshawntan"},"content":"        System.out.println(lineBreak +","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"rayshawntan"},"content":"                \" Hello! I\u0027m Desolute\\n\" +","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"rayshawntan"},"content":"                \" What can I do for you?\\n\" +","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"rayshawntan"},"content":"                lineBreak);","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"rayshawntan"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"rayshawntan"},"content":"        String next \u003d sc.nextLine();","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"rayshawntan"},"content":"        // Loops till bye command is given","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"rayshawntan"},"content":"        while (!next.equals(\"bye\")) {","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"rayshawntan"},"content":"            try {","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"rayshawntan"},"content":"                nextCommand(next);","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"rayshawntan"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"rayshawntan"},"content":"                System.out.println(lineBreak +","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"rayshawntan"},"content":"                        e.getMessage()+","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"rayshawntan"},"content":"                        lineBreak);","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"rayshawntan"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"rayshawntan"},"content":"            next \u003d sc.nextLine();","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"rayshawntan"},"content":"        // Exit message","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"rayshawntan"},"content":"        System.out.println(lineBreak +","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"rayshawntan"},"content":"                \" Bye. Hope to see you again soon!\\n\" +","lastModifiedDate":"2023-08-22"},{"lineNumber":34,"author":{"gitId":"rayshawntan"},"content":"                lineBreak);","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":36,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"rayshawntan"},"content":"    private static void nextCommand(String str) throws DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"rayshawntan"},"content":"        // Splitting of string adapted from","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"rayshawntan"},"content":"        // https://stackoverflow.com/questions/9378394/remove-first-word-from-a-string-in-java","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"rayshawntan"},"content":"        String[] temp \u003d str.split(\" \", 2);","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"rayshawntan"},"content":"        // Checks if any pre determined commands are given","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"rayshawntan"},"content":"        switch (temp[0]) {","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"rayshawntan"},"content":"            case \"list\":","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"rayshawntan"},"content":"                showList();","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"rayshawntan"},"content":"                break;","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"rayshawntan"},"content":"            case \"mark\":","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"rayshawntan"},"content":"                markDone(temp[1]);","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"rayshawntan"},"content":"                break;","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"rayshawntan"},"content":"            case \"unmark\":","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"rayshawntan"},"content":"                unmarkDone(temp[1]);","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"rayshawntan"},"content":"                break;","lastModifiedDate":"2023-08-23"},{"lineNumber":53,"author":{"gitId":"rayshawntan"},"content":"            case \"todo\":","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"rayshawntan"},"content":"                if (temp.length !\u003d 2) {","lastModifiedDate":"2023-08-23"},{"lineNumber":55,"author":{"gitId":"rayshawntan"},"content":"                    throw new DukeException(\" ☹ OOPS!!! The description of a todo cannot be empty.\\n\");","lastModifiedDate":"2023-08-23"},{"lineNumber":56,"author":{"gitId":"rayshawntan"},"content":"                }","lastModifiedDate":"2023-08-23"},{"lineNumber":57,"author":{"gitId":"rayshawntan"},"content":"                Task toDo \u003d new ToDo(temp[1]);","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"rayshawntan"},"content":"                list.add(toDo);","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"rayshawntan"},"content":"                System.out.println(lineBreak +","lastModifiedDate":"2023-08-23"},{"lineNumber":60,"author":{"gitId":"rayshawntan"},"content":"                        \" Got it. I\u0027ve added this task:\\n  \" +","lastModifiedDate":"2023-08-23"},{"lineNumber":61,"author":{"gitId":"rayshawntan"},"content":"                        toDo.toString() +","lastModifiedDate":"2023-08-23"},{"lineNumber":62,"author":{"gitId":"rayshawntan"},"content":"                        getTaskCount() +","lastModifiedDate":"2023-08-23"},{"lineNumber":63,"author":{"gitId":"rayshawntan"},"content":"                        lineBreak);","lastModifiedDate":"2023-08-23"},{"lineNumber":64,"author":{"gitId":"rayshawntan"},"content":"                break;","lastModifiedDate":"2023-08-23"},{"lineNumber":65,"author":{"gitId":"rayshawntan"},"content":"            case \"deadline\":","lastModifiedDate":"2023-08-23"},{"lineNumber":66,"author":{"gitId":"rayshawntan"},"content":"                if (temp.length !\u003d 2) {","lastModifiedDate":"2023-08-23"},{"lineNumber":67,"author":{"gitId":"rayshawntan"},"content":"                    throw new DukeException(\" ☹ OOPS!!! The description of a deadline cannot be empty.\\n\");","lastModifiedDate":"2023-08-23"},{"lineNumber":68,"author":{"gitId":"rayshawntan"},"content":"                }","lastModifiedDate":"2023-08-23"},{"lineNumber":69,"author":{"gitId":"rayshawntan"},"content":"                String[] temp2 \u003d temp[1].split(\" /by\");","lastModifiedDate":"2023-08-23"},{"lineNumber":70,"author":{"gitId":"rayshawntan"},"content":"                if (temp2.length !\u003d 2) {","lastModifiedDate":"2023-08-23"},{"lineNumber":71,"author":{"gitId":"rayshawntan"},"content":"                    throw new DukeException(\" ☹ OOPS!!! The date of a deadline cannot be empty.\\n\");","lastModifiedDate":"2023-08-23"},{"lineNumber":72,"author":{"gitId":"rayshawntan"},"content":"                }","lastModifiedDate":"2023-08-23"},{"lineNumber":73,"author":{"gitId":"rayshawntan"},"content":"                Task deadline \u003d new Deadline(temp2[0], temp2[1]);","lastModifiedDate":"2023-08-23"},{"lineNumber":74,"author":{"gitId":"rayshawntan"},"content":"                list.add(deadline);","lastModifiedDate":"2023-08-23"},{"lineNumber":75,"author":{"gitId":"rayshawntan"},"content":"                System.out.println(lineBreak +","lastModifiedDate":"2023-08-23"},{"lineNumber":76,"author":{"gitId":"rayshawntan"},"content":"                        \" Got it. I\u0027ve added this task:\\n  \" +","lastModifiedDate":"2023-08-23"},{"lineNumber":77,"author":{"gitId":"rayshawntan"},"content":"                        deadline.toString() +","lastModifiedDate":"2023-08-23"},{"lineNumber":78,"author":{"gitId":"rayshawntan"},"content":"                        getTaskCount() +","lastModifiedDate":"2023-08-23"},{"lineNumber":79,"author":{"gitId":"rayshawntan"},"content":"                        lineBreak);","lastModifiedDate":"2023-08-23"},{"lineNumber":80,"author":{"gitId":"rayshawntan"},"content":"                break;","lastModifiedDate":"2023-08-23"},{"lineNumber":81,"author":{"gitId":"rayshawntan"},"content":"            case \"event\":","lastModifiedDate":"2023-08-23"},{"lineNumber":82,"author":{"gitId":"rayshawntan"},"content":"                if (temp.length !\u003d 2) {","lastModifiedDate":"2023-08-23"},{"lineNumber":83,"author":{"gitId":"rayshawntan"},"content":"                    throw new DukeException(\" ☹ OOPS!!! The description of an event cannot be empty.\\n\");","lastModifiedDate":"2023-08-23"},{"lineNumber":84,"author":{"gitId":"rayshawntan"},"content":"                }","lastModifiedDate":"2023-08-23"},{"lineNumber":85,"author":{"gitId":"rayshawntan"},"content":"                String[] temp3 \u003d temp[1].split(\" /from\");","lastModifiedDate":"2023-08-23"},{"lineNumber":86,"author":{"gitId":"rayshawntan"},"content":"                if (temp3.length !\u003d 2) {","lastModifiedDate":"2023-08-23"},{"lineNumber":87,"author":{"gitId":"rayshawntan"},"content":"                    throw new DukeException(\" ☹ OOPS!!! The date and time of an event cannot be empty.\\n\");","lastModifiedDate":"2023-08-23"},{"lineNumber":88,"author":{"gitId":"rayshawntan"},"content":"                }","lastModifiedDate":"2023-08-23"},{"lineNumber":89,"author":{"gitId":"rayshawntan"},"content":"                String[] temp4 \u003d temp3[1].split(\"/to\");","lastModifiedDate":"2023-08-23"},{"lineNumber":90,"author":{"gitId":"rayshawntan"},"content":"                if (temp4.length !\u003d 2) {","lastModifiedDate":"2023-08-23"},{"lineNumber":91,"author":{"gitId":"rayshawntan"},"content":"                    throw new DukeException(\" ☹ OOPS!!! The end time of an event cannot be empty.\\n\");","lastModifiedDate":"2023-08-23"},{"lineNumber":92,"author":{"gitId":"rayshawntan"},"content":"                }","lastModifiedDate":"2023-08-23"},{"lineNumber":93,"author":{"gitId":"rayshawntan"},"content":"                Task event \u003d new Event(temp3[0], temp4[0], temp4[1]);","lastModifiedDate":"2023-08-23"},{"lineNumber":94,"author":{"gitId":"rayshawntan"},"content":"                list.add(event);","lastModifiedDate":"2023-08-23"},{"lineNumber":95,"author":{"gitId":"rayshawntan"},"content":"                System.out.println(lineBreak +","lastModifiedDate":"2023-08-23"},{"lineNumber":96,"author":{"gitId":"rayshawntan"},"content":"                        \" Got it. I\u0027ve added this task:\\n  \" +","lastModifiedDate":"2023-08-23"},{"lineNumber":97,"author":{"gitId":"rayshawntan"},"content":"                        event.toString() +","lastModifiedDate":"2023-08-23"},{"lineNumber":98,"author":{"gitId":"rayshawntan"},"content":"                        getTaskCount() +","lastModifiedDate":"2023-08-23"},{"lineNumber":99,"author":{"gitId":"rayshawntan"},"content":"                        lineBreak);","lastModifiedDate":"2023-08-23"},{"lineNumber":100,"author":{"gitId":"rayshawntan"},"content":"                break;","lastModifiedDate":"2023-08-23"},{"lineNumber":101,"author":{"gitId":"rayshawntan"},"content":"            case \"delete\":","lastModifiedDate":"2023-08-23"},{"lineNumber":102,"author":{"gitId":"rayshawntan"},"content":"                delete(temp[1]);","lastModifiedDate":"2023-08-23"},{"lineNumber":103,"author":{"gitId":"rayshawntan"},"content":"                break;","lastModifiedDate":"2023-08-23"},{"lineNumber":104,"author":{"gitId":"rayshawntan"},"content":"            default:","lastModifiedDate":"2023-08-23"},{"lineNumber":105,"author":{"gitId":"rayshawntan"},"content":"                throw new DukeException(\" ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\");","lastModifiedDate":"2023-08-23"},{"lineNumber":106,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":107,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":108,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":109,"author":{"gitId":"rayshawntan"},"content":"    private static void showList() {","lastModifiedDate":"2023-08-23"},{"lineNumber":110,"author":{"gitId":"rayshawntan"},"content":"        System.out.print(lineBreak);","lastModifiedDate":"2023-08-23"},{"lineNumber":111,"author":{"gitId":"rayshawntan"},"content":"        if (list.isEmpty()) {","lastModifiedDate":"2023-08-23"},{"lineNumber":112,"author":{"gitId":"rayshawntan"},"content":"            System.out.println(\" The list is empty. Please add tasks in!\");","lastModifiedDate":"2023-08-23"},{"lineNumber":113,"author":{"gitId":"rayshawntan"},"content":"        } else {","lastModifiedDate":"2023-08-23"},{"lineNumber":114,"author":{"gitId":"rayshawntan"},"content":"            System.out.println(\" Here are the tasks in your list:\");","lastModifiedDate":"2023-08-23"},{"lineNumber":115,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":116,"author":{"gitId":"rayshawntan"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2023-08-23"},{"lineNumber":117,"author":{"gitId":"rayshawntan"},"content":"            Task temp \u003d list.get(i);","lastModifiedDate":"2023-08-23"},{"lineNumber":118,"author":{"gitId":"rayshawntan"},"content":"            String current \u003d String.format(\" %d.%s\", i + 1, temp.toString());","lastModifiedDate":"2023-08-23"},{"lineNumber":119,"author":{"gitId":"rayshawntan"},"content":"            System.out.println(current);","lastModifiedDate":"2023-08-23"},{"lineNumber":120,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":121,"author":{"gitId":"rayshawntan"},"content":"        System.out.println(lineBreak);","lastModifiedDate":"2023-08-23"},{"lineNumber":122,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":123,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":124,"author":{"gitId":"rayshawntan"},"content":"    private static void markDone(String str) throws DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":125,"author":{"gitId":"rayshawntan"},"content":"        // Adapted from https://stackoverflow.com/questions/43156077/how-to-check-if-a-string-is-float-or-int","lastModifiedDate":"2023-08-23"},{"lineNumber":126,"author":{"gitId":"rayshawntan"},"content":"        boolean isInteger \u003d str.matches(\"\\\\b[1-9][0-9]*\\\\b\");","lastModifiedDate":"2023-08-23"},{"lineNumber":127,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":128,"author":{"gitId":"rayshawntan"},"content":"        if (!isInteger) {","lastModifiedDate":"2023-08-23"},{"lineNumber":129,"author":{"gitId":"rayshawntan"},"content":"            throw new DukeException(\" The task number you have keyed in is not valid. Please try again.\\n\");","lastModifiedDate":"2023-08-23"},{"lineNumber":130,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":131,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":132,"author":{"gitId":"rayshawntan"},"content":"        int num \u003d Integer.parseInt(str) - 1;","lastModifiedDate":"2023-08-23"},{"lineNumber":133,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":134,"author":{"gitId":"rayshawntan"},"content":"        if (list.size() \u003c\u003d num) {","lastModifiedDate":"2023-08-23"},{"lineNumber":135,"author":{"gitId":"rayshawntan"},"content":"            throw new DukeException(\" This task number is not available. Please try again.\\n\");","lastModifiedDate":"2023-08-23"},{"lineNumber":136,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":137,"author":{"gitId":"rayshawntan"},"content":"        Task curr \u003d list.get(num);","lastModifiedDate":"2023-08-23"},{"lineNumber":138,"author":{"gitId":"rayshawntan"},"content":"        curr.markDone();","lastModifiedDate":"2023-08-23"},{"lineNumber":139,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":140,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":141,"author":{"gitId":"rayshawntan"},"content":"    private static void unmarkDone(String str) throws DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":142,"author":{"gitId":"rayshawntan"},"content":"        // Adapted from https://stackoverflow.com/questions/43156077/how-to-check-if-a-string-is-float-or-int","lastModifiedDate":"2023-08-23"},{"lineNumber":143,"author":{"gitId":"rayshawntan"},"content":"        boolean isInteger \u003d str.matches(\"\\\\b[1-9][0-9]*\\\\b\");","lastModifiedDate":"2023-08-23"},{"lineNumber":144,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":145,"author":{"gitId":"rayshawntan"},"content":"        if (!isInteger) {","lastModifiedDate":"2023-08-23"},{"lineNumber":146,"author":{"gitId":"rayshawntan"},"content":"            throw new DukeException(\" The task number you have keyed in is not valid. Please try again.\\n\");","lastModifiedDate":"2023-08-23"},{"lineNumber":147,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":148,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":149,"author":{"gitId":"rayshawntan"},"content":"        int num \u003d Integer.parseInt(str) - 1;","lastModifiedDate":"2023-08-23"},{"lineNumber":150,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":151,"author":{"gitId":"rayshawntan"},"content":"        if (list.size() \u003c\u003d num) {","lastModifiedDate":"2023-08-23"},{"lineNumber":152,"author":{"gitId":"rayshawntan"},"content":"            throw new DukeException(\" This task number is not available. Please try again.\\n\");","lastModifiedDate":"2023-08-23"},{"lineNumber":153,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":154,"author":{"gitId":"rayshawntan"},"content":"        Task curr \u003d list.get(num);","lastModifiedDate":"2023-08-23"},{"lineNumber":155,"author":{"gitId":"rayshawntan"},"content":"        curr.unmarkedDone();","lastModifiedDate":"2023-08-23"},{"lineNumber":156,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":157,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":158,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":159,"author":{"gitId":"rayshawntan"},"content":"    private static void delete(String str) throws DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":160,"author":{"gitId":"rayshawntan"},"content":"        // Adapted from https://stackoverflow.com/questions/43156077/how-to-check-if-a-string-is-float-or-int","lastModifiedDate":"2023-08-23"},{"lineNumber":161,"author":{"gitId":"rayshawntan"},"content":"        boolean isInteger \u003d str.matches(\"\\\\b[1-9][0-9]*\\\\b\");","lastModifiedDate":"2023-08-23"},{"lineNumber":162,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":163,"author":{"gitId":"rayshawntan"},"content":"        if (!isInteger) {","lastModifiedDate":"2023-08-23"},{"lineNumber":164,"author":{"gitId":"rayshawntan"},"content":"            throw new DukeException(\" The task number you have keyed in is not valid. Please try again.\\n\");","lastModifiedDate":"2023-08-23"},{"lineNumber":165,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":166,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":167,"author":{"gitId":"rayshawntan"},"content":"        int num \u003d Integer.parseInt(str) - 1;","lastModifiedDate":"2023-08-23"},{"lineNumber":168,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":169,"author":{"gitId":"rayshawntan"},"content":"        if (list.size() \u003c\u003d num) {","lastModifiedDate":"2023-08-23"},{"lineNumber":170,"author":{"gitId":"rayshawntan"},"content":"            throw new DukeException(\" This task number is not available. Please try again.\\n\");","lastModifiedDate":"2023-08-23"},{"lineNumber":171,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":172,"author":{"gitId":"rayshawntan"},"content":"        Task curr \u003d list.get(num);","lastModifiedDate":"2023-08-23"},{"lineNumber":173,"author":{"gitId":"rayshawntan"},"content":"        list.remove(num);","lastModifiedDate":"2023-08-23"},{"lineNumber":174,"author":{"gitId":"rayshawntan"},"content":"        System.out.println(lineBreak +","lastModifiedDate":"2023-08-23"},{"lineNumber":175,"author":{"gitId":"rayshawntan"},"content":"                \" Noted. I\u0027ve removed this task:\\n  \" +","lastModifiedDate":"2023-08-23"},{"lineNumber":176,"author":{"gitId":"rayshawntan"},"content":"                curr.toString() +","lastModifiedDate":"2023-08-23"},{"lineNumber":177,"author":{"gitId":"rayshawntan"},"content":"                getTaskCount() +","lastModifiedDate":"2023-08-23"},{"lineNumber":178,"author":{"gitId":"rayshawntan"},"content":"                lineBreak);","lastModifiedDate":"2023-08-23"},{"lineNumber":179,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":180,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":181,"author":{"gitId":"rayshawntan"},"content":"    private static String getTaskCount() {","lastModifiedDate":"2023-08-23"},{"lineNumber":182,"author":{"gitId":"rayshawntan"},"content":"        return String.format(\"\\n Now you have %d tasks in the list.\\n\", list.size());","lastModifiedDate":"2023-08-23"},{"lineNumber":183,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":184,"author":{"gitId":"rayshawntan"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"rayshawntan":184}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayshawntan"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"rayshawntan"},"content":"    private String date;","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"rayshawntan"},"content":"    public Deadline(String task, String date) {","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"rayshawntan"},"content":"        super(task);","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"rayshawntan"},"content":"        this.date \u003d date;","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"rayshawntan"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"rayshawntan"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"rayshawntan"},"content":"        return \"[D]\" + super.toString() + \" (by:\" + this.date + \")\";","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"rayshawntan"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"rayshawntan":12}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayshawntan"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"rayshawntan"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"rayshawntan"},"content":"        super(message);","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"rayshawntan"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"rayshawntan"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"rayshawntan"},"content":"        return super.getMessage();","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"rayshawntan"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"rayshawntan":11}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayshawntan"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"rayshawntan"},"content":"    private String start;","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"rayshawntan"},"content":"    private String end;","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"rayshawntan"},"content":"    public Event(String task, String start, String end) {","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"rayshawntan"},"content":"        super(task);","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"rayshawntan"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"rayshawntan"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"rayshawntan"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"rayshawntan"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"rayshawntan"},"content":"        return \"[E]\" + super.toString() + \" (from:\" + this.start + \"to:\" + this.end + \")\";","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"rayshawntan"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"rayshawntan":15}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayshawntan"},"content":"public class Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"rayshawntan"},"content":"    private String task;","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"rayshawntan"},"content":"    private boolean done \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"rayshawntan"},"content":"    public Task(String task) {","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"rayshawntan"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"rayshawntan"},"content":"    public void markDone() {","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"rayshawntan"},"content":"        if (done) {","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"rayshawntan"},"content":"            System.out.println(\"____________________________________________________________\\n\" +","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"rayshawntan"},"content":"                    \" This task is already marked done!\\n\" +","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"rayshawntan"},"content":"                    \"____________________________________________________________\\n\");","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"rayshawntan"},"content":"        } else {","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"rayshawntan"},"content":"            this.done \u003d true;","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"rayshawntan"},"content":"            System.out.println(\"____________________________________________________________\\n\" +","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"rayshawntan"},"content":"                    \" Nice! I\u0027ve marked this task as done:\\n \" +","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"rayshawntan"},"content":"                    this.toString() +","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"rayshawntan"},"content":"                    \"\\n____________________________________________________________\\n\");","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"rayshawntan"},"content":"    public void unmarkedDone() {","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"rayshawntan"},"content":"        if (!done) {","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"rayshawntan"},"content":"            System.out.println(\"____________________________________________________________\\n\" +","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"rayshawntan"},"content":"                    \" This task is not done yet!\\n\" +","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"rayshawntan"},"content":"                    \"____________________________________________________________\\n\");","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"rayshawntan"},"content":"        } else {","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"rayshawntan"},"content":"            this.done \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"rayshawntan"},"content":"            System.out.println(\"____________________________________________________________\\n\" +","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"rayshawntan"},"content":"                    \" OK, I\u0027ve marked this task not done yet:\\n \" +","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"rayshawntan"},"content":"                    this.toString() +","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"rayshawntan"},"content":"                    \"\\n____________________________________________________________\\n\");","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"rayshawntan"},"content":"        this.done \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"rayshawntan"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"rayshawntan"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"rayshawntan"},"content":"        return String.format(\"[%s] %s\", done ? \"X\" : \" \", this.task);","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"rayshawntan"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"rayshawntan":43}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayshawntan"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"rayshawntan"},"content":"    public ToDo(String task) {","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"rayshawntan"},"content":"        super(task);","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"rayshawntan"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"rayshawntan"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"rayshawntan"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"rayshawntan"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"rayshawntan":11}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"rayshawntan"},"content":"todo read book","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"rayshawntan"},"content":"deadline return book /by June 6th","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"rayshawntan"},"content":"event project meeting /from Aug 6th 2pm /to 4pm","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"rayshawntan"},"content":"todo join sports club","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"rayshawntan"},"content":"mark 4","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"rayshawntan"},"content":"todo borrow book","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"rayshawntan"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"rayshawntan"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"rayshawntan"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"rayshawntan"},"content":"deadline do homework /by no idea :-p","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"rayshawntan"},"content":"mark 8","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"rayshawntan"},"content":"unmark 8","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"rayshawntan"},"content":"todo","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"rayshawntan"},"content":"deadline","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"rayshawntan"},"content":"deadline run","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"rayshawntan"},"content":"event","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"rayshawntan"},"content":"event marathon","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"rayshawntan"},"content":"event marathon /from Aug 10th","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"rayshawntan"},"content":"delete 2","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"rayshawntan"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"rayshawntan"},"content":"bye","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"rayshawntan":21}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"rayshawntan"},"content":"java -classpath ..\\bin ChatBot \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"rayshawntan":1,"-":20}}]
