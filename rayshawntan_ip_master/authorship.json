[{"path":"data/list.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"rayshawntan"},"content":"D |   | project | 2023-09-01","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"rayshawntan"},"content":"E |   | birthday | 2023-09-01 12AM to 12PM","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"rayshawntan":2}},{"path":"src/main/java/ChatBot.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayshawntan"},"content":"import java.time.DateTimeException;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"rayshawntan"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"rayshawntan"},"content":"import java.util.Date;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"rayshawntan"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"rayshawntan"},"content":"import java.util.List;","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"rayshawntan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"rayshawntan"},"content":"import java.io.File;","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"rayshawntan"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"rayshawntan"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"rayshawntan"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"rayshawntan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"rayshawntan"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"rayshawntan"},"content":"public class ChatBot {","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"rayshawntan"},"content":"    private static List\u003cTask\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"rayshawntan"},"content":"    private static File file;","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"rayshawntan"},"content":"    private static final String lineBreak \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"rayshawntan"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"rayshawntan"},"content":"        // Introduction message","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"rayshawntan"},"content":"        System.out.println(lineBreak +","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"rayshawntan"},"content":"                \"\\n Hello! I\u0027m Desolute\\n\" +","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"rayshawntan"},"content":"                \" What can I do for you?\\n\" +","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"rayshawntan"},"content":"                lineBreak);","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"rayshawntan"},"content":"        // Checks if data directory is available","lastModifiedDate":"2023-08-28"},{"lineNumber":28,"author":{"gitId":"rayshawntan"},"content":"        File dir \u003d new File(\"./data\");","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"rayshawntan"},"content":"        if (!dir.exists()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"rayshawntan"},"content":"            dir.mkdir();","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"rayshawntan"},"content":"        // Checks if file is available","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"rayshawntan"},"content":"        file \u003d new File(\"./data/list.txt\");","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"rayshawntan"},"content":"        if (!file.exists()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"rayshawntan"},"content":"            try {","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"rayshawntan"},"content":"                createFile(file);","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"rayshawntan"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"rayshawntan"},"content":"                e.printStackTrace();","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"rayshawntan"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"rayshawntan"},"content":"        ","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"rayshawntan"},"content":"        // Reads all the tasks on the file","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"rayshawntan"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"rayshawntan"},"content":"            readAllTasks();","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"rayshawntan"},"content":"        } catch (FileNotFoundException f) {","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"rayshawntan"},"content":"            System.out.println(\"\\n Task save file is missing!!! \");","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"rayshawntan"},"content":"        } catch (DukeException d) {","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"rayshawntan"},"content":"            System.out.println(lineBreak +","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"rayshawntan"},"content":"                    d.getMessage() +","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"rayshawntan"},"content":"                    lineBreak);","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"rayshawntan"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"rayshawntan"},"content":"        String next \u003d sc.nextLine();","lastModifiedDate":"2023-08-23"},{"lineNumber":55,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":56,"author":{"gitId":"rayshawntan"},"content":"        // Loops till bye command is given","lastModifiedDate":"2023-08-23"},{"lineNumber":57,"author":{"gitId":"rayshawntan"},"content":"        while (!next.equals(\"bye\")) {","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"rayshawntan"},"content":"            try {","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"rayshawntan"},"content":"                nextCommand(next);","lastModifiedDate":"2023-08-23"},{"lineNumber":60,"author":{"gitId":"rayshawntan"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":61,"author":{"gitId":"rayshawntan"},"content":"                System.out.println(lineBreak +","lastModifiedDate":"2023-08-23"},{"lineNumber":62,"author":{"gitId":"rayshawntan"},"content":"                        e.getMessage()+","lastModifiedDate":"2023-08-23"},{"lineNumber":63,"author":{"gitId":"rayshawntan"},"content":"                        lineBreak);","lastModifiedDate":"2023-08-23"},{"lineNumber":64,"author":{"gitId":"rayshawntan"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":65,"author":{"gitId":"rayshawntan"},"content":"            next \u003d sc.nextLine();","lastModifiedDate":"2023-08-23"},{"lineNumber":66,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":67,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":68,"author":{"gitId":"rayshawntan"},"content":"        // Exit message","lastModifiedDate":"2023-08-23"},{"lineNumber":69,"author":{"gitId":"rayshawntan"},"content":"        System.out.println(lineBreak +","lastModifiedDate":"2023-08-23"},{"lineNumber":70,"author":{"gitId":"rayshawntan"},"content":"                \"\\n Bye. Hope to see you again soon!\\n\" +","lastModifiedDate":"2023-08-28"},{"lineNumber":71,"author":{"gitId":"rayshawntan"},"content":"                lineBreak);","lastModifiedDate":"2023-08-23"},{"lineNumber":72,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":73,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":74,"author":{"gitId":"rayshawntan"},"content":"    private static void nextCommand(String str) throws DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":75,"author":{"gitId":"rayshawntan"},"content":"        // Splitting of string adapted from","lastModifiedDate":"2023-08-23"},{"lineNumber":76,"author":{"gitId":"rayshawntan"},"content":"        // https://stackoverflow.com/questions/9378394/remove-first-word-from-a-string-in-java","lastModifiedDate":"2023-08-23"},{"lineNumber":77,"author":{"gitId":"rayshawntan"},"content":"        String[] temp \u003d str.split(\" \", 2);","lastModifiedDate":"2023-08-23"},{"lineNumber":78,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":79,"author":{"gitId":"rayshawntan"},"content":"        // Checks if any pre determined commands are given","lastModifiedDate":"2023-08-23"},{"lineNumber":80,"author":{"gitId":"rayshawntan"},"content":"        switch (temp[0]) {","lastModifiedDate":"2023-08-23"},{"lineNumber":81,"author":{"gitId":"rayshawntan"},"content":"        case \"list\":","lastModifiedDate":"2023-08-23"},{"lineNumber":82,"author":{"gitId":"rayshawntan"},"content":"            showList();","lastModifiedDate":"2023-08-23"},{"lineNumber":83,"author":{"gitId":"rayshawntan"},"content":"            break;","lastModifiedDate":"2023-08-23"},{"lineNumber":84,"author":{"gitId":"rayshawntan"},"content":"        case \"mark\":","lastModifiedDate":"2023-08-23"},{"lineNumber":85,"author":{"gitId":"rayshawntan"},"content":"            markDone(temp[1]);","lastModifiedDate":"2023-08-23"},{"lineNumber":86,"author":{"gitId":"rayshawntan"},"content":"            break;","lastModifiedDate":"2023-08-23"},{"lineNumber":87,"author":{"gitId":"rayshawntan"},"content":"        case \"unmark\":","lastModifiedDate":"2023-08-23"},{"lineNumber":88,"author":{"gitId":"rayshawntan"},"content":"            unmarkDone(temp[1]);","lastModifiedDate":"2023-08-23"},{"lineNumber":89,"author":{"gitId":"rayshawntan"},"content":"            break;","lastModifiedDate":"2023-08-23"},{"lineNumber":90,"author":{"gitId":"rayshawntan"},"content":"        case \"todo\":","lastModifiedDate":"2023-08-23"},{"lineNumber":91,"author":{"gitId":"rayshawntan"},"content":"            if (temp.length !\u003d 2) {","lastModifiedDate":"2023-08-23"},{"lineNumber":92,"author":{"gitId":"rayshawntan"},"content":"                throw new DukeException(\"\\n ☹ OOPS!!! The description of a todo cannot be empty.\\n\");","lastModifiedDate":"2023-08-28"},{"lineNumber":93,"author":{"gitId":"rayshawntan"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":94,"author":{"gitId":"rayshawntan"},"content":"            Task toDo \u003d new ToDo(temp[1]);","lastModifiedDate":"2023-08-23"},{"lineNumber":95,"author":{"gitId":"rayshawntan"},"content":"            list.add(toDo);","lastModifiedDate":"2023-08-23"},{"lineNumber":96,"author":{"gitId":"rayshawntan"},"content":"            try {","lastModifiedDate":"2023-08-28"},{"lineNumber":97,"author":{"gitId":"rayshawntan"},"content":"                appendList(toDo);","lastModifiedDate":"2023-08-28"},{"lineNumber":98,"author":{"gitId":"rayshawntan"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":99,"author":{"gitId":"rayshawntan"},"content":"                e.printStackTrace();","lastModifiedDate":"2023-08-28"},{"lineNumber":100,"author":{"gitId":"rayshawntan"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":101,"author":{"gitId":"rayshawntan"},"content":"            System.out.println(lineBreak +","lastModifiedDate":"2023-08-23"},{"lineNumber":102,"author":{"gitId":"rayshawntan"},"content":"                    \"\\n Got it. I\u0027ve added this task:\\n  \" +","lastModifiedDate":"2023-08-28"},{"lineNumber":103,"author":{"gitId":"rayshawntan"},"content":"                    toDo.toString() +","lastModifiedDate":"2023-08-23"},{"lineNumber":104,"author":{"gitId":"rayshawntan"},"content":"                    getTaskCount() +","lastModifiedDate":"2023-08-23"},{"lineNumber":105,"author":{"gitId":"rayshawntan"},"content":"                    lineBreak);","lastModifiedDate":"2023-08-23"},{"lineNumber":106,"author":{"gitId":"rayshawntan"},"content":"            break;","lastModifiedDate":"2023-08-23"},{"lineNumber":107,"author":{"gitId":"rayshawntan"},"content":"        case \"deadline\":","lastModifiedDate":"2023-08-23"},{"lineNumber":108,"author":{"gitId":"rayshawntan"},"content":"            if (temp.length !\u003d 2) {","lastModifiedDate":"2023-08-23"},{"lineNumber":109,"author":{"gitId":"rayshawntan"},"content":"                throw new DukeException(\"\\n ☹ OOPS!!! The description of a deadline cannot be empty.\\n\");","lastModifiedDate":"2023-08-28"},{"lineNumber":110,"author":{"gitId":"rayshawntan"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":111,"author":{"gitId":"rayshawntan"},"content":"            String[] temp2 \u003d temp[1].split(\" /by \");","lastModifiedDate":"2023-08-23"},{"lineNumber":112,"author":{"gitId":"rayshawntan"},"content":"            if (temp2.length !\u003d 2) {","lastModifiedDate":"2023-08-23"},{"lineNumber":113,"author":{"gitId":"rayshawntan"},"content":"                throw new DukeException(\"\\n ☹ OOPS!!! The date of a deadline cannot be empty.\\n\");","lastModifiedDate":"2023-08-28"},{"lineNumber":114,"author":{"gitId":"rayshawntan"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":115,"author":{"gitId":"rayshawntan"},"content":"            Task deadline;","lastModifiedDate":"2023-08-28"},{"lineNumber":116,"author":{"gitId":"rayshawntan"},"content":"            try {","lastModifiedDate":"2023-08-28"},{"lineNumber":117,"author":{"gitId":"rayshawntan"},"content":"                LocalDate deadlineDate \u003d LocalDate.parse(temp2[1]);","lastModifiedDate":"2023-08-28"},{"lineNumber":118,"author":{"gitId":"rayshawntan"},"content":"                deadline \u003d new Deadline(temp2[0], deadlineDate);","lastModifiedDate":"2023-08-28"},{"lineNumber":119,"author":{"gitId":"rayshawntan"},"content":"            } catch (DateTimeException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":120,"author":{"gitId":"rayshawntan"},"content":"                throw new DukeException(\"\\n Incorrect date format! Date format should be YYYY-MM-DD\");","lastModifiedDate":"2023-08-28"},{"lineNumber":121,"author":{"gitId":"rayshawntan"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":122,"author":{"gitId":"rayshawntan"},"content":"            list.add(deadline);","lastModifiedDate":"2023-08-23"},{"lineNumber":123,"author":{"gitId":"rayshawntan"},"content":"            try {","lastModifiedDate":"2023-08-28"},{"lineNumber":124,"author":{"gitId":"rayshawntan"},"content":"                appendList(deadline);","lastModifiedDate":"2023-08-28"},{"lineNumber":125,"author":{"gitId":"rayshawntan"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":126,"author":{"gitId":"rayshawntan"},"content":"                e.printStackTrace();","lastModifiedDate":"2023-08-28"},{"lineNumber":127,"author":{"gitId":"rayshawntan"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":128,"author":{"gitId":"rayshawntan"},"content":"            System.out.println(lineBreak +","lastModifiedDate":"2023-08-23"},{"lineNumber":129,"author":{"gitId":"rayshawntan"},"content":"                    \"\\n Got it. I\u0027ve added this task:\\n  \" +","lastModifiedDate":"2023-08-28"},{"lineNumber":130,"author":{"gitId":"rayshawntan"},"content":"                    deadline.toString() +","lastModifiedDate":"2023-08-23"},{"lineNumber":131,"author":{"gitId":"rayshawntan"},"content":"                    getTaskCount() +","lastModifiedDate":"2023-08-23"},{"lineNumber":132,"author":{"gitId":"rayshawntan"},"content":"                    lineBreak);","lastModifiedDate":"2023-08-23"},{"lineNumber":133,"author":{"gitId":"rayshawntan"},"content":"            break;","lastModifiedDate":"2023-08-23"},{"lineNumber":134,"author":{"gitId":"rayshawntan"},"content":"        case \"event\":","lastModifiedDate":"2023-08-23"},{"lineNumber":135,"author":{"gitId":"rayshawntan"},"content":"            if (temp.length !\u003d 2) {","lastModifiedDate":"2023-08-23"},{"lineNumber":136,"author":{"gitId":"rayshawntan"},"content":"                throw new DukeException(\"\\n ☹ OOPS!!! The description of an event cannot be empty.\\n\");","lastModifiedDate":"2023-08-28"},{"lineNumber":137,"author":{"gitId":"rayshawntan"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":138,"author":{"gitId":"rayshawntan"},"content":"            String[] temp3 \u003d temp[1].split(\" /from \");","lastModifiedDate":"2023-08-23"},{"lineNumber":139,"author":{"gitId":"rayshawntan"},"content":"            if (temp3.length !\u003d 2) {","lastModifiedDate":"2023-08-23"},{"lineNumber":140,"author":{"gitId":"rayshawntan"},"content":"                throw new DukeException(\"\\n ☹ OOPS!!! The date and time of an event cannot be empty.\\n\");","lastModifiedDate":"2023-08-28"},{"lineNumber":141,"author":{"gitId":"rayshawntan"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":142,"author":{"gitId":"rayshawntan"},"content":"            String[] temp4 \u003d temp3[1].split(\" /to \");","lastModifiedDate":"2023-08-23"},{"lineNumber":143,"author":{"gitId":"rayshawntan"},"content":"            if (temp4.length !\u003d 2) {","lastModifiedDate":"2023-08-23"},{"lineNumber":144,"author":{"gitId":"rayshawntan"},"content":"                throw new DukeException(\"\\n ☹ OOPS!!! The end time of an event cannot be empty.\\n\");","lastModifiedDate":"2023-08-28"},{"lineNumber":145,"author":{"gitId":"rayshawntan"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":146,"author":{"gitId":"rayshawntan"},"content":"            String[] temp5 \u003d  temp4[0].split(\" \");","lastModifiedDate":"2023-08-28"},{"lineNumber":147,"author":{"gitId":"rayshawntan"},"content":"            Task event;","lastModifiedDate":"2023-08-28"},{"lineNumber":148,"author":{"gitId":"rayshawntan"},"content":"            try {","lastModifiedDate":"2023-08-28"},{"lineNumber":149,"author":{"gitId":"rayshawntan"},"content":"                LocalDate eventDate \u003d LocalDate.parse(temp5[0]);","lastModifiedDate":"2023-08-28"},{"lineNumber":150,"author":{"gitId":"rayshawntan"},"content":"                LocalTime eventStart \u003d LocalTime.parse(temp5[1], DateTimeFormatter.ofPattern(\"ha\"));","lastModifiedDate":"2023-08-28"},{"lineNumber":151,"author":{"gitId":"rayshawntan"},"content":"                LocalTime eventEnd \u003d LocalTime.parse(temp4[1], DateTimeFormatter.ofPattern(\"ha\"));","lastModifiedDate":"2023-08-28"},{"lineNumber":152,"author":{"gitId":"rayshawntan"},"content":"                event \u003d new Event(temp3[0], eventDate, eventStart, eventEnd);","lastModifiedDate":"2023-08-28"},{"lineNumber":153,"author":{"gitId":"rayshawntan"},"content":"            } catch (DateTimeException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":154,"author":{"gitId":"rayshawntan"},"content":"                throw new DukeException(\"\\n Invalid Date/Time format! Format should be YYYY-MM-DD HH(AM/PM) \" +","lastModifiedDate":"2023-08-28"},{"lineNumber":155,"author":{"gitId":"rayshawntan"},"content":"                        \"/to HH(AM/PM) \\n\");","lastModifiedDate":"2023-08-28"},{"lineNumber":156,"author":{"gitId":"rayshawntan"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":157,"author":{"gitId":"rayshawntan"},"content":"            list.add(event);","lastModifiedDate":"2023-08-23"},{"lineNumber":158,"author":{"gitId":"rayshawntan"},"content":"            try {","lastModifiedDate":"2023-08-28"},{"lineNumber":159,"author":{"gitId":"rayshawntan"},"content":"                appendList(event);","lastModifiedDate":"2023-08-28"},{"lineNumber":160,"author":{"gitId":"rayshawntan"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":161,"author":{"gitId":"rayshawntan"},"content":"                e.printStackTrace();","lastModifiedDate":"2023-08-28"},{"lineNumber":162,"author":{"gitId":"rayshawntan"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":163,"author":{"gitId":"rayshawntan"},"content":"            System.out.println(lineBreak +","lastModifiedDate":"2023-08-23"},{"lineNumber":164,"author":{"gitId":"rayshawntan"},"content":"                    \"\\n Got it. I\u0027ve added this task:\\n  \" +","lastModifiedDate":"2023-08-28"},{"lineNumber":165,"author":{"gitId":"rayshawntan"},"content":"                    event.toString() +","lastModifiedDate":"2023-08-23"},{"lineNumber":166,"author":{"gitId":"rayshawntan"},"content":"                    getTaskCount() +","lastModifiedDate":"2023-08-23"},{"lineNumber":167,"author":{"gitId":"rayshawntan"},"content":"                    lineBreak);","lastModifiedDate":"2023-08-23"},{"lineNumber":168,"author":{"gitId":"rayshawntan"},"content":"            break;","lastModifiedDate":"2023-08-23"},{"lineNumber":169,"author":{"gitId":"rayshawntan"},"content":"        case \"delete\":","lastModifiedDate":"2023-08-23"},{"lineNumber":170,"author":{"gitId":"rayshawntan"},"content":"            delete(temp[1]);","lastModifiedDate":"2023-08-23"},{"lineNumber":171,"author":{"gitId":"rayshawntan"},"content":"            break;","lastModifiedDate":"2023-08-23"},{"lineNumber":172,"author":{"gitId":"rayshawntan"},"content":"        default:","lastModifiedDate":"2023-08-23"},{"lineNumber":173,"author":{"gitId":"rayshawntan"},"content":"            throw new DukeException(\"\\n ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\\n\");","lastModifiedDate":"2023-08-28"},{"lineNumber":174,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":175,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":176,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":177,"author":{"gitId":"rayshawntan"},"content":"    private static void showList() {","lastModifiedDate":"2023-08-23"},{"lineNumber":178,"author":{"gitId":"rayshawntan"},"content":"        System.out.print(lineBreak);","lastModifiedDate":"2023-08-23"},{"lineNumber":179,"author":{"gitId":"rayshawntan"},"content":"        if (list.isEmpty()) {","lastModifiedDate":"2023-08-23"},{"lineNumber":180,"author":{"gitId":"rayshawntan"},"content":"            System.out.println(\"\\n The list is empty. Please add tasks in!\");","lastModifiedDate":"2023-08-28"},{"lineNumber":181,"author":{"gitId":"rayshawntan"},"content":"        } else {","lastModifiedDate":"2023-08-23"},{"lineNumber":182,"author":{"gitId":"rayshawntan"},"content":"            System.out.println(\"\\n Here are the tasks in your list:\");","lastModifiedDate":"2023-08-28"},{"lineNumber":183,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":184,"author":{"gitId":"rayshawntan"},"content":"        for (int i \u003d 0; i \u003c list.size(); i++) {","lastModifiedDate":"2023-08-23"},{"lineNumber":185,"author":{"gitId":"rayshawntan"},"content":"            Task temp \u003d list.get(i);","lastModifiedDate":"2023-08-23"},{"lineNumber":186,"author":{"gitId":"rayshawntan"},"content":"            String current \u003d String.format(\" %d.%s\", i + 1, temp.toString());","lastModifiedDate":"2023-08-23"},{"lineNumber":187,"author":{"gitId":"rayshawntan"},"content":"            System.out.println(current);","lastModifiedDate":"2023-08-23"},{"lineNumber":188,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":189,"author":{"gitId":"rayshawntan"},"content":"        System.out.println(lineBreak);","lastModifiedDate":"2023-08-23"},{"lineNumber":190,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":191,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":192,"author":{"gitId":"rayshawntan"},"content":"    private static void markDone(String str) throws DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":193,"author":{"gitId":"rayshawntan"},"content":"        // Adapted from https://stackoverflow.com/questions/43156077/how-to-check-if-a-string-is-float-or-int","lastModifiedDate":"2023-08-23"},{"lineNumber":194,"author":{"gitId":"rayshawntan"},"content":"        boolean isInteger \u003d str.matches(\"\\\\b[1-9][0-9]*\\\\b\");","lastModifiedDate":"2023-08-23"},{"lineNumber":195,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":196,"author":{"gitId":"rayshawntan"},"content":"        if (!isInteger) {","lastModifiedDate":"2023-08-23"},{"lineNumber":197,"author":{"gitId":"rayshawntan"},"content":"            throw new DukeException(\"\\n The task number you have keyed in is not valid. Please try again.\\n\");","lastModifiedDate":"2023-08-28"},{"lineNumber":198,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":199,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":200,"author":{"gitId":"rayshawntan"},"content":"        int num \u003d Integer.parseInt(str) - 1;","lastModifiedDate":"2023-08-23"},{"lineNumber":201,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":202,"author":{"gitId":"rayshawntan"},"content":"        if (list.size() \u003c\u003d num) {","lastModifiedDate":"2023-08-23"},{"lineNumber":203,"author":{"gitId":"rayshawntan"},"content":"            throw new DukeException(\"\\n This task number is not available. Please try again.\\n\");","lastModifiedDate":"2023-08-28"},{"lineNumber":204,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":205,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":206,"author":{"gitId":"rayshawntan"},"content":"        Task curr \u003d list.get(num);","lastModifiedDate":"2023-08-23"},{"lineNumber":207,"author":{"gitId":"rayshawntan"},"content":"        if (curr.checkDone()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":208,"author":{"gitId":"rayshawntan"},"content":"            System.out.println(lineBreak +","lastModifiedDate":"2023-08-28"},{"lineNumber":209,"author":{"gitId":"rayshawntan"},"content":"                    \"\\n This task is already marked done!\\n\" +","lastModifiedDate":"2023-08-28"},{"lineNumber":210,"author":{"gitId":"rayshawntan"},"content":"                    lineBreak);","lastModifiedDate":"2023-08-28"},{"lineNumber":211,"author":{"gitId":"rayshawntan"},"content":"        } else {","lastModifiedDate":"2023-08-28"},{"lineNumber":212,"author":{"gitId":"rayshawntan"},"content":"            curr.markDone();","lastModifiedDate":"2023-08-23"},{"lineNumber":213,"author":{"gitId":"rayshawntan"},"content":"            System.out.println(lineBreak +","lastModifiedDate":"2023-08-28"},{"lineNumber":214,"author":{"gitId":"rayshawntan"},"content":"                    \"\\n Nice! I\u0027ve marked this task as done:\\n \" +","lastModifiedDate":"2023-08-28"},{"lineNumber":215,"author":{"gitId":"rayshawntan"},"content":"                    curr.toString() +","lastModifiedDate":"2023-08-28"},{"lineNumber":216,"author":{"gitId":"rayshawntan"},"content":"                    \"\\n\" +","lastModifiedDate":"2023-08-28"},{"lineNumber":217,"author":{"gitId":"rayshawntan"},"content":"                    lineBreak);","lastModifiedDate":"2023-08-28"},{"lineNumber":218,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":219,"author":{"gitId":"rayshawntan"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":220,"author":{"gitId":"rayshawntan"},"content":"            writeAll();","lastModifiedDate":"2023-08-28"},{"lineNumber":221,"author":{"gitId":"rayshawntan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":222,"author":{"gitId":"rayshawntan"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-28"},{"lineNumber":223,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":224,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":225,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":226,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":227,"author":{"gitId":"rayshawntan"},"content":"    private static void unmarkDone(String str) throws DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":228,"author":{"gitId":"rayshawntan"},"content":"        // Adapted from https://stackoverflow.com/questions/43156077/how-to-check-if-a-string-is-float-or-int","lastModifiedDate":"2023-08-23"},{"lineNumber":229,"author":{"gitId":"rayshawntan"},"content":"        boolean isInteger \u003d str.matches(\"\\\\b[1-9][0-9]*\\\\b\");","lastModifiedDate":"2023-08-23"},{"lineNumber":230,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":231,"author":{"gitId":"rayshawntan"},"content":"        if (!isInteger) {","lastModifiedDate":"2023-08-23"},{"lineNumber":232,"author":{"gitId":"rayshawntan"},"content":"            throw new DukeException(\"\\n The task number you have keyed in is not valid. Please try again.\\n\");","lastModifiedDate":"2023-08-28"},{"lineNumber":233,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":234,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":235,"author":{"gitId":"rayshawntan"},"content":"        int num \u003d Integer.parseInt(str) - 1;","lastModifiedDate":"2023-08-23"},{"lineNumber":236,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":237,"author":{"gitId":"rayshawntan"},"content":"        if (list.size() \u003c\u003d num) {","lastModifiedDate":"2023-08-23"},{"lineNumber":238,"author":{"gitId":"rayshawntan"},"content":"            throw new DukeException(\"\\n This task number is not available. Please try again.\\n\");","lastModifiedDate":"2023-08-28"},{"lineNumber":239,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":240,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":241,"author":{"gitId":"rayshawntan"},"content":"        Task curr \u003d list.get(num);","lastModifiedDate":"2023-08-28"},{"lineNumber":242,"author":{"gitId":"rayshawntan"},"content":"        if (!curr.checkDone()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":243,"author":{"gitId":"rayshawntan"},"content":"            System.out.println(lineBreak +","lastModifiedDate":"2023-08-28"},{"lineNumber":244,"author":{"gitId":"rayshawntan"},"content":"                    \"\\n This task is not done yet!\\n\" +","lastModifiedDate":"2023-08-28"},{"lineNumber":245,"author":{"gitId":"rayshawntan"},"content":"                    lineBreak);","lastModifiedDate":"2023-08-28"},{"lineNumber":246,"author":{"gitId":"rayshawntan"},"content":"        } else {","lastModifiedDate":"2023-08-28"},{"lineNumber":247,"author":{"gitId":"rayshawntan"},"content":"            curr.unmarkDone();","lastModifiedDate":"2023-08-28"},{"lineNumber":248,"author":{"gitId":"rayshawntan"},"content":"            System.out.println(lineBreak +","lastModifiedDate":"2023-08-28"},{"lineNumber":249,"author":{"gitId":"rayshawntan"},"content":"                    \"\\n OK, I\u0027ve marked this task not done yet:\\n \" +","lastModifiedDate":"2023-08-28"},{"lineNumber":250,"author":{"gitId":"rayshawntan"},"content":"                    curr.toString() +","lastModifiedDate":"2023-08-28"},{"lineNumber":251,"author":{"gitId":"rayshawntan"},"content":"                    \"\\n\" +","lastModifiedDate":"2023-08-28"},{"lineNumber":252,"author":{"gitId":"rayshawntan"},"content":"                    lineBreak);","lastModifiedDate":"2023-08-28"},{"lineNumber":253,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":254,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":255,"author":{"gitId":"rayshawntan"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":256,"author":{"gitId":"rayshawntan"},"content":"            writeAll();","lastModifiedDate":"2023-08-28"},{"lineNumber":257,"author":{"gitId":"rayshawntan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":258,"author":{"gitId":"rayshawntan"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-28"},{"lineNumber":259,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":260,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":261,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":262,"author":{"gitId":"rayshawntan"},"content":"    private static void delete(String str) throws DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":263,"author":{"gitId":"rayshawntan"},"content":"        // Adapted from https://stackoverflow.com/questions/43156077/how-to-check-if-a-string-is-float-or-int","lastModifiedDate":"2023-08-23"},{"lineNumber":264,"author":{"gitId":"rayshawntan"},"content":"        boolean isInteger \u003d str.matches(\"\\\\b[1-9][0-9]*\\\\b\");","lastModifiedDate":"2023-08-23"},{"lineNumber":265,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":266,"author":{"gitId":"rayshawntan"},"content":"        if (!isInteger) {","lastModifiedDate":"2023-08-23"},{"lineNumber":267,"author":{"gitId":"rayshawntan"},"content":"            throw new DukeException(\" The task number you have keyed in is not valid. Please try again.\\n\");","lastModifiedDate":"2023-08-23"},{"lineNumber":268,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":269,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":270,"author":{"gitId":"rayshawntan"},"content":"        int num \u003d Integer.parseInt(str) - 1;","lastModifiedDate":"2023-08-23"},{"lineNumber":271,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":272,"author":{"gitId":"rayshawntan"},"content":"        if (list.size() \u003c\u003d num) {","lastModifiedDate":"2023-08-23"},{"lineNumber":273,"author":{"gitId":"rayshawntan"},"content":"            throw new DukeException(\" This task number is not available. Please try again.\\n\");","lastModifiedDate":"2023-08-23"},{"lineNumber":274,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":275,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":276,"author":{"gitId":"rayshawntan"},"content":"        Task curr \u003d list.get(num);","lastModifiedDate":"2023-08-23"},{"lineNumber":277,"author":{"gitId":"rayshawntan"},"content":"        list.remove(num);","lastModifiedDate":"2023-08-23"},{"lineNumber":278,"author":{"gitId":"rayshawntan"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":279,"author":{"gitId":"rayshawntan"},"content":"            writeAll();","lastModifiedDate":"2023-08-28"},{"lineNumber":280,"author":{"gitId":"rayshawntan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":281,"author":{"gitId":"rayshawntan"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-28"},{"lineNumber":282,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":283,"author":{"gitId":"rayshawntan"},"content":"        System.out.println(lineBreak +","lastModifiedDate":"2023-08-23"},{"lineNumber":284,"author":{"gitId":"rayshawntan"},"content":"                \"\\n Noted. I\u0027ve removed this task:\\n  \" +","lastModifiedDate":"2023-08-28"},{"lineNumber":285,"author":{"gitId":"rayshawntan"},"content":"                curr.toString() +","lastModifiedDate":"2023-08-23"},{"lineNumber":286,"author":{"gitId":"rayshawntan"},"content":"                getTaskCount() +","lastModifiedDate":"2023-08-23"},{"lineNumber":287,"author":{"gitId":"rayshawntan"},"content":"                lineBreak);","lastModifiedDate":"2023-08-23"},{"lineNumber":288,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":289,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":290,"author":{"gitId":"rayshawntan"},"content":"    private static void readAllTasks() throws FileNotFoundException, DukeException {","lastModifiedDate":"2023-08-28"},{"lineNumber":291,"author":{"gitId":"rayshawntan"},"content":"        Scanner sc \u003d new Scanner(file);","lastModifiedDate":"2023-08-28"},{"lineNumber":292,"author":{"gitId":"rayshawntan"},"content":"        while (sc.hasNextLine()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":293,"author":{"gitId":"rayshawntan"},"content":"            String now \u003d sc.nextLine();","lastModifiedDate":"2023-08-28"},{"lineNumber":294,"author":{"gitId":"rayshawntan"},"content":"            String[] split \u003d now.split(\" \\\\| \");","lastModifiedDate":"2023-08-28"},{"lineNumber":295,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":296,"author":{"gitId":"rayshawntan"},"content":"            switch (split[0]) {","lastModifiedDate":"2023-08-28"},{"lineNumber":297,"author":{"gitId":"rayshawntan"},"content":"            case \"T\":","lastModifiedDate":"2023-08-28"},{"lineNumber":298,"author":{"gitId":"rayshawntan"},"content":"                Task toDo \u003d new ToDo(split[2]);","lastModifiedDate":"2023-08-28"},{"lineNumber":299,"author":{"gitId":"rayshawntan"},"content":"                if (split[1].equals(\"X\")) {","lastModifiedDate":"2023-08-28"},{"lineNumber":300,"author":{"gitId":"rayshawntan"},"content":"                    toDo.markDone();","lastModifiedDate":"2023-08-28"},{"lineNumber":301,"author":{"gitId":"rayshawntan"},"content":"                }","lastModifiedDate":"2023-08-28"},{"lineNumber":302,"author":{"gitId":"rayshawntan"},"content":"                list.add(toDo);","lastModifiedDate":"2023-08-28"},{"lineNumber":303,"author":{"gitId":"rayshawntan"},"content":"                break;","lastModifiedDate":"2023-08-28"},{"lineNumber":304,"author":{"gitId":"rayshawntan"},"content":"            case \"D\":","lastModifiedDate":"2023-08-28"},{"lineNumber":305,"author":{"gitId":"rayshawntan"},"content":"                Task deadline;","lastModifiedDate":"2023-08-28"},{"lineNumber":306,"author":{"gitId":"rayshawntan"},"content":"                try {","lastModifiedDate":"2023-08-28"},{"lineNumber":307,"author":{"gitId":"rayshawntan"},"content":"                    LocalDate deadlineDate \u003d LocalDate.parse(split[3]);","lastModifiedDate":"2023-08-28"},{"lineNumber":308,"author":{"gitId":"rayshawntan"},"content":"                    deadline \u003d new Deadline(split[2], deadlineDate);","lastModifiedDate":"2023-08-28"},{"lineNumber":309,"author":{"gitId":"rayshawntan"},"content":"                } catch (DateTimeException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":310,"author":{"gitId":"rayshawntan"},"content":"                    throw new DukeException(\"\\n Incorrect date format! Date format should be YYYY-MM-DD \\n\");","lastModifiedDate":"2023-08-28"},{"lineNumber":311,"author":{"gitId":"rayshawntan"},"content":"                }","lastModifiedDate":"2023-08-28"},{"lineNumber":312,"author":{"gitId":"rayshawntan"},"content":"                if (split[1].equals(\"X\")) {","lastModifiedDate":"2023-08-28"},{"lineNumber":313,"author":{"gitId":"rayshawntan"},"content":"                    deadline.markDone();","lastModifiedDate":"2023-08-28"},{"lineNumber":314,"author":{"gitId":"rayshawntan"},"content":"                }","lastModifiedDate":"2023-08-28"},{"lineNumber":315,"author":{"gitId":"rayshawntan"},"content":"                list.add(deadline);","lastModifiedDate":"2023-08-28"},{"lineNumber":316,"author":{"gitId":"rayshawntan"},"content":"                break;","lastModifiedDate":"2023-08-28"},{"lineNumber":317,"author":{"gitId":"rayshawntan"},"content":"            case \"E\":","lastModifiedDate":"2023-08-28"},{"lineNumber":318,"author":{"gitId":"rayshawntan"},"content":"                String[] temp \u003d split[3].split(\" \");","lastModifiedDate":"2023-08-28"},{"lineNumber":319,"author":{"gitId":"rayshawntan"},"content":"                Task event;","lastModifiedDate":"2023-08-28"},{"lineNumber":320,"author":{"gitId":"rayshawntan"},"content":"                try {","lastModifiedDate":"2023-08-28"},{"lineNumber":321,"author":{"gitId":"rayshawntan"},"content":"                    LocalDate eventDate \u003d LocalDate.parse(temp[0]);","lastModifiedDate":"2023-08-28"},{"lineNumber":322,"author":{"gitId":"rayshawntan"},"content":"                    LocalTime eventStart \u003d LocalTime.parse(temp[1], DateTimeFormatter.ofPattern(\"ha\"));","lastModifiedDate":"2023-08-28"},{"lineNumber":323,"author":{"gitId":"rayshawntan"},"content":"                    LocalTime eventEnd \u003d LocalTime.parse(temp[3], DateTimeFormatter.ofPattern(\"ha\"));","lastModifiedDate":"2023-08-28"},{"lineNumber":324,"author":{"gitId":"rayshawntan"},"content":"                    event \u003d new Event(split[2], eventDate, eventStart, eventEnd);","lastModifiedDate":"2023-08-28"},{"lineNumber":325,"author":{"gitId":"rayshawntan"},"content":"                } catch (DateTimeException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":326,"author":{"gitId":"rayshawntan"},"content":"                    throw new DukeException(\"\\n Invalid Date/Time format! Format should be YYYY-MM-DD HH(AM/PM) \" +","lastModifiedDate":"2023-08-28"},{"lineNumber":327,"author":{"gitId":"rayshawntan"},"content":"                            \"/to HH(AM/PM) \\n\");","lastModifiedDate":"2023-08-28"},{"lineNumber":328,"author":{"gitId":"rayshawntan"},"content":"                }","lastModifiedDate":"2023-08-28"},{"lineNumber":329,"author":{"gitId":"rayshawntan"},"content":"                if (split[1].equals(\"X\")) {","lastModifiedDate":"2023-08-28"},{"lineNumber":330,"author":{"gitId":"rayshawntan"},"content":"                    event.markDone();","lastModifiedDate":"2023-08-28"},{"lineNumber":331,"author":{"gitId":"rayshawntan"},"content":"                }","lastModifiedDate":"2023-08-28"},{"lineNumber":332,"author":{"gitId":"rayshawntan"},"content":"                list.add(event);","lastModifiedDate":"2023-08-28"},{"lineNumber":333,"author":{"gitId":"rayshawntan"},"content":"                break;","lastModifiedDate":"2023-08-28"},{"lineNumber":334,"author":{"gitId":"rayshawntan"},"content":"            default:","lastModifiedDate":"2023-08-28"},{"lineNumber":335,"author":{"gitId":"rayshawntan"},"content":"                throw new DukeException(\"\\n There seems to be an invalid task type in your save file!!! \\n\");","lastModifiedDate":"2023-08-28"},{"lineNumber":336,"author":{"gitId":"rayshawntan"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":337,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":338,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":339,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":340,"author":{"gitId":"rayshawntan"},"content":"    private static void createFile(File file) throws IOException {","lastModifiedDate":"2023-08-28"},{"lineNumber":341,"author":{"gitId":"rayshawntan"},"content":"        file.createNewFile();","lastModifiedDate":"2023-08-28"},{"lineNumber":342,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":343,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":344,"author":{"gitId":"rayshawntan"},"content":"    private static void appendList(Task task) throws IOException {","lastModifiedDate":"2023-08-28"},{"lineNumber":345,"author":{"gitId":"rayshawntan"},"content":"        FileWriter fw \u003d new FileWriter(file, true);","lastModifiedDate":"2023-08-28"},{"lineNumber":346,"author":{"gitId":"rayshawntan"},"content":"        fw.write(System.getProperty(\"line.separator\") + task.toList());","lastModifiedDate":"2023-08-28"},{"lineNumber":347,"author":{"gitId":"rayshawntan"},"content":"        fw.close();","lastModifiedDate":"2023-08-28"},{"lineNumber":348,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":349,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":350,"author":{"gitId":"rayshawntan"},"content":"    private static void writeAll() throws IOException {","lastModifiedDate":"2023-08-28"},{"lineNumber":351,"author":{"gitId":"rayshawntan"},"content":"        FileWriter fw \u003d new FileWriter(file);","lastModifiedDate":"2023-08-28"},{"lineNumber":352,"author":{"gitId":"rayshawntan"},"content":"        fw.write(list.get(0).toList());","lastModifiedDate":"2023-08-28"},{"lineNumber":353,"author":{"gitId":"rayshawntan"},"content":"        int num \u003d list.size();","lastModifiedDate":"2023-08-28"},{"lineNumber":354,"author":{"gitId":"rayshawntan"},"content":"        for (int i \u003d 1; i \u003c num; i++) {","lastModifiedDate":"2023-08-28"},{"lineNumber":355,"author":{"gitId":"rayshawntan"},"content":"            fw.write(System.getProperty(\"line.separator\") + list.get(i).toList());","lastModifiedDate":"2023-08-28"},{"lineNumber":356,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":357,"author":{"gitId":"rayshawntan"},"content":"        fw.close();","lastModifiedDate":"2023-08-28"},{"lineNumber":358,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":359,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":360,"author":{"gitId":"rayshawntan"},"content":"    private static String getTaskCount() {","lastModifiedDate":"2023-08-23"},{"lineNumber":361,"author":{"gitId":"rayshawntan"},"content":"        return String.format(\"\\n Now you have %d tasks in the list.\\n\", list.size());","lastModifiedDate":"2023-08-23"},{"lineNumber":362,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":363,"author":{"gitId":"rayshawntan"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"rayshawntan":363}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayshawntan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"rayshawntan"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"rayshawntan"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"rayshawntan"},"content":"    private LocalDate date;","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"rayshawntan"},"content":"    public Deadline(String task, LocalDate date) {","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"rayshawntan"},"content":"        super(task);","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"rayshawntan"},"content":"        this.date \u003d date;","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"rayshawntan"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"rayshawntan"},"content":"    public String toList() {","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"rayshawntan"},"content":"        return \"D\" + super.toList() + \" | \" + this.date.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":16,"author":{"gitId":"rayshawntan"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"rayshawntan"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"rayshawntan"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.date.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"rayshawntan"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"rayshawntan":20}},{"path":"src/main/java/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayshawntan"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"rayshawntan"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"rayshawntan"},"content":"        super(message);","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"rayshawntan"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"rayshawntan"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"rayshawntan"},"content":"        return super.getMessage();","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"rayshawntan"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"rayshawntan":11}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayshawntan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"rayshawntan"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"rayshawntan"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"rayshawntan"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"rayshawntan"},"content":"    private String start;","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"rayshawntan"},"content":"    private String end;","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"rayshawntan"},"content":"    private LocalDate localDate;","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"rayshawntan"},"content":"    private LocalTime startTime;","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"rayshawntan"},"content":"    private LocalTime endTime;","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"rayshawntan"},"content":"    public Event(String task, LocalDate date, LocalTime start, LocalTime end) {","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"rayshawntan"},"content":"        super(task);","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"rayshawntan"},"content":"        this.localDate \u003d date;","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"rayshawntan"},"content":"        this.startTime \u003d start;","lastModifiedDate":"2023-08-28"},{"lineNumber":16,"author":{"gitId":"rayshawntan"},"content":"        this.endTime \u003d end;","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"rayshawntan"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"rayshawntan"},"content":"    public String toList() {","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"rayshawntan"},"content":"        DateTimeFormatter timeFormat \u003d DateTimeFormatter.ofPattern(\"ha\");","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"rayshawntan"},"content":"        return \"E\" + super.toList() + \" | \" + this.localDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")) +","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"rayshawntan"},"content":"                \" \" + this.startTime.format(timeFormat) + \" to \" + this.endTime.format(timeFormat);","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":26,"author":{"gitId":"rayshawntan"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"rayshawntan"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"rayshawntan"},"content":"        DateTimeFormatter timeFormat \u003d DateTimeFormatter.ofPattern(\"h a\");","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"rayshawntan"},"content":"        return \"[E]\" + super.toString() + \" (from: \" +","lastModifiedDate":"2023-08-28"},{"lineNumber":30,"author":{"gitId":"rayshawntan"},"content":"                this.localDate.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\")) +","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"rayshawntan"},"content":"                \" \" + this.startTime.format(timeFormat) + \" to: \" + this.endTime.format(timeFormat) + \")\";","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"rayshawntan"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"rayshawntan":34}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayshawntan"},"content":"public class Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"rayshawntan"},"content":"    private String task;","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"rayshawntan"},"content":"    private boolean done \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"rayshawntan"},"content":"    public Task(String task) {","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"rayshawntan"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"rayshawntan"},"content":"    public boolean checkDone() {","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"rayshawntan"},"content":"        return this.done;","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"rayshawntan"},"content":"    public void markDone() {","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"rayshawntan"},"content":"        if (this.done) {","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"rayshawntan"},"content":"            System.out.println(\"____________________________________________________________\\n\" +","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"rayshawntan"},"content":"                    \" This task is already marked done!\\n\" +","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"rayshawntan"},"content":"                    \"____________________________________________________________\\n\");","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"rayshawntan"},"content":"        } else {","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"rayshawntan"},"content":"            this.done \u003d true;","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"rayshawntan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"rayshawntan"},"content":"    public void unmarkDone() {","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"rayshawntan"},"content":"        this.done \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"rayshawntan"},"content":"    public String toList() {","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"rayshawntan"},"content":"        return String.format(\" | %s | %s\", done ? \"X\" : \" \", this.task);","lastModifiedDate":"2023-08-28"},{"lineNumber":28,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":30,"author":{"gitId":"rayshawntan"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"rayshawntan"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"rayshawntan"},"content":"        return String.format(\"[%s] %s\", done ? \"X\" : \" \", this.task);","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"rayshawntan"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"rayshawntan":35}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"rayshawntan"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"rayshawntan"},"content":"    public ToDo(String task) {","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"rayshawntan"},"content":"        super(task);","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"rayshawntan"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"rayshawntan"},"content":"    public String toList() {","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"rayshawntan"},"content":"        return \"T\" + super.toList();","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"rayshawntan"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"rayshawntan"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"rayshawntan"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"rayshawntan"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"rayshawntan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"rayshawntan"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"rayshawntan":16}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"rayshawntan"},"content":"todo read book","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"rayshawntan"},"content":"deadline return book /by June 6th","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"rayshawntan"},"content":"event project meeting /from Aug 6th 2pm /to 4pm","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"rayshawntan"},"content":"todo join sports club","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"rayshawntan"},"content":"mark 4","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"rayshawntan"},"content":"todo borrow book","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"rayshawntan"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"rayshawntan"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"rayshawntan"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"rayshawntan"},"content":"deadline do homework /by no idea :-p","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"rayshawntan"},"content":"mark 8","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"rayshawntan"},"content":"unmark 8","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"rayshawntan"},"content":"todo","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"rayshawntan"},"content":"deadline","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"rayshawntan"},"content":"deadline run","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"rayshawntan"},"content":"event","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"rayshawntan"},"content":"event marathon","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"rayshawntan"},"content":"event marathon /from Aug 10th","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"rayshawntan"},"content":"delete 2","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"rayshawntan"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"rayshawntan"},"content":"bye","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"rayshawntan":21}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"rayshawntan"},"content":"java -classpath ..\\bin ChatBot \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"rayshawntan":1,"-":20}}]
