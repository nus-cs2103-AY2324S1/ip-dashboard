[{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"StevenLiudw"},"content":"T # 0 # borrow book","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"StevenLiudw"},"content":"T # 1 # sdfsgf","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"StevenLiudw"},"content":"D # 0 # return book # 2019-09-09","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"StevenLiudw":3}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"StevenLiudw"},"content":"package duke;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"StevenLiudw"},"content":"import duke.command.Command;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"StevenLiudw"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"StevenLiudw"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"StevenLiudw"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"StevenLiudw"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"StevenLiudw"},"content":" * The main class for the Duke program.","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"StevenLiudw"},"content":" * It manages the initialization, execution, and termination of the program.","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"StevenLiudw"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"StevenLiudw"},"content":"    /** Handles reading and storing tasks. */","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"StevenLiudw"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"StevenLiudw"},"content":"    /** List of tasks managed by Duke. */","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"StevenLiudw"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"StevenLiudw"},"content":"    /** User interface for interactions. */","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"StevenLiudw"},"content":"    private final Ui ui;","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"StevenLiudw"},"content":"    /** File path for task storage. */","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"StevenLiudw"},"content":"    private static final String FILE_PATH \u003d \"./data/duke.txt\";","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"StevenLiudw"},"content":"     * Constructs a new Duke instance with the specified file path for storage.","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"StevenLiudw"},"content":"     * @param filePath The path to the file for task storage.","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"StevenLiudw"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"StevenLiudw"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"StevenLiudw"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"StevenLiudw"},"content":"            storage \u003d new Storage(filePath);","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"StevenLiudw"},"content":"            tasks \u003d new TaskList(storage.loadTasks());","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"StevenLiudw"},"content":"        } catch (IOException ie) {","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"StevenLiudw"},"content":"            System.exit(0);","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"StevenLiudw"},"content":"        } catch (DukeException de) {","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"StevenLiudw"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"StevenLiudw"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"StevenLiudw"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":42,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":43,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"StevenLiudw"},"content":"     * Executes the Duke program. It initializes the user interface,","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"StevenLiudw"},"content":"     * awaits user commands, executes them, and exits when needed.","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"StevenLiudw"},"content":"    public void run() {","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"StevenLiudw"},"content":"        ui.showWelcome();","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"StevenLiudw"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"StevenLiudw"},"content":"        while (!isExit) {","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"StevenLiudw"},"content":"            try {","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"StevenLiudw"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"StevenLiudw"},"content":"                ui.showLine(); // show the divider line (\"_______\")","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"StevenLiudw"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"StevenLiudw"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"StevenLiudw"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"StevenLiudw"},"content":"            } catch (IOException ie) {","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"StevenLiudw"},"content":"                ui.showError(ie.getMessage());","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"StevenLiudw"},"content":"            } catch (DukeException de) {","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"StevenLiudw"},"content":"                ui.showError(de.getMessage());","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"StevenLiudw"},"content":"            } finally {","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"StevenLiudw"},"content":"                ui.showLine();","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"StevenLiudw"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":64,"author":{"gitId":"StevenLiudw"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":65,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":66,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":67,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":68,"author":{"gitId":"StevenLiudw"},"content":"     * The main method for the Duke program. It initializes and runs the Duke program.","lastModifiedDate":"2023-08-27"},{"lineNumber":69,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"StevenLiudw"},"content":"     * @param args Command line arguments (not used).","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"StevenLiudw"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-27"},{"lineNumber":73,"author":{"gitId":"StevenLiudw"},"content":"        new Duke(FILE_PATH).run();","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":75,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"StevenLiudw":72,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"StevenLiudw"},"content":"package duke;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"StevenLiudw"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"StevenLiudw"},"content":" * Represents exceptions that are specific to the Duke application.","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"StevenLiudw"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"StevenLiudw"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"StevenLiudw"},"content":"     * Constructs a new DukeException with the specified error message.","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"StevenLiudw"},"content":"     * @param errorMessage The specific error message for this exception.","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"StevenLiudw"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"StevenLiudw"},"content":"        super(errorMessage);","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"StevenLiudw"},"content":"     * Retrieves the error message of this exception, prefixed with \"OOPS! :(\".","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"StevenLiudw"},"content":"     * @return The prefixed error message.","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"StevenLiudw"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"StevenLiudw"},"content":"    public String getMessage() {","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"StevenLiudw"},"content":"        return \"OOPS! :( \" + super.getMessage();","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"StevenLiudw"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"StevenLiudw":25}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"StevenLiudw"},"content":"package duke;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"StevenLiudw"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"StevenLiudw"},"content":"import duke.command.Command;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"StevenLiudw"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"StevenLiudw"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"StevenLiudw"},"content":"import duke.command.UnMarkCommand;","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"StevenLiudw"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"StevenLiudw"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"StevenLiudw"},"content":"import duke.task.Event;","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"StevenLiudw"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"StevenLiudw"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"StevenLiudw"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"StevenLiudw"},"content":" * Represents a parser that makes sense of user commands.","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"StevenLiudw"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"StevenLiudw"},"content":"public class Parser {","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"StevenLiudw"},"content":"     * Parses the user\u0027s command and returns the corresponding command object.","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"StevenLiudw"},"content":"     * @param fullCommand The full string command provided by the user.","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"StevenLiudw"},"content":"     * @return The corresponding Command object.","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"StevenLiudw"},"content":"     * @throws DukeException If the command is unrecognized or invalid.","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"StevenLiudw"},"content":"    public static Command parse(String fullCommand) throws DukeException {","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"StevenLiudw"},"content":"        String[] splits \u003d fullCommand.split(\" \", 2);","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"StevenLiudw"},"content":"        switch (splits[0].trim()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"StevenLiudw"},"content":"            case (\"bye\"):","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"StevenLiudw"},"content":"                return new ExitCommand();","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"StevenLiudw"},"content":"            case (\"list\"):","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"StevenLiudw"},"content":"                return new ListCommand();","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"StevenLiudw"},"content":"            case (\"mark\"):","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"StevenLiudw"},"content":"                return new MarkCommand(Integer.parseInt(splits[1].trim()) - 1);","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"StevenLiudw"},"content":"            case (\"unmark\"):","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"StevenLiudw"},"content":"                return new UnMarkCommand(Integer.parseInt(splits[1].trim()) - 1);","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"StevenLiudw"},"content":"            case (\"todo\"):","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"StevenLiudw"},"content":"                return new AddCommand(new Todo(splits[1].trim()));","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"StevenLiudw"},"content":"            case (\"event\"): {","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"StevenLiudw"},"content":"                String[] tem_1 \u003d splits[1].split(\"/from\", 2);  // Using splits[1] since we\u0027ve already split at \"event\"","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"StevenLiudw"},"content":"                String[] tem_2 \u003d tem_1[1].split(\"/to\", 2);","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"StevenLiudw"},"content":"                String description \u003d tem_1[0].trim();","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"StevenLiudw"},"content":"                String start \u003d tem_2[0].trim();","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"StevenLiudw"},"content":"                String end \u003d tem_2[1].trim();","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"StevenLiudw"},"content":"                return new AddCommand(new Event(description, start, end));","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"StevenLiudw"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"StevenLiudw"},"content":"            case (\"deadline\"): {","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"StevenLiudw"},"content":"                String[] tem \u003d splits[1].split(\"/by\", 2);  // Using splits[1] since we\u0027ve already split at \"deadline\"","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"StevenLiudw"},"content":"                String description \u003d tem[0].trim();","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"StevenLiudw"},"content":"                String time \u003d tem[1].trim();","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"StevenLiudw"},"content":"                return new AddCommand(new Deadline(description, time));","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"StevenLiudw"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"StevenLiudw"},"content":"            case (\"delete\"):","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"StevenLiudw"},"content":"                return new DeleteCommand(Integer.parseInt(splits[1].trim()));","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"StevenLiudw"},"content":"            default:","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"StevenLiudw"},"content":"                throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"StevenLiudw"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"StevenLiudw"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"StevenLiudw":57}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"StevenLiudw"},"content":"package duke;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"StevenLiudw"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"StevenLiudw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"StevenLiudw"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"StevenLiudw"},"content":" * Represents a list of tasks in Duke. Provides methods to manipulate and access the tasks.","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"StevenLiudw"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"StevenLiudw"},"content":"public class TaskList {","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"StevenLiudw"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"StevenLiudw"},"content":"     * Initializes an empty task list.","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"StevenLiudw"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"StevenLiudw"},"content":"        tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"StevenLiudw"},"content":"     * Initializes the task list with given tasks.","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"StevenLiudw"},"content":"     * @param tasks An ArrayList of tasks.","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"StevenLiudw"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"StevenLiudw"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"StevenLiudw"},"content":"     * Marks a task as done.","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"StevenLiudw"},"content":"     * @param taskIndex The index of the task in the list.","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"StevenLiudw"},"content":"    public void mark(int taskIndex) {","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"StevenLiudw"},"content":"        tasks.get(taskIndex).mark();","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"StevenLiudw"},"content":"     * Retrieves a task based on its index.","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"StevenLiudw"},"content":"     * @param taskIndex The index of the task in the list.","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"StevenLiudw"},"content":"     * @return The Task object at the given index.","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"StevenLiudw"},"content":"    public Task getTask(int taskIndex) {","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"StevenLiudw"},"content":"        return tasks.get(taskIndex);","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"StevenLiudw"},"content":"     * Returns the number of tasks in the list.","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"StevenLiudw"},"content":"     * @return An integer representing the size of the list.","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"StevenLiudw"},"content":"    public int getSize() {","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"StevenLiudw"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"StevenLiudw"},"content":"     * Returns the entire list of tasks.","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"StevenLiudw"},"content":"     * @return An ArrayList of Task objects.","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"StevenLiudw"},"content":"    public ArrayList\u003cTask\u003e getTasks() {","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"StevenLiudw"},"content":"        return this.tasks;","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"StevenLiudw"},"content":"     * Unmarks a task (i.e., sets it as not done).","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"StevenLiudw"},"content":"     * @param taskIndex The index of the task in the list.","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":68,"author":{"gitId":"StevenLiudw"},"content":"    public void unmark(int taskIndex) {","lastModifiedDate":"2023-08-27"},{"lineNumber":69,"author":{"gitId":"StevenLiudw"},"content":"        tasks.get(taskIndex).unmark();","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":73,"author":{"gitId":"StevenLiudw"},"content":"     * Adds a new task to the list.","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":75,"author":{"gitId":"StevenLiudw"},"content":"     * @param task The Task object to be added.","lastModifiedDate":"2023-08-27"},{"lineNumber":76,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":77,"author":{"gitId":"StevenLiudw"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-08-27"},{"lineNumber":78,"author":{"gitId":"StevenLiudw"},"content":"        tasks.add(task);","lastModifiedDate":"2023-08-27"},{"lineNumber":79,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":80,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":81,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":82,"author":{"gitId":"StevenLiudw"},"content":"     * Deletes a task from the list and returns it.","lastModifiedDate":"2023-08-27"},{"lineNumber":83,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":84,"author":{"gitId":"StevenLiudw"},"content":"     * @param taskNum The index of the task in the list.","lastModifiedDate":"2023-08-27"},{"lineNumber":85,"author":{"gitId":"StevenLiudw"},"content":"     * @return The Task object that was removed.","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":87,"author":{"gitId":"StevenLiudw"},"content":"    public Task deleteTask(int taskNum) {","lastModifiedDate":"2023-08-27"},{"lineNumber":88,"author":{"gitId":"StevenLiudw"},"content":"        Task tem \u003d tasks.get(taskNum);","lastModifiedDate":"2023-08-27"},{"lineNumber":89,"author":{"gitId":"StevenLiudw"},"content":"        tasks.remove(taskNum);","lastModifiedDate":"2023-08-27"},{"lineNumber":90,"author":{"gitId":"StevenLiudw"},"content":"        return tem;","lastModifiedDate":"2023-08-27"},{"lineNumber":91,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":92,"author":{"gitId":"StevenLiudw"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"StevenLiudw":92}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"StevenLiudw"},"content":"package duke.command;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"StevenLiudw"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"StevenLiudw"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"StevenLiudw"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"StevenLiudw"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"StevenLiudw"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"StevenLiudw"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"StevenLiudw"},"content":" * Represents an add command.","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"StevenLiudw"},"content":" * The add command is used to add tasks to the task list.","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"StevenLiudw"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"StevenLiudw"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"StevenLiudw"},"content":"     * The task to be added.","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"StevenLiudw"},"content":"    private final Task task;","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"StevenLiudw"},"content":"     * Creates a new AddCommand with the specified task.","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"StevenLiudw"},"content":"     * @param task The task to be added.","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"StevenLiudw"},"content":"    public AddCommand(Task task) {","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"StevenLiudw"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"StevenLiudw"},"content":"     * Indicates whether this command will exit the application.","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"StevenLiudw"},"content":"     * @return false since this command does not exit the application.","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"StevenLiudw"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"StevenLiudw"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"StevenLiudw"},"content":"        return false;","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"StevenLiudw"},"content":"     * Executes the add command, adding the task to the task list,","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"StevenLiudw"},"content":"     * saving the task list, and notifying the user.","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"StevenLiudw"},"content":"     * @param tasks The list of tasks.","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"StevenLiudw"},"content":"     * @param ui The user interface.","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"StevenLiudw"},"content":"     * @param storage The storage to save tasks.","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"StevenLiudw"},"content":"     * @throws IOException If there\u0027s an error saving the tasks.","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"StevenLiudw"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"StevenLiudw"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"StevenLiudw"},"content":"        tasks.addTask(task);","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"StevenLiudw"},"content":"        storage.save(tasks);","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"StevenLiudw"},"content":"        ui.showAddedTask(task);","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"StevenLiudw"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"StevenLiudw":53}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"StevenLiudw"},"content":"package duke.command;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"StevenLiudw"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"StevenLiudw"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"StevenLiudw"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"StevenLiudw"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"StevenLiudw"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"StevenLiudw"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"StevenLiudw"},"content":" * Represents an abstract command to be executed in the Duke program.","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"StevenLiudw"},"content":" * This class provides a template for specific commands like adding or deleting tasks.","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"StevenLiudw"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"StevenLiudw"},"content":"public abstract class Command {","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"StevenLiudw"},"content":"     * Indicates whether the command will cause the program to exit.","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"StevenLiudw"},"content":"    private boolean isExit \u003d false;","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"StevenLiudw"},"content":"     * Executes the specific command.","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"StevenLiudw"},"content":"     * @param tasks   The list of tasks.","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"StevenLiudw"},"content":"     * @param ui      The user interface handler.","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"StevenLiudw"},"content":"     * @param storage The storage handler to load or save tasks.","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"StevenLiudw"},"content":"     * @throws IOException   If there\u0027s an error accessing or modifying the storage.","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"StevenLiudw"},"content":"     * @throws DukeException If there are issues executing the command.","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"StevenLiudw"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, DukeException;","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"StevenLiudw"},"content":"     * Determines if Duke should continue listening for commands or terminate.","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"StevenLiudw"},"content":"     * @return true if Duke should exit, false otherwise.","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"StevenLiudw"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"StevenLiudw"},"content":"        return this.isExit;","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"StevenLiudw"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"StevenLiudw":38}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"StevenLiudw"},"content":"package duke.command;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"StevenLiudw"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"StevenLiudw"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"StevenLiudw"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"StevenLiudw"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"StevenLiudw"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"StevenLiudw"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"StevenLiudw"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"StevenLiudw"},"content":" * Represents a command to delete a task from the task list in the Duke program.","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"StevenLiudw"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"StevenLiudw"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"StevenLiudw"},"content":"    /** Index of the task to be deleted from the task list. */","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"StevenLiudw"},"content":"    private final int taskIndex;","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"StevenLiudw"},"content":"     * Constructs a new DeleteCommand with the specified task index.","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"StevenLiudw"},"content":"     * @param taskIndex Index of the task to be deleted.","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"StevenLiudw"},"content":"    public DeleteCommand(int taskIndex) {","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"StevenLiudw"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"StevenLiudw"},"content":"     * Determines if the Duke program should exit.","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"StevenLiudw"},"content":"     * @return false since the delete command should not terminate the program.","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"StevenLiudw"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"StevenLiudw"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"StevenLiudw"},"content":"        return false;","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"StevenLiudw"},"content":"     * Executes the delete command, removing a task from the task list,","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"StevenLiudw"},"content":"     * saving the updated list and then notifying the user.","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"StevenLiudw"},"content":"     * @param tasks   The list of tasks.","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"StevenLiudw"},"content":"     * @param ui      The user interface handler.","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"StevenLiudw"},"content":"     * @param storage The storage handler.","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"StevenLiudw"},"content":"     * @throws IOException If there\u0027s an error saving the tasks.","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"StevenLiudw"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"StevenLiudw"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException {","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"StevenLiudw"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"StevenLiudw"},"content":"            if (taskIndex \u003c 0 || taskIndex \u003e\u003d tasks.getSize()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"StevenLiudw"},"content":"                throw new DukeException(\"Invalid task number!\");","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"StevenLiudw"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"StevenLiudw"},"content":"            Task removedTask \u003d tasks.deleteTask(taskIndex);","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"StevenLiudw"},"content":"            storage.save(tasks);","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"StevenLiudw"},"content":"            ui.showDeletedTask(removedTask);","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"StevenLiudw"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"StevenLiudw"},"content":"            ui.showError(e.getMessage());","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"StevenLiudw"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"StevenLiudw"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"StevenLiudw":60}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"StevenLiudw"},"content":"package duke.command;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"StevenLiudw"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"StevenLiudw"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"StevenLiudw"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"StevenLiudw"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"StevenLiudw"},"content":" * Represents a command to exit the application.","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"StevenLiudw"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"StevenLiudw"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"StevenLiudw"},"content":"     * Indicates that this command should cause the application to exit.","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"StevenLiudw"},"content":"     * @return true, as this is an exit command.","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"StevenLiudw"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"StevenLiudw"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"StevenLiudw"},"content":"        return true;","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"StevenLiudw"},"content":"     * Executes the exit command. Optionally save tasks or do any clean up here if needed.","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"StevenLiudw"},"content":"     * @param tasks   The list of tasks.","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"StevenLiudw"},"content":"     * @param ui      The user interface handler.","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"StevenLiudw"},"content":"     * @param storage The storage handler.","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"StevenLiudw"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"StevenLiudw"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"StevenLiudw"},"content":"        ui.showGoodbye();","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"StevenLiudw"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"StevenLiudw":31}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"StevenLiudw"},"content":"package duke.command;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"StevenLiudw"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"StevenLiudw"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"StevenLiudw"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"StevenLiudw"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"StevenLiudw"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"StevenLiudw"},"content":" * Represents a command to list out all the tasks.","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"StevenLiudw"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"StevenLiudw"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"StevenLiudw"},"content":"     * Executes the list command by printing out all the tasks.","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"StevenLiudw"},"content":"     * @param tasks   The list of tasks to be printed.","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"StevenLiudw"},"content":"     * @param ui      The user interface handler.","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"StevenLiudw"},"content":"     * @param storage The storage handler.","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"StevenLiudw"},"content":"     * @throws DukeException If there\u0027s an issue executing the list command.","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"StevenLiudw"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"StevenLiudw"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"StevenLiudw"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"StevenLiudw"},"content":"        for (int i \u003d 0; i \u003c tasks.getSize(); i++) {","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"StevenLiudw"},"content":"            int tem_order \u003d i + 1;","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"StevenLiudw"},"content":"            System.out.println(tem_order + \".\" + tasks.getTask(i));","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"StevenLiudw"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"StevenLiudw"},"content":"     * Indicates whether the command should exit the application.","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"StevenLiudw"},"content":"     * @return false, as \u0027list\u0027 command doesn\u0027t terminate the application.","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"StevenLiudw"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"StevenLiudw"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"StevenLiudw"},"content":"        return false;","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"StevenLiudw"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"StevenLiudw":37}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"StevenLiudw"},"content":"package duke.command;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"StevenLiudw"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"StevenLiudw"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"StevenLiudw"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"StevenLiudw"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"StevenLiudw"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"StevenLiudw"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"StevenLiudw"},"content":" * Represents a command to mark a task as completed.","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"StevenLiudw"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"StevenLiudw"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"StevenLiudw"},"content":"    private final int taskIndex;","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"StevenLiudw"},"content":"     * Initializes a new instance of the MarkCommand with the specified task index.","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"StevenLiudw"},"content":"     * @param taskIndex The index of the task to be marked as completed.","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"StevenLiudw"},"content":"    public MarkCommand(int taskIndex) {","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"StevenLiudw"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"StevenLiudw"},"content":"     * Indicates whether the command should exit the application.","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"StevenLiudw"},"content":"     * @return false, as the \u0027mark\u0027 command doesn\u0027t terminate the application.","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"StevenLiudw"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"StevenLiudw"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"StevenLiudw"},"content":"        return false;","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"StevenLiudw"},"content":"     * Executes the mark command by marking a task as completed.","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"StevenLiudw"},"content":"     * @param tasks   The list of tasks.","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"StevenLiudw"},"content":"     * @param ui      The user interface handler.","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"StevenLiudw"},"content":"     * @param storage The storage handler.","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"StevenLiudw"},"content":"     * @throws IOException    If there is an issue with file IO.","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"StevenLiudw"},"content":"     * @throws DukeException  If there\u0027s an issue executing the mark command.","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"StevenLiudw"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"StevenLiudw"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, DukeException {","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"StevenLiudw"},"content":"        if (taskIndex \u003c 0 || taskIndex \u003e\u003d tasks.getSize()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"StevenLiudw"},"content":"            throw new DukeException(\"Invalid input number. :( Please provide a valid task number.\");","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"StevenLiudw"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"StevenLiudw"},"content":"        tasks.mark(taskIndex);","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"StevenLiudw"},"content":"        ui.showMarkedTask(tasks.getTask(taskIndex));","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"StevenLiudw"},"content":"        storage.save(tasks);","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"StevenLiudw"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"StevenLiudw":51}},{"path":"src/main/java/duke/command/UnMarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"StevenLiudw"},"content":"package duke.command;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"StevenLiudw"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"StevenLiudw"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"StevenLiudw"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"StevenLiudw"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"StevenLiudw"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"StevenLiudw"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"StevenLiudw"},"content":" * Represents a command to unmark a task as done.","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"StevenLiudw"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"StevenLiudw"},"content":"public class UnMarkCommand extends Command {","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"StevenLiudw"},"content":"    /** Index of the task to unmark in the task list. */","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"StevenLiudw"},"content":"    private final int taskIndex;","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"StevenLiudw"},"content":"     * Constructs a new UnMarkCommand with the specified task index.","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"StevenLiudw"},"content":"     * @param taskIndex Index of the task in the task list to unmark as done.","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"StevenLiudw"},"content":"    public UnMarkCommand(int taskIndex) {","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"StevenLiudw"},"content":"        this.taskIndex \u003d taskIndex;","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"StevenLiudw"},"content":"     * Indicates whether this command should terminate the application.","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"StevenLiudw"},"content":"     * @return false since this command does not exit the application.","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"StevenLiudw"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"StevenLiudw"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"StevenLiudw"},"content":"        return false;","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"StevenLiudw"},"content":"     * Executes the unmark command by unmarking the specified task in the task list.","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"StevenLiudw"},"content":"     * @param tasks   The list of tasks.","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"StevenLiudw"},"content":"     * @param ui      The user interface used to interact with the user.","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"StevenLiudw"},"content":"     * @param storage The storage system used to save and load tasks.","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"StevenLiudw"},"content":"     * @throws IOException    If there\u0027s an error saving the tasks.","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"StevenLiudw"},"content":"     * @throws DukeException  If there\u0027s an error related to Duke\u0027s operation, such as invalid task number.","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"StevenLiudw"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"StevenLiudw"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws IOException, DukeException {","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"StevenLiudw"},"content":"        if (taskIndex \u003c 0 || taskIndex \u003e\u003d tasks.getSize()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"StevenLiudw"},"content":"            throw new DukeException(\"Invalid input number. :( Please provide a valid task number.\");","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"StevenLiudw"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"StevenLiudw"},"content":"        tasks.unmark(taskIndex);  // assuming the method to unmark the task exists","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"StevenLiudw"},"content":"        ui.showUnmarkedTask(tasks.getTask(taskIndex));  // assuming a method to show the unmarked task exists in Ui","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"StevenLiudw"},"content":"        storage.save(tasks);  // assuming a method to save tasks exists","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"StevenLiudw"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"StevenLiudw":54}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"StevenLiudw"},"content":"package duke.storage;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"StevenLiudw"},"content":"import duke.task.Event;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"StevenLiudw"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"StevenLiudw"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"StevenLiudw"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"StevenLiudw"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"StevenLiudw"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"StevenLiudw"},"content":"import java.io.File;","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"StevenLiudw"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"StevenLiudw"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"StevenLiudw"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"StevenLiudw"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"StevenLiudw"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"StevenLiudw"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"StevenLiudw"},"content":" * Represents a storage that deals with loading tasks from the file and saving tasks in the file.","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"StevenLiudw"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"StevenLiudw"},"content":"public class Storage {","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"StevenLiudw"},"content":"    private final File file;","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"StevenLiudw"},"content":"     * Creates a new Storage object.","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"StevenLiudw"},"content":"     * @param file_Path The path to the file used for storage.","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"StevenLiudw"},"content":"     * @throws IOException When there\u0027s an error with file operations.","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"StevenLiudw"},"content":"     * @throws DukeException When there\u0027s an error specific to the Duke application.","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"StevenLiudw"},"content":"    public Storage(String file_Path) throws IOException, DukeException{","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"StevenLiudw"},"content":"        File savedFile \u003d new File(file_Path);","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"StevenLiudw"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"StevenLiudw"},"content":"            if (!savedFile.exists() \u0026\u0026 !savedFile.createNewFile()) {","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"StevenLiudw"},"content":"                throw new IOException(\"Failed to create a new file.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"StevenLiudw"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"StevenLiudw"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"StevenLiudw"},"content":"            throw new DukeException(\"Error while saving the file: \" + e.getMessage());","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"StevenLiudw"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"StevenLiudw"},"content":"        this.file \u003d savedFile;","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"StevenLiudw"},"content":"     * Loads tasks from the file.","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"StevenLiudw"},"content":"     * @return An ArrayList of Task objects.","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"StevenLiudw"},"content":"     * @throws FileNotFoundException When the file is not found.","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"StevenLiudw"},"content":"     * @throws DukeException For other errors.","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"StevenLiudw"},"content":"    public ArrayList\u003cTask\u003e loadTasks() throws FileNotFoundException, DukeException {","lastModifiedDate":"2023-08-26"},{"lineNumber":48,"author":{"gitId":"StevenLiudw"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-26"},{"lineNumber":49,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":50,"author":{"gitId":"StevenLiudw"},"content":"        try (Scanner sc \u003d new Scanner(this.file)) {","lastModifiedDate":"2023-08-26"},{"lineNumber":51,"author":{"gitId":"StevenLiudw"},"content":"            while (sc.hasNext()) {","lastModifiedDate":"2023-08-26"},{"lineNumber":52,"author":{"gitId":"StevenLiudw"},"content":"                String curLine \u003d sc.nextLine();","lastModifiedDate":"2023-08-26"},{"lineNumber":53,"author":{"gitId":"StevenLiudw"},"content":"                String[] splits \u003d curLine.split(\"#\");","lastModifiedDate":"2023-08-26"},{"lineNumber":54,"author":{"gitId":"StevenLiudw"},"content":"                switch (splits[0].trim()) {","lastModifiedDate":"2023-08-26"},{"lineNumber":55,"author":{"gitId":"StevenLiudw"},"content":"                case \"T\":","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"StevenLiudw"},"content":"                    Task newTask_Todo \u003d new Todo(splits[2].trim(), (splits[1].trim().equals(\"1\")));","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"StevenLiudw"},"content":"                    tasks.add(newTask_Todo);","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"StevenLiudw"},"content":"                    break;","lastModifiedDate":"2023-08-26"},{"lineNumber":59,"author":{"gitId":"StevenLiudw"},"content":"                case \"D\":","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"StevenLiudw"},"content":"                    Task newTask_Deadline \u003d new Deadline(splits[2].trim(), splits[3].trim(), (splits[1].trim().equals(\"1\")));","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"StevenLiudw"},"content":"                    tasks.add(newTask_Deadline);","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"StevenLiudw"},"content":"                    break;","lastModifiedDate":"2023-08-26"},{"lineNumber":63,"author":{"gitId":"StevenLiudw"},"content":"                case \"E\":","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"StevenLiudw"},"content":"                    Task newTask_Event \u003d new Event(splits[2].trim(), splits[3].trim(), (splits[1].trim().equals(\"1\")));","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"StevenLiudw"},"content":"                    tasks.add(newTask_Event);","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"StevenLiudw"},"content":"                    break;","lastModifiedDate":"2023-08-26"},{"lineNumber":67,"author":{"gitId":"StevenLiudw"},"content":"                default:","lastModifiedDate":"2023-08-27"},{"lineNumber":68,"author":{"gitId":"StevenLiudw"},"content":"                    throw new DukeException(\"Invalid task type in the data file.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":69,"author":{"gitId":"StevenLiudw"},"content":"                }","lastModifiedDate":"2023-08-26"},{"lineNumber":70,"author":{"gitId":"StevenLiudw"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":71,"author":{"gitId":"StevenLiudw"},"content":"        }catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":72,"author":{"gitId":"StevenLiudw"},"content":"            throw new DukeException(\"Storage file not found.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":73,"author":{"gitId":"StevenLiudw"},"content":"        }  catch (Exception e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":74,"author":{"gitId":"StevenLiudw"},"content":"            throw new DukeException(\"Error occurred when reading the data file: \" + e.getMessage());","lastModifiedDate":"2023-08-26"},{"lineNumber":75,"author":{"gitId":"StevenLiudw"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":76,"author":{"gitId":"StevenLiudw"},"content":"        return tasks;","lastModifiedDate":"2023-08-26"},{"lineNumber":77,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":78,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":79,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":80,"author":{"gitId":"StevenLiudw"},"content":"     * Saves tasks to the file.","lastModifiedDate":"2023-08-27"},{"lineNumber":81,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":82,"author":{"gitId":"StevenLiudw"},"content":"     * @param tasks The TaskList containing tasks to be saved.","lastModifiedDate":"2023-08-27"},{"lineNumber":83,"author":{"gitId":"StevenLiudw"},"content":"     * @throws IOException When there\u0027s an error with file operations.","lastModifiedDate":"2023-08-27"},{"lineNumber":84,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":85,"author":{"gitId":"StevenLiudw"},"content":"    public void save(TaskList tasks) throws IOException {","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"StevenLiudw"},"content":"            FileWriter fw \u003d new FileWriter(this.file);","lastModifiedDate":"2023-08-26"},{"lineNumber":87,"author":{"gitId":"StevenLiudw"},"content":"            String textToAdd \u003d translateToStore(tasks.getTasks());","lastModifiedDate":"2023-08-27"},{"lineNumber":88,"author":{"gitId":"StevenLiudw"},"content":"            fw.write(textToAdd);","lastModifiedDate":"2023-08-26"},{"lineNumber":89,"author":{"gitId":"StevenLiudw"},"content":"            fw.close();","lastModifiedDate":"2023-08-26"},{"lineNumber":90,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":91,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":92,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":93,"author":{"gitId":"StevenLiudw"},"content":"     * Converts the list of tasks into a storable string format.","lastModifiedDate":"2023-08-27"},{"lineNumber":94,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":95,"author":{"gitId":"StevenLiudw"},"content":"     * @param tasks The ArrayList of tasks to be converted.","lastModifiedDate":"2023-08-27"},{"lineNumber":96,"author":{"gitId":"StevenLiudw"},"content":"     * @return A string in the storage format.","lastModifiedDate":"2023-08-27"},{"lineNumber":97,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":98,"author":{"gitId":"StevenLiudw"},"content":"    public String translateToStore(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-26"},{"lineNumber":99,"author":{"gitId":"StevenLiudw"},"content":"        StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2023-08-26"},{"lineNumber":100,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":101,"author":{"gitId":"StevenLiudw"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-08-26"},{"lineNumber":102,"author":{"gitId":"StevenLiudw"},"content":"            switch (task.getType()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":103,"author":{"gitId":"StevenLiudw"},"content":"                case TODO:","lastModifiedDate":"2023-08-26"},{"lineNumber":104,"author":{"gitId":"StevenLiudw"},"content":"                    result.append(\"T # \")","lastModifiedDate":"2023-08-26"},{"lineNumber":105,"author":{"gitId":"StevenLiudw"},"content":"                            .append(task.isDone ? \"1\" : \"0\")","lastModifiedDate":"2023-08-26"},{"lineNumber":106,"author":{"gitId":"StevenLiudw"},"content":"                            .append(\" # \")","lastModifiedDate":"2023-08-26"},{"lineNumber":107,"author":{"gitId":"StevenLiudw"},"content":"                            .append(task.description)","lastModifiedDate":"2023-08-26"},{"lineNumber":108,"author":{"gitId":"StevenLiudw"},"content":"                            .append(\"\\n\");","lastModifiedDate":"2023-08-26"},{"lineNumber":109,"author":{"gitId":"StevenLiudw"},"content":"                    break;","lastModifiedDate":"2023-08-26"},{"lineNumber":110,"author":{"gitId":"StevenLiudw"},"content":"                case DEADLINE:","lastModifiedDate":"2023-08-26"},{"lineNumber":111,"author":{"gitId":"StevenLiudw"},"content":"                    Deadline deadline \u003d (Deadline) task;","lastModifiedDate":"2023-08-26"},{"lineNumber":112,"author":{"gitId":"StevenLiudw"},"content":"                    result.append(\"D # \")","lastModifiedDate":"2023-08-26"},{"lineNumber":113,"author":{"gitId":"StevenLiudw"},"content":"                            .append(task.isDone ? \"1\" : \"0\")","lastModifiedDate":"2023-08-26"},{"lineNumber":114,"author":{"gitId":"StevenLiudw"},"content":"                            .append(\" # \")","lastModifiedDate":"2023-08-26"},{"lineNumber":115,"author":{"gitId":"StevenLiudw"},"content":"                            .append(task.description)","lastModifiedDate":"2023-08-26"},{"lineNumber":116,"author":{"gitId":"StevenLiudw"},"content":"                            .append(\" # \")","lastModifiedDate":"2023-08-26"},{"lineNumber":117,"author":{"gitId":"StevenLiudw"},"content":"                            .append(deadline.d_time)","lastModifiedDate":"2023-08-26"},{"lineNumber":118,"author":{"gitId":"StevenLiudw"},"content":"                            .append(\"\\n\");","lastModifiedDate":"2023-08-26"},{"lineNumber":119,"author":{"gitId":"StevenLiudw"},"content":"                    break;","lastModifiedDate":"2023-08-26"},{"lineNumber":120,"author":{"gitId":"StevenLiudw"},"content":"                case EVENT:","lastModifiedDate":"2023-08-26"},{"lineNumber":121,"author":{"gitId":"StevenLiudw"},"content":"                    Event event \u003d (Event) task;","lastModifiedDate":"2023-08-26"},{"lineNumber":122,"author":{"gitId":"StevenLiudw"},"content":"                    result.append(\"E # \")","lastModifiedDate":"2023-08-26"},{"lineNumber":123,"author":{"gitId":"StevenLiudw"},"content":"                            .append(task.isDone ? \"1\" : \"0\")","lastModifiedDate":"2023-08-26"},{"lineNumber":124,"author":{"gitId":"StevenLiudw"},"content":"                            .append(\" # \")","lastModifiedDate":"2023-08-26"},{"lineNumber":125,"author":{"gitId":"StevenLiudw"},"content":"                            .append(task.description)","lastModifiedDate":"2023-08-26"},{"lineNumber":126,"author":{"gitId":"StevenLiudw"},"content":"                            .append(\" # \")","lastModifiedDate":"2023-08-26"},{"lineNumber":127,"author":{"gitId":"StevenLiudw"},"content":"                            .append(event.e_start)","lastModifiedDate":"2023-08-26"},{"lineNumber":128,"author":{"gitId":"StevenLiudw"},"content":"                            .append(\" - \")","lastModifiedDate":"2023-08-26"},{"lineNumber":129,"author":{"gitId":"StevenLiudw"},"content":"                            .append(event.e_end)","lastModifiedDate":"2023-08-26"},{"lineNumber":130,"author":{"gitId":"StevenLiudw"},"content":"                            .append(\"\\n\");","lastModifiedDate":"2023-08-26"},{"lineNumber":131,"author":{"gitId":"StevenLiudw"},"content":"                    break;","lastModifiedDate":"2023-08-26"},{"lineNumber":132,"author":{"gitId":"StevenLiudw"},"content":"                default:","lastModifiedDate":"2023-08-26"},{"lineNumber":133,"author":{"gitId":"StevenLiudw"},"content":"                    throw new IllegalStateException(\"Unexpected task type: \" + task.type);","lastModifiedDate":"2023-08-26"},{"lineNumber":134,"author":{"gitId":"StevenLiudw"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":135,"author":{"gitId":"StevenLiudw"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":136,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":137,"author":{"gitId":"StevenLiudw"},"content":"        return result.toString();","lastModifiedDate":"2023-08-26"},{"lineNumber":138,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":139,"author":{"gitId":"StevenLiudw"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"StevenLiudw":139}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"StevenLiudw"},"content":"package duke.task;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"StevenLiudw"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"StevenLiudw"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"StevenLiudw"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"StevenLiudw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"StevenLiudw"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"StevenLiudw"},"content":" * Represents a Deadline task in the Duke program.","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"StevenLiudw"},"content":" * Each deadline has a description and a specific due time.","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"StevenLiudw"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"StevenLiudw"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"StevenLiudw"},"content":"    /** Due date/time for the deadline. */","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"StevenLiudw"},"content":"    public LocalDate d_time;","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"StevenLiudw"},"content":"    /** Formatter to display the due time in the desired format. */","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"StevenLiudw"},"content":"    private static final DateTimeFormatter OUTPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"StevenLiudw"},"content":"     * Constructs a new Deadline task.","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"StevenLiudw"},"content":"     * @param description Description of the deadline.","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"StevenLiudw"},"content":"     * @param d_time Due time for the deadline in \"yyyy-MM-dd\" format.","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"StevenLiudw"},"content":"     * @throws DukeException If the due time is not in the expected format.","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"StevenLiudw"},"content":"    public Deadline(String description, String d_time) throws DukeException {","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"StevenLiudw"},"content":"        super(description, TaskType.DEADLINE);","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"StevenLiudw"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"StevenLiudw"},"content":"            this.d_time \u003d LocalDate.parse(d_time, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"StevenLiudw"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"StevenLiudw"},"content":"            throw new DukeException(\"Invalid time format for input: \" + d_time);","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"StevenLiudw"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":34,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":35,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"StevenLiudw"},"content":"     * Constructs a new Deadline task with an isDone status.","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"StevenLiudw"},"content":"     * @param description Description of the deadline.","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"StevenLiudw"},"content":"     * @param d_time Due time for the deadline in \"yyyy-MM-dd\" format.","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"StevenLiudw"},"content":"     * @param isDone Boolean indicating if the task has been completed.","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"StevenLiudw"},"content":"     * @throws DukeException If the due time is not in the expected format.","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"StevenLiudw"},"content":"    public Deadline(String description, String d_time, boolean isDone) throws DukeException {","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"StevenLiudw"},"content":"        super(description, TaskType.DEADLINE, isDone);","lastModifiedDate":"2023-08-26"},{"lineNumber":45,"author":{"gitId":"StevenLiudw"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"StevenLiudw"},"content":"            this.d_time \u003d LocalDate.parse(d_time, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"StevenLiudw"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"StevenLiudw"},"content":"            throw new DukeException(\"Invalid time format for input: \" + d_time);","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"StevenLiudw"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":51,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":52,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"StevenLiudw"},"content":"     * Returns the string representation of the deadline.","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"StevenLiudw"},"content":"     * @return Formatted string representing the deadline.","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"StevenLiudw"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":58,"author":{"gitId":"StevenLiudw"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":59,"author":{"gitId":"StevenLiudw"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + d_time.format(OUTPUT_FORMATTER) + \")\";","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":61,"author":{"gitId":"StevenLiudw"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"StevenLiudw":61}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"StevenLiudw"},"content":"package duke.task;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"StevenLiudw"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"StevenLiudw"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"StevenLiudw"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"StevenLiudw"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"StevenLiudw"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"StevenLiudw"},"content":" * Represents an event task with a start and end date.","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"StevenLiudw"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"StevenLiudw"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"StevenLiudw"},"content":"    public LocalDate e_start;","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"StevenLiudw"},"content":"    public LocalDate e_end;","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"StevenLiudw"},"content":"    private static final DateTimeFormatter FORMATTER \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"StevenLiudw"},"content":"    private static final DateTimeFormatter OUTPUT_FORMATTER \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"StevenLiudw"},"content":"     * Constructs a new Event with the specified description, start date, and end date.","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"StevenLiudw"},"content":"     * @param description Description of the event.","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"StevenLiudw"},"content":"     * @param e_start Start date of the event.","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"StevenLiudw"},"content":"     * @param e_end End date of the event.","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"StevenLiudw"},"content":"     * @throws DukeException If the given date format is invalid.","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"StevenLiudw"},"content":"    public Event(String description, String e_start, String e_end) throws DukeException {","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"StevenLiudw"},"content":"        super(description, TaskType.EVENT);","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"StevenLiudw"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"StevenLiudw"},"content":"            this.e_start \u003d LocalDate.parse(e_start, FORMATTER);","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"StevenLiudw"},"content":"            this.e_end \u003d LocalDate.parse(e_end, FORMATTER);","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"StevenLiudw"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"StevenLiudw"},"content":"            throw new DukeException(\"Invalid time format.\");","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"StevenLiudw"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":35,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":36,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"StevenLiudw"},"content":"     * Constructs a new Event with the specified description, combined time (start-end), and completion status.","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"StevenLiudw"},"content":"     * @param description Description of the event.","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"StevenLiudw"},"content":"     * @param time Combined start and end date in the format \u0027start-end\u0027.","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"StevenLiudw"},"content":"     * @param isDone Boolean indicating the completion status of the event.","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"StevenLiudw"},"content":"     * @throws DukeException If the given date format is invalid.","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"StevenLiudw"},"content":"    public Event(String description, String time, Boolean isDone) throws DukeException {","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"StevenLiudw"},"content":"        super(description, TaskType.EVENT, isDone);","lastModifiedDate":"2023-08-26"},{"lineNumber":46,"author":{"gitId":"StevenLiudw"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"StevenLiudw"},"content":"            String[] splits \u003d time.split(\"-\");","lastModifiedDate":"2023-08-26"},{"lineNumber":48,"author":{"gitId":"StevenLiudw"},"content":"            this.e_start \u003d LocalDate.parse(splits[0].trim(), FORMATTER);","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"StevenLiudw"},"content":"            this.e_end \u003d LocalDate.parse(splits[1].trim(), FORMATTER);","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"StevenLiudw"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"StevenLiudw"},"content":"            throw new DukeException(\"Invalid time format.\");","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"StevenLiudw"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":54,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"StevenLiudw"},"content":"     * Returns a string representation of the event.","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"StevenLiudw"},"content":"     * @return A string representing the event.","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"StevenLiudw"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":61,"author":{"gitId":"StevenLiudw"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":62,"author":{"gitId":"StevenLiudw"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + e_start.format(OUTPUT_FORMATTER)","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"StevenLiudw"},"content":"                + \" to: \" + e_end.format(OUTPUT_FORMATTER) + \")\";","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":65,"author":{"gitId":"StevenLiudw"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"StevenLiudw":65}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"StevenLiudw"},"content":"package duke.task;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"StevenLiudw"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"StevenLiudw"},"content":" * Represents a general task. It can be extended by other specific task types.","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"StevenLiudw"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"StevenLiudw"},"content":"public class Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"StevenLiudw"},"content":"    public String description;","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"StevenLiudw"},"content":"    public boolean isDone;","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"StevenLiudw"},"content":"    public TaskType type;","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"StevenLiudw"},"content":"     * Initializes a task with the specified description and type.","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"StevenLiudw"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"StevenLiudw"},"content":"     * @param type The type of the task.","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"StevenLiudw"},"content":"    public Task(String description, TaskType type) {","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"StevenLiudw"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"StevenLiudw"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"StevenLiudw"},"content":"        this.type \u003d type;","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"StevenLiudw"},"content":"    public TaskType getType() {","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"StevenLiudw"},"content":"        return this.type;","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"StevenLiudw"},"content":"     * Initializes a task with the specified description, type, and completion status.","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"StevenLiudw"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"StevenLiudw"},"content":"     * @param type The type of the task.","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"StevenLiudw"},"content":"     * @param isDone The completion status of the task.","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"StevenLiudw"},"content":"    public Task(String description, TaskType type, Boolean isDone) {","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"StevenLiudw"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"StevenLiudw"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"StevenLiudw"},"content":"        this.type \u003d type;","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"StevenLiudw"},"content":"     * Gets the status icon for the task.","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"StevenLiudw"},"content":"     * @return \"X\" if the task is completed, else \" \".","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"StevenLiudw"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-22"},{"lineNumber":47,"author":{"gitId":"StevenLiudw"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-08-22"},{"lineNumber":48,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":49,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":50,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"StevenLiudw"},"content":"     * Marks the task as completed.","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"StevenLiudw"},"content":"    public void mark() {","lastModifiedDate":"2023-08-22"},{"lineNumber":54,"author":{"gitId":"StevenLiudw"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-22"},{"lineNumber":55,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":56,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":57,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"StevenLiudw"},"content":"     * Marks the task as not completed.","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"StevenLiudw"},"content":"    public void unmark() {","lastModifiedDate":"2023-08-22"},{"lineNumber":61,"author":{"gitId":"StevenLiudw"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":62,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":63,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":64,"author":{"gitId":"StevenLiudw"},"content":"    // Commented code for getting DateTime.","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"StevenLiudw"},"content":"    // public String getDateTime() {","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"StevenLiudw"},"content":"    //     return dateTime.format(formatter);","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"StevenLiudw"},"content":"    // }","lastModifiedDate":"2023-08-22"},{"lineNumber":68,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":69,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"StevenLiudw"},"content":"     * Returns the string representation of the task.","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"StevenLiudw"},"content":"     * @return A string representing the task\u0027s status and description.","lastModifiedDate":"2023-08-27"},{"lineNumber":73,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"StevenLiudw"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":75,"author":{"gitId":"StevenLiudw"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":76,"author":{"gitId":"StevenLiudw"},"content":"        return \"[\" + getStatusIcon() + \"] \" + description;","lastModifiedDate":"2023-08-22"},{"lineNumber":77,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":78,"author":{"gitId":"StevenLiudw"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"StevenLiudw":78}},{"path":"src/main/java/duke/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"StevenLiudw"},"content":"package duke.task;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"StevenLiudw"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"StevenLiudw"},"content":" * Enumerates the different types of tasks.","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"StevenLiudw"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"StevenLiudw"},"content":"public enum TaskType {","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"StevenLiudw"},"content":"    TODO, DEADLINE, EVENT","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"StevenLiudw"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"StevenLiudw":8}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"StevenLiudw"},"content":"package duke.task;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"StevenLiudw"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"StevenLiudw"},"content":" * Represents a \"to-do\" type of task.","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"StevenLiudw"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"StevenLiudw"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"StevenLiudw"},"content":"     * Initializes a new \"to-do\" task with the specified description.","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"StevenLiudw"},"content":"     * @param description The description of the \"to-do\" task.","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"StevenLiudw"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"StevenLiudw"},"content":"        super(description, TaskType.TODO);","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"StevenLiudw"},"content":"     * Initializes a new \"to-do\" task with the specified name and completion status.","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"StevenLiudw"},"content":"     * @param name The name of the \"to-do\" task.","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"StevenLiudw"},"content":"     * @param isDone The completion status of the task.","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"StevenLiudw"},"content":"    public Todo(String name, boolean isDone) {","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"StevenLiudw"},"content":"        super(name, TaskType.TODO, isDone);","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"StevenLiudw"},"content":"     * Returns the string representation of the \"to-do\" task.","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"StevenLiudw"},"content":"     * @return A string representing the \"to-do\" task\u0027s type, status, and description.","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"StevenLiudw"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":32,"author":{"gitId":"StevenLiudw"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":33,"author":{"gitId":"StevenLiudw"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-22"},{"lineNumber":34,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":35,"author":{"gitId":"StevenLiudw"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"StevenLiudw":35}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"StevenLiudw"},"content":"package duke.ui;","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"StevenLiudw"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"StevenLiudw"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"StevenLiudw"},"content":"/**","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"StevenLiudw"},"content":" * Deals with interactions with the user","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"StevenLiudw"},"content":" * Return messages to user from Duke.","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"StevenLiudw"},"content":" */","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"StevenLiudw"},"content":"public class Ui {","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"StevenLiudw"},"content":"    private Scanner scanner;","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"StevenLiudw"},"content":"     * Constructor for Ui class. Initializes the Scanner object.","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"StevenLiudw"},"content":"    public Ui() {","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"StevenLiudw"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"StevenLiudw"},"content":"     * Returns the welcome greetings.","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"StevenLiudw"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"StevenLiudw"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"StevenLiudw"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"StevenLiudw"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"StevenLiudw"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"StevenLiudw"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"StevenLiudw"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"StevenLiudw"},"content":"        System.out.println(\"_____________________________________\\n\");","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"StevenLiudw"},"content":"        System.out.println(\"Hello! I \u0027m Jarvis.\\n\");","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"StevenLiudw"},"content":"        System.out.println(\"What can I do for you?\\n\");","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"StevenLiudw"},"content":"        System.out.println(\"_____________________________________\\n\");","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"StevenLiudw"},"content":"     * Reads a command entered by the user.","lastModifiedDate":"2023-08-27"},{"lineNumber":37,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":38,"author":{"gitId":"StevenLiudw"},"content":"     * @return A string representing the user\u0027s command.","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"StevenLiudw"},"content":"    public String readCommand() {","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"StevenLiudw"},"content":"        return scanner.nextLine();","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"StevenLiudw"},"content":"     * Displays a line to format the UI.","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"StevenLiudw"},"content":"    public void showLine() {","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"StevenLiudw"},"content":"        System.out.println(\"______________________________\");","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"StevenLiudw"},"content":"     * Displays an error message when there\u0027s an issue loading tasks.","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":54,"author":{"gitId":"StevenLiudw"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"StevenLiudw"},"content":"        System.out.println(\"Error loading tasks. Starting with an empty task list.\");","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"StevenLiudw"},"content":"     * Displays an error message.","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"StevenLiudw"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"StevenLiudw"},"content":"     * @param message The error message to display.","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"StevenLiudw"},"content":"    public void showError(String message) {","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"StevenLiudw"},"content":"        System.out.println(\"Error: \" + message);","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":68,"author":{"gitId":"StevenLiudw"},"content":"     * Returns the Goodbye message.","lastModifiedDate":"2023-08-27"},{"lineNumber":69,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"StevenLiudw"},"content":"    public void showGoodbye() {","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"StevenLiudw"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\\n\");","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":73,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":75,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":76,"author":{"gitId":"StevenLiudw"},"content":"     * Displays the message for a deleted task.","lastModifiedDate":"2023-08-27"},{"lineNumber":77,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":78,"author":{"gitId":"StevenLiudw"},"content":"    public void showDeletedTask(Task task) {","lastModifiedDate":"2023-08-27"},{"lineNumber":79,"author":{"gitId":"StevenLiudw"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-08-27"},{"lineNumber":80,"author":{"gitId":"StevenLiudw"},"content":"        System.out.println(\"  \" + task);","lastModifiedDate":"2023-08-27"},{"lineNumber":81,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":82,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":83,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":84,"author":{"gitId":"StevenLiudw"},"content":"     * Displays the message for an added task.","lastModifiedDate":"2023-08-27"},{"lineNumber":85,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"StevenLiudw"},"content":"    public void showAddedTask(Task task) {","lastModifiedDate":"2023-08-27"},{"lineNumber":87,"author":{"gitId":"StevenLiudw"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-27"},{"lineNumber":88,"author":{"gitId":"StevenLiudw"},"content":"        System.out.println(\"  \" + task);","lastModifiedDate":"2023-08-27"},{"lineNumber":89,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":90,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":91,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":92,"author":{"gitId":"StevenLiudw"},"content":"     * Displays the message for a marked task.","lastModifiedDate":"2023-08-27"},{"lineNumber":93,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":94,"author":{"gitId":"StevenLiudw"},"content":"    public void showMarkedTask(Task task) {","lastModifiedDate":"2023-08-27"},{"lineNumber":95,"author":{"gitId":"StevenLiudw"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-08-27"},{"lineNumber":96,"author":{"gitId":"StevenLiudw"},"content":"        System.out.println(\"  \" + task);","lastModifiedDate":"2023-08-27"},{"lineNumber":97,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":98,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":99,"author":{"gitId":"StevenLiudw"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":100,"author":{"gitId":"StevenLiudw"},"content":"     * Displays the message for an unmarked task.","lastModifiedDate":"2023-08-27"},{"lineNumber":101,"author":{"gitId":"StevenLiudw"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":102,"author":{"gitId":"StevenLiudw"},"content":"    public void showUnmarkedTask(Task task) {","lastModifiedDate":"2023-08-27"},{"lineNumber":103,"author":{"gitId":"StevenLiudw"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-08-27"},{"lineNumber":104,"author":{"gitId":"StevenLiudw"},"content":"        System.out.println(\"  \" + task);","lastModifiedDate":"2023-08-27"},{"lineNumber":105,"author":{"gitId":"StevenLiudw"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":106,"author":{"gitId":"StevenLiudw"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":107,"author":{"gitId":"StevenLiudw"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"StevenLiudw":107}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"StevenLiudw"},"content":"todo read book","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"StevenLiudw"},"content":"deadline return book /by August 8th","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"StevenLiudw"},"content":"event project meeting /from Aug 6th 2pm /to 4pm","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"StevenLiudw"},"content":"mark 2","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"StevenLiudw"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"StevenLiudw"},"content":"blah","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"StevenLiudw"},"content":"todo","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"StevenLiudw"},"content":"delete 1","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"StevenLiudw"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"StevenLiudw"},"content":"bye","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"StevenLiudw":10}}]
