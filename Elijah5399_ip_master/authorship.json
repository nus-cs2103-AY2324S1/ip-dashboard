[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Elijah5399"},"content":"# Alyssa project template","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"Elijah5399"},"content":"3. After that, locate the `src/main/java/Alyssa.java` file, right-click it, and choose `Run Alyssa.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-08-20"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Elijah5399":2,"-":22}},{"path":"src/main/java/Alyssa.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Elijah5399"},"content":"import java.io.File;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"Elijah5399"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"Elijah5399"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"Elijah5399"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"Elijah5399"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"Elijah5399"},"content":"import java.util.List;","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"Elijah5399"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"Elijah5399"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"Elijah5399"},"content":"import Exceptions.AlyssaArgumentException;","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"Elijah5399"},"content":"import Exceptions.AlyssaException;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"Elijah5399"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"Elijah5399"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":13,"author":{"gitId":"Elijah5399"},"content":" * This class represents the main program.","lastModifiedDate":"2023-08-20"},{"lineNumber":14,"author":{"gitId":"Elijah5399"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":15,"author":{"gitId":"Elijah5399"},"content":"public class Alyssa {","lastModifiedDate":"2023-08-20"},{"lineNumber":16,"author":{"gitId":"Elijah5399"},"content":"    private static final String saveFilePath \u003d \"./data/alyssa.txt\";","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"Elijah5399"},"content":"    private static final String line \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"Elijah5399"},"content":"    private static final String logo \u003d \" ___  __    __   __  ____   ____    ___\\n\"","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"Elijah5399"},"content":"            + \"|   | | |   \\\\ \\\\ / / |  __| |  __|  |   |\\n\"","lastModifiedDate":"2023-08-20"},{"lineNumber":20,"author":{"gitId":"Elijah5399"},"content":"            + \"|   | | |    \\\\   /   \\\\ \\\\    \\\\ \\\\    |   |\\n\"","lastModifiedDate":"2023-08-20"},{"lineNumber":21,"author":{"gitId":"Elijah5399"},"content":"            + \"|___| | |     | |     \\\\ \\\\    \\\\ \\\\   |___|\\n\"","lastModifiedDate":"2023-08-20"},{"lineNumber":22,"author":{"gitId":"Elijah5399"},"content":"            + \"|   | | |___  | |     _\\\\ \\\\   _\\\\ \\\\  |   |\\n\"","lastModifiedDate":"2023-08-20"},{"lineNumber":23,"author":{"gitId":"Elijah5399"},"content":"            + \"|   | |_____| |_|    |____| |____| |   |\\n\";","lastModifiedDate":"2023-08-20"},{"lineNumber":24,"author":{"gitId":"Elijah5399"},"content":"    private static List\u003cTask\u003e taskList;","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"Elijah5399"},"content":"    private static File saveFile;","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"Elijah5399"},"content":"    private static void greet() {","lastModifiedDate":"2023-08-22"},{"lineNumber":27,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(logo);","lastModifiedDate":"2023-08-20"},{"lineNumber":28,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-20"},{"lineNumber":29,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(\"Hello! I\u0027m Alyssa!\");","lastModifiedDate":"2023-08-20"},{"lineNumber":30,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-08-20"},{"lineNumber":31,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-20"},{"lineNumber":32,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":33,"author":{"gitId":"Elijah5399"},"content":"    private static void goodbye() {","lastModifiedDate":"2023-08-22"},{"lineNumber":34,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-20"},{"lineNumber":35,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-08-20"},{"lineNumber":36,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-20"},{"lineNumber":37,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":38,"author":{"gitId":"Elijah5399"},"content":"    private static void listTasks() {","lastModifiedDate":"2023-08-22"},{"lineNumber":39,"author":{"gitId":"Elijah5399"},"content":"        int counter \u003d 1;","lastModifiedDate":"2023-08-20"},{"lineNumber":40,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-20"},{"lineNumber":41,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-08-20"},{"lineNumber":42,"author":{"gitId":"Elijah5399"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2023-08-20"},{"lineNumber":43,"author":{"gitId":"Elijah5399"},"content":"            System.out.println(counter + \".\" + task.toString());","lastModifiedDate":"2023-08-20"},{"lineNumber":44,"author":{"gitId":"Elijah5399"},"content":"            counter++;","lastModifiedDate":"2023-08-20"},{"lineNumber":45,"author":{"gitId":"Elijah5399"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":46,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-20"},{"lineNumber":47,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":48,"author":{"gitId":"Elijah5399"},"content":"    private static void markTask(String rest) throws AlyssaArgumentException, NumberFormatException {","lastModifiedDate":"2023-08-22"},{"lineNumber":49,"author":{"gitId":"Elijah5399"},"content":"        int index \u003d Integer.valueOf(rest); //this could throw a NumberFormatException if rest is not a number","lastModifiedDate":"2023-08-22"},{"lineNumber":50,"author":{"gitId":"Elijah5399"},"content":"        if (index \u003c 1 || index \u003e taskList.size()) {","lastModifiedDate":"2023-08-20"},{"lineNumber":51,"author":{"gitId":"Elijah5399"},"content":"            throw new AlyssaArgumentException(\"Invalid task number\");","lastModifiedDate":"2023-08-22"},{"lineNumber":52,"author":{"gitId":"Elijah5399"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":53,"author":{"gitId":"Elijah5399"},"content":"        Task task \u003d taskList.get(index - 1);","lastModifiedDate":"2023-08-20"},{"lineNumber":54,"author":{"gitId":"Elijah5399"},"content":"        task.markAsDone();","lastModifiedDate":"2023-08-20"},{"lineNumber":55,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-20"},{"lineNumber":56,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-08-20"},{"lineNumber":57,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(task.toString());","lastModifiedDate":"2023-08-20"},{"lineNumber":58,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-20"},{"lineNumber":59,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":60,"author":{"gitId":"Elijah5399"},"content":"    private static void unmarkTask(String rest) throws AlyssaArgumentException, NumberFormatException {","lastModifiedDate":"2023-08-22"},{"lineNumber":61,"author":{"gitId":"Elijah5399"},"content":"        int index \u003d Integer.valueOf(rest); //this could throw a NumberFormatException if rest is not a number","lastModifiedDate":"2023-08-22"},{"lineNumber":62,"author":{"gitId":"Elijah5399"},"content":"        if (index \u003c 1 || index \u003e taskList.size()) {","lastModifiedDate":"2023-08-20"},{"lineNumber":63,"author":{"gitId":"Elijah5399"},"content":"            throw new AlyssaArgumentException(\"Invalid task number\");","lastModifiedDate":"2023-08-22"},{"lineNumber":64,"author":{"gitId":"Elijah5399"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":65,"author":{"gitId":"Elijah5399"},"content":"        Task task \u003d taskList.get(index - 1);","lastModifiedDate":"2023-08-20"},{"lineNumber":66,"author":{"gitId":"Elijah5399"},"content":"        task.markAsUndone();","lastModifiedDate":"2023-08-20"},{"lineNumber":67,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-20"},{"lineNumber":68,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-08-20"},{"lineNumber":69,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(task.toString());","lastModifiedDate":"2023-08-20"},{"lineNumber":70,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-20"},{"lineNumber":71,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":72,"author":{"gitId":"Elijah5399"},"content":"    private static void addTodo(String desc) throws AlyssaArgumentException {","lastModifiedDate":"2023-08-22"},{"lineNumber":73,"author":{"gitId":"Elijah5399"},"content":"        if (desc.isEmpty()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":74,"author":{"gitId":"Elijah5399"},"content":"            throw new AlyssaArgumentException(\"Please specify a description for the todo.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":75,"author":{"gitId":"Elijah5399"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":76,"author":{"gitId":"Elijah5399"},"content":"        Task newTodo \u003d new Todo(desc);","lastModifiedDate":"2023-08-20"},{"lineNumber":77,"author":{"gitId":"Elijah5399"},"content":"        taskList.add(newTodo);","lastModifiedDate":"2023-08-20"},{"lineNumber":78,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-21"},{"lineNumber":79,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-20"},{"lineNumber":80,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(newTodo.toString());","lastModifiedDate":"2023-08-20"},{"lineNumber":81,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(\"Now you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":82,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-20"},{"lineNumber":83,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":84,"author":{"gitId":"Elijah5399"},"content":"    private static void addDeadline(String rest) throws AlyssaArgumentException {","lastModifiedDate":"2023-08-22"},{"lineNumber":85,"author":{"gitId":"Elijah5399"},"content":"        String[] parsed \u003d rest.split(\" /by \");","lastModifiedDate":"2023-08-22"},{"lineNumber":86,"author":{"gitId":"Elijah5399"},"content":"        if (parsed.length \u003c 2) {","lastModifiedDate":"2023-08-22"},{"lineNumber":87,"author":{"gitId":"Elijah5399"},"content":"            throw new AlyssaArgumentException(\"Incorrect deadline syntax. Syntax: deadline desc /by date\");","lastModifiedDate":"2023-08-22"},{"lineNumber":88,"author":{"gitId":"Elijah5399"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":89,"author":{"gitId":"Elijah5399"},"content":"        String desc \u003d parsed[0];","lastModifiedDate":"2023-08-22"},{"lineNumber":90,"author":{"gitId":"Elijah5399"},"content":"        String by \u003d parsed[1];","lastModifiedDate":"2023-08-20"},{"lineNumber":91,"author":{"gitId":"Elijah5399"},"content":"        Task newDeadline \u003d new Deadline(desc, by);","lastModifiedDate":"2023-08-20"},{"lineNumber":92,"author":{"gitId":"Elijah5399"},"content":"        taskList.add(newDeadline);","lastModifiedDate":"2023-08-20"},{"lineNumber":93,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-20"},{"lineNumber":94,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-20"},{"lineNumber":95,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(newDeadline.toString());","lastModifiedDate":"2023-08-20"},{"lineNumber":96,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(\"Now you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":97,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-20"},{"lineNumber":98,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":99,"author":{"gitId":"Elijah5399"},"content":"    private static void addEvent(String rest) throws AlyssaArgumentException {","lastModifiedDate":"2023-08-22"},{"lineNumber":100,"author":{"gitId":"Elijah5399"},"content":"        String[] parsed \u003d rest.split(\" /from | /to \");","lastModifiedDate":"2023-08-22"},{"lineNumber":101,"author":{"gitId":"Elijah5399"},"content":"        if (parsed.length \u003c 3) {","lastModifiedDate":"2023-08-22"},{"lineNumber":102,"author":{"gitId":"Elijah5399"},"content":"            throw new AlyssaArgumentException(\"Incorrect event syntax. Syntax: event desc /from date /to date\");","lastModifiedDate":"2023-08-22"},{"lineNumber":103,"author":{"gitId":"Elijah5399"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":104,"author":{"gitId":"Elijah5399"},"content":"        String desc \u003d parsed[0];","lastModifiedDate":"2023-08-22"},{"lineNumber":105,"author":{"gitId":"Elijah5399"},"content":"        String from \u003d parsed[1];","lastModifiedDate":"2023-08-20"},{"lineNumber":106,"author":{"gitId":"Elijah5399"},"content":"        String to \u003d parsed[2];","lastModifiedDate":"2023-08-20"},{"lineNumber":107,"author":{"gitId":"Elijah5399"},"content":"        Task newEvent \u003d new Event(desc, from, to);","lastModifiedDate":"2023-08-20"},{"lineNumber":108,"author":{"gitId":"Elijah5399"},"content":"        taskList.add(newEvent);","lastModifiedDate":"2023-08-20"},{"lineNumber":109,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-20"},{"lineNumber":110,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-20"},{"lineNumber":111,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(newEvent.toString());","lastModifiedDate":"2023-08-20"},{"lineNumber":112,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(\"Now you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":113,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-20"},{"lineNumber":114,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":115,"author":{"gitId":"Elijah5399"},"content":"    private static void deleteTask(String rest) throws AlyssaArgumentException, NumberFormatException {","lastModifiedDate":"2023-08-22"},{"lineNumber":116,"author":{"gitId":"Elijah5399"},"content":"        int index \u003d Integer.valueOf(rest); //this could throw a NumberFormatException if rest is not a number","lastModifiedDate":"2023-08-22"},{"lineNumber":117,"author":{"gitId":"Elijah5399"},"content":"        if (index \u003c 1 || index \u003e taskList.size()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":118,"author":{"gitId":"Elijah5399"},"content":"            throw new AlyssaArgumentException(\"Invalid task number\");","lastModifiedDate":"2023-08-22"},{"lineNumber":119,"author":{"gitId":"Elijah5399"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":120,"author":{"gitId":"Elijah5399"},"content":"        Task toDelete \u003d taskList.get(index - 1);","lastModifiedDate":"2023-08-22"},{"lineNumber":121,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-22"},{"lineNumber":122,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-08-22"},{"lineNumber":123,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(toDelete.toString());","lastModifiedDate":"2023-08-22"},{"lineNumber":124,"author":{"gitId":"Elijah5399"},"content":"        taskList.remove(index - 1);","lastModifiedDate":"2023-08-22"},{"lineNumber":125,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(\"Now you have \" + taskList.size() + \" tasks in the list.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":126,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-22"},{"lineNumber":127,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":128,"author":{"gitId":"Elijah5399"},"content":"    private static void invalidTaskResponse() {","lastModifiedDate":"2023-08-22"},{"lineNumber":129,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-22"},{"lineNumber":130,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-08-22"},{"lineNumber":131,"author":{"gitId":"Elijah5399"},"content":"        System.out.println(line);","lastModifiedDate":"2023-08-22"},{"lineNumber":132,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":133,"author":{"gitId":"Elijah5399"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":134,"author":{"gitId":"Elijah5399"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":135,"author":{"gitId":"Elijah5399"},"content":"     * Checks for the presence of ./data and ./data/alyssa.txt, and adds them if absent.","lastModifiedDate":"2023-08-29"},{"lineNumber":136,"author":{"gitId":"Elijah5399"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":137,"author":{"gitId":"Elijah5399"},"content":"    private static void checkSaveFile() {","lastModifiedDate":"2023-08-29"},{"lineNumber":138,"author":{"gitId":"Elijah5399"},"content":"        File dataDir \u003d new File(\"./data\");","lastModifiedDate":"2023-08-29"},{"lineNumber":139,"author":{"gitId":"Elijah5399"},"content":"        if (!dataDir.exists()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":140,"author":{"gitId":"Elijah5399"},"content":"            //System.out.println(\"data directory doesn\u0027t exist\");","lastModifiedDate":"2023-08-29"},{"lineNumber":141,"author":{"gitId":"Elijah5399"},"content":"            dataDir.mkdir();","lastModifiedDate":"2023-08-29"},{"lineNumber":142,"author":{"gitId":"Elijah5399"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":143,"author":{"gitId":"Elijah5399"},"content":"        saveFile \u003d new File(saveFilePath);","lastModifiedDate":"2023-08-29"},{"lineNumber":144,"author":{"gitId":"Elijah5399"},"content":"        if (!saveFile.exists()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":145,"author":{"gitId":"Elijah5399"},"content":"            //System.out.println(\"savefile doesn\u0027t exist\");","lastModifiedDate":"2023-08-29"},{"lineNumber":146,"author":{"gitId":"Elijah5399"},"content":"            try {","lastModifiedDate":"2023-08-29"},{"lineNumber":147,"author":{"gitId":"Elijah5399"},"content":"                saveFile.createNewFile();","lastModifiedDate":"2023-08-29"},{"lineNumber":148,"author":{"gitId":"Elijah5399"},"content":"                saveFile.setReadable(true);","lastModifiedDate":"2023-08-29"},{"lineNumber":149,"author":{"gitId":"Elijah5399"},"content":"                saveFile.setWritable(true);","lastModifiedDate":"2023-08-29"},{"lineNumber":150,"author":{"gitId":"Elijah5399"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":151,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(\"Something went wrong when creating a new alyssa.txt\");","lastModifiedDate":"2023-08-29"},{"lineNumber":152,"author":{"gitId":"Elijah5399"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":153,"author":{"gitId":"Elijah5399"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":154,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":155,"author":{"gitId":"Elijah5399"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":156,"author":{"gitId":"Elijah5399"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":157,"author":{"gitId":"Elijah5399"},"content":"     * Imports tasks from ./data/alyssa.txt if there are any.","lastModifiedDate":"2023-08-29"},{"lineNumber":158,"author":{"gitId":"Elijah5399"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":159,"author":{"gitId":"Elijah5399"},"content":"    private static void loadTasks() {","lastModifiedDate":"2023-08-29"},{"lineNumber":160,"author":{"gitId":"Elijah5399"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":161,"author":{"gitId":"Elijah5399"},"content":"            Scanner fileScanner \u003d new Scanner(saveFile);","lastModifiedDate":"2023-08-29"},{"lineNumber":162,"author":{"gitId":"Elijah5399"},"content":"            //each line read by fileScanner is a task!","lastModifiedDate":"2023-08-29"},{"lineNumber":163,"author":{"gitId":"Elijah5399"},"content":"            while (fileScanner.hasNextLine()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":164,"author":{"gitId":"Elijah5399"},"content":"                String nextTask \u003d fileScanner.nextLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":165,"author":{"gitId":"Elijah5399"},"content":"                String[] parsedTask \u003d nextTask.split(\" ~ \", 5);","lastModifiedDate":"2023-08-29"},{"lineNumber":166,"author":{"gitId":"Elijah5399"},"content":"                String typeOfTask \u003d parsedTask[0];","lastModifiedDate":"2023-08-29"},{"lineNumber":167,"author":{"gitId":"Elijah5399"},"content":"                String taskSymbol \u003d parsedTask[1];","lastModifiedDate":"2023-08-29"},{"lineNumber":168,"author":{"gitId":"Elijah5399"},"content":"                String desc \u003d parsedTask[2];","lastModifiedDate":"2023-08-29"},{"lineNumber":169,"author":{"gitId":"Elijah5399"},"content":"                switch (typeOfTask) {","lastModifiedDate":"2023-08-29"},{"lineNumber":170,"author":{"gitId":"Elijah5399"},"content":"                case \"T\":","lastModifiedDate":"2023-08-29"},{"lineNumber":171,"author":{"gitId":"Elijah5399"},"content":"                    Todo newTodo \u003d new Todo(desc);","lastModifiedDate":"2023-08-29"},{"lineNumber":172,"author":{"gitId":"Elijah5399"},"content":"                    if (taskSymbol.equals(\"X\")) {","lastModifiedDate":"2023-08-29"},{"lineNumber":173,"author":{"gitId":"Elijah5399"},"content":"                        newTodo.markAsDone();","lastModifiedDate":"2023-08-29"},{"lineNumber":174,"author":{"gitId":"Elijah5399"},"content":"                    }","lastModifiedDate":"2023-08-29"},{"lineNumber":175,"author":{"gitId":"Elijah5399"},"content":"                    taskList.add(newTodo);","lastModifiedDate":"2023-08-29"},{"lineNumber":176,"author":{"gitId":"Elijah5399"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":177,"author":{"gitId":"Elijah5399"},"content":"                case \"D\":","lastModifiedDate":"2023-08-29"},{"lineNumber":178,"author":{"gitId":"Elijah5399"},"content":"                    Deadline newDeadline \u003d new Deadline(desc, parsedTask[3]);","lastModifiedDate":"2023-08-29"},{"lineNumber":179,"author":{"gitId":"Elijah5399"},"content":"                    if (taskSymbol.equals(\"X\")) {","lastModifiedDate":"2023-08-29"},{"lineNumber":180,"author":{"gitId":"Elijah5399"},"content":"                        newDeadline.markAsDone();","lastModifiedDate":"2023-08-29"},{"lineNumber":181,"author":{"gitId":"Elijah5399"},"content":"                    }","lastModifiedDate":"2023-08-29"},{"lineNumber":182,"author":{"gitId":"Elijah5399"},"content":"                    taskList.add(newDeadline);","lastModifiedDate":"2023-08-29"},{"lineNumber":183,"author":{"gitId":"Elijah5399"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":184,"author":{"gitId":"Elijah5399"},"content":"                case \"E\":","lastModifiedDate":"2023-08-29"},{"lineNumber":185,"author":{"gitId":"Elijah5399"},"content":"                    Event newEvent \u003d new Event(desc, parsedTask[3], parsedTask[4]);","lastModifiedDate":"2023-08-29"},{"lineNumber":186,"author":{"gitId":"Elijah5399"},"content":"                    if (taskSymbol.equals(\"X\")) {","lastModifiedDate":"2023-08-29"},{"lineNumber":187,"author":{"gitId":"Elijah5399"},"content":"                        newEvent.markAsDone();","lastModifiedDate":"2023-08-29"},{"lineNumber":188,"author":{"gitId":"Elijah5399"},"content":"                    }","lastModifiedDate":"2023-08-29"},{"lineNumber":189,"author":{"gitId":"Elijah5399"},"content":"                    taskList.add(newEvent);","lastModifiedDate":"2023-08-29"},{"lineNumber":190,"author":{"gitId":"Elijah5399"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":191,"author":{"gitId":"Elijah5399"},"content":"                default:","lastModifiedDate":"2023-08-29"},{"lineNumber":192,"author":{"gitId":"Elijah5399"},"content":"                    throw new AlyssaException(\"Corrupted alyssa.txt\");","lastModifiedDate":"2023-08-29"},{"lineNumber":193,"author":{"gitId":"Elijah5399"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":194,"author":{"gitId":"Elijah5399"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":195,"author":{"gitId":"Elijah5399"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":196,"author":{"gitId":"Elijah5399"},"content":"            System.out.println(\"Weird... you didn\u0027t have a saved alyssa.txt file even after we added it for you\");","lastModifiedDate":"2023-08-29"},{"lineNumber":197,"author":{"gitId":"Elijah5399"},"content":"        } catch (AlyssaException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":198,"author":{"gitId":"Elijah5399"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":199,"author":{"gitId":"Elijah5399"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":200,"author":{"gitId":"Elijah5399"},"content":"            System.out.println(\"Corrupted alyssa.txt\");","lastModifiedDate":"2023-08-29"},{"lineNumber":201,"author":{"gitId":"Elijah5399"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":202,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":203,"author":{"gitId":"Elijah5399"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":204,"author":{"gitId":"Elijah5399"},"content":"     * Saves existing tasks to ./data/alyssa.txt.","lastModifiedDate":"2023-08-29"},{"lineNumber":205,"author":{"gitId":"Elijah5399"},"content":"     * @throws IOException when file or path cannot be found, or file is a directory, or file cannot be opened.","lastModifiedDate":"2023-08-29"},{"lineNumber":206,"author":{"gitId":"Elijah5399"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":207,"author":{"gitId":"Elijah5399"},"content":"    private static void saveTasks() throws IOException {","lastModifiedDate":"2023-08-29"},{"lineNumber":208,"author":{"gitId":"Elijah5399"},"content":"        FileWriter fw \u003d new FileWriter(saveFilePath);","lastModifiedDate":"2023-08-29"},{"lineNumber":209,"author":{"gitId":"Elijah5399"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2023-08-29"},{"lineNumber":210,"author":{"gitId":"Elijah5399"},"content":"            String entry \u003d \"\";","lastModifiedDate":"2023-08-29"},{"lineNumber":211,"author":{"gitId":"Elijah5399"},"content":"            if (task instanceof Todo) {","lastModifiedDate":"2023-08-29"},{"lineNumber":212,"author":{"gitId":"Elijah5399"},"content":"                Todo todo \u003d (Todo) task;","lastModifiedDate":"2023-08-29"},{"lineNumber":213,"author":{"gitId":"Elijah5399"},"content":"                entry \u003d \"T ~ \";","lastModifiedDate":"2023-08-29"},{"lineNumber":214,"author":{"gitId":"Elijah5399"},"content":"                entry +\u003d todo.getStatusIcon() + \" ~ \";","lastModifiedDate":"2023-08-29"},{"lineNumber":215,"author":{"gitId":"Elijah5399"},"content":"                entry +\u003d todo.getDescription();","lastModifiedDate":"2023-08-29"},{"lineNumber":216,"author":{"gitId":"Elijah5399"},"content":"            } else if (task instanceof Deadline) {","lastModifiedDate":"2023-08-29"},{"lineNumber":217,"author":{"gitId":"Elijah5399"},"content":"                Deadline deadline \u003d (Deadline) task;","lastModifiedDate":"2023-08-29"},{"lineNumber":218,"author":{"gitId":"Elijah5399"},"content":"                entry \u003d \"D ~ \";","lastModifiedDate":"2023-08-29"},{"lineNumber":219,"author":{"gitId":"Elijah5399"},"content":"                entry +\u003d deadline.getStatusIcon() + \" ~ \";","lastModifiedDate":"2023-08-29"},{"lineNumber":220,"author":{"gitId":"Elijah5399"},"content":"                entry +\u003d deadline.getDescription() + \" ~ \";","lastModifiedDate":"2023-08-29"},{"lineNumber":221,"author":{"gitId":"Elijah5399"},"content":"                entry +\u003d deadline.getBy();","lastModifiedDate":"2023-08-29"},{"lineNumber":222,"author":{"gitId":"Elijah5399"},"content":"            } else if (task instanceof Event) {","lastModifiedDate":"2023-08-29"},{"lineNumber":223,"author":{"gitId":"Elijah5399"},"content":"                Event event \u003d (Event) task;","lastModifiedDate":"2023-08-29"},{"lineNumber":224,"author":{"gitId":"Elijah5399"},"content":"                entry \u003d \"E ~ \";","lastModifiedDate":"2023-08-29"},{"lineNumber":225,"author":{"gitId":"Elijah5399"},"content":"                entry +\u003d event.getStatusIcon() + \" ~ \";","lastModifiedDate":"2023-08-29"},{"lineNumber":226,"author":{"gitId":"Elijah5399"},"content":"                entry +\u003d event.getDescription() + \" ~ \";","lastModifiedDate":"2023-08-29"},{"lineNumber":227,"author":{"gitId":"Elijah5399"},"content":"                entry +\u003d event.getFrom() + \" ~ \";","lastModifiedDate":"2023-08-29"},{"lineNumber":228,"author":{"gitId":"Elijah5399"},"content":"                entry +\u003d event.getTo();","lastModifiedDate":"2023-08-29"},{"lineNumber":229,"author":{"gitId":"Elijah5399"},"content":"            } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":230,"author":{"gitId":"Elijah5399"},"content":"                throw new AlyssaException(\"Oops! Something went wrong.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":231,"author":{"gitId":"Elijah5399"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":232,"author":{"gitId":"Elijah5399"},"content":"            entry +\u003d System.lineSeparator();","lastModifiedDate":"2023-08-29"},{"lineNumber":233,"author":{"gitId":"Elijah5399"},"content":"            fw.write(entry);","lastModifiedDate":"2023-08-29"},{"lineNumber":234,"author":{"gitId":"Elijah5399"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":235,"author":{"gitId":"Elijah5399"},"content":"        fw.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":236,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":237,"author":{"gitId":"Elijah5399"},"content":"    private static void run(Command command, String rest) {","lastModifiedDate":"2023-08-22"},{"lineNumber":238,"author":{"gitId":"Elijah5399"},"content":"        switch (command) {","lastModifiedDate":"2023-08-22"},{"lineNumber":239,"author":{"gitId":"Elijah5399"},"content":"        case BYE:","lastModifiedDate":"2023-08-22"},{"lineNumber":240,"author":{"gitId":"Elijah5399"},"content":"            goodbye();","lastModifiedDate":"2023-08-22"},{"lineNumber":241,"author":{"gitId":"Elijah5399"},"content":"            break;","lastModifiedDate":"2023-08-22"},{"lineNumber":242,"author":{"gitId":"Elijah5399"},"content":"        case LIST:","lastModifiedDate":"2023-08-22"},{"lineNumber":243,"author":{"gitId":"Elijah5399"},"content":"            listTasks();","lastModifiedDate":"2023-08-22"},{"lineNumber":244,"author":{"gitId":"Elijah5399"},"content":"            break;","lastModifiedDate":"2023-08-22"},{"lineNumber":245,"author":{"gitId":"Elijah5399"},"content":"        case MARK:","lastModifiedDate":"2023-08-22"},{"lineNumber":246,"author":{"gitId":"Elijah5399"},"content":"            try {","lastModifiedDate":"2023-08-22"},{"lineNumber":247,"author":{"gitId":"Elijah5399"},"content":"                markTask(rest);","lastModifiedDate":"2023-08-22"},{"lineNumber":248,"author":{"gitId":"Elijah5399"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":249,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-22"},{"lineNumber":250,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-08-22"},{"lineNumber":251,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-20"},{"lineNumber":252,"author":{"gitId":"Elijah5399"},"content":"            } catch (AlyssaArgumentException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":253,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-22"},{"lineNumber":254,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-08-22"},{"lineNumber":255,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-20"},{"lineNumber":256,"author":{"gitId":"Elijah5399"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":257,"author":{"gitId":"Elijah5399"},"content":"            break;","lastModifiedDate":"2023-08-22"},{"lineNumber":258,"author":{"gitId":"Elijah5399"},"content":"        case UNMARK:","lastModifiedDate":"2023-08-22"},{"lineNumber":259,"author":{"gitId":"Elijah5399"},"content":"            try {","lastModifiedDate":"2023-08-21"},{"lineNumber":260,"author":{"gitId":"Elijah5399"},"content":"                unmarkTask(rest);","lastModifiedDate":"2023-08-22"},{"lineNumber":261,"author":{"gitId":"Elijah5399"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":262,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-22"},{"lineNumber":263,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-08-22"},{"lineNumber":264,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-21"},{"lineNumber":265,"author":{"gitId":"Elijah5399"},"content":"            } catch (AlyssaArgumentException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":266,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-22"},{"lineNumber":267,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-08-22"},{"lineNumber":268,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-22"},{"lineNumber":269,"author":{"gitId":"Elijah5399"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":270,"author":{"gitId":"Elijah5399"},"content":"            break;","lastModifiedDate":"2023-08-22"},{"lineNumber":271,"author":{"gitId":"Elijah5399"},"content":"        case TODO:","lastModifiedDate":"2023-08-22"},{"lineNumber":272,"author":{"gitId":"Elijah5399"},"content":"            try {","lastModifiedDate":"2023-08-22"},{"lineNumber":273,"author":{"gitId":"Elijah5399"},"content":"                addTodo(rest);","lastModifiedDate":"2023-08-22"},{"lineNumber":274,"author":{"gitId":"Elijah5399"},"content":"            } catch (AlyssaArgumentException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":275,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-21"},{"lineNumber":276,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-08-22"},{"lineNumber":277,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-21"},{"lineNumber":278,"author":{"gitId":"Elijah5399"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":279,"author":{"gitId":"Elijah5399"},"content":"            break;","lastModifiedDate":"2023-08-22"},{"lineNumber":280,"author":{"gitId":"Elijah5399"},"content":"        case DEADLINE:","lastModifiedDate":"2023-08-22"},{"lineNumber":281,"author":{"gitId":"Elijah5399"},"content":"            try {","lastModifiedDate":"2023-08-22"},{"lineNumber":282,"author":{"gitId":"Elijah5399"},"content":"                addDeadline(rest);","lastModifiedDate":"2023-08-22"},{"lineNumber":283,"author":{"gitId":"Elijah5399"},"content":"            } catch (AlyssaArgumentException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":284,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-20"},{"lineNumber":285,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-08-22"},{"lineNumber":286,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-20"},{"lineNumber":287,"author":{"gitId":"Elijah5399"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":288,"author":{"gitId":"Elijah5399"},"content":"            break;","lastModifiedDate":"2023-08-22"},{"lineNumber":289,"author":{"gitId":"Elijah5399"},"content":"        case EVENT:","lastModifiedDate":"2023-08-22"},{"lineNumber":290,"author":{"gitId":"Elijah5399"},"content":"            try {","lastModifiedDate":"2023-08-22"},{"lineNumber":291,"author":{"gitId":"Elijah5399"},"content":"                addEvent(rest);","lastModifiedDate":"2023-08-22"},{"lineNumber":292,"author":{"gitId":"Elijah5399"},"content":"            } catch (AlyssaArgumentException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":293,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-22"},{"lineNumber":294,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-08-22"},{"lineNumber":295,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-22"},{"lineNumber":296,"author":{"gitId":"Elijah5399"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":297,"author":{"gitId":"Elijah5399"},"content":"            break;","lastModifiedDate":"2023-08-22"},{"lineNumber":298,"author":{"gitId":"Elijah5399"},"content":"        case DELETE:","lastModifiedDate":"2023-08-22"},{"lineNumber":299,"author":{"gitId":"Elijah5399"},"content":"            try {","lastModifiedDate":"2023-08-22"},{"lineNumber":300,"author":{"gitId":"Elijah5399"},"content":"                deleteTask(rest);","lastModifiedDate":"2023-08-22"},{"lineNumber":301,"author":{"gitId":"Elijah5399"},"content":"            } catch (AlyssaArgumentException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":302,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-22"},{"lineNumber":303,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-08-22"},{"lineNumber":304,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-22"},{"lineNumber":305,"author":{"gitId":"Elijah5399"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":306,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-22"},{"lineNumber":307,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-08-22"},{"lineNumber":308,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(line);","lastModifiedDate":"2023-08-22"},{"lineNumber":309,"author":{"gitId":"Elijah5399"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":310,"author":{"gitId":"Elijah5399"},"content":"            break;","lastModifiedDate":"2023-08-22"},{"lineNumber":311,"author":{"gitId":"Elijah5399"},"content":"        default:","lastModifiedDate":"2023-08-22"},{"lineNumber":312,"author":{"gitId":"Elijah5399"},"content":"            invalidTaskResponse();","lastModifiedDate":"2023-08-22"},{"lineNumber":313,"author":{"gitId":"Elijah5399"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":314,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":315,"author":{"gitId":"Elijah5399"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":316,"author":{"gitId":"Elijah5399"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-22"},{"lineNumber":317,"author":{"gitId":"Elijah5399"},"content":"        checkSaveFile();","lastModifiedDate":"2023-08-29"},{"lineNumber":318,"author":{"gitId":"Elijah5399"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-22"},{"lineNumber":319,"author":{"gitId":"Elijah5399"},"content":"        taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-22"},{"lineNumber":320,"author":{"gitId":"Elijah5399"},"content":"        loadTasks();","lastModifiedDate":"2023-08-29"},{"lineNumber":321,"author":{"gitId":"Elijah5399"},"content":"        boolean isRunning \u003d true;","lastModifiedDate":"2023-08-22"},{"lineNumber":322,"author":{"gitId":"Elijah5399"},"content":"        Command command;","lastModifiedDate":"2023-08-22"},{"lineNumber":323,"author":{"gitId":"Elijah5399"},"content":"        greet();","lastModifiedDate":"2023-08-22"},{"lineNumber":324,"author":{"gitId":"Elijah5399"},"content":"        while (isRunning) {","lastModifiedDate":"2023-08-22"},{"lineNumber":325,"author":{"gitId":"Elijah5399"},"content":"            String nextInput \u003d sc.nextLine();","lastModifiedDate":"2023-08-22"},{"lineNumber":326,"author":{"gitId":"Elijah5399"},"content":"            String[] parsedInput \u003d nextInput.split(\" \", 2);","lastModifiedDate":"2023-08-22"},{"lineNumber":327,"author":{"gitId":"Elijah5399"},"content":"            String commandString \u003d parsedInput[0];","lastModifiedDate":"2023-08-22"},{"lineNumber":328,"author":{"gitId":"Elijah5399"},"content":"            command \u003d Command.assignCommand(commandString);","lastModifiedDate":"2023-08-22"},{"lineNumber":329,"author":{"gitId":"Elijah5399"},"content":"            String rest \u003d parsedInput.length \u003e 1 ? parsedInput[1] : \"\";","lastModifiedDate":"2023-08-22"},{"lineNumber":330,"author":{"gitId":"Elijah5399"},"content":"            run(command, rest);","lastModifiedDate":"2023-08-22"},{"lineNumber":331,"author":{"gitId":"Elijah5399"},"content":"            try {","lastModifiedDate":"2023-08-29"},{"lineNumber":332,"author":{"gitId":"Elijah5399"},"content":"                saveTasks();","lastModifiedDate":"2023-08-29"},{"lineNumber":333,"author":{"gitId":"Elijah5399"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":334,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(\"Oops... We couldn\u0027t save your task data to a file :(\");","lastModifiedDate":"2023-08-29"},{"lineNumber":335,"author":{"gitId":"Elijah5399"},"content":"                System.out.println(e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":336,"author":{"gitId":"Elijah5399"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":337,"author":{"gitId":"Elijah5399"},"content":"            if (command \u003d\u003d Command.BYE) {","lastModifiedDate":"2023-08-22"},{"lineNumber":338,"author":{"gitId":"Elijah5399"},"content":"                isRunning \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":339,"author":{"gitId":"Elijah5399"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":340,"author":{"gitId":"Elijah5399"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":341,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":342,"author":{"gitId":"Elijah5399"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"Elijah5399":342}},{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Elijah5399"},"content":"/**","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"Elijah5399"},"content":" * This is an enum containing the possible commands given by the user.","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"Elijah5399"},"content":" */","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"Elijah5399"},"content":"public enum Command {","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"Elijah5399"},"content":"    BYE, LIST, MARK, UNMARK, TODO, DEADLINE, EVENT, DELETE, INVALID;","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"Elijah5399"},"content":"    //CHECKSTYLE.OFF: Indentation","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"Elijah5399"},"content":"    public static Command assignCommand(String cmd) {","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"Elijah5399"},"content":"        switch (cmd) {","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"Elijah5399"},"content":"            case \"bye\":","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"Elijah5399"},"content":"                return Command.BYE;","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"Elijah5399"},"content":"            case \"list\":","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"Elijah5399"},"content":"                return Command.LIST;","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"Elijah5399"},"content":"            case \"mark\":","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"Elijah5399"},"content":"                return Command.MARK;","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"Elijah5399"},"content":"            case \"unmark\":","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"Elijah5399"},"content":"                return Command.UNMARK;","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"Elijah5399"},"content":"            case \"todo\":","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"Elijah5399"},"content":"                return Command.TODO;","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"Elijah5399"},"content":"            case \"event\":","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"Elijah5399"},"content":"                return Command.EVENT;","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"Elijah5399"},"content":"            case \"deadline\":","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"Elijah5399"},"content":"                return Command.DEADLINE;","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"Elijah5399"},"content":"            case \"delete\":","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"Elijah5399"},"content":"                return Command.DELETE;","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"Elijah5399"},"content":"            default:","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"Elijah5399"},"content":"                return Command.INVALID;","lastModifiedDate":"2023-08-22"},{"lineNumber":27,"author":{"gitId":"Elijah5399"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":28,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":29,"author":{"gitId":"Elijah5399"},"content":"    //CHECKSTYLE.ON: Indentation","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"Elijah5399"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Elijah5399":30}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Elijah5399"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"Elijah5399"},"content":" * A Deadline is a task with an end date/time.","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"Elijah5399"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"Elijah5399"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":5,"author":{"gitId":"Elijah5399"},"content":"    protected String by;","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"Elijah5399"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"Elijah5399"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"Elijah5399"},"content":"     * Deadline constructor method.","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"Elijah5399"},"content":"     * @param description A description for the deadline task.","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"Elijah5399"},"content":"     * @param by When the deadline should be completed by.","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"Elijah5399"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"Elijah5399"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-08-20"},{"lineNumber":13,"author":{"gitId":"Elijah5399"},"content":"        super(description);","lastModifiedDate":"2023-08-20"},{"lineNumber":14,"author":{"gitId":"Elijah5399"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-08-20"},{"lineNumber":15,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":16,"author":{"gitId":"Elijah5399"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":17,"author":{"gitId":"Elijah5399"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":18,"author":{"gitId":"Elijah5399"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2023-08-20"},{"lineNumber":19,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":20,"author":{"gitId":"Elijah5399"},"content":"    public String getBy() {","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"Elijah5399"},"content":"        return this.by;","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"Elijah5399"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"Elijah5399":23}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Elijah5399"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"Elijah5399"},"content":" * An event is a task with a start date/time and","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"Elijah5399"},"content":" * an end date/time.","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"Elijah5399"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":5,"author":{"gitId":"Elijah5399"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"Elijah5399"},"content":"    protected String from;","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"Elijah5399"},"content":"    protected String to;","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"Elijah5399"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"Elijah5399"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"Elijah5399"},"content":"     * Constructor method for Event.","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"Elijah5399"},"content":"     * @param description A description for the event.","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"Elijah5399"},"content":"     * @param from A string representing when the event starts.","lastModifiedDate":"2023-08-20"},{"lineNumber":13,"author":{"gitId":"Elijah5399"},"content":"     * @param to A string representing when the event ends.","lastModifiedDate":"2023-08-20"},{"lineNumber":14,"author":{"gitId":"Elijah5399"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":15,"author":{"gitId":"Elijah5399"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2023-08-20"},{"lineNumber":16,"author":{"gitId":"Elijah5399"},"content":"        super(description);","lastModifiedDate":"2023-08-20"},{"lineNumber":17,"author":{"gitId":"Elijah5399"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-08-20"},{"lineNumber":18,"author":{"gitId":"Elijah5399"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-08-20"},{"lineNumber":19,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":20,"author":{"gitId":"Elijah5399"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":21,"author":{"gitId":"Elijah5399"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":22,"author":{"gitId":"Elijah5399"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2023-08-20"},{"lineNumber":23,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":24,"author":{"gitId":"Elijah5399"},"content":"    public String getFrom() {","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"Elijah5399"},"content":"        return this.from;","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"Elijah5399"},"content":"    public String getTo() {","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"Elijah5399"},"content":"        return this.to;","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"Elijah5399"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"Elijah5399":30}},{"path":"src/main/java/Exceptions/AlyssaArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Elijah5399"},"content":"package Exceptions;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"Elijah5399"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"Elijah5399"},"content":"/**","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"Elijah5399"},"content":" * This class represents the exception which is thrown when a correct command is given with","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"Elijah5399"},"content":" * incomplete/invalid arguments.","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"Elijah5399"},"content":" */","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"Elijah5399"},"content":"public class AlyssaArgumentException extends AlyssaException {","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"Elijah5399"},"content":"    public AlyssaArgumentException(String message) {","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"Elijah5399"},"content":"        super(message);","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"Elijah5399"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Elijah5399":11}},{"path":"src/main/java/Exceptions/AlyssaException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Elijah5399"},"content":"package Exceptions;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"Elijah5399"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"Elijah5399"},"content":"/**","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"Elijah5399"},"content":" * A generic exception. All custom exceptions extend from this.","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"Elijah5399"},"content":" */","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"Elijah5399"},"content":"public class AlyssaException extends RuntimeException {","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"Elijah5399"},"content":"    public AlyssaException(String message) {","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"Elijah5399"},"content":"        super(message);","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"Elijah5399"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Elijah5399":10}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Elijah5399"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"Elijah5399"},"content":" * Task represents a task created by a user. It can be either","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"Elijah5399"},"content":" * done or undone.","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"Elijah5399"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":5,"author":{"gitId":"Elijah5399"},"content":"public class Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"Elijah5399"},"content":"    protected String description;","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"Elijah5399"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"Elijah5399"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"Elijah5399"},"content":"    /**","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"Elijah5399"},"content":"     * Constructor method for Task.","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"Elijah5399"},"content":"     * @param description A brief description of the task.","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"Elijah5399"},"content":"     */","lastModifiedDate":"2023-08-20"},{"lineNumber":13,"author":{"gitId":"Elijah5399"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-20"},{"lineNumber":14,"author":{"gitId":"Elijah5399"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-20"},{"lineNumber":15,"author":{"gitId":"Elijah5399"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-20"},{"lineNumber":16,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":17,"author":{"gitId":"Elijah5399"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-20"},{"lineNumber":18,"author":{"gitId":"Elijah5399"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2023-08-20"},{"lineNumber":19,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":20,"author":{"gitId":"Elijah5399"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-20"},{"lineNumber":21,"author":{"gitId":"Elijah5399"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-20"},{"lineNumber":22,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":23,"author":{"gitId":"Elijah5399"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-08-20"},{"lineNumber":24,"author":{"gitId":"Elijah5399"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-20"},{"lineNumber":25,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":26,"author":{"gitId":"Elijah5399"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-20"},{"lineNumber":27,"author":{"gitId":"Elijah5399"},"content":"        return this.description;","lastModifiedDate":"2023-08-20"},{"lineNumber":28,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":29,"author":{"gitId":"Elijah5399"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":30,"author":{"gitId":"Elijah5399"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":31,"author":{"gitId":"Elijah5399"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-08-20"},{"lineNumber":32,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":33,"author":{"gitId":"Elijah5399"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"Elijah5399":33}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Elijah5399"},"content":"/**","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"Elijah5399"},"content":" * A Todo is a task without a date/time attached to it.","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"Elijah5399"},"content":" */","lastModifiedDate":"2023-08-20"},{"lineNumber":4,"author":{"gitId":"Elijah5399"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":5,"author":{"gitId":"Elijah5399"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"Elijah5399"},"content":"        super(description);","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"Elijah5399"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"Elijah5399"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"Elijah5399"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"Elijah5399"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"Elijah5399"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"Elijah5399":12}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Elijah5399"},"content":"todo borrow book","lastModifiedDate":"2023-08-21"},{"lineNumber":2,"author":{"gitId":"Elijah5399"},"content":"mark 1","lastModifiedDate":"2023-08-21"},{"lineNumber":3,"author":{"gitId":"Elijah5399"},"content":"list","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"Elijah5399"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"Elijah5399"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"Elijah5399"},"content":"delete 2","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"Elijah5399"},"content":"bye","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"Elijah5399":7}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"Elijah5399"},"content":"java -classpath ..\\bin Alyssa \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-20"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"Elijah5399":1}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"Elijah5399"},"content":"java -classpath ../bin Alyssa \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"Elijah5399"},"content":"diff -u ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":36,"Elijah5399":2}}]
