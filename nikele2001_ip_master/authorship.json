[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"# DukePro","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"\u003e ‚ÄúYour mind is for having ideas, not holding them.‚Äù ‚Äì David Allen ([source](https://boulderbugle.com/quotes-185mla85))","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":"DukePro frees your mind of having to remember things you need to do. It\u0027s,","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":"- text-based","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"- easy to learn","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"- ~~FAST~~ *SUPER* FAST to use","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":"All you need to do is,","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"1. download it from here.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"2. double-click it.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"3. add your tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"4. let it manage your tasks for you üòâ","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"nikele2001"},"content":"And it is **FREE**!","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"nikele2001"},"content":"Features:","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"nikele2001"},"content":"- [x] Managing tasks","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"nikele2001"},"content":"- [ ] Managing deadlines (coming soon)","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"nikele2001"},"content":"- [ ] Reminders (coming soon)","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"nikele2001"},"content":"If you are a Java programmer, you can use it to practise Java too. Here\u0027s the `main` method:","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"nikele2001"},"content":"public class Main {","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"nikele2001"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"nikele2001"},"content":"        Application.launch(MainApp.class, args);","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"nikele2001":23,"-":7}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"nikele2001"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":39,"author":{"gitId":"nikele2001"},"content":"    getDestinationDirectory().set(new File(projectDir, \"./src\")) // to specify jar file location","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"nikele2001"},"content":"checkstyle {","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"nikele2001"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"nikele2001":7,"-":41}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"T | 1 | read book","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"D | 0 | book | 2019-10-10","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"E | 1 | bookk | 2019-10-10 | 2019-10-10","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":"T | 0 | read book1","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":"D | 0 | read another book | 2020-10-10","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":"T | 0 | abc","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"T | 1 | read abcd","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"T | 1 | read dcba","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"nikele2001":8}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"import duke.command.Command;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":" * A class that represents the whole program","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"public class Duke {","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"nikele2001"},"content":"     * A constructor for the Duke program","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"nikele2001"},"content":"     * @param filePath","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"nikele2001"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"nikele2001"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"nikele2001"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"nikele2001"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"nikele2001"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"nikele2001"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"nikele2001"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"nikele2001"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"nikele2001"},"content":"     * A method to start the program","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"nikele2001"},"content":"    public void run() {","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"nikele2001"},"content":"        this.ui.greeting();","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"nikele2001"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"nikele2001"},"content":"        while (!isExit) {","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"nikele2001"},"content":"            String userInput \u003d ui.readCommand();","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"nikele2001"},"content":"            try {","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"nikele2001"},"content":"                // basic user input processing","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"nikele2001"},"content":"                Command c \u003d Parser.parse(userInput);","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"nikele2001"},"content":"                c.execute(this.tasks, this.ui, this.storage);","lastModifiedDate":"2023-08-26"},{"lineNumber":42,"author":{"gitId":"nikele2001"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-08-26"},{"lineNumber":43,"author":{"gitId":"nikele2001"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":44,"author":{"gitId":"nikele2001"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2023-08-26"},{"lineNumber":45,"author":{"gitId":"nikele2001"},"content":"            } finally {","lastModifiedDate":"2023-08-26"},{"lineNumber":46,"author":{"gitId":"nikele2001"},"content":"                ui.printLine();","lastModifiedDate":"2023-08-26"},{"lineNumber":47,"author":{"gitId":"nikele2001"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":48,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":49,"author":{"gitId":"nikele2001"},"content":"        ui.ending();","lastModifiedDate":"2023-08-26"},{"lineNumber":50,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":51,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":52,"author":{"gitId":"nikele2001"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"nikele2001"},"content":"        new Duke(\"data/tasks.txt\").run();","lastModifiedDate":"2023-08-26"},{"lineNumber":54,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":55,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"nikele2001":55}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"import duke.command.Command;","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"nikele2001"},"content":"import duke.exception.UnknownTaskTypeException;","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"nikele2001"},"content":" * A class that deals with making sense of the user commands","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"nikele2001"},"content":"public class Parser {","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"nikele2001"},"content":"     * A method that returns an integer which represents the type of command user","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"nikele2001"},"content":"     * inputted.","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"nikele2001"},"content":"     * @param fullCommand string that user gave","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"nikele2001"},"content":"     * @return integer based on the type of command user gave","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":28,"author":{"gitId":"nikele2001"},"content":"    public static int getCommand(String fullCommand) {","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"nikele2001"},"content":"        fullCommand \u003d fullCommand.trim();","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"nikele2001"},"content":"        boolean isList \u003d fullCommand.equals(\"list\");","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"nikele2001"},"content":"        boolean isMark \u003d Pattern.compile(\"^mark\").matcher(fullCommand).find();","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"nikele2001"},"content":"        boolean isUnmark \u003d Pattern.compile(\"^unmark\").matcher(fullCommand).find();","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"nikele2001"},"content":"        boolean isTodo \u003d Pattern.compile(\"^todo\").matcher(fullCommand).find();","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"nikele2001"},"content":"        boolean isDeadline \u003d Pattern.compile(\"^deadline\").matcher(fullCommand).find();","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"nikele2001"},"content":"        boolean isEvent \u003d Pattern.compile(\"^event\").matcher(fullCommand).find();","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"nikele2001"},"content":"        boolean isDelete \u003d Pattern.compile(\"^delete\").matcher(fullCommand).find();","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"nikele2001"},"content":"        boolean isExit \u003d Pattern.compile(\"^bye\").matcher(fullCommand).find();","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"nikele2001"},"content":"        boolean isFind \u003d Pattern.compile(\"^find\").matcher(fullCommand).find();","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"nikele2001"},"content":"        boolean isValidTask \u003d isTodo || isDeadline || isEvent;","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"nikele2001"},"content":"        return isList","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"nikele2001"},"content":"                ? 0","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"nikele2001"},"content":"                : isMark","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"nikele2001"},"content":"                ? 1","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"nikele2001"},"content":"                : isUnmark","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"nikele2001"},"content":"                ? 2","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"nikele2001"},"content":"                : isValidTask","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"nikele2001"},"content":"                ? 3","lastModifiedDate":"2023-08-28"},{"lineNumber":49,"author":{"gitId":"nikele2001"},"content":"                : isDelete","lastModifiedDate":"2023-08-28"},{"lineNumber":50,"author":{"gitId":"nikele2001"},"content":"                ? 4","lastModifiedDate":"2023-08-28"},{"lineNumber":51,"author":{"gitId":"nikele2001"},"content":"                : isFind","lastModifiedDate":"2023-08-28"},{"lineNumber":52,"author":{"gitId":"nikele2001"},"content":"                ? 5","lastModifiedDate":"2023-08-28"},{"lineNumber":53,"author":{"gitId":"nikele2001"},"content":"                : isExit","lastModifiedDate":"2023-08-28"},{"lineNumber":54,"author":{"gitId":"nikele2001"},"content":"                ? 6","lastModifiedDate":"2023-08-28"},{"lineNumber":55,"author":{"gitId":"nikele2001"},"content":"                : 7;","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":57,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":58,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"nikele2001"},"content":"     * A method that returns an integer based on the type of task user wants to add","lastModifiedDate":"2023-08-28"},{"lineNumber":60,"author":{"gitId":"nikele2001"},"content":"     * @param fullCommand string that user gave","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"nikele2001"},"content":"     * @return integer based on the type of task user wants to add","lastModifiedDate":"2023-08-28"},{"lineNumber":62,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":63,"author":{"gitId":"nikele2001"},"content":"    public static int getTaskType(String fullCommand) {","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"nikele2001"},"content":"        boolean isTodo \u003d Pattern.compile(\"^todo\").matcher(fullCommand).find();","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"nikele2001"},"content":"        boolean isDeadline \u003d Pattern.compile(\"^deadline\").matcher(fullCommand).find();","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"nikele2001"},"content":"        // boolean isEvent \u003d Pattern.compile(\"^event\").matcher(fullCommand).find();","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"nikele2001"},"content":"        return isTodo ? 0 : isDeadline ? 1 : 2;","lastModifiedDate":"2023-08-26"},{"lineNumber":68,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":69,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":70,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"nikele2001"},"content":"     * A method that gets the index of a task that user specified in command, if any","lastModifiedDate":"2023-08-28"},{"lineNumber":72,"author":{"gitId":"nikele2001"},"content":"     * @param fullCommand string that user gave","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"nikele2001"},"content":"     * @return index that user specified","lastModifiedDate":"2023-08-28"},{"lineNumber":74,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":75,"author":{"gitId":"nikele2001"},"content":"    public static int getIndex(String fullCommand) {","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"nikele2001"},"content":"        // how to check if string is parseable without parsing it?","lastModifiedDate":"2023-08-28"},{"lineNumber":77,"author":{"gitId":"nikele2001"},"content":"        return Integer.parseInt(fullCommand.split(\" \")[1]);","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":79,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":80,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"nikele2001"},"content":"     * A method that returns the keyword that user is searching for when user uses the find command","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"nikele2001"},"content":"     * @param fullCommand string that user gave","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"nikele2001"},"content":"     * @return string that user wants to search with regards to tasks\u0027 descriptions","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"nikele2001"},"content":"    public static String getKeyString(String fullCommand) {","lastModifiedDate":"2023-09-02"},{"lineNumber":86,"author":{"gitId":"nikele2001"},"content":"        return fullCommand.split(\" \", 2)[1].trim();","lastModifiedDate":"2023-09-02"},{"lineNumber":87,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":88,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":89,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"nikele2001"},"content":"     * A method to parse command that user gave","lastModifiedDate":"2023-08-28"},{"lineNumber":91,"author":{"gitId":"nikele2001"},"content":"     * @param fullCommand string that user gave","lastModifiedDate":"2023-09-02"},{"lineNumber":92,"author":{"gitId":"nikele2001"},"content":"     * @return A Command object representing the command user gives","lastModifiedDate":"2023-08-28"},{"lineNumber":93,"author":{"gitId":"nikele2001"},"content":"     * @throws DukeException when user input does not represent any particular","lastModifiedDate":"2023-08-28"},{"lineNumber":94,"author":{"gitId":"nikele2001"},"content":"     * command","lastModifiedDate":"2023-08-28"},{"lineNumber":95,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":96,"author":{"gitId":"nikele2001"},"content":"    public static Command parse(String fullCommand) throws DukeException {","lastModifiedDate":"2023-08-26"},{"lineNumber":97,"author":{"gitId":"nikele2001"},"content":"        int taskType \u003d Parser.getCommand(fullCommand);","lastModifiedDate":"2023-08-26"},{"lineNumber":98,"author":{"gitId":"nikele2001"},"content":"        switch (taskType) {","lastModifiedDate":"2023-08-26"},{"lineNumber":99,"author":{"gitId":"nikele2001"},"content":"        case 0: {","lastModifiedDate":"2023-08-26"},{"lineNumber":100,"author":{"gitId":"nikele2001"},"content":"            return new ListCommand();","lastModifiedDate":"2023-08-26"},{"lineNumber":101,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":102,"author":{"gitId":"nikele2001"},"content":"        case 1: {","lastModifiedDate":"2023-08-26"},{"lineNumber":103,"author":{"gitId":"nikele2001"},"content":"            Matcher matcher \u003d Pattern.compile(\"mark \").matcher(fullCommand);","lastModifiedDate":"2023-08-26"},{"lineNumber":104,"author":{"gitId":"nikele2001"},"content":"            if (!matcher.find()) {","lastModifiedDate":"2023-08-26"},{"lineNumber":105,"author":{"gitId":"nikele2001"},"content":"                // return error","lastModifiedDate":"2023-08-26"},{"lineNumber":106,"author":{"gitId":"nikele2001"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":107,"author":{"gitId":"nikele2001"},"content":"            int index \u003d Parser.getIndex(fullCommand);","lastModifiedDate":"2023-08-26"},{"lineNumber":108,"author":{"gitId":"nikele2001"},"content":"            return new MarkCommand(index - 1);","lastModifiedDate":"2023-08-26"},{"lineNumber":109,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":110,"author":{"gitId":"nikele2001"},"content":"        case 2: {","lastModifiedDate":"2023-08-26"},{"lineNumber":111,"author":{"gitId":"nikele2001"},"content":"            Matcher matcher \u003d Pattern.compile(\"unmark \").matcher(fullCommand);","lastModifiedDate":"2023-08-26"},{"lineNumber":112,"author":{"gitId":"nikele2001"},"content":"            if (!matcher.find()) {","lastModifiedDate":"2023-08-26"},{"lineNumber":113,"author":{"gitId":"nikele2001"},"content":"                // return error","lastModifiedDate":"2023-08-26"},{"lineNumber":114,"author":{"gitId":"nikele2001"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":115,"author":{"gitId":"nikele2001"},"content":"            int index \u003d Parser.getIndex(fullCommand);","lastModifiedDate":"2023-08-26"},{"lineNumber":116,"author":{"gitId":"nikele2001"},"content":"            return new UnmarkCommand(index - 1);","lastModifiedDate":"2023-08-26"},{"lineNumber":117,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":118,"author":{"gitId":"nikele2001"},"content":"        case 3: {","lastModifiedDate":"2023-08-26"},{"lineNumber":119,"author":{"gitId":"nikele2001"},"content":"            switch (Parser.getTaskType(fullCommand)) {","lastModifiedDate":"2023-08-26"},{"lineNumber":120,"author":{"gitId":"nikele2001"},"content":"                case 0: {","lastModifiedDate":"2023-08-26"},{"lineNumber":121,"author":{"gitId":"nikele2001"},"content":"                    return new AddCommand().new TodoCommand(fullCommand);","lastModifiedDate":"2023-08-26"},{"lineNumber":122,"author":{"gitId":"nikele2001"},"content":"                }","lastModifiedDate":"2023-08-26"},{"lineNumber":123,"author":{"gitId":"nikele2001"},"content":"                case 1: {","lastModifiedDate":"2023-08-26"},{"lineNumber":124,"author":{"gitId":"nikele2001"},"content":"                    return new AddCommand().new DeadlineCommand(fullCommand);","lastModifiedDate":"2023-08-26"},{"lineNumber":125,"author":{"gitId":"nikele2001"},"content":"                }","lastModifiedDate":"2023-08-26"},{"lineNumber":126,"author":{"gitId":"nikele2001"},"content":"                case 2: {","lastModifiedDate":"2023-08-26"},{"lineNumber":127,"author":{"gitId":"nikele2001"},"content":"                    return new AddCommand().new EventCommand(fullCommand);","lastModifiedDate":"2023-08-26"},{"lineNumber":128,"author":{"gitId":"nikele2001"},"content":"                }","lastModifiedDate":"2023-08-26"},{"lineNumber":129,"author":{"gitId":"nikele2001"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":130,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":131,"author":{"gitId":"nikele2001"},"content":"        case 4: {","lastModifiedDate":"2023-08-26"},{"lineNumber":132,"author":{"gitId":"nikele2001"},"content":"            Matcher matcher \u003d Pattern.compile(\"delete \").matcher(fullCommand);","lastModifiedDate":"2023-08-26"},{"lineNumber":133,"author":{"gitId":"nikele2001"},"content":"            if (!matcher.find()) {","lastModifiedDate":"2023-08-26"},{"lineNumber":134,"author":{"gitId":"nikele2001"},"content":"                // return error","lastModifiedDate":"2023-08-26"},{"lineNumber":135,"author":{"gitId":"nikele2001"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":136,"author":{"gitId":"nikele2001"},"content":"            int index \u003d Parser.getIndex(fullCommand);","lastModifiedDate":"2023-08-26"},{"lineNumber":137,"author":{"gitId":"nikele2001"},"content":"            return new DeleteCommand(index - 1);","lastModifiedDate":"2023-08-26"},{"lineNumber":138,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":139,"author":{"gitId":"nikele2001"},"content":"        case 5: {","lastModifiedDate":"2023-08-26"},{"lineNumber":140,"author":{"gitId":"nikele2001"},"content":"            Matcher matcher \u003d Pattern.compile(\"find \").matcher(fullCommand);","lastModifiedDate":"2023-08-28"},{"lineNumber":141,"author":{"gitId":"nikele2001"},"content":"            if (!matcher.find()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":142,"author":{"gitId":"nikele2001"},"content":"                // return error","lastModifiedDate":"2023-08-28"},{"lineNumber":143,"author":{"gitId":"nikele2001"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":144,"author":{"gitId":"nikele2001"},"content":"            String keyString \u003d Parser.getKeyString(fullCommand);","lastModifiedDate":"2023-08-28"},{"lineNumber":145,"author":{"gitId":"nikele2001"},"content":"            return new FindCommand(keyString);","lastModifiedDate":"2023-08-28"},{"lineNumber":146,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":147,"author":{"gitId":"nikele2001"},"content":"        case 6: {","lastModifiedDate":"2023-08-28"},{"lineNumber":148,"author":{"gitId":"nikele2001"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-08-26"},{"lineNumber":149,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":150,"author":{"gitId":"nikele2001"},"content":"        default: {","lastModifiedDate":"2023-08-26"},{"lineNumber":151,"author":{"gitId":"nikele2001"},"content":"            throw new UnknownTaskTypeException();","lastModifiedDate":"2023-08-26"},{"lineNumber":152,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":153,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":154,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":155,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":156,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"nikele2001":156}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"import java.io.File;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":"import java.io.FileOutputStream;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":"import duke.exception.UnknownTaskTypeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"import duke.task.Event;","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"nikele2001"},"content":" * A class that deals with loading tasks from the file and saving tasks in the file","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"nikele2001"},"content":"public class Storage {","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"nikele2001"},"content":"    private String filePath;","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"nikele2001"},"content":"     * A constructor method for the Storage object","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"nikele2001"},"content":"     * @param filePath string representation of file path to database","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"nikele2001"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"nikele2001"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"nikele2001"},"content":"     * A method that returns a Task ArrayList based on stored data. ArrayList ","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"nikele2001"},"content":"     * generated is then used to initialise TaskList object","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"nikele2001"},"content":"     * @return ArrayList\u003cTask\u003e based on stored data","lastModifiedDate":"2023-08-28"},{"lineNumber":34,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"nikele2001"},"content":"    public ArrayList\u003cTask\u003e load() throws Exception {","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"nikele2001"},"content":"        ArrayList\u003cTask\u003e arr \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"nikele2001"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"nikele2001"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"nikele2001"},"content":"            f.createNewFile();","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"nikele2001"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"nikele2001"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-26"},{"lineNumber":42,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":43,"author":{"gitId":"nikele2001"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":44,"author":{"gitId":"nikele2001"},"content":"            Scanner dataSc \u003d new Scanner(f);","lastModifiedDate":"2023-08-26"},{"lineNumber":45,"author":{"gitId":"nikele2001"},"content":"            try {","lastModifiedDate":"2023-08-26"},{"lineNumber":46,"author":{"gitId":"nikele2001"},"content":"                while (dataSc.hasNextLine()) {","lastModifiedDate":"2023-08-26"},{"lineNumber":47,"author":{"gitId":"nikele2001"},"content":"                    String[] task \u003d dataSc.nextLine().trim().split(\"\\\\|\");","lastModifiedDate":"2023-08-26"},{"lineNumber":48,"author":{"gitId":"nikele2001"},"content":"                    task[0] \u003d task[0].trim();","lastModifiedDate":"2023-08-26"},{"lineNumber":49,"author":{"gitId":"nikele2001"},"content":"                    int taskType \u003d task[0].equals(\"T\") ? 0 : task[0].equals(\"D\") ? 1 : 2;","lastModifiedDate":"2023-08-26"},{"lineNumber":50,"author":{"gitId":"nikele2001"},"content":"                    switch (taskType) {","lastModifiedDate":"2023-08-26"},{"lineNumber":51,"author":{"gitId":"nikele2001"},"content":"                    case 0: {","lastModifiedDate":"2023-08-26"},{"lineNumber":52,"author":{"gitId":"nikele2001"},"content":"                        String dataString \u003d \"todo \" + task[2].trim();","lastModifiedDate":"2023-08-26"},{"lineNumber":53,"author":{"gitId":"nikele2001"},"content":"                        arr.add(Todo.of(dataString));","lastModifiedDate":"2023-08-26"},{"lineNumber":54,"author":{"gitId":"nikele2001"},"content":"                        break;","lastModifiedDate":"2023-08-26"},{"lineNumber":55,"author":{"gitId":"nikele2001"},"content":"                    }","lastModifiedDate":"2023-08-26"},{"lineNumber":56,"author":{"gitId":"nikele2001"},"content":"                    case 1: {","lastModifiedDate":"2023-08-26"},{"lineNumber":57,"author":{"gitId":"nikele2001"},"content":"                        String dataString \u003d \"deadline \" + task[2].trim() + \" /by \" + task[3].trim();","lastModifiedDate":"2023-08-26"},{"lineNumber":58,"author":{"gitId":"nikele2001"},"content":"                        arr.add(Deadline.of(dataString));","lastModifiedDate":"2023-08-26"},{"lineNumber":59,"author":{"gitId":"nikele2001"},"content":"                        break;","lastModifiedDate":"2023-08-26"},{"lineNumber":60,"author":{"gitId":"nikele2001"},"content":"                    }","lastModifiedDate":"2023-08-26"},{"lineNumber":61,"author":{"gitId":"nikele2001"},"content":"                    case 2: {","lastModifiedDate":"2023-08-26"},{"lineNumber":62,"author":{"gitId":"nikele2001"},"content":"                        String dataString \u003d \"event \" + task[2].trim() + \" /from \" + task[3].trim() + \" /to \"","lastModifiedDate":"2023-08-26"},{"lineNumber":63,"author":{"gitId":"nikele2001"},"content":"                                + task[4].trim();","lastModifiedDate":"2023-08-26"},{"lineNumber":64,"author":{"gitId":"nikele2001"},"content":"                        arr.add(Event.of(dataString));","lastModifiedDate":"2023-08-26"},{"lineNumber":65,"author":{"gitId":"nikele2001"},"content":"                        break;","lastModifiedDate":"2023-08-26"},{"lineNumber":66,"author":{"gitId":"nikele2001"},"content":"                    }","lastModifiedDate":"2023-08-26"},{"lineNumber":67,"author":{"gitId":"nikele2001"},"content":"                    default: {","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"nikele2001"},"content":"                        throw new UnknownTaskTypeException();","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"nikele2001"},"content":"                    }","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"nikele2001"},"content":"                    }","lastModifiedDate":"2023-08-26"},{"lineNumber":71,"author":{"gitId":"nikele2001"},"content":"                    if (task[1].trim().equals(\"1\")) {","lastModifiedDate":"2023-08-26"},{"lineNumber":72,"author":{"gitId":"nikele2001"},"content":"                        arr.get(arr.size() - 1).markAsDone();","lastModifiedDate":"2023-08-26"},{"lineNumber":73,"author":{"gitId":"nikele2001"},"content":"                    } else {","lastModifiedDate":"2023-08-26"},{"lineNumber":74,"author":{"gitId":"nikele2001"},"content":"                        arr.get(arr.size() - 1).markAsNotDone();","lastModifiedDate":"2023-08-26"},{"lineNumber":75,"author":{"gitId":"nikele2001"},"content":"                    }","lastModifiedDate":"2023-08-26"},{"lineNumber":76,"author":{"gitId":"nikele2001"},"content":"                }","lastModifiedDate":"2023-08-26"},{"lineNumber":77,"author":{"gitId":"nikele2001"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":78,"author":{"gitId":"nikele2001"},"content":"                System.out.println(\"file is corrupted! dieee\");","lastModifiedDate":"2023-08-26"},{"lineNumber":79,"author":{"gitId":"nikele2001"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":80,"author":{"gitId":"nikele2001"},"content":"            dataSc.close();","lastModifiedDate":"2023-08-26"},{"lineNumber":81,"author":{"gitId":"nikele2001"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":82,"author":{"gitId":"nikele2001"},"content":"            throw e;","lastModifiedDate":"2023-08-26"},{"lineNumber":83,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":84,"author":{"gitId":"nikele2001"},"content":"        return arr;","lastModifiedDate":"2023-08-26"},{"lineNumber":85,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":86,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":87,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":88,"author":{"gitId":"nikele2001"},"content":"     * A method to update stored data based on latest user input on the program","lastModifiedDate":"2023-08-28"},{"lineNumber":89,"author":{"gitId":"nikele2001"},"content":"     * @param arr active TaskList object of the program","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":91,"author":{"gitId":"nikele2001"},"content":"    public void update(TaskList arr) {","lastModifiedDate":"2023-08-26"},{"lineNumber":92,"author":{"gitId":"nikele2001"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":93,"author":{"gitId":"nikele2001"},"content":"            FileOutputStream object \u003d new FileOutputStream(this.filePath, false);","lastModifiedDate":"2023-08-26"},{"lineNumber":94,"author":{"gitId":"nikele2001"},"content":"            for (char c : arr.storage().toCharArray()) {","lastModifiedDate":"2023-08-26"},{"lineNumber":95,"author":{"gitId":"nikele2001"},"content":"                object.write(c);","lastModifiedDate":"2023-08-26"},{"lineNumber":96,"author":{"gitId":"nikele2001"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":97,"author":{"gitId":"nikele2001"},"content":"            object.close();","lastModifiedDate":"2023-08-26"},{"lineNumber":98,"author":{"gitId":"nikele2001"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":99,"author":{"gitId":"nikele2001"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-26"},{"lineNumber":100,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":101,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":102,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"nikele2001":102}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":"import duke.exception.IndexOutOfBoundsException;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":" * A class that represents a list that stores tasks inputted by user","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"public class TaskList {","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"    protected ArrayList\u003cTask\u003e taskArr;","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"nikele2001"},"content":"     * A constructor for the TaskList object","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"nikele2001"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"nikele2001"},"content":"        this.taskArr \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"nikele2001"},"content":"     * A constructor for the TaskList object","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"nikele2001"},"content":"     * @param arr ArrayList of Task objects that TaskList object generated contains","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"nikele2001"},"content":"    public TaskList(ArrayList\u003cTask\u003e arr) {","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"nikele2001"},"content":"        this.taskArr \u003d arr;","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"nikele2001"},"content":"     * A method that returns task object at given index of TaskList","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"nikele2001"},"content":"     * @param index index of Task object","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"nikele2001"},"content":"     * @return specified Task object","lastModifiedDate":"2023-08-28"},{"lineNumber":34,"author":{"gitId":"nikele2001"},"content":"     * @throws DukeException when index is out of range","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":36,"author":{"gitId":"nikele2001"},"content":"    public Task getTask(int index) throws DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"nikele2001"},"content":"        try {","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"nikele2001"},"content":"            return this.taskArr.get(index);","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"nikele2001"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"nikele2001"},"content":"            throw new IndexOutOfBoundsException();","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":43,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":44,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"nikele2001"},"content":"     * A method that returns length of TaskList","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"nikele2001"},"content":"     * @return length of TaskList","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"nikele2001"},"content":"    public int length() {","lastModifiedDate":"2023-08-22"},{"lineNumber":49,"author":{"gitId":"nikele2001"},"content":"        return this.taskArr.size();","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":51,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":52,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"nikele2001"},"content":"     * A method that marks specified Task object as done","lastModifiedDate":"2023-08-28"},{"lineNumber":54,"author":{"gitId":"nikele2001"},"content":"     * @params index index of Task object","lastModifiedDate":"2023-08-28"},{"lineNumber":55,"author":{"gitId":"nikele2001"},"content":"     * @throws DukeException when index is out of range","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"nikele2001"},"content":"    public void markTaskAsDone(int index) throws DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"nikele2001"},"content":"        this.getTask(index).markAsDone();","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":60,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":61,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"nikele2001"},"content":"     * A method that unmarks specified Task object as done","lastModifiedDate":"2023-08-28"},{"lineNumber":63,"author":{"gitId":"nikele2001"},"content":"     * @param index index of Task object","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"nikele2001"},"content":"     * @throws DukeException when index is out of range","lastModifiedDate":"2023-08-28"},{"lineNumber":65,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":66,"author":{"gitId":"nikele2001"},"content":"    public void markTaskAsNotDone(int index) throws DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":67,"author":{"gitId":"nikele2001"},"content":"        this.getTask(index).markAsNotDone();","lastModifiedDate":"2023-08-23"},{"lineNumber":68,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":69,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":70,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":71,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"nikele2001"},"content":"     * A method that returns the string representation of a Task object","lastModifiedDate":"2023-08-24"},{"lineNumber":73,"author":{"gitId":"nikele2001"},"content":"     * at specified index","lastModifiedDate":"2023-08-28"},{"lineNumber":74,"author":{"gitId":"nikele2001"},"content":"     * @param index task at given index of TaskList object","lastModifiedDate":"2023-08-28"},{"lineNumber":75,"author":{"gitId":"nikele2001"},"content":"     * @return string representation of the Task object","lastModifiedDate":"2023-08-28"},{"lineNumber":76,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":77,"author":{"gitId":"nikele2001"},"content":"    public String taskToString(int index) {","lastModifiedDate":"2023-08-22"},{"lineNumber":78,"author":{"gitId":"nikele2001"},"content":"        return this.taskArr.get(index).toString();","lastModifiedDate":"2023-08-23"},{"lineNumber":79,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":80,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":81,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"nikele2001"},"content":"     * A method that returns a string representation of the number of","lastModifiedDate":"2023-08-24"},{"lineNumber":83,"author":{"gitId":"nikele2001"},"content":"     * tasks in a TaskList","lastModifiedDate":"2023-08-28"},{"lineNumber":84,"author":{"gitId":"nikele2001"},"content":"     * @return string representation of the number of tasks in the TaskList","lastModifiedDate":"2023-08-28"},{"lineNumber":85,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":86,"author":{"gitId":"nikele2001"},"content":"    public String numTasksToString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":87,"author":{"gitId":"nikele2001"},"content":"        if (this.length() \u003d\u003d 1) {","lastModifiedDate":"2023-08-23"},{"lineNumber":88,"author":{"gitId":"nikele2001"},"content":"            return \" task\";","lastModifiedDate":"2023-08-26"},{"lineNumber":89,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":90,"author":{"gitId":"nikele2001"},"content":"        return \" tasks\";","lastModifiedDate":"2023-08-26"},{"lineNumber":91,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":92,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":93,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":94,"author":{"gitId":"nikele2001"},"content":"     * A method to to add a task to the TaskList","lastModifiedDate":"2023-08-28"},{"lineNumber":95,"author":{"gitId":"nikele2001"},"content":"     * @param task task object to be added","lastModifiedDate":"2023-08-28"},{"lineNumber":96,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":97,"author":{"gitId":"nikele2001"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-08-22"},{"lineNumber":98,"author":{"gitId":"nikele2001"},"content":"        this.taskArr.add(task);","lastModifiedDate":"2023-08-23"},{"lineNumber":99,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":100,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":101,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":102,"author":{"gitId":"nikele2001"},"content":"     * A method to add a task to the TaskList","lastModifiedDate":"2023-08-28"},{"lineNumber":103,"author":{"gitId":"nikele2001"},"content":"     * @param index index of Task object that user wants to delete","lastModifiedDate":"2023-08-28"},{"lineNumber":104,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":105,"author":{"gitId":"nikele2001"},"content":"    public void delete(int index) {","lastModifiedDate":"2023-08-23"},{"lineNumber":106,"author":{"gitId":"nikele2001"},"content":"        this.taskArr.remove(index);","lastModifiedDate":"2023-08-23"},{"lineNumber":107,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":108,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":109,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":110,"author":{"gitId":"nikele2001"},"content":"     * A method to generate a string representing the TaskList in a format that can","lastModifiedDate":"2023-08-28"},{"lineNumber":111,"author":{"gitId":"nikele2001"},"content":"     * be stored in the .txt file","lastModifiedDate":"2023-08-28"},{"lineNumber":112,"author":{"gitId":"nikele2001"},"content":"     * String is passed to the Storage object to be processed","lastModifiedDate":"2023-08-28"},{"lineNumber":113,"author":{"gitId":"nikele2001"},"content":"     * @return string representation of TaskList to be stored","lastModifiedDate":"2023-08-28"},{"lineNumber":114,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":115,"author":{"gitId":"nikele2001"},"content":"    public String storage() {","lastModifiedDate":"2023-08-25"},{"lineNumber":116,"author":{"gitId":"nikele2001"},"content":"        String out \u003d \"\";","lastModifiedDate":"2023-08-25"},{"lineNumber":117,"author":{"gitId":"nikele2001"},"content":"        for (Task task : this.taskArr) {","lastModifiedDate":"2023-08-25"},{"lineNumber":118,"author":{"gitId":"nikele2001"},"content":"            out +\u003d task.toBeStored();","lastModifiedDate":"2023-08-25"},{"lineNumber":119,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":120,"author":{"gitId":"nikele2001"},"content":"        return out;","lastModifiedDate":"2023-08-25"},{"lineNumber":121,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":122,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":123,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":124,"author":{"gitId":"nikele2001"},"content":"     * A method that takes in a string and returns tasklist containing","lastModifiedDate":"2023-09-02"},{"lineNumber":125,"author":{"gitId":"nikele2001"},"content":"     * all tasks such that inputted string is a substring of the tasks\u0027 description","lastModifiedDate":"2023-09-02"},{"lineNumber":126,"author":{"gitId":"nikele2001"},"content":"     * @param keyString string that user wants to compare tasks\u0027 descriptions against","lastModifiedDate":"2023-09-02"},{"lineNumber":127,"author":{"gitId":"nikele2001"},"content":"     * @return TaskList object containing all desired tasks with descriptions being","lastModifiedDate":"2023-09-02"},{"lineNumber":128,"author":{"gitId":"nikele2001"},"content":"     * superstring of inputted string","lastModifiedDate":"2023-09-02"},{"lineNumber":129,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":130,"author":{"gitId":"nikele2001"},"content":"    public TaskList filter(String keyString) {","lastModifiedDate":"2023-08-28"},{"lineNumber":131,"author":{"gitId":"nikele2001"},"content":"        ArrayList\u003cTask\u003e out \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-08-28"},{"lineNumber":132,"author":{"gitId":"nikele2001"},"content":"        for (Task task : this.taskArr) {","lastModifiedDate":"2023-08-28"},{"lineNumber":133,"author":{"gitId":"nikele2001"},"content":"            if (task.isKey(keyString)) {","lastModifiedDate":"2023-08-28"},{"lineNumber":134,"author":{"gitId":"nikele2001"},"content":"                out.add(task);","lastModifiedDate":"2023-08-28"},{"lineNumber":135,"author":{"gitId":"nikele2001"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":136,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":137,"author":{"gitId":"nikele2001"},"content":"        return new TaskList(out);","lastModifiedDate":"2023-08-28"},{"lineNumber":138,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":139,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"nikele2001":139}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":" * A class that handles all the user interactions of the program","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"public class Ui {","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":"    private String lnspace \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":"    private final Scanner sc;","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"    public Ui() {","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"        this.sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"nikele2001"},"content":"     * A method that prints greeting when program starts","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"nikele2001"},"content":"     * @return string representing greeting","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"nikele2001"},"content":"    public String greeting() {","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"nikele2001"},"content":"        String greeting \u003d lnspace + \"\\n\"","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"nikele2001"},"content":"                + \"Hello! I\u0027m Lorem\\n\"","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"nikele2001"},"content":"                + \"What can I do for you?\\n\"","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"nikele2001"},"content":"                + lnspace + \"\\n\";","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"nikele2001"},"content":"        System.out.println(greeting);","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"nikele2001"},"content":"        return greeting;","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"nikele2001"},"content":"     * A method that prints ending when program terminates","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"nikele2001"},"content":"     * @return string representing ending","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"nikele2001"},"content":"    public String ending() {","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"nikele2001"},"content":"        String ending \u003d \"Bye. Hope to see you again soon!\\n\"","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"nikele2001"},"content":"                + lnspace;","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"nikele2001"},"content":"        System.out.println(ending);","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"nikele2001"},"content":"        this.sc.close();","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"nikele2001"},"content":"        return ending;","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"nikele2001"},"content":"     * A method that prints a straight line","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"nikele2001"},"content":"     * @return string representing straight line","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"nikele2001"},"content":"    public String printLine() {","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"nikele2001"},"content":"        System.out.println(lnspace);","lastModifiedDate":"2023-08-26"},{"lineNumber":47,"author":{"gitId":"nikele2001"},"content":"        return lnspace;","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":49,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":50,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"nikele2001"},"content":"     * A method that prints error message when existing data file is not found","lastModifiedDate":"2023-08-28"},{"lineNumber":52,"author":{"gitId":"nikele2001"},"content":"     * @return string representing error message","lastModifiedDate":"2023-08-28"},{"lineNumber":53,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":54,"author":{"gitId":"nikele2001"},"content":"    public String showLoadingError() {","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"nikele2001"},"content":"        String out \u003d \"Existing data not found. Creating new data file tasks.txt found in ./data/ folder.\";","lastModifiedDate":"2023-08-27"},{"lineNumber":56,"author":{"gitId":"nikele2001"},"content":"        System.out.println(out);","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"nikele2001"},"content":"        return out;","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":59,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":60,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"nikele2001"},"content":"     * A method that prints the error message specified","lastModifiedDate":"2023-08-28"},{"lineNumber":62,"author":{"gitId":"nikele2001"},"content":"     * @param message error message that user wants to print","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"nikele2001"},"content":"     * @return string that user inputted as argument","lastModifiedDate":"2023-08-28"},{"lineNumber":64,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":65,"author":{"gitId":"nikele2001"},"content":"    public String showError(String message) {","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"nikele2001"},"content":"        System.out.println(message);","lastModifiedDate":"2023-08-26"},{"lineNumber":67,"author":{"gitId":"nikele2001"},"content":"        return message;","lastModifiedDate":"2023-08-27"},{"lineNumber":68,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":69,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":70,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"nikele2001"},"content":"     * A method that reads the next command that user inputted","lastModifiedDate":"2023-08-28"},{"lineNumber":72,"author":{"gitId":"nikele2001"},"content":"     * @returns string that user inputted","lastModifiedDate":"2023-08-28"},{"lineNumber":73,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":74,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":75,"author":{"gitId":"nikele2001"},"content":"    public String readCommand() {","lastModifiedDate":"2023-08-26"},{"lineNumber":76,"author":{"gitId":"nikele2001"},"content":"        return this.sc.nextLine().trim();","lastModifiedDate":"2023-08-26"},{"lineNumber":77,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":78,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":79,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"nikele2001"},"content":"     * A method that prints message during task addition","lastModifiedDate":"2023-08-28"},{"lineNumber":81,"author":{"gitId":"nikele2001"},"content":"     * @param arr TaskList object that task object is added to","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":83,"author":{"gitId":"nikele2001"},"content":"    public void addTask(TaskList arr) {","lastModifiedDate":"2023-08-26"},{"lineNumber":84,"author":{"gitId":"nikele2001"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-26"},{"lineNumber":85,"author":{"gitId":"nikele2001"},"content":"        System.out.println(arr.taskToString(arr.length() - 1));","lastModifiedDate":"2023-08-26"},{"lineNumber":86,"author":{"gitId":"nikele2001"},"content":"        System.out.println(\"Now you have \" + (arr.length()) + arr.numTasksToString() + \" in the list.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":87,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":88,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":89,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"nikele2001"},"content":"     * A method that prints message during task marking","lastModifiedDate":"2023-08-28"},{"lineNumber":91,"author":{"gitId":"nikele2001"},"content":"     * @param index index of Task object that user marked in specified TaskList object","lastModifiedDate":"2023-09-02"},{"lineNumber":92,"author":{"gitId":"nikele2001"},"content":"     * @param arr TaskList object that contains Task object that user marked","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":94,"author":{"gitId":"nikele2001"},"content":"    public void markTask(int index, TaskList arr) {","lastModifiedDate":"2023-08-26"},{"lineNumber":95,"author":{"gitId":"nikele2001"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-08-26"},{"lineNumber":96,"author":{"gitId":"nikele2001"},"content":"        System.out.println(arr.taskToString(index));","lastModifiedDate":"2023-08-26"},{"lineNumber":97,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":98,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":99,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":100,"author":{"gitId":"nikele2001"},"content":"     * A method that prints message during task unmarking","lastModifiedDate":"2023-08-28"},{"lineNumber":101,"author":{"gitId":"nikele2001"},"content":"     * @param index index of Task object that user unmarked in specified TaskList object","lastModifiedDate":"2023-09-02"},{"lineNumber":102,"author":{"gitId":"nikele2001"},"content":"     * @param arr TaskList object that contains Task object that user unmarked","lastModifiedDate":"2023-09-02"},{"lineNumber":103,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":104,"author":{"gitId":"nikele2001"},"content":"    public void unmarkTask(int index, TaskList arr) {","lastModifiedDate":"2023-08-26"},{"lineNumber":105,"author":{"gitId":"nikele2001"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-08-26"},{"lineNumber":106,"author":{"gitId":"nikele2001"},"content":"        System.out.println(arr.taskToString(index));","lastModifiedDate":"2023-08-26"},{"lineNumber":107,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":108,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":109,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":110,"author":{"gitId":"nikele2001"},"content":"     * A method that prints message when user wants a list of tasks in TaskList object","lastModifiedDate":"2023-09-02"},{"lineNumber":111,"author":{"gitId":"nikele2001"},"content":"     * @param arr TaskList object that contains existing Task objects","lastModifiedDate":"2023-09-02"},{"lineNumber":112,"author":{"gitId":"nikele2001"},"content":"     * @return string that is printed representing list of tasks in specified","lastModifiedDate":"2023-08-28"},{"lineNumber":113,"author":{"gitId":"nikele2001"},"content":"     * TaskList","lastModifiedDate":"2023-08-28"},{"lineNumber":114,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":115,"author":{"gitId":"nikele2001"},"content":"    public String list(TaskList arr) {","lastModifiedDate":"2023-08-28"},{"lineNumber":116,"author":{"gitId":"nikele2001"},"content":"        String out \u003d \"Here are the tasks in your list:\\n\";","lastModifiedDate":"2023-08-28"},{"lineNumber":117,"author":{"gitId":"nikele2001"},"content":"        for (int i \u003d 0; i \u003c arr.length(); i++) {","lastModifiedDate":"2023-08-26"},{"lineNumber":118,"author":{"gitId":"nikele2001"},"content":"            out \u003d out + (i + 1) + \". \" + arr.taskToString(i) + \"\\n\";","lastModifiedDate":"2023-08-28"},{"lineNumber":119,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":120,"author":{"gitId":"nikele2001"},"content":"        System.out.println(out);","lastModifiedDate":"2023-08-28"},{"lineNumber":121,"author":{"gitId":"nikele2001"},"content":"        return out;","lastModifiedDate":"2023-08-28"},{"lineNumber":122,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":123,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":124,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":125,"author":{"gitId":"nikele2001"},"content":"     * A method that finds all existing tasks that contains specified substring and lists it ","lastModifiedDate":"2023-08-28"},{"lineNumber":126,"author":{"gitId":"nikele2001"},"content":"     * @param arr taskList object that contains existing Task objects","lastModifiedDate":"2023-09-02"},{"lineNumber":127,"author":{"gitId":"nikele2001"},"content":"     * @param keyString string that user wants to search for","lastModifiedDate":"2023-09-02"},{"lineNumber":128,"author":{"gitId":"nikele2001"},"content":"     * @return string that lists all tasks with descriptions containing specified substring","lastModifiedDate":"2023-08-28"},{"lineNumber":129,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":130,"author":{"gitId":"nikele2001"},"content":"    public String find(TaskList arr, String keyString) {","lastModifiedDate":"2023-08-28"},{"lineNumber":131,"author":{"gitId":"nikele2001"},"content":"        String out \u003d \"Here are the matching tasks in your list:\\n\";","lastModifiedDate":"2023-08-28"},{"lineNumber":132,"author":{"gitId":"nikele2001"},"content":"        TaskList outTaskList \u003d arr.filter(keyString);","lastModifiedDate":"2023-08-28"},{"lineNumber":133,"author":{"gitId":"nikele2001"},"content":"        if (outTaskList.length() \u003d\u003d 0) {","lastModifiedDate":"2023-08-28"},{"lineNumber":134,"author":{"gitId":"nikele2001"},"content":"            out \u003d \"There are no matching tasks in the list.\";","lastModifiedDate":"2023-08-28"},{"lineNumber":135,"author":{"gitId":"nikele2001"},"content":"            System.out.println(out);","lastModifiedDate":"2023-08-28"},{"lineNumber":136,"author":{"gitId":"nikele2001"},"content":"            return out;","lastModifiedDate":"2023-08-28"},{"lineNumber":137,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":138,"author":{"gitId":"nikele2001"},"content":"        for (int i \u003d 0; i \u003c outTaskList.length(); i++) {","lastModifiedDate":"2023-08-28"},{"lineNumber":139,"author":{"gitId":"nikele2001"},"content":"            out \u003d out + (i + 1) + \". \" + outTaskList.taskToString(i) + \"\\n\";","lastModifiedDate":"2023-08-28"},{"lineNumber":140,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":141,"author":{"gitId":"nikele2001"},"content":"        System.out.println(out);","lastModifiedDate":"2023-08-28"},{"lineNumber":142,"author":{"gitId":"nikele2001"},"content":"        return out;","lastModifiedDate":"2023-08-28"},{"lineNumber":143,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":144,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":145,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":146,"author":{"gitId":"nikele2001"},"content":"     * A method that prints message when user deletes a task in TaskList","lastModifiedDate":"2023-08-28"},{"lineNumber":147,"author":{"gitId":"nikele2001"},"content":"     * @param arr TaskList where deleted Task is contained in","lastModifiedDate":"2023-09-02"},{"lineNumber":148,"author":{"gitId":"nikele2001"},"content":"     * @param index index of Task object that was deleted","lastModifiedDate":"2023-09-02"},{"lineNumber":149,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":150,"author":{"gitId":"nikele2001"},"content":"    public void deleteTask(TaskList arr, int index) {","lastModifiedDate":"2023-08-26"},{"lineNumber":151,"author":{"gitId":"nikele2001"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-08-26"},{"lineNumber":152,"author":{"gitId":"nikele2001"},"content":"        System.out.println(arr.taskToString(index));","lastModifiedDate":"2023-08-26"},{"lineNumber":153,"author":{"gitId":"nikele2001"},"content":"        System.out.println(\"Now you have \" + (arr.length() - 1) + arr.numTasksToString() + \" in the list.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":154,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":155,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"nikele2001":155}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke.command;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"import duke.task.Event;","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":" * A class that represents all task addition commands that user can give","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"nikele2001"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"nikele2001"},"content":"    private Task task;","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"nikele2001"},"content":"    public AddCommand() {","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"nikele2001"},"content":"     * A method that executes the command that user gave","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"nikele2001"},"content":"     * @params tasks TaskList containing all existing Task objects","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"nikele2001"},"content":"     * @params ui UI interface that is used to print messages to the terminak","lastModifiedDate":"2023-08-28"},{"lineNumber":26,"author":{"gitId":"nikele2001"},"content":"     * @params storage Storage object that houses database of the program","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":28,"author":{"gitId":"nikele2001"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"nikele2001"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"nikele2001"},"content":"        tasks.addTask(this.task);","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"nikele2001"},"content":"        ui.addTask(tasks);","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"nikele2001"},"content":"        storage.update(tasks);","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"nikele2001"},"content":"     * A class that represents the user command to add a Todo task","lastModifiedDate":"2023-08-28"},{"lineNumber":37,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":38,"author":{"gitId":"nikele2001"},"content":"    public class TodoCommand extends AddCommand {","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"nikele2001"},"content":"        /**","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"nikele2001"},"content":"         * Constructor for TodoCommand object","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"nikele2001"},"content":"         * @param fullCommand command that user gave","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"nikele2001"},"content":"         * @throws DukeException when command is unable to be processed properly","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"nikele2001"},"content":"         */","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"nikele2001"},"content":"        public TodoCommand(String fullCommand) throws DukeException {","lastModifiedDate":"2023-08-26"},{"lineNumber":45,"author":{"gitId":"nikele2001"},"content":"            try {","lastModifiedDate":"2023-08-26"},{"lineNumber":46,"author":{"gitId":"nikele2001"},"content":"                super.task \u003d Todo.of(fullCommand);","lastModifiedDate":"2023-08-26"},{"lineNumber":47,"author":{"gitId":"nikele2001"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":48,"author":{"gitId":"nikele2001"},"content":"                throw e;","lastModifiedDate":"2023-08-26"},{"lineNumber":49,"author":{"gitId":"nikele2001"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":50,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":51,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":52,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":53,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"nikele2001"},"content":"     * A class that represents the user command to add a Deadline task","lastModifiedDate":"2023-08-28"},{"lineNumber":55,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"nikele2001"},"content":"    public class DeadlineCommand extends AddCommand {","lastModifiedDate":"2023-08-26"},{"lineNumber":57,"author":{"gitId":"nikele2001"},"content":"        /**","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"nikele2001"},"content":"         * Constructor for DeadlineCommand object","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"nikele2001"},"content":"         * @param fullCommand command that user gave","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"nikele2001"},"content":"         * @throws DukeException when command is unable to be processed properly","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"nikele2001"},"content":"         */","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"nikele2001"},"content":"        public DeadlineCommand(String fullCommand) throws DukeException {","lastModifiedDate":"2023-08-26"},{"lineNumber":63,"author":{"gitId":"nikele2001"},"content":"            try {","lastModifiedDate":"2023-08-26"},{"lineNumber":64,"author":{"gitId":"nikele2001"},"content":"                super.task \u003d Deadline.of(fullCommand);","lastModifiedDate":"2023-08-26"},{"lineNumber":65,"author":{"gitId":"nikele2001"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":66,"author":{"gitId":"nikele2001"},"content":"                throw e;","lastModifiedDate":"2023-08-26"},{"lineNumber":67,"author":{"gitId":"nikele2001"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":68,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":69,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":70,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":71,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"nikele2001"},"content":"     * A class that represents the user command to add an Event task","lastModifiedDate":"2023-08-28"},{"lineNumber":73,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":74,"author":{"gitId":"nikele2001"},"content":"    public class EventCommand extends AddCommand {","lastModifiedDate":"2023-08-26"},{"lineNumber":75,"author":{"gitId":"nikele2001"},"content":"        /**","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"nikele2001"},"content":"         * Constructor for EventCommand object","lastModifiedDate":"2023-09-02"},{"lineNumber":77,"author":{"gitId":"nikele2001"},"content":"         * @param fullCommand command that user gave","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"nikele2001"},"content":"         * @throws DukeException when command is unable to be processed properly","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"nikele2001"},"content":"         */","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"nikele2001"},"content":"        public EventCommand(String fullCommand) throws DukeException {","lastModifiedDate":"2023-08-26"},{"lineNumber":81,"author":{"gitId":"nikele2001"},"content":"            try {","lastModifiedDate":"2023-08-26"},{"lineNumber":82,"author":{"gitId":"nikele2001"},"content":"                super.task \u003d Event.of(fullCommand);","lastModifiedDate":"2023-08-26"},{"lineNumber":83,"author":{"gitId":"nikele2001"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":84,"author":{"gitId":"nikele2001"},"content":"                throw e;","lastModifiedDate":"2023-08-26"},{"lineNumber":85,"author":{"gitId":"nikele2001"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":86,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":87,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":88,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"nikele2001":88}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke.command;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":" * An abstract class that represents all commands that user can possibly make","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":" * All commands user can make are subtypes of this class","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"public abstract class Command {","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"    private boolean isExit \u003d false;","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"nikele2001"},"content":"     * An abstract method that executes the command that user gave","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"nikele2001"},"content":"     * @params tasks TaskList containing all existing Task objects","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"nikele2001"},"content":"     * @params ui UI interface that is used to print messages to the terminak","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"nikele2001"},"content":"     * @params storage Storage object that houses database of the program","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"nikele2001"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"nikele2001"},"content":"     * A method that returns true when command is to exit program","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"nikele2001"},"content":"     * @return boolean based on whether user wants to exit program","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"nikele2001"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"nikele2001"},"content":"        return this.isExit;","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"nikele2001":31}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke.command;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":" * A class that represents the user command to delete a task","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"    private int index;","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"    public DeleteCommand(int index) {","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"nikele2001"},"content":"     * A method that executes the command that user gave","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"nikele2001"},"content":"     * @params tasks TaskList containing all existing Task objects","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"nikele2001"},"content":"     * @params ui UI interface that is used to print messages to the terminal","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"nikele2001"},"content":"     * @params storage Storage object that houses database of the program","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"nikele2001"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"nikele2001"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"nikele2001"},"content":"        ui.deleteTask(tasks, index);","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"nikele2001"},"content":"        tasks.delete(index);","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"nikele2001"},"content":"        storage.update(tasks);","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"nikele2001":30}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke.command;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":" * A class that represents the user command to exit the program","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"    public ExitCommand() {","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"    @Override","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"nikele2001"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"nikele2001"},"content":"        return true;","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"nikele2001"},"content":"     * A method that executes the command that user gave","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"nikele2001"},"content":"     * @params tasks TaskList containing all existing Task objects","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"nikele2001"},"content":"     * @params ui UI interface that is used to print messages to the terminal","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"nikele2001"},"content":"     * @params storage Storage object that houses database of the program","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"nikele2001"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"nikele2001":28}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke.command;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":" * A class that represents the user command to find tasks based on specified keyword","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"    private String keyString;","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"    public FindCommand(String keyString) {","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"        this.keyString \u003d keyString;","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":16,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"nikele2001"},"content":"     * A method that executes the command that user gave","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"nikele2001"},"content":"     * @param tasks TaskList containing all existing Task objects","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"nikele2001"},"content":"     * @param ui UI interface that is used to print messages to the terminal","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"nikele2001"},"content":"     * @param storage Storage object that houses database of the program","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"nikele2001"},"content":"    @Override ","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"nikele2001"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"nikele2001"},"content":"        ui.find(tasks, this.keyString);","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":26,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"nikele2001":26}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke.command;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":" * A class that represents the user command to list all existing tasks","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"     * A method that executes the command that user gave","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"     * @params tasks TaskList containing all existing Task objects","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"nikele2001"},"content":"     * @params ui UI interface that is used to print messages to the terminal","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"nikele2001"},"content":"     * @params storage Storage object that houses database of the program","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"nikele2001"},"content":"     * @throws DukeException exception thrown if database cannot be interpreted correctly","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"nikele2001"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"nikele2001"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"nikele2001"},"content":"        ui.list(tasks);","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"nikele2001":23}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke.command;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":" * A class that represents the user command to mark a task","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"    private int index;","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"    public MarkCommand(int index) {","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"nikele2001"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"nikele2001"},"content":"     * A method that executes the command that user gave","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"nikele2001"},"content":"     * @params tasks TaskList containing all existing Task objects","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"nikele2001"},"content":"     * @params ui UI interface that is used to print messages to the terminak","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"nikele2001"},"content":"     * @params storage Storage object that houses database of the program","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"nikele2001"},"content":"     * @throws DukeException exception thrown if marking task is not able to be done, possibly due to erroneous indexing","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"nikele2001"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":26,"author":{"gitId":"nikele2001"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"nikele2001"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"nikele2001"},"content":"            tasks.markTaskAsDone(index);","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"nikele2001"},"content":"            ui.markTask(index, tasks);","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"nikele2001"},"content":"            storage.update(tasks);","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"nikele2001"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"nikele2001"},"content":"            throw e;","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"nikele2001":35}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke.command;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":" * A class that represents the user command to unmark a task","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"    private int index;","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"    public UnmarkCommand(int index) {","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"nikele2001"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"nikele2001"},"content":"     * A method that executes the command that user gave","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"nikele2001"},"content":"     * @params tasks TaskList containing all existing Task objects","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"nikele2001"},"content":"     * @params ui UI interface that is used to print messages to the terminal","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"nikele2001"},"content":"     * @params storage Storage object that houses database of the program","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"nikele2001"},"content":"     * @throws DukeException exception thrown if unmarking task is not able to be done, ","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"nikele2001"},"content":"     * possibly due to erroneous indexing","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":26,"author":{"gitId":"nikele2001"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"nikele2001"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"nikele2001"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"nikele2001"},"content":"            tasks.markTaskAsNotDone(index);","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"nikele2001"},"content":"            ui.unmarkTask(index, tasks);","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"nikele2001"},"content":"            storage.update(tasks);","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"nikele2001"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"nikele2001"},"content":"            throw e;","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"nikele2001":36}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke.exception;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":" * A class that represents all exceptions thrown by the program (other than FileNotFoundException)","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"     * Constructor for exception","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":"     * @param message Error message to be printed onto the console","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"        super(message);","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"nikele2001":14}},{"path":"src/main/java/duke/exception/EmptyDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke.exception;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":" * A class that represents all exceptions thrown when user wants to add tasks but did not input description","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":"public class EmptyDescriptionException extends MissingInformationException {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"     * Constructor for exception","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":"    public EmptyDescriptionException(String taskType) {","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"        super(\"‚òπ OOPS!!! The description of a \" + taskType + \" cannot be empty.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"nikele2001":13}},{"path":"src/main/java/duke/exception/IndexOutOfBoundsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke.exception;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":" * A class that represents all exceptions thrown when user is trying to access tasks in the program, ","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":" * but provided index is out of bounds","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"public class IndexOutOfBoundsException extends DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":"     * Constructor for exception","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"    public IndexOutOfBoundsException() {","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"        super(\"‚òπ OOPS!!! Index provided is invalid.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"nikele2001":14}},{"path":"src/main/java/duke/exception/InvalidDateException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke.exception;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":" * A class that represents all exceptions thrown by the program when ","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":" * dates provided when adding tasks is of the wrong format","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"public class InvalidDateException extends DukeException {","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":"     * Constructor for exception","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"    public InvalidDateException() {","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"        super(\"‚òπ OOPS!!! Date format given is invalid. Please input date in the following format: yyyy-mm-dd\");","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"nikele2001":14}},{"path":"src/main/java/duke/exception/MissingDeadlineException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke.exception;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":" * A class that represents all exceptions thrown by the program when user wants to add","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":" * a Deadline object but did not provide a date to denote the deadline","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"public class MissingDeadlineException extends MissingInformationException {","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":"     * Constructor for exception","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"    public MissingDeadlineException() {","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"        super(\"‚òπ OOPS!!! Deadline is required for task to be created. Denote deadline with a /by.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"nikele2001":14}},{"path":"src/main/java/duke/exception/MissingEndTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke.exception;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":" * A class that represents all exceptions thrown by the program when user wants to add an Event","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":" * object but did not input an end date","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"public class MissingEndTimeException extends MissingInformationException {","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":"     * Constructor for exception","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"    public MissingEndTimeException() {","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"        super(\"‚òπ OOPS!!! end time is required for task to be created. Denote end time with a /to.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"nikele2001":14}},{"path":"src/main/java/duke/exception/MissingInformationException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke.exception;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":" * A class that represents all exceptions thrown by the program when information is expected","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":" * in accordance to user commands, but not provided","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"public abstract class MissingInformationException extends DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":"     * Constructor for exception","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"    public MissingInformationException(String message) {","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"        super(message);","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"nikele2001":15}},{"path":"src/main/java/duke/exception/MissingStartTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke.exception;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":" * A class that represents all exceptions thrown by the program when user wants to add an Event","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":" * object but did not input a start date","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"public class MissingStartTimeException extends MissingInformationException {","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":"     * Constructor for exception","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"    public MissingStartTimeException() {","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"        super(\"‚òπ OOPS!!! Start time is required for task to be created. Denote start time with a /from.\");","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"nikele2001":14}},{"path":"src/main/java/duke/exception/UnknownTaskTypeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke.exception;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":" * A class that represents all exceptions thrown by the program when user inputs a command that","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":" * is not expected","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"public class UnknownTaskTypeException extends DukeException {","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":"     * Constructor for exception","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"    public UnknownTaskTypeException() {","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"        super(\"‚òπ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"nikele2001":14}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke.task;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"import duke.exception.MissingDeadlineException;","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":"import duke.exception.MissingInformationException;","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":" * A class that represents the Deadline class. It is ","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":" * a subtype of the abstract Task class.","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"nikele2001"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"nikele2001"},"content":"    protected LocalDate deadline;","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"nikele2001"},"content":"     * A constructor of the Deadline object","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"nikele2001"},"content":"     * @param description Description of deadline object","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"nikele2001"},"content":"     * @param deadline deadline of Deadline object","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"nikele2001"},"content":"    public Deadline(String description, LocalDate deadline) {","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"nikele2001"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":27,"author":{"gitId":"nikele2001"},"content":"        this.deadline \u003d deadline;","lastModifiedDate":"2023-08-22"},{"lineNumber":28,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":29,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"nikele2001"},"content":"     * Factory method of Deadline class.","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"nikele2001"},"content":"     * String input is guaranteed to start with \"deadline\"","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"nikele2001"},"content":"     * @param input user input from terminal.","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"nikele2001"},"content":"     * @return a Deadline object given the input string.","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"nikele2001"},"content":"     * @throws MissingInformationException due to possibly an empty","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"nikele2001"},"content":"     * description of the Deadline task or a missing /by deadline for","lastModifiedDate":"2023-08-24"},{"lineNumber":37,"author":{"gitId":"nikele2001"},"content":"     * the task.","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":39,"author":{"gitId":"nikele2001"},"content":"    public static Deadline of(String input) throws MissingInformationException {","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"nikele2001"},"content":"        Matcher matcher \u003d Pattern.compile(\"deadline \").matcher(input);","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"nikele2001"},"content":"        matcher.find();","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"nikele2001"},"content":"        String info \u003d input.substring(matcher.end()).trim();","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"nikele2001"},"content":"        matcher \u003d Pattern.compile(\" /by \").matcher(info);","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"nikele2001"},"content":"        if (!matcher.find()) {","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"nikele2001"},"content":"            throw new MissingDeadlineException();","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"nikele2001"},"content":"        String description \u003d info.substring(0, matcher.start()).trim();","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"nikele2001"},"content":"        String deadline \u003d info.substring(matcher.end()).trim();","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"nikele2001"},"content":"        LocalDate deadlineDate \u003d LocalDate.parse(deadline);","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"nikele2001"},"content":"        return new Deadline(description, deadlineDate);","lastModifiedDate":"2023-08-25"},{"lineNumber":51,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":53,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"nikele2001"},"content":"     * A method that returns the string representation of a Deadline object","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"nikele2001"},"content":"     * @return string representation of the Deadline object","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":57,"author":{"gitId":"nikele2001"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":58,"author":{"gitId":"nikele2001"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":59,"author":{"gitId":"nikele2001"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.deadline.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))","lastModifiedDate":"2023-08-25"},{"lineNumber":60,"author":{"gitId":"nikele2001"},"content":"                + \")\";","lastModifiedDate":"2023-08-25"},{"lineNumber":61,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":62,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":63,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"nikele2001"},"content":"     * A method that returns the string representation of a Deadline object","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"nikele2001"},"content":"     * @return string representation of the Deadline object to be stored in the database","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"nikele2001"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":68,"author":{"gitId":"nikele2001"},"content":"    public String toBeStored() {","lastModifiedDate":"2023-08-25"},{"lineNumber":69,"author":{"gitId":"nikele2001"},"content":"        String marked \u003d this.isDone() ? \"1\" : \"0\";","lastModifiedDate":"2023-08-25"},{"lineNumber":70,"author":{"gitId":"nikele2001"},"content":"        return \"D | \" + marked + \" | \" + this.getDescription() + \" | \" + this.deadline + \"\\n\";","lastModifiedDate":"2023-08-25"},{"lineNumber":71,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":72,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"nikele2001":72}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke.task;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":"import duke.exception.MissingEndTimeException;","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":"import duke.exception.MissingInformationException;","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"import duke.exception.MissingStartTimeException;","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"nikele2001"},"content":" * A class that represents the Event class. It is ","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"nikele2001"},"content":" * a subtype of the abstract Task class.","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"nikele2001"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"nikele2001"},"content":"    protected LocalDate start;","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"nikele2001"},"content":"    protected LocalDate end;","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"nikele2001"},"content":"     * A constructor of the Event object","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"nikele2001"},"content":"     * @param description Description of Event object","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"nikele2001"},"content":"     * @param start start date of Event object","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"nikele2001"},"content":"     * @param end end date of Event object","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"nikele2001"},"content":"    public Event(String description, LocalDate start, LocalDate end) {","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"nikele2001"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":31,"author":{"gitId":"nikele2001"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-08-22"},{"lineNumber":32,"author":{"gitId":"nikele2001"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-08-22"},{"lineNumber":33,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":34,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":35,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"nikele2001"},"content":"     * Factory method of Event class.","lastModifiedDate":"2023-08-24"},{"lineNumber":37,"author":{"gitId":"nikele2001"},"content":"     * String input is guaranteed to start with \"event\"","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"nikele2001"},"content":"     * @param input user input from terminal.","lastModifiedDate":"2023-08-24"},{"lineNumber":39,"author":{"gitId":"nikele2001"},"content":"     * @return a Event object given the input string.","lastModifiedDate":"2023-08-24"},{"lineNumber":40,"author":{"gitId":"nikele2001"},"content":"     * @throws MissingInformationException due to possibly an empty description of the ","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"nikele2001"},"content":"     * Event task or a missing /from start time or a missing /to end time for the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":43,"author":{"gitId":"nikele2001"},"content":"    public static Event of(String input) throws DukeException {","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"nikele2001"},"content":"        Matcher matcher \u003d Pattern.compile(\"event \").matcher(input);","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"nikele2001"},"content":"        matcher.find();","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"nikele2001"},"content":"        String info \u003d input.substring(matcher.end()).trim();","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"nikele2001"},"content":"        matcher \u003d Pattern.compile(\" /from \").matcher(info);","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"nikele2001"},"content":"        if (!matcher.find()) {","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"nikele2001"},"content":"            throw new MissingStartTimeException();","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"nikele2001"},"content":"        String description \u003d info.substring(0, matcher.start()).trim();","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"nikele2001"},"content":"        String tmp \u003d info.substring(matcher.end()).trim();","lastModifiedDate":"2023-08-23"},{"lineNumber":53,"author":{"gitId":"nikele2001"},"content":"        matcher \u003d Pattern.compile(\" /to \").matcher(tmp);","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"nikele2001"},"content":"        if (!matcher.find()) {","lastModifiedDate":"2023-08-23"},{"lineNumber":55,"author":{"gitId":"nikele2001"},"content":"            throw new MissingEndTimeException();","lastModifiedDate":"2023-08-23"},{"lineNumber":56,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":57,"author":{"gitId":"nikele2001"},"content":"        String start \u003d tmp.substring(0, matcher.start()).trim();","lastModifiedDate":"2023-08-23"},{"lineNumber":58,"author":{"gitId":"nikele2001"},"content":"        String end \u003d tmp.substring(matcher.end()).trim();","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":60,"author":{"gitId":"nikele2001"},"content":"        LocalDate startDate \u003d LocalDate.parse(start);","lastModifiedDate":"2023-08-25"},{"lineNumber":61,"author":{"gitId":"nikele2001"},"content":"        LocalDate endDate \u003d LocalDate.parse(end);","lastModifiedDate":"2023-08-25"},{"lineNumber":62,"author":{"gitId":"nikele2001"},"content":"        return new Event(description, startDate, endDate);","lastModifiedDate":"2023-08-25"},{"lineNumber":63,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":64,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":65,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":66,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"nikele2001"},"content":"     * A method that returns the string representation of an Event object.","lastModifiedDate":"2023-08-24"},{"lineNumber":68,"author":{"gitId":"nikele2001"},"content":"     * @return string representation of the Event object.","lastModifiedDate":"2023-08-24"},{"lineNumber":69,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":70,"author":{"gitId":"nikele2001"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":71,"author":{"gitId":"nikele2001"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":72,"author":{"gitId":"nikele2001"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + this.start.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))","lastModifiedDate":"2023-08-25"},{"lineNumber":73,"author":{"gitId":"nikele2001"},"content":"                + \" to: \" + this.end.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2023-08-25"},{"lineNumber":74,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":75,"author":{"gitId":"nikele2001"},"content":"    ","lastModifiedDate":"2023-08-25"},{"lineNumber":76,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":77,"author":{"gitId":"nikele2001"},"content":"     * A method that returns the string representation of a Deadline object","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"nikele2001"},"content":"     * @return string representation of the Deadline object to be stored in the database","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"nikele2001"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":81,"author":{"gitId":"nikele2001"},"content":"    public String toBeStored() {","lastModifiedDate":"2023-08-25"},{"lineNumber":82,"author":{"gitId":"nikele2001"},"content":"        String marked \u003d this.isDone() ? \"1\" : \"0\";","lastModifiedDate":"2023-08-25"},{"lineNumber":83,"author":{"gitId":"nikele2001"},"content":"        return \"E | \" + marked + \" | \" + this.getDescription() + \" | \" + this.start + \" | \" + this.end + \"\\n\";","lastModifiedDate":"2023-08-25"},{"lineNumber":84,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":85,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"nikele2001":85}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke.task;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":" * An abstract class that is the supertype of all ","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":" * tasks that program accepts (Todo, Deadline, Event).","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"    protected String description;","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"    protected boolean isDone \u003d false;","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"nikele2001"},"content":"     * Constructor for the Task object","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"nikele2001"},"content":"     * @param description Description of Task object","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"nikele2001"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"nikele2001"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"nikele2001"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"nikele2001"},"content":"     * A method to return the description of the task.","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"nikele2001"},"content":"     * @return description of the task entered by the user.","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"nikele2001"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-22"},{"lineNumber":28,"author":{"gitId":"nikele2001"},"content":"        return this.description;","lastModifiedDate":"2023-08-22"},{"lineNumber":29,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":31,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"nikele2001"},"content":"     * A method that retrieves the marked status of a task.","lastModifiedDate":"2023-08-24"},{"lineNumber":33,"author":{"gitId":"nikele2001"},"content":"     * @return the status of the task based on whether it is marked or not.","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"nikele2001"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-22"},{"lineNumber":36,"author":{"gitId":"nikele2001"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2023-08-24"},{"lineNumber":37,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":38,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":39,"author":{"gitId":"nikele2001"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"nikele2001"},"content":"        return this.isDone;","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"nikele2001"},"content":"     * A method that marks task as done.","lastModifiedDate":"2023-08-24"},{"lineNumber":45,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":46,"author":{"gitId":"nikele2001"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-22"},{"lineNumber":47,"author":{"gitId":"nikele2001"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-22"},{"lineNumber":48,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":49,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":50,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"nikele2001"},"content":"     * A method that marks task as not done","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"nikele2001"},"content":"    public void markAsNotDone() {","lastModifiedDate":"2023-08-22"},{"lineNumber":54,"author":{"gitId":"nikele2001"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":55,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":56,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":57,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"nikele2001"},"content":"     * A method that returns the string representation of a task","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"nikele2001"},"content":"     * @return string representation of the task","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":61,"author":{"gitId":"nikele2001"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":62,"author":{"gitId":"nikele2001"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-08-22"},{"lineNumber":63,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":64,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":65,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"nikele2001"},"content":"     * A method that returns whether the Task object has a description such that","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"nikele2001"},"content":"     * inputted keyString is a substring of the description","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"nikele2001"},"content":"     * @param keyString string to check against task description","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"nikele2001"},"content":"    public boolean isKey(String keyString) {","lastModifiedDate":"2023-08-28"},{"lineNumber":71,"author":{"gitId":"nikele2001"},"content":"        Matcher matcher \u003d Pattern.compile(keyString).matcher(this.getDescription());","lastModifiedDate":"2023-08-28"},{"lineNumber":72,"author":{"gitId":"nikele2001"},"content":"        if (!matcher.find()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":73,"author":{"gitId":"nikele2001"},"content":"            return false;","lastModifiedDate":"2023-08-28"},{"lineNumber":74,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":75,"author":{"gitId":"nikele2001"},"content":"        return true;","lastModifiedDate":"2023-08-28"},{"lineNumber":76,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":77,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"nikele2001"},"content":"     * An abstract method that returns string representation of Task object to be stored","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"nikele2001"},"content":"     * @return String to be stored in the database","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"nikele2001"},"content":"    public abstract String toBeStored();","lastModifiedDate":"2023-08-25"},{"lineNumber":83,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":84,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"nikele2001":84}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke.task;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":"import duke.exception.EmptyDescriptionException;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"import duke.exception.MissingInformationException;","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":" * A class that represents the Event class. It is ","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":" * a subtype of the abstract Task class.","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"nikele2001"},"content":"     * Constructor of the Todo object","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"nikele2001"},"content":"     * @param description description of Todo object","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"nikele2001"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"nikele2001"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"nikele2001"},"content":"     * A factory method of Todo class.","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"nikele2001"},"content":"     * String input is guaranteed to start with \"todo\"","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"nikele2001"},"content":"     * @param input user input from terminal.","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"nikele2001"},"content":"     * @return a Todo object given the input string.","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"nikele2001"},"content":"     * @throws MissingInformationException due to possibly an empty","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"nikele2001"},"content":"     * description of the todo task.","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"nikele2001"},"content":"    public static Todo of(String input) throws MissingInformationException {","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"nikele2001"},"content":"        input \u003d input.trim();","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"nikele2001"},"content":"        if (input.length() \u003c\u003d 0) {","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"nikele2001"},"content":"            throw new EmptyDescriptionException(\"todo\");","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"nikele2001"},"content":"        try {","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"nikele2001"},"content":"            Matcher matcher \u003d Pattern.compile(\"todo \").matcher(input);","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"nikele2001"},"content":"            matcher.find();","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"nikele2001"},"content":"            String description \u003d input.substring(matcher.end()).trim();","lastModifiedDate":"2023-08-23"},{"lineNumber":41,"author":{"gitId":"nikele2001"},"content":"            return new Todo(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"nikele2001"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"nikele2001"},"content":"            throw new EmptyDescriptionException(\"todo\");","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"nikele2001"},"content":"     * A method that returns the string representation of a Todo object.","lastModifiedDate":"2023-08-24"},{"lineNumber":49,"author":{"gitId":"nikele2001"},"content":"     * @return string representation of the Todo object.","lastModifiedDate":"2023-08-24"},{"lineNumber":50,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":51,"author":{"gitId":"nikele2001"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":52,"author":{"gitId":"nikele2001"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":53,"author":{"gitId":"nikele2001"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-22"},{"lineNumber":54,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":55,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":56,"author":{"gitId":"nikele2001"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"nikele2001"},"content":"     * A method that returns the string representation of a Deadline object","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"nikele2001"},"content":"     * @return string representation of the Deadline object to be stored in the database","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"nikele2001"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"nikele2001"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":61,"author":{"gitId":"nikele2001"},"content":"    public String toBeStored() {","lastModifiedDate":"2023-08-25"},{"lineNumber":62,"author":{"gitId":"nikele2001"},"content":"        String marked \u003d this.isDone() ? \"1\" : \"0\";","lastModifiedDate":"2023-08-25"},{"lineNumber":63,"author":{"gitId":"nikele2001"},"content":"        return \"T | \" + marked + \" | \" + this.getDescription() + \"\\n\";","lastModifiedDate":"2023-08-25"},{"lineNumber":64,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":65,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"nikele2001":65}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke; //same package as the class being tested","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"public class TaskListTest {","lastModifiedDate":"2023-08-27"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"    @Test","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"    public void emptyTaskListLengthTest() {","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"nikele2001"},"content":"        TaskList a \u003d new TaskList();","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"nikele2001"},"content":"        TaskList b \u003d new TaskList();","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"nikele2001"},"content":"        assertEquals(a.length(), b.length());","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"nikele2001"},"content":"    @Test","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"nikele2001"},"content":"    public void emptyTaskListTest() {","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"nikele2001"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":23,"author":{"gitId":"nikele2001"},"content":"            Task task \u003d Todo.of(\"todo read book\");","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"nikele2001"},"content":"            TaskList a \u003d new TaskList();","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"nikele2001"},"content":"            TaskList b \u003d new TaskList();","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"nikele2001"},"content":"            a.addTask(task);","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"nikele2001"},"content":"            b.addTask(task);","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"nikele2001"},"content":"            assertEquals(a.getTask(0), b.getTask(0));","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"nikele2001"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"nikele2001"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"nikele2001"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"nikele2001":33}},{"path":"src/test/java/duke/UiTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"package duke; //same package as the class being tested","lastModifiedDate":"2023-08-27"},{"lineNumber":2,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":3,"author":{"gitId":"nikele2001"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"nikele2001"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"nikele2001"},"content":"public class UiTest {","lastModifiedDate":"2023-08-27"},{"lineNumber":8,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"nikele2001"},"content":"    @Test","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"nikele2001"},"content":"    public void greetingTest() {","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"nikele2001"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-08-27"},{"lineNumber":12,"author":{"gitId":"nikele2001"},"content":"        String lnspace \u003d ui.printLine();","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"nikele2001"},"content":"        assertEquals(lnspace + \"\\n\"","lastModifiedDate":"2023-08-27"},{"lineNumber":14,"author":{"gitId":"nikele2001"},"content":"                + \"Hello! I\u0027m Lorem\\n\"","lastModifiedDate":"2023-08-27"},{"lineNumber":15,"author":{"gitId":"nikele2001"},"content":"                + \"What can I do for you?\\n\"","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"nikele2001"},"content":"                + lnspace + \"\\n\", ui.greeting());","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"nikele2001"},"content":"    @Test","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"nikele2001"},"content":"    public void endingTest() {","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"nikele2001"},"content":"        Ui ui \u003d new Ui();","lastModifiedDate":"2023-08-27"},{"lineNumber":22,"author":{"gitId":"nikele2001"},"content":"        String lnspace \u003d ui.printLine();","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"nikele2001"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"nikele2001"},"content":"        assertEquals(\"Bye. Hope to see you again soon!\\n\" + lnspace, ui.ending());","lastModifiedDate":"2023-08-27"},{"lineNumber":25,"author":{"gitId":"nikele2001"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"nikele2001"},"content":"}","lastModifiedDate":"2023-08-27"}],"authorContributionMap":{"nikele2001":26}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"nikele2001"},"content":"todo read book","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"nikele2001":1}}]
