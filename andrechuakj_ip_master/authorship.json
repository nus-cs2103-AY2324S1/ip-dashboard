[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.13\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"andrechuakj"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"andrechuakj"},"content":"checkstyle {","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"andrechuakj"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"andrechuakj"},"content":"}","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"andrechuakj"},"content":"javafx {","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"andrechuakj"},"content":"    version \u003d \"20\"","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"andrechuakj"},"content":"    modules \u003d [ \u0027javafx.controls\u0027 ]","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"andrechuakj"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"andrechuakj":12,"-":41}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"package duke;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"import duke.command.Command;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":" * The main class for the Duke application, a simple task management system.","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":" * Duke allows users to manage their tasks through a command-line interface.","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"andrechuakj"},"content":"    private Storage storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"andrechuakj"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"andrechuakj"},"content":"    private Response response;","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"andrechuakj"},"content":"     * Constructs a new Duke instance.","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"andrechuakj"},"content":"     * @throws DukeException If there is an issue initializing Duke or loading tasks from the data file.","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"andrechuakj"},"content":"    public Duke() {","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"andrechuakj"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"andrechuakj"},"content":"            this.response \u003d new Response();","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"andrechuakj"},"content":"            this.storage \u003d new Storage(\"data/duke.txt\");","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"andrechuakj"},"content":"            this.tasks \u003d storage.loadIntoList(new TaskList());","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"andrechuakj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"andrechuakj"},"content":"            response.printException(e.getMessage());","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":31,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"andrechuakj"},"content":"     * You should have your own function to generate a response to user input.","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"andrechuakj"},"content":"     * Replace this stub with your completed method.","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"andrechuakj"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"andrechuakj"},"content":"        try {","lastModifiedDate":"2023-08-24"},{"lineNumber":37,"author":{"gitId":"andrechuakj"},"content":"            Command c \u003d Parser.parse(input);","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"andrechuakj"},"content":"            return c.execute(tasks, response, storage);","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"andrechuakj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":40,"author":{"gitId":"andrechuakj"},"content":"            return response.printException(e.getMessage());","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":43,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"andrechuakj":42,"-":2}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"package duke;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":" * Custom exception class for Duke application.","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":" * DukeException is thrown when there are errors or exceptions specific to the Duke application.","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"andrechuakj"},"content":"     * Constructs a new DukeException with the specified error message.","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"andrechuakj"},"content":"     * @param message The error message associated with this exception.","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"andrechuakj"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"andrechuakj"},"content":"        super(message);","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"andrechuakj"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"andrechuakj":18}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"package duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"import duke.gui.Main;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":"public class Launcher {","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"andrechuakj"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"andrechuakj"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"andrechuakj":13}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"package duke;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":"import duke.command.Command;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":"import duke.command.DeleteComand;","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"andrechuakj"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"andrechuakj"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"andrechuakj"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"andrechuakj"},"content":"import duke.task.Event;","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"andrechuakj"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"andrechuakj"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"andrechuakj"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"andrechuakj"},"content":" * The Parser class is responsible for parsing user input and converting data strings","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"andrechuakj"},"content":" * into task objects for the Duke application.","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"andrechuakj"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"andrechuakj"},"content":"public class Parser {","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"andrechuakj"},"content":"     * Parses the user input command and returns the corresponding Command object.","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"andrechuakj"},"content":"     * @param strCommand The user input command to be parsed.","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"andrechuakj"},"content":"     * @return A Command object representing the parsed command.","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"andrechuakj"},"content":"     * @throws DukeException If the input command is invalid or contains errors.","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"andrechuakj"},"content":"    public static Command parse(String strCommand) throws DukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"andrechuakj"},"content":"        int firstSpaceIndex \u003d strCommand.indexOf(\" \");","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"andrechuakj"},"content":"        Command command \u003d null;","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"andrechuakj"},"content":"        String commandType \u003d firstSpaceIndex !\u003d -1","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"andrechuakj"},"content":"                ? strCommand.substring(0, firstSpaceIndex)","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"andrechuakj"},"content":"                : strCommand;","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"andrechuakj"},"content":"        ArrayList\u003cString\u003e commandDetailList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"andrechuakj"},"content":"        switch (commandType) {","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"andrechuakj"},"content":"        case \"list\":","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"andrechuakj"},"content":"            commandDetailList.add(strCommand);","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"andrechuakj"},"content":"            command \u003d new ListCommand(commandDetailList);","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"andrechuakj"},"content":"            break;","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"andrechuakj"},"content":"        case \"bye\":","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"andrechuakj"},"content":"            commandDetailList.add(strCommand);","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"andrechuakj"},"content":"            command \u003d new ByeCommand(commandDetailList);","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"andrechuakj"},"content":"            break;","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"andrechuakj"},"content":"        case \"todo\":","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"andrechuakj"},"content":"            if (firstSpaceIndex \u003d\u003d -1 || strCommand.length() \u003c 6) {","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"andrechuakj"},"content":"                throw new DukeException(\"OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"andrechuakj"},"content":"            String todoDesc \u003d strCommand.substring(firstSpaceIndex + 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"andrechuakj"},"content":"            commandDetailList.add(todoDesc);","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"andrechuakj"},"content":"            command \u003d new AddCommand(commandDetailList, \"T\");","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"andrechuakj"},"content":"            break;","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"andrechuakj"},"content":"        case \"event\":","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"andrechuakj"},"content":"            int fromIndex \u003d strCommand.indexOf(\"/from\");","lastModifiedDate":"2023-09-04"},{"lineNumber":58,"author":{"gitId":"andrechuakj"},"content":"            int toIndex \u003d strCommand.indexOf(\"/to\");","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"andrechuakj"},"content":"            if (firstSpaceIndex \u003d\u003d -1 || fromIndex \u003d\u003d -1 || toIndex \u003d\u003d -1 || toIndex \u003c fromIndex) {","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"andrechuakj"},"content":"                throw new DukeException(\"OOPS!!! The format of the event command is invalid.\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":61,"author":{"gitId":"andrechuakj"},"content":"                        + \"Here is an example of a valid format:\"","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"andrechuakj"},"content":"                        + \" event coding /from 2023-01-01 /to 2023-12-31\");","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"andrechuakj"},"content":"            String eventDesc \u003d strCommand.substring(firstSpaceIndex + 1, fromIndex - 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"andrechuakj"},"content":"            String from \u003d strCommand.substring(fromIndex + 6, toIndex - 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":66,"author":{"gitId":"andrechuakj"},"content":"            String to \u003d strCommand.substring(toIndex + 4);","lastModifiedDate":"2023-09-04"},{"lineNumber":67,"author":{"gitId":"andrechuakj"},"content":"            if (eventDesc.isBlank() || from.isBlank() || to.isBlank()) {","lastModifiedDate":"2023-09-04"},{"lineNumber":68,"author":{"gitId":"andrechuakj"},"content":"                throw new DukeException(\"OOPS!!! The format of the event command is invalid.\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":69,"author":{"gitId":"andrechuakj"},"content":"                        + \"Here is an example of a valid format:\"","lastModifiedDate":"2023-09-04"},{"lineNumber":70,"author":{"gitId":"andrechuakj"},"content":"                        + \" event coding /from 2023-01-01 /to 2023-12-31\");","lastModifiedDate":"2023-09-04"},{"lineNumber":71,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":72,"author":{"gitId":"andrechuakj"},"content":"            commandDetailList.add(eventDesc);","lastModifiedDate":"2023-09-04"},{"lineNumber":73,"author":{"gitId":"andrechuakj"},"content":"            commandDetailList.add(from);","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"andrechuakj"},"content":"            commandDetailList.add(to);","lastModifiedDate":"2023-09-04"},{"lineNumber":75,"author":{"gitId":"andrechuakj"},"content":"            command \u003d new AddCommand(commandDetailList, \"E\");","lastModifiedDate":"2023-09-04"},{"lineNumber":76,"author":{"gitId":"andrechuakj"},"content":"            break;","lastModifiedDate":"2023-09-04"},{"lineNumber":77,"author":{"gitId":"andrechuakj"},"content":"        case \"deadline\":","lastModifiedDate":"2023-09-04"},{"lineNumber":78,"author":{"gitId":"andrechuakj"},"content":"            int byIndex \u003d strCommand.indexOf(\"/by\");","lastModifiedDate":"2023-09-04"},{"lineNumber":79,"author":{"gitId":"andrechuakj"},"content":"            if (byIndex \u003d\u003d -1 || firstSpaceIndex \u003d\u003d -1) {","lastModifiedDate":"2023-09-04"},{"lineNumber":80,"author":{"gitId":"andrechuakj"},"content":"                throw new DukeException(\"OOPS!!! The format of the deadline command is invalid.\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":81,"author":{"gitId":"andrechuakj"},"content":"                        + \"Here is an example of a valid format:\"","lastModifiedDate":"2023-09-04"},{"lineNumber":82,"author":{"gitId":"andrechuakj"},"content":"                        + \" deadline coding /by 2023-09-04\");","lastModifiedDate":"2023-09-04"},{"lineNumber":83,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":84,"author":{"gitId":"andrechuakj"},"content":"            String deadlineDesc \u003d strCommand.substring(firstSpaceIndex + 1, byIndex - 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":85,"author":{"gitId":"andrechuakj"},"content":"            String by \u003d strCommand.substring(byIndex + 4);","lastModifiedDate":"2023-09-04"},{"lineNumber":86,"author":{"gitId":"andrechuakj"},"content":"            if (deadlineDesc.isBlank() || by.isBlank()) {","lastModifiedDate":"2023-09-04"},{"lineNumber":87,"author":{"gitId":"andrechuakj"},"content":"                throw new DukeException(\"OOPS!!! The format of the deadline command is invalid.\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":88,"author":{"gitId":"andrechuakj"},"content":"                        + \"Here is an example of a valid format:\"","lastModifiedDate":"2023-09-04"},{"lineNumber":89,"author":{"gitId":"andrechuakj"},"content":"                        + \" deadline coding /by 2023-09-04\");","lastModifiedDate":"2023-09-04"},{"lineNumber":90,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":91,"author":{"gitId":"andrechuakj"},"content":"            commandDetailList.add(deadlineDesc);","lastModifiedDate":"2023-09-04"},{"lineNumber":92,"author":{"gitId":"andrechuakj"},"content":"            commandDetailList.add(by);","lastModifiedDate":"2023-09-04"},{"lineNumber":93,"author":{"gitId":"andrechuakj"},"content":"            command \u003d new AddCommand(commandDetailList, \"D\");","lastModifiedDate":"2023-09-04"},{"lineNumber":94,"author":{"gitId":"andrechuakj"},"content":"            break;","lastModifiedDate":"2023-09-04"},{"lineNumber":95,"author":{"gitId":"andrechuakj"},"content":"        case \"mark\":","lastModifiedDate":"2023-09-04"},{"lineNumber":96,"author":{"gitId":"andrechuakj"},"content":"            if (firstSpaceIndex \u003d\u003d -1 || strCommand.length() \u003c 6) {","lastModifiedDate":"2023-09-04"},{"lineNumber":97,"author":{"gitId":"andrechuakj"},"content":"                throw new DukeException(\"OOPS!!! The task number to mark cannot be empty.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":98,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":99,"author":{"gitId":"andrechuakj"},"content":"            String taskToMark \u003d strCommand.substring(firstSpaceIndex + 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":100,"author":{"gitId":"andrechuakj"},"content":"            if (taskToMark.isBlank()) {","lastModifiedDate":"2023-09-04"},{"lineNumber":101,"author":{"gitId":"andrechuakj"},"content":"                throw new DukeException(\"OOPS!!! The task number to mark cannot be empty.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":102,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":103,"author":{"gitId":"andrechuakj"},"content":"            commandDetailList.add(taskToMark);","lastModifiedDate":"2023-09-04"},{"lineNumber":104,"author":{"gitId":"andrechuakj"},"content":"            command \u003d new MarkCommand(commandDetailList);","lastModifiedDate":"2023-09-04"},{"lineNumber":105,"author":{"gitId":"andrechuakj"},"content":"            break;","lastModifiedDate":"2023-09-04"},{"lineNumber":106,"author":{"gitId":"andrechuakj"},"content":"        case \"unmark\":","lastModifiedDate":"2023-09-04"},{"lineNumber":107,"author":{"gitId":"andrechuakj"},"content":"            if (firstSpaceIndex \u003d\u003d -1 || strCommand.length() \u003c 8) {","lastModifiedDate":"2023-09-04"},{"lineNumber":108,"author":{"gitId":"andrechuakj"},"content":"                throw new DukeException(\"OOPS!!! The task number to unmark cannot be empty.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":109,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":110,"author":{"gitId":"andrechuakj"},"content":"            String taskToUnmark \u003d strCommand.substring(firstSpaceIndex + 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":111,"author":{"gitId":"andrechuakj"},"content":"            if (taskToUnmark.isBlank()) {","lastModifiedDate":"2023-09-04"},{"lineNumber":112,"author":{"gitId":"andrechuakj"},"content":"                throw new DukeException(\"OOPS!!! The task number to unmark cannot be empty.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":113,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":114,"author":{"gitId":"andrechuakj"},"content":"            commandDetailList.add(taskToUnmark);","lastModifiedDate":"2023-09-04"},{"lineNumber":115,"author":{"gitId":"andrechuakj"},"content":"            command \u003d new UnmarkCommand(commandDetailList);","lastModifiedDate":"2023-09-04"},{"lineNumber":116,"author":{"gitId":"andrechuakj"},"content":"            break;","lastModifiedDate":"2023-09-04"},{"lineNumber":117,"author":{"gitId":"andrechuakj"},"content":"        case \"delete\":","lastModifiedDate":"2023-09-04"},{"lineNumber":118,"author":{"gitId":"andrechuakj"},"content":"            if (firstSpaceIndex \u003d\u003d -1 || strCommand.length() \u003c 8) {","lastModifiedDate":"2023-09-04"},{"lineNumber":119,"author":{"gitId":"andrechuakj"},"content":"                throw new DukeException(\"OOPS!!! The task number to delete cannot be empty.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":120,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":121,"author":{"gitId":"andrechuakj"},"content":"            String taskToDelete \u003d strCommand.substring(firstSpaceIndex + 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":122,"author":{"gitId":"andrechuakj"},"content":"            if (taskToDelete.isBlank()) {","lastModifiedDate":"2023-09-04"},{"lineNumber":123,"author":{"gitId":"andrechuakj"},"content":"                throw new DukeException(\"OOPS!!! The task number to delete cannot be empty.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":124,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":125,"author":{"gitId":"andrechuakj"},"content":"            commandDetailList.add(taskToDelete);","lastModifiedDate":"2023-09-04"},{"lineNumber":126,"author":{"gitId":"andrechuakj"},"content":"            command \u003d new DeleteComand(commandDetailList);","lastModifiedDate":"2023-09-04"},{"lineNumber":127,"author":{"gitId":"andrechuakj"},"content":"            break;","lastModifiedDate":"2023-09-04"},{"lineNumber":128,"author":{"gitId":"andrechuakj"},"content":"        case \"find\":","lastModifiedDate":"2023-09-05"},{"lineNumber":129,"author":{"gitId":"andrechuakj"},"content":"            if (firstSpaceIndex \u003d\u003d -1 || strCommand.length() \u003c 8) {","lastModifiedDate":"2023-09-05"},{"lineNumber":130,"author":{"gitId":"andrechuakj"},"content":"                throw new DukeException(\"OOPS!!! The find keyword cannot be empty.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":131,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-05"},{"lineNumber":132,"author":{"gitId":"andrechuakj"},"content":"            String keyword \u003d strCommand.substring(firstSpaceIndex + 1);","lastModifiedDate":"2023-09-05"},{"lineNumber":133,"author":{"gitId":"andrechuakj"},"content":"            if (keyword.isBlank()) {","lastModifiedDate":"2023-09-05"},{"lineNumber":134,"author":{"gitId":"andrechuakj"},"content":"                throw new DukeException(\"OOPS!!! The find keyword cannot be empty.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":135,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-05"},{"lineNumber":136,"author":{"gitId":"andrechuakj"},"content":"            commandDetailList.add(keyword);","lastModifiedDate":"2023-09-05"},{"lineNumber":137,"author":{"gitId":"andrechuakj"},"content":"            command \u003d new FindCommand(commandDetailList);","lastModifiedDate":"2023-09-05"},{"lineNumber":138,"author":{"gitId":"andrechuakj"},"content":"            break;","lastModifiedDate":"2023-09-05"},{"lineNumber":139,"author":{"gitId":"andrechuakj"},"content":"        default:","lastModifiedDate":"2023-09-05"},{"lineNumber":140,"author":{"gitId":"andrechuakj"},"content":"            throw new DukeException(\"OOPS!!! This command is invalid.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":141,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":142,"author":{"gitId":"andrechuakj"},"content":"        return command;","lastModifiedDate":"2023-09-04"},{"lineNumber":143,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":144,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":145,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":146,"author":{"gitId":"andrechuakj"},"content":"     * Converts a data string into a Task object.","lastModifiedDate":"2023-09-05"},{"lineNumber":147,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":148,"author":{"gitId":"andrechuakj"},"content":"     * @param data The data string representing a Task.","lastModifiedDate":"2023-09-05"},{"lineNumber":149,"author":{"gitId":"andrechuakj"},"content":"     * @return A Task object created from the data string.","lastModifiedDate":"2023-09-05"},{"lineNumber":150,"author":{"gitId":"andrechuakj"},"content":"     * @throws DukeException If there are errors in the data string, or it is in an invalid format.","lastModifiedDate":"2023-09-05"},{"lineNumber":151,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":152,"author":{"gitId":"andrechuakj"},"content":"    public static Task dataToTask(String data) throws DukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":153,"author":{"gitId":"andrechuakj"},"content":"        String taskType \u003d data.substring(0, 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":154,"author":{"gitId":"andrechuakj"},"content":"        String taskData \u003d data.substring(4);","lastModifiedDate":"2023-09-04"},{"lineNumber":155,"author":{"gitId":"andrechuakj"},"content":"        Task task \u003d null;","lastModifiedDate":"2023-09-04"},{"lineNumber":156,"author":{"gitId":"andrechuakj"},"content":"        int firstSplitIndex \u003d -1;","lastModifiedDate":"2023-09-04"},{"lineNumber":157,"author":{"gitId":"andrechuakj"},"content":"        int secondSplitIndex \u003d -1;","lastModifiedDate":"2023-09-04"},{"lineNumber":158,"author":{"gitId":"andrechuakj"},"content":"        int thirdSplitIndex \u003d -1;","lastModifiedDate":"2023-09-04"},{"lineNumber":159,"author":{"gitId":"andrechuakj"},"content":"        String desc \u003d \"\";","lastModifiedDate":"2023-09-04"},{"lineNumber":160,"author":{"gitId":"andrechuakj"},"content":"        boolean isDone \u003d false;","lastModifiedDate":"2023-09-04"},{"lineNumber":161,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":162,"author":{"gitId":"andrechuakj"},"content":"        switch (taskType) {","lastModifiedDate":"2023-09-04"},{"lineNumber":163,"author":{"gitId":"andrechuakj"},"content":"        case \"T\":","lastModifiedDate":"2023-09-04"},{"lineNumber":164,"author":{"gitId":"andrechuakj"},"content":"            firstSplitIndex \u003d taskData.indexOf(\"|\");","lastModifiedDate":"2023-09-04"},{"lineNumber":165,"author":{"gitId":"andrechuakj"},"content":"            isDone \u003d taskData.substring(0, firstSplitIndex - 1).equals(\"1\");","lastModifiedDate":"2023-09-04"},{"lineNumber":166,"author":{"gitId":"andrechuakj"},"content":"            desc \u003d taskData.substring(firstSplitIndex + 2);","lastModifiedDate":"2023-09-04"},{"lineNumber":167,"author":{"gitId":"andrechuakj"},"content":"            task \u003d new Todo(desc);","lastModifiedDate":"2023-09-04"},{"lineNumber":168,"author":{"gitId":"andrechuakj"},"content":"            if (isDone) {","lastModifiedDate":"2023-09-04"},{"lineNumber":169,"author":{"gitId":"andrechuakj"},"content":"                task.markDone();","lastModifiedDate":"2023-09-04"},{"lineNumber":170,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":171,"author":{"gitId":"andrechuakj"},"content":"            break;","lastModifiedDate":"2023-09-04"},{"lineNumber":172,"author":{"gitId":"andrechuakj"},"content":"        case \"D\":","lastModifiedDate":"2023-09-04"},{"lineNumber":173,"author":{"gitId":"andrechuakj"},"content":"            firstSplitIndex \u003d taskData.indexOf(\"|\");","lastModifiedDate":"2023-09-04"},{"lineNumber":174,"author":{"gitId":"andrechuakj"},"content":"            secondSplitIndex \u003d taskData.indexOf(\"|\", firstSplitIndex + 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":175,"author":{"gitId":"andrechuakj"},"content":"            isDone \u003d taskData.substring(0, firstSplitIndex - 1).equals(\"1\");","lastModifiedDate":"2023-09-04"},{"lineNumber":176,"author":{"gitId":"andrechuakj"},"content":"            desc \u003d taskData.substring(firstSplitIndex + 2, secondSplitIndex - 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":177,"author":{"gitId":"andrechuakj"},"content":"            String by \u003d taskData.substring(secondSplitIndex + 2);","lastModifiedDate":"2023-09-04"},{"lineNumber":178,"author":{"gitId":"andrechuakj"},"content":"            task \u003d new Deadline(desc, by);","lastModifiedDate":"2023-09-04"},{"lineNumber":179,"author":{"gitId":"andrechuakj"},"content":"            if (isDone) {","lastModifiedDate":"2023-09-04"},{"lineNumber":180,"author":{"gitId":"andrechuakj"},"content":"                task.markDone();","lastModifiedDate":"2023-09-04"},{"lineNumber":181,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":182,"author":{"gitId":"andrechuakj"},"content":"            break;","lastModifiedDate":"2023-09-04"},{"lineNumber":183,"author":{"gitId":"andrechuakj"},"content":"        case \"E\":","lastModifiedDate":"2023-09-04"},{"lineNumber":184,"author":{"gitId":"andrechuakj"},"content":"            firstSplitIndex \u003d taskData.indexOf(\"|\");","lastModifiedDate":"2023-09-04"},{"lineNumber":185,"author":{"gitId":"andrechuakj"},"content":"            secondSplitIndex \u003d taskData.indexOf(\"|\", firstSplitIndex + 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":186,"author":{"gitId":"andrechuakj"},"content":"            thirdSplitIndex \u003d taskData.indexOf(\"|\", secondSplitIndex + 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":187,"author":{"gitId":"andrechuakj"},"content":"            isDone \u003d taskData.substring(0, firstSplitIndex - 1).equals(\"1\");","lastModifiedDate":"2023-09-04"},{"lineNumber":188,"author":{"gitId":"andrechuakj"},"content":"            desc \u003d taskData.substring(firstSplitIndex + 2, secondSplitIndex - 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":189,"author":{"gitId":"andrechuakj"},"content":"            String from \u003d taskData.substring(secondSplitIndex + 2, thirdSplitIndex - 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":190,"author":{"gitId":"andrechuakj"},"content":"            String to \u003d taskData.substring(thirdSplitIndex + 2);","lastModifiedDate":"2023-09-04"},{"lineNumber":191,"author":{"gitId":"andrechuakj"},"content":"            task \u003d new Event(desc, from, to);","lastModifiedDate":"2023-09-04"},{"lineNumber":192,"author":{"gitId":"andrechuakj"},"content":"            if (isDone) {","lastModifiedDate":"2023-09-04"},{"lineNumber":193,"author":{"gitId":"andrechuakj"},"content":"                task.markDone();","lastModifiedDate":"2023-09-04"},{"lineNumber":194,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":195,"author":{"gitId":"andrechuakj"},"content":"            break;","lastModifiedDate":"2023-09-04"},{"lineNumber":196,"author":{"gitId":"andrechuakj"},"content":"        default:","lastModifiedDate":"2023-09-05"},{"lineNumber":197,"author":{"gitId":"andrechuakj"},"content":"            throw new DukeException(\"Wrong task type.\");","lastModifiedDate":"2023-09-05"},{"lineNumber":198,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":199,"author":{"gitId":"andrechuakj"},"content":"        return task;","lastModifiedDate":"2023-09-04"},{"lineNumber":200,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":201,"author":{"gitId":"andrechuakj"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"andrechuakj":201}},{"path":"src/main/java/duke/Response.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"package duke;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":" * The Ui class handles the user interface and interacts with the user in the Duke application.","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"andrechuakj"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":"public class Response {","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"andrechuakj"},"content":"    private static final String LOGO \u003d \" _____   __                 _____ _           _   _           _  ___\\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"andrechuakj"},"content":"            + \"|  _\\\\ \\\\ / /                /  __ \\\\ |         | | | |         | ||_  |\\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"andrechuakj"},"content":"            + \"| |  \\\\ V /___  _   _ _ __  | /  \\\\/ |__   __ _| |_| |__   ___ | |_ | |\\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"andrechuakj"},"content":"            + \"| |   \\\\ // _ \\\\| | | | \u0027__| | |   | \u0027_ \\\\ / _` | __| \u0027_ \\\\ / _ \\\\| __|| |\\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"andrechuakj"},"content":"            + \"| |   | | (_) | |_| | |    | \\\\__/\\\\ | | | (_| | |_| |_) | (_) | |_ | |\\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"andrechuakj"},"content":"            + \"| |_  \\\\_/\\\\___/ \\\\__,_|_|     \\\\____/_| |_|\\\\__,_|\\\\__|_.__/ \\\\___/ \\\\__|| |\\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"andrechuakj"},"content":"            + \"|___|                                                           |___|\\n\";","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"andrechuakj"},"content":"    private static final String greetPhrase \u003d \"\\nHello! I\u0027m\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"andrechuakj"},"content":"            + LOGO","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"andrechuakj"},"content":"            + \"What can I do for you?\\n\"","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"andrechuakj"},"content":"            + \"\\n\";","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"andrechuakj"},"content":"    private static final String sendOffPhrase \u003d \"\\nBye. Hope to see you again soon!\\n\";","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"andrechuakj"},"content":"     * Displays a greeting message.","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"andrechuakj"},"content":"    public String greet() {","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"andrechuakj"},"content":"        return greetPhrase;","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"andrechuakj"},"content":"     * Displays a farewell message.","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"andrechuakj"},"content":"    public String sendOff() {","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"andrechuakj"},"content":"        return sendOffPhrase;","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"andrechuakj"},"content":"     * Displays the list of tasks.","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"andrechuakj"},"content":"     * @param taskList The TaskList to be displayed.","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"andrechuakj"},"content":"    public String printList(TaskList taskList) {","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"andrechuakj"},"content":"        String response \u003d \"\";","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"andrechuakj"},"content":"        if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"andrechuakj"},"content":"            response +\u003d \"There are no tasks on your list.\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"andrechuakj"},"content":"                    + \"Use todo, event or deadline command to add tasks to your list.\\n\";","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"andrechuakj"},"content":"            return response;","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":54,"author":{"gitId":"andrechuakj"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"andrechuakj"},"content":"            response +\u003d Integer.toString(i + 1)","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"andrechuakj"},"content":"                    + \". \"","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"andrechuakj"},"content":"                    + taskList.get(i)","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"andrechuakj"},"content":"                    + \"\\n\";","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"andrechuakj"},"content":"        return response;","lastModifiedDate":"2023-09-07"},{"lineNumber":61,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":64,"author":{"gitId":"andrechuakj"},"content":"     * Displays a message confirming the addition of a task.","lastModifiedDate":"2023-09-05"},{"lineNumber":65,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":66,"author":{"gitId":"andrechuakj"},"content":"     * @param taskAdded The Task that was added.","lastModifiedDate":"2023-09-05"},{"lineNumber":67,"author":{"gitId":"andrechuakj"},"content":"     * @param listSize The size of the task list after the addition.","lastModifiedDate":"2023-09-05"},{"lineNumber":68,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":69,"author":{"gitId":"andrechuakj"},"content":"    public String printTaskAdded(Task taskAdded, int listSize) {","lastModifiedDate":"2023-09-07"},{"lineNumber":70,"author":{"gitId":"andrechuakj"},"content":"        return (\"\\nGot it. I\u0027ve added this task:\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":71,"author":{"gitId":"andrechuakj"},"content":"                + taskAdded","lastModifiedDate":"2023-09-04"},{"lineNumber":72,"author":{"gitId":"andrechuakj"},"content":"                + \"\\nNow you have \" + listSize + \" tasks in the list.\\n\");","lastModifiedDate":"2023-09-07"},{"lineNumber":73,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":75,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":76,"author":{"gitId":"andrechuakj"},"content":"     * Displays a message confirming the marking of a task as done.","lastModifiedDate":"2023-09-05"},{"lineNumber":77,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":78,"author":{"gitId":"andrechuakj"},"content":"     * @param task The Task that was marked as done.","lastModifiedDate":"2023-09-05"},{"lineNumber":79,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":80,"author":{"gitId":"andrechuakj"},"content":"    public String printTaskMarked(Task task) {","lastModifiedDate":"2023-09-07"},{"lineNumber":81,"author":{"gitId":"andrechuakj"},"content":"        return (\"Nice! I\u0027ve marked this task as done:\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":82,"author":{"gitId":"andrechuakj"},"content":"                + task + \"\\n\");","lastModifiedDate":"2023-09-07"},{"lineNumber":83,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":84,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":85,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":86,"author":{"gitId":"andrechuakj"},"content":"     * Displays a message confirming the marking of a task as not done.","lastModifiedDate":"2023-09-05"},{"lineNumber":87,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":88,"author":{"gitId":"andrechuakj"},"content":"     * @param task The Task that was marked as not done.","lastModifiedDate":"2023-09-05"},{"lineNumber":89,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":90,"author":{"gitId":"andrechuakj"},"content":"    public String printTaskUnmarked(Task task) {","lastModifiedDate":"2023-09-07"},{"lineNumber":91,"author":{"gitId":"andrechuakj"},"content":"        return (\"OK, I\u0027ve marked this task as not done yet:\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":92,"author":{"gitId":"andrechuakj"},"content":"                + task + \"\\n\");","lastModifiedDate":"2023-09-07"},{"lineNumber":93,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":94,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":95,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":96,"author":{"gitId":"andrechuakj"},"content":"     * Displays a message confirming the deletion of a task.","lastModifiedDate":"2023-09-05"},{"lineNumber":97,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":98,"author":{"gitId":"andrechuakj"},"content":"     * @param task The Task that was deleted.","lastModifiedDate":"2023-09-05"},{"lineNumber":99,"author":{"gitId":"andrechuakj"},"content":"     * @param listSize The size of the task list after the deletion.","lastModifiedDate":"2023-09-05"},{"lineNumber":100,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":101,"author":{"gitId":"andrechuakj"},"content":"    public String printTaskDeleted(Task task, int listSize) {","lastModifiedDate":"2023-09-07"},{"lineNumber":102,"author":{"gitId":"andrechuakj"},"content":"        return (\"Noted. I\u0027ve removed this task:\\n\"","lastModifiedDate":"2023-09-07"},{"lineNumber":103,"author":{"gitId":"andrechuakj"},"content":"                + task","lastModifiedDate":"2023-09-04"},{"lineNumber":104,"author":{"gitId":"andrechuakj"},"content":"                + \"\\nNow you have \" + listSize + \" tasks in the list.\\n\");","lastModifiedDate":"2023-09-07"},{"lineNumber":105,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":106,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":107,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":108,"author":{"gitId":"andrechuakj"},"content":"     * Displays an exception message to the console.","lastModifiedDate":"2023-09-05"},{"lineNumber":109,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":110,"author":{"gitId":"andrechuakj"},"content":"     * @param message The exception message to be displayed.","lastModifiedDate":"2023-09-05"},{"lineNumber":111,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":112,"author":{"gitId":"andrechuakj"},"content":"    public String printException(String message) {","lastModifiedDate":"2023-09-07"},{"lineNumber":113,"author":{"gitId":"andrechuakj"},"content":"        return (message + \"\\n\");","lastModifiedDate":"2023-09-07"},{"lineNumber":114,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":115,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":116,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":117,"author":{"gitId":"andrechuakj"},"content":"     * Reads a user command from the console.","lastModifiedDate":"2023-09-05"},{"lineNumber":118,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":119,"author":{"gitId":"andrechuakj"},"content":"     * @return The user command entered by the user.","lastModifiedDate":"2023-09-05"},{"lineNumber":120,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":121,"author":{"gitId":"andrechuakj"},"content":"    public String readCommand() {","lastModifiedDate":"2023-09-04"},{"lineNumber":122,"author":{"gitId":"andrechuakj"},"content":"        Scanner input \u003d new Scanner(System.in);","lastModifiedDate":"2023-09-04"},{"lineNumber":123,"author":{"gitId":"andrechuakj"},"content":"        return input.nextLine();","lastModifiedDate":"2023-09-04"},{"lineNumber":124,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":125,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":126,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":127,"author":{"gitId":"andrechuakj"},"content":"     * Prints the list of found tasks to the console.","lastModifiedDate":"2023-09-05"},{"lineNumber":128,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":129,"author":{"gitId":"andrechuakj"},"content":"     * @param taskList The TaskList to be displayed.","lastModifiedDate":"2023-09-05"},{"lineNumber":130,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":131,"author":{"gitId":"andrechuakj"},"content":"    public String printFind(TaskList taskList) {","lastModifiedDate":"2023-09-07"},{"lineNumber":132,"author":{"gitId":"andrechuakj"},"content":"        String response \u003d \"\";","lastModifiedDate":"2023-09-07"},{"lineNumber":133,"author":{"gitId":"andrechuakj"},"content":"        if (taskList.size() \u003d\u003d 0) {","lastModifiedDate":"2023-09-05"},{"lineNumber":134,"author":{"gitId":"andrechuakj"},"content":"            response +\u003d \"There are no matching tasks in your list.\";","lastModifiedDate":"2023-09-07"},{"lineNumber":135,"author":{"gitId":"andrechuakj"},"content":"            return response;","lastModifiedDate":"2023-09-07"},{"lineNumber":136,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":137,"author":{"gitId":"andrechuakj"},"content":"        response +\u003d \"Here are the matching tasks in your list:\";","lastModifiedDate":"2023-09-07"},{"lineNumber":138,"author":{"gitId":"andrechuakj"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2023-09-05"},{"lineNumber":139,"author":{"gitId":"andrechuakj"},"content":"            response +\u003d (Integer.toString(i + 1)","lastModifiedDate":"2023-09-07"},{"lineNumber":140,"author":{"gitId":"andrechuakj"},"content":"                    + \". \"","lastModifiedDate":"2023-09-05"},{"lineNumber":141,"author":{"gitId":"andrechuakj"},"content":"                    + taskList.get(i)","lastModifiedDate":"2023-09-07"},{"lineNumber":142,"author":{"gitId":"andrechuakj"},"content":"                    + \"\\n\");","lastModifiedDate":"2023-09-07"},{"lineNumber":143,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":144,"author":{"gitId":"andrechuakj"},"content":"        return response;","lastModifiedDate":"2023-09-07"},{"lineNumber":145,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":146,"author":{"gitId":"andrechuakj"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"andrechuakj":146}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"package duke;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"import java.io.File;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"andrechuakj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"andrechuakj"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"andrechuakj"},"content":" * The Storage class manages the reading and writing of task data to and from a file for the Duke application.","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"andrechuakj"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"andrechuakj"},"content":"public class Storage {","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"andrechuakj"},"content":"    private String filePath;","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"andrechuakj"},"content":"    private File file;","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"andrechuakj"},"content":"     * Constructs a Storage object with the specified file path.","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"andrechuakj"},"content":"     * @param filePath The file path where task data will be stored.","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"andrechuakj"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"andrechuakj"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"andrechuakj"},"content":"        this.file \u003d new File(filePath);","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"andrechuakj"},"content":"        makeDataDir();","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"andrechuakj"},"content":"        this.createFile();","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"andrechuakj"},"content":"     * Creates the data directory if it does not exist.","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"andrechuakj"},"content":"    private static void makeDataDir() {","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"andrechuakj"},"content":"        File dataDirectory \u003d new File(\"./data/\");","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"andrechuakj"},"content":"        if (!dataDirectory.exists()) {","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"andrechuakj"},"content":"            dataDirectory.mkdirs();","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"andrechuakj"},"content":"     * Creates the data file if it does not exist and returns whether it was successfully created.","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"andrechuakj"},"content":"     * @return True if the file was created successfully, false otherwise.","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"andrechuakj"},"content":"    private boolean createFile() {","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"andrechuakj"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"andrechuakj"},"content":"            return file.createNewFile();","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"andrechuakj"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"andrechuakj"},"content":"            System.out.println(\"An error occurred.\");","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"andrechuakj"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"andrechuakj"},"content":"        return false;","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"andrechuakj"},"content":"     * Loads task data from the file and populates the provided TaskList.","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":59,"author":{"gitId":"andrechuakj"},"content":"     * @param tasks The TaskList to populate with loaded task data.","lastModifiedDate":"2023-09-05"},{"lineNumber":60,"author":{"gitId":"andrechuakj"},"content":"     * @return The TaskList containing loaded tasks.","lastModifiedDate":"2023-09-05"},{"lineNumber":61,"author":{"gitId":"andrechuakj"},"content":"     * @throws DukeException If there is an issue while loading task data.","lastModifiedDate":"2023-09-05"},{"lineNumber":62,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":63,"author":{"gitId":"andrechuakj"},"content":"    public TaskList loadIntoList(TaskList tasks) throws DukeException {","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"andrechuakj"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"andrechuakj"},"content":"            Scanner s \u003d new Scanner(file);","lastModifiedDate":"2023-09-04"},{"lineNumber":66,"author":{"gitId":"andrechuakj"},"content":"            while (s.hasNextLine()) {","lastModifiedDate":"2023-09-04"},{"lineNumber":67,"author":{"gitId":"andrechuakj"},"content":"                String line \u003d s.nextLine();","lastModifiedDate":"2023-09-04"},{"lineNumber":68,"author":{"gitId":"andrechuakj"},"content":"                tasks.add(Parser.dataToTask(line));","lastModifiedDate":"2023-09-04"},{"lineNumber":69,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":70,"author":{"gitId":"andrechuakj"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":71,"author":{"gitId":"andrechuakj"},"content":"            System.out.println(\"File not found. Your Chatbot will start from clean slate.\");","lastModifiedDate":"2023-09-04"},{"lineNumber":72,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":73,"author":{"gitId":"andrechuakj"},"content":"        return tasks;","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":75,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":76,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":77,"author":{"gitId":"andrechuakj"},"content":"     * Writes the tasks from the TaskList to the data file.","lastModifiedDate":"2023-09-05"},{"lineNumber":78,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":79,"author":{"gitId":"andrechuakj"},"content":"     * @param tasks The TaskList to write to the file.","lastModifiedDate":"2023-09-05"},{"lineNumber":80,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":81,"author":{"gitId":"andrechuakj"},"content":"    public void writeListToFile(TaskList tasks) {","lastModifiedDate":"2023-09-04"},{"lineNumber":82,"author":{"gitId":"andrechuakj"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":83,"author":{"gitId":"andrechuakj"},"content":"            FileWriter fw \u003d new FileWriter(file);","lastModifiedDate":"2023-09-04"},{"lineNumber":84,"author":{"gitId":"andrechuakj"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-09-04"},{"lineNumber":85,"author":{"gitId":"andrechuakj"},"content":"                fw.write(tasks.get(i).toData());","lastModifiedDate":"2023-09-04"},{"lineNumber":86,"author":{"gitId":"andrechuakj"},"content":"                fw.write(\"\\n\");","lastModifiedDate":"2023-09-04"},{"lineNumber":87,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":88,"author":{"gitId":"andrechuakj"},"content":"            fw.close();","lastModifiedDate":"2023-09-04"},{"lineNumber":89,"author":{"gitId":"andrechuakj"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":90,"author":{"gitId":"andrechuakj"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-09-04"},{"lineNumber":91,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":92,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":93,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":94,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":95,"author":{"gitId":"andrechuakj"},"content":"     * Appends a single task to the data file.","lastModifiedDate":"2023-09-05"},{"lineNumber":96,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":97,"author":{"gitId":"andrechuakj"},"content":"     * @param task The Task to append to the file.","lastModifiedDate":"2023-09-05"},{"lineNumber":98,"author":{"gitId":"andrechuakj"},"content":"     * @throws IOException If there is an issue while appending to the file.","lastModifiedDate":"2023-09-05"},{"lineNumber":99,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":100,"author":{"gitId":"andrechuakj"},"content":"    public void appendToFile(Task task) throws IOException {","lastModifiedDate":"2023-09-04"},{"lineNumber":101,"author":{"gitId":"andrechuakj"},"content":"        FileWriter fw \u003d new FileWriter(filePath, true);","lastModifiedDate":"2023-09-04"},{"lineNumber":102,"author":{"gitId":"andrechuakj"},"content":"        fw.write(task.toData());","lastModifiedDate":"2023-09-04"},{"lineNumber":103,"author":{"gitId":"andrechuakj"},"content":"        fw.write(\"\\n\");","lastModifiedDate":"2023-09-04"},{"lineNumber":104,"author":{"gitId":"andrechuakj"},"content":"        fw.close();","lastModifiedDate":"2023-09-04"},{"lineNumber":105,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":106,"author":{"gitId":"andrechuakj"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"andrechuakj":106}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"package duke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":"import duke.Response;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"andrechuakj"},"content":"import duke.task.Event;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"andrechuakj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"andrechuakj"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"andrechuakj"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"andrechuakj"},"content":" * The AddCommand class represents a command to add a task.","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"andrechuakj"},"content":" * It is a subclass of the Command class.","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"andrechuakj"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"andrechuakj"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"andrechuakj"},"content":"    private String taskType;","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"andrechuakj"},"content":"     * Constructs an AddCommand object with the provided command details and task type.","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"andrechuakj"},"content":"     * @param commandDetails The list of command details, which may include task information.","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"andrechuakj"},"content":"     * @param taskType       The type of task to add (e.g., \"T\" for Todo, \"D\" for Deadline, \"E\" for Event).","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"andrechuakj"},"content":"    public AddCommand(ArrayList\u003cString\u003e commandDetails, String taskType) {","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"andrechuakj"},"content":"        super(commandDetails);","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"andrechuakj"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"andrechuakj"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"andrechuakj"},"content":"    public String execute(TaskList tasks, Response response, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"andrechuakj"},"content":"        switch (this.taskType) {","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"andrechuakj"},"content":"        case \"T\":","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"andrechuakj"},"content":"            Task newTodo \u003d new Todo(commandDetails.get(0));","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"andrechuakj"},"content":"            tasks.add(newTodo);","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"andrechuakj"},"content":"            try {","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"andrechuakj"},"content":"                storage.appendToFile(newTodo);","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"andrechuakj"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"andrechuakj"},"content":"                throw new DukeException(\"OOPS!!! There is something wrong with the description.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"andrechuakj"},"content":"            return response.printTaskAdded(newTodo, tasks.size());","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"andrechuakj"},"content":"        case \"D\":","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"andrechuakj"},"content":"            Task newDeadline \u003d new Deadline(commandDetails.get(0), commandDetails.get(1));","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"andrechuakj"},"content":"            tasks.add(newDeadline);","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"andrechuakj"},"content":"            try {","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"andrechuakj"},"content":"                storage.appendToFile(newDeadline);","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"andrechuakj"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"andrechuakj"},"content":"                throw new DukeException(\"OOPS!!! There is something wrong with the description.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"andrechuakj"},"content":"            return response.printTaskAdded(newDeadline, tasks.size());","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"andrechuakj"},"content":"        case \"E\":","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"andrechuakj"},"content":"            Task newEvent \u003d new Event(commandDetails.get(0), commandDetails.get(1), commandDetails.get(2));","lastModifiedDate":"2023-09-04"},{"lineNumber":58,"author":{"gitId":"andrechuakj"},"content":"            tasks.add(newEvent);","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"andrechuakj"},"content":"            try {","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"andrechuakj"},"content":"                storage.appendToFile(newEvent);","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"andrechuakj"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"andrechuakj"},"content":"                throw new DukeException(\"OOPS!!! There is something wrong with the description.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":63,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"andrechuakj"},"content":"            return response.printTaskAdded(newEvent, tasks.size());","lastModifiedDate":"2023-09-07"},{"lineNumber":65,"author":{"gitId":"andrechuakj"},"content":"        default:","lastModifiedDate":"2023-09-05"},{"lineNumber":66,"author":{"gitId":"andrechuakj"},"content":"            throw new DukeException(\"OOPS!!! Something went wrong when adding the task.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":67,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":68,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":69,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":70,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":71,"author":{"gitId":"andrechuakj"},"content":"     * Checks if this AddCommand is equal to another object. Two AddCommands are considered equal","lastModifiedDate":"2023-09-05"},{"lineNumber":72,"author":{"gitId":"andrechuakj"},"content":"     * if they have the same command details and task type.","lastModifiedDate":"2023-09-05"},{"lineNumber":73,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":74,"author":{"gitId":"andrechuakj"},"content":"     * @param obj The object to compare to this AddCommand.","lastModifiedDate":"2023-09-05"},{"lineNumber":75,"author":{"gitId":"andrechuakj"},"content":"     * @return True if the objects are equal, false otherwise.","lastModifiedDate":"2023-09-05"},{"lineNumber":76,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":77,"author":{"gitId":"andrechuakj"},"content":"    @Override","lastModifiedDate":"2023-09-05"},{"lineNumber":78,"author":{"gitId":"andrechuakj"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-09-05"},{"lineNumber":79,"author":{"gitId":"andrechuakj"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2023-09-05"},{"lineNumber":80,"author":{"gitId":"andrechuakj"},"content":"            return true;","lastModifiedDate":"2023-09-05"},{"lineNumber":81,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":82,"author":{"gitId":"andrechuakj"},"content":"        if (obj instanceof AddCommand) {","lastModifiedDate":"2023-09-05"},{"lineNumber":83,"author":{"gitId":"andrechuakj"},"content":"            AddCommand other \u003d (AddCommand) obj;","lastModifiedDate":"2023-09-05"},{"lineNumber":84,"author":{"gitId":"andrechuakj"},"content":"            if (this.commandDetails \u003d\u003d null || other.commandDetails \u003d\u003d null) {","lastModifiedDate":"2023-09-05"},{"lineNumber":85,"author":{"gitId":"andrechuakj"},"content":"                return false;","lastModifiedDate":"2023-09-05"},{"lineNumber":86,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-05"},{"lineNumber":87,"author":{"gitId":"andrechuakj"},"content":"            return this.commandDetails.equals(other.commandDetails) \u0026\u0026 this.taskType.equals(other.taskType);","lastModifiedDate":"2023-09-05"},{"lineNumber":88,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":89,"author":{"gitId":"andrechuakj"},"content":"        return false;","lastModifiedDate":"2023-09-05"},{"lineNumber":90,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":91,"author":{"gitId":"andrechuakj"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"andrechuakj":91}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"package duke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":"import duke.Response;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"andrechuakj"},"content":" * The ByeCommand class represents a command to exit.","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":" * It is a subclass of the Command class.","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"andrechuakj"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"andrechuakj"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"andrechuakj"},"content":"     * Constructs a ByeCommand object with the provided command details.","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"andrechuakj"},"content":"     * @param commandDetails The list of command details (not used in this command).","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"andrechuakj"},"content":"    public ByeCommand(ArrayList\u003cString\u003e commandDetails) {","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"andrechuakj"},"content":"        super(commandDetails);","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"andrechuakj"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"andrechuakj"},"content":"    public String execute(TaskList tasks, Response response, Storage storage) {","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"andrechuakj"},"content":"        return \"\";","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"andrechuakj"},"content":"     * Indicates that this command is an exit command.","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"andrechuakj"},"content":"     * @return True, indicating that this command is an exit command.","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"andrechuakj"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"andrechuakj"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"andrechuakj"},"content":"        return true;","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"andrechuakj"},"content":"     * Checks if this ByeCommand is equal to another object. Two ByeCommands are considered equal","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"andrechuakj"},"content":"     * if they have the same command details (not used in this command).","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"andrechuakj"},"content":"     * @param obj The object to compare to this ByeCommand.","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"andrechuakj"},"content":"     * @return True if the objects are equal, false otherwise.","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"andrechuakj"},"content":"    @Override","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"andrechuakj"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"andrechuakj"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"andrechuakj"},"content":"            return true;","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"andrechuakj"},"content":"        if (obj instanceof ByeCommand) {","lastModifiedDate":"2023-09-05"},{"lineNumber":52,"author":{"gitId":"andrechuakj"},"content":"            ByeCommand other \u003d (ByeCommand) obj;","lastModifiedDate":"2023-09-05"},{"lineNumber":53,"author":{"gitId":"andrechuakj"},"content":"            if (this.commandDetails \u003d\u003d null || other.commandDetails \u003d\u003d null) {","lastModifiedDate":"2023-09-05"},{"lineNumber":54,"author":{"gitId":"andrechuakj"},"content":"                return false;","lastModifiedDate":"2023-09-05"},{"lineNumber":55,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-05"},{"lineNumber":56,"author":{"gitId":"andrechuakj"},"content":"            return this.commandDetails.equals(other.commandDetails);","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"andrechuakj"},"content":"        return false;","lastModifiedDate":"2023-09-05"},{"lineNumber":59,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":60,"author":{"gitId":"andrechuakj"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"andrechuakj":60}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"package duke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":"import duke.Response;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"andrechuakj"},"content":" * The Command abstract class represents a generic command.","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"andrechuakj"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"andrechuakj"},"content":"public abstract class Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"andrechuakj"},"content":"    protected ArrayList\u003cString\u003e commandDetails;","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"andrechuakj"},"content":"     * Constructs a Command object with the provided command details.","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"andrechuakj"},"content":"     * @param commandDetails The list of command details, if any, required for command execution.","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"andrechuakj"},"content":"    public Command(ArrayList\u003cString\u003e commandDetails) {","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"andrechuakj"},"content":"        this.commandDetails \u003d commandDetails;","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"andrechuakj"},"content":"     * Executes the command with the given task list, user interface, and storage.","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"andrechuakj"},"content":"     * @param tasks The TaskList to manipulate, if needed, during command execution.","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"andrechuakj"},"content":"     * @param response The Response object to generate response.","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"andrechuakj"},"content":"     * @param storage The Storage object to read from or write to data storage.","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"andrechuakj"},"content":"     * @throws DukeException If there is an issue during command execution.","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"andrechuakj"},"content":"    public abstract String execute(TaskList tasks, Response response, Storage storage) throws DukeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"andrechuakj"},"content":"     * Checks if the command is an exit command.","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"andrechuakj"},"content":"     * @return True if the command is an exit command, false otherwise.","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"andrechuakj"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"andrechuakj"},"content":"        return false;","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"andrechuakj"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"andrechuakj":44}},{"path":"src/main/java/duke/command/DeleteComand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"package duke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":"import duke.Response;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"andrechuakj"},"content":" * The DeleteCommand class represents a command to delete a task.","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"andrechuakj"},"content":" * It is a subclass of the Command class.","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"andrechuakj"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"andrechuakj"},"content":"public class DeleteComand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"andrechuakj"},"content":"     * Constructs a DeleteCommand object with the provided command details.","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"andrechuakj"},"content":"     * @param commandDetails The list of command details, which includes the task number to delete.","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"andrechuakj"},"content":"    public DeleteComand(ArrayList\u003cString\u003e commandDetails) {","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"andrechuakj"},"content":"        super(commandDetails);","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"andrechuakj"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"andrechuakj"},"content":"    public String execute(TaskList tasks, Response response, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"andrechuakj"},"content":"        int taskNumber \u003d 0;","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"andrechuakj"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"andrechuakj"},"content":"            taskNumber \u003d Integer.parseInt(commandDetails.get(0));","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"andrechuakj"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"andrechuakj"},"content":"            throw new DukeException(\"OOPS!!! The task number cannot be parsed.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"andrechuakj"},"content":"        if (taskNumber \u003e tasks.size()) {","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"andrechuakj"},"content":"            throw new DukeException(\"OOPS!!! The task number is out of range.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"andrechuakj"},"content":"        Task deletedTask \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"andrechuakj"},"content":"        tasks.remove(taskNumber - 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"andrechuakj"},"content":"        storage.writeListToFile(tasks);","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"andrechuakj"},"content":"        return response.printTaskDeleted(deletedTask, tasks.size());","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"andrechuakj"},"content":"     * Checks if this DeleteCommand is equal to another object. Two DeleteCommands are considered equal","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"andrechuakj"},"content":"     * if they have the same command details.","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"andrechuakj"},"content":"     * @param obj The object to compare to this DeleteCommand.","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"andrechuakj"},"content":"     * @return True if the objects are equal, false otherwise.","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"andrechuakj"},"content":"    @Override","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"andrechuakj"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-09-05"},{"lineNumber":52,"author":{"gitId":"andrechuakj"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2023-09-05"},{"lineNumber":53,"author":{"gitId":"andrechuakj"},"content":"            return true;","lastModifiedDate":"2023-09-05"},{"lineNumber":54,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":55,"author":{"gitId":"andrechuakj"},"content":"        if (obj instanceof DeleteComand) {","lastModifiedDate":"2023-09-05"},{"lineNumber":56,"author":{"gitId":"andrechuakj"},"content":"            DeleteComand other \u003d (DeleteComand) obj;","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"andrechuakj"},"content":"            if (this.commandDetails \u003d\u003d null || other.commandDetails \u003d\u003d null) {","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"andrechuakj"},"content":"                return false;","lastModifiedDate":"2023-09-05"},{"lineNumber":59,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-05"},{"lineNumber":60,"author":{"gitId":"andrechuakj"},"content":"            return this.commandDetails.equals(other.commandDetails);","lastModifiedDate":"2023-09-05"},{"lineNumber":61,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":62,"author":{"gitId":"andrechuakj"},"content":"        return false;","lastModifiedDate":"2023-09-05"},{"lineNumber":63,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":64,"author":{"gitId":"andrechuakj"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"andrechuakj":64}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"package duke.command;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":"import duke.Response;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"andrechuakj"},"content":" * The FindCommand class represents a command to find tasks based on a keyword.","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"andrechuakj"},"content":" * It is a subclass of the Command class.","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"andrechuakj"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"andrechuakj"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"andrechuakj"},"content":"    public FindCommand(ArrayList\u003cString\u003e commandDetails) {","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"andrechuakj"},"content":"        super(commandDetails);","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"andrechuakj"},"content":"    @Override","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"andrechuakj"},"content":"    public String execute(TaskList tasks, Response response, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"andrechuakj"},"content":"        TaskList resultList \u003d new TaskList();","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"andrechuakj"},"content":"        String keyword \u003d commandDetails.get(0);","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"andrechuakj"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"andrechuakj"},"content":"            Task cur \u003d tasks.get(i);","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"andrechuakj"},"content":"            if (tasks.get(i).getDescription().indexOf(keyword) !\u003d -1) {","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"andrechuakj"},"content":"                resultList.add(cur);","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"andrechuakj"},"content":"        return response.printFind(resultList);","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"andrechuakj"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"andrechuakj":33}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"package duke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":"import duke.Response;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"andrechuakj"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":" * The ListCommand class represents a command to list all tasks.","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"andrechuakj"},"content":" * It is a subclass of the Command class.","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"andrechuakj"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"andrechuakj"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"andrechuakj"},"content":"     * Constructs a ListCommand object with the provided command details.","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"andrechuakj"},"content":"     * @param commandDetails The list of command details (not used in this command).","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"andrechuakj"},"content":"    public ListCommand(ArrayList\u003cString\u003e commandDetails) {","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"andrechuakj"},"content":"        super(commandDetails);","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"andrechuakj"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"andrechuakj"},"content":"    public String execute(TaskList tasks, Response response, Storage storage) {","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"andrechuakj"},"content":"        return response.printList(tasks);","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"andrechuakj"},"content":"     * Checks if this ListCommand is equal to another object. Two ListCommands are considered equal","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"andrechuakj"},"content":"     * if they have the same command details (not used in this command).","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"andrechuakj"},"content":"     * @param obj The object to compare to this ListCommand.","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"andrechuakj"},"content":"     * @return True if the objects are equal, false otherwise.","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"andrechuakj"},"content":"    @Override","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"andrechuakj"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"andrechuakj"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"andrechuakj"},"content":"            return true;","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"andrechuakj"},"content":"        if (obj instanceof ListCommand) {","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"andrechuakj"},"content":"            ListCommand other \u003d (ListCommand) obj;","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"andrechuakj"},"content":"            if (this.commandDetails \u003d\u003d null || other.commandDetails \u003d\u003d null) {","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"andrechuakj"},"content":"                return false;","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"andrechuakj"},"content":"            return this.commandDetails.equals(other.commandDetails);","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"andrechuakj"},"content":"        return false;","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"andrechuakj"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"andrechuakj":51}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"package duke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":"import duke.Response;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"andrechuakj"},"content":" * The MarkCommand class represents a command to mark a task as done.","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"andrechuakj"},"content":" * It is a subclass of the Command class.","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"andrechuakj"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"andrechuakj"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"andrechuakj"},"content":"     * Constructs a MarkCommand object with the provided command details.","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"andrechuakj"},"content":"     * @param commandDetails The list of command details, which includes the task number to mark as done.","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"andrechuakj"},"content":"    public MarkCommand(ArrayList\u003cString\u003e commandDetails) {","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"andrechuakj"},"content":"        super(commandDetails);","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"andrechuakj"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"andrechuakj"},"content":"    public String execute(TaskList tasks, Response response, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"andrechuakj"},"content":"        int taskNumber \u003d 0;","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"andrechuakj"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"andrechuakj"},"content":"            taskNumber \u003d Integer.parseInt(commandDetails.get(0));","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"andrechuakj"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"andrechuakj"},"content":"            throw new DukeException(\"OOPS!!! The task number cannot be parsed.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"andrechuakj"},"content":"        if (taskNumber \u003e tasks.size()) {","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"andrechuakj"},"content":"            throw new DukeException(\"OOPS!!! The task number is out of range.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"andrechuakj"},"content":"        Task markedTask \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"andrechuakj"},"content":"        markedTask.markAsDone();","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"andrechuakj"},"content":"        storage.writeListToFile(tasks);","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"andrechuakj"},"content":"        return response.printTaskMarked(markedTask);","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"andrechuakj"},"content":"     * Checks if this MarkCommand is equal to another object. Two MarkCommands are considered equal","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"andrechuakj"},"content":"     * if they have the same command details.","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"andrechuakj"},"content":"     * @param obj The object to compare to this MarkCommand.","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"andrechuakj"},"content":"     * @return True if the objects are equal, false otherwise.","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"andrechuakj"},"content":"    @Override","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"andrechuakj"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-09-05"},{"lineNumber":52,"author":{"gitId":"andrechuakj"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2023-09-05"},{"lineNumber":53,"author":{"gitId":"andrechuakj"},"content":"            return true;","lastModifiedDate":"2023-09-05"},{"lineNumber":54,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":55,"author":{"gitId":"andrechuakj"},"content":"        if (obj instanceof MarkCommand) {","lastModifiedDate":"2023-09-05"},{"lineNumber":56,"author":{"gitId":"andrechuakj"},"content":"            MarkCommand other \u003d (MarkCommand) obj;","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"andrechuakj"},"content":"            if (this.commandDetails \u003d\u003d null || other.commandDetails \u003d\u003d null) {","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"andrechuakj"},"content":"                return false;","lastModifiedDate":"2023-09-05"},{"lineNumber":59,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-05"},{"lineNumber":60,"author":{"gitId":"andrechuakj"},"content":"            return this.commandDetails.equals(other.commandDetails);","lastModifiedDate":"2023-09-05"},{"lineNumber":61,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":62,"author":{"gitId":"andrechuakj"},"content":"        return false;","lastModifiedDate":"2023-09-05"},{"lineNumber":63,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":64,"author":{"gitId":"andrechuakj"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"andrechuakj":64}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"package duke.command;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":"import duke.Response;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"andrechuakj"},"content":" * The UnmarkCommand class represents a command to mark a task as not done.","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"andrechuakj"},"content":" * It is a subclass of the Command class.","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"andrechuakj"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"andrechuakj"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"andrechuakj"},"content":"     * Constructs an UnmarkCommand object with the provided command details.","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"andrechuakj"},"content":"     * @param commandDetails The list of command details, which includes the task number to mark as not done.","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"andrechuakj"},"content":"    public UnmarkCommand(ArrayList\u003cString\u003e commandDetails) {","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"andrechuakj"},"content":"        super(commandDetails);","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"andrechuakj"},"content":"    @Override","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"andrechuakj"},"content":"    public String execute(TaskList tasks, Response response, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"andrechuakj"},"content":"        int taskNumber \u003d 0;","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"andrechuakj"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"andrechuakj"},"content":"            taskNumber \u003d Integer.parseInt(commandDetails.get(0));","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"andrechuakj"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"andrechuakj"},"content":"            throw new DukeException(\"OOPS!!! The task number cannot be parsed.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"andrechuakj"},"content":"        if (taskNumber \u003e tasks.size()) {","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"andrechuakj"},"content":"            throw new DukeException(\"OOPS!!! The task number is out of range.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"andrechuakj"},"content":"        Task unmarkedTask \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"andrechuakj"},"content":"        unmarkedTask.markAsNotDone();","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"andrechuakj"},"content":"        storage.writeListToFile(tasks);","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"andrechuakj"},"content":"        return response.printTaskMarked(unmarkedTask);","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"andrechuakj"},"content":"     * Checks if this UnmarkCommand is equal to another object. Two UnmarkCommands are considered equal","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"andrechuakj"},"content":"     * if they have the same command details.","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"andrechuakj"},"content":"     * @param obj The object to compare to this UnmarkCommand.","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"andrechuakj"},"content":"     * @return True if the objects are equal, false otherwise.","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"andrechuakj"},"content":"    @Override","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"andrechuakj"},"content":"    public boolean equals(Object obj) {","lastModifiedDate":"2023-09-05"},{"lineNumber":52,"author":{"gitId":"andrechuakj"},"content":"        if (obj \u003d\u003d this) {","lastModifiedDate":"2023-09-05"},{"lineNumber":53,"author":{"gitId":"andrechuakj"},"content":"            return true;","lastModifiedDate":"2023-09-05"},{"lineNumber":54,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":55,"author":{"gitId":"andrechuakj"},"content":"        if (obj instanceof UnmarkCommand) {","lastModifiedDate":"2023-09-05"},{"lineNumber":56,"author":{"gitId":"andrechuakj"},"content":"            UnmarkCommand other \u003d (UnmarkCommand) obj;","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"andrechuakj"},"content":"            if (this.commandDetails \u003d\u003d null || other.commandDetails \u003d\u003d null) {","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"andrechuakj"},"content":"                return false;","lastModifiedDate":"2023-09-05"},{"lineNumber":59,"author":{"gitId":"andrechuakj"},"content":"            }","lastModifiedDate":"2023-09-05"},{"lineNumber":60,"author":{"gitId":"andrechuakj"},"content":"            return this.commandDetails.equals(other.commandDetails);","lastModifiedDate":"2023-09-05"},{"lineNumber":61,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":62,"author":{"gitId":"andrechuakj"},"content":"        return false;","lastModifiedDate":"2023-09-05"},{"lineNumber":63,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":64,"author":{"gitId":"andrechuakj"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"andrechuakj":64}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"package duke.gui;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"andrechuakj"},"content":"import javafx.geometry.Insets;","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"andrechuakj"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"andrechuakj"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"andrechuakj"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"andrechuakj"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"andrechuakj"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"andrechuakj"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"andrechuakj"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"andrechuakj"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"andrechuakj"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"andrechuakj"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"andrechuakj"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"andrechuakj"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"andrechuakj"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"andrechuakj"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"andrechuakj"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"andrechuakj"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"andrechuakj"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"andrechuakj"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"andrechuakj"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"andrechuakj"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"andrechuakj"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"andrechuakj"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"andrechuakj"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"andrechuakj"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"andrechuakj"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"andrechuakj"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"andrechuakj"},"content":"        displayPicture.setClip(new Circle(50, 50, 50));","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"andrechuakj"},"content":"        this.setStyle(\"-fx-background-color: lightblue;\");","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"andrechuakj"},"content":"        this.setAlignment(Pos.TOP_RIGHT);","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"andrechuakj"},"content":"        this.setPadding(new Insets(10));","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"andrechuakj"},"content":"        HBox.setMargin(displayPicture, new Insets(0, 0, 0, 10));","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"andrechuakj"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"andrechuakj"},"content":"    private void flip() {","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"andrechuakj"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"andrechuakj"},"content":"        HBox.setMargin(displayPicture, new Insets(0, 10, 0, 0));","lastModifiedDate":"2023-09-07"},{"lineNumber":55,"author":{"gitId":"andrechuakj"},"content":"        this.setStyle(\"-fx-background-color: lightgreen;\");","lastModifiedDate":"2023-09-07"},{"lineNumber":56,"author":{"gitId":"andrechuakj"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-07"},{"lineNumber":57,"author":{"gitId":"andrechuakj"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-07"},{"lineNumber":58,"author":{"gitId":"andrechuakj"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-07"},{"lineNumber":59,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":60,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":61,"author":{"gitId":"andrechuakj"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-07"},{"lineNumber":62,"author":{"gitId":"andrechuakj"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-09-07"},{"lineNumber":63,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":64,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":65,"author":{"gitId":"andrechuakj"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-09-07"},{"lineNumber":66,"author":{"gitId":"andrechuakj"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-07"},{"lineNumber":67,"author":{"gitId":"andrechuakj"},"content":"        db.flip();","lastModifiedDate":"2023-09-07"},{"lineNumber":68,"author":{"gitId":"andrechuakj"},"content":"        return db;","lastModifiedDate":"2023-09-07"},{"lineNumber":69,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":70,"author":{"gitId":"andrechuakj"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"andrechuakj":70}},{"path":"src/main/java/duke/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"package duke.gui;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"andrechuakj"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"andrechuakj"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"andrechuakj"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"andrechuakj"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"andrechuakj"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"andrechuakj"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"andrechuakj"},"content":"    @Override","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"andrechuakj"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"andrechuakj"},"content":"        try {","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"andrechuakj"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"andrechuakj"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"andrechuakj"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"andrechuakj"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"andrechuakj"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"andrechuakj"},"content":"            stage.show();","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"andrechuakj"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"andrechuakj"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"andrechuakj"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"andrechuakj":32}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"package duke.gui;","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"andrechuakj"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"andrechuakj"},"content":"/**","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"andrechuakj"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"andrechuakj"},"content":" */","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"andrechuakj"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"andrechuakj"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"andrechuakj"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"andrechuakj"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"andrechuakj"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"andrechuakj"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"andrechuakj"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"andrechuakj"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":24,"author":{"gitId":"andrechuakj"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"andrechuakj"},"content":"    private Duke duke;","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"andrechuakj"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"andrechuakj"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"andrechuakj"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"andrechuakj"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"andrechuakj"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"andrechuakj"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"andrechuakj"},"content":"        duke \u003d d;","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-07"},{"lineNumber":41,"author":{"gitId":"andrechuakj"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-07"},{"lineNumber":42,"author":{"gitId":"andrechuakj"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-07"},{"lineNumber":43,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-07"},{"lineNumber":44,"author":{"gitId":"andrechuakj"},"content":"    @FXML","lastModifiedDate":"2023-09-07"},{"lineNumber":45,"author":{"gitId":"andrechuakj"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-07"},{"lineNumber":46,"author":{"gitId":"andrechuakj"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-07"},{"lineNumber":47,"author":{"gitId":"andrechuakj"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-09-07"},{"lineNumber":48,"author":{"gitId":"andrechuakj"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-07"},{"lineNumber":49,"author":{"gitId":"andrechuakj"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-07"},{"lineNumber":50,"author":{"gitId":"andrechuakj"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-09-07"},{"lineNumber":51,"author":{"gitId":"andrechuakj"},"content":"        );","lastModifiedDate":"2023-09-07"},{"lineNumber":52,"author":{"gitId":"andrechuakj"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-07"},{"lineNumber":53,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-07"},{"lineNumber":54,"author":{"gitId":"andrechuakj"},"content":"}","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"andrechuakj":54}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"package duke.task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":" * The Deadline class represents a task with a specific deadline.","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"andrechuakj"},"content":" * It is a subclass of the Task class.","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"andrechuakj"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"andrechuakj"},"content":"    protected LocalDate by;","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"andrechuakj"},"content":"     * Constructs a Deadline task with the specified description and deadline date.","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"andrechuakj"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"andrechuakj"},"content":"     * @param by The deadline date in string format (e.g., \"yyyy-MM-dd\").","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"andrechuakj"},"content":"     * @throws DukeException If there is an issue while parsing the date.","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"andrechuakj"},"content":"    public Deadline(String description, String by) throws DukeException {","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"andrechuakj"},"content":"        super(description);","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"andrechuakj"},"content":"        this.by \u003d parseDate(by);","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"andrechuakj"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"andrechuakj"},"content":"    public String toData() {","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"andrechuakj"},"content":"        String done \u003d String.valueOf(this.isDone ? 1 : 0);","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"andrechuakj"},"content":"        return \"D | \" + done + \" | \" + this.description + \" | \" + this.by;","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"andrechuakj"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"andrechuakj"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"andrechuakj"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.by.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"andrechuakj"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"andrechuakj":38}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"package duke.task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":" * The Event class represents an event task with a specific start and end date.","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"andrechuakj"},"content":" * It is a subclass of the Task class.","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"andrechuakj"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"andrechuakj"},"content":"    protected LocalDate from;","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"andrechuakj"},"content":"    protected LocalDate to;","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"andrechuakj"},"content":"     * Constructs an Event task with the specified description, start date, and end date.","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"andrechuakj"},"content":"     * @param description The description of the event task.","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"andrechuakj"},"content":"     * @param from The start date of the event in string format (e.g., \"yyyy-MM-dd\").","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"andrechuakj"},"content":"     * @param to The end date of the event in string format (e.g., \"yyyy-MM-dd\").","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"andrechuakj"},"content":"     * @throws DukeException If there is an issue while parsing the dates or constructing the task.","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"andrechuakj"},"content":"    public Event(String description, String from, String to) throws DukeException {","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"andrechuakj"},"content":"        super(description);","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"andrechuakj"},"content":"        this.from \u003d parseDate(from);","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"andrechuakj"},"content":"        this.to \u003d parseDate(to);","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"andrechuakj"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":32,"author":{"gitId":"andrechuakj"},"content":"    public String toData() {","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"andrechuakj"},"content":"        String done \u003d String.valueOf(this.isDone ? 1 : 0);","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"andrechuakj"},"content":"        return \"E | \" + done + \" | \" + this.description + \" | \" + this.from + \" | \" + this.to;","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"andrechuakj"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"andrechuakj"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":39,"author":{"gitId":"andrechuakj"},"content":"        return \"[E]\" + super.toString()","lastModifiedDate":"2023-08-24"},{"lineNumber":40,"author":{"gitId":"andrechuakj"},"content":"                + \" (from: \" + this.from.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\"))","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"andrechuakj"},"content":"                + \" to: \" + this.to.format(DateTimeFormatter.ofPattern(\"MMM d yyyy\")) + \")\";","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":43,"author":{"gitId":"andrechuakj"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"andrechuakj":43}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"package duke.task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":" * The Task class represents a generic task. It is an abstract class","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"andrechuakj"},"content":" * that serves as the base class for Todo, Deadline, and Event.","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"andrechuakj"},"content":"public abstract class Task {","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"andrechuakj"},"content":"    protected String description;","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"andrechuakj"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"andrechuakj"},"content":"     * Constructs an instance of a Task.","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"andrechuakj"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":21,"author":{"gitId":"andrechuakj"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"andrechuakj"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"andrechuakj"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"andrechuakj"},"content":"     * Returns the status icon of the task.","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"andrechuakj"},"content":"     * @return \"X\" if the task is done, \" \" (space) if the task is not done.","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"andrechuakj"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"andrechuakj"},"content":"        return (isDone ? \"X\" : \" \");","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"andrechuakj"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"andrechuakj"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-24"},{"lineNumber":39,"author":{"gitId":"andrechuakj"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-24"},{"lineNumber":40,"author":{"gitId":"andrechuakj"},"content":"        return;","lastModifiedDate":"2023-08-24"},{"lineNumber":41,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":42,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":43,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"andrechuakj"},"content":"     * Marks the task as not done.","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":46,"author":{"gitId":"andrechuakj"},"content":"    public void markAsNotDone() {","lastModifiedDate":"2023-08-24"},{"lineNumber":47,"author":{"gitId":"andrechuakj"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-24"},{"lineNumber":48,"author":{"gitId":"andrechuakj"},"content":"        return;","lastModifiedDate":"2023-08-24"},{"lineNumber":49,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":50,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":51,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":52,"author":{"gitId":"andrechuakj"},"content":"     * Converts the task to a string format suitable for saving to a data file.","lastModifiedDate":"2023-09-05"},{"lineNumber":53,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":54,"author":{"gitId":"andrechuakj"},"content":"     * @return A string representation of the task for data storage.","lastModifiedDate":"2023-09-05"},{"lineNumber":55,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":56,"author":{"gitId":"andrechuakj"},"content":"    public abstract String toData();","lastModifiedDate":"2023-09-03"},{"lineNumber":57,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":58,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":59,"author":{"gitId":"andrechuakj"},"content":"     * Parses a date string into a LocalDate object.","lastModifiedDate":"2023-09-05"},{"lineNumber":60,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":61,"author":{"gitId":"andrechuakj"},"content":"     * @param date The date string to parse.","lastModifiedDate":"2023-09-05"},{"lineNumber":62,"author":{"gitId":"andrechuakj"},"content":"     * @return A LocalDate object representing the parsed date.","lastModifiedDate":"2023-09-05"},{"lineNumber":63,"author":{"gitId":"andrechuakj"},"content":"     * @throws DukeException If there is an issue while parsing the date.","lastModifiedDate":"2023-09-05"},{"lineNumber":64,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":65,"author":{"gitId":"andrechuakj"},"content":"    protected LocalDate parseDate(String date) throws DukeException {","lastModifiedDate":"2023-09-03"},{"lineNumber":66,"author":{"gitId":"andrechuakj"},"content":"        LocalDate localDate \u003d null;","lastModifiedDate":"2023-09-03"},{"lineNumber":67,"author":{"gitId":"andrechuakj"},"content":"        try {","lastModifiedDate":"2023-09-03"},{"lineNumber":68,"author":{"gitId":"andrechuakj"},"content":"            localDate \u003d LocalDate.parse(date);","lastModifiedDate":"2023-09-03"},{"lineNumber":69,"author":{"gitId":"andrechuakj"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":70,"author":{"gitId":"andrechuakj"},"content":"            throw new DukeException(\"Incorrect date format. Please enter date in yyyy-mm-dd format\");","lastModifiedDate":"2023-09-03"},{"lineNumber":71,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":72,"author":{"gitId":"andrechuakj"},"content":"        return localDate;","lastModifiedDate":"2023-09-03"},{"lineNumber":73,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":74,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":75,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":76,"author":{"gitId":"andrechuakj"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-09-05"},{"lineNumber":77,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":78,"author":{"gitId":"andrechuakj"},"content":"    public void markDone() {","lastModifiedDate":"2023-09-04"},{"lineNumber":79,"author":{"gitId":"andrechuakj"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-09-04"},{"lineNumber":80,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":81,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":82,"author":{"gitId":"andrechuakj"},"content":"    public String getDescription() {","lastModifiedDate":"2023-09-05"},{"lineNumber":83,"author":{"gitId":"andrechuakj"},"content":"        return this.description;","lastModifiedDate":"2023-09-05"},{"lineNumber":84,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":85,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-08-24"},{"lineNumber":86,"author":{"gitId":"andrechuakj"},"content":"     * Returns a string representation of the task.","lastModifiedDate":"2023-09-05"},{"lineNumber":87,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-08-24"},{"lineNumber":88,"author":{"gitId":"andrechuakj"},"content":"     * @return A string representation of the task with its status icon and description.","lastModifiedDate":"2023-09-05"},{"lineNumber":89,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-08-24"},{"lineNumber":90,"author":{"gitId":"andrechuakj"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":91,"author":{"gitId":"andrechuakj"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":92,"author":{"gitId":"andrechuakj"},"content":"        return \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-08-24"},{"lineNumber":93,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":94,"author":{"gitId":"andrechuakj"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"andrechuakj":94}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"package duke.task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":" * The TaskList class represents a list of tasks.","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":" * It extends the ArrayList class to store and manage a collection of Task objects.","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":"public class TaskList extends ArrayList\u003cTask\u003e {","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"andrechuakj":11}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"package duke.task;","lastModifiedDate":"2023-09-04"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":" * The Todo class represents a todo task.","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":" * It is a subclass of the Task class.","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"andrechuakj"},"content":"     * Constructs a Todo task with the specified description.","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"andrechuakj"},"content":"     * @param description The description of the to-do task.","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"andrechuakj"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"andrechuakj"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"andrechuakj"},"content":"        super(description);","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"andrechuakj"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"andrechuakj"},"content":"    public String toData() {","lastModifiedDate":"2023-09-03"},{"lineNumber":20,"author":{"gitId":"andrechuakj"},"content":"        String done \u003d String.valueOf(this.isDone ? 1 : 0);","lastModifiedDate":"2023-09-03"},{"lineNumber":21,"author":{"gitId":"andrechuakj"},"content":"        return \"T | \" + done + \" | \" + this.description;","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"andrechuakj"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"andrechuakj"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"andrechuakj"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"andrechuakj"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"andrechuakj":28}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"andrechuakj"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"andrechuakj"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"andrechuakj"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"andrechuakj"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"andrechuakj"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"andrechuakj"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"andrechuakj":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"andrechuakj"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"andrechuakj"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"andrechuakj"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"andrechuakj"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"andrechuakj"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"andrechuakj"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"andrechuakj"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"andrechuakj"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"andrechuakj"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-07"}],"authorContributionMap":{"andrechuakj":19}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"package duke;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":"import duke.command.Command;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":"import duke.command.DeleteComand;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"andrechuakj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"andrechuakj"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"andrechuakj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"andrechuakj"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"andrechuakj"},"content":"public class ParserTest {","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"andrechuakj"},"content":"    // Success test cases","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"andrechuakj"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"andrechuakj"},"content":"    void parse_byeCommand_success() throws DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"andrechuakj"},"content":"        ArrayList\u003cString\u003e resString \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"andrechuakj"},"content":"        resString.add(\"bye\");","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"andrechuakj"},"content":"        Command resCommand \u003d new ByeCommand(resString);","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"andrechuakj"},"content":"        assertEquals(resCommand, Parser.parse(\"bye\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"andrechuakj"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"andrechuakj"},"content":"    void parse_listCommand_success() throws DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"andrechuakj"},"content":"        ArrayList\u003cString\u003e resString \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"andrechuakj"},"content":"        resString.add(\"list\");","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"andrechuakj"},"content":"        Command resCommand \u003d new ListCommand(resString);","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"andrechuakj"},"content":"        assertEquals(resCommand, Parser.parse(\"list\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"andrechuakj"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"andrechuakj"},"content":"    void parse_markCommand_success() throws DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"andrechuakj"},"content":"        ArrayList\u003cString\u003e resString \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"andrechuakj"},"content":"        resString.add(\"3\");","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"andrechuakj"},"content":"        Command resCommand \u003d new MarkCommand(resString);","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"andrechuakj"},"content":"        assertEquals(resCommand, Parser.parse(\"mark 3\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"andrechuakj"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"andrechuakj"},"content":"    void parse_unmarkCommand_success() throws DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"andrechuakj"},"content":"        ArrayList\u003cString\u003e resString \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"andrechuakj"},"content":"        resString.add(\"4\");","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"andrechuakj"},"content":"        Command resCommand \u003d new UnmarkCommand(resString);","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"andrechuakj"},"content":"        assertEquals(resCommand, Parser.parse(\"unmark 4\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":52,"author":{"gitId":"andrechuakj"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":53,"author":{"gitId":"andrechuakj"},"content":"    void parse_deleteCommand_success() throws DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":54,"author":{"gitId":"andrechuakj"},"content":"        ArrayList\u003cString\u003e resString \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-05"},{"lineNumber":55,"author":{"gitId":"andrechuakj"},"content":"        resString.add(\"1\");","lastModifiedDate":"2023-09-05"},{"lineNumber":56,"author":{"gitId":"andrechuakj"},"content":"        Command resCommand \u003d new DeleteComand(resString);","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"andrechuakj"},"content":"        assertEquals(resCommand, Parser.parse(\"delete 1\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":59,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":60,"author":{"gitId":"andrechuakj"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":61,"author":{"gitId":"andrechuakj"},"content":"    public void parse_validTodoCommand_success() throws DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":62,"author":{"gitId":"andrechuakj"},"content":"        ArrayList\u003cString\u003e resString \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-05"},{"lineNumber":63,"author":{"gitId":"andrechuakj"},"content":"        resString.add(\"coding\");","lastModifiedDate":"2023-09-05"},{"lineNumber":64,"author":{"gitId":"andrechuakj"},"content":"        Command resCommand \u003d new AddCommand(resString, \"T\");","lastModifiedDate":"2023-09-05"},{"lineNumber":65,"author":{"gitId":"andrechuakj"},"content":"        assertEquals(resCommand, Parser.parse(\"todo coding\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":66,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":67,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":68,"author":{"gitId":"andrechuakj"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":69,"author":{"gitId":"andrechuakj"},"content":"    public void parse_validDeadlineCommand_success() throws DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":70,"author":{"gitId":"andrechuakj"},"content":"        ArrayList\u003cString\u003e resString \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-05"},{"lineNumber":71,"author":{"gitId":"andrechuakj"},"content":"        resString.add(\"typing\");","lastModifiedDate":"2023-09-05"},{"lineNumber":72,"author":{"gitId":"andrechuakj"},"content":"        resString.add(\"2023-05-09\");","lastModifiedDate":"2023-09-05"},{"lineNumber":73,"author":{"gitId":"andrechuakj"},"content":"        Command resCommand \u003d new AddCommand(resString, \"D\");","lastModifiedDate":"2023-09-05"},{"lineNumber":74,"author":{"gitId":"andrechuakj"},"content":"        assertEquals(resCommand, Parser.parse(\"deadline typing /by 2023-05-09\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":75,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":76,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":77,"author":{"gitId":"andrechuakj"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":78,"author":{"gitId":"andrechuakj"},"content":"    public void parse_validEventCommand_success() throws DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":79,"author":{"gitId":"andrechuakj"},"content":"        ArrayList\u003cString\u003e resString \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-05"},{"lineNumber":80,"author":{"gitId":"andrechuakj"},"content":"        resString.add(\"hacking\");","lastModifiedDate":"2023-09-05"},{"lineNumber":81,"author":{"gitId":"andrechuakj"},"content":"        resString.add(\"2023-05-09\");","lastModifiedDate":"2023-09-05"},{"lineNumber":82,"author":{"gitId":"andrechuakj"},"content":"        resString.add(\"2023-05-10\");","lastModifiedDate":"2023-09-05"},{"lineNumber":83,"author":{"gitId":"andrechuakj"},"content":"        Command resCommand \u003d new AddCommand(resString, \"E\");","lastModifiedDate":"2023-09-05"},{"lineNumber":84,"author":{"gitId":"andrechuakj"},"content":"        assertEquals(resCommand, Parser.parse(\"event hacking /from 2023-05-09 /to 2023-05-10\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":85,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":86,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":87,"author":{"gitId":"andrechuakj"},"content":"    // Exception thrown test cases","lastModifiedDate":"2023-09-05"},{"lineNumber":88,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":89,"author":{"gitId":"andrechuakj"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":90,"author":{"gitId":"andrechuakj"},"content":"    void parse_byeCommandSpellingError_exceptionThrown() throws DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":91,"author":{"gitId":"andrechuakj"},"content":"        try {","lastModifiedDate":"2023-09-05"},{"lineNumber":92,"author":{"gitId":"andrechuakj"},"content":"            ArrayList\u003cString\u003e resString \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-05"},{"lineNumber":93,"author":{"gitId":"andrechuakj"},"content":"            Command resCommand \u003d new ByeCommand(resString);","lastModifiedDate":"2023-09-05"},{"lineNumber":94,"author":{"gitId":"andrechuakj"},"content":"            assertEquals(resCommand, Parser.parse(\"byebye\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":95,"author":{"gitId":"andrechuakj"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":96,"author":{"gitId":"andrechuakj"},"content":"            assertEquals(\"☹ OOPS!!! This command is invalid.\", e.getMessage());","lastModifiedDate":"2023-09-05"},{"lineNumber":97,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":98,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":99,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":100,"author":{"gitId":"andrechuakj"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":101,"author":{"gitId":"andrechuakj"},"content":"    void parse_listCommandSpellingError_exceptionThrown() throws DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":102,"author":{"gitId":"andrechuakj"},"content":"        try {","lastModifiedDate":"2023-09-05"},{"lineNumber":103,"author":{"gitId":"andrechuakj"},"content":"            ArrayList\u003cString\u003e resString \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-05"},{"lineNumber":104,"author":{"gitId":"andrechuakj"},"content":"            Command resCommand \u003d new ListCommand(resString);","lastModifiedDate":"2023-09-05"},{"lineNumber":105,"author":{"gitId":"andrechuakj"},"content":"            assertEquals(resCommand, Parser.parse(\"listall\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":106,"author":{"gitId":"andrechuakj"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":107,"author":{"gitId":"andrechuakj"},"content":"            assertEquals(\"☹ OOPS!!! This command is invalid.\", e.getMessage());","lastModifiedDate":"2023-09-05"},{"lineNumber":108,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":109,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":110,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":111,"author":{"gitId":"andrechuakj"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":112,"author":{"gitId":"andrechuakj"},"content":"    void parse_markCommandNoTaskNumber_exceptionThrown() throws DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":113,"author":{"gitId":"andrechuakj"},"content":"        try {","lastModifiedDate":"2023-09-05"},{"lineNumber":114,"author":{"gitId":"andrechuakj"},"content":"            ArrayList\u003cString\u003e resString \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-05"},{"lineNumber":115,"author":{"gitId":"andrechuakj"},"content":"            Command resCommand \u003d new MarkCommand(resString);","lastModifiedDate":"2023-09-05"},{"lineNumber":116,"author":{"gitId":"andrechuakj"},"content":"            assertEquals(resCommand, Parser.parse(\"mark\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":117,"author":{"gitId":"andrechuakj"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":118,"author":{"gitId":"andrechuakj"},"content":"            assertEquals(\"☹ OOPS!!! The task number to mark cannot be empty.\", e.getMessage());","lastModifiedDate":"2023-09-05"},{"lineNumber":119,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":120,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":121,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":122,"author":{"gitId":"andrechuakj"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":123,"author":{"gitId":"andrechuakj"},"content":"    void parse_unmarkCommandNoTaskNumber_exceptionThrown() throws DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":124,"author":{"gitId":"andrechuakj"},"content":"        try {","lastModifiedDate":"2023-09-05"},{"lineNumber":125,"author":{"gitId":"andrechuakj"},"content":"            ArrayList\u003cString\u003e resString \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-05"},{"lineNumber":126,"author":{"gitId":"andrechuakj"},"content":"            Command resCommand \u003d new UnmarkCommand(resString);","lastModifiedDate":"2023-09-05"},{"lineNumber":127,"author":{"gitId":"andrechuakj"},"content":"            assertEquals(resCommand, Parser.parse(\"unmark\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":128,"author":{"gitId":"andrechuakj"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":129,"author":{"gitId":"andrechuakj"},"content":"            assertEquals(\"☹ OOPS!!! The task number to unmark cannot be empty.\", e.getMessage());","lastModifiedDate":"2023-09-05"},{"lineNumber":130,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":131,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":132,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":133,"author":{"gitId":"andrechuakj"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":134,"author":{"gitId":"andrechuakj"},"content":"    void parse_deleteCommandNoTaskNumber_exceptionThrown() throws DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":135,"author":{"gitId":"andrechuakj"},"content":"        try {","lastModifiedDate":"2023-09-05"},{"lineNumber":136,"author":{"gitId":"andrechuakj"},"content":"            ArrayList\u003cString\u003e resString \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-05"},{"lineNumber":137,"author":{"gitId":"andrechuakj"},"content":"            Command resCommand \u003d new DeleteComand(resString);","lastModifiedDate":"2023-09-05"},{"lineNumber":138,"author":{"gitId":"andrechuakj"},"content":"            assertEquals(resCommand, Parser.parse(\"delete\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":139,"author":{"gitId":"andrechuakj"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":140,"author":{"gitId":"andrechuakj"},"content":"            assertEquals(\"☹ OOPS!!! The task number to delete cannot be empty.\", e.getMessage());","lastModifiedDate":"2023-09-05"},{"lineNumber":141,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":142,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":143,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":144,"author":{"gitId":"andrechuakj"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":145,"author":{"gitId":"andrechuakj"},"content":"    public void parse_todoCommandSpellingMistake_exceptionThrown() {","lastModifiedDate":"2023-09-05"},{"lineNumber":146,"author":{"gitId":"andrechuakj"},"content":"        try {","lastModifiedDate":"2023-09-05"},{"lineNumber":147,"author":{"gitId":"andrechuakj"},"content":"            ArrayList\u003cString\u003e string \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-05"},{"lineNumber":148,"author":{"gitId":"andrechuakj"},"content":"            Command command \u003d new AddCommand(string, \"T\");","lastModifiedDate":"2023-09-05"},{"lineNumber":149,"author":{"gitId":"andrechuakj"},"content":"            assertEquals(command, Parser.parse(\"todoj\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":150,"author":{"gitId":"andrechuakj"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2023-09-05"},{"lineNumber":151,"author":{"gitId":"andrechuakj"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":152,"author":{"gitId":"andrechuakj"},"content":"            assertEquals(\"☹ OOPS!!! This command is invalid.\", e.getMessage());","lastModifiedDate":"2023-09-05"},{"lineNumber":153,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":154,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":155,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":156,"author":{"gitId":"andrechuakj"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":157,"author":{"gitId":"andrechuakj"},"content":"    public void parse_deadLineCommandNoDesc_exceptionThrown() {","lastModifiedDate":"2023-09-05"},{"lineNumber":158,"author":{"gitId":"andrechuakj"},"content":"        try {","lastModifiedDate":"2023-09-05"},{"lineNumber":159,"author":{"gitId":"andrechuakj"},"content":"            ArrayList\u003cString\u003e string \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-05"},{"lineNumber":160,"author":{"gitId":"andrechuakj"},"content":"            Command command \u003d new AddCommand(string, \"D\");","lastModifiedDate":"2023-09-05"},{"lineNumber":161,"author":{"gitId":"andrechuakj"},"content":"            assertEquals(command, Parser.parse(\"deadline\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":162,"author":{"gitId":"andrechuakj"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2023-09-05"},{"lineNumber":163,"author":{"gitId":"andrechuakj"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":164,"author":{"gitId":"andrechuakj"},"content":"            assertEquals(\"☹ OOPS!!! The format of the deadline command is invalid.\\n\"","lastModifiedDate":"2023-09-05"},{"lineNumber":165,"author":{"gitId":"andrechuakj"},"content":"                    + \"Here is an example of a valid format:\"","lastModifiedDate":"2023-09-05"},{"lineNumber":166,"author":{"gitId":"andrechuakj"},"content":"                    + \" deadline coding /by 2023-09-04\", e.getMessage());","lastModifiedDate":"2023-09-05"},{"lineNumber":167,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":168,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":169,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":170,"author":{"gitId":"andrechuakj"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":171,"author":{"gitId":"andrechuakj"},"content":"    public void parse_eventCommandWrongOrder_exceptionThrown() {","lastModifiedDate":"2023-09-05"},{"lineNumber":172,"author":{"gitId":"andrechuakj"},"content":"        try {","lastModifiedDate":"2023-09-05"},{"lineNumber":173,"author":{"gitId":"andrechuakj"},"content":"            ArrayList\u003cString\u003e string \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-05"},{"lineNumber":174,"author":{"gitId":"andrechuakj"},"content":"            Command command \u003d new AddCommand(string, \"E\");","lastModifiedDate":"2023-09-05"},{"lineNumber":175,"author":{"gitId":"andrechuakj"},"content":"            assertEquals(command, Parser.parse(\"event /to 2023-10-10 /from 2023-01-01\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":176,"author":{"gitId":"andrechuakj"},"content":"            fail(); // the test should not reach this line","lastModifiedDate":"2023-09-05"},{"lineNumber":177,"author":{"gitId":"andrechuakj"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":178,"author":{"gitId":"andrechuakj"},"content":"            assertEquals(\"☹ OOPS!!! The format of the event command is invalid.\\n\"","lastModifiedDate":"2023-09-05"},{"lineNumber":179,"author":{"gitId":"andrechuakj"},"content":"                    + \"Here is an example of a valid format:\"","lastModifiedDate":"2023-09-05"},{"lineNumber":180,"author":{"gitId":"andrechuakj"},"content":"                    + \" event coding /from 2023-01-01 /to 2023-12-31\", e.getMessage());","lastModifiedDate":"2023-09-05"},{"lineNumber":181,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":182,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":183,"author":{"gitId":"andrechuakj"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"andrechuakj":183}},{"path":"src/test/java/duke/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"package duke.task;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":"import duke.DukeException;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"andrechuakj"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"andrechuakj"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"andrechuakj"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"andrechuakj"},"content":"    public void constructor_validDescAndDate_success() throws DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"andrechuakj"},"content":"        Deadline deadline \u003d new Deadline(\"Complete task\", \"2023-09-30\");","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"andrechuakj"},"content":"        assertEquals(\"Complete task\", deadline.description);","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"andrechuakj"},"content":"        assertEquals(LocalDate.of(2023, 9, 30), deadline.by);","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"andrechuakj"},"content":"        assertEquals(false, deadline.isDone);","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"andrechuakj"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"andrechuakj"},"content":"    public void constructor_wrongDate_exceptionThrown() {","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"andrechuakj"},"content":"        try {","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"andrechuakj"},"content":"            new Deadline(\"Complete task\", \"30-09-2023\");","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"andrechuakj"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"andrechuakj"},"content":"            assertEquals(\"Incorrect date format. Please enter date in yyyy-mm-dd format\", e.getMessage());","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"andrechuakj"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"andrechuakj"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"andrechuakj"},"content":"    public void toStringTest() throws DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"andrechuakj"},"content":"        Deadline deadline \u003d new Deadline(\"Complete task\", \"2023-09-30\");","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"andrechuakj"},"content":"        String expected \u003d \"[D][ ] Complete task (by: Sep 30 2023)\";","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"andrechuakj"},"content":"        assertEquals(expected, deadline.toString());","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"andrechuakj"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"andrechuakj"},"content":"    @Test","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"andrechuakj"},"content":"    public void toDataTest() throws DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"andrechuakj"},"content":"        Deadline deadline \u003d new Deadline(\"Complete task\", \"2023-09-30\");","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"andrechuakj"},"content":"        String expected \u003d \"D | 0 | Complete task | 2023-09-30\";","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"andrechuakj"},"content":"        assertEquals(expected, deadline.toData());","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"andrechuakj"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"andrechuakj"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"andrechuakj":44}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"andrechuakj"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"andrechuakj"},"content":"todo borrow book","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"andrechuakj"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"andrechuakj"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"andrechuakj"},"content":"mark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"andrechuakj"},"content":"mark 2","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"andrechuakj"},"content":"unmark 2","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"andrechuakj"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"andrechuakj"},"content":"bye","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"andrechuakj":9}}]
