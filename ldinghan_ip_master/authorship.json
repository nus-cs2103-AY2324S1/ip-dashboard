[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"# duke.Duke project template","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ldinghan":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.13\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":7,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"checkstyle {","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"javafx {","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"    version \u003d \"20\"","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-07"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"ldinghan"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":65,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":66,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":67,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":68,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ldinghan":26,"-":42}},{"path":"data/ding.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"[T][X] ab","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"ldinghan":1}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"        try {","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"ldinghan"},"content":"    private void flip() {","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"ldinghan"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"ldinghan"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-09"},{"lineNumber":48,"author":{"gitId":"ldinghan"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"ldinghan"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-09"},{"lineNumber":50,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":51,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":52,"author":{"gitId":"ldinghan"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-09"},{"lineNumber":53,"author":{"gitId":"ldinghan"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-09-09"},{"lineNumber":54,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":55,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":56,"author":{"gitId":"ldinghan"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-09-09"},{"lineNumber":57,"author":{"gitId":"ldinghan"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-09"},{"lineNumber":58,"author":{"gitId":"ldinghan"},"content":"        db.flip();","lastModifiedDate":"2023-09-09"},{"lineNumber":59,"author":{"gitId":"ldinghan"},"content":"        return db;","lastModifiedDate":"2023-09-09"},{"lineNumber":60,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":61,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"ldinghan":61}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import duke.commands.Command;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"import javafx.scene.layout.Region;","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":" * The main class for the Ding Chatbot application.","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"public class Duke extends Application {","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"    private Storage storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"    private Ui ui;","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"    private Scene scene;","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/dauser.jpeg\"));","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/daduke.jpeg\"));","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"     * Constructs a new instance of the duke.Duke class.","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"     * Initializes the storage and task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"    public Duke() {","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"ldinghan"},"content":"        storage \u003d new Storage(\"./data\", \"./data/ding.txt\");","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"ldinghan"},"content":"        tasks \u003d storage.getTasks();","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"ldinghan"},"content":"     * Gets a response from the chatbot for the given user input.","lastModifiedDate":"2023-09-09"},{"lineNumber":50,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":51,"author":{"gitId":"ldinghan"},"content":"     * @param userInput The user\u0027s input.","lastModifiedDate":"2023-09-09"},{"lineNumber":52,"author":{"gitId":"ldinghan"},"content":"     * @return The chatbot\u0027s response.","lastModifiedDate":"2023-09-09"},{"lineNumber":53,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":55,"author":{"gitId":"ldinghan"},"content":"    public String getResponse(String userInput) {","lastModifiedDate":"2023-09-09"},{"lineNumber":56,"author":{"gitId":"ldinghan"},"content":"        String output;","lastModifiedDate":"2023-09-09"},{"lineNumber":57,"author":{"gitId":"ldinghan"},"content":"        Command command \u003d Parser.getCommand(userInput, storage, tasks, ui);","lastModifiedDate":"2023-09-09"},{"lineNumber":58,"author":{"gitId":"ldinghan"},"content":"        output \u003d command.execute(storage, tasks, ui);","lastModifiedDate":"2023-09-09"},{"lineNumber":59,"author":{"gitId":"ldinghan"},"content":"        return output;","lastModifiedDate":"2023-09-09"},{"lineNumber":60,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":61,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":63,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":64,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":65,"author":{"gitId":"ldinghan"},"content":"    @Override","lastModifiedDate":"2023-09-09"},{"lineNumber":66,"author":{"gitId":"ldinghan"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-09"},{"lineNumber":67,"author":{"gitId":"ldinghan"},"content":"        scrollPane \u003d new ScrollPane();","lastModifiedDate":"2023-09-09"},{"lineNumber":68,"author":{"gitId":"ldinghan"},"content":"        dialogContainer \u003d new VBox();","lastModifiedDate":"2023-09-09"},{"lineNumber":69,"author":{"gitId":"ldinghan"},"content":"        scrollPane.setContent(dialogContainer);","lastModifiedDate":"2023-09-09"},{"lineNumber":70,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":71,"author":{"gitId":"ldinghan"},"content":"        userInput \u003d new TextField();","lastModifiedDate":"2023-09-09"},{"lineNumber":72,"author":{"gitId":"ldinghan"},"content":"        sendButton \u003d new Button(\"Send\");","lastModifiedDate":"2023-09-09"},{"lineNumber":73,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":74,"author":{"gitId":"ldinghan"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();","lastModifiedDate":"2023-09-09"},{"lineNumber":75,"author":{"gitId":"ldinghan"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);","lastModifiedDate":"2023-09-09"},{"lineNumber":76,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":77,"author":{"gitId":"ldinghan"},"content":"        scene \u003d new Scene(mainLayout);","lastModifiedDate":"2023-09-09"},{"lineNumber":78,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":79,"author":{"gitId":"ldinghan"},"content":"        stage.setScene(scene);","lastModifiedDate":"2023-09-09"},{"lineNumber":80,"author":{"gitId":"ldinghan"},"content":"        stage.show();","lastModifiedDate":"2023-09-09"},{"lineNumber":81,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":82,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":83,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":84,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":85,"author":{"gitId":"ldinghan"},"content":"        stage.setTitle(\"Ding\");","lastModifiedDate":"2023-09-09"},{"lineNumber":86,"author":{"gitId":"ldinghan"},"content":"        stage.setResizable(false);","lastModifiedDate":"2023-09-09"},{"lineNumber":87,"author":{"gitId":"ldinghan"},"content":"        stage.setMinHeight(600.0);","lastModifiedDate":"2023-09-09"},{"lineNumber":88,"author":{"gitId":"ldinghan"},"content":"        stage.setMinWidth(400.0);","lastModifiedDate":"2023-09-09"},{"lineNumber":89,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":90,"author":{"gitId":"ldinghan"},"content":"        mainLayout.setPrefSize(400.0, 600.0);","lastModifiedDate":"2023-09-09"},{"lineNumber":91,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":92,"author":{"gitId":"ldinghan"},"content":"        scrollPane.setPrefSize(385, 535);","lastModifiedDate":"2023-09-09"},{"lineNumber":93,"author":{"gitId":"ldinghan"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);","lastModifiedDate":"2023-09-09"},{"lineNumber":94,"author":{"gitId":"ldinghan"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);","lastModifiedDate":"2023-09-09"},{"lineNumber":95,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":96,"author":{"gitId":"ldinghan"},"content":"        scrollPane.setVvalue(1.0);","lastModifiedDate":"2023-09-09"},{"lineNumber":97,"author":{"gitId":"ldinghan"},"content":"        scrollPane.setFitToWidth(true);","lastModifiedDate":"2023-09-09"},{"lineNumber":98,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":99,"author":{"gitId":"ldinghan"},"content":"        // You will need to import `javafx.scene.layout.Region` for this.","lastModifiedDate":"2023-09-09"},{"lineNumber":100,"author":{"gitId":"ldinghan"},"content":"        dialogContainer.setPrefHeight(Region.USE_COMPUTED_SIZE);","lastModifiedDate":"2023-09-09"},{"lineNumber":101,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":102,"author":{"gitId":"ldinghan"},"content":"        userInput.setPrefWidth(325.0);","lastModifiedDate":"2023-09-09"},{"lineNumber":103,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":104,"author":{"gitId":"ldinghan"},"content":"        sendButton.setPrefWidth(55.0);","lastModifiedDate":"2023-09-09"},{"lineNumber":105,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":106,"author":{"gitId":"ldinghan"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);","lastModifiedDate":"2023-09-09"},{"lineNumber":107,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":108,"author":{"gitId":"ldinghan"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);","lastModifiedDate":"2023-09-09"},{"lineNumber":109,"author":{"gitId":"ldinghan"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);","lastModifiedDate":"2023-09-09"},{"lineNumber":110,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":111,"author":{"gitId":"ldinghan"},"content":"        AnchorPane.setLeftAnchor(userInput , 1.0);","lastModifiedDate":"2023-09-09"},{"lineNumber":112,"author":{"gitId":"ldinghan"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);","lastModifiedDate":"2023-09-09"},{"lineNumber":113,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":114,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":115,"author":{"gitId":"ldinghan"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {","lastModifiedDate":"2023-09-09"},{"lineNumber":116,"author":{"gitId":"ldinghan"},"content":"            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));","lastModifiedDate":"2023-09-09"},{"lineNumber":117,"author":{"gitId":"ldinghan"},"content":"            userInput.clear();","lastModifiedDate":"2023-09-09"},{"lineNumber":118,"author":{"gitId":"ldinghan"},"content":"        });","lastModifiedDate":"2023-09-09"},{"lineNumber":119,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":120,"author":{"gitId":"ldinghan"},"content":"        userInput.setOnAction((event) -\u003e {","lastModifiedDate":"2023-09-09"},{"lineNumber":121,"author":{"gitId":"ldinghan"},"content":"            dialogContainer.getChildren().add(getDialogLabel(userInput.getText()));","lastModifiedDate":"2023-09-09"},{"lineNumber":122,"author":{"gitId":"ldinghan"},"content":"            userInput.clear();","lastModifiedDate":"2023-09-09"},{"lineNumber":123,"author":{"gitId":"ldinghan"},"content":"        });","lastModifiedDate":"2023-09-09"},{"lineNumber":124,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":125,"author":{"gitId":"ldinghan"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));","lastModifiedDate":"2023-09-09"},{"lineNumber":126,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":127,"author":{"gitId":"ldinghan"},"content":"        sendButton.setOnMouseClicked((event) -\u003e {","lastModifiedDate":"2023-09-09"},{"lineNumber":128,"author":{"gitId":"ldinghan"},"content":"            handleUserInput();","lastModifiedDate":"2023-09-09"},{"lineNumber":129,"author":{"gitId":"ldinghan"},"content":"        });","lastModifiedDate":"2023-09-09"},{"lineNumber":130,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":131,"author":{"gitId":"ldinghan"},"content":"        userInput.setOnAction((event) -\u003e {","lastModifiedDate":"2023-09-09"},{"lineNumber":132,"author":{"gitId":"ldinghan"},"content":"            handleUserInput();","lastModifiedDate":"2023-09-09"},{"lineNumber":133,"author":{"gitId":"ldinghan"},"content":"        });","lastModifiedDate":"2023-09-09"},{"lineNumber":134,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":135,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":136,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":137,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":138,"author":{"gitId":"ldinghan"},"content":"    private Label getDialogLabel(String text) {","lastModifiedDate":"2023-09-09"},{"lineNumber":139,"author":{"gitId":"ldinghan"},"content":"        // You will need to import `javafx.scene.control.Label`.","lastModifiedDate":"2023-09-09"},{"lineNumber":140,"author":{"gitId":"ldinghan"},"content":"        Label textToAdd \u003d new Label(text);","lastModifiedDate":"2023-09-09"},{"lineNumber":141,"author":{"gitId":"ldinghan"},"content":"        textToAdd.setWrapText(true);","lastModifiedDate":"2023-09-09"},{"lineNumber":142,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":143,"author":{"gitId":"ldinghan"},"content":"        return textToAdd;","lastModifiedDate":"2023-09-09"},{"lineNumber":144,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":145,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":146,"author":{"gitId":"ldinghan"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-09"},{"lineNumber":147,"author":{"gitId":"ldinghan"},"content":"        String userText \u003d userInput.getText();","lastModifiedDate":"2023-09-09"},{"lineNumber":148,"author":{"gitId":"ldinghan"},"content":"        String dukeText \u003d getResponse(userInput.getText());","lastModifiedDate":"2023-09-09"},{"lineNumber":149,"author":{"gitId":"ldinghan"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-09"},{"lineNumber":150,"author":{"gitId":"ldinghan"},"content":"                DialogBox.getUserDialog(userText, userImage),","lastModifiedDate":"2023-09-09"},{"lineNumber":151,"author":{"gitId":"ldinghan"},"content":"                DialogBox.getDukeDialog(dukeText, dukeImage)","lastModifiedDate":"2023-09-09"},{"lineNumber":152,"author":{"gitId":"ldinghan"},"content":"        );","lastModifiedDate":"2023-09-09"},{"lineNumber":153,"author":{"gitId":"ldinghan"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-09"},{"lineNumber":154,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":155,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":156,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"ldinghan":154,"-":2}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"public class Launcher {","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"ldinghan":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":" * The `Main` class serves as the entry point for the Ding chatbot application with a graphical user interface (GUI).","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":" * It initializes Duke, loads the GUI using JavaFX and FXML, and displays the main application window.","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":" *","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":" * This class extends the JavaFX `Application` class and is responsible for launching the GUI.","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"    private Duke ding;","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"     * Constructs a new `Main` object and initializes the Duke chatbot.","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"    public Main() {","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"        ding \u003d new Duke();","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"     * The `start` method, required by JavaFX, initializes the GUI by loading the FXML layout and setting up the","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"     * main application window. It also associates the Ding chatbot","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"     * with the GUI controller and displays a welcome message.","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"     * @param stage The primary stage for the JavaFX application.","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"    @Override","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"        try {","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"            stage.setTitle(\"Ding\");","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(ding);","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"ldinghan"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().showWelcome();","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"ldinghan"},"content":"            stage.show();","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"ldinghan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"ldinghan"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-09"},{"lineNumber":48,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":50,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"ldinghan":50}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"    private Duke ding;","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/dauser.jpeg\"));","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/daduke.jpeg\"));","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"     * Sets the Duke chatbot for this GUI.","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"     * @param d The Duke chatbot.","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"        ding \u003d d;","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"ldinghan"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Ding\u0027s reply and then appends them to","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"ldinghan"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":48,"author":{"gitId":"ldinghan"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"ldinghan"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-09"},{"lineNumber":50,"author":{"gitId":"ldinghan"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-09"},{"lineNumber":51,"author":{"gitId":"ldinghan"},"content":"        String response \u003d ding.getResponse(input.toString());","lastModifiedDate":"2023-09-09"},{"lineNumber":52,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":53,"author":{"gitId":"ldinghan"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-09"},{"lineNumber":54,"author":{"gitId":"ldinghan"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-09"},{"lineNumber":55,"author":{"gitId":"ldinghan"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-09-09"},{"lineNumber":56,"author":{"gitId":"ldinghan"},"content":"        );","lastModifiedDate":"2023-09-09"},{"lineNumber":57,"author":{"gitId":"ldinghan"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-09"},{"lineNumber":58,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":59,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":60,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":61,"author":{"gitId":"ldinghan"},"content":"     * Displays a welcome message in the dialog container when the application starts.","lastModifiedDate":"2023-09-09"},{"lineNumber":62,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":63,"author":{"gitId":"ldinghan"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-09-09"},{"lineNumber":64,"author":{"gitId":"ldinghan"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(Ui.introReply(), dukeImage));","lastModifiedDate":"2023-09-09"},{"lineNumber":65,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":66,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"ldinghan":66}},{"path":"src/main/java/duke/commands/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.commands;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":" * The `ByeCommand` class represents a command to exit the Duke chatbot application.","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":" * It is responsible for saving task data and generating a farewell message.","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"     * Executes the \"Bye\" command. It saves the current task data to storage and returns a farewell message.","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"     * @param storage  The storage component responsible for saving task data.","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"     * @param taskList The task list containing the tasks to be operated on.","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"     * @param ui       The user interface for displaying messages to the user.","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"     * @return A farewell message indicating the application is exiting.","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"    @Override","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"    public String execute(Storage storage, TaskList taskList, Ui ui) {","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"        storage.updateStorage(taskList);","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"        return ui.exitReply();","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"ldinghan":26}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.commands;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":" * The abstract `Command` class serves as the base class for all specific commands in the Duke chatbot application.","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":" * Subclasses should implement the `execute` method to define the behavior of individual commands.","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"public abstract class Command {","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"     * Executes the specific behavior associated with this command.","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"     * @param storage  The storage component responsible for saving and loading task data.","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"     * @param taskList The task list containing the tasks to be operated on.","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"     * @param ui       The user interface for displaying messages to the user.","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"     * @return A response message indicating the result of executing the command.","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"    public abstract String execute(Storage storage, TaskList taskList, Ui ui);","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"ldinghan":22}},{"path":"src/main/java/duke/commands/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.commands;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import duke.exceptions.InvalidDateTimeException;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import duke.exceptions.InvalidDescriptionException;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":" * Represents a command to add a deadline task to the task list.","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":" * Parses the user input to create a deadline task and adds it to the list.","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"    private String userInput;","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"     * Constructs a new DeadlineCommand with the user input.","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"     * @param userInput The user input string for creating the deadline task.","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"    public DeadlineCommand(String userInput) {","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"     * Executes the DeadlineCommand. Parses the user input to create a deadline task,","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"     * adds it to the task list, and updates the storage.","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"     * @param storage  The storage component responsible for saving and loading task data.","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"     * @param taskList The task list containing the tasks to be operated on.","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"     * @param ui       The user interface for displaying messages to the user.","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"     * @return A response message indicating the result of the add task operation.","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"     * @throws InvalidDescriptionException If the task description is invalid.","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"     * @throws InvalidDateTimeException    If the task date and time are invalid.","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"    @Override","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"    public String execute(Storage storage, TaskList taskList, Ui ui) {","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"        try {","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"            taskList.addTask(Parser.parseStringToTask(userInput, \"deadline\"));","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"            storage.updateStorage(taskList);","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"            return ui.addTaskReply(userInput, taskList);","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"        } catch (InvalidDescriptionException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"ldinghan"},"content":"            return ui.invalidDescriptionExceptionReply();","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"ldinghan"},"content":"        } catch (InvalidDateTimeException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"ldinghan"},"content":"            return ui.invalidDateTimeExceptionReply();","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":48,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"ldinghan":49}},{"path":"src/main/java/duke/commands/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.commands;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import duke.exceptions.InvalidTaskIndexException;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import duke.exceptions.MissingTaskIndexException;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":" * Represents a command to delete a task from the task list.","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":" * Parses the user input to determine which task to delete and removes it from the list.","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"    private String userInput;","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"     * Constructs a new DeleteCommand with the user input.","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"     * @param userInput The user input string for specifying the task to delete.","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"    public DeleteCommand(String userInput) {","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"     * Executes the DeleteCommand. Parses the user input to determine which task to delete,","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"     * removes it from the task list, and updates the storage.","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"     * @param storage  The storage component responsible for saving and loading task data.","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"     * @param taskList The task list containing the tasks to be operated on.","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"     * @param ui       The user interface for displaying messages to the user.","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"     * @return A response message indicating the result of the delete task operation.","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"     * @throws MissingTaskIndexException If the task index is missing in the user input.","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"     * @throws InvalidTaskIndexException If the task index is invalid (out of range).","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"    @Override","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"    public String execute(Storage storage, TaskList taskList, Ui ui) {","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"        try {","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"            String output \u003d ui.deleteTaskReply(Parser.taskToDelete(userInput, taskList), taskList);","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"            storage.updateStorage(taskList);","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"ldinghan"},"content":"            return output;","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"ldinghan"},"content":"        } catch (MissingTaskIndexException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"ldinghan"},"content":"            return ui.missingTaskIndexExceptionReply();","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"ldinghan"},"content":"        } catch (InvalidTaskIndexException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":48,"author":{"gitId":"ldinghan"},"content":"            return ui.invalidTaskIndexExceptionReply(taskList);","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":50,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":51,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":52,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-09"},{"lineNumber":53,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":54,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"ldinghan":54}},{"path":"src/main/java/duke/commands/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.commands;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import duke.exceptions.InvalidDateTimeException;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import duke.exceptions.InvalidDescriptionException;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":" * Represents a command to add an event task to the task list.","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":" * Parses the user input to create an event task and adds it to the list.","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"    private String userInput;","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"     * Constructs a new EventCommand with the user input.","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"     * @param userInput The user input string containing details of the event task.","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"    public EventCommand(String userInput) {","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"     * Executes the EventCommand. Parses the user input to create an event task,","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"     * adds it to the task list, and updates the storage.","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"     * @param storage  The storage component responsible for saving and loading task data.","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"     * @param taskList The task list containing the tasks to be operated on.","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"     * @param ui       The user interface for displaying messages to the user.","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"     * @return A response message indicating the result of adding the event task.","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"     * @throws InvalidDescriptionException If the task description is missing or invalid.","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"     * @throws InvalidDateTimeException    If the event date and time are missing or in an invalid format.","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"    @Override","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"    public String execute(Storage storage, TaskList taskList, Ui ui) {","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"        try {","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"            taskList.addTask(Parser.parseStringToTask(userInput, \"event\"));","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"            storage.updateStorage(taskList);","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"            return ui.addTaskReply(userInput, taskList);","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"        } catch (InvalidDescriptionException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"ldinghan"},"content":"            return ui.invalidDescriptionExceptionReply();","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"ldinghan"},"content":"        } catch (InvalidDateTimeException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"ldinghan"},"content":"            return ui.invalidDateTimeExceptionReply();","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":48,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"ldinghan":49}},{"path":"src/main/java/duke/commands/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.commands;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import duke.exceptions.InvalidKeywordException;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":" * The `FindCommand` class represents a command for finding tasks that match a keyword.","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":" * It is responsible for parsing the user input to extract the keyword and then finding","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":" * tasks that contain that keyword.","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"    private String userInput;","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"     * Constructs a new `FindCommand` object with the specified user input containing the keyword.","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"     * @param userInput The user input string containing the keyword for task searching.","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"    public FindCommand(String userInput) {","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"     * Executes the \"Find\" command. It attempts to find tasks in the task list that match the specified keyword,","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"     * and returns a response message containing the found tasks.","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"     * @param storage  The storage component responsible for saving and loading task data.","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"     * @param taskList The task list to search for matching tasks.","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"     * @param ui       The user interface for displaying messages to the user.","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"     * @return A response message containing the tasks that match the specified keyword.","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"    @Override","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"    public String execute(Storage storage, TaskList taskList, Ui ui) {","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"        try {","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"            return ui.findTaskReply(userInput, Parser.findKeyword(userInput, taskList));","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"        } catch (InvalidKeywordException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"            return ui.invalidKeywordExceptionReply();","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"ldinghan":43}},{"path":"src/main/java/duke/commands/InvalidCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.commands;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":" * The `InvalidCommand` class represents a command that is not recognized or valid.","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":" * It is responsible for providing a response message indicating that the user input","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":" * does not correspond to a valid command.","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"public class InvalidCommand extends Command {","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"     * Executes the \"Invalid\" command. It provides a response message indicating that the","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"     * user input is not recognized as a valid command.","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"     * @param storage  The storage component responsible for saving and loading task data.","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"     * @param taskList The task list (not used in this command).","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"     * @param ui       The user interface for displaying error messages to the user.","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"     * @return A response message indicating that the user input is not a valid command.","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"    @Override","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"    public String execute(Storage storage, TaskList taskList, Ui ui) {","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"        return ui.illegalArgumentExceptionReply();","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"ldinghan":27}},{"path":"src/main/java/duke/commands/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.commands;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":" * The `ListCommand` class represents a command to list all tasks.","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":" * It is responsible for retrieving the list of tasks from the task list,","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":" * formatting them, and providing a response message.","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"     * Executes the \"List\" command. It retrieves the list of tasks from the task list,","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"     * formats them into a response message, and returns the message to be displayed to the user.","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"     * @param storage  The storage component responsible for saving and loading task data.","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"     * @param taskList The task list containing the tasks to be displayed.","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"     * @param ui       The user interface for displaying messages to the user.","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"     * @return A response message containing the list of tasks.","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"    public String execute(Storage storage, TaskList taskList, Ui ui) {","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"        return ui.printListReply(taskList);","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"ldinghan":25}},{"path":"src/main/java/duke/commands/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.commands;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import duke.exceptions.InvalidTaskIndexException;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import duke.exceptions.MissingTaskIndexException;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":" * The `MarkCommand` class represents a command to mark a task as done.","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":" * It is responsible for parsing the user input, marking the specified task as done in the task list,","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":" * updating the storage, and providing a response message.","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"    private String userInput;","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"     * Constructs a new `MarkCommand` object with the given user input.","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"     * @param userInput The user input string containing the \"Mark\" command.","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"    public MarkCommand(String userInput) {","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"     * Executes the \"Mark\" command. It attempts to mark the specified task as done, updates the storage,","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"     * and returns a response message indicating the result.","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"     * @param storage  The storage component responsible for saving and loading task data.","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"     * @param taskList The task list containing the tasks to be operated on.","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"     * @param ui       The user interface for displaying messages to the user.","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"     * @return A response message indicating the result of the \"Mark\" operation.","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"    @Override","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"    public String execute(Storage storage, TaskList taskList, Ui ui) {","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"        try {","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"            String output \u003d ui.markTaskReply(Parser.taskToMark(userInput, taskList), taskList);","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"            storage.updateStorage(taskList);","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"            return output;","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"        } catch (MissingTaskIndexException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"ldinghan"},"content":"            return ui.missingTaskIndexExceptionReply();","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"ldinghan"},"content":"        } catch (InvalidTaskIndexException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"ldinghan"},"content":"            return ui.invalidTaskIndexExceptionReply(taskList);","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":48,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"ldinghan":49}},{"path":"src/main/java/duke/commands/ToDoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.commands;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import duke.exceptions.InvalidDateTimeException;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import duke.exceptions.InvalidDescriptionException;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":" * The `ToDoCommand` class represents a command to add a new \"To-Do\" task.","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":" * It is responsible for parsing the user input, creating a new task, adding it to the task list,","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":" * updating the storage, and providing a response message.","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"public class ToDoCommand extends Command {","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"    private String userInput;","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"     * Constructs a new `ToDoCommand` object with the given user input.","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"     * @param userInput The user input string containing the \"To-Do\" command.","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"    public ToDoCommand(String userInput) {","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"     * Executes the \"To-Do\" command. It attempts to create a new \"To-Do\" task based on the user input,","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"     * adds it to the task list, updates the storage, and returns a response message indicating the result.","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"     * @param storage  The storage component responsible for saving and loading task data.","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"     * @param taskList The task list containing the tasks to be operated on.","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"     * @param ui       The user interface for displaying messages to the user.","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"     * @return A response message indicating the result of the \"To-Do\" task addition.","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"    @Override","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"    public String execute(Storage storage, TaskList taskList, Ui ui) {","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"        try {","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"            taskList.addTask(Parser.parseStringToTask(userInput, \"todo\"));","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"            storage.updateStorage(taskList);","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"            return ui.addTaskReply(userInput, taskList);","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"        } catch (InvalidDescriptionException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"ldinghan"},"content":"            return ui.invalidDescriptionExceptionReply();","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"ldinghan"},"content":"        } catch (InvalidDateTimeException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"ldinghan"},"content":"            return ui.invalidDateTimeExceptionReply();","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":48,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"ldinghan":49}},{"path":"src/main/java/duke/commands/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.commands;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import duke.exceptions.InvalidTaskIndexException;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import duke.exceptions.MissingTaskIndexException;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":" * The `UnmarkCommand` class represents a command to unmark a task as done.","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":" * It is responsible for parsing the user input, executing the unmark operation on the task list,","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":" * updating the storage, and providing a response message.","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"    private String userInput;","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"     * Constructs a new `UnmarkCommand` object with the given user input.","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"     * @param userInput The user input string containing the unmark command.","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"    public UnmarkCommand(String userInput) {","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"        this.userInput \u003d userInput;","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"     * Executes the unmark command. It attempts to unmark the specified task as undone, updates the storage,","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"     * and returns a response message indicating the result.","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"     * @param storage  The storage component responsible for saving and loading task data.","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"     * @param taskList The task list containing the tasks to be operated on.","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"     * @param ui       The user interface for displaying messages to the user.","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"     * @return A response message indicating the result of the unmark operation.","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"    @Override","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"    public String execute(Storage storage, TaskList taskList, Ui ui) {","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"        try {","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"            String output \u003d ui.unmarkTaskReply(Parser.taskToUnmark(userInput, taskList), taskList);","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"            storage.updateStorage(taskList);","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"            return output;","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"        } catch (MissingTaskIndexException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"ldinghan"},"content":"            return ui.missingTaskIndexExceptionReply();","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"ldinghan"},"content":"        } catch (InvalidTaskIndexException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"ldinghan"},"content":"            return ui.invalidTaskIndexExceptionReply(taskList);","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":48,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-09"},{"lineNumber":50,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":51,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"ldinghan":51}},{"path":"src/main/java/duke/exceptions/InvalidDateTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.exceptions;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":" * An exception class that represents an invalid task description in a task management application.","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":" * This exception is thrown when an operation encounters an invalid or empty task description.","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"public class InvalidDateTimeException extends Exception {","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"     * Constructs an duke.exceptions.InvalidDateTimeException with the specified detail message.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"     * @param message The detail message explaining the cause of the exception.","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"    public InvalidDateTimeException(String message) {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"        super(message);","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"ldinghan":16}},{"path":"src/main/java/duke/exceptions/InvalidDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.exceptions;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":" * An exception class that represents an invalid task description in a task management application.","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":" * This exception is thrown when an operation encounters an invalid or empty task description.","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"public class InvalidDescriptionException extends Exception {","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"     * Constructs an duke.exceptions.InvalidDescriptionException with the specified detail message.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"     * @param message The detail message explaining the cause of the exception.","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"    public InvalidDescriptionException(String message) {","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"        super(message);","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"ldinghan":16}},{"path":"src/main/java/duke/exceptions/InvalidKeywordException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.exceptions;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":" * An exception class that represents an invalid keyword exception when finding relevant tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":" * This exception is thrown when an operation expects a valid keyword but none is provided, or if there","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":" * is more than 1 keyword.","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"public class InvalidKeywordException extends Exception {","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"     * Constructs a duke.exceptions.InvalidKeywordException with the specified detail message.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"     * @param message The detail message explaining the cause of the exception.","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"    public InvalidKeywordException(String message) {","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"        super(message);","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"ldinghan":17}},{"path":"src/main/java/duke/exceptions/InvalidTaskIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.exceptions;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":" * An exception class that represents an invalid task index in a task list.","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":" * This exception is thrown when an operation encounters an index that is out of bounds or not valid.","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"public class InvalidTaskIndexException extends Exception {","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"     * Constructs an duke.exceptions.InvalidTaskIndexException with the specified detail message.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"     * @param message The detail message explaining the cause of the exception.","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"    public InvalidTaskIndexException(String message) {","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"        super(message);","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"ldinghan":16}},{"path":"src/main/java/duke/exceptions/MissingTaskIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.exceptions;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":" * An exception class that represents a missing task index in a task list.","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":" * This exception is thrown when an operation expects a valid task index but none is provided.","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"public class MissingTaskIndexException extends Exception {","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"     * Constructs a duke.exceptions.MissingTaskIndexException with the specified detail message.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"     * @param message The detail message explaining the cause of the exception.","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"    public MissingTaskIndexException(String message) {","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"        super(message);","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"ldinghan":16}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.parser;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"import duke.commands.ByeCommand;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"import duke.commands.Command;","lastModifiedDate":"2023-09-07"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"import duke.commands.DeadlineCommand;","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"import duke.commands.DeleteCommand;","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"import duke.commands.EventCommand;","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"import duke.commands.FindCommand;","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"import duke.commands.InvalidCommand;","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"import duke.commands.ListCommand;","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"import duke.commands.MarkCommand;","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"import duke.commands.ToDoCommand;","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"import duke.commands.UnmarkCommand;","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"import duke.exceptions.InvalidDateTimeException;","lastModifiedDate":"2023-09-07"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"import duke.exceptions.InvalidDescriptionException;","lastModifiedDate":"2023-09-07"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"import duke.exceptions.InvalidKeywordException;","lastModifiedDate":"2023-09-07"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"import duke.exceptions.InvalidTaskIndexException;","lastModifiedDate":"2023-09-07"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"import duke.exceptions.MissingTaskIndexException;","lastModifiedDate":"2023-09-07"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2023-09-07"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.Event;","lastModifiedDate":"2023-09-07"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-09-07"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2023-09-07"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":" * The duke.parser.Parser class is responsible for parsing user input and","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":" * converting it into meaningful commands and tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"public class Parser {","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"     * Parses an input from user to get duke.commands.Command.","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"     * @param str The user input string.","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"     * @return The parsed command.","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"    public static Command getCommand(String str, Storage storage, TaskList taskList, Ui ui) {","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"ldinghan"},"content":"        String commandWord \u003d str.split(\" \")[0];","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"ldinghan"},"content":"        switch (commandWord) {","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"ldinghan"},"content":"        case \"list\":","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"ldinghan"},"content":"            return new ListCommand();","lastModifiedDate":"2023-09-09"},{"lineNumber":48,"author":{"gitId":"ldinghan"},"content":"        case \"mark\":","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"ldinghan"},"content":"            return new MarkCommand(str);","lastModifiedDate":"2023-09-09"},{"lineNumber":50,"author":{"gitId":"ldinghan"},"content":"        case \"unmark\":","lastModifiedDate":"2023-09-09"},{"lineNumber":51,"author":{"gitId":"ldinghan"},"content":"            return new UnmarkCommand(str);","lastModifiedDate":"2023-09-09"},{"lineNumber":52,"author":{"gitId":"ldinghan"},"content":"        case \"todo\":","lastModifiedDate":"2023-09-09"},{"lineNumber":53,"author":{"gitId":"ldinghan"},"content":"            return new ToDoCommand(str);","lastModifiedDate":"2023-09-09"},{"lineNumber":54,"author":{"gitId":"ldinghan"},"content":"        case \"deadline\":","lastModifiedDate":"2023-09-09"},{"lineNumber":55,"author":{"gitId":"ldinghan"},"content":"            return new DeadlineCommand(str);","lastModifiedDate":"2023-09-09"},{"lineNumber":56,"author":{"gitId":"ldinghan"},"content":"        case \"event\":","lastModifiedDate":"2023-09-09"},{"lineNumber":57,"author":{"gitId":"ldinghan"},"content":"            return new EventCommand(str);","lastModifiedDate":"2023-09-09"},{"lineNumber":58,"author":{"gitId":"ldinghan"},"content":"        case \"delete\":","lastModifiedDate":"2023-09-09"},{"lineNumber":59,"author":{"gitId":"ldinghan"},"content":"            return new DeleteCommand(str);","lastModifiedDate":"2023-09-09"},{"lineNumber":60,"author":{"gitId":"ldinghan"},"content":"        case \"find\":","lastModifiedDate":"2023-09-09"},{"lineNumber":61,"author":{"gitId":"ldinghan"},"content":"            return new FindCommand(str);","lastModifiedDate":"2023-09-09"},{"lineNumber":62,"author":{"gitId":"ldinghan"},"content":"        case \"bye\":","lastModifiedDate":"2023-09-09"},{"lineNumber":63,"author":{"gitId":"ldinghan"},"content":"            return new ByeCommand();","lastModifiedDate":"2023-09-09"},{"lineNumber":64,"author":{"gitId":"ldinghan"},"content":"        default:","lastModifiedDate":"2023-09-09"},{"lineNumber":65,"author":{"gitId":"ldinghan"},"content":"            return new InvalidCommand();","lastModifiedDate":"2023-09-09"},{"lineNumber":66,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":67,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"ldinghan"},"content":"     * Extracts the task index from a user input string and marks the task as done or undone.","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"ldinghan"},"content":"     * @param str    The user input string.","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"ldinghan"},"content":"     * @param tasks  The list of tasks to operate on.","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"ldinghan"},"content":"     * @return The index of the task that was marked.","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"ldinghan"},"content":"     * @throws InvalidTaskIndexException   If the task index is invalid.","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"ldinghan"},"content":"     * @throws MissingTaskIndexException  If the task index is missing.","lastModifiedDate":"2023-09-02"},{"lineNumber":77,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"ldinghan"},"content":"    public static int taskToMark(String str, TaskList tasks)","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"ldinghan"},"content":"            throws InvalidTaskIndexException, MissingTaskIndexException {","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"ldinghan"},"content":"        if (str.split(\" \").length \u003d\u003d 2) {","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"ldinghan"},"content":"            int taskIndex \u003d Integer.parseInt(str.split(\" \")[1]) - 1;","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"ldinghan"},"content":"            if (taskIndex + 1 \u003e tasks.getSize() || taskIndex \u003c 0) {","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"ldinghan"},"content":"                throw new InvalidTaskIndexException(\"Invalid Task Index.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"ldinghan"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"ldinghan"},"content":"            tasks.markTaskAsDone(taskIndex);","lastModifiedDate":"2023-09-02"},{"lineNumber":86,"author":{"gitId":"ldinghan"},"content":"            return taskIndex;","lastModifiedDate":"2023-09-09"},{"lineNumber":87,"author":{"gitId":"ldinghan"},"content":"        } else {","lastModifiedDate":"2023-09-09"},{"lineNumber":88,"author":{"gitId":"ldinghan"},"content":"            throw new MissingTaskIndexException(\"Task Index Missing.\");","lastModifiedDate":"2023-09-09"},{"lineNumber":89,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":90,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":91,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":92,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":93,"author":{"gitId":"ldinghan"},"content":"     * Parses a user input string to get the index of a task to unmark.","lastModifiedDate":"2023-09-09"},{"lineNumber":94,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":95,"author":{"gitId":"ldinghan"},"content":"     * @param str    The user input string.","lastModifiedDate":"2023-09-09"},{"lineNumber":96,"author":{"gitId":"ldinghan"},"content":"     * @param tasks  The list of tasks.","lastModifiedDate":"2023-09-09"},{"lineNumber":97,"author":{"gitId":"ldinghan"},"content":"     * @return The index of the task that was marked as undone.","lastModifiedDate":"2023-09-09"},{"lineNumber":98,"author":{"gitId":"ldinghan"},"content":"     * @throws InvalidTaskIndexException   If the task index is invalid.","lastModifiedDate":"2023-09-09"},{"lineNumber":99,"author":{"gitId":"ldinghan"},"content":"     * @throws MissingTaskIndexException  If the task index is missing.","lastModifiedDate":"2023-09-09"},{"lineNumber":100,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":101,"author":{"gitId":"ldinghan"},"content":"    public static int taskToUnmark(String str, TaskList tasks)","lastModifiedDate":"2023-09-09"},{"lineNumber":102,"author":{"gitId":"ldinghan"},"content":"            throws InvalidTaskIndexException, MissingTaskIndexException {","lastModifiedDate":"2023-09-09"},{"lineNumber":103,"author":{"gitId":"ldinghan"},"content":"        if (str.split(\" \").length \u003d\u003d 2) {","lastModifiedDate":"2023-09-09"},{"lineNumber":104,"author":{"gitId":"ldinghan"},"content":"            int taskIndex \u003d Integer.parseInt(str.split(\" \")[1]) - 1;","lastModifiedDate":"2023-09-09"},{"lineNumber":105,"author":{"gitId":"ldinghan"},"content":"            if (taskIndex + 1 \u003e tasks.getSize() || taskIndex \u003c 0) {","lastModifiedDate":"2023-09-09"},{"lineNumber":106,"author":{"gitId":"ldinghan"},"content":"                throw new InvalidTaskIndexException(\"Invalid Task Index.\");","lastModifiedDate":"2023-09-09"},{"lineNumber":107,"author":{"gitId":"ldinghan"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":108,"author":{"gitId":"ldinghan"},"content":"            tasks.markTaskAsUndone(taskIndex);","lastModifiedDate":"2023-09-09"},{"lineNumber":109,"author":{"gitId":"ldinghan"},"content":"            return taskIndex;","lastModifiedDate":"2023-09-02"},{"lineNumber":110,"author":{"gitId":"ldinghan"},"content":"        } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":111,"author":{"gitId":"ldinghan"},"content":"            throw new MissingTaskIndexException(\"Task Index Missing.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":112,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":113,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":114,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":115,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":116,"author":{"gitId":"ldinghan"},"content":"     * Extracts the keyword from user input and finds tasks with the specified keyword.","lastModifiedDate":"2023-09-02"},{"lineNumber":117,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":118,"author":{"gitId":"ldinghan"},"content":"     * @param str The user input string.","lastModifiedDate":"2023-09-02"},{"lineNumber":119,"author":{"gitId":"ldinghan"},"content":"     * @param tasks The list of tasks to operate on.","lastModifiedDate":"2023-09-02"},{"lineNumber":120,"author":{"gitId":"ldinghan"},"content":"     * @return A TaskList of tasks containing the keyword.","lastModifiedDate":"2023-09-02"},{"lineNumber":121,"author":{"gitId":"ldinghan"},"content":"     * @throws InvalidKeywordException If the keyword is missing, or if there is more than 1 keyword.","lastModifiedDate":"2023-09-02"},{"lineNumber":122,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":123,"author":{"gitId":"ldinghan"},"content":"    public static TaskList findKeyword(String str, TaskList tasks) throws InvalidKeywordException {","lastModifiedDate":"2023-09-02"},{"lineNumber":124,"author":{"gitId":"ldinghan"},"content":"        if (str.split(\" \").length \u003d\u003d 2) {","lastModifiedDate":"2023-09-02"},{"lineNumber":125,"author":{"gitId":"ldinghan"},"content":"            String keyword \u003d str.split(\" \")[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":126,"author":{"gitId":"ldinghan"},"content":"            return tasks.findTask(keyword);","lastModifiedDate":"2023-09-02"},{"lineNumber":127,"author":{"gitId":"ldinghan"},"content":"        } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":128,"author":{"gitId":"ldinghan"},"content":"            throw new InvalidKeywordException(\"Keyword given is not a single word.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":129,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":130,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":131,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":132,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":133,"author":{"gitId":"ldinghan"},"content":"     * Extracts the task index from a user input string and deletes the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":134,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":135,"author":{"gitId":"ldinghan"},"content":"     * @param str    The user input string.","lastModifiedDate":"2023-09-02"},{"lineNumber":136,"author":{"gitId":"ldinghan"},"content":"     * @param tasks  The list of tasks to operate on.","lastModifiedDate":"2023-09-02"},{"lineNumber":137,"author":{"gitId":"ldinghan"},"content":"     * @return The task that was deleted.","lastModifiedDate":"2023-09-02"},{"lineNumber":138,"author":{"gitId":"ldinghan"},"content":"     * @throws InvalidTaskIndexException   If the task index is invalid.","lastModifiedDate":"2023-09-02"},{"lineNumber":139,"author":{"gitId":"ldinghan"},"content":"     * @throws MissingTaskIndexException  If the task index is missing.","lastModifiedDate":"2023-09-02"},{"lineNumber":140,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":141,"author":{"gitId":"ldinghan"},"content":"    public static Task taskToDelete(String str, TaskList tasks)","lastModifiedDate":"2023-09-02"},{"lineNumber":142,"author":{"gitId":"ldinghan"},"content":"            throws InvalidTaskIndexException, MissingTaskIndexException {","lastModifiedDate":"2023-09-02"},{"lineNumber":143,"author":{"gitId":"ldinghan"},"content":"        if (str.split(\" \").length !\u003d 2) {","lastModifiedDate":"2023-09-07"},{"lineNumber":144,"author":{"gitId":"ldinghan"},"content":"            throw new MissingTaskIndexException(\"Task Index Missing.\");","lastModifiedDate":"2023-09-07"},{"lineNumber":145,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-07"},{"lineNumber":146,"author":{"gitId":"ldinghan"},"content":"        int taskIndex \u003d Integer.parseInt(str.split(\" \")[1]) - 1;","lastModifiedDate":"2023-09-02"},{"lineNumber":147,"author":{"gitId":"ldinghan"},"content":"        if (taskIndex + 1 \u003e tasks.getSize() || taskIndex \u003c 0) {","lastModifiedDate":"2023-09-02"},{"lineNumber":148,"author":{"gitId":"ldinghan"},"content":"            throw new InvalidTaskIndexException(\"Invalid Task Index.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":149,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":150,"author":{"gitId":"ldinghan"},"content":"        Task toRemove \u003d tasks.getTask(taskIndex);","lastModifiedDate":"2023-09-02"},{"lineNumber":151,"author":{"gitId":"ldinghan"},"content":"        tasks.deleteTask(taskIndex);","lastModifiedDate":"2023-09-02"},{"lineNumber":152,"author":{"gitId":"ldinghan"},"content":"        return toRemove;","lastModifiedDate":"2023-09-02"},{"lineNumber":153,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":154,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":155,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":156,"author":{"gitId":"ldinghan"},"content":"     * Parses a user input string into a task.","lastModifiedDate":"2023-09-02"},{"lineNumber":157,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":158,"author":{"gitId":"ldinghan"},"content":"     * @param str The user input string.","lastModifiedDate":"2023-09-02"},{"lineNumber":159,"author":{"gitId":"ldinghan"},"content":"     * @return The parsed task.","lastModifiedDate":"2023-09-02"},{"lineNumber":160,"author":{"gitId":"ldinghan"},"content":"     * @throws InvalidDescriptionException If the task description is invalid.","lastModifiedDate":"2023-09-02"},{"lineNumber":161,"author":{"gitId":"ldinghan"},"content":"     * @throws InvalidDateTimeException    If the task date and time are invalid.","lastModifiedDate":"2023-09-02"},{"lineNumber":162,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":163,"author":{"gitId":"ldinghan"},"content":"    public static Task parseStringToTask(String str, String commandWord)","lastModifiedDate":"2023-09-09"},{"lineNumber":164,"author":{"gitId":"ldinghan"},"content":"            throws InvalidDescriptionException, InvalidDateTimeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":165,"author":{"gitId":"ldinghan"},"content":"        switch(commandWord) {","lastModifiedDate":"2023-09-09"},{"lineNumber":166,"author":{"gitId":"ldinghan"},"content":"        case \"todo\":","lastModifiedDate":"2023-09-09"},{"lineNumber":167,"author":{"gitId":"ldinghan"},"content":"            if (str.split(\" \").length \u003e 1) {","lastModifiedDate":"2023-09-02"},{"lineNumber":168,"author":{"gitId":"ldinghan"},"content":"                ToDo todo \u003d new ToDo(str.split(\" \")[1]);","lastModifiedDate":"2023-09-02"},{"lineNumber":169,"author":{"gitId":"ldinghan"},"content":"                return todo;","lastModifiedDate":"2023-09-02"},{"lineNumber":170,"author":{"gitId":"ldinghan"},"content":"            } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":171,"author":{"gitId":"ldinghan"},"content":"                throw new InvalidDescriptionException(\"Invalid description.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":172,"author":{"gitId":"ldinghan"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":173,"author":{"gitId":"ldinghan"},"content":"        case \"deadline\":","lastModifiedDate":"2023-09-09"},{"lineNumber":174,"author":{"gitId":"ldinghan"},"content":"            if (str.split(\" \").length \u003e 3) {","lastModifiedDate":"2023-09-02"},{"lineNumber":175,"author":{"gitId":"ldinghan"},"content":"                String fullTaskDescription \u003d str.split(\" \", 2)[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":176,"author":{"gitId":"ldinghan"},"content":"                String description \u003d fullTaskDescription.split(\" /by \")[0];","lastModifiedDate":"2023-09-02"},{"lineNumber":177,"author":{"gitId":"ldinghan"},"content":"                String by \u003d fullTaskDescription.split(\" /by \")[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":178,"author":{"gitId":"ldinghan"},"content":"                String[] datetime \u003d by.split(\" \");","lastModifiedDate":"2023-09-02"},{"lineNumber":179,"author":{"gitId":"ldinghan"},"content":"                try {","lastModifiedDate":"2023-09-02"},{"lineNumber":180,"author":{"gitId":"ldinghan"},"content":"                    LocalDate date \u003d LocalDate.parse(datetime[0]);","lastModifiedDate":"2023-09-02"},{"lineNumber":181,"author":{"gitId":"ldinghan"},"content":"                    LocalTime time \u003d LocalTime.parse(datetime[1]);","lastModifiedDate":"2023-09-02"},{"lineNumber":182,"author":{"gitId":"ldinghan"},"content":"                    Deadline deadline \u003d new Deadline(description, date, time);","lastModifiedDate":"2023-09-02"},{"lineNumber":183,"author":{"gitId":"ldinghan"},"content":"                    return deadline;","lastModifiedDate":"2023-09-02"},{"lineNumber":184,"author":{"gitId":"ldinghan"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":185,"author":{"gitId":"ldinghan"},"content":"                    throw new InvalidDateTimeException(\"Invalid Datetime.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":186,"author":{"gitId":"ldinghan"},"content":"                }","lastModifiedDate":"2023-09-02"},{"lineNumber":187,"author":{"gitId":"ldinghan"},"content":"            } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":188,"author":{"gitId":"ldinghan"},"content":"                throw new InvalidDescriptionException(\"Invalid description.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":189,"author":{"gitId":"ldinghan"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":190,"author":{"gitId":"ldinghan"},"content":"        case \"event\":","lastModifiedDate":"2023-09-09"},{"lineNumber":191,"author":{"gitId":"ldinghan"},"content":"            if (str.split(\" \").length \u003e 4) {","lastModifiedDate":"2023-09-02"},{"lineNumber":192,"author":{"gitId":"ldinghan"},"content":"                String fullTaskDescription \u003d str.split(\" \", 2)[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":193,"author":{"gitId":"ldinghan"},"content":"                String description \u003d fullTaskDescription.split(\" /from \")[0];","lastModifiedDate":"2023-09-02"},{"lineNumber":194,"author":{"gitId":"ldinghan"},"content":"                String from \u003d String.join(\"\", fullTaskDescription.split(\" /from \")[1]).split(\" /to \")[0];","lastModifiedDate":"2023-09-02"},{"lineNumber":195,"author":{"gitId":"ldinghan"},"content":"                String to \u003d fullTaskDescription.split(\" /to \")[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":196,"author":{"gitId":"ldinghan"},"content":"                try {","lastModifiedDate":"2023-09-02"},{"lineNumber":197,"author":{"gitId":"ldinghan"},"content":"                    String[] fromDatetime \u003d from.split(\" \");","lastModifiedDate":"2023-09-02"},{"lineNumber":198,"author":{"gitId":"ldinghan"},"content":"                    String[] toDatetime \u003d to.split(\" \");","lastModifiedDate":"2023-09-02"},{"lineNumber":199,"author":{"gitId":"ldinghan"},"content":"                    LocalDate fromDate \u003d LocalDate.parse(fromDatetime[0]);","lastModifiedDate":"2023-09-02"},{"lineNumber":200,"author":{"gitId":"ldinghan"},"content":"                    LocalTime fromTime \u003d LocalTime.parse(fromDatetime[1]);","lastModifiedDate":"2023-09-02"},{"lineNumber":201,"author":{"gitId":"ldinghan"},"content":"                    LocalDate toDate \u003d LocalDate.parse(toDatetime[0]);","lastModifiedDate":"2023-09-02"},{"lineNumber":202,"author":{"gitId":"ldinghan"},"content":"                    LocalTime toTime \u003d LocalTime.parse(toDatetime[1]);","lastModifiedDate":"2023-09-02"},{"lineNumber":203,"author":{"gitId":"ldinghan"},"content":"                    Event event \u003d new Event(description, fromDate, fromTime, toDate, toTime);","lastModifiedDate":"2023-09-02"},{"lineNumber":204,"author":{"gitId":"ldinghan"},"content":"                    return event;","lastModifiedDate":"2023-09-02"},{"lineNumber":205,"author":{"gitId":"ldinghan"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":206,"author":{"gitId":"ldinghan"},"content":"                    throw new InvalidDateTimeException(\"Invalid Datetime\");","lastModifiedDate":"2023-09-02"},{"lineNumber":207,"author":{"gitId":"ldinghan"},"content":"                }","lastModifiedDate":"2023-09-02"},{"lineNumber":208,"author":{"gitId":"ldinghan"},"content":"            } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":209,"author":{"gitId":"ldinghan"},"content":"                throw new InvalidDescriptionException(\"Invalid description.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":210,"author":{"gitId":"ldinghan"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":211,"author":{"gitId":"ldinghan"},"content":"        default:","lastModifiedDate":"2023-09-02"},{"lineNumber":212,"author":{"gitId":"ldinghan"},"content":"            return null;","lastModifiedDate":"2023-09-02"},{"lineNumber":213,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":214,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":215,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"ldinghan":215}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import java.io.File;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.Event;","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2023-09-07"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":" * Manages the storage of tasks in a txt file.","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"public class Storage {","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"    protected String filePath;","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"    protected String directoryPath;","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"     * Initializes a new instance of the duke.storage.Storage class.","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"     * @param directoryPath The directory where the storage file is located or should be created.","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"     * @param filePath The file path of the storage file.","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"    public Storage(String directoryPath, String filePath) {","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"        this.directoryPath \u003d directoryPath;","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"        this.setupTasks();","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"     * Updates the storage file with the tasks from the provided duke.tasks.TaskList.","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"     * @param tasks The duke.tasks.TaskList containing tasks to be saved to the storage file.","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"    public void updateStorage(TaskList tasks) {","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"ldinghan"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"ldinghan"},"content":"            FileWriter writer \u003d new FileWriter(filePath);","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"ldinghan"},"content":"            for (int i \u003d 0; i \u003c tasks.getSize(); i++) {","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"ldinghan"},"content":"                writer.write(tasks.getTask(i) + System.lineSeparator());","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"ldinghan"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"ldinghan"},"content":"            writer.close();","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"ldinghan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"ldinghan"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"ldinghan"},"content":"            System.out.println(e);","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"ldinghan"},"content":"     * Sets up the tasks by reading from the storage file or creating a new one if it doesn\u0027t exist.","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"ldinghan"},"content":"     * @return A duke.tasks.TaskList containing the tasks read from the storage file, or an empty","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"ldinghan"},"content":"     *     duke.tasks.TaskList if the file is new.","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"ldinghan"},"content":"    private TaskList setupTasks() {","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"ldinghan"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"ldinghan"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"ldinghan"},"content":"            File directory \u003d new File(directoryPath);","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"ldinghan"},"content":"            if (!directory.exists()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"ldinghan"},"content":"                directory.mkdir();","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"ldinghan"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"ldinghan"},"content":"            File taskFile \u003d new File(filePath);","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"ldinghan"},"content":"            if (!taskFile.createNewFile()) {","lastModifiedDate":"2023-09-07"},{"lineNumber":71,"author":{"gitId":"ldinghan"},"content":"                tasks \u003d getTasks();","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"ldinghan"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"ldinghan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"ldinghan"},"content":"            System.out.println(\"Error occurred\");","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"ldinghan"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-02"},{"lineNumber":77,"author":{"gitId":"ldinghan"},"content":"        } finally {","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"ldinghan"},"content":"            return tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"ldinghan"},"content":"     * Retrieves tasks from the storage file and returns them in a duke.tasks.TaskList.","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"ldinghan"},"content":"     * @return A duke.tasks.TaskList containing tasks read from the storage file.","lastModifiedDate":"2023-09-02"},{"lineNumber":86,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":87,"author":{"gitId":"ldinghan"},"content":"    public TaskList getTasks() {","lastModifiedDate":"2023-09-02"},{"lineNumber":88,"author":{"gitId":"ldinghan"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-09-02"},{"lineNumber":89,"author":{"gitId":"ldinghan"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"ldinghan"},"content":"            Scanner scanner \u003d new Scanner(new File(filePath));","lastModifiedDate":"2023-09-02"},{"lineNumber":91,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":92,"author":{"gitId":"ldinghan"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"ldinghan"},"content":"                String str \u003d scanner.nextLine();","lastModifiedDate":"2023-09-02"},{"lineNumber":94,"author":{"gitId":"ldinghan"},"content":"                char taskType \u003d str.charAt(1);","lastModifiedDate":"2023-09-02"},{"lineNumber":95,"author":{"gitId":"ldinghan"},"content":"                boolean isMarked \u003d str.charAt(4) \u003d\u003d \u0027X\u0027;","lastModifiedDate":"2023-09-02"},{"lineNumber":96,"author":{"gitId":"ldinghan"},"content":"                String description \u003d str.split(\"] \")[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":97,"author":{"gitId":"ldinghan"},"content":"                switch (taskType) {","lastModifiedDate":"2023-09-02"},{"lineNumber":98,"author":{"gitId":"ldinghan"},"content":"                case \u0027T\u0027:","lastModifiedDate":"2023-09-02"},{"lineNumber":99,"author":{"gitId":"ldinghan"},"content":"                    ToDo taskT \u003d new ToDo(description);","lastModifiedDate":"2023-09-02"},{"lineNumber":100,"author":{"gitId":"ldinghan"},"content":"                    if (isMarked) {","lastModifiedDate":"2023-09-02"},{"lineNumber":101,"author":{"gitId":"ldinghan"},"content":"                        taskT.markAsDone();","lastModifiedDate":"2023-09-02"},{"lineNumber":102,"author":{"gitId":"ldinghan"},"content":"                    }","lastModifiedDate":"2023-09-02"},{"lineNumber":103,"author":{"gitId":"ldinghan"},"content":"                    taskList.addTask(taskT);","lastModifiedDate":"2023-09-02"},{"lineNumber":104,"author":{"gitId":"ldinghan"},"content":"                    break;","lastModifiedDate":"2023-09-02"},{"lineNumber":105,"author":{"gitId":"ldinghan"},"content":"                case \u0027D\u0027:","lastModifiedDate":"2023-09-02"},{"lineNumber":106,"author":{"gitId":"ldinghan"},"content":"                    description \u003d description.split(\" \\\\(by: \")[0];","lastModifiedDate":"2023-09-02"},{"lineNumber":107,"author":{"gitId":"ldinghan"},"content":"                    String by \u003d str.split(\" \\\\(by: \")[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":108,"author":{"gitId":"ldinghan"},"content":"                    LocalDate date \u003d LocalDate.parse(by.split(\" \")[0]);","lastModifiedDate":"2023-09-02"},{"lineNumber":109,"author":{"gitId":"ldinghan"},"content":"                    LocalTime time \u003d LocalTime.parse(by.split(\" \")[1].replaceAll(\".$\", \"\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":110,"author":{"gitId":"ldinghan"},"content":"                    Deadline taskD \u003d new Deadline(description, date, time);","lastModifiedDate":"2023-09-02"},{"lineNumber":111,"author":{"gitId":"ldinghan"},"content":"                    if (isMarked) {","lastModifiedDate":"2023-09-02"},{"lineNumber":112,"author":{"gitId":"ldinghan"},"content":"                        taskD.markAsDone();","lastModifiedDate":"2023-09-02"},{"lineNumber":113,"author":{"gitId":"ldinghan"},"content":"                    }","lastModifiedDate":"2023-09-02"},{"lineNumber":114,"author":{"gitId":"ldinghan"},"content":"                    taskList.addTask(taskD);","lastModifiedDate":"2023-09-02"},{"lineNumber":115,"author":{"gitId":"ldinghan"},"content":"                    break;","lastModifiedDate":"2023-09-02"},{"lineNumber":116,"author":{"gitId":"ldinghan"},"content":"                case \u0027E\u0027:","lastModifiedDate":"2023-09-02"},{"lineNumber":117,"author":{"gitId":"ldinghan"},"content":"                    description \u003d description.split(\" \\\\(from: \")[0];","lastModifiedDate":"2023-09-02"},{"lineNumber":118,"author":{"gitId":"ldinghan"},"content":"                    String from \u003d String.join(\"\", str.split(\"\\\\(from: \")[1]).split(\" to: \")[0];","lastModifiedDate":"2023-09-02"},{"lineNumber":119,"author":{"gitId":"ldinghan"},"content":"                    String to \u003d str.split(\" to: \")[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":120,"author":{"gitId":"ldinghan"},"content":"                    LocalDate fromDate \u003d LocalDate.parse(from.split(\" \")[0]);","lastModifiedDate":"2023-09-02"},{"lineNumber":121,"author":{"gitId":"ldinghan"},"content":"                    LocalTime fromTime \u003d LocalTime.parse(from.split(\" \")[1]);","lastModifiedDate":"2023-09-02"},{"lineNumber":122,"author":{"gitId":"ldinghan"},"content":"                    LocalDate toDate \u003d LocalDate.parse(to.split(\" \")[0]);","lastModifiedDate":"2023-09-02"},{"lineNumber":123,"author":{"gitId":"ldinghan"},"content":"                    LocalTime toTime \u003d LocalTime.parse(to.split(\" \")[1].replaceAll(\".$\", \"\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":124,"author":{"gitId":"ldinghan"},"content":"                    Event taskE \u003d new Event(description, fromDate, fromTime, toDate, toTime);","lastModifiedDate":"2023-09-02"},{"lineNumber":125,"author":{"gitId":"ldinghan"},"content":"                    if (isMarked) {","lastModifiedDate":"2023-09-02"},{"lineNumber":126,"author":{"gitId":"ldinghan"},"content":"                        taskE.markAsDone();","lastModifiedDate":"2023-09-02"},{"lineNumber":127,"author":{"gitId":"ldinghan"},"content":"                    }","lastModifiedDate":"2023-09-02"},{"lineNumber":128,"author":{"gitId":"ldinghan"},"content":"                    taskList.addTask(taskE);","lastModifiedDate":"2023-09-02"},{"lineNumber":129,"author":{"gitId":"ldinghan"},"content":"                    break;","lastModifiedDate":"2023-09-02"},{"lineNumber":130,"author":{"gitId":"ldinghan"},"content":"                default:","lastModifiedDate":"2023-09-07"},{"lineNumber":131,"author":{"gitId":"ldinghan"},"content":"                    break;","lastModifiedDate":"2023-09-07"},{"lineNumber":132,"author":{"gitId":"ldinghan"},"content":"                }","lastModifiedDate":"2023-09-02"},{"lineNumber":133,"author":{"gitId":"ldinghan"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":134,"author":{"gitId":"ldinghan"},"content":"            scanner.close();","lastModifiedDate":"2023-09-02"},{"lineNumber":135,"author":{"gitId":"ldinghan"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":136,"author":{"gitId":"ldinghan"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-02"},{"lineNumber":137,"author":{"gitId":"ldinghan"},"content":"        } finally {","lastModifiedDate":"2023-09-02"},{"lineNumber":138,"author":{"gitId":"ldinghan"},"content":"            return taskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":139,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":140,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":141,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":142,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"ldinghan":142}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":" * Represents a task with a specific deadline.","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":" * This class extends the duke.tasks.Task class and adds a deadline to it.","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"     * The deadline for this task.","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"    protected String by;","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"    protected LocalDate byDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"    protected LocalTime byTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"     * Constructs a duke.tasks.Deadline object with the given description and deadline.","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"     * @param byDate The date deadline for the task.","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"     * @param byTime The time deadline for the task.","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"    public Deadline(String description, LocalDate byDate, LocalTime byTime) {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"        this.byDate \u003d byDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"        this.byTime \u003d byTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"        this.by \u003d byDate.toString() + \" \" + byTime.toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"     * Returns a string representation of the duke.tasks.Deadline object.","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"     * @return A formatted string including the task type, description, and deadline.","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2023-08-22"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"ldinghan":40}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":" * Represents an event task that occurs within a specified time range.","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":" * This class extends the duke.tasks.Task class and adds the event\u0027s start and end times.","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"     * The start time of the event.","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"    protected LocalDate fromDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"    protected LocalTime fromTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"     * The end time of the event.","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"    protected LocalDate toDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"    protected LocalTime toTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"    protected String from;","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"    protected String to;","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"     * Constructs an duke.tasks.Event object with the given description, start date and time, and end date and time.","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"     * @param description The description of the event.","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"     * @param fromDate The start date of the event.","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"     * @param fromTime The start time of the event.","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"     * @param toDate The end date of the event.","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"     * @param toTime The end time of the event.","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"    public Event(String description, LocalDate fromDate, LocalTime fromTime, LocalDate toDate, LocalTime toTime) {","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"        this.fromDate \u003d fromDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"        this.fromTime \u003d fromTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"        this.toDate \u003d toDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"        this.toTime \u003d toTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"        this.from \u003d fromDate.toString() + \" \" + fromTime.toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"        this.to \u003d toDate.toString() + \" \" + toTime.toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"ldinghan"},"content":"     * Returns a string representation of the duke.tasks.Event object.","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"ldinghan"},"content":"     * @return A formatted string including the task type, description, start time, and end time.","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"ldinghan"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":49,"author":{"gitId":"ldinghan"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":50,"author":{"gitId":"ldinghan"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2023-08-22"},{"lineNumber":51,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":52,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"ldinghan":52}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":" * Represents a task with a description and completion status.","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":" * This class provides basic functionality for managing tasks.","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"public class Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"     * The description of the task.","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"    protected String description;","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"     * Indicates whether the task is done or not.","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"     * Constructs a duke.tasks.Task object with the given description.","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"     * Returns the description of the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"     * @return The description of the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"    public String getDescription() {","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"        return this.description;","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"     * Returns an icon representing the completion status of the task.","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"     * @return An \"X\" if the task is done, or a space if it\u0027s not done.","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"ldinghan"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"ldinghan"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":48,"author":{"gitId":"ldinghan"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-21"},{"lineNumber":49,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":50,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":51,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"ldinghan"},"content":"     * Marks the task as not done.","lastModifiedDate":"2023-08-23"},{"lineNumber":53,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"ldinghan"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":55,"author":{"gitId":"ldinghan"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":56,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":57,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":58,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"ldinghan"},"content":"     * Returns a string representation of the duke.tasks.Task object.","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":61,"author":{"gitId":"ldinghan"},"content":"     * @return A formatted string including the completion status icon and description.","lastModifiedDate":"2023-08-23"},{"lineNumber":62,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":63,"author":{"gitId":"ldinghan"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":64,"author":{"gitId":"ldinghan"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":65,"author":{"gitId":"ldinghan"},"content":"        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);","lastModifiedDate":"2023-08-21"},{"lineNumber":66,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":67,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"ldinghan":67}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":" * Represents a list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"public class TaskList {","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"     * Initialises a new instance of the duke.tasks.TaskList class.","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"    public TaskList() {","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"     * Gets the number of tasks in the list.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"     * @return The number of tasks in the list.","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"    public int getSize() {","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"     * Gets the task at the specified index.","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"     * @param index The index of the task to retrieve.","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"        return this.tasks.get(index);","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"     * Adds a task to the list.","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"     * @param task The task to add to the list.","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"ldinghan"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"ldinghan"},"content":"     * Deletes a task from the list at the specified index.","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"ldinghan"},"content":"     * @param index The index of the task to delete.","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"ldinghan"},"content":"    public void deleteTask(int index) {","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"ldinghan"},"content":"        this.tasks.remove(index);","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"ldinghan"},"content":"     * Marks a task at the specified index as done.","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"ldinghan"},"content":"     * @param index The index of the task to mark as done.","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"ldinghan"},"content":"    public void markTaskAsDone(int index) {","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"ldinghan"},"content":"        this.tasks.get(index).markAsDone();","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"ldinghan"},"content":"     * Marks a task at the specified index as undone.","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"ldinghan"},"content":"     * @param index The index of the task to mark as undone.","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"ldinghan"},"content":"    public void markTaskAsUndone(int index) {","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"ldinghan"},"content":"        this.tasks.get(index).markAsUndone();","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"ldinghan"},"content":"     * Creates a TaskList that contains the specified keyword.","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"ldinghan"},"content":"     * @param keyword The keyword that is searched for in the TaskList.","lastModifiedDate":"2023-09-02"},{"lineNumber":77,"author":{"gitId":"ldinghan"},"content":"     * @return A TaskList that contains the specified keyword.","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"ldinghan"},"content":"    public TaskList findTask(String keyword) {","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"ldinghan"},"content":"        TaskList tempTaskList \u003d new TaskList();","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"ldinghan"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"ldinghan"},"content":"            Task task \u003d this.tasks.get(i);","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"ldinghan"},"content":"            if (task.getDescription().contains(keyword)) {","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"ldinghan"},"content":"                tempTaskList.addTask(task);","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"ldinghan"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":86,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":87,"author":{"gitId":"ldinghan"},"content":"        return tempTaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":88,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":89,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":91,"author":{"gitId":"ldinghan"},"content":"     * Returns a string representation of the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":92,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"ldinghan"},"content":"     * @return A string representation of the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":94,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":95,"author":{"gitId":"ldinghan"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":96,"author":{"gitId":"ldinghan"},"content":"    public String toString() {","lastModifiedDate":"2023-09-02"},{"lineNumber":97,"author":{"gitId":"ldinghan"},"content":"        ArrayList\u003cString\u003e allTaskStrings \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-02"},{"lineNumber":98,"author":{"gitId":"ldinghan"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2023-09-02"},{"lineNumber":99,"author":{"gitId":"ldinghan"},"content":"            String taskString \u003d String.format(\"%d. %s\", i + 1, this.tasks.get(i).toString());","lastModifiedDate":"2023-09-02"},{"lineNumber":100,"author":{"gitId":"ldinghan"},"content":"            allTaskStrings.add(taskString);","lastModifiedDate":"2023-09-02"},{"lineNumber":101,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":102,"author":{"gitId":"ldinghan"},"content":"        return String.join(\"\\n\", allTaskStrings);","lastModifiedDate":"2023-09-02"},{"lineNumber":103,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":104,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":105,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":106,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":107,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"ldinghan":107}},{"path":"src/main/java/duke/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":" * Represents a to-do task without any specific time constraints.","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":" * This class extends the duke.tasks.Task class and represents a simple to-do item.","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"     * Constructs a duke.tasks.ToDo object with the given description.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"     * @param description The description of the to-do task.","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"     * Returns a string representation of the duke.tasks.ToDo object.","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"     * @return A formatted string including the task type and description.","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"ldinghan":26}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":" * The duke.ui.Ui class is responsible for managing user interactions and displaying messages.","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"public class Ui {","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"     * Displays a reply after adding a task.","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"     * @param str    The user input string.","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"     * @param tasks  The list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"     * @return       The reply message.","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"    public static String addTaskReply(String str, TaskList tasks) {","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"        return String.format(\"Ding: What does \u0027%s\u0027 mean? I\u0027ll just add it anyway.\\n \"","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"                + \"You have like %d tasks now\", str, tasks.getSize());","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"     * Displays a reply after marking a task as done.","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"     * @param taskIndex The index of the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"     * @param tasks     The list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"     * @return          The reply message.","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"    public static String markTaskReply(int taskIndex, TaskList tasks) {","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"        return String.format(\"Ding: Okay, I marked this task as done, \"","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"                    + \"but I have no idea what that means:\\n %s\", tasks.getTask(taskIndex));","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"     * Displays a reply after marking a task as undone.","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"     * @param taskIndex The index of the task.","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"     * @param tasks     The list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"     * @return          The reply message.","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"    public static String unmarkTaskReply(int taskIndex, TaskList tasks) {","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"        return String.format(\"Ding: Okay, I marked this task as undone, \"","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"ldinghan"},"content":"                + \"but I have no idea what that means:\\n %s\", tasks.getTask(taskIndex));","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"ldinghan"},"content":"     * Displays a reply after deleting a task.","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":50,"author":{"gitId":"ldinghan"},"content":"     * @param task  The task that was deleted.","lastModifiedDate":"2023-09-09"},{"lineNumber":51,"author":{"gitId":"ldinghan"},"content":"     * @param tasks The list of tasks.","lastModifiedDate":"2023-09-09"},{"lineNumber":52,"author":{"gitId":"ldinghan"},"content":"     * @return      The reply message.","lastModifiedDate":"2023-09-09"},{"lineNumber":53,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"ldinghan"},"content":"    public static String deleteTaskReply(Task task, TaskList tasks) {","lastModifiedDate":"2023-09-09"},{"lineNumber":55,"author":{"gitId":"ldinghan"},"content":"        return String.format(\"Ding: Okay, I\u0027ve forgotten this task, \\n\"","lastModifiedDate":"2023-09-09"},{"lineNumber":56,"author":{"gitId":"ldinghan"},"content":"                + \"so don\u0027t expect me to remember it:\\n %s\\n\"","lastModifiedDate":"2023-09-09"},{"lineNumber":57,"author":{"gitId":"ldinghan"},"content":"                + \"Ding: Right so now you have like %d tasks left\", task, tasks.getSize());","lastModifiedDate":"2023-09-09"},{"lineNumber":58,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":61,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"ldinghan"},"content":"     * Displays a reply when exiting the chatbot.","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":64,"author":{"gitId":"ldinghan"},"content":"     * @return The exit reply message.","lastModifiedDate":"2023-09-09"},{"lineNumber":65,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"ldinghan"},"content":"    public static String exitReply() {","lastModifiedDate":"2023-09-09"},{"lineNumber":67,"author":{"gitId":"ldinghan"},"content":"        return \"____________________________________________________________\\n\"","lastModifiedDate":"2023-09-09"},{"lineNumber":68,"author":{"gitId":"ldinghan"},"content":"                + \"Ding: Bye. Hopefully I get to see you again soon!\\n\"","lastModifiedDate":"2023-09-09"},{"lineNumber":69,"author":{"gitId":"ldinghan"},"content":"                + \"____________________________________________________________\";","lastModifiedDate":"2023-09-09"},{"lineNumber":70,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"ldinghan"},"content":"     * Displays an introductory message when starting the chatbot.","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":75,"author":{"gitId":"ldinghan"},"content":"     * @return The introductory reply message.","lastModifiedDate":"2023-09-09"},{"lineNumber":76,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":77,"author":{"gitId":"ldinghan"},"content":"    public static String introReply() {","lastModifiedDate":"2023-09-09"},{"lineNumber":78,"author":{"gitId":"ldinghan"},"content":"        return \"____________________________________________________________\\n\"","lastModifiedDate":"2023-09-09"},{"lineNumber":79,"author":{"gitId":"ldinghan"},"content":"                + \"Hello! I\u0027m Ding!\\n\"","lastModifiedDate":"2023-09-09"},{"lineNumber":80,"author":{"gitId":"ldinghan"},"content":"                + \"What can I do for you?\\n\"","lastModifiedDate":"2023-09-09"},{"lineNumber":81,"author":{"gitId":"ldinghan"},"content":"                + \"____________________________________________________________\\n\";","lastModifiedDate":"2023-09-09"},{"lineNumber":82,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"ldinghan"},"content":"     * Displays the list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":86,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":87,"author":{"gitId":"ldinghan"},"content":"     * @param tasks The list of tasks to display.","lastModifiedDate":"2023-09-02"},{"lineNumber":88,"author":{"gitId":"ldinghan"},"content":"     * @return      The reply message containing the task list.","lastModifiedDate":"2023-09-09"},{"lineNumber":89,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"ldinghan"},"content":"    public static String printListReply(TaskList tasks) {","lastModifiedDate":"2023-09-09"},{"lineNumber":91,"author":{"gitId":"ldinghan"},"content":"        return String.format(\"Ding: These are your tasks... \"","lastModifiedDate":"2023-09-09"},{"lineNumber":92,"author":{"gitId":"ldinghan"},"content":"                + \"If I remember correctly:\\n%s\\n\", tasks);","lastModifiedDate":"2023-09-09"},{"lineNumber":93,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":94,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":95,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":96,"author":{"gitId":"ldinghan"},"content":"     * Displays a reply for finding tasks.","lastModifiedDate":"2023-09-09"},{"lineNumber":97,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":98,"author":{"gitId":"ldinghan"},"content":"     * @param str   The user input containing the keyword.","lastModifiedDate":"2023-09-02"},{"lineNumber":99,"author":{"gitId":"ldinghan"},"content":"     * @param tasks The list of tasks to display.","lastModifiedDate":"2023-09-02"},{"lineNumber":100,"author":{"gitId":"ldinghan"},"content":"     * @return      The reply message containing the found tasks.","lastModifiedDate":"2023-09-09"},{"lineNumber":101,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":102,"author":{"gitId":"ldinghan"},"content":"    public static String findTaskReply(String str, TaskList tasks) {","lastModifiedDate":"2023-09-09"},{"lineNumber":103,"author":{"gitId":"ldinghan"},"content":"        return String.format(\"I will help you %s\\n\", str)","lastModifiedDate":"2023-09-09"},{"lineNumber":104,"author":{"gitId":"ldinghan"},"content":"                + printListReply(tasks);","lastModifiedDate":"2023-09-09"},{"lineNumber":105,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":106,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":107,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":108,"author":{"gitId":"ldinghan"},"content":"     * Displays a reply for an illegal argument exception.","lastModifiedDate":"2023-09-02"},{"lineNumber":109,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":110,"author":{"gitId":"ldinghan"},"content":"     * @return The reply message for an illegal argument exception.","lastModifiedDate":"2023-09-09"},{"lineNumber":111,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":112,"author":{"gitId":"ldinghan"},"content":"    public static String illegalArgumentExceptionReply() {","lastModifiedDate":"2023-09-09"},{"lineNumber":113,"author":{"gitId":"ldinghan"},"content":"        return \"Ding: I seriously have no idea what I need to do here\\n\"","lastModifiedDate":"2023-09-09"},{"lineNumber":114,"author":{"gitId":"ldinghan"},"content":"                + \"Ding: No way you forgot to even input a proper command...\\n\"","lastModifiedDate":"2023-09-09"},{"lineNumber":115,"author":{"gitId":"ldinghan"},"content":"                + \"Ding: Available commands are \u0027todo\u0027, \u0027deadline\u0027, \u0027event\u0027, \\n\"","lastModifiedDate":"2023-09-09"},{"lineNumber":116,"author":{"gitId":"ldinghan"},"content":"                + \"\u0027list\u0027, \u0027mark\u0027, \u0027unmark\u0027, \u0027delete\u0027, \u0027find\u0027, \u0027bye\u0027\\n\";","lastModifiedDate":"2023-09-09"},{"lineNumber":117,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":118,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":119,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":120,"author":{"gitId":"ldinghan"},"content":"     * Displays a reply for an invalid task description exception.","lastModifiedDate":"2023-09-02"},{"lineNumber":121,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":122,"author":{"gitId":"ldinghan"},"content":"     * @return The reply message for an invalid task description exception.","lastModifiedDate":"2023-09-09"},{"lineNumber":123,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":124,"author":{"gitId":"ldinghan"},"content":"    public static String invalidDescriptionExceptionReply() {","lastModifiedDate":"2023-09-09"},{"lineNumber":125,"author":{"gitId":"ldinghan"},"content":"        return \"Ding: I may be forgetful but you\u0027re so bad you even forgot the task description...\\n\"","lastModifiedDate":"2023-09-09"},{"lineNumber":126,"author":{"gitId":"ldinghan"},"content":"                + \"Ding: For ToDos, input \u0027todo (task)\u0027\\n\"","lastModifiedDate":"2023-09-09"},{"lineNumber":127,"author":{"gitId":"ldinghan"},"content":"                + \"Ding: For Deadlines, input \u0027deadline (task) /by (date or time)\\n\"","lastModifiedDate":"2023-09-09"},{"lineNumber":128,"author":{"gitId":"ldinghan"},"content":"                + \"Ding: For Events, input \u0027event (task) /from (date or time) /to (date or time)\";","lastModifiedDate":"2023-09-09"},{"lineNumber":129,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":130,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":131,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":132,"author":{"gitId":"ldinghan"},"content":"     * Displays a reply for an invalid task index exception.","lastModifiedDate":"2023-09-02"},{"lineNumber":133,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":134,"author":{"gitId":"ldinghan"},"content":"     * @param tasks The list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":135,"author":{"gitId":"ldinghan"},"content":"     * @return      The reply message for an invalid task index exception.","lastModifiedDate":"2023-09-09"},{"lineNumber":136,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":137,"author":{"gitId":"ldinghan"},"content":"    public static String invalidTaskIndexExceptionReply(TaskList tasks) {","lastModifiedDate":"2023-09-09"},{"lineNumber":138,"author":{"gitId":"ldinghan"},"content":"        String startOfReply \u003d \"Ding: Oh wait it\u0027s not lost, \\n\"","lastModifiedDate":"2023-09-09"},{"lineNumber":139,"author":{"gitId":"ldinghan"},"content":"                + \"the task number you gave just doesn\u0027t exist in your list...\";","lastModifiedDate":"2023-09-09"},{"lineNumber":140,"author":{"gitId":"ldinghan"},"content":"        if (tasks.getSize() \u003e 0) {","lastModifiedDate":"2023-09-02"},{"lineNumber":141,"author":{"gitId":"ldinghan"},"content":"            startOfReply +\u003d String.format(\"Ding: Please input a task number from 1 to %d\", tasks.getSize());","lastModifiedDate":"2023-09-09"},{"lineNumber":142,"author":{"gitId":"ldinghan"},"content":"        } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":143,"author":{"gitId":"ldinghan"},"content":"            startOfReply +\u003d \"Ding: You have nothing in your task list... \"","lastModifiedDate":"2023-09-09"},{"lineNumber":144,"author":{"gitId":"ldinghan"},"content":"                    + \"What are you even trying to get me to do?\";","lastModifiedDate":"2023-09-09"},{"lineNumber":145,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":146,"author":{"gitId":"ldinghan"},"content":"        return startOfReply;","lastModifiedDate":"2023-09-09"},{"lineNumber":147,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":148,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":149,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":150,"author":{"gitId":"ldinghan"},"content":"     * Displays a reply for a missing task index exception.","lastModifiedDate":"2023-09-02"},{"lineNumber":151,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":152,"author":{"gitId":"ldinghan"},"content":"     * @return The reply message for a missing task index exception.","lastModifiedDate":"2023-09-09"},{"lineNumber":153,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":154,"author":{"gitId":"ldinghan"},"content":"    public static String missingTaskIndexExceptionReply() {","lastModifiedDate":"2023-09-09"},{"lineNumber":155,"author":{"gitId":"ldinghan"},"content":"        return \"Ding: I don\u0027t quite understand what you want to do...\\n\"","lastModifiedDate":"2023-09-09"},{"lineNumber":156,"author":{"gitId":"ldinghan"},"content":"                + \"Ding: Please input \u0027(command) (task number)\u0027...\";","lastModifiedDate":"2023-09-09"},{"lineNumber":157,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":158,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":159,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":160,"author":{"gitId":"ldinghan"},"content":"     * Displays a reply for an invalid date-time format exception.","lastModifiedDate":"2023-09-02"},{"lineNumber":161,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":162,"author":{"gitId":"ldinghan"},"content":"     * @return The reply message for an invalid date-time format exception.","lastModifiedDate":"2023-09-09"},{"lineNumber":163,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":164,"author":{"gitId":"ldinghan"},"content":"    public static String invalidDateTimeExceptionReply() {","lastModifiedDate":"2023-09-09"},{"lineNumber":165,"author":{"gitId":"ldinghan"},"content":"        return \"Ding: I already told you... \\n\"","lastModifiedDate":"2023-09-09"},{"lineNumber":166,"author":{"gitId":"ldinghan"},"content":"                + \"please enter the timestamps in this format \u0027YYYY-MM-DD HH:mm\u0027\";","lastModifiedDate":"2023-09-09"},{"lineNumber":167,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":168,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":169,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":170,"author":{"gitId":"ldinghan"},"content":"     * Displays a reply for an invalid keyword exception.","lastModifiedDate":"2023-09-02"},{"lineNumber":171,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":172,"author":{"gitId":"ldinghan"},"content":"     * @return The reply message for an invalid keyword exception.","lastModifiedDate":"2023-09-09"},{"lineNumber":173,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":174,"author":{"gitId":"ldinghan"},"content":"    public static String invalidKeywordExceptionReply() {","lastModifiedDate":"2023-09-09"},{"lineNumber":175,"author":{"gitId":"ldinghan"},"content":"        return \"Ding: Please use the format \u0027find (keyword)\u0027 so I that can help you look around\";","lastModifiedDate":"2023-09-09"},{"lineNumber":176,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":177,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"ldinghan":177}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"ldinghan":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"ldinghan":19}},{"path":"src/test/java/duke/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.parser;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-07"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2023-09-07"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-09-07"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-07"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":" * Represents a test class for Parser","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"public class ParserTest {","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"     * Tests parsing of input string to a Task.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"    @Test","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"    public void testStringToTask() {","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"            Task deadline \u003d Parser.parseStringToTask(\"deadline Assignment 0 /by 2023-09-04 23:59\", \"deadline\");","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"            assertEquals(new Deadline(\"Assignment 0\", LocalDate.parse(\"2023-09-04\"),","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"                    LocalTime.parse(\"23:59\")).toString(), deadline.toString());","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"            System.out.println(e.getMessage());","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"    @Test","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"    public void testParseInvalidTaskIndex() {","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"            Parser.taskToDelete(\"delete 2\", new TaskList());","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"            fail();","lastModifiedDate":"2023-09-07"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-09-07"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"            assertEquals(\"Invalid Task Index.\", e.getMessage());","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"ldinghan":43}},{"path":"src/test/java/duke/tasks/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-07"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-07"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":" * Represents a test class for ToDo","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"public class ToDoTest {","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"     * Tests string conversion of ToDo to a string.","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"    @Test","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"    public void testToString() {","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"        assertEquals(\"[T][ ] Sleep\", new ToDo(\"Sleep\").toString());","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"     * Tests marking and unmarking of ToDo.","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"    @Test","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"    public void testMarkDoneAndUndone() {","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"        ToDo todo \u003d new ToDo(\"Run\");","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"        todo.markAsDone();","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"        assertEquals(\"[T][X] Run\", todo.toString());","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"        todo.markAsUndone();","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"        assertEquals(\"[T][ ] Run\", todo.toString());","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"ldinghan":31}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"todo go to the library","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"deadline sleep and shower /by 10pm","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"event visit the museum /from Wed 10am /to Wed 1pm","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"deadline return book /by Sat 10pm","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"mark 1","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"mark 2","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"unmark 2","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"bye","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"ldinghan":10}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ldinghan":1,"-":20}}]
