[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"# duke.Duke project template","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ldinghan":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ldinghan":1,"-":41}},{"path":"data/ding.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"[T][X] b","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"[T][ ] a","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"[E][ ] sleep (from: 2023-09-02 22:00 to: 2023-09-03 06:30)","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"[T][ ] x","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"[T][ ] baby","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"[T][ ] back","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"[T][ ] sleep","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"ldinghan":7}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import duke.commands.Command;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import duke.exceptions.*;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":" * The main class for the Ding Chatbot application.","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"    private Storage storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"     * Constructs a new instance of the duke.Duke class.","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"     * Initializes the storage and task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"    public Duke() {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"        storage \u003d new Storage(\"./data\", \"./data/ding.txt\");","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"        tasks \u003d storage.getTasks();","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"     * Runs the main loop of the chatbot application.","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"     * Handles user input, executes commands, and interacts with the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"    public void run() {","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"        Ui.introReply();","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"        String str \u003d sc.nextLine();","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"        boolean isRunning \u003d true;","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"        while (isRunning) {","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"            try {","lastModifiedDate":"2023-08-22"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"                Command command \u003d Parser.getCommand(str);","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"                switch (command) {","lastModifiedDate":"2023-08-22"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"                case LIST:","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"                    Ui.printListReply(tasks);","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"ldinghan"},"content":"                    break;","lastModifiedDate":"2023-08-22"},{"lineNumber":45,"author":{"gitId":"ldinghan"},"content":"                case MARK:","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"ldinghan"},"content":"                case UNMARK:","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"ldinghan"},"content":"                    Ui.markTaskReply(Parser.taskToMark(str, tasks), tasks, command);","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"ldinghan"},"content":"                    break;","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"ldinghan"},"content":"                case TODO:","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"ldinghan"},"content":"                case DEADLINE:","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"ldinghan"},"content":"                case EVENT:","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"ldinghan"},"content":"                    tasks.addTask(Parser.parseStringToTask(str));","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"ldinghan"},"content":"                    Ui.addTaskReply(str, tasks);","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"ldinghan"},"content":"                    break;","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"ldinghan"},"content":"                case DELETE:","lastModifiedDate":"2023-08-30"},{"lineNumber":56,"author":{"gitId":"ldinghan"},"content":"                    Ui.deleteTaskReply(Parser.taskToDelete(str, tasks), tasks);","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"ldinghan"},"content":"                    break;","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"ldinghan"},"content":"                case FIND:","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"ldinghan"},"content":"                    Ui.findTaskReply(str, Parser.findKeyword(str, tasks));","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"ldinghan"},"content":"                    break;","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"ldinghan"},"content":"                case BYE:","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"ldinghan"},"content":"                    isRunning \u003d false;","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"ldinghan"},"content":"                    Ui.exitReply();","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"ldinghan"},"content":"                    return;","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"ldinghan"},"content":"                default:","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"ldinghan"},"content":"                    Ui.illegalArgumentExceptionReply();","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"ldinghan"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"ldinghan"},"content":"            } catch (InvalidTaskIndexException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"ldinghan"},"content":"                Ui.invalidTaskIndexExceptionReply(tasks);","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"ldinghan"},"content":"            } catch (MissingTaskIndexException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"ldinghan"},"content":"                Ui.missingTaskIndexExceptionReply();","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"ldinghan"},"content":"            } catch (InvalidDescriptionException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"ldinghan"},"content":"                Ui.invalidDescriptionExceptionReply();","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"ldinghan"},"content":"            } catch (InvalidDateTimeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"ldinghan"},"content":"                Ui.invalidDateTimeExceptionReply();","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"ldinghan"},"content":"            } catch (InvalidKeywordException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":77,"author":{"gitId":"ldinghan"},"content":"                Ui.invalidKeywordExceptionReply();","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"ldinghan"},"content":"            } finally {","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"ldinghan"},"content":"                storage.updateStorage(tasks);","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"ldinghan"},"content":"                if (isRunning) {","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"ldinghan"},"content":"                    Ui.horizontalLineReply();","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"ldinghan"},"content":"                    str \u003d sc.nextLine();","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"ldinghan"},"content":"                }","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"ldinghan"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":86,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":87,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":89,"author":{"gitId":"ldinghan"},"content":"     * Main function for Ding Chatbot","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"ldinghan"},"content":"     * @param args command-line arguments","lastModifiedDate":"2023-09-02"},{"lineNumber":91,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":92,"author":{"gitId":"ldinghan"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"ldinghan"},"content":"        new Duke().run();","lastModifiedDate":"2023-09-02"},{"lineNumber":94,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":95,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"ldinghan":92,"-":3}},{"path":"src/main/java/duke/commands/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.commands;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"public enum Command {","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"    TODO,","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"    DEADLINE,","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"    EVENT,","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"    LIST,","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"    MARK,","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"    UNMARK,","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"    DELETE,","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"    FIND,","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"    BYE","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"ldinghan":13}},{"path":"src/main/java/duke/exceptions/InvalidDateTimeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.exceptions;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":" * An exception class that represents an invalid task description in a task management application.","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":" * This exception is thrown when an operation encounters an invalid or empty task description.","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"public class InvalidDateTimeException extends Exception {","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"     * Constructs an duke.exceptions.InvalidDateTimeException with the specified detail message.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"     * @param message The detail message explaining the cause of the exception.","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"    public InvalidDateTimeException(String message) {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"        super(message);","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"ldinghan":16}},{"path":"src/main/java/duke/exceptions/InvalidDescriptionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.exceptions;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":" * An exception class that represents an invalid task description in a task management application.","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":" * This exception is thrown when an operation encounters an invalid or empty task description.","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"public class InvalidDescriptionException extends Exception {","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"     * Constructs an duke.exceptions.InvalidDescriptionException with the specified detail message.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"     * @param message The detail message explaining the cause of the exception.","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"    public InvalidDescriptionException(String message) {","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"        super(message);","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"ldinghan":16}},{"path":"src/main/java/duke/exceptions/InvalidKeywordException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.exceptions;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":" * An exception class that represents an invalid keyword exception when finding relevant tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":" * This exception is thrown when an operation expects a valid keyword but none is provided, or if there","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":" * is more than 1 keyword.","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"public class InvalidKeywordException extends Exception {","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"     * Constructs a duke.exceptions.InvalidKeywordException with the specified detail message.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"     * @param message The detail message explaining the cause of the exception.","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"    public InvalidKeywordException(String message) {","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"        super(message);","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"ldinghan":17}},{"path":"src/main/java/duke/exceptions/InvalidTaskIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.exceptions;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":" * An exception class that represents an invalid task index in a task list.","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":" * This exception is thrown when an operation encounters an index that is out of bounds or not valid.","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"public class InvalidTaskIndexException extends Exception {","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"     * Constructs an duke.exceptions.InvalidTaskIndexException with the specified detail message.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"     * @param message The detail message explaining the cause of the exception.","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"    public InvalidTaskIndexException(String message) {","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"        super(message);","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"ldinghan":16}},{"path":"src/main/java/duke/exceptions/MissingTaskIndexException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.exceptions;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":" * An exception class that represents a missing task index in a task list.","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":" * This exception is thrown when an operation expects a valid task index but none is provided.","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"public class MissingTaskIndexException extends Exception {","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"     * Constructs a duke.exceptions.MissingTaskIndexException with the specified detail message.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"     * @param message The detail message explaining the cause of the exception.","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"    public MissingTaskIndexException(String message) {","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"        super(message);","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"ldinghan":16}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.parser;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import duke.commands.Command;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import duke.exceptions.*;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.*;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":" * The duke.parser.Parser class is responsible for parsing user input and","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":" * converting it into meaningful commands and tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"public class Parser {","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"     * Parses an input from user to get duke.commands.Command.","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"     * @param str The user input string.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"     * @return The parsed command.","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"    public static Command getCommand(String str) {","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"        String command_word \u003d str.split(\" \")[0];","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"        Command command \u003d Command.valueOf(command_word.toUpperCase());","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"        return command;","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"     * Extracts the task index from a user input string and marks the task as done or undone.","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"     * @param str    The user input string.","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"     * @param tasks  The list of tasks to operate on.","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"     * @return The index of the task that was marked.","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"     * @throws InvalidTaskIndexException   If the task index is invalid.","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"     * @throws MissingTaskIndexException  If the task index is missing.","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"    public static int taskToMark(String str, TaskList tasks)","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"            throws InvalidTaskIndexException, MissingTaskIndexException {","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"        if (str.split(\" \").length \u003d\u003d 2) {","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"            int taskIndex \u003d Integer.parseInt(str.split(\" \")[1]) - 1;","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"            if (taskIndex + 1 \u003e tasks.getSize() || taskIndex \u003c 0) {","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"                throw new InvalidTaskIndexException(\"Invalid Task Index.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"ldinghan"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"ldinghan"},"content":"            Command command \u003d getCommand(str);","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"ldinghan"},"content":"            switch (command) {","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"ldinghan"},"content":"            case MARK:","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"ldinghan"},"content":"                tasks.markTaskAsDone(taskIndex);","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"ldinghan"},"content":"                break;","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"ldinghan"},"content":"            case UNMARK:","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"ldinghan"},"content":"                tasks.markTaskAsUndone(taskIndex);","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"ldinghan"},"content":"                break;","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"ldinghan"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"ldinghan"},"content":"            return taskIndex;","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"ldinghan"},"content":"        } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"ldinghan"},"content":"            throw new MissingTaskIndexException(\"Task Index Missing.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"ldinghan"},"content":"     * Extracts the keyword from user input and finds tasks with the specified keyword.","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"ldinghan"},"content":"     * @param str The user input string.","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"ldinghan"},"content":"     * @param tasks The list of tasks to operate on.","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"ldinghan"},"content":"     * @return A TaskList of tasks containing the keyword.","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"ldinghan"},"content":"     * @throws InvalidKeywordException If the keyword is missing, or if there is more than 1 keyword.","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"ldinghan"},"content":"    public static TaskList findKeyword(String str, TaskList tasks) throws InvalidKeywordException {","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"ldinghan"},"content":"        if (str.split(\" \").length \u003d\u003d 2) {","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"ldinghan"},"content":"            String keyword \u003d str.split(\" \")[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"ldinghan"},"content":"            return tasks.findTask(keyword);","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"ldinghan"},"content":"        } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"ldinghan"},"content":"            throw new InvalidKeywordException(\"Keyword given is not a single word.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":77,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"ldinghan"},"content":"     * Extracts the task index from a user input string and deletes the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"ldinghan"},"content":"     * @param str    The user input string.","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"ldinghan"},"content":"     * @param tasks  The list of tasks to operate on.","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"ldinghan"},"content":"     * @return The task that was deleted.","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"ldinghan"},"content":"     * @throws InvalidTaskIndexException   If the task index is invalid.","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"ldinghan"},"content":"     * @throws MissingTaskIndexException  If the task index is missing.","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":86,"author":{"gitId":"ldinghan"},"content":"    public static Task taskToDelete(String str, TaskList tasks)","lastModifiedDate":"2023-09-02"},{"lineNumber":87,"author":{"gitId":"ldinghan"},"content":"            throws InvalidTaskIndexException, MissingTaskIndexException{","lastModifiedDate":"2023-09-02"},{"lineNumber":88,"author":{"gitId":"ldinghan"},"content":"        if (str.split(\" \").length \u003d\u003d 2) {","lastModifiedDate":"2023-09-02"},{"lineNumber":89,"author":{"gitId":"ldinghan"},"content":"            int taskIndex \u003d Integer.parseInt(str.split(\" \")[1]) - 1;","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"ldinghan"},"content":"            if (taskIndex + 1 \u003e tasks.getSize() || taskIndex \u003c 0) {","lastModifiedDate":"2023-09-02"},{"lineNumber":91,"author":{"gitId":"ldinghan"},"content":"                throw new InvalidTaskIndexException(\"Invalid Task Index.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":92,"author":{"gitId":"ldinghan"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"ldinghan"},"content":"            Task toRemove \u003d tasks.getTask(taskIndex);","lastModifiedDate":"2023-09-02"},{"lineNumber":94,"author":{"gitId":"ldinghan"},"content":"            tasks.deleteTask(taskIndex);","lastModifiedDate":"2023-09-02"},{"lineNumber":95,"author":{"gitId":"ldinghan"},"content":"            return toRemove;","lastModifiedDate":"2023-09-02"},{"lineNumber":96,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":97,"author":{"gitId":"ldinghan"},"content":"        } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":98,"author":{"gitId":"ldinghan"},"content":"            throw new MissingTaskIndexException(\"Task Index Missing.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":99,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":100,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":101,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":102,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":103,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":104,"author":{"gitId":"ldinghan"},"content":"     * Parses a user input string into a task.","lastModifiedDate":"2023-09-02"},{"lineNumber":105,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":106,"author":{"gitId":"ldinghan"},"content":"     * @param str The user input string.","lastModifiedDate":"2023-09-02"},{"lineNumber":107,"author":{"gitId":"ldinghan"},"content":"     * @return The parsed task.","lastModifiedDate":"2023-09-02"},{"lineNumber":108,"author":{"gitId":"ldinghan"},"content":"     * @throws InvalidDescriptionException If the task description is invalid.","lastModifiedDate":"2023-09-02"},{"lineNumber":109,"author":{"gitId":"ldinghan"},"content":"     * @throws InvalidDateTimeException    If the task date and time are invalid.","lastModifiedDate":"2023-09-02"},{"lineNumber":110,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":111,"author":{"gitId":"ldinghan"},"content":"    public static Task parseStringToTask(String str)","lastModifiedDate":"2023-09-02"},{"lineNumber":112,"author":{"gitId":"ldinghan"},"content":"            throws InvalidDescriptionException, InvalidDateTimeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":113,"author":{"gitId":"ldinghan"},"content":"        Command command \u003d getCommand(str);","lastModifiedDate":"2023-09-02"},{"lineNumber":114,"author":{"gitId":"ldinghan"},"content":"        switch(command) {","lastModifiedDate":"2023-09-02"},{"lineNumber":115,"author":{"gitId":"ldinghan"},"content":"        case TODO:","lastModifiedDate":"2023-09-02"},{"lineNumber":116,"author":{"gitId":"ldinghan"},"content":"            if (str.split(\" \").length \u003e 1) {","lastModifiedDate":"2023-09-02"},{"lineNumber":117,"author":{"gitId":"ldinghan"},"content":"                ToDo todo \u003d new ToDo(str.split(\" \")[1]);","lastModifiedDate":"2023-09-02"},{"lineNumber":118,"author":{"gitId":"ldinghan"},"content":"                return todo;","lastModifiedDate":"2023-09-02"},{"lineNumber":119,"author":{"gitId":"ldinghan"},"content":"            } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":120,"author":{"gitId":"ldinghan"},"content":"                throw new InvalidDescriptionException(\"Invalid description.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":121,"author":{"gitId":"ldinghan"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":122,"author":{"gitId":"ldinghan"},"content":"        case DEADLINE:","lastModifiedDate":"2023-09-02"},{"lineNumber":123,"author":{"gitId":"ldinghan"},"content":"            if (str.split(\" \").length \u003e 3) {","lastModifiedDate":"2023-09-02"},{"lineNumber":124,"author":{"gitId":"ldinghan"},"content":"                String fullTaskDescription \u003d str.split(\" \", 2)[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":125,"author":{"gitId":"ldinghan"},"content":"                String description \u003d fullTaskDescription.split(\" /by \")[0];","lastModifiedDate":"2023-09-02"},{"lineNumber":126,"author":{"gitId":"ldinghan"},"content":"                String by \u003d fullTaskDescription.split(\" /by \")[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":127,"author":{"gitId":"ldinghan"},"content":"                String[] datetime \u003d by.split(\" \");","lastModifiedDate":"2023-09-02"},{"lineNumber":128,"author":{"gitId":"ldinghan"},"content":"                try {","lastModifiedDate":"2023-09-02"},{"lineNumber":129,"author":{"gitId":"ldinghan"},"content":"                    LocalDate date \u003d LocalDate.parse(datetime[0]);","lastModifiedDate":"2023-09-02"},{"lineNumber":130,"author":{"gitId":"ldinghan"},"content":"                    LocalTime time \u003d LocalTime.parse(datetime[1]);","lastModifiedDate":"2023-09-02"},{"lineNumber":131,"author":{"gitId":"ldinghan"},"content":"                    Deadline deadline \u003d new Deadline(description, date, time);","lastModifiedDate":"2023-09-02"},{"lineNumber":132,"author":{"gitId":"ldinghan"},"content":"                    return deadline;","lastModifiedDate":"2023-09-02"},{"lineNumber":133,"author":{"gitId":"ldinghan"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":134,"author":{"gitId":"ldinghan"},"content":"                    throw new InvalidDateTimeException(\"Invalid Datetime.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":135,"author":{"gitId":"ldinghan"},"content":"                }","lastModifiedDate":"2023-09-02"},{"lineNumber":136,"author":{"gitId":"ldinghan"},"content":"            } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":137,"author":{"gitId":"ldinghan"},"content":"                throw new InvalidDescriptionException(\"Invalid description.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":138,"author":{"gitId":"ldinghan"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":139,"author":{"gitId":"ldinghan"},"content":"        case EVENT:","lastModifiedDate":"2023-09-02"},{"lineNumber":140,"author":{"gitId":"ldinghan"},"content":"            if (str.split(\" \").length \u003e 4) {","lastModifiedDate":"2023-09-02"},{"lineNumber":141,"author":{"gitId":"ldinghan"},"content":"                String fullTaskDescription \u003d str.split(\" \", 2)[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":142,"author":{"gitId":"ldinghan"},"content":"                String description \u003d fullTaskDescription.split(\" /from \")[0];","lastModifiedDate":"2023-09-02"},{"lineNumber":143,"author":{"gitId":"ldinghan"},"content":"                String from \u003d String.join(\"\", fullTaskDescription.split(\" /from \")[1]).split(\" /to \")[0];","lastModifiedDate":"2023-09-02"},{"lineNumber":144,"author":{"gitId":"ldinghan"},"content":"                String to \u003d fullTaskDescription.split(\" /to \")[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":145,"author":{"gitId":"ldinghan"},"content":"                try {","lastModifiedDate":"2023-09-02"},{"lineNumber":146,"author":{"gitId":"ldinghan"},"content":"                    String[] fromDatetime \u003d from.split(\" \");","lastModifiedDate":"2023-09-02"},{"lineNumber":147,"author":{"gitId":"ldinghan"},"content":"                    String[] toDatetime \u003d to.split(\" \");","lastModifiedDate":"2023-09-02"},{"lineNumber":148,"author":{"gitId":"ldinghan"},"content":"                    LocalDate fromDate \u003d LocalDate.parse(fromDatetime[0]);","lastModifiedDate":"2023-09-02"},{"lineNumber":149,"author":{"gitId":"ldinghan"},"content":"                    LocalTime fromTime \u003d LocalTime.parse(fromDatetime[1]);","lastModifiedDate":"2023-09-02"},{"lineNumber":150,"author":{"gitId":"ldinghan"},"content":"                    LocalDate toDate \u003d LocalDate.parse(toDatetime[0]);","lastModifiedDate":"2023-09-02"},{"lineNumber":151,"author":{"gitId":"ldinghan"},"content":"                    LocalTime toTime \u003d LocalTime.parse(toDatetime[1]);","lastModifiedDate":"2023-09-02"},{"lineNumber":152,"author":{"gitId":"ldinghan"},"content":"                    Event event \u003d new Event(description, fromDate, fromTime, toDate, toTime);","lastModifiedDate":"2023-09-02"},{"lineNumber":153,"author":{"gitId":"ldinghan"},"content":"                    return event;","lastModifiedDate":"2023-09-02"},{"lineNumber":154,"author":{"gitId":"ldinghan"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":155,"author":{"gitId":"ldinghan"},"content":"                    throw new InvalidDateTimeException(\"Invalid Datetime\");","lastModifiedDate":"2023-09-02"},{"lineNumber":156,"author":{"gitId":"ldinghan"},"content":"                }","lastModifiedDate":"2023-09-02"},{"lineNumber":157,"author":{"gitId":"ldinghan"},"content":"            } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":158,"author":{"gitId":"ldinghan"},"content":"                throw new InvalidDescriptionException(\"Invalid description.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":159,"author":{"gitId":"ldinghan"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":160,"author":{"gitId":"ldinghan"},"content":"        default:","lastModifiedDate":"2023-09-02"},{"lineNumber":161,"author":{"gitId":"ldinghan"},"content":"            return null;","lastModifiedDate":"2023-09-02"},{"lineNumber":162,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":163,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":164,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"ldinghan":164}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.Event;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.ToDo;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"import java.io.File;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":" * Manages the storage of tasks in a txt file.","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"public class Storage {","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"    protected String filePath;","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"    protected String directoryPath;","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"     * Initializes a new instance of the duke.storage.Storage class.","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"     * @param directoryPath The directory where the storage file is located or should be created.","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"     * @param filePath The file path of the storage file.","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"    public Storage(String directoryPath, String filePath) {","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"        this.directoryPath \u003d directoryPath;","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"        this.setupTasks();","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"     * Updates the storage file with the tasks from the provided duke.tasks.TaskList.","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"     * @param tasks The duke.tasks.TaskList containing tasks to be saved to the storage file.","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"    public void updateStorage(TaskList tasks) {","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"            FileWriter writer \u003d new FileWriter(filePath);","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"            for (int i \u003d 0; i \u003c tasks.getSize(); i++) {","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"ldinghan"},"content":"                writer.write(tasks.getTask(i) + System.lineSeparator());","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"ldinghan"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"ldinghan"},"content":"            writer.close();","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"ldinghan"},"content":"        } catch (IOException e){","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"ldinghan"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"ldinghan"},"content":"            System.out.println(e);","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"ldinghan"},"content":"     * Sets up the tasks by reading from the storage file or creating a new one if it doesn\u0027t exist.","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"ldinghan"},"content":"     * @return A duke.tasks.TaskList containing the tasks read from the storage file, or an empty","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"ldinghan"},"content":"     * duke.tasks.TaskList if the file is new.","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"ldinghan"},"content":"    private TaskList setupTasks() {","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"ldinghan"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"ldinghan"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"ldinghan"},"content":"            File directory \u003d new File(directoryPath);","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"ldinghan"},"content":"            if (!directory.exists()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"ldinghan"},"content":"                directory.mkdir();","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"ldinghan"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"ldinghan"},"content":"            File taskFile \u003d new File(filePath);","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"ldinghan"},"content":"            if (taskFile.createNewFile()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"ldinghan"},"content":"                //new file created","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"ldinghan"},"content":"            } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"ldinghan"},"content":"                tasks \u003d getTasks();","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"ldinghan"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"ldinghan"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"ldinghan"},"content":"            System.out.println(\"Error occurred\");","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"ldinghan"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"ldinghan"},"content":"        } finally {","lastModifiedDate":"2023-09-02"},{"lineNumber":77,"author":{"gitId":"ldinghan"},"content":"            return tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"ldinghan"},"content":"     * Retrieves tasks from the storage file and returns them in a duke.tasks.TaskList.","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"ldinghan"},"content":"     * @return A duke.tasks.TaskList containing tasks read from the storage file.","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":86,"author":{"gitId":"ldinghan"},"content":"    public TaskList getTasks() {","lastModifiedDate":"2023-09-02"},{"lineNumber":87,"author":{"gitId":"ldinghan"},"content":"        TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-09-02"},{"lineNumber":88,"author":{"gitId":"ldinghan"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":89,"author":{"gitId":"ldinghan"},"content":"            Scanner scanner \u003d new Scanner(new File(filePath));","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":91,"author":{"gitId":"ldinghan"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":92,"author":{"gitId":"ldinghan"},"content":"                String str \u003d scanner.nextLine();","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"ldinghan"},"content":"                char taskType \u003d str.charAt(1);","lastModifiedDate":"2023-09-02"},{"lineNumber":94,"author":{"gitId":"ldinghan"},"content":"                boolean isMarked \u003d str.charAt(4) \u003d\u003d \u0027X\u0027;","lastModifiedDate":"2023-09-02"},{"lineNumber":95,"author":{"gitId":"ldinghan"},"content":"                String description \u003d str.split(\"] \")[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":96,"author":{"gitId":"ldinghan"},"content":"                switch (taskType) {","lastModifiedDate":"2023-09-02"},{"lineNumber":97,"author":{"gitId":"ldinghan"},"content":"                case \u0027T\u0027:","lastModifiedDate":"2023-09-02"},{"lineNumber":98,"author":{"gitId":"ldinghan"},"content":"                    ToDo taskT \u003d new ToDo(description);","lastModifiedDate":"2023-09-02"},{"lineNumber":99,"author":{"gitId":"ldinghan"},"content":"                    if (isMarked) {","lastModifiedDate":"2023-09-02"},{"lineNumber":100,"author":{"gitId":"ldinghan"},"content":"                        taskT.markAsDone();","lastModifiedDate":"2023-09-02"},{"lineNumber":101,"author":{"gitId":"ldinghan"},"content":"                    }","lastModifiedDate":"2023-09-02"},{"lineNumber":102,"author":{"gitId":"ldinghan"},"content":"                    taskList.addTask(taskT);","lastModifiedDate":"2023-09-02"},{"lineNumber":103,"author":{"gitId":"ldinghan"},"content":"                    break;","lastModifiedDate":"2023-09-02"},{"lineNumber":104,"author":{"gitId":"ldinghan"},"content":"                case \u0027D\u0027:","lastModifiedDate":"2023-09-02"},{"lineNumber":105,"author":{"gitId":"ldinghan"},"content":"                    description \u003d description.split(\" \\\\(by: \")[0];","lastModifiedDate":"2023-09-02"},{"lineNumber":106,"author":{"gitId":"ldinghan"},"content":"                    String by \u003d str.split(\" \\\\(by: \")[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":107,"author":{"gitId":"ldinghan"},"content":"                    LocalDate date \u003d LocalDate.parse(by.split(\" \")[0]);","lastModifiedDate":"2023-09-02"},{"lineNumber":108,"author":{"gitId":"ldinghan"},"content":"                    LocalTime time \u003d LocalTime.parse(by.split(\" \")[1].replaceAll(\".$\", \"\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":109,"author":{"gitId":"ldinghan"},"content":"                    Deadline taskD \u003d new Deadline(description, date, time);","lastModifiedDate":"2023-09-02"},{"lineNumber":110,"author":{"gitId":"ldinghan"},"content":"                    if (isMarked) {","lastModifiedDate":"2023-09-02"},{"lineNumber":111,"author":{"gitId":"ldinghan"},"content":"                        taskD.markAsDone();","lastModifiedDate":"2023-09-02"},{"lineNumber":112,"author":{"gitId":"ldinghan"},"content":"                    }","lastModifiedDate":"2023-09-02"},{"lineNumber":113,"author":{"gitId":"ldinghan"},"content":"                    taskList.addTask(taskD);","lastModifiedDate":"2023-09-02"},{"lineNumber":114,"author":{"gitId":"ldinghan"},"content":"                    break;","lastModifiedDate":"2023-09-02"},{"lineNumber":115,"author":{"gitId":"ldinghan"},"content":"                case \u0027E\u0027:","lastModifiedDate":"2023-09-02"},{"lineNumber":116,"author":{"gitId":"ldinghan"},"content":"                    description \u003d description.split(\" \\\\(from: \")[0];","lastModifiedDate":"2023-09-02"},{"lineNumber":117,"author":{"gitId":"ldinghan"},"content":"                    String from \u003d String.join(\"\", str.split(\"\\\\(from: \")[1]).split(\" to: \")[0];","lastModifiedDate":"2023-09-02"},{"lineNumber":118,"author":{"gitId":"ldinghan"},"content":"                    String to \u003d str.split(\" to: \")[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":119,"author":{"gitId":"ldinghan"},"content":"                    LocalDate fromDate \u003d LocalDate.parse(from.split(\" \")[0]);","lastModifiedDate":"2023-09-02"},{"lineNumber":120,"author":{"gitId":"ldinghan"},"content":"                    LocalTime fromTime \u003d LocalTime.parse(from.split(\" \")[1]);","lastModifiedDate":"2023-09-02"},{"lineNumber":121,"author":{"gitId":"ldinghan"},"content":"                    LocalDate toDate \u003d LocalDate.parse(to.split(\" \")[0]);","lastModifiedDate":"2023-09-02"},{"lineNumber":122,"author":{"gitId":"ldinghan"},"content":"                    LocalTime toTime \u003d LocalTime.parse(to.split(\" \")[1].replaceAll(\".$\", \"\"));","lastModifiedDate":"2023-09-02"},{"lineNumber":123,"author":{"gitId":"ldinghan"},"content":"                    Event taskE \u003d new Event(description, fromDate, fromTime, toDate, toTime);","lastModifiedDate":"2023-09-02"},{"lineNumber":124,"author":{"gitId":"ldinghan"},"content":"                    if (isMarked) {","lastModifiedDate":"2023-09-02"},{"lineNumber":125,"author":{"gitId":"ldinghan"},"content":"                        taskE.markAsDone();","lastModifiedDate":"2023-09-02"},{"lineNumber":126,"author":{"gitId":"ldinghan"},"content":"                    }","lastModifiedDate":"2023-09-02"},{"lineNumber":127,"author":{"gitId":"ldinghan"},"content":"                    taskList.addTask(taskE);","lastModifiedDate":"2023-09-02"},{"lineNumber":128,"author":{"gitId":"ldinghan"},"content":"                    break;","lastModifiedDate":"2023-09-02"},{"lineNumber":129,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":130,"author":{"gitId":"ldinghan"},"content":"                }","lastModifiedDate":"2023-09-02"},{"lineNumber":131,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":132,"author":{"gitId":"ldinghan"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":133,"author":{"gitId":"ldinghan"},"content":"            scanner.close();","lastModifiedDate":"2023-09-02"},{"lineNumber":134,"author":{"gitId":"ldinghan"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":135,"author":{"gitId":"ldinghan"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-02"},{"lineNumber":136,"author":{"gitId":"ldinghan"},"content":"        } finally {","lastModifiedDate":"2023-09-02"},{"lineNumber":137,"author":{"gitId":"ldinghan"},"content":"            return taskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":138,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":139,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":140,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":141,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"ldinghan":141}},{"path":"src/main/java/duke/tasks/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":" * Represents a task with a specific deadline.","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":" * This class extends the duke.tasks.Task class and adds a deadline to it.","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"     * The deadline for this task.","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"    protected String by;","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"    protected LocalDate byDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"    protected LocalTime byTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"     * Constructs a duke.tasks.Deadline object with the given description and deadline.","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"     * @param byDate The date deadline for the task.","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"     * @param byTime The time deadline for the task.","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"    public Deadline(String description, LocalDate byDate, LocalTime byTime) {","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"        this.byDate \u003d byDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"        this.byTime \u003d byTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"        this.by \u003d byDate.toString() + \" \" + byTime.toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"     * Returns a string representation of the duke.tasks.Deadline object.","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"     * @return A formatted string including the task type, description, and deadline.","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2023-08-22"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"ldinghan":40}},{"path":"src/main/java/duke/tasks/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":" * Represents an event task that occurs within a specified time range.","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":" * This class extends the duke.tasks.Task class and adds the event\u0027s start and end times.","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"     * The start time of the event.","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"    protected LocalDate fromDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"    protected LocalTime fromTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"     * The end time of the event.","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"    protected LocalDate toDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"    protected LocalTime toTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"    protected String from;","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"    protected String to;","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"     * Constructs an duke.tasks.Event object with the given description, start date and time, and end date and time.","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"     * @param description The description of the event.","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"     * @param fromDate The start date of the event.","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"     * @param fromTime The start time of the event.","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"     * @param toDate The end date of the event.","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"     * @param toTime The end time of the event.","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"    public Event(String description, LocalDate fromDate, LocalTime fromTime, LocalDate toDate, LocalTime toTime) {","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"        this.fromDate \u003d fromDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"        this.fromTime \u003d fromTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"        this.toDate \u003d toDate;","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"        this.toTime \u003d toTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"        this.from \u003d fromDate.toString() + \" \" + fromTime.toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"        this.to \u003d toDate.toString() + \" \" + toTime.toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"ldinghan"},"content":"     * Returns a string representation of the duke.tasks.Event object.","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"ldinghan"},"content":"     * @return A formatted string including the task type, description, start time, and end time.","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":48,"author":{"gitId":"ldinghan"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":49,"author":{"gitId":"ldinghan"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":50,"author":{"gitId":"ldinghan"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2023-08-22"},{"lineNumber":51,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":52,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"ldinghan":52}},{"path":"src/main/java/duke/tasks/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":" * Represents a task with a description and completion status.","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":" * This class provides basic functionality for managing tasks.","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"public class Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"     * The description of the task.","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"    protected String description;","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"     * Indicates whether the task is done or not.","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"     * Constructs a duke.tasks.Task object with the given description.","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"     * Returns the description of the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"     * @return The description of the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"    public String getDescription() {","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"        return this.description;","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"     * Returns an icon representing the completion status of the task.","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"     * @return An \"X\" if the task is done, or a space if it\u0027s not done.","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":45,"author":{"gitId":"ldinghan"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":47,"author":{"gitId":"ldinghan"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":48,"author":{"gitId":"ldinghan"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-21"},{"lineNumber":49,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":50,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":51,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"ldinghan"},"content":"     * Marks the task as not done.","lastModifiedDate":"2023-08-23"},{"lineNumber":53,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":54,"author":{"gitId":"ldinghan"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-08-21"},{"lineNumber":55,"author":{"gitId":"ldinghan"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":56,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":57,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":58,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"ldinghan"},"content":"     * Returns a string representation of the duke.tasks.Task object.","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":61,"author":{"gitId":"ldinghan"},"content":"     * @return A formatted string including the completion status icon and description.","lastModifiedDate":"2023-08-23"},{"lineNumber":62,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":63,"author":{"gitId":"ldinghan"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":64,"author":{"gitId":"ldinghan"},"content":"    public String toString() {","lastModifiedDate":"2023-08-21"},{"lineNumber":65,"author":{"gitId":"ldinghan"},"content":"        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);","lastModifiedDate":"2023-08-21"},{"lineNumber":66,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":67,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"ldinghan":67}},{"path":"src/main/java/duke/tasks/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":" * Represents a list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"public class TaskList {","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"     * Initialises a new instance of the duke.tasks.TaskList class.","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"    public TaskList() {","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"     * Gets the number of tasks in the list.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"     * @return The number of tasks in the list.","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"    public int getSize() {","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"     * Gets the task at the specified index.","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"     * @param index The index of the task to retrieve.","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"        return this.tasks.get(index);","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"     * Adds a task to the list.","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"     * @param task The task to add to the list.","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"ldinghan"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"ldinghan"},"content":"     * Deletes a task from the list at the specified index.","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"ldinghan"},"content":"     * @param index The index of the task to delete.","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"ldinghan"},"content":"    public void deleteTask(int index) {","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"ldinghan"},"content":"        this.tasks.remove(index);","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"ldinghan"},"content":"     * Marks a task at the specified index as done.","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"ldinghan"},"content":"     * @param index The index of the task to mark as done.","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"ldinghan"},"content":"    public void markTaskAsDone(int index) {","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"ldinghan"},"content":"        this.tasks.get(index).markAsDone();","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"ldinghan"},"content":"     * Marks a task at the specified index as undone.","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"ldinghan"},"content":"     * @param index The index of the task to mark as undone.","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"ldinghan"},"content":"    public void markTaskAsUndone(int index) {","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"ldinghan"},"content":"        this.tasks.get(index).markAsUndone();","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"ldinghan"},"content":"     * Creates a TaskList that contains the specified keyword.","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"ldinghan"},"content":"     * @param keyword The keyword that is searched for in the TaskList.","lastModifiedDate":"2023-09-02"},{"lineNumber":77,"author":{"gitId":"ldinghan"},"content":"     * @return A TaskList that contains the specified keyword.","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"ldinghan"},"content":"    public TaskList findTask(String keyword) {","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"ldinghan"},"content":"        TaskList tempTaskList \u003d new TaskList();","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"ldinghan"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"ldinghan"},"content":"            Task task \u003d this.tasks.get(i);","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"ldinghan"},"content":"            if (task.getDescription().contains(keyword)) {","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"ldinghan"},"content":"                tempTaskList.addTask(task);","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"ldinghan"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":86,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":87,"author":{"gitId":"ldinghan"},"content":"        return tempTaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":88,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":89,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":91,"author":{"gitId":"ldinghan"},"content":"     * Returns a string representation of the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":92,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"ldinghan"},"content":"     * @return A string representation of the task list.","lastModifiedDate":"2023-09-02"},{"lineNumber":94,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":95,"author":{"gitId":"ldinghan"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":96,"author":{"gitId":"ldinghan"},"content":"    public String toString() {","lastModifiedDate":"2023-09-02"},{"lineNumber":97,"author":{"gitId":"ldinghan"},"content":"        ArrayList\u003cString\u003e allTaskStrings \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-02"},{"lineNumber":98,"author":{"gitId":"ldinghan"},"content":"        for (int i \u003d 0; i \u003c this.tasks.size(); i++) {","lastModifiedDate":"2023-09-02"},{"lineNumber":99,"author":{"gitId":"ldinghan"},"content":"            String taskString \u003d String.format(\"%d. %s\", i + 1, this.tasks.get(i).toString());","lastModifiedDate":"2023-09-02"},{"lineNumber":100,"author":{"gitId":"ldinghan"},"content":"            allTaskStrings.add(taskString);","lastModifiedDate":"2023-09-02"},{"lineNumber":101,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":102,"author":{"gitId":"ldinghan"},"content":"        return String.join(\"\\n\", allTaskStrings);","lastModifiedDate":"2023-09-02"},{"lineNumber":103,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":104,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":105,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":106,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":107,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"ldinghan":107}},{"path":"src/main/java/duke/tasks/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":" * Represents a to-do task without any specific time constraints.","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":" * This class extends the duke.tasks.Task class and represents a simple to-do item.","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"public class ToDo extends Task{","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"     * Constructs a duke.tasks.ToDo object with the given description.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"     * @param description The description of the to-do task.","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"     * Returns a string representation of the duke.tasks.ToDo object.","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"     * @return A formatted string including the task type and description.","lastModifiedDate":"2023-08-23"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"ldinghan":26}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import duke.commands.Command;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":" * The duke.ui.Ui class is responsible for managing user interactions and displaying messages.","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"public class Ui {","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"     * Displays a reply after adding a task.","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"     * @param str    The user input string.","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"     * @param tasks  The list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"    public static void addTaskReply(String str, TaskList tasks) {","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"        System.out.println(String.format(\"Ding: What does \u0027%s\u0027 mean? I\u0027ll just add it anyway.\\n \" +","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"                \"You have like %d tasks now\", str, tasks.getSize()));","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"     * Displays a reply after marking or unmarking a task.","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"     * @param taskIndex The index of the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"     * @param tasks     The list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"     * @param command   The command (MARK or UNMARK).","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"    public static void markTaskReply(int taskIndex, TaskList tasks, Command command) {","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"        switch (command) {","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"        case MARK:","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"            System.out.println(String.format(\"Ding: Okay, I marked this task as done, \" +","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"                    \"but I have no idea what that means:\\n %s\", tasks.getTask(taskIndex)));","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"            break;","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"        case UNMARK:","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"            System.out.println(String.format(\"Ding: Okay, I marked this task as undone, \" +","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"                    \"but I have no idea what that means:\\n %s\", tasks.getTask(taskIndex)));","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"     * Displays a reply after deleting a task.","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"ldinghan"},"content":"     * @param task  The task that was deleted.","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"ldinghan"},"content":"     * @param tasks The list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"ldinghan"},"content":"    public static void deleteTaskReply(Task task, TaskList tasks) {","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"ldinghan"},"content":"        System.out.println(String.format(\"Ding: Okay, I\u0027ve forgotten this task, \" +","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"ldinghan"},"content":"                \"so don\u0027t expect me to remember it:\\n %s\", task));","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"ldinghan"},"content":"        System.out.println(String.format(\"Ding: Right so now you have like %d tasks left\", tasks.getSize()));","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"ldinghan"},"content":"     * Displays a horizontal line as a separator.","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"ldinghan"},"content":"    public static void horizontalLineReply() {","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"ldinghan"},"content":"        System.out.println(\"\\n____________________________________________________________\\n\");","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"ldinghan"},"content":"     * Displays a reply when exiting the chatbot.","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"ldinghan"},"content":"    public static void exitReply() {","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"ldinghan"},"content":"        System.out.println(","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"ldinghan"},"content":"                \"____________________________________________________________\\n\" +","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"ldinghan"},"content":"                \"Ding: Bye. Hopefully I get to see you again soon!\\n\" +","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"ldinghan"},"content":"                \"____________________________________________________________\");","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"ldinghan"},"content":"     * Displays an introductory message when starting the chatbot.","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"ldinghan"},"content":"    public static void introReply() {","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"ldinghan"},"content":"        System.out.println(","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"ldinghan"},"content":"                \"____________________________________________________________\\n\" +","lastModifiedDate":"2023-09-02"},{"lineNumber":77,"author":{"gitId":"ldinghan"},"content":"                \"Hello! I\u0027m Ding!\\n\" +","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"ldinghan"},"content":"                \"What can I do for you?\\n\" +","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"ldinghan"},"content":"                \"____________________________________________________________\\n\");","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"ldinghan"},"content":"     * Displays the list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"ldinghan"},"content":"     * @param tasks The list of tasks to display.","lastModifiedDate":"2023-09-02"},{"lineNumber":86,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":87,"author":{"gitId":"ldinghan"},"content":"    public static void printListReply(TaskList tasks) {","lastModifiedDate":"2023-09-02"},{"lineNumber":88,"author":{"gitId":"ldinghan"},"content":"        System.out.println(String.format(\"Ding: These are your tasks... \" +","lastModifiedDate":"2023-09-02"},{"lineNumber":89,"author":{"gitId":"ldinghan"},"content":"                \"If I remember correctly:\\n%s\", tasks));","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":91,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":92,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"ldinghan"},"content":"     * Displays a reply for finding of Tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":94,"author":{"gitId":"ldinghan"},"content":"     * @param str The user input containing the keyword.","lastModifiedDate":"2023-09-02"},{"lineNumber":95,"author":{"gitId":"ldinghan"},"content":"     * @param tasks The list of tasks to display.","lastModifiedDate":"2023-09-02"},{"lineNumber":96,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":97,"author":{"gitId":"ldinghan"},"content":"    public static void findTaskReply(String str, TaskList tasks) {","lastModifiedDate":"2023-09-02"},{"lineNumber":98,"author":{"gitId":"ldinghan"},"content":"        System.out.println(String.format(\"I will help you %s\\n\", str));","lastModifiedDate":"2023-09-02"},{"lineNumber":99,"author":{"gitId":"ldinghan"},"content":"        printListReply(tasks);","lastModifiedDate":"2023-09-02"},{"lineNumber":100,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":101,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":102,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":103,"author":{"gitId":"ldinghan"},"content":"     * Displays a reply for an illegal argument exception.","lastModifiedDate":"2023-09-02"},{"lineNumber":104,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":105,"author":{"gitId":"ldinghan"},"content":"    public static void illegalArgumentExceptionReply() {","lastModifiedDate":"2023-09-02"},{"lineNumber":106,"author":{"gitId":"ldinghan"},"content":"        System.out.println(\"Ding: I seriously have no idea what I need to do here\");","lastModifiedDate":"2023-09-02"},{"lineNumber":107,"author":{"gitId":"ldinghan"},"content":"        System.out.println(\"Ding: No way you forgot to even input a proper command...\");","lastModifiedDate":"2023-09-02"},{"lineNumber":108,"author":{"gitId":"ldinghan"},"content":"        System.out.println(\"Ding: Available commands are \u0027todo\u0027, \u0027deadline\u0027, \u0027event\u0027, \" +","lastModifiedDate":"2023-09-02"},{"lineNumber":109,"author":{"gitId":"ldinghan"},"content":"                \"\u0027list\u0027, \u0027mark\u0027, \u0027unmark\u0027, \u0027delete\u0027, \u0027find\u0027, \u0027bye\u0027\");","lastModifiedDate":"2023-09-02"},{"lineNumber":110,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":111,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":112,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":113,"author":{"gitId":"ldinghan"},"content":"     * Displays a reply for an invalid task description exception.","lastModifiedDate":"2023-09-02"},{"lineNumber":114,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":115,"author":{"gitId":"ldinghan"},"content":"    public static void invalidDescriptionExceptionReply() {","lastModifiedDate":"2023-09-02"},{"lineNumber":116,"author":{"gitId":"ldinghan"},"content":"        System.out.println(\"Ding: I may be forgetful but you\u0027re so bad you even forgot the task description...\");","lastModifiedDate":"2023-09-02"},{"lineNumber":117,"author":{"gitId":"ldinghan"},"content":"        System.out.println(\"Ding: For ToDos, input \u0027todo (task)\u0027\");","lastModifiedDate":"2023-09-02"},{"lineNumber":118,"author":{"gitId":"ldinghan"},"content":"        System.out.println(\"Ding: For Deadlines, input \u0027deadline (task) /by (date or time)\");","lastModifiedDate":"2023-09-02"},{"lineNumber":119,"author":{"gitId":"ldinghan"},"content":"        System.out.println(\"Ding: For Events, input \u0027event (task) /from (date or time) /to (date or time)\");","lastModifiedDate":"2023-09-02"},{"lineNumber":120,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":121,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":122,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":123,"author":{"gitId":"ldinghan"},"content":"     * Displays a reply for an invalid task index exception.","lastModifiedDate":"2023-09-02"},{"lineNumber":124,"author":{"gitId":"ldinghan"},"content":"     *","lastModifiedDate":"2023-09-02"},{"lineNumber":125,"author":{"gitId":"ldinghan"},"content":"     * @param tasks The list of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":126,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":127,"author":{"gitId":"ldinghan"},"content":"    public static void invalidTaskIndexExceptionReply(TaskList tasks) {","lastModifiedDate":"2023-09-02"},{"lineNumber":128,"author":{"gitId":"ldinghan"},"content":"        System.out.println(\"Ding: Oh wait it\u0027s not lost, \" +","lastModifiedDate":"2023-09-02"},{"lineNumber":129,"author":{"gitId":"ldinghan"},"content":"                \"the task number you gave just doesn\u0027t exist in your list...\");","lastModifiedDate":"2023-09-02"},{"lineNumber":130,"author":{"gitId":"ldinghan"},"content":"        if (tasks.getSize() \u003e 0) {","lastModifiedDate":"2023-09-02"},{"lineNumber":131,"author":{"gitId":"ldinghan"},"content":"            System.out.println(String.format(\"Ding: Please input a task number from 1 to %d\", tasks.getSize()));","lastModifiedDate":"2023-09-02"},{"lineNumber":132,"author":{"gitId":"ldinghan"},"content":"        } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":133,"author":{"gitId":"ldinghan"},"content":"            System.out.println(\"Ding: You have nothing in your task list... \" +","lastModifiedDate":"2023-09-02"},{"lineNumber":134,"author":{"gitId":"ldinghan"},"content":"                    \"What are you even trying to get me to do?\");","lastModifiedDate":"2023-09-02"},{"lineNumber":135,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":136,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":137,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":138,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":139,"author":{"gitId":"ldinghan"},"content":"     * Displays a reply for a missing task index exception.","lastModifiedDate":"2023-09-02"},{"lineNumber":140,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":141,"author":{"gitId":"ldinghan"},"content":"    public static void missingTaskIndexExceptionReply() {","lastModifiedDate":"2023-09-02"},{"lineNumber":142,"author":{"gitId":"ldinghan"},"content":"        System.out.println(\"Ding: I don\u0027t quite understand what you want to do...\");","lastModifiedDate":"2023-09-02"},{"lineNumber":143,"author":{"gitId":"ldinghan"},"content":"        System.out.println(\"Ding: Please input \u0027(command) (task number)\u0027...\");","lastModifiedDate":"2023-09-02"},{"lineNumber":144,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":145,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":146,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":147,"author":{"gitId":"ldinghan"},"content":"     * Displays a reply for an invalid date-time format exception.","lastModifiedDate":"2023-09-02"},{"lineNumber":148,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":149,"author":{"gitId":"ldinghan"},"content":"    public static void invalidDateTimeExceptionReply() {","lastModifiedDate":"2023-09-02"},{"lineNumber":150,"author":{"gitId":"ldinghan"},"content":"        System.out.println(\"Ding: I already told you... \" +","lastModifiedDate":"2023-09-02"},{"lineNumber":151,"author":{"gitId":"ldinghan"},"content":"                \"please enter the timestamps in this format \u0027YYYY-MM-DD HH:mm\u0027\");","lastModifiedDate":"2023-09-02"},{"lineNumber":152,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":153,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":154,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":155,"author":{"gitId":"ldinghan"},"content":"     * Displays a reply for an invalid keyword exception.","lastModifiedDate":"2023-09-02"},{"lineNumber":156,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":157,"author":{"gitId":"ldinghan"},"content":"    public static void invalidKeywordExceptionReply() {","lastModifiedDate":"2023-09-02"},{"lineNumber":158,"author":{"gitId":"ldinghan"},"content":"        System.out.println(\"Ding: Please use the format \u0027find (keyword)\u0027 so I that can help you look around\");","lastModifiedDate":"2023-09-02"},{"lineNumber":159,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":160,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"ldinghan":160}},{"path":"src/test/java/duke/parser/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.parser;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import duke.exceptions.InvalidDateTimeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"import duke.exceptions.InvalidDescriptionException;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"import duke.exceptions.InvalidTaskIndexException;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"import duke.exceptions.MissingTaskIndexException;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.Deadline;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"import duke.tasks.Task;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":" * Represents a test class for Parser","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"public class ParserTest {","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"     * Tests parsing of input string to a Task.","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"    @Test","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"    public void testStringToTask() {","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"            Task deadline \u003d Parser.parseStringToTask(\"deadline Assignment 0 /by 2023-09-04 23:59\");","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"            assertEquals(new Deadline(\"Assignment 0\", LocalDate.parse(\"2023-09-04\"),","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"                            LocalTime.parse(\"23:59\")).toString(), deadline.toString());","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"        } catch (InvalidDescriptionException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"ldinghan"},"content":"        } catch (InvalidDateTimeException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"ldinghan"},"content":"    @Test","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"ldinghan"},"content":"    public void testParseInvalidTaskIndex() {","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"ldinghan"},"content":"        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"ldinghan"},"content":"            Parser.taskToDelete(\"delete 2\", new TaskList());","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"ldinghan"},"content":"        } catch (MissingTaskIndexException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"ldinghan"},"content":"        } catch (InvalidTaskIndexException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"ldinghan"},"content":"            assertEquals(\"Invalid Task Index.\", e.getMessage());","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"ldinghan"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"ldinghan":45}},{"path":"src/test/java/duke/tasks/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"package duke.tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":" * Represents a test class for ToDo","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"public class ToDoTest {","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"ldinghan"},"content":"     * Tests string conversion of ToDo to a string.","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"ldinghan"},"content":"    @Test","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"ldinghan"},"content":"    public void testToString() {","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"ldinghan"},"content":"        assertEquals(\"[T][ ] Sleep\", new ToDo(\"Sleep\").toString());","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"ldinghan"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"ldinghan"},"content":"     * Tests marking and unmarking of ToDo.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"ldinghan"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"ldinghan"},"content":"    @Test","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"ldinghan"},"content":"    public void testMarkDoneAndUndone() {","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"ldinghan"},"content":"        ToDo todo \u003d new ToDo(\"Run\");","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"ldinghan"},"content":"        todo.markAsDone();","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"ldinghan"},"content":"        assertEquals(\"[T][X] Run\", todo.toString());","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"ldinghan"},"content":"        todo.markAsUndone();","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"ldinghan"},"content":"        assertEquals(\"[T][ ] Run\", todo.toString());","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"ldinghan"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"ldinghan"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"ldinghan":30}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ldinghan"},"content":"todo go to the library","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"ldinghan"},"content":"deadline sleep and shower /by 10pm","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"ldinghan"},"content":"event visit the museum /from Wed 10am /to Wed 1pm","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"ldinghan"},"content":"deadline return book /by Sat 10pm","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"ldinghan"},"content":"mark 1","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"ldinghan"},"content":"mark 2","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"ldinghan"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"ldinghan"},"content":"unmark 2","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"ldinghan"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"ldinghan"},"content":"bye","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"ldinghan":10}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"ldinghan"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ldinghan":1,"-":20}}]
