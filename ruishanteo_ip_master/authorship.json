[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"ruishanteo"},"content":"# duke.Duke project template","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"ruishanteo"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"ruishanteo"},"content":"instructions on how to use it.","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"ruishanteo"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"ruishanteo"},"content":"   first)","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"ruishanteo"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"ruishanteo"},"content":"   in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":19,"author":{"gitId":"ruishanteo"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"ruishanteo"},"content":"   code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"ruishanteo"},"content":"   like the below as the output:","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ruishanteo":10,"-":19}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"ruishanteo"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ruishanteo":1,"-":41}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruishanteo"},"content":"package duke;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"ruishanteo"},"content":"import duke.command.Command;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"ruishanteo"},"content":"/**","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"ruishanteo"},"content":" * The main class of the Duke application, responsible for handling user interactions","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"ruishanteo"},"content":" * and managing the core functionality of the task management system.","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"ruishanteo"},"content":" */","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"ruishanteo"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"ruishanteo"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"ruishanteo"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"ruishanteo"},"content":"     * Constructs a Duke object. Initializes the user interface, storage, and task list.","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"ruishanteo"},"content":"    public Duke() {","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"ruishanteo"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"ruishanteo"},"content":"        storage \u003d new Storage(\"./data\", \"duke.txt\");","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"ruishanteo"},"content":"        try {","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"ruishanteo"},"content":"            tasks \u003d new TaskList(storage.loadFile());","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"ruishanteo"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"ruishanteo"},"content":"            ui.showErrMessage(e);","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"ruishanteo"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"ruishanteo"},"content":"     * The entry point of the Duke application.","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"ruishanteo"},"content":"     * @param args Command-line arguments (not used in this application).","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"ruishanteo"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"ruishanteo"},"content":"        new Duke().run();","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":37,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"ruishanteo"},"content":"     * Initiates the main loop of the Duke application, where user commands are processed.","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":42,"author":{"gitId":"ruishanteo"},"content":"    public void run() {","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"ruishanteo"},"content":"        ui.showWelcome();","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"ruishanteo"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"ruishanteo"},"content":"        while (!isExit) {","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"ruishanteo"},"content":"            try {","lastModifiedDate":"2023-08-19"},{"lineNumber":47,"author":{"gitId":"ruishanteo"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2023-08-25"},{"lineNumber":48,"author":{"gitId":"ruishanteo"},"content":"                ui.showLine();","lastModifiedDate":"2023-08-25"},{"lineNumber":49,"author":{"gitId":"ruishanteo"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"ruishanteo"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2023-08-25"},{"lineNumber":51,"author":{"gitId":"ruishanteo"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-08-25"},{"lineNumber":52,"author":{"gitId":"ruishanteo"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":53,"author":{"gitId":"ruishanteo"},"content":"                ui.showErrMessage(e);","lastModifiedDate":"2023-08-25"},{"lineNumber":54,"author":{"gitId":"ruishanteo"},"content":"            } finally {","lastModifiedDate":"2023-08-25"},{"lineNumber":55,"author":{"gitId":"ruishanteo"},"content":"                ui.showLine();","lastModifiedDate":"2023-08-25"},{"lineNumber":56,"author":{"gitId":"ruishanteo"},"content":"            }","lastModifiedDate":"2023-08-19"},{"lineNumber":57,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-19"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"ruishanteo":56,"-":3}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruishanteo"},"content":"package duke;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"ruishanteo"},"content":"/**","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"ruishanteo"},"content":" * Represents an exception specific to the Duke application, indicating an error or issue.","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"ruishanteo"},"content":" */","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"ruishanteo"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-19"},{"lineNumber":7,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"ruishanteo"},"content":"     * Constructs a DukeException with the specified error message.","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"ruishanteo"},"content":"     * @param message The error message indicating the reason for the exception.","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"ruishanteo"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-19"},{"lineNumber":14,"author":{"gitId":"ruishanteo"},"content":"        super(\":( OOPS!!! \" + message);","lastModifiedDate":"2023-08-19"},{"lineNumber":15,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":16,"author":{"gitId":"ruishanteo"},"content":"}","lastModifiedDate":"2023-08-19"}],"authorContributionMap":{"ruishanteo":16}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruishanteo"},"content":"package duke;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"ruishanteo"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"ruishanteo"},"content":"import duke.command.Command;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"ruishanteo"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"ruishanteo"},"content":"import duke.command.ExitCommand;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"ruishanteo"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"ruishanteo"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"ruishanteo"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"ruishanteo"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"ruishanteo"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"ruishanteo"},"content":"import duke.task.Event;","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"ruishanteo"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"ruishanteo"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"ruishanteo"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"ruishanteo"},"content":"/**","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"ruishanteo"},"content":" * Handles the parsing of user input commands and creates corresponding Command objects.","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"ruishanteo"},"content":" * This class is responsible for interpreting user input and generating appropriate","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"ruishanteo"},"content":" * Command objects based on the input.","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"ruishanteo"},"content":" */","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"ruishanteo"},"content":"public class Parser {","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"ruishanteo"},"content":"     * Parses the given input and returns the corresponding Command object.","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"ruishanteo"},"content":"     * @param input The user input to be parsed.","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"ruishanteo"},"content":"     * @return A Command object representing the parsed user input.","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"ruishanteo"},"content":"     * @throws DukeException If the input cannot be parsed or contains errors.","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"ruishanteo"},"content":"    public static Command parse(String input) throws DukeException {","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"ruishanteo"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"ruishanteo"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"ruishanteo"},"content":"        } else if (input.equals(\"list\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"ruishanteo"},"content":"            return new ListCommand();","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"ruishanteo"},"content":"        } else if (input.contains(\"find\")) {","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"ruishanteo"},"content":"            String subInput;","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"ruishanteo"},"content":"            try {","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"ruishanteo"},"content":"                subInput \u003d input.substring(5);","lastModifiedDate":"2023-08-26"},{"lineNumber":42,"author":{"gitId":"ruishanteo"},"content":"                if (subInput.trim().equals(\"\")) {","lastModifiedDate":"2023-08-26"},{"lineNumber":43,"author":{"gitId":"ruishanteo"},"content":"                    throw new DukeException(\"The keyword to find cannot be empty.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":44,"author":{"gitId":"ruishanteo"},"content":"                }","lastModifiedDate":"2023-08-26"},{"lineNumber":45,"author":{"gitId":"ruishanteo"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":46,"author":{"gitId":"ruishanteo"},"content":"                throw new DukeException(\"The keyword to find cannot be empty.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":47,"author":{"gitId":"ruishanteo"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":48,"author":{"gitId":"ruishanteo"},"content":"            return new FindCommand(subInput);","lastModifiedDate":"2023-08-26"},{"lineNumber":49,"author":{"gitId":"ruishanteo"},"content":"        } else if (input.contains(\"todo\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"ruishanteo"},"content":"            String subInput;","lastModifiedDate":"2023-08-25"},{"lineNumber":51,"author":{"gitId":"ruishanteo"},"content":"            try {","lastModifiedDate":"2023-08-25"},{"lineNumber":52,"author":{"gitId":"ruishanteo"},"content":"                subInput \u003d input.substring(5);","lastModifiedDate":"2023-08-25"},{"lineNumber":53,"author":{"gitId":"ruishanteo"},"content":"                if (subInput.trim().equals(\"\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":54,"author":{"gitId":"ruishanteo"},"content":"                    throw new DukeException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":55,"author":{"gitId":"ruishanteo"},"content":"                }","lastModifiedDate":"2023-08-25"},{"lineNumber":56,"author":{"gitId":"ruishanteo"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":57,"author":{"gitId":"ruishanteo"},"content":"                throw new DukeException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":58,"author":{"gitId":"ruishanteo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":59,"author":{"gitId":"ruishanteo"},"content":"            ToDo t \u003d new ToDo(subInput);","lastModifiedDate":"2023-08-25"},{"lineNumber":60,"author":{"gitId":"ruishanteo"},"content":"            return new AddCommand(t);","lastModifiedDate":"2023-08-25"},{"lineNumber":61,"author":{"gitId":"ruishanteo"},"content":"        } else if (input.contains(\"deadline\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":62,"author":{"gitId":"ruishanteo"},"content":"            String[] split \u003d input.split(\" /by \", 2);","lastModifiedDate":"2023-08-25"},{"lineNumber":63,"author":{"gitId":"ruishanteo"},"content":"            if (split.length \u003d\u003d 1) {","lastModifiedDate":"2023-08-25"},{"lineNumber":64,"author":{"gitId":"ruishanteo"},"content":"                throw new DukeException(\"Deadlines must have a /by.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":65,"author":{"gitId":"ruishanteo"},"content":"            } else if (split[1].trim().equals(\"\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":66,"author":{"gitId":"ruishanteo"},"content":"                throw new DukeException(\"/by cannot be empty.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":67,"author":{"gitId":"ruishanteo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":68,"author":{"gitId":"ruishanteo"},"content":"            String description \u003d split[0].substring(9);","lastModifiedDate":"2023-08-25"},{"lineNumber":69,"author":{"gitId":"ruishanteo"},"content":"            if (description.trim().equals(\"\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":70,"author":{"gitId":"ruishanteo"},"content":"                throw new DukeException(\"The description of a deadline cannot be empty.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":71,"author":{"gitId":"ruishanteo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":72,"author":{"gitId":"ruishanteo"},"content":"            String str \u003d split[1];","lastModifiedDate":"2023-08-25"},{"lineNumber":73,"author":{"gitId":"ruishanteo"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-08-25"},{"lineNumber":74,"author":{"gitId":"ruishanteo"},"content":"            LocalDateTime dateTime;","lastModifiedDate":"2023-08-26"},{"lineNumber":75,"author":{"gitId":"ruishanteo"},"content":"            try {","lastModifiedDate":"2023-08-26"},{"lineNumber":76,"author":{"gitId":"ruishanteo"},"content":"                dateTime \u003d LocalDateTime.parse(str, formatter);","lastModifiedDate":"2023-08-26"},{"lineNumber":77,"author":{"gitId":"ruishanteo"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":78,"author":{"gitId":"ruishanteo"},"content":"                throw new DukeException(\"DateTime should be in yyyy-MM-dd HH:mm.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":79,"author":{"gitId":"ruishanteo"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":80,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":81,"author":{"gitId":"ruishanteo"},"content":"            Deadline t \u003d new Deadline(description, dateTime);","lastModifiedDate":"2023-08-25"},{"lineNumber":82,"author":{"gitId":"ruishanteo"},"content":"            return new AddCommand(t);","lastModifiedDate":"2023-08-25"},{"lineNumber":83,"author":{"gitId":"ruishanteo"},"content":"        } else if (input.contains(\"event\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":84,"author":{"gitId":"ruishanteo"},"content":"            String[] split \u003d input.split(\" /from \", 2);","lastModifiedDate":"2023-08-25"},{"lineNumber":85,"author":{"gitId":"ruishanteo"},"content":"            if (split.length \u003d\u003d 1) {","lastModifiedDate":"2023-08-25"},{"lineNumber":86,"author":{"gitId":"ruishanteo"},"content":"                throw new DukeException(\"Events must have a /from and /to.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":87,"author":{"gitId":"ruishanteo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":88,"author":{"gitId":"ruishanteo"},"content":"            String description;","lastModifiedDate":"2023-08-25"},{"lineNumber":89,"author":{"gitId":"ruishanteo"},"content":"            try {","lastModifiedDate":"2023-08-25"},{"lineNumber":90,"author":{"gitId":"ruishanteo"},"content":"                description \u003d split[0].substring(6);","lastModifiedDate":"2023-08-25"},{"lineNumber":91,"author":{"gitId":"ruishanteo"},"content":"                if (description.trim().equals(\"\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":92,"author":{"gitId":"ruishanteo"},"content":"                    throw new DukeException(\"The description of an event cannot be empty.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":93,"author":{"gitId":"ruishanteo"},"content":"                }","lastModifiedDate":"2023-08-25"},{"lineNumber":94,"author":{"gitId":"ruishanteo"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":95,"author":{"gitId":"ruishanteo"},"content":"                throw new DukeException(\"The description of an event cannot be empty.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":96,"author":{"gitId":"ruishanteo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":97,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":98,"author":{"gitId":"ruishanteo"},"content":"            String[] duration \u003d split[1].split(\" /to \", 2);","lastModifiedDate":"2023-08-25"},{"lineNumber":99,"author":{"gitId":"ruishanteo"},"content":"            if (duration.length \u003d\u003d 1) {","lastModifiedDate":"2023-08-25"},{"lineNumber":100,"author":{"gitId":"ruishanteo"},"content":"                throw new DukeException(\"Events must have a /from and /to.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":101,"author":{"gitId":"ruishanteo"},"content":"            } else if (duration[0].trim().equals(\"\") || duration[1].trim().equals(\"\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":102,"author":{"gitId":"ruishanteo"},"content":"                throw new DukeException(\"/from and /to cannot be empty.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":103,"author":{"gitId":"ruishanteo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":104,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":105,"author":{"gitId":"ruishanteo"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-08-25"},{"lineNumber":106,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":107,"author":{"gitId":"ruishanteo"},"content":"            LocalDateTime dateTimeStart;","lastModifiedDate":"2023-08-26"},{"lineNumber":108,"author":{"gitId":"ruishanteo"},"content":"            LocalDateTime dateTimeEnd;","lastModifiedDate":"2023-08-26"},{"lineNumber":109,"author":{"gitId":"ruishanteo"},"content":"            try {","lastModifiedDate":"2023-08-26"},{"lineNumber":110,"author":{"gitId":"ruishanteo"},"content":"                dateTimeStart \u003d LocalDateTime.parse(duration[0], formatter);","lastModifiedDate":"2023-08-26"},{"lineNumber":111,"author":{"gitId":"ruishanteo"},"content":"                dateTimeEnd \u003d LocalDateTime.parse(duration[1], formatter);","lastModifiedDate":"2023-08-26"},{"lineNumber":112,"author":{"gitId":"ruishanteo"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":113,"author":{"gitId":"ruishanteo"},"content":"                throw new DukeException(\"DateTime should be in yyyy-MM-dd HH:mm.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":114,"author":{"gitId":"ruishanteo"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":115,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":116,"author":{"gitId":"ruishanteo"},"content":"            Event t \u003d new Event(description, dateTimeStart, dateTimeEnd);","lastModifiedDate":"2023-08-25"},{"lineNumber":117,"author":{"gitId":"ruishanteo"},"content":"            return new AddCommand(t);","lastModifiedDate":"2023-08-25"},{"lineNumber":118,"author":{"gitId":"ruishanteo"},"content":"        } else if (input.contains(\"unmark\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":119,"author":{"gitId":"ruishanteo"},"content":"            if (input.length() \u003c 7) {","lastModifiedDate":"2023-08-25"},{"lineNumber":120,"author":{"gitId":"ruishanteo"},"content":"                throw new DukeException(\"duke.task.Task number to be unmarked cannot be empty.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":121,"author":{"gitId":"ruishanteo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":122,"author":{"gitId":"ruishanteo"},"content":"            String subInput \u003d input.substring(7);","lastModifiedDate":"2023-08-25"},{"lineNumber":123,"author":{"gitId":"ruishanteo"},"content":"            int targetIndex;","lastModifiedDate":"2023-08-25"},{"lineNumber":124,"author":{"gitId":"ruishanteo"},"content":"            try {","lastModifiedDate":"2023-08-25"},{"lineNumber":125,"author":{"gitId":"ruishanteo"},"content":"                targetIndex \u003d Integer.parseInt(subInput);","lastModifiedDate":"2023-08-25"},{"lineNumber":126,"author":{"gitId":"ruishanteo"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":127,"author":{"gitId":"ruishanteo"},"content":"                throw new DukeException(\"duke.task.Task to be unmarked must be a number.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":128,"author":{"gitId":"ruishanteo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":129,"author":{"gitId":"ruishanteo"},"content":"            return new UnmarkCommand(targetIndex);","lastModifiedDate":"2023-08-25"},{"lineNumber":130,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":131,"author":{"gitId":"ruishanteo"},"content":"        } else if (input.contains(\"mark\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":132,"author":{"gitId":"ruishanteo"},"content":"            if (input.length() \u003c 5) {","lastModifiedDate":"2023-08-25"},{"lineNumber":133,"author":{"gitId":"ruishanteo"},"content":"                throw new DukeException(\"duke.task.Task number to be marked cannot be empty.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":134,"author":{"gitId":"ruishanteo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":135,"author":{"gitId":"ruishanteo"},"content":"            String subInput \u003d input.substring(5);","lastModifiedDate":"2023-08-25"},{"lineNumber":136,"author":{"gitId":"ruishanteo"},"content":"            int targetIndex;","lastModifiedDate":"2023-08-25"},{"lineNumber":137,"author":{"gitId":"ruishanteo"},"content":"            try {","lastModifiedDate":"2023-08-25"},{"lineNumber":138,"author":{"gitId":"ruishanteo"},"content":"                targetIndex \u003d Integer.parseInt(subInput);","lastModifiedDate":"2023-08-25"},{"lineNumber":139,"author":{"gitId":"ruishanteo"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":140,"author":{"gitId":"ruishanteo"},"content":"                throw new DukeException(\"duke.task.Task to be marked must be a number.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":141,"author":{"gitId":"ruishanteo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":142,"author":{"gitId":"ruishanteo"},"content":"            return new MarkCommand(targetIndex);","lastModifiedDate":"2023-08-25"},{"lineNumber":143,"author":{"gitId":"ruishanteo"},"content":"        } else if (input.contains(\"delete\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":144,"author":{"gitId":"ruishanteo"},"content":"            if (input.length() \u003c 7) {","lastModifiedDate":"2023-08-25"},{"lineNumber":145,"author":{"gitId":"ruishanteo"},"content":"                throw new DukeException(\"duke.task.Task number to be deleted cannot be empty.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":146,"author":{"gitId":"ruishanteo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":147,"author":{"gitId":"ruishanteo"},"content":"            String subInput \u003d input.substring(7);","lastModifiedDate":"2023-08-25"},{"lineNumber":148,"author":{"gitId":"ruishanteo"},"content":"            int targetIndex;","lastModifiedDate":"2023-08-25"},{"lineNumber":149,"author":{"gitId":"ruishanteo"},"content":"            try {","lastModifiedDate":"2023-08-25"},{"lineNumber":150,"author":{"gitId":"ruishanteo"},"content":"                targetIndex \u003d Integer.parseInt(subInput);","lastModifiedDate":"2023-08-25"},{"lineNumber":151,"author":{"gitId":"ruishanteo"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":152,"author":{"gitId":"ruishanteo"},"content":"                throw new DukeException(\"duke.task.Task to be deleted must be a number.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":153,"author":{"gitId":"ruishanteo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":154,"author":{"gitId":"ruishanteo"},"content":"            return new DeleteCommand(targetIndex);","lastModifiedDate":"2023-08-25"},{"lineNumber":155,"author":{"gitId":"ruishanteo"},"content":"        } else {","lastModifiedDate":"2023-08-25"},{"lineNumber":156,"author":{"gitId":"ruishanteo"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-08-25"},{"lineNumber":157,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":158,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":159,"author":{"gitId":"ruishanteo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"ruishanteo":159}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruishanteo"},"content":"package duke;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"ruishanteo"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"ruishanteo"},"content":"import java.io.File;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"ruishanteo"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"ruishanteo"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"ruishanteo"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"ruishanteo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"ruishanteo"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"ruishanteo"},"content":"/**","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"ruishanteo"},"content":" * Manages the loading and saving of data for the Duke application.","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"ruishanteo"},"content":" * This class handles reading and writing data from/to a text file.","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"ruishanteo"},"content":" */","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"ruishanteo"},"content":"public class Storage {","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"ruishanteo"},"content":"    private String folder;","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"ruishanteo"},"content":"    private String text;","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"ruishanteo"},"content":"     * Constructs a Storage object with the specified folder and text file name.","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"ruishanteo"},"content":"     * @param folder The folder where the data file is located or should be created.","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"ruishanteo"},"content":"     * @param text   The name of the text file to be used for data storage.","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"ruishanteo"},"content":"    public Storage(String folder, String text) {","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"ruishanteo"},"content":"        this.folder \u003d folder;","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"ruishanteo"},"content":"        this.text \u003d text;","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"ruishanteo"},"content":"     * Loads data from the specified text file and returns it as a list of strings.","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"ruishanteo"},"content":"     * @return An ArrayList of strings containing data read from the text file.","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"ruishanteo"},"content":"     * @throws DukeException If an error occurs while loading the data.","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"ruishanteo"},"content":"    public ArrayList\u003cString\u003e loadFile() throws DukeException {","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"ruishanteo"},"content":"        ArrayList\u003cString\u003e list \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"ruishanteo"},"content":"        try {","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"ruishanteo"},"content":"            File directory \u003d new File(folder);","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"ruishanteo"},"content":"            if (!directory.exists()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"ruishanteo"},"content":"                directory.mkdirs();","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"ruishanteo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"ruishanteo"},"content":"            File file \u003d new File(directory, text);","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"ruishanteo"},"content":"            if (!file.exists()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"ruishanteo"},"content":"                file.createNewFile();","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"ruishanteo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":47,"author":{"gitId":"ruishanteo"},"content":"            Scanner fileScanner \u003d new Scanner(file);","lastModifiedDate":"2023-08-25"},{"lineNumber":48,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":49,"author":{"gitId":"ruishanteo"},"content":"            while (fileScanner.hasNextLine()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"ruishanteo"},"content":"                list.add(fileScanner.nextLine());","lastModifiedDate":"2023-08-25"},{"lineNumber":51,"author":{"gitId":"ruishanteo"},"content":"            }","lastModifiedDate":"2023-08-25"},{"lineNumber":52,"author":{"gitId":"ruishanteo"},"content":"            fileScanner.close();","lastModifiedDate":"2023-08-25"},{"lineNumber":53,"author":{"gitId":"ruishanteo"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":54,"author":{"gitId":"ruishanteo"},"content":"            throw new DukeException(\"File not found.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":55,"author":{"gitId":"ruishanteo"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":56,"author":{"gitId":"ruishanteo"},"content":"            throw new DukeException(\"IOException occurred.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":57,"author":{"gitId":"ruishanteo"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":58,"author":{"gitId":"ruishanteo"},"content":"            throw new DukeException(\"An error occurred.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":59,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":60,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":61,"author":{"gitId":"ruishanteo"},"content":"        return list;","lastModifiedDate":"2023-08-25"},{"lineNumber":62,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":63,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":64,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":65,"author":{"gitId":"ruishanteo"},"content":"     * Saves data from the given TaskList to the text file.","lastModifiedDate":"2023-08-26"},{"lineNumber":66,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":67,"author":{"gitId":"ruishanteo"},"content":"     * @param taskList The TaskList containing data to be saved.","lastModifiedDate":"2023-08-26"},{"lineNumber":68,"author":{"gitId":"ruishanteo"},"content":"     * @throws DukeException If an error occurs while saving the data.","lastModifiedDate":"2023-08-26"},{"lineNumber":69,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":70,"author":{"gitId":"ruishanteo"},"content":"    public void saveFile(TaskList taskList) throws DukeException {","lastModifiedDate":"2023-08-25"},{"lineNumber":71,"author":{"gitId":"ruishanteo"},"content":"        File directory \u003d new File(folder);","lastModifiedDate":"2023-08-25"},{"lineNumber":72,"author":{"gitId":"ruishanteo"},"content":"        if (!directory.exists()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":73,"author":{"gitId":"ruishanteo"},"content":"            directory.mkdirs();","lastModifiedDate":"2023-08-25"},{"lineNumber":74,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":75,"author":{"gitId":"ruishanteo"},"content":"        File file \u003d new File(directory, text);","lastModifiedDate":"2023-08-25"},{"lineNumber":76,"author":{"gitId":"ruishanteo"},"content":"        try (BufferedWriter writer \u003d new BufferedWriter(new FileWriter(file))) {","lastModifiedDate":"2023-08-25"},{"lineNumber":77,"author":{"gitId":"ruishanteo"},"content":"            taskList.save(writer);","lastModifiedDate":"2023-08-25"},{"lineNumber":78,"author":{"gitId":"ruishanteo"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":79,"author":{"gitId":"ruishanteo"},"content":"            throw new DukeException(\"An error occurred with saving.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":80,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":81,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":82,"author":{"gitId":"ruishanteo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"ruishanteo":82}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruishanteo"},"content":"package duke;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"ruishanteo"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"ruishanteo"},"content":"import duke.task.Event;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"ruishanteo"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"ruishanteo"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"ruishanteo"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"ruishanteo"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"ruishanteo"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"ruishanteo"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"ruishanteo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"ruishanteo"},"content":"/**","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"ruishanteo"},"content":" * Represents a list of tasks in the Duke application.","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"ruishanteo"},"content":" * This class manages the collection of tasks, as well as their addition, deletion,","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"ruishanteo"},"content":" * marking as done/undone, and reading/saving from/to data sources.","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"ruishanteo"},"content":" */","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"ruishanteo"},"content":"public class TaskList {","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"ruishanteo"},"content":"    private static ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"ruishanteo"},"content":"     * Constructs a TaskList object and initializes it with data from the given list of strings.","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"ruishanteo"},"content":"     * @param data A list of strings containing task data to be loaded into the task list.","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"ruishanteo"},"content":"    public TaskList(ArrayList\u003cString\u003e data) {","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"ruishanteo"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"ruishanteo"},"content":"        for (String line : data) {","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"ruishanteo"},"content":"            readLine(line);","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"ruishanteo"},"content":"     * Constructs an empty TaskList object.","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"ruishanteo"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"ruishanteo"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"ruishanteo"},"content":"    private Task readLine(String line) {","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"ruishanteo"},"content":"        String[] split \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"ruishanteo"},"content":"        String type \u003d split[0];","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"ruishanteo"},"content":"        boolean isDone \u003d split[1].equals(\"1\");","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"ruishanteo"},"content":"        String description \u003d split[2];","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"ruishanteo"},"content":"        Task task \u003d null;","lastModifiedDate":"2023-08-25"},{"lineNumber":47,"author":{"gitId":"ruishanteo"},"content":"        if (type.equals(\"T\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":48,"author":{"gitId":"ruishanteo"},"content":"            task \u003d this.addToDo(description);","lastModifiedDate":"2023-08-25"},{"lineNumber":49,"author":{"gitId":"ruishanteo"},"content":"        } else if (type.equals(\"E\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"ruishanteo"},"content":"            task \u003d this.addEvent(description, split[3], split[4]);","lastModifiedDate":"2023-08-25"},{"lineNumber":51,"author":{"gitId":"ruishanteo"},"content":"        } else if (type.equals(\"D\")) {","lastModifiedDate":"2023-08-25"},{"lineNumber":52,"author":{"gitId":"ruishanteo"},"content":"            task \u003d this.addDeadline(description, split[3]);","lastModifiedDate":"2023-08-25"},{"lineNumber":53,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":54,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":55,"author":{"gitId":"ruishanteo"},"content":"        if (isDone) {","lastModifiedDate":"2023-08-25"},{"lineNumber":56,"author":{"gitId":"ruishanteo"},"content":"            task.markAsDone();","lastModifiedDate":"2023-08-25"},{"lineNumber":57,"author":{"gitId":"ruishanteo"},"content":"        } else {","lastModifiedDate":"2023-08-25"},{"lineNumber":58,"author":{"gitId":"ruishanteo"},"content":"            task.markAsUndone();","lastModifiedDate":"2023-08-25"},{"lineNumber":59,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":60,"author":{"gitId":"ruishanteo"},"content":"        return task;","lastModifiedDate":"2023-08-25"},{"lineNumber":61,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":62,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":63,"author":{"gitId":"ruishanteo"},"content":"    private void checkIndex(int index) throws DukeException {","lastModifiedDate":"2023-08-25"},{"lineNumber":64,"author":{"gitId":"ruishanteo"},"content":"        if (index \u003c 1 || index - 1 \u003e\u003d tasks.size()) {","lastModifiedDate":"2023-08-25"},{"lineNumber":65,"author":{"gitId":"ruishanteo"},"content":"            throw new DukeException(\"duke.task.Task number is out of range.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":66,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":67,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":68,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":69,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":70,"author":{"gitId":"ruishanteo"},"content":"     * Adds a task to the task list and displays a corresponding message using the provided UI.","lastModifiedDate":"2023-08-26"},{"lineNumber":71,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":72,"author":{"gitId":"ruishanteo"},"content":"     * @param task The task to be added.","lastModifiedDate":"2023-08-26"},{"lineNumber":73,"author":{"gitId":"ruishanteo"},"content":"     * @param ui The user interface to interact with the user or display messages.","lastModifiedDate":"2023-08-26"},{"lineNumber":74,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":75,"author":{"gitId":"ruishanteo"},"content":"    public void addTask(Task task, Ui ui) {","lastModifiedDate":"2023-08-25"},{"lineNumber":76,"author":{"gitId":"ruishanteo"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-08-25"},{"lineNumber":77,"author":{"gitId":"ruishanteo"},"content":"        ui.addMessage(task, tasks.size());","lastModifiedDate":"2023-08-25"},{"lineNumber":78,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":79,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":80,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":81,"author":{"gitId":"ruishanteo"},"content":"     * Deletes a task from the task list by index and displays a corresponding message using the provided UI.","lastModifiedDate":"2023-08-26"},{"lineNumber":82,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":83,"author":{"gitId":"ruishanteo"},"content":"     * @param index The index of the task to be deleted.","lastModifiedDate":"2023-08-26"},{"lineNumber":84,"author":{"gitId":"ruishanteo"},"content":"     * @param ui The user interface to interact with the user or display messages.","lastModifiedDate":"2023-08-26"},{"lineNumber":85,"author":{"gitId":"ruishanteo"},"content":"     * @throws DukeException If the provided index is out of range.","lastModifiedDate":"2023-08-26"},{"lineNumber":86,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":87,"author":{"gitId":"ruishanteo"},"content":"    public void deleteTask(int index, Ui ui) throws DukeException {","lastModifiedDate":"2023-08-25"},{"lineNumber":88,"author":{"gitId":"ruishanteo"},"content":"        checkIndex(index);","lastModifiedDate":"2023-08-25"},{"lineNumber":89,"author":{"gitId":"ruishanteo"},"content":"        Task task \u003d this.tasks.remove(index - 1);","lastModifiedDate":"2023-08-25"},{"lineNumber":90,"author":{"gitId":"ruishanteo"},"content":"        ui.deleteMessage(task, tasks.size());","lastModifiedDate":"2023-08-25"},{"lineNumber":91,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":92,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":93,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":94,"author":{"gitId":"ruishanteo"},"content":"     * Finds the corresponding tasks with descriptions matching the keyword.","lastModifiedDate":"2023-08-26"},{"lineNumber":95,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":96,"author":{"gitId":"ruishanteo"},"content":"     * @param keyword The keyword that is being searched in description.","lastModifiedDate":"2023-08-26"},{"lineNumber":97,"author":{"gitId":"ruishanteo"},"content":"     * @param ui      The user interface to interact with the user or display messages.","lastModifiedDate":"2023-08-26"},{"lineNumber":98,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":99,"author":{"gitId":"ruishanteo"},"content":"    public void findTask(String keyword, Ui ui) {","lastModifiedDate":"2023-08-26"},{"lineNumber":100,"author":{"gitId":"ruishanteo"},"content":"        ArrayList\u003cString\u003e str \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-26"},{"lineNumber":101,"author":{"gitId":"ruishanteo"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-08-26"},{"lineNumber":102,"author":{"gitId":"ruishanteo"},"content":"            if (task.hasKeyword(keyword)) {","lastModifiedDate":"2023-08-26"},{"lineNumber":103,"author":{"gitId":"ruishanteo"},"content":"                str.add(task.toString());","lastModifiedDate":"2023-08-26"},{"lineNumber":104,"author":{"gitId":"ruishanteo"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":105,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":106,"author":{"gitId":"ruishanteo"},"content":"        if (str.size() \u003e 0) {","lastModifiedDate":"2023-08-26"},{"lineNumber":107,"author":{"gitId":"ruishanteo"},"content":"            ui.findMessage();","lastModifiedDate":"2023-08-26"},{"lineNumber":108,"author":{"gitId":"ruishanteo"},"content":"            for (String task : str) {","lastModifiedDate":"2023-08-26"},{"lineNumber":109,"author":{"gitId":"ruishanteo"},"content":"                ui.showMessage(task);","lastModifiedDate":"2023-08-26"},{"lineNumber":110,"author":{"gitId":"ruishanteo"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":111,"author":{"gitId":"ruishanteo"},"content":"        } else {","lastModifiedDate":"2023-08-26"},{"lineNumber":112,"author":{"gitId":"ruishanteo"},"content":"            ui.findNoMessage();","lastModifiedDate":"2023-08-26"},{"lineNumber":113,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":114,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":115,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":116,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":117,"author":{"gitId":"ruishanteo"},"content":"     * Marks a task from the task list by index and displays a corresponding message using the provided UI.","lastModifiedDate":"2023-08-26"},{"lineNumber":118,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":119,"author":{"gitId":"ruishanteo"},"content":"     * @param index The index of the task to be deleted.","lastModifiedDate":"2023-08-26"},{"lineNumber":120,"author":{"gitId":"ruishanteo"},"content":"     * @param ui The user interface to interact with the user or display messages.","lastModifiedDate":"2023-08-26"},{"lineNumber":121,"author":{"gitId":"ruishanteo"},"content":"     * @throws DukeException If the provided index is out of range.","lastModifiedDate":"2023-08-26"},{"lineNumber":122,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":123,"author":{"gitId":"ruishanteo"},"content":"    public void markTask(int index, Ui ui) throws DukeException {","lastModifiedDate":"2023-08-25"},{"lineNumber":124,"author":{"gitId":"ruishanteo"},"content":"        checkIndex(index);","lastModifiedDate":"2023-08-25"},{"lineNumber":125,"author":{"gitId":"ruishanteo"},"content":"        Task task \u003d this.tasks.get(index - 1);","lastModifiedDate":"2023-08-25"},{"lineNumber":126,"author":{"gitId":"ruishanteo"},"content":"        task.markAsDone();","lastModifiedDate":"2023-08-25"},{"lineNumber":127,"author":{"gitId":"ruishanteo"},"content":"        ui.markMessage(task);","lastModifiedDate":"2023-08-25"},{"lineNumber":128,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":129,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":130,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":131,"author":{"gitId":"ruishanteo"},"content":"     * Unmarks a task from the task list by index and displays a corresponding message using the provided UI.","lastModifiedDate":"2023-08-26"},{"lineNumber":132,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":133,"author":{"gitId":"ruishanteo"},"content":"     * @param index The index of the task to be deleted.","lastModifiedDate":"2023-08-26"},{"lineNumber":134,"author":{"gitId":"ruishanteo"},"content":"     * @param ui The user interface to interact with the user or display messages.","lastModifiedDate":"2023-08-26"},{"lineNumber":135,"author":{"gitId":"ruishanteo"},"content":"     * @throws DukeException If the provided index is out of range.","lastModifiedDate":"2023-08-26"},{"lineNumber":136,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":137,"author":{"gitId":"ruishanteo"},"content":"    public void unmarkTask(int index, Ui ui) throws DukeException {","lastModifiedDate":"2023-08-25"},{"lineNumber":138,"author":{"gitId":"ruishanteo"},"content":"        checkIndex(index);","lastModifiedDate":"2023-08-25"},{"lineNumber":139,"author":{"gitId":"ruishanteo"},"content":"        Task task \u003d this.tasks.get(index - 1);","lastModifiedDate":"2023-08-25"},{"lineNumber":140,"author":{"gitId":"ruishanteo"},"content":"        task.markAsUndone();","lastModifiedDate":"2023-08-25"},{"lineNumber":141,"author":{"gitId":"ruishanteo"},"content":"        ui.unmarkMessage(task);","lastModifiedDate":"2023-08-25"},{"lineNumber":142,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":143,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":144,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":145,"author":{"gitId":"ruishanteo"},"content":"     * Creates a new ToDo task with the given description, adds it to the task list,","lastModifiedDate":"2023-08-26"},{"lineNumber":146,"author":{"gitId":"ruishanteo"},"content":"     * and returns the created task.","lastModifiedDate":"2023-08-26"},{"lineNumber":147,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":148,"author":{"gitId":"ruishanteo"},"content":"     * @param description The description of the ToDo task.","lastModifiedDate":"2023-08-26"},{"lineNumber":149,"author":{"gitId":"ruishanteo"},"content":"     * @return The created ToDo task.","lastModifiedDate":"2023-08-26"},{"lineNumber":150,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":151,"author":{"gitId":"ruishanteo"},"content":"    public ToDo addToDo(String description) {","lastModifiedDate":"2023-08-25"},{"lineNumber":152,"author":{"gitId":"ruishanteo"},"content":"        ToDo toDo \u003d new ToDo(description);","lastModifiedDate":"2023-08-25"},{"lineNumber":153,"author":{"gitId":"ruishanteo"},"content":"        this.tasks.add(toDo);","lastModifiedDate":"2023-08-25"},{"lineNumber":154,"author":{"gitId":"ruishanteo"},"content":"        return toDo;","lastModifiedDate":"2023-08-25"},{"lineNumber":155,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":156,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":157,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":158,"author":{"gitId":"ruishanteo"},"content":"     * Creates a new Event task with the given description, start date/time, end date/time,","lastModifiedDate":"2023-08-26"},{"lineNumber":159,"author":{"gitId":"ruishanteo"},"content":"     * adds it to the task list, and returns the created task.","lastModifiedDate":"2023-08-26"},{"lineNumber":160,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":161,"author":{"gitId":"ruishanteo"},"content":"     * @param description The description of the Event task.","lastModifiedDate":"2023-08-26"},{"lineNumber":162,"author":{"gitId":"ruishanteo"},"content":"     * @param from The start date and time of the event (in \"yyyy-MM-dd HH:mm\" format).","lastModifiedDate":"2023-08-26"},{"lineNumber":163,"author":{"gitId":"ruishanteo"},"content":"     * @param to The end date and time of the event (in \"yyyy-MM-dd HH:mm\" format).","lastModifiedDate":"2023-08-26"},{"lineNumber":164,"author":{"gitId":"ruishanteo"},"content":"     * @return The created Event task.","lastModifiedDate":"2023-08-26"},{"lineNumber":165,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":166,"author":{"gitId":"ruishanteo"},"content":"    public Event addEvent(String description, String from, String to) {","lastModifiedDate":"2023-08-25"},{"lineNumber":167,"author":{"gitId":"ruishanteo"},"content":"        Event event \u003d new Event(description,","lastModifiedDate":"2023-08-25"},{"lineNumber":168,"author":{"gitId":"ruishanteo"},"content":"                                LocalDateTime.parse(from, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")),","lastModifiedDate":"2023-08-25"},{"lineNumber":169,"author":{"gitId":"ruishanteo"},"content":"                                LocalDateTime.parse(to, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")));","lastModifiedDate":"2023-08-25"},{"lineNumber":170,"author":{"gitId":"ruishanteo"},"content":"        this.tasks.add(event);","lastModifiedDate":"2023-08-25"},{"lineNumber":171,"author":{"gitId":"ruishanteo"},"content":"        return event;","lastModifiedDate":"2023-08-25"},{"lineNumber":172,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":173,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":174,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":175,"author":{"gitId":"ruishanteo"},"content":"     * Creates a new Deadline task with the given description and deadline date/time,","lastModifiedDate":"2023-08-26"},{"lineNumber":176,"author":{"gitId":"ruishanteo"},"content":"     * adds it to the task list, and returns the created task.","lastModifiedDate":"2023-08-26"},{"lineNumber":177,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":178,"author":{"gitId":"ruishanteo"},"content":"     * @param description The description of the Deadline task.","lastModifiedDate":"2023-08-26"},{"lineNumber":179,"author":{"gitId":"ruishanteo"},"content":"     * @param by The deadline date and time (in \"yyyy-MM-dd HH:mm\" format).","lastModifiedDate":"2023-08-26"},{"lineNumber":180,"author":{"gitId":"ruishanteo"},"content":"     * @return The created Deadline task.","lastModifiedDate":"2023-08-26"},{"lineNumber":181,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":182,"author":{"gitId":"ruishanteo"},"content":"    public Deadline addDeadline(String description, String by) {","lastModifiedDate":"2023-08-25"},{"lineNumber":183,"author":{"gitId":"ruishanteo"},"content":"        Deadline deadline \u003d new Deadline(description, LocalDateTime.parse(by,","lastModifiedDate":"2023-08-25"},{"lineNumber":184,"author":{"gitId":"ruishanteo"},"content":"                                                                          DateTimeFormatter.ofPattern(","lastModifiedDate":"2023-08-26"},{"lineNumber":185,"author":{"gitId":"ruishanteo"},"content":"                                                                                  \"yyyy-MM-dd HH:mm\")));","lastModifiedDate":"2023-08-26"},{"lineNumber":186,"author":{"gitId":"ruishanteo"},"content":"        this.tasks.add(deadline);","lastModifiedDate":"2023-08-25"},{"lineNumber":187,"author":{"gitId":"ruishanteo"},"content":"        return deadline;","lastModifiedDate":"2023-08-25"},{"lineNumber":188,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":189,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":190,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":191,"author":{"gitId":"ruishanteo"},"content":"     * Saves the task list data to a specified writer.","lastModifiedDate":"2023-08-26"},{"lineNumber":192,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":193,"author":{"gitId":"ruishanteo"},"content":"     * @param writer The writer to use for saving the data.","lastModifiedDate":"2023-08-26"},{"lineNumber":194,"author":{"gitId":"ruishanteo"},"content":"     * @throws IOException If an error occurs during the writing process.","lastModifiedDate":"2023-08-26"},{"lineNumber":195,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":196,"author":{"gitId":"ruishanteo"},"content":"    public void save(BufferedWriter writer) throws IOException {","lastModifiedDate":"2023-08-25"},{"lineNumber":197,"author":{"gitId":"ruishanteo"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-08-25"},{"lineNumber":198,"author":{"gitId":"ruishanteo"},"content":"            writer.write(task.toSaveLine());","lastModifiedDate":"2023-08-25"},{"lineNumber":199,"author":{"gitId":"ruishanteo"},"content":"            writer.newLine();","lastModifiedDate":"2023-08-25"},{"lineNumber":200,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":201,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":202,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":203,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":204,"author":{"gitId":"ruishanteo"},"content":"     * Generates a string representation of the task list.","lastModifiedDate":"2023-08-26"},{"lineNumber":205,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":206,"author":{"gitId":"ruishanteo"},"content":"     * @return A formatted string containing the tasks in the list.","lastModifiedDate":"2023-08-26"},{"lineNumber":207,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":208,"author":{"gitId":"ruishanteo"},"content":"    public String toString() {","lastModifiedDate":"2023-08-25"},{"lineNumber":209,"author":{"gitId":"ruishanteo"},"content":"        String str \u003d \"\";","lastModifiedDate":"2023-08-25"},{"lineNumber":210,"author":{"gitId":"ruishanteo"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-08-25"},{"lineNumber":211,"author":{"gitId":"ruishanteo"},"content":"            str +\u003d ((i + 1) + \".\" + tasks.get(i) + \"\\n\");","lastModifiedDate":"2023-08-25"},{"lineNumber":212,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-25"},{"lineNumber":213,"author":{"gitId":"ruishanteo"},"content":"        return str;","lastModifiedDate":"2023-08-25"},{"lineNumber":214,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":215,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":216,"author":{"gitId":"ruishanteo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"ruishanteo":216}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruishanteo"},"content":"package duke;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"ruishanteo"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"ruishanteo"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"ruishanteo"},"content":"/**","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"ruishanteo"},"content":" * Provides user interface functionalities for the Duke application.","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"ruishanteo"},"content":" * This class handles displaying messages, taking user input, and showing various responses.","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"ruishanteo"},"content":" */","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"ruishanteo"},"content":"public class Ui {","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"ruishanteo"},"content":"    private Scanner scanner;","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"ruishanteo"},"content":"     * Constructs a Ui object with a new Scanner to read user input from the console.","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"ruishanteo"},"content":"    public Ui() {","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"ruishanteo"},"content":"        scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"ruishanteo"},"content":"     * Displays a welcome message along with the Duke logo.","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"ruishanteo"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"ruishanteo"},"content":"        String logo \u003d","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"ruishanteo"},"content":"                \".______     ______   .___________.\\n\" +","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"ruishanteo"},"content":"                        \"|   _  \\\\   /  __  \\\\  |           |\\n\" +","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"ruishanteo"},"content":"                        \"|  |_)  | |  |  |  | `---|  |----`\\n\" +","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"ruishanteo"},"content":"                        \"|   _  \u003c  |  |  |  |     |  |     \\n\" +","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"ruishanteo"},"content":"                        \"|  |_)  | |  `--\u0027  |     |  |     \\n\" +","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"ruishanteo"},"content":"                        \"|______/   \\\\______/      |__|     \\n\";","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"ruishanteo"},"content":"        showLine();","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"ruishanteo"},"content":"        System.out.println(\"Hello I\u0027m\\n\" + logo);","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"ruishanteo"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"ruishanteo"},"content":"        showLine();","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":38,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":39,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"ruishanteo"},"content":"     * Displays a farewell message when the user exits the application.","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":42,"author":{"gitId":"ruishanteo"},"content":"    public void showBye() {","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"ruishanteo"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":47,"author":{"gitId":"ruishanteo"},"content":"     * Displays a message indicating the start of the task list display.","lastModifiedDate":"2023-08-26"},{"lineNumber":48,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":49,"author":{"gitId":"ruishanteo"},"content":"    public void showList() {","lastModifiedDate":"2023-08-25"},{"lineNumber":50,"author":{"gitId":"ruishanteo"},"content":"        System.out.println(\"Here are the tasks in your list:\");","lastModifiedDate":"2023-08-25"},{"lineNumber":51,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":52,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":53,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":54,"author":{"gitId":"ruishanteo"},"content":"     * Displays a generic message to the user.","lastModifiedDate":"2023-08-26"},{"lineNumber":55,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":56,"author":{"gitId":"ruishanteo"},"content":"     * @param message The message to be displayed.","lastModifiedDate":"2023-08-26"},{"lineNumber":57,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":58,"author":{"gitId":"ruishanteo"},"content":"    public void showMessage(String message) {","lastModifiedDate":"2023-08-25"},{"lineNumber":59,"author":{"gitId":"ruishanteo"},"content":"        System.out.println(message);","lastModifiedDate":"2023-08-25"},{"lineNumber":60,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":61,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":62,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":63,"author":{"gitId":"ruishanteo"},"content":"     * Displays a line separator to visually separate different sections of output.","lastModifiedDate":"2023-08-26"},{"lineNumber":64,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":65,"author":{"gitId":"ruishanteo"},"content":"    public void showLine() {","lastModifiedDate":"2023-08-25"},{"lineNumber":66,"author":{"gitId":"ruishanteo"},"content":"        System.out.println(\"_________________________________________\");","lastModifiedDate":"2023-08-25"},{"lineNumber":67,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":68,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":69,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":70,"author":{"gitId":"ruishanteo"},"content":"     * Displays an error message associated with a DukeException.","lastModifiedDate":"2023-08-26"},{"lineNumber":71,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":72,"author":{"gitId":"ruishanteo"},"content":"     * @param exception The DukeException containing the error message.","lastModifiedDate":"2023-08-26"},{"lineNumber":73,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":74,"author":{"gitId":"ruishanteo"},"content":"    public void showErrMessage(DukeException exception) {","lastModifiedDate":"2023-08-25"},{"lineNumber":75,"author":{"gitId":"ruishanteo"},"content":"        System.out.println(exception.getMessage());","lastModifiedDate":"2023-08-25"},{"lineNumber":76,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":77,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":78,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":79,"author":{"gitId":"ruishanteo"},"content":"     * Displays a message indicating that a task has been marked as done.","lastModifiedDate":"2023-08-26"},{"lineNumber":80,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":81,"author":{"gitId":"ruishanteo"},"content":"     * @param task The task that was marked as done.","lastModifiedDate":"2023-08-26"},{"lineNumber":82,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":83,"author":{"gitId":"ruishanteo"},"content":"    public void markMessage(Task task) {","lastModifiedDate":"2023-08-25"},{"lineNumber":84,"author":{"gitId":"ruishanteo"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-08-25"},{"lineNumber":85,"author":{"gitId":"ruishanteo"},"content":"        System.out.println(task);","lastModifiedDate":"2023-08-25"},{"lineNumber":86,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":87,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":88,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":89,"author":{"gitId":"ruishanteo"},"content":"     * Displays a message indicating that a task has been marked as not done.","lastModifiedDate":"2023-08-26"},{"lineNumber":90,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":91,"author":{"gitId":"ruishanteo"},"content":"     * @param task The task that was marked as not done.","lastModifiedDate":"2023-08-26"},{"lineNumber":92,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":93,"author":{"gitId":"ruishanteo"},"content":"    public void unmarkMessage(Task task) {","lastModifiedDate":"2023-08-25"},{"lineNumber":94,"author":{"gitId":"ruishanteo"},"content":"        System.out.println(\"Ok, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-08-25"},{"lineNumber":95,"author":{"gitId":"ruishanteo"},"content":"        System.out.println(task);","lastModifiedDate":"2023-08-25"},{"lineNumber":96,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":97,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":98,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":99,"author":{"gitId":"ruishanteo"},"content":"     * Displays a message indicating that a task has been deleted from the task list.","lastModifiedDate":"2023-08-26"},{"lineNumber":100,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":101,"author":{"gitId":"ruishanteo"},"content":"     * @param task  The task that was deleted.","lastModifiedDate":"2023-08-26"},{"lineNumber":102,"author":{"gitId":"ruishanteo"},"content":"     * @param total The total number of tasks after deletion.","lastModifiedDate":"2023-08-26"},{"lineNumber":103,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":104,"author":{"gitId":"ruishanteo"},"content":"    public void deleteMessage(Task task, int total) {","lastModifiedDate":"2023-08-25"},{"lineNumber":105,"author":{"gitId":"ruishanteo"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-08-25"},{"lineNumber":106,"author":{"gitId":"ruishanteo"},"content":"        System.out.println(task);","lastModifiedDate":"2023-08-25"},{"lineNumber":107,"author":{"gitId":"ruishanteo"},"content":"        System.out.println(\"Now you have \" + total + \" tasks in the list.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":108,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":109,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":110,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":111,"author":{"gitId":"ruishanteo"},"content":"     * Displays a message indicating that a task has been added to the task list.","lastModifiedDate":"2023-08-26"},{"lineNumber":112,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":113,"author":{"gitId":"ruishanteo"},"content":"     * @param task  The task that was added.","lastModifiedDate":"2023-08-26"},{"lineNumber":114,"author":{"gitId":"ruishanteo"},"content":"     * @param total The total number of tasks after addition.","lastModifiedDate":"2023-08-26"},{"lineNumber":115,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":116,"author":{"gitId":"ruishanteo"},"content":"    public void addMessage(Task task, int total) {","lastModifiedDate":"2023-08-25"},{"lineNumber":117,"author":{"gitId":"ruishanteo"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-25"},{"lineNumber":118,"author":{"gitId":"ruishanteo"},"content":"        System.out.println(task);","lastModifiedDate":"2023-08-25"},{"lineNumber":119,"author":{"gitId":"ruishanteo"},"content":"        System.out.println(\"Now you have \" + total + \" tasks in the list.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":120,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":121,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":122,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":123,"author":{"gitId":"ruishanteo"},"content":"     * Displays a message indicating that a keyword is being searched.","lastModifiedDate":"2023-08-26"},{"lineNumber":124,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":125,"author":{"gitId":"ruishanteo"},"content":"    public void findMessage() {","lastModifiedDate":"2023-08-26"},{"lineNumber":126,"author":{"gitId":"ruishanteo"},"content":"        System.out.println(\"Here are the matching tasks in your list:\");","lastModifiedDate":"2023-08-26"},{"lineNumber":127,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":128,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":129,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":130,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":131,"author":{"gitId":"ruishanteo"},"content":"     * Displays a message indicating that there is no results found.","lastModifiedDate":"2023-08-26"},{"lineNumber":132,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":133,"author":{"gitId":"ruishanteo"},"content":"    public void findNoMessage() {","lastModifiedDate":"2023-08-26"},{"lineNumber":134,"author":{"gitId":"ruishanteo"},"content":"        System.out.println(\"There are no results matching your keyword.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":135,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":136,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":137,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":138,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":139,"author":{"gitId":"ruishanteo"},"content":"     * Reads and returns a command entered by the user.","lastModifiedDate":"2023-08-26"},{"lineNumber":140,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":141,"author":{"gitId":"ruishanteo"},"content":"     * @return The user\u0027s input command.","lastModifiedDate":"2023-08-26"},{"lineNumber":142,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":143,"author":{"gitId":"ruishanteo"},"content":"    public String readCommand() {","lastModifiedDate":"2023-08-25"},{"lineNumber":144,"author":{"gitId":"ruishanteo"},"content":"        return scanner.nextLine();","lastModifiedDate":"2023-08-25"},{"lineNumber":145,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":146,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":147,"author":{"gitId":"ruishanteo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"ruishanteo":147}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruishanteo"},"content":"package duke.command;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"ruishanteo"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"ruishanteo"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"ruishanteo"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"ruishanteo"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"ruishanteo"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"ruishanteo"},"content":"/**","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"ruishanteo"},"content":" * Represents a command to add a task to the task list in the Duke application.","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"ruishanteo"},"content":" */","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"ruishanteo"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"ruishanteo"},"content":"    private Task task;","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"ruishanteo"},"content":"     * Constructs an AddCommand object with the specified task to be added.","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"ruishanteo"},"content":"     * @param task The task to be added to the task list.","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"ruishanteo"},"content":"    public AddCommand(Task task) {","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"ruishanteo"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"ruishanteo"},"content":"     * Executes the \"add\" command, adding the stored task to the task list and updating storage.","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"ruishanteo"},"content":"     * @param tasks The task list that the command may operate on.","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"ruishanteo"},"content":"     * @param ui The user interface to interact with the user or display messages.","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"ruishanteo"},"content":"     * @param storage The storage handler to manage data persistence.","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"ruishanteo"},"content":"     * @throws DukeException If an error occurs while executing the command.","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"ruishanteo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"ruishanteo"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"ruishanteo"},"content":"        tasks.addTask(task, ui);","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"ruishanteo"},"content":"        storage.saveFile(tasks);","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"ruishanteo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"ruishanteo":37}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruishanteo"},"content":"package duke.command;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"ruishanteo"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"ruishanteo"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"ruishanteo"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"ruishanteo"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"ruishanteo"},"content":"/**","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"ruishanteo"},"content":" * The base class for all commands that can be executed by Duke.","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"ruishanteo"},"content":" */","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"ruishanteo"},"content":"public abstract class Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"ruishanteo"},"content":"     * Checks if executing this command should cause the application to exit.","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"ruishanteo"},"content":"     * @return If executing this command should exit the application.","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"ruishanteo"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"ruishanteo"},"content":"        return false;","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"ruishanteo"},"content":"     * Executes the command, carrying out the specific action defined by the subclass.","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"ruishanteo"},"content":"     * @param tasks   The task list that the command may operate on.","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"ruishanteo"},"content":"     * @param ui      The user interface to interact with the user or display messages.","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"ruishanteo"},"content":"     * @param storage The storage handler to manage data persistence.","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"ruishanteo"},"content":"     * @throws DukeException If an error occurs while executing the command.","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"ruishanteo"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"ruishanteo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"ruishanteo":31}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruishanteo"},"content":"package duke.command;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"ruishanteo"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"ruishanteo"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"ruishanteo"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"ruishanteo"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"ruishanteo"},"content":"/**","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"ruishanteo"},"content":" * Represents a command to delete a task from the task list in the Duke application.","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"ruishanteo"},"content":" */","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"ruishanteo"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"ruishanteo"},"content":"    private int index;","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"ruishanteo"},"content":"     * Constructs an DeleteCommand object with the specified task to be deleted.","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"ruishanteo"},"content":"     * @param index The index of the task to be deleted.","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"ruishanteo"},"content":"    public DeleteCommand(int index) {","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"ruishanteo"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"ruishanteo"},"content":"     * Executes the \"delete\" command, adding the stored task to the task list and updating storage.","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"ruishanteo"},"content":"     * @param tasks   The task list that the command may operate on.","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"ruishanteo"},"content":"     * @param ui      The user interface to interact with the user or display messages.","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"ruishanteo"},"content":"     * @param storage The storage handler to manage data persistence.","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"ruishanteo"},"content":"     * @throws DukeException If an error occurs while executing the command.","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"ruishanteo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"ruishanteo"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"ruishanteo"},"content":"        tasks.deleteTask(index, ui);","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"ruishanteo"},"content":"        storage.saveFile(tasks);","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"ruishanteo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"ruishanteo":36}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruishanteo"},"content":"package duke.command;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"ruishanteo"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"ruishanteo"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"ruishanteo"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"ruishanteo"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"ruishanteo"},"content":"/**","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"ruishanteo"},"content":" * Represents a command to exit the Duke application.","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"ruishanteo"},"content":" */","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"ruishanteo"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"ruishanteo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"ruishanteo"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-25"},{"lineNumber":15,"author":{"gitId":"ruishanteo"},"content":"        return true;","lastModifiedDate":"2023-08-25"},{"lineNumber":16,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":17,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"ruishanteo"},"content":"     * Executes the \"exit\" command, and exits from the application.","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"ruishanteo"},"content":"     * @param tasks The task list that the command may operate on.","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"ruishanteo"},"content":"     * @param ui The user interface to interact with the user or display messages.","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"ruishanteo"},"content":"     * @param storage The storage handler to manage data persistence.","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"ruishanteo"},"content":"     * @throws DukeException If an error occurs while executing the command.","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"ruishanteo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"ruishanteo"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-25"},{"lineNumber":28,"author":{"gitId":"ruishanteo"},"content":"        ui.showBye();","lastModifiedDate":"2023-08-25"},{"lineNumber":29,"author":{"gitId":"ruishanteo"},"content":"        storage.saveFile(tasks);","lastModifiedDate":"2023-08-25"},{"lineNumber":30,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"ruishanteo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"ruishanteo":31}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruishanteo"},"content":"package duke.command;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"ruishanteo"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"ruishanteo"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"ruishanteo"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"ruishanteo"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"ruishanteo"},"content":"/**","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"ruishanteo"},"content":" * Represents a command to find a task from the task list in the Duke application.","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"ruishanteo"},"content":" */","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"ruishanteo"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"ruishanteo"},"content":"    private String keyword;","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"ruishanteo"},"content":"     * Constructs an FindCommand object with the specified keyword to be searched.","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"ruishanteo"},"content":"     * @param keyword The keyword to be searched in the description.","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"ruishanteo"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"ruishanteo"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"ruishanteo"},"content":"     * Executes the \"find\" command, adding the stored task to the task list and updating storage.","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"ruishanteo"},"content":"     * @param tasks   The task list that the command may operate on.","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"ruishanteo"},"content":"     * @param ui      The user interface to interact with the user or display messages.","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"ruishanteo"},"content":"     * @param storage The storage handler to manage data persistence.","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"ruishanteo"},"content":"     * @throws DukeException If an error occurs while executing the command.","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"ruishanteo"},"content":"    @Override","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"ruishanteo"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"ruishanteo"},"content":"        tasks.findTask(keyword, ui);","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"ruishanteo"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"ruishanteo":36}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruishanteo"},"content":"package duke.command;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"ruishanteo"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"ruishanteo"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"ruishanteo"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"ruishanteo"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"ruishanteo"},"content":"/**","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"ruishanteo"},"content":" * Represents a command to list the tasks in the task list.","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"ruishanteo"},"content":" */","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"ruishanteo"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"ruishanteo"},"content":"     * Executes the \"list\" command, and lists all the tasks.","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"ruishanteo"},"content":"     * @param tasks The task list that the command may operate on.","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"ruishanteo"},"content":"     * @param ui The user interface to interact with the user or display messages.","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"ruishanteo"},"content":"     * @param storage The storage handler to manage data persistence.","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"ruishanteo"},"content":"     * @throws DukeException If an error occurs while executing the command.","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"ruishanteo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"ruishanteo"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"ruishanteo"},"content":"        ui.showList();","lastModifiedDate":"2023-08-25"},{"lineNumber":24,"author":{"gitId":"ruishanteo"},"content":"        ui.showMessage(tasks.toString());","lastModifiedDate":"2023-08-25"},{"lineNumber":25,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":26,"author":{"gitId":"ruishanteo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"ruishanteo":26}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruishanteo"},"content":"package duke.command;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"ruishanteo"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"ruishanteo"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"ruishanteo"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"ruishanteo"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"ruishanteo"},"content":"/**","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"ruishanteo"},"content":" * Represents a command to mark a task.","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"ruishanteo"},"content":" */","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"ruishanteo"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"ruishanteo"},"content":"    private int index;","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"ruishanteo"},"content":"     * Constructs an MarkCommand object with the specified task to be marked.","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"ruishanteo"},"content":"     * @param index The index of the task to be marked.","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"ruishanteo"},"content":"    public MarkCommand(int index) {","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"ruishanteo"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"ruishanteo"},"content":"     * Executes the \"mark\" command, and marks the task.","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"ruishanteo"},"content":"     * @param tasks The task list that the command may operate on.","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"ruishanteo"},"content":"     * @param ui The user interface to interact with the user or display messages.","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"ruishanteo"},"content":"     * @param storage The storage handler to manage data persistence.","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"ruishanteo"},"content":"     * @throws DukeException If an error occurs while executing the command.","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"ruishanteo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"ruishanteo"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"ruishanteo"},"content":"        tasks.markTask(index, ui);","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"ruishanteo"},"content":"        storage.saveFile(tasks);","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"ruishanteo"},"content":"}","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"ruishanteo":36}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruishanteo"},"content":"package duke.command;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"ruishanteo"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"ruishanteo"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"ruishanteo"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"ruishanteo"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"ruishanteo"},"content":"/**","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"ruishanteo"},"content":" * Represents a command to unmark a task.","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"ruishanteo"},"content":" */","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"ruishanteo"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"ruishanteo"},"content":"    private int index;","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"ruishanteo"},"content":"     * Constructs an UnmarkCommand object with the specified task to be marked.","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"ruishanteo"},"content":"     * @param index The index of the task to be marked.","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"ruishanteo"},"content":"    public UnmarkCommand(int index) {","lastModifiedDate":"2023-08-25"},{"lineNumber":20,"author":{"gitId":"ruishanteo"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":22,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":23,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"ruishanteo"},"content":"     * Executes the \"unmark\" command, and unmarks the task.","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"ruishanteo"},"content":"     * @param tasks The task list that the command may operate on.","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"ruishanteo"},"content":"     * @param ui The user interface to interact with the user or display messages.","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"ruishanteo"},"content":"     * @param storage The storage handler to manage data persistence.","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"ruishanteo"},"content":"     * @throws DukeException If an error occurs while executing the command.","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"ruishanteo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"ruishanteo"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"ruishanteo"},"content":"        tasks.unmarkTask(index, ui);","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"ruishanteo"},"content":"        storage.saveFile(tasks);","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"ruishanteo"},"content":"}","lastModifiedDate":"2023-08-25"},{"lineNumber":37,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"}],"authorContributionMap":{"ruishanteo":37}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruishanteo"},"content":"package duke.task;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"ruishanteo"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"ruishanteo"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"ruishanteo"},"content":"/**","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"ruishanteo"},"content":" * Represents a task with a specific deadline in the Duke application.","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"ruishanteo"},"content":" */","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"ruishanteo"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-19"},{"lineNumber":10,"author":{"gitId":"ruishanteo"},"content":"    protected LocalDateTime byDateTime;","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":12,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"ruishanteo"},"content":"     * Constructs a Deadline object with the specified description and deadline date/time.","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"ruishanteo"},"content":"     * @param description The description of the deadline task.","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"ruishanteo"},"content":"     * @param byDateTime  The deadline date and time.","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"ruishanteo"},"content":"    public Deadline(String description, LocalDateTime byDateTime) {","lastModifiedDate":"2023-08-25"},{"lineNumber":19,"author":{"gitId":"ruishanteo"},"content":"        super(description);","lastModifiedDate":"2023-08-19"},{"lineNumber":20,"author":{"gitId":"ruishanteo"},"content":"        this.byDateTime \u003d byDateTime;","lastModifiedDate":"2023-08-25"},{"lineNumber":21,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":22,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":23,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"ruishanteo"},"content":"     * Returns a formatted string representation of the deadline task.","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"ruishanteo"},"content":"     * @return A formatted string displaying the deadline task\u0027s details.","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"ruishanteo"},"content":"    @Override","lastModifiedDate":"2023-08-19"},{"lineNumber":29,"author":{"gitId":"ruishanteo"},"content":"    public String toString() {","lastModifiedDate":"2023-08-19"},{"lineNumber":30,"author":{"gitId":"ruishanteo"},"content":"        return \"[D]\" + super.toString() + \" (by: \" +","lastModifiedDate":"2023-08-25"},{"lineNumber":31,"author":{"gitId":"ruishanteo"},"content":"                byDateTime.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm\")) + \")\";","lastModifiedDate":"2023-08-25"},{"lineNumber":32,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":33,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"ruishanteo"},"content":"     * Generates a formatted string representation of the deadline task for saving.","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"ruishanteo"},"content":"     * @return A formatted string suitable for saving in a data file.","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"ruishanteo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":40,"author":{"gitId":"ruishanteo"},"content":"    public String toSaveLine() {","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"ruishanteo"},"content":"        return String.format(\"D | %d | %s | %s\", isDone ? 1 : 0,","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"ruishanteo"},"content":"                description, byDateTime.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")));","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"ruishanteo"},"content":"}","lastModifiedDate":"2023-08-19"}],"authorContributionMap":{"ruishanteo":44}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruishanteo"},"content":"package duke.task;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"ruishanteo"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-25"},{"lineNumber":4,"author":{"gitId":"ruishanteo"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":6,"author":{"gitId":"ruishanteo"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-19"},{"lineNumber":7,"author":{"gitId":"ruishanteo"},"content":"    protected LocalDateTime start;","lastModifiedDate":"2023-08-25"},{"lineNumber":8,"author":{"gitId":"ruishanteo"},"content":"    protected LocalDateTime end;","lastModifiedDate":"2023-08-25"},{"lineNumber":9,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":10,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"ruishanteo"},"content":"     * Constructs a Event object with the specified description and start and end date/time.","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"ruishanteo"},"content":"     * @param description The description of the event task.","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"ruishanteo"},"content":"     * @param start       The start date and time.","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"ruishanteo"},"content":"     * @param end         The end date and time.","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"ruishanteo"},"content":"    public Event(String description, LocalDateTime start, LocalDateTime end) {","lastModifiedDate":"2023-08-25"},{"lineNumber":18,"author":{"gitId":"ruishanteo"},"content":"        super(description);","lastModifiedDate":"2023-08-19"},{"lineNumber":19,"author":{"gitId":"ruishanteo"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-08-19"},{"lineNumber":20,"author":{"gitId":"ruishanteo"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-08-19"},{"lineNumber":21,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":22,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":23,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"ruishanteo"},"content":"     * Returns a formatted string representation of the event task.","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"ruishanteo"},"content":"     * @return A formatted string displaying the event task\u0027s details.","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"ruishanteo"},"content":"    @Override","lastModifiedDate":"2023-08-19"},{"lineNumber":29,"author":{"gitId":"ruishanteo"},"content":"    public String toString() {","lastModifiedDate":"2023-08-19"},{"lineNumber":30,"author":{"gitId":"ruishanteo"},"content":"        return \"[E]\" + super.toString() + \" (from: \"","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"ruishanteo"},"content":"                + start.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm\"))","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"ruishanteo"},"content":"                + \" to: \" + end.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy HH:mm\")) + \")\";","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":34,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"ruishanteo"},"content":"     * Generates a formatted string representation of the event task for saving.","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"ruishanteo"},"content":"     * @return A formatted string suitable for saving in a data file.","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"ruishanteo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":41,"author":{"gitId":"ruishanteo"},"content":"    public String toSaveLine() {","lastModifiedDate":"2023-08-25"},{"lineNumber":42,"author":{"gitId":"ruishanteo"},"content":"        return String.format(\"E | %d | %s | %s | %s\", isDone ? 1 : 0, description,","lastModifiedDate":"2023-08-25"},{"lineNumber":43,"author":{"gitId":"ruishanteo"},"content":"                             start.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")),","lastModifiedDate":"2023-08-25"},{"lineNumber":44,"author":{"gitId":"ruishanteo"},"content":"                             end.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\")));","lastModifiedDate":"2023-08-25"},{"lineNumber":45,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":46,"author":{"gitId":"ruishanteo"},"content":"}","lastModifiedDate":"2023-08-19"}],"authorContributionMap":{"ruishanteo":46}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruishanteo"},"content":"package duke.task;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"ruishanteo"},"content":"/**","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"ruishanteo"},"content":" * Represents a task in the Duke application.","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"ruishanteo"},"content":" */","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"ruishanteo"},"content":"public class Task {","lastModifiedDate":"2023-08-19"},{"lineNumber":7,"author":{"gitId":"ruishanteo"},"content":"    protected String description;","lastModifiedDate":"2023-08-19"},{"lineNumber":8,"author":{"gitId":"ruishanteo"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-19"},{"lineNumber":9,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":10,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"ruishanteo"},"content":"     * Constructs a object with the specified description.","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"ruishanteo"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"ruishanteo"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-19"},{"lineNumber":16,"author":{"gitId":"ruishanteo"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-19"},{"lineNumber":17,"author":{"gitId":"ruishanteo"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-19"},{"lineNumber":18,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":19,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":20,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"ruishanteo"},"content":"     * Returns a string representing the status icon of the task.","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"ruishanteo"},"content":"     * @return A string containing \"[X]\" if the task is done, or \"[ ]\" if it is not done.","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"ruishanteo"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-19"},{"lineNumber":26,"author":{"gitId":"ruishanteo"},"content":"        return (isDone ? \"[X]\" : \"[ ]\"); // mark done task with X","lastModifiedDate":"2023-08-19"},{"lineNumber":27,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":28,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":29,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"ruishanteo"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"ruishanteo"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-19"},{"lineNumber":33,"author":{"gitId":"ruishanteo"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-19"},{"lineNumber":34,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":35,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":36,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"ruishanteo"},"content":"     * Marks the task as undone.","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"ruishanteo"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-08-19"},{"lineNumber":40,"author":{"gitId":"ruishanteo"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-19"},{"lineNumber":41,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":42,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":43,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":44,"author":{"gitId":"ruishanteo"},"content":"     * Returns a boolean indicating whether the task has keyword in its description.","lastModifiedDate":"2023-08-26"},{"lineNumber":45,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":46,"author":{"gitId":"ruishanteo"},"content":"     * @param keyword The keyword that is being searched in description.","lastModifiedDate":"2023-08-26"},{"lineNumber":47,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":48,"author":{"gitId":"ruishanteo"},"content":"    public boolean hasKeyword(String keyword) {","lastModifiedDate":"2023-08-26"},{"lineNumber":49,"author":{"gitId":"ruishanteo"},"content":"        return description.contains(keyword);","lastModifiedDate":"2023-08-26"},{"lineNumber":50,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":51,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":52,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":53,"author":{"gitId":"ruishanteo"},"content":"     * Returns a formatted string representation of the task.","lastModifiedDate":"2023-08-26"},{"lineNumber":54,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":55,"author":{"gitId":"ruishanteo"},"content":"     * @return A formatted string displaying the task\u0027s details.","lastModifiedDate":"2023-08-26"},{"lineNumber":56,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":57,"author":{"gitId":"ruishanteo"},"content":"    public String toString() {","lastModifiedDate":"2023-08-19"},{"lineNumber":58,"author":{"gitId":"ruishanteo"},"content":"        return (this.getStatusIcon() + \" \" + this.description);","lastModifiedDate":"2023-08-19"},{"lineNumber":59,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":60,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":61,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":62,"author":{"gitId":"ruishanteo"},"content":"     * Generates a formatted string representation of the task for saving.","lastModifiedDate":"2023-08-26"},{"lineNumber":63,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":64,"author":{"gitId":"ruishanteo"},"content":"     * @return A formatted string suitable for saving in a data file.","lastModifiedDate":"2023-08-26"},{"lineNumber":65,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":66,"author":{"gitId":"ruishanteo"},"content":"    public String toSaveLine() {","lastModifiedDate":"2023-08-25"},{"lineNumber":67,"author":{"gitId":"ruishanteo"},"content":"        return (\"\");","lastModifiedDate":"2023-08-25"},{"lineNumber":68,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":69,"author":{"gitId":"ruishanteo"},"content":"}","lastModifiedDate":"2023-08-19"}],"authorContributionMap":{"ruishanteo":69}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruishanteo"},"content":"package duke.task;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"ruishanteo"},"content":"/**","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"ruishanteo"},"content":" * Represents a task that is a ToDo in the Duke application.","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"ruishanteo"},"content":" */","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"ruishanteo"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-19"},{"lineNumber":7,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":8,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"ruishanteo"},"content":"     * Constructs a ToDo object with the specified description.","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"ruishanteo"},"content":"     * @param description The description of the deadline task.","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"ruishanteo"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-08-19"},{"lineNumber":14,"author":{"gitId":"ruishanteo"},"content":"        super(description);","lastModifiedDate":"2023-08-19"},{"lineNumber":15,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":16,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":17,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"ruishanteo"},"content":"     * Returns a formatted string representation of the todo task.","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"ruishanteo"},"content":"     * @return A formatted string displaying the todo task\u0027s details.","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"ruishanteo"},"content":"    @Override","lastModifiedDate":"2023-08-19"},{"lineNumber":23,"author":{"gitId":"ruishanteo"},"content":"    public String toString() {","lastModifiedDate":"2023-08-19"},{"lineNumber":24,"author":{"gitId":"ruishanteo"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-19"},{"lineNumber":25,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":26,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-25"},{"lineNumber":27,"author":{"gitId":"ruishanteo"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"ruishanteo"},"content":"     * Generates a formatted string representation of the todo task for saving.","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"ruishanteo"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"ruishanteo"},"content":"     * @return A formatted string suitable for saving in a data file.","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"ruishanteo"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"ruishanteo"},"content":"    @Override","lastModifiedDate":"2023-08-25"},{"lineNumber":33,"author":{"gitId":"ruishanteo"},"content":"    public String toSaveLine() {","lastModifiedDate":"2023-08-25"},{"lineNumber":34,"author":{"gitId":"ruishanteo"},"content":"        return String.format(\"T | %d | %s\", isDone ? 1 : 0, description);","lastModifiedDate":"2023-08-25"},{"lineNumber":35,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-25"},{"lineNumber":36,"author":{"gitId":"ruishanteo"},"content":"}","lastModifiedDate":"2023-08-19"}],"authorContributionMap":{"ruishanteo":36}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruishanteo"},"content":"package duke;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"ruishanteo"},"content":"import duke.command.*;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"ruishanteo"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"ruishanteo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"ruishanteo"},"content":"public class ParserTest {","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"ruishanteo"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"ruishanteo"},"content":"    public void testParseByeCommand() {","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"ruishanteo"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"ruishanteo"},"content":"            Command command \u003d Parser.parse(\"bye\");","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"ruishanteo"},"content":"            assertTrue(command instanceof ExitCommand);","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"ruishanteo"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"ruishanteo"},"content":"            fail(\"Exception should not be thrown for \u0027bye\u0027 command.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"ruishanteo"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"ruishanteo"},"content":"    public void testParseListCommand() {","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"ruishanteo"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"ruishanteo"},"content":"            Command command \u003d Parser.parse(\"list\");","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"ruishanteo"},"content":"            assertTrue(command instanceof ListCommand);","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"ruishanteo"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"ruishanteo"},"content":"            fail(\"Exception should not be thrown for \u0027list\u0027 command.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"ruishanteo"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"ruishanteo"},"content":"    public void testParseUnknownCommand() {","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"ruishanteo"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"ruishanteo"},"content":"            Command command \u003d Parser.parse(\"invalidcommand\");","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"ruishanteo"},"content":"            fail(\"Exception should be thrown for unknown command.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"ruishanteo"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"ruishanteo"},"content":"            assertEquals(\":( OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", e.getMessage());","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"ruishanteo"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"ruishanteo"},"content":"    public void testParseDeadlineCommand() {","lastModifiedDate":"2023-08-26"},{"lineNumber":42,"author":{"gitId":"ruishanteo"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":43,"author":{"gitId":"ruishanteo"},"content":"            Command command \u003d Parser.parse(\"deadline Submit report /by 2023-08-31 23:59\");","lastModifiedDate":"2023-08-26"},{"lineNumber":44,"author":{"gitId":"ruishanteo"},"content":"            assertTrue(command instanceof AddCommand);","lastModifiedDate":"2023-08-26"},{"lineNumber":45,"author":{"gitId":"ruishanteo"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":46,"author":{"gitId":"ruishanteo"},"content":"            fail(\"Exception should not be thrown for valid \u0027deadline\u0027 command.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":47,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":48,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":49,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":50,"author":{"gitId":"ruishanteo"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":51,"author":{"gitId":"ruishanteo"},"content":"    public void testParseEventCommand() {","lastModifiedDate":"2023-08-26"},{"lineNumber":52,"author":{"gitId":"ruishanteo"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":53,"author":{"gitId":"ruishanteo"},"content":"            Command command \u003d Parser.parse(\"event Team meeting /from 2023-09-01 14:00 /to 2023-09-01 15:30\");","lastModifiedDate":"2023-08-26"},{"lineNumber":54,"author":{"gitId":"ruishanteo"},"content":"            assertTrue(command instanceof AddCommand);","lastModifiedDate":"2023-08-26"},{"lineNumber":55,"author":{"gitId":"ruishanteo"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":56,"author":{"gitId":"ruishanteo"},"content":"            fail(\"Exception should not be thrown for valid \u0027event\u0027 command.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":57,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":58,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":59,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":60,"author":{"gitId":"ruishanteo"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":61,"author":{"gitId":"ruishanteo"},"content":"    public void testParseMarkCommand() {","lastModifiedDate":"2023-08-26"},{"lineNumber":62,"author":{"gitId":"ruishanteo"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":63,"author":{"gitId":"ruishanteo"},"content":"            Command command \u003d Parser.parse(\"mark 2\");","lastModifiedDate":"2023-08-26"},{"lineNumber":64,"author":{"gitId":"ruishanteo"},"content":"            assertTrue(command instanceof MarkCommand);","lastModifiedDate":"2023-08-26"},{"lineNumber":65,"author":{"gitId":"ruishanteo"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":66,"author":{"gitId":"ruishanteo"},"content":"            fail(\"Exception should not be thrown for valid \u0027mark\u0027 command.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":67,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":68,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":69,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":70,"author":{"gitId":"ruishanteo"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":71,"author":{"gitId":"ruishanteo"},"content":"    public void testParseUnmarkCommand() {","lastModifiedDate":"2023-08-26"},{"lineNumber":72,"author":{"gitId":"ruishanteo"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":73,"author":{"gitId":"ruishanteo"},"content":"            Command command \u003d Parser.parse(\"unmark 3\");","lastModifiedDate":"2023-08-26"},{"lineNumber":74,"author":{"gitId":"ruishanteo"},"content":"            assertTrue(command instanceof UnmarkCommand);","lastModifiedDate":"2023-08-26"},{"lineNumber":75,"author":{"gitId":"ruishanteo"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":76,"author":{"gitId":"ruishanteo"},"content":"            fail(\"Exception should not be thrown for valid \u0027unmark\u0027 command.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":77,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":78,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":79,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":80,"author":{"gitId":"ruishanteo"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":81,"author":{"gitId":"ruishanteo"},"content":"    public void testParseDeleteCommand() {","lastModifiedDate":"2023-08-26"},{"lineNumber":82,"author":{"gitId":"ruishanteo"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":83,"author":{"gitId":"ruishanteo"},"content":"            Command command \u003d Parser.parse(\"delete 1\");","lastModifiedDate":"2023-08-26"},{"lineNumber":84,"author":{"gitId":"ruishanteo"},"content":"            assertTrue(command instanceof DeleteCommand);","lastModifiedDate":"2023-08-26"},{"lineNumber":85,"author":{"gitId":"ruishanteo"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":86,"author":{"gitId":"ruishanteo"},"content":"            fail(\"Exception should not be thrown for valid \u0027delete\u0027 command.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":87,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":88,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":89,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":90,"author":{"gitId":"ruishanteo"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":91,"author":{"gitId":"ruishanteo"},"content":"    public void testParseInvalidTodoCommand() {","lastModifiedDate":"2023-08-26"},{"lineNumber":92,"author":{"gitId":"ruishanteo"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":93,"author":{"gitId":"ruishanteo"},"content":"            // No description provided for todo task","lastModifiedDate":"2023-08-26"},{"lineNumber":94,"author":{"gitId":"ruishanteo"},"content":"            Parser.parse(\"todo\");","lastModifiedDate":"2023-08-26"},{"lineNumber":95,"author":{"gitId":"ruishanteo"},"content":"            fail(\"Exception should be thrown for empty \u0027todo\u0027 description.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":96,"author":{"gitId":"ruishanteo"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":97,"author":{"gitId":"ruishanteo"},"content":"            assertEquals(\":( OOPS!!! The description of a todo cannot be empty.\", e.getMessage());","lastModifiedDate":"2023-08-26"},{"lineNumber":98,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":99,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":100,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":101,"author":{"gitId":"ruishanteo"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":102,"author":{"gitId":"ruishanteo"},"content":"    public void testParseInvalidDeadlineCommand() {","lastModifiedDate":"2023-08-26"},{"lineNumber":103,"author":{"gitId":"ruishanteo"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":104,"author":{"gitId":"ruishanteo"},"content":"            // Missing \u0027/by\u0027","lastModifiedDate":"2023-08-26"},{"lineNumber":105,"author":{"gitId":"ruishanteo"},"content":"            Parser.parse(\"deadline Submit report 2023-08-31 23:59\");","lastModifiedDate":"2023-08-26"},{"lineNumber":106,"author":{"gitId":"ruishanteo"},"content":"            fail(\"Exception should be thrown for missing \u0027/by\u0027 in \u0027deadline\u0027 command.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":107,"author":{"gitId":"ruishanteo"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":108,"author":{"gitId":"ruishanteo"},"content":"            assertEquals(\":( OOPS!!! Deadlines must have a /by.\", e.getMessage());","lastModifiedDate":"2023-08-26"},{"lineNumber":109,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":110,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":111,"author":{"gitId":"ruishanteo"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":112,"author":{"gitId":"ruishanteo"},"content":"            // Empty \u0027/by\u0027","lastModifiedDate":"2023-08-26"},{"lineNumber":113,"author":{"gitId":"ruishanteo"},"content":"            Parser.parse(\"deadline Submit report /by\");","lastModifiedDate":"2023-08-26"},{"lineNumber":114,"author":{"gitId":"ruishanteo"},"content":"            fail(\"Exception should be thrown for empty \u0027/by\u0027 in \u0027deadline\u0027 command.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":115,"author":{"gitId":"ruishanteo"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":116,"author":{"gitId":"ruishanteo"},"content":"            assertEquals(\":( OOPS!!! Deadlines must have a /by.\", e.getMessage());","lastModifiedDate":"2023-08-26"},{"lineNumber":117,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":118,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":119,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":120,"author":{"gitId":"ruishanteo"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":121,"author":{"gitId":"ruishanteo"},"content":"    public void testParseInvalidEventCommand() {","lastModifiedDate":"2023-08-26"},{"lineNumber":122,"author":{"gitId":"ruishanteo"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":123,"author":{"gitId":"ruishanteo"},"content":"            // Missing \u0027/from\u0027 and \u0027/to\u0027","lastModifiedDate":"2023-08-26"},{"lineNumber":124,"author":{"gitId":"ruishanteo"},"content":"            Parser.parse(\"event Team meeting\");","lastModifiedDate":"2023-08-26"},{"lineNumber":125,"author":{"gitId":"ruishanteo"},"content":"            fail(\"Exception should be thrown for missing \u0027/from\u0027 and \u0027/to\u0027 in \u0027event\u0027 command.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":126,"author":{"gitId":"ruishanteo"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":127,"author":{"gitId":"ruishanteo"},"content":"            assertEquals(\":( OOPS!!! Events must have a /from and /to.\", e.getMessage());","lastModifiedDate":"2023-08-26"},{"lineNumber":128,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":129,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":130,"author":{"gitId":"ruishanteo"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":131,"author":{"gitId":"ruishanteo"},"content":"            // Empty \u0027/from\u0027 or \u0027/to\u0027","lastModifiedDate":"2023-08-26"},{"lineNumber":132,"author":{"gitId":"ruishanteo"},"content":"            Parser.parse(\"event Team meeting /from /to 2023-09-01 15:30\");","lastModifiedDate":"2023-08-26"},{"lineNumber":133,"author":{"gitId":"ruishanteo"},"content":"            fail(\"Exception should be thrown for empty \u0027/from\u0027 in \u0027event\u0027 command.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":134,"author":{"gitId":"ruishanteo"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":135,"author":{"gitId":"ruishanteo"},"content":"            assertEquals(\":( OOPS!!! Events must have a /from and /to.\", e.getMessage());","lastModifiedDate":"2023-08-26"},{"lineNumber":136,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":137,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":138,"author":{"gitId":"ruishanteo"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"ruishanteo":138}},{"path":"src/test/java/duke/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"ruishanteo"},"content":"package duke;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"ruishanteo"},"content":"import duke.TaskList;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"ruishanteo"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"ruishanteo"},"content":"import duke.task.*;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"ruishanteo"},"content":"import static org.junit.jupiter.api.Assertions.*;","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"ruishanteo"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"ruishanteo"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"ruishanteo"},"content":"import java.io.*;","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"ruishanteo"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"ruishanteo"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"ruishanteo"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"ruishanteo"},"content":"public class StorageTest {","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"ruishanteo"},"content":"    private static final String TEST_FOLDER \u003d \"test_folder\";","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"ruishanteo"},"content":"    private static final String TEST_FILE \u003d \"test_file.txt\";","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"ruishanteo"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"ruishanteo"},"content":"    @BeforeEach","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"ruishanteo"},"content":"    public void setUp() {","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"ruishanteo"},"content":"        storage \u003d new Storage(TEST_FOLDER, TEST_FILE);","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"ruishanteo"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"ruishanteo"},"content":"    public void testLoadFile() {","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"ruishanteo"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"ruishanteo"},"content":"            ArrayList\u003cString\u003e testData \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"ruishanteo"},"content":"            testData.add(\"Test line 1\");","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"ruishanteo"},"content":"            testData.add(\"Test line 2\");","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"ruishanteo"},"content":"            // Create a test file with some data","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"ruishanteo"},"content":"            File directory \u003d new File(TEST_FOLDER);","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"ruishanteo"},"content":"            directory.mkdirs();","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"ruishanteo"},"content":"            File file \u003d new File(directory, TEST_FILE);","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"ruishanteo"},"content":"            try (BufferedWriter writer \u003d new BufferedWriter(new FileWriter(file))) {","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"ruishanteo"},"content":"                for (String line : testData) {","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"ruishanteo"},"content":"                    writer.write(line);","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"ruishanteo"},"content":"                    writer.newLine();","lastModifiedDate":"2023-08-26"},{"lineNumber":42,"author":{"gitId":"ruishanteo"},"content":"                }","lastModifiedDate":"2023-08-26"},{"lineNumber":43,"author":{"gitId":"ruishanteo"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":44,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":45,"author":{"gitId":"ruishanteo"},"content":"            ArrayList\u003cString\u003e loadedData \u003d storage.loadFile();","lastModifiedDate":"2023-08-26"},{"lineNumber":46,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":47,"author":{"gitId":"ruishanteo"},"content":"            assertIterableEquals(testData, loadedData);","lastModifiedDate":"2023-08-26"},{"lineNumber":48,"author":{"gitId":"ruishanteo"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":49,"author":{"gitId":"ruishanteo"},"content":"            fail(\"Exception thrown: \" + e.getMessage());","lastModifiedDate":"2023-08-26"},{"lineNumber":50,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":51,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":52,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":53,"author":{"gitId":"ruishanteo"},"content":"    @Test","lastModifiedDate":"2023-08-26"},{"lineNumber":54,"author":{"gitId":"ruishanteo"},"content":"    public void testSaveFile() {","lastModifiedDate":"2023-08-26"},{"lineNumber":55,"author":{"gitId":"ruishanteo"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":56,"author":{"gitId":"ruishanteo"},"content":"            TaskList taskList \u003d new TaskList();","lastModifiedDate":"2023-08-26"},{"lineNumber":57,"author":{"gitId":"ruishanteo"},"content":"            Ui ui \u003d new Ui();","lastModifiedDate":"2023-08-26"},{"lineNumber":58,"author":{"gitId":"ruishanteo"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\");","lastModifiedDate":"2023-08-26"},{"lineNumber":59,"author":{"gitId":"ruishanteo"},"content":"            LocalDateTime time \u003d LocalDateTime.parse(\"2023-08-25 12:30\", formatter);","lastModifiedDate":"2023-08-26"},{"lineNumber":60,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":61,"author":{"gitId":"ruishanteo"},"content":"            ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-26"},{"lineNumber":62,"author":{"gitId":"ruishanteo"},"content":"            tasks.add(new ToDo(\"read book\"));","lastModifiedDate":"2023-08-26"},{"lineNumber":63,"author":{"gitId":"ruishanteo"},"content":"            tasks.add(new Deadline(\"return book\", time));","lastModifiedDate":"2023-08-26"},{"lineNumber":64,"author":{"gitId":"ruishanteo"},"content":"            tasks.add(new Event(\"book event\", time, time));","lastModifiedDate":"2023-08-26"},{"lineNumber":65,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":66,"author":{"gitId":"ruishanteo"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2023-08-26"},{"lineNumber":67,"author":{"gitId":"ruishanteo"},"content":"                taskList.addTask(task, ui);","lastModifiedDate":"2023-08-26"},{"lineNumber":68,"author":{"gitId":"ruishanteo"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":69,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":70,"author":{"gitId":"ruishanteo"},"content":"            storage.saveFile(taskList);","lastModifiedDate":"2023-08-26"},{"lineNumber":71,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":72,"author":{"gitId":"ruishanteo"},"content":"            // Check if the file was saved correctly","lastModifiedDate":"2023-08-26"},{"lineNumber":73,"author":{"gitId":"ruishanteo"},"content":"            File directory \u003d new File(TEST_FOLDER);","lastModifiedDate":"2023-08-26"},{"lineNumber":74,"author":{"gitId":"ruishanteo"},"content":"            File file \u003d new File(directory, TEST_FILE);","lastModifiedDate":"2023-08-26"},{"lineNumber":75,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":76,"author":{"gitId":"ruishanteo"},"content":"            assertTrue(file.exists());","lastModifiedDate":"2023-08-26"},{"lineNumber":77,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":78,"author":{"gitId":"ruishanteo"},"content":"            ArrayList\u003cString\u003e loadedData \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-26"},{"lineNumber":79,"author":{"gitId":"ruishanteo"},"content":"            try (BufferedReader reader \u003d new BufferedReader(new FileReader(file))) {","lastModifiedDate":"2023-08-26"},{"lineNumber":80,"author":{"gitId":"ruishanteo"},"content":"                String line;","lastModifiedDate":"2023-08-26"},{"lineNumber":81,"author":{"gitId":"ruishanteo"},"content":"                while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2023-08-26"},{"lineNumber":82,"author":{"gitId":"ruishanteo"},"content":"                    loadedData.add(line);","lastModifiedDate":"2023-08-26"},{"lineNumber":83,"author":{"gitId":"ruishanteo"},"content":"                }","lastModifiedDate":"2023-08-26"},{"lineNumber":84,"author":{"gitId":"ruishanteo"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":85,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":86,"author":{"gitId":"ruishanteo"},"content":"            ArrayList\u003cString\u003e savedData \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-26"},{"lineNumber":87,"author":{"gitId":"ruishanteo"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2023-08-26"},{"lineNumber":88,"author":{"gitId":"ruishanteo"},"content":"                savedData.add(task.toSaveLine());","lastModifiedDate":"2023-08-26"},{"lineNumber":89,"author":{"gitId":"ruishanteo"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":90,"author":{"gitId":"ruishanteo"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":91,"author":{"gitId":"ruishanteo"},"content":"            assertIterableEquals(savedData, loadedData);","lastModifiedDate":"2023-08-26"},{"lineNumber":92,"author":{"gitId":"ruishanteo"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":93,"author":{"gitId":"ruishanteo"},"content":"            fail(\"Exception thrown: \" + e.getMessage());","lastModifiedDate":"2023-08-26"},{"lineNumber":94,"author":{"gitId":"ruishanteo"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":95,"author":{"gitId":"ruishanteo"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":96,"author":{"gitId":"ruishanteo"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"ruishanteo":96}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"ruishanteo"},"content":"todo","lastModifiedDate":"2023-08-19"},{"lineNumber":2,"author":{"gitId":"ruishanteo"},"content":"todo read book","lastModifiedDate":"2023-08-19"},{"lineNumber":3,"author":{"gitId":"ruishanteo"},"content":"deadline  /by","lastModifiedDate":"2023-08-19"},{"lineNumber":4,"author":{"gitId":"ruishanteo"},"content":"deadline  /by 2023-08-25 12:30","lastModifiedDate":"2023-08-25"},{"lineNumber":5,"author":{"gitId":"ruishanteo"},"content":"deadline return book /by","lastModifiedDate":"2023-08-19"},{"lineNumber":6,"author":{"gitId":"ruishanteo"},"content":"deadline return book /by 2023-08-25 12:30","lastModifiedDate":"2023-08-25"},{"lineNumber":7,"author":{"gitId":"ruishanteo"},"content":"event  /from  /to","lastModifiedDate":"2023-08-19"},{"lineNumber":8,"author":{"gitId":"ruishanteo"},"content":"event project meeting /from  /to","lastModifiedDate":"2023-08-19"},{"lineNumber":9,"author":{"gitId":"ruishanteo"},"content":"event project meeting /from  /to 2023-08-25 12:30","lastModifiedDate":"2023-08-25"},{"lineNumber":10,"author":{"gitId":"ruishanteo"},"content":"event project meeting /from 2023-03-22 10:30 /to 2023-08-25 12:30","lastModifiedDate":"2023-08-25"},{"lineNumber":11,"author":{"gitId":"ruishanteo"},"content":"event  /from  /to 2023-08-25 12:30","lastModifiedDate":"2023-08-25"},{"lineNumber":12,"author":{"gitId":"ruishanteo"},"content":"event  /from 2023-08-25 12:30 /to","lastModifiedDate":"2023-08-25"},{"lineNumber":13,"author":{"gitId":"ruishanteo"},"content":"event project meeting /from 2023-03-22 10:30 /to 2023-08-25 12:30","lastModifiedDate":"2023-08-25"},{"lineNumber":14,"author":{"gitId":"ruishanteo"},"content":"mark","lastModifiedDate":"2023-08-19"},{"lineNumber":15,"author":{"gitId":"ruishanteo"},"content":"mark 0","lastModifiedDate":"2023-08-19"},{"lineNumber":16,"author":{"gitId":"ruishanteo"},"content":"mark 10","lastModifiedDate":"2023-08-19"},{"lineNumber":17,"author":{"gitId":"ruishanteo"},"content":"mark abc","lastModifiedDate":"2023-08-19"},{"lineNumber":18,"author":{"gitId":"ruishanteo"},"content":"mark 1","lastModifiedDate":"2023-08-19"},{"lineNumber":19,"author":{"gitId":"ruishanteo"},"content":"mark 3","lastModifiedDate":"2023-08-19"},{"lineNumber":20,"author":{"gitId":"ruishanteo"},"content":"list","lastModifiedDate":"2023-08-19"},{"lineNumber":21,"author":{"gitId":"ruishanteo"},"content":"unmark","lastModifiedDate":"2023-08-19"},{"lineNumber":22,"author":{"gitId":"ruishanteo"},"content":"unmark 0","lastModifiedDate":"2023-08-19"},{"lineNumber":23,"author":{"gitId":"ruishanteo"},"content":"unmark 10","lastModifiedDate":"2023-08-19"},{"lineNumber":24,"author":{"gitId":"ruishanteo"},"content":"unmark abc","lastModifiedDate":"2023-08-19"},{"lineNumber":25,"author":{"gitId":"ruishanteo"},"content":"unmark 3","lastModifiedDate":"2023-08-19"},{"lineNumber":26,"author":{"gitId":"ruishanteo"},"content":"list","lastModifiedDate":"2023-08-19"},{"lineNumber":27,"author":{"gitId":"ruishanteo"},"content":"delete","lastModifiedDate":"2023-08-19"},{"lineNumber":28,"author":{"gitId":"ruishanteo"},"content":"delete 0","lastModifiedDate":"2023-08-19"},{"lineNumber":29,"author":{"gitId":"ruishanteo"},"content":"delete 10","lastModifiedDate":"2023-08-19"},{"lineNumber":30,"author":{"gitId":"ruishanteo"},"content":"delete abc","lastModifiedDate":"2023-08-19"},{"lineNumber":31,"author":{"gitId":"ruishanteo"},"content":"delete 3","lastModifiedDate":"2023-08-19"},{"lineNumber":32,"author":{"gitId":"ruishanteo"},"content":"list","lastModifiedDate":"2023-08-19"},{"lineNumber":33,"author":{"gitId":"ruishanteo"},"content":"bye","lastModifiedDate":"2023-08-19"}],"authorContributionMap":{"ruishanteo":33}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"ruishanteo"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"ruishanteo":1,"-":20}}]
