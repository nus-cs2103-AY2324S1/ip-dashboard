[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":16,"author":{"gitId":"jylow"},"content":"    implementation group: \u0027com.joestelmach\u0027, name: \u0027natty\u0027, version: \u00270.13\u0027","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"jylow"},"content":"    mainClass.set(\"seedu.duke.Main\")","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"jylow"},"content":"checkstyle {","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"jylow"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"jylow"},"content":"}","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":47,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"jylow"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jylow":9,"-":41}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jylow"},"content":"package duke;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"jylow"},"content":"import duke.command.Command;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jylow"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jylow"},"content":"import duke.util.Parser;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"jylow"},"content":"import duke.util.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jylow"},"content":"import duke.util.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":"import duke.util.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jylow"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"jylow"},"content":"/**","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"jylow"},"content":" * This program is a chatbot, somebodyhaha, used to mark completion of tasks","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"jylow"},"content":" * marking the completion of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jylow"},"content":" *","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"jylow"},"content":" * @author: Low Jun Yu","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"jylow"},"content":" * @version: CS2103T AY23/24 Semester 1","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"jylow"},"content":" */","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":22,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"jylow"},"content":"    private final Storage STORAGE;","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"jylow"},"content":"    private TaskList tasklst;","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"jylow"},"content":"    private final Ui UI;","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":27,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"jylow"},"content":"     * Duke class that initialises a Duke Chatbot.","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"jylow"},"content":"     * @param filePath path location of the file to read previous stores","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"jylow"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"jylow"},"content":"        UI \u003d new Ui();","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"jylow"},"content":"        STORAGE \u003d new Storage(filePath);","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"jylow"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"jylow"},"content":"            tasklst \u003d new TaskList(STORAGE.load());","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"jylow"},"content":"        } catch (DukeException e){","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"jylow"},"content":"            UI.showLoadingError();","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"jylow"},"content":"            tasklst \u003d new TaskList();","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"jylow"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"jylow"},"content":"     * Runs the duke bot.","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"jylow"},"content":"    public void run() {","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"jylow"},"content":"        UI.showWelcome();","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"jylow"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"jylow"},"content":"        while(!isExit) {","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"jylow"},"content":"            try{","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"jylow"},"content":"                String fullCommand \u003d UI.read();","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"jylow"},"content":"                UI.showLine();","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"jylow"},"content":"                Command c \u003d Parser.parseUserInput(fullCommand);","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"jylow"},"content":"                c.execute(tasklst, UI, STORAGE);","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"jylow"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"jylow"},"content":"            } catch (DukeException | IOException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"jylow"},"content":"                UI.showError(e.getMessage());","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"jylow"},"content":"            } finally {","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"jylow"},"content":"                UI.showLine();","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"jylow"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":60,"author":{"gitId":"jylow"},"content":"        }","lastModifiedDate":"2023-08-23"},{"lineNumber":61,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":62,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":63,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"jylow"},"content":"     * The program reads input given by the user to perform functions to help","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"jylow"},"content":"     * add, edit, track and delete tasks inputted.","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"jylow"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"jylow"},"content":"        new Duke(\"data/tasks.txt\").run();","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"jylow":67,"-":3}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jylow"},"content":"package duke.command;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"jylow"},"content":"import duke.exception.NoFileException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jylow"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jylow"},"content":"import duke.util.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"jylow"},"content":"import duke.util.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jylow"},"content":"import duke.util.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jylow"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jylow"},"content":" * Adds a task to the list.","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jylow"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"jylow"},"content":"public class AddCommand extends Command{","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"jylow"},"content":"    private final Task TASK;","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jylow"},"content":"     * Constructor for an AddCommand.","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"jylow"},"content":"     * @param task the task to be added to the list","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"jylow"},"content":"    public AddCommand(Task task) {","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"jylow"},"content":"        this.TASK \u003d task;","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"jylow"},"content":"     * Executes the current add command.","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"jylow"},"content":"     * @param tasklst current list of tasks","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"jylow"},"content":"     * @param ui instance of user interface","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"jylow"},"content":"     * @param storage instance of storage to read and write files","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"jylow"},"content":"     * @throws NoFileException Exception thrown if there is no file found when rewriting","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"jylow"},"content":"    public void execute(TaskList tasklst, Ui ui, Storage storage) throws NoFileException {","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"jylow"},"content":"        tasklst.addTask(this.TASK, ui);","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"jylow"},"content":"        storage.rewriteFile(tasklst);","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"jylow"},"content":"     * Checks if the current task is an exit task.","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"jylow"},"content":"     * @return false since task is not an exit task","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"jylow"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"jylow"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"jylow"},"content":"        return false;","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"jylow"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"jylow":45}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jylow"},"content":"package duke.command;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"jylow"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jylow"},"content":"import duke.util.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jylow"},"content":"import duke.util.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jylow"},"content":"import duke.util.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jylow"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jylow"},"content":"public abstract class Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jylow"},"content":"    public abstract void execute(TaskList tasklst, Ui ui, Storage storage) throws DukeException, IOException;","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jylow"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"jylow"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"jylow":14}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jylow"},"content":"package duke.command;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"jylow"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jylow"},"content":"import duke.util.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jylow"},"content":"import duke.util.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jylow"},"content":"import duke.util.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"jylow"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jylow"},"content":" * Deletes a task from the list.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jylow"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jylow"},"content":"    private final int TASK_NUMBER;","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jylow"},"content":"     * Constructs a command containing the tasknumber in list to be deleted.","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"jylow"},"content":"     * @param taskNumber The position of task in the list to be deleted","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jylow"},"content":"    public DeleteCommand(int taskNumber) {","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"jylow"},"content":"        super();","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"jylow"},"content":"        this.TASK_NUMBER \u003d taskNumber;","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"jylow"},"content":"     * Executes the delete command.","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"jylow"},"content":"     * @param tasklst list of tasks","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"jylow"},"content":"     * @param ui ui component of the program","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"jylow"},"content":"     * @param storage storage componenet of the program","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"jylow"},"content":"     * @throws DukeException Errors that occur when trying to delete the task","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"jylow"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"jylow"},"content":"    public void execute(TaskList tasklst, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"jylow"},"content":"        tasklst.deleteTask(TASK_NUMBER, ui);","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"jylow"},"content":"        storage.rewriteFile(tasklst);","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"jylow"},"content":"     * Checks if the current task is an exit task.","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"jylow"},"content":"     * @return false since task is not an exit task","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"jylow"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"jylow"},"content":"    public boolean isExit(){","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"jylow"},"content":"        return false;","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"jylow"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"jylow":44}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jylow"},"content":"package duke.command;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"jylow"},"content":"import duke.util.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":"import duke.util.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jylow"},"content":"import duke.util.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jylow"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jylow"},"content":" * Command that causes the chatbot to terminate.","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"jylow"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jylow"},"content":"public class ExitCommand extends Command{","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jylow"},"content":"     * Constructor of a new ExitCommand.","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jylow"},"content":"    public ExitCommand() {","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"jylow"},"content":"        super();","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jylow"},"content":"     * Executes the exit command.","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"jylow"},"content":"     * @param tasklst list of tasks","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"jylow"},"content":"     * @param ui ui component of the program","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"jylow"},"content":"     * @param storage storage componenet of the program","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"jylow"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"jylow"},"content":"    public void execute(TaskList tasklst, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"jylow"},"content":"        ui.showGoodbye();","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"jylow"},"content":"     * Checks if the current task is an exit task.","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"jylow"},"content":"     * @return true since task is an exit task","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"jylow"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"jylow"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"jylow"},"content":"        return true;","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"jylow"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"jylow":36}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jylow"},"content":"package duke.command;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"jylow"},"content":"import duke.util.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":"import duke.util.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jylow"},"content":"import duke.util.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jylow"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jylow"},"content":" * Command to list the current tasks stored.","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"jylow"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jylow"},"content":"public class ListCommand extends Command{","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jylow"},"content":"     * Constructor for a list command.","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jylow"},"content":"    public ListCommand() {","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"jylow"},"content":"        super();","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jylow"},"content":"     * Executes the current list command.","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"jylow"},"content":"     * @param tasklst current list of tasks","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"jylow"},"content":"     * @param ui instance of user interface","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"jylow"},"content":"     * @param storage instance of storage to read and write files","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"jylow"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"jylow"},"content":"    public void execute(TaskList tasklst, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"jylow"},"content":"        tasklst.displayTasks();","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"jylow"},"content":"     * Checks if the current task is an exit task.","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"jylow"},"content":"     * @return false since task is not an exit task","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"jylow"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"jylow"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"jylow"},"content":"        return false;","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"jylow"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"jylow":36}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jylow"},"content":"package duke.command;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"jylow"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jylow"},"content":"import duke.util.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jylow"},"content":"import duke.util.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jylow"},"content":"import duke.util.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"jylow"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jylow"},"content":" * Command that marks the given task as done.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jylow"},"content":"public class MarkCommand extends Command{","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jylow"},"content":"    private final int TASK_NUMBER;","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"jylow"},"content":"     * Constructs a command containing the tasknumber in list to be deleted.","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jylow"},"content":"     * @param taskNumber The position of task in the list to be deleted.","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jylow"},"content":"    public MarkCommand(int taskNumber){","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jylow"},"content":"        super();","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"jylow"},"content":"        this.TASK_NUMBER \u003d taskNumber;","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"jylow"},"content":"     * Executes the mark command.","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"jylow"},"content":"     * @param tasklst list of tasks","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"jylow"},"content":"     * @param ui ui component of the program","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"jylow"},"content":"     * @param storage storage componenet of the program","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"jylow"},"content":"     * @throws DukeException Error if the task number is outside the task list","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"jylow"},"content":"    public void execute(TaskList tasklst, Ui ui, Storage storage) throws DukeException{","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"jylow"},"content":"        tasklst.markTask(TASK_NUMBER, ui);","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"jylow"},"content":"        storage.rewriteFile(tasklst);","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"jylow"},"content":"     * Checks if the current task is an exit task.","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"jylow"},"content":"     * @return false since task is not an exit task","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"jylow"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"jylow"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"jylow"},"content":"        return false;","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"jylow"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"jylow":42}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jylow"},"content":"package duke.command;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"jylow"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jylow"},"content":"import duke.util.Storage;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jylow"},"content":"import duke.util.TaskList;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jylow"},"content":"import duke.util.Ui;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"jylow"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jylow"},"content":" * Command that marks the given task as incomplete.","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jylow"},"content":"public class UnmarkCommand extends Command{","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jylow"},"content":"    private final int TASK_NUMBER;","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jylow"},"content":"     * Constructor for an unmark command.","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"jylow"},"content":"     * @param taskToMark The position of task in the list to be deleted.","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jylow"},"content":"    public UnmarkCommand(int taskToMark){","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"jylow"},"content":"        super();","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"jylow"},"content":"        this.TASK_NUMBER \u003d taskToMark;","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"jylow"},"content":"     * Executes the current unmark command.","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"jylow"},"content":"     * @param tasklst current list of tasks","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"jylow"},"content":"     * @param ui instance of user interface","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"jylow"},"content":"     * @param storage instance of storage to read and write files","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"jylow"},"content":"     * @throws DukeException Exception thrown whilst executing the command","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"jylow"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"jylow"},"content":"    public void execute(TaskList tasklst, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"jylow"},"content":"        tasklst.unmarkTask(TASK_NUMBER, ui);","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"jylow"},"content":"        storage.rewriteFile(tasklst);","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"jylow"},"content":"     * Checks if the current task is an exit task.","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"jylow"},"content":"     * @return false since task is not an exit task","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"jylow"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"jylow"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"jylow"},"content":"        return false;","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"jylow"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"jylow":44}},{"path":"src/main/java/duke/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jylow"},"content":"package duke.exception;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"jylow"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"jylow"},"content":" * Exceptions that will be thrown whilst executing duke program.","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jylow"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jylow"},"content":"     * Constructor for a DukeException.","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"jylow"},"content":"     * @param errorMessage message to be shown when error is thrown","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":"    public DukeException(String errorMessage) {","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"jylow"},"content":"        super(errorMessage);","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"jylow"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"jylow":13}},{"path":"src/main/java/duke/exception/InvalidArgumentException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jylow"},"content":"package duke.exception;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"jylow"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"jylow"},"content":" * Exception when encountering invalid arguments.","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jylow"},"content":"public class InvalidArgumentException extends DukeException{","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"jylow"},"content":"     * Invalid argument exception that throws error when invalid","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"jylow"},"content":"     * arguments are inputted with a function.","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jylow"},"content":"     * @param errorMessage message describing the error","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"jylow"},"content":"    public InvalidArgumentException(String errorMessage) {","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"jylow"},"content":"        super(errorMessage);","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":14,"author":{"gitId":"jylow"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"jylow":14}},{"path":"src/main/java/duke/exception/InvalidFormatException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jylow"},"content":"package duke.exception;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"jylow"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"jylow"},"content":" * Exception when encountering invalid format.","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jylow"},"content":"public class InvalidFormatException extends DukeException{","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jylow"},"content":"     * Constructor for InvalidFormatException.","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"jylow"},"content":"     * @param errorMessage message to be displayed when encountering error","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":"    public InvalidFormatException(String errorMessage) {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"jylow"},"content":"        super(errorMessage);","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"jylow"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"jylow":13}},{"path":"src/main/java/duke/exception/InvalidTaskNumberException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jylow"},"content":"package duke.exception;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"jylow"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"jylow"},"content":" * Error when given task number is outside tasklist range.","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jylow"},"content":"public class InvalidTaskNumberException extends DukeException{","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jylow"},"content":"     * Constructor for an InvalidTaskNumberException.","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"jylow"},"content":"     * @param errorMessage message to be displayed when error is thrown","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":"    public InvalidTaskNumberException(String errorMessage){","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jylow"},"content":"        super(errorMessage);","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"jylow"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"jylow":14}},{"path":"src/main/java/duke/exception/NoFileException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jylow"},"content":"package duke.exception;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"jylow"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"jylow"},"content":" * Error when there is no file found.","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jylow"},"content":"public class NoFileException extends DukeException{","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jylow"},"content":"     * Constructor for a NiFileException.","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"jylow"},"content":"     * @param errorMessage message to be displayed when error is encountered","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":"    public NoFileException(String errorMessage) {","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jylow"},"content":"        super(errorMessage);","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jylow"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"jylow":13}},{"path":"src/main/java/duke/exception/NoTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jylow"},"content":"package duke.exception;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"jylow"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"jylow"},"content":" * Exception when there is no task given.","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jylow"},"content":"public class NoTaskException extends DukeException{","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jylow"},"content":"     * Constructor of a NoTaskException.","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"jylow"},"content":"     * @param errorMessage message to be displayed when error is encountered","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":"    public NoTaskException(String errorMessage) {","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"jylow"},"content":"        super(errorMessage);","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"jylow"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"jylow":13}},{"path":"src/main/java/duke/exception/UnknownActionException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jylow"},"content":"package duke.exception;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"jylow"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"jylow"},"content":" * Exception thrown when action entered is not a valid action.","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jylow"},"content":"public class UnknownActionException extends DukeException{","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jylow"},"content":"     * Constructor for UnknownActionException.","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"jylow"},"content":"     * @param errorMessage message to be displayed when error encountered","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":"    public UnknownActionException(String errorMessage) {","lastModifiedDate":"2023-08-23"},{"lineNumber":11,"author":{"gitId":"jylow"},"content":"        super(errorMessage);","lastModifiedDate":"2023-08-23"},{"lineNumber":12,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":13,"author":{"gitId":"jylow"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"jylow":13}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jylow"},"content":"package duke.task;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"jylow"},"content":"import duke.exception.InvalidFormatException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jylow"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"jylow"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"jylow"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"jylow"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":" * Deadline instance of a task.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jylow"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jylow"},"content":"public class Deadline extends Task{","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"jylow"},"content":"    private final LocalDate DUE_DATE;","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jylow"},"content":"    private String dueTime \u003d \"\";","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"jylow"},"content":"     * Constructs a Deadline with a given description. Completion of the task","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"jylow"},"content":"     * is false by default.","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"jylow"},"content":"     *","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"jylow"},"content":"     * @param description The description of the task","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"jylow"},"content":"     * @param by The deadline the task must be completed by","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"jylow"},"content":"    public Deadline(String description, String by) throws InvalidFormatException {","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"jylow"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"jylow"},"content":"        String[] temp \u003d by.split(\"\\\\s+\");","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"jylow"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"jylow"},"content":"            this.DUE_DATE \u003d LocalDate.parse(temp[0]);","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"jylow"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"jylow"},"content":"            throw new InvalidFormatException(e.getMessage() + \"The correct format is YYYY-MM-DD HHHH(optional)\");","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"jylow"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"jylow"},"content":"        if (temp.length \u003d\u003d 2) {","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"jylow"},"content":"            this.dueTime \u003d temp[1];","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"jylow"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":36,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":37,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":38,"author":{"gitId":"jylow"},"content":"     * Returns a formatted string of the status of the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"jylow"},"content":"     * @return String containing completion status, type, description,","lastModifiedDate":"2023-08-22"},{"lineNumber":40,"author":{"gitId":"jylow"},"content":"     * and deadline of task","lastModifiedDate":"2023-08-22"},{"lineNumber":41,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":42,"author":{"gitId":"jylow"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":43,"author":{"gitId":"jylow"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":44,"author":{"gitId":"jylow"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.DUE_DATE.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"))","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"jylow"},"content":"                + \" \" + this.dueTime  + \")\" ;","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":47,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"jylow"},"content":"     * Returns a string formatted in the way it is to be saved.","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"jylow"},"content":"     * @return Formatted string to be written into file","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"jylow"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"jylow"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"jylow"},"content":"        return \"D | \" + (this.isDone ? 1 : 0) + \" | \" + this.description + \" | \"","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"jylow"},"content":"                + this.DUE_DATE + \" \" + this.dueTime;","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"jylow"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"jylow":57}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jylow"},"content":"package duke.task;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"jylow"},"content":"import duke.exception.InvalidFormatException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jylow"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"jylow"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"jylow"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"jylow"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":" * Event instance of a task.","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jylow"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jylow"},"content":"public class Event extends Task{","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"jylow"},"content":"    private final LocalDate FROM_DATE;","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"jylow"},"content":"    private String fromTime \u003d \"\";","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"jylow"},"content":"    private final LocalDate TO_DATE;","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"jylow"},"content":"    private String toTime \u003d \"\";","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"jylow"},"content":"     * Constructs a event with a given description. Completion of the task","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"jylow"},"content":"     * is false by default.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"jylow"},"content":"     *","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"jylow"},"content":"     * @param description The description of the task","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"jylow"},"content":"     * @param from The start time of the event","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"jylow"},"content":"     * @param to The end time of the event","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"jylow"},"content":"    public Event(String description, String from, String to) throws InvalidFormatException {","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"jylow"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":28,"author":{"gitId":"jylow"},"content":"        String[] fromTemp \u003d from.split(\"\\\\s+\");","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"jylow"},"content":"        String[] toTemp \u003d to.split(\"\\\\s+\");","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"jylow"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"jylow"},"content":"            this.FROM_DATE \u003d LocalDate.parse(fromTemp[0]);","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"jylow"},"content":"            this.TO_DATE \u003d LocalDate.parse(toTemp[0]);","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"jylow"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"jylow"},"content":"            throw new InvalidFormatException(e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"jylow"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"jylow"},"content":"        if(fromTemp.length \u003d\u003d 2) {","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"jylow"},"content":"            this.fromTime \u003d fromTemp[1];","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"jylow"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"jylow"},"content":"        if(toTemp.length \u003d\u003d 2) {","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"jylow"},"content":"            this.toTime \u003d toTemp[1];","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"jylow"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":43,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":44,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":45,"author":{"gitId":"jylow"},"content":"     * Returns a formatted string of the status of the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"jylow"},"content":"     * @return String containing completion status, type, description, from","lastModifiedDate":"2023-08-22"},{"lineNumber":47,"author":{"gitId":"jylow"},"content":"     * and to of task","lastModifiedDate":"2023-08-22"},{"lineNumber":48,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":49,"author":{"gitId":"jylow"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":50,"author":{"gitId":"jylow"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":51,"author":{"gitId":"jylow"},"content":"        return \"[E]\" + super.toString() +","lastModifiedDate":"2023-08-22"},{"lineNumber":52,"author":{"gitId":"jylow"},"content":"                \" (from: \" + this.FROM_DATE.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\")) + \" \"","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"jylow"},"content":"                + this.fromTime + \" to: \" + this.TO_DATE.format(DateTimeFormatter.ofPattern(\"dd MMM yyyy\"))","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"jylow"},"content":"                + \" \" + this.toTime + \")\";","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":56,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"jylow"},"content":"     * Returns a string formatted in the way it is to be saved.","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"jylow"},"content":"     * @return Formatted string to be written into file","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"jylow"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"jylow"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"jylow"},"content":"        return \"E | \" + (this.isDone ? 1 : 0) + \" | \" + this.description + \" | \"","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"jylow"},"content":"                + this.FROM_DATE + \" \" + this.fromTime + \"-\u003e\"","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"jylow"},"content":"                + this.TO_DATE + \" \" + this.toTime;","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"jylow"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"jylow":67}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jylow"},"content":"package duke.task;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"jylow"},"content":"/**","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"jylow"},"content":" * Task encapsulate a task with a String description and boolean isDone. It supports","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":" * marking the completion of tasks","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"jylow"},"content":" */","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"jylow"},"content":"public class Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"jylow"},"content":"    protected String description;","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"jylow"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jylow"},"content":"        return \"\";","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"jylow"},"content":"     * Constructs a Task with a given description. Completion of the task","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"jylow"},"content":"     * is false by default.","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"jylow"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"jylow"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"jylow"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"jylow"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"jylow"},"content":"     * Returns the completion status of task with \"X\" meaning task is completed.","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"jylow"},"content":"     * @return \"X\" if completed \" \" if still in progress","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":27,"author":{"gitId":"jylow"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-22"},{"lineNumber":28,"author":{"gitId":"jylow"},"content":"        return isDone ? \"X\" : \" \";","lastModifiedDate":"2023-08-22"},{"lineNumber":29,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":31,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":32,"author":{"gitId":"jylow"},"content":"     * Returns a formatted string of the status of the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"jylow"},"content":"     * @return String containing completion status and description of task","lastModifiedDate":"2023-08-22"},{"lineNumber":34,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":35,"author":{"gitId":"jylow"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":36,"author":{"gitId":"jylow"},"content":"        return \" [\" + getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-08-22"},{"lineNumber":37,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":38,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":39,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":40,"author":{"gitId":"jylow"},"content":"     * Marks the current task as completed.","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":42,"author":{"gitId":"jylow"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-22"},{"lineNumber":43,"author":{"gitId":"jylow"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-22"},{"lineNumber":44,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":45,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":46,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":47,"author":{"gitId":"jylow"},"content":"     * Unmarks the current task as not completed.","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":49,"author":{"gitId":"jylow"},"content":"    public void unmarkAsDone() {","lastModifiedDate":"2023-08-22"},{"lineNumber":50,"author":{"gitId":"jylow"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":51,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"jylow"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"jylow":52}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jylow"},"content":"package duke.task;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"jylow"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"jylow"},"content":" * Todo instance of a task","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jylow"},"content":"public class ToDo extends Task{","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"jylow"},"content":"     * Construct a task with a given description. Completion of the task","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"jylow"},"content":"     * is false by default.","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jylow"},"content":"     * @param description The description of the task","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"jylow"},"content":"    public ToDo(String description) {","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jylow"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"jylow"},"content":"     * Returns a formatted string of the status of the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jylow"},"content":"     * @return String containing completion status, type and description of task","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"jylow"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"jylow"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"jylow"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"jylow"},"content":"     * Returns a string formatted in the way it is to be saved.","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"jylow"},"content":"     * @return Formatted string to be written into file","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"jylow"},"content":"    @Override","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"jylow"},"content":"    public String toSaveFormat() {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"jylow"},"content":"        return \"T | \" + (this.isDone ? 1 : 0) + \" | \" + this.description;","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"jylow"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"jylow":32}},{"path":"src/main/java/duke/util/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jylow"},"content":"package duke.util;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"jylow"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":"import duke.exception.InvalidArgumentException;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jylow"},"content":"import duke.exception.UnknownActionException;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jylow"},"content":"import duke.command.*;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jylow"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":"import duke.task.Event;","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jylow"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jylow"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"jylow"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jylow"},"content":" * Parser class that deals with deciphering user input.","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"jylow"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jylow"},"content":"public class Parser {","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"jylow"},"content":"     * Parses input given by the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"jylow"},"content":"     * @param userInput String of input given by the user","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"jylow"},"content":"     * @return Command instance depending on the action given by the user","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"jylow"},"content":"     * @throws DukeException Exceptions that will be encountered during parsing","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"jylow"},"content":"    public static Command parseUserInput(String userInput) throws DukeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"jylow"},"content":"        String[] fields \u003d userInput.split(\"\\\\s+\");","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"jylow"},"content":"        switch (fields[0]) {","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"jylow"},"content":"        case \"list\":","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"jylow"},"content":"            if (fields.length \u003e 1) {","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"jylow"},"content":"                throw new InvalidArgumentException(\"Please enter \u0027list\u0027 without any extra arguments \" +","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"jylow"},"content":"                        \"or use a different \" +","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"jylow"},"content":"                        \"keyword\");","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"jylow"},"content":"            } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"jylow"},"content":"                return new ListCommand();","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"jylow"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"jylow"},"content":"        case \"mark\":","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"jylow"},"content":"            if (fields.length !\u003d 2) {","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"jylow"},"content":"                throw new InvalidArgumentException(\"Please enter \u0027mark {task number}\u0027 or use a different \" +","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"jylow"},"content":"                        \"keyword\");","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"jylow"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"jylow"},"content":"            return new MarkCommand(Character.getNumericValue(fields[1].charAt(0)));","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"jylow"},"content":"        case \"unmark\":","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"jylow"},"content":"            if (fields.length !\u003d 2) {","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"jylow"},"content":"                throw new InvalidArgumentException(\"Please enter \u0027mark {task number}\u0027 or use a different \" +","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"jylow"},"content":"                        \"keyword\");","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"jylow"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"jylow"},"content":"            return new UnmarkCommand(Character.getNumericValue(fields[1].charAt(0)));","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"jylow"},"content":"        case \"delete\":","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"jylow"},"content":"            if (fields.length !\u003d 2) {","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"jylow"},"content":"                throw new InvalidArgumentException(\"Please enter \u0027delete {task number}\u0027 \" +","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"jylow"},"content":"                        \"or use a different \" +","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"jylow"},"content":"                        \"keyword\");","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"jylow"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"jylow"},"content":"            return new DeleteCommand(Character.getNumericValue(fields[1].charAt(0)));","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"jylow"},"content":"        case \"todo\":","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"jylow"},"content":"            String description \u003d userInput.replace(\"todo\", \"\");","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"jylow"},"content":"            Task todo \u003d new ToDo(description);","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"jylow"},"content":"            return new AddCommand(todo);","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"jylow"},"content":"        case \"deadline\":","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"jylow"},"content":"            fields \u003d userInput.replace(\"deadline\", \"\").split(\" /by \");","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"jylow"},"content":"            if (fields.length !\u003d 2) {","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"jylow"},"content":"                throw new InvalidArgumentException(\"Please enter \u0027deadline {task description} \" +","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"jylow"},"content":"                        \"\u0027/by\u0027 {date}\u0027 or use a different \" +","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"jylow"},"content":"                        \"keyword\");","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"jylow"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"jylow"},"content":"            Task deadline \u003d new Deadline(fields[0], fields[1]);","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"jylow"},"content":"            return new AddCommand(deadline);","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"jylow"},"content":"        case \"event\":","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"jylow"},"content":"            fields \u003d userInput.replace(\"event\", \"\").split(\" /from | /to \");","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"jylow"},"content":"            if (fields.length !\u003d 3) {","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"jylow"},"content":"                throw new InvalidArgumentException(\"Please enter \u0027event {task description} \" +","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"jylow"},"content":"                        \"\u0027/from\u0027 {start} \u0027/to\u0027 {finish} \" +","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"jylow"},"content":"                        \"or use a different \" +","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"jylow"},"content":"                        \"keyword\");","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"jylow"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"jylow"},"content":"            Task event \u003d new Event(fields[0], fields[1], fields[2]);","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"jylow"},"content":"            return new AddCommand(event);","lastModifiedDate":"2023-09-02"},{"lineNumber":77,"author":{"gitId":"jylow"},"content":"        case \"bye\":","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"jylow"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"jylow"},"content":"        default:","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"jylow"},"content":"            throw new UnknownActionException(\"OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"jylow"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"jylow"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"jylow":83}},{"path":"src/main/java/duke/util/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jylow"},"content":"package duke.util;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"jylow"},"content":"import duke.exception.NoFileException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jylow"},"content":"import java.io.File;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jylow"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jylow"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"jylow"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jylow"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jylow"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jylow"},"content":" * Storage class to help with reading and writing of data from files.","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"jylow"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jylow"},"content":"public class Storage {","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"jylow"},"content":"    private final String FILEPATH;","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"jylow"},"content":"     * Constructs a event with a given description. Completion of the task","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"jylow"},"content":"     * is false by default.","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"jylow"},"content":"     * @param filePath The location of the file to be read.","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"jylow"},"content":"    public Storage(String filePath){","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"jylow"},"content":"        this.FILEPATH \u003d filePath;","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"jylow"},"content":"     * Loads data from file into an ArrayList to be further processed.","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"jylow"},"content":"     * @return ArrayList of string containing the information read from the file","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"jylow"},"content":"     * @throws NoFileException throws an error if no such file is found with the given filepath","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"jylow"},"content":"    public ArrayList\u003cString\u003e load() throws NoFileException {","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"jylow"},"content":"        File f \u003d new File(FILEPATH);","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"jylow"},"content":"        ArrayList\u003cString\u003e fileData \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"jylow"},"content":"        try{","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"jylow"},"content":"            Scanner fileReader \u003d new Scanner(f);","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"jylow"},"content":"            while (fileReader.hasNextLine()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"jylow"},"content":"                String info \u003d fileReader.nextLine();","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"jylow"},"content":"                fileData.add(info);","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"jylow"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"jylow"},"content":"            fileReader.close();","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"jylow"},"content":"            return fileData;","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"jylow"},"content":"        } catch (FileNotFoundException e){","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"jylow"},"content":"            throw new NoFileException(e.getMessage());","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"jylow"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"jylow"},"content":"     * Writes the current tasklist back into a file.","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"jylow"},"content":"     * @param tasklst ArrayList of strings to be written into the file","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"jylow"},"content":"     * @throws NoFileException Exception when file to be written in cannot be found","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"jylow"},"content":"    public void rewriteFile(TaskList tasklst) throws NoFileException {","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"jylow"},"content":"        try{","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"jylow"},"content":"        ArrayList\u003cString\u003e tasks \u003d tasklst.toWriteFormat();","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"jylow"},"content":"        FileWriter fw \u003d new FileWriter(this.FILEPATH);","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"jylow"},"content":"        for(String task : tasks) {","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"jylow"},"content":"            fw.append(task);","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"jylow"},"content":"            fw.append(System.lineSeparator());","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"jylow"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"jylow"},"content":"        fw.close();","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"jylow"},"content":"        } catch (IOException e){","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"jylow"},"content":"            throw new NoFileException(e.getMessage());","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"jylow"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"jylow"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"jylow":66}},{"path":"src/main/java/duke/util/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jylow"},"content":"package duke.util;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"jylow"},"content":"import duke.exception.DukeException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":"import duke.exception.NoTaskException;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jylow"},"content":"import duke.exception.InvalidTaskNumberException;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jylow"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"jylow"},"content":"import duke.task.Event;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jylow"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jylow"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"jylow"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jylow"},"content":" * Tasklist containing the tasks added by the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"jylow"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jylow"},"content":"public class TaskList {","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jylow"},"content":"    private final ArrayList\u003cTask\u003e TASKLST;","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"jylow"},"content":"     * Constructor for an instance of an empty tasklist.","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"jylow"},"content":"    public TaskList() {","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"jylow"},"content":"        this.TASKLST \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"jylow"},"content":"     * Constructor for a tasklist with a string of tasks.","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"jylow"},"content":"     * @param fileData ArrayList of strings with each string being a task to be added into the tasklist","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"jylow"},"content":"     * @throws DukeException exceptions that will be encountered when trying to add tasks","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"jylow"},"content":"    public TaskList(ArrayList\u003cString\u003e fileData) throws DukeException {","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"jylow"},"content":"        String[] fields;","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"jylow"},"content":"        this.TASKLST \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"jylow"},"content":"        for (String info : fileData) {","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"jylow"},"content":"            fields \u003d info.split(\" \\\\| \");","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"jylow"},"content":"            Task tempT;","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"jylow"},"content":"            switch (fields[0].trim()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"jylow"},"content":"            case \"T\":","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"jylow"},"content":"                if(fields[2].isEmpty()){","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"jylow"},"content":"                    throw new NoTaskException(\"Error! Cannot add an empty todo!\");","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"jylow"},"content":"                }","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"jylow"},"content":"                tempT \u003d new ToDo(fields[2].trim());","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"jylow"},"content":"                if(fields[1].equals(\"1\")) {","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"jylow"},"content":"                    tempT.markAsDone();","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"jylow"},"content":"                }","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"jylow"},"content":"                TASKLST.add(tempT);","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"jylow"},"content":"                break;","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"jylow"},"content":"            case \"D\":","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"jylow"},"content":"                tempT \u003d new Deadline(fields[2].trim(), fields[3]);","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"jylow"},"content":"                if(fields[1].equals(\"1\")) {","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"jylow"},"content":"                    tempT.markAsDone();","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"jylow"},"content":"                }","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"jylow"},"content":"                TASKLST.add(tempT);","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"jylow"},"content":"                break;","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"jylow"},"content":"            case \"E\":","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"jylow"},"content":"                String[] time;","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"jylow"},"content":"                time \u003d fields[3].split(\"-\u003e\");","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"jylow"},"content":"                tempT \u003d new Event(fields[2].trim(), time[0], time[1]);","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"jylow"},"content":"                if(fields[1].equals(\"1\")) {","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"jylow"},"content":"                    tempT.markAsDone();","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"jylow"},"content":"                }","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"jylow"},"content":"                TASKLST.add(tempT);","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"jylow"},"content":"                break;","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"jylow"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"jylow"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"jylow"},"content":"     * Marks a task within the tasklist as complete.","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"jylow"},"content":"     * @param taskNumber task number to be marked","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"jylow"},"content":"     * @param ui instance of user interface","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"jylow"},"content":"     * @throws InvalidTaskNumberException Error when given task number exceeds the number of tasks in the list","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"jylow"},"content":"    public void markTask(int taskNumber, Ui ui) throws InvalidTaskNumberException {","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"jylow"},"content":"        if (taskNumber \u003e TASKLST.size()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":77,"author":{"gitId":"jylow"},"content":"            throw new InvalidTaskNumberException(\"Error! Task Number given is outside range of current list size of \"","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"jylow"},"content":"                    + TASKLST.size());","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"jylow"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"jylow"},"content":"        TASKLST.get(taskNumber - 1).markAsDone();","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"jylow"},"content":"        ui.showMarked(TASKLST.get(taskNumber - 1));","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"jylow"},"content":"     * Displays the list of tasks stored in the tasklist.","lastModifiedDate":"2023-09-02"},{"lineNumber":86,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":87,"author":{"gitId":"jylow"},"content":"    public void displayTasks() {","lastModifiedDate":"2023-09-02"},{"lineNumber":88,"author":{"gitId":"jylow"},"content":"        for (Task task : TASKLST) {","lastModifiedDate":"2023-09-02"},{"lineNumber":89,"author":{"gitId":"jylow"},"content":"            System.out.println(task.toString());","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"jylow"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":91,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":92,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":94,"author":{"gitId":"jylow"},"content":"     * Unmarks a task with the given task number in the tasklist.","lastModifiedDate":"2023-09-02"},{"lineNumber":95,"author":{"gitId":"jylow"},"content":"     * @param taskNumber task number to be unmarked","lastModifiedDate":"2023-09-02"},{"lineNumber":96,"author":{"gitId":"jylow"},"content":"     * @param ui instance of user interface","lastModifiedDate":"2023-09-02"},{"lineNumber":97,"author":{"gitId":"jylow"},"content":"     * @throws InvalidTaskNumberException exception when the task number given is outside the count of tasklist","lastModifiedDate":"2023-09-02"},{"lineNumber":98,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":99,"author":{"gitId":"jylow"},"content":"    public void unmarkTask(int taskNumber, Ui ui) throws InvalidTaskNumberException {","lastModifiedDate":"2023-09-02"},{"lineNumber":100,"author":{"gitId":"jylow"},"content":"        if (taskNumber \u003e TASKLST.size()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":101,"author":{"gitId":"jylow"},"content":"            throw new InvalidTaskNumberException(\"Error! Task Number given is outside range of current list size of \"","lastModifiedDate":"2023-09-02"},{"lineNumber":102,"author":{"gitId":"jylow"},"content":"                    + TASKLST.size());","lastModifiedDate":"2023-09-02"},{"lineNumber":103,"author":{"gitId":"jylow"},"content":"        } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":104,"author":{"gitId":"jylow"},"content":"            TASKLST.get(taskNumber - 1).unmarkAsDone();","lastModifiedDate":"2023-09-02"},{"lineNumber":105,"author":{"gitId":"jylow"},"content":"            ui.showUnmarked(TASKLST.get(taskNumber - 1));","lastModifiedDate":"2023-09-02"},{"lineNumber":106,"author":{"gitId":"jylow"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":107,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":108,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":109,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":110,"author":{"gitId":"jylow"},"content":"     * Adds given task to the tasklist.","lastModifiedDate":"2023-09-02"},{"lineNumber":111,"author":{"gitId":"jylow"},"content":"     * @param task Task to be added to the list","lastModifiedDate":"2023-09-02"},{"lineNumber":112,"author":{"gitId":"jylow"},"content":"     * @param ui instance of user interface","lastModifiedDate":"2023-09-02"},{"lineNumber":113,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":114,"author":{"gitId":"jylow"},"content":"    public void addTask(Task task, Ui ui) {","lastModifiedDate":"2023-09-02"},{"lineNumber":115,"author":{"gitId":"jylow"},"content":"        TASKLST.add(task);","lastModifiedDate":"2023-09-02"},{"lineNumber":116,"author":{"gitId":"jylow"},"content":"        ui.showTaskAdded(task, TASKLST.size());","lastModifiedDate":"2023-09-02"},{"lineNumber":117,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":118,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":119,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":120,"author":{"gitId":"jylow"},"content":"     * Deletes a task from the tasklist.","lastModifiedDate":"2023-09-02"},{"lineNumber":121,"author":{"gitId":"jylow"},"content":"     * @param taskNumber Task number of task to be deleted","lastModifiedDate":"2023-09-02"},{"lineNumber":122,"author":{"gitId":"jylow"},"content":"     * @param ui instance of user interface","lastModifiedDate":"2023-09-02"},{"lineNumber":123,"author":{"gitId":"jylow"},"content":"     * @throws InvalidTaskNumberException Exception when given task number is outside range of tasks in the list","lastModifiedDate":"2023-09-02"},{"lineNumber":124,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":125,"author":{"gitId":"jylow"},"content":"    public void deleteTask(int taskNumber, Ui ui) throws InvalidTaskNumberException {","lastModifiedDate":"2023-09-02"},{"lineNumber":126,"author":{"gitId":"jylow"},"content":"        if (taskNumber \u003e TASKLST.size()) {","lastModifiedDate":"2023-09-02"},{"lineNumber":127,"author":{"gitId":"jylow"},"content":"            throw new InvalidTaskNumberException(\"Error! Task Number given is outside range of current list size of \"","lastModifiedDate":"2023-09-02"},{"lineNumber":128,"author":{"gitId":"jylow"},"content":"                    + TASKLST.size());","lastModifiedDate":"2023-09-02"},{"lineNumber":129,"author":{"gitId":"jylow"},"content":"        } else {","lastModifiedDate":"2023-09-02"},{"lineNumber":130,"author":{"gitId":"jylow"},"content":"            Task temp \u003d TASKLST.remove(taskNumber - 1);","lastModifiedDate":"2023-09-02"},{"lineNumber":131,"author":{"gitId":"jylow"},"content":"            ui.showComplete(\"Noted. I\u0027ve removed this task:\"","lastModifiedDate":"2023-09-02"},{"lineNumber":132,"author":{"gitId":"jylow"},"content":"                    + temp","lastModifiedDate":"2023-09-02"},{"lineNumber":133,"author":{"gitId":"jylow"},"content":"                    + \"Now you have \" + this.TASKLST.size() + \" task(s) in the list\");","lastModifiedDate":"2023-09-02"},{"lineNumber":134,"author":{"gitId":"jylow"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":135,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":136,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":137,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":138,"author":{"gitId":"jylow"},"content":"     * Returns tasks in the tasklist in format to be written into a file.","lastModifiedDate":"2023-09-02"},{"lineNumber":139,"author":{"gitId":"jylow"},"content":"     * @return ArrayList of formatted strings to be written","lastModifiedDate":"2023-09-02"},{"lineNumber":140,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":141,"author":{"gitId":"jylow"},"content":"    public ArrayList\u003cString\u003e toWriteFormat() {","lastModifiedDate":"2023-09-02"},{"lineNumber":142,"author":{"gitId":"jylow"},"content":"        ArrayList\u003cString\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-02"},{"lineNumber":143,"author":{"gitId":"jylow"},"content":"        for(Task task : TASKLST) {","lastModifiedDate":"2023-09-02"},{"lineNumber":144,"author":{"gitId":"jylow"},"content":"            tasks.add(task.toSaveFormat());","lastModifiedDate":"2023-09-02"},{"lineNumber":145,"author":{"gitId":"jylow"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":146,"author":{"gitId":"jylow"},"content":"        return tasks;","lastModifiedDate":"2023-09-02"},{"lineNumber":147,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":148,"author":{"gitId":"jylow"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"jylow":148}},{"path":"src/main/java/duke/util/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jylow"},"content":"package duke.util;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"jylow"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"jylow"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"jylow"},"content":"/**","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"jylow"},"content":" * UI class that handles interaction with the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"jylow"},"content":" */","lastModifiedDate":"2023-09-02"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":"public class Ui {","lastModifiedDate":"2023-09-02"},{"lineNumber":11,"author":{"gitId":"jylow"},"content":"    static String line \u003d \"---------------------\"; //Line to be drawn on the screen","lastModifiedDate":"2023-09-02"},{"lineNumber":12,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":13,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":14,"author":{"gitId":"jylow"},"content":"     * Scans the next input given by the user.","lastModifiedDate":"2023-09-02"},{"lineNumber":15,"author":{"gitId":"jylow"},"content":"     * @return String containing the instructions by user","lastModifiedDate":"2023-09-02"},{"lineNumber":16,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":17,"author":{"gitId":"jylow"},"content":"    public String read() {","lastModifiedDate":"2023-09-02"},{"lineNumber":18,"author":{"gitId":"jylow"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"jylow"},"content":"        return sc.nextLine();","lastModifiedDate":"2023-09-02"},{"lineNumber":20,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":22,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":23,"author":{"gitId":"jylow"},"content":"     * Prints line onto the console","lastModifiedDate":"2023-09-02"},{"lineNumber":24,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":25,"author":{"gitId":"jylow"},"content":"    public void showLine() {","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"jylow"},"content":"        System.out.println(line);","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"jylow"},"content":"     * Prints complete message when action is carried out.","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"jylow"},"content":"     * @param message complete message to be displayed","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"jylow"},"content":"    public void showComplete(String message) {","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"jylow"},"content":"        System.out.println(message);","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"jylow"},"content":"     * Prints error message when exception is thrown.","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"jylow"},"content":"     * @param errorMessage message of the exception","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"jylow"},"content":"    public void showError(String errorMessage) {","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"jylow"},"content":"        System.out.println(errorMessage);","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"jylow"},"content":"     * Prints message when task has been marked.","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"jylow"},"content":"     * @param task task that was marked","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"jylow"},"content":"    public void showMarked(Task task) {","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"jylow"},"content":"        System.out.println(\"Nice! I\u0027ve Marked this task as done:\");","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"jylow"},"content":"        System.out.println(task);","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"jylow"},"content":"     * Prints message when task has been unmarked.","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"jylow"},"content":"     * @param task task that was unmarked","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"jylow"},"content":"    public void showUnmarked(Task task) {","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"jylow"},"content":"        System.out.println(\"OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"jylow"},"content":"        System.out.println(task);","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"jylow"},"content":"     * Prints an error loading file data onto the screen.","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"jylow"},"content":"    public void showLoadingError() {","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"jylow"},"content":"        System.out.println(\"Error loading data! There is no file found with the given filepath!\");","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"jylow"},"content":"     * Prints the welcome message","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"jylow"},"content":"    public void showWelcome() {","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"jylow"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"jylow"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"jylow"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-09-02"},{"lineNumber":77,"author":{"gitId":"jylow"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"jylow"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"jylow"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"jylow"},"content":"        System.out.println(\" Hello! I\u0027m Somebodyhaha\\n\" +","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"jylow"},"content":"                \" What can I do for you?\");","lastModifiedDate":"2023-09-02"},{"lineNumber":83,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":86,"author":{"gitId":"jylow"},"content":"     * Prints the result after a task has been added.","lastModifiedDate":"2023-09-02"},{"lineNumber":87,"author":{"gitId":"jylow"},"content":"     * @param task task that was added","lastModifiedDate":"2023-09-02"},{"lineNumber":88,"author":{"gitId":"jylow"},"content":"     * @param count current number of tasks in the tasklist","lastModifiedDate":"2023-09-02"},{"lineNumber":89,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"jylow"},"content":"    public void showTaskAdded(Task task, int count) {","lastModifiedDate":"2023-09-02"},{"lineNumber":91,"author":{"gitId":"jylow"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-09-02"},{"lineNumber":92,"author":{"gitId":"jylow"},"content":"        System.out.println(\"  \" + task.toString());","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"jylow"},"content":"        System.out.println(\"Now you have \" + (count) + \" tasks in the list.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":94,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":95,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":96,"author":{"gitId":"jylow"},"content":"    /**","lastModifiedDate":"2023-09-02"},{"lineNumber":97,"author":{"gitId":"jylow"},"content":"     * Displays goodbye message.","lastModifiedDate":"2023-09-02"},{"lineNumber":98,"author":{"gitId":"jylow"},"content":"     */","lastModifiedDate":"2023-09-02"},{"lineNumber":99,"author":{"gitId":"jylow"},"content":"    public void showGoodbye() {","lastModifiedDate":"2023-09-02"},{"lineNumber":100,"author":{"gitId":"jylow"},"content":"        System.out.println(\"Bye. Hope to See you again soon!\");","lastModifiedDate":"2023-09-02"},{"lineNumber":101,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-02"},{"lineNumber":102,"author":{"gitId":"jylow"},"content":"}","lastModifiedDate":"2023-09-02"}],"authorContributionMap":{"jylow":102}},{"path":"src/test/java/DukeTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jylow"},"content":"//package java;  //same package as the class being tested","lastModifiedDate":"2023-09-03"},{"lineNumber":2,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":3,"author":{"gitId":"jylow"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"jylow"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"jylow"},"content":"public class DukeTest {","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"jylow"},"content":"    @Test","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"jylow"},"content":"    public void dummyTest() {","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":"        assertEquals(2, 2);","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"jylow"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"jylow"},"content":"    @Test","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"jylow"},"content":"    public void anotherDummyTest() {","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"jylow"},"content":"        assertEquals(4, 4);","lastModifiedDate":"2023-09-03"},{"lineNumber":16,"author":{"gitId":"jylow"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"jylow"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"jylow":17}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jylow"},"content":"todo read book","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"jylow"},"content":"todo","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"jylow"},"content":"deadline return book /by 6th June","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"jylow"},"content":"event project meeting /from Aug 6th 2pm /to 4pm","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"jylow"},"content":"todo join sports club","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"jylow"},"content":"todo borrow book","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"jylow"},"content":"blah","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"jylow"},"content":"mark 1","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"jylow"},"content":"mark 4","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"jylow"},"content":"bye","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"jylow":10}}]
