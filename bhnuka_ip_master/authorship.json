[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"    mainClass \u003d \"duke.Duke\"","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":38,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"bhnuka":1,"-":41}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"E | 0 | c | 2020-10-15 - 2020-11-16","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"E | 0 | aga | 2023-11-11 - 2023-10-10","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"T | 0 | apple banana | ","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"T | 1 | apple pear | ","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"T | 0 | apple | ","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"T | 0 | a | ","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"bhnuka":6}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.command.Command;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":" * CS2103T iP Week 3","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":" * AY23/24 Semester 1","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":" * A product named Duke, a Personal Assistant Chatbot that helps","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":" * a person to keep track of various things.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":" *","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":" * @author bhnuka, Bhanuka Bandara Ekanayake (AXXX7875J), G01","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":" * @version 2.0 CS2103T AY 23/24 Sem 1","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":" * All the sourcecode behind the chatbot, Duke","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"public class Duke {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"     * Constructs a Duke instance with the specified file path.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"     * @param filePath The file path where task data is stored.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"    public Duke(String filePath) {","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"        try {","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"     * Runs the Duke chatbot, allowing user interaction.","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"     * Displays a welcome message and processes user commands until the user exits.","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"    public void run() {","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"        ui.showWelcome();","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"bhnuka"},"content":"        while (!isExit) {","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"bhnuka"},"content":"            try {","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"bhnuka"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"bhnuka"},"content":"                ui.showLine(); // show the divider line (\"_______\")","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"bhnuka"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"bhnuka"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"bhnuka"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"bhnuka"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"bhnuka"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"bhnuka"},"content":"            } finally {","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"bhnuka"},"content":"                ui.showLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"bhnuka"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":59,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"bhnuka"},"content":"     * The main method to start the Duke chatbot.","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"bhnuka"},"content":"     * @param args Command-line arguments (not used in this application).","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"bhnuka"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"bhnuka"},"content":"        new Duke(\"data/tasks.txt\").run();","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":70,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"bhnuka":70}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":" * Represents exceptions specific to Duke, the Personal Assistant Chatbot.","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"     * Constructs a DukeException with the specified error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"     * @param message The error message associated with this exception.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"        super(message);","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":14}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.command.*;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import duke.task.Event;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":" * Parses user input to create the appropriate command for Duke.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"public class Parser {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"     * Parses the user input and returns the corresponding Duke command.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     * @param input The user input to be parsed.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     * @return A Command object representing the user\u0027s request.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If the input is invalid or contains errors.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"    public static Command parse(String input) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"        String[] parts \u003d input.split(\" \", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"        String commandType \u003d parts[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"        switch (commandType) {","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"        case \"bye\":","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"        case \"list\":","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"            return new ListCommand();","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"        case \"mark\":","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"            int taskIndex2 \u003d Integer.parseInt(input.substring(5)) - 1;","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"            return new MarkCommand(taskIndex2);","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"        case \"unmark\":","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"            int taskIndex3 \u003d Integer.parseInt(input.substring(7)) - 1;","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"            return new UnmarkCommand(taskIndex3);","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"        case \"todo\":","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"            if (input.length() \u003c\u003d 5) {","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"            throw new DukeException(\"\\t ☹ OOPS!!! The description of a todo\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"             \" cannot be empty.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"            return new AddCommand(new Todo(input.substring(5), false));","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"        case \"deadline\":","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"        // Parse deadline command and create DeadlineTask object","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"            int byIndex \u003d input.indexOf(\"/by\");","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"            if (byIndex \u003d\u003d -1) {","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"                throw new DukeException(\"\\t ☹ OOPS!!! The deadline description\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"                 \" must include a /by date.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"bhnuka"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"bhnuka"},"content":"            String description \u003d input.substring(9, byIndex).trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"bhnuka"},"content":"            if (description.isEmpty()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"bhnuka"},"content":"                throw new DukeException(\"☹ OOPS!!! The deadline description\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"bhnuka"},"content":"                 \" cannot be empty.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"bhnuka"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"bhnuka"},"content":"            String by \u003d input.substring(byIndex + 3).trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"bhnuka"},"content":"            return new AddCommand(new Deadline(description, false, by));","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"bhnuka"},"content":"        case \"event\":","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"bhnuka"},"content":"            int fromIndex \u003d input.indexOf(\"/from\");","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"bhnuka"},"content":"            int toIndex \u003d input.indexOf(\"/to\");","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"bhnuka"},"content":"            if (fromIndex \u003d\u003d -1 \u0026\u0026 toIndex \u003d\u003d -1) {","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"bhnuka"},"content":"                throw new DukeException(\"\\t ☹ OOPS!!! The event description\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"bhnuka"},"content":"                 \" must include both /from and /to dates.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"bhnuka"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"bhnuka"},"content":"            String description2 \u003d input.substring(6, fromIndex).trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"bhnuka"},"content":"            if (description2.isEmpty()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"bhnuka"},"content":"                throw new DukeException(\"☹ OOPS!!! The event description cannot\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"bhnuka"},"content":"                 \" be empty.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"bhnuka"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"bhnuka"},"content":"            String from \u003d input.substring(fromIndex + 5, toIndex).trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"bhnuka"},"content":"            String to \u003d input.substring(toIndex + 3).trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"bhnuka"},"content":"            // Parse event command and create EventTask object","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"bhnuka"},"content":"            return new AddCommand(new Event(description2, false, from, to));","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"bhnuka"},"content":"        case \"delete\":","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"bhnuka"},"content":"            int taskIndex \u003d Integer.parseInt(input.substring(7)) - 1;","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"bhnuka"},"content":"            return new DeleteCommand(taskIndex);","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"bhnuka"},"content":"        case \"find\":","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"bhnuka"},"content":"            String keyword \u003d input.substring(5).trim();","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"bhnuka"},"content":"            return new FindCommand(keyword);","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"bhnuka"},"content":"        default:","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"bhnuka"},"content":"            throw new DukeException(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"bhnuka"},"content":"             \" what that means :-(\");","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":82}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.task.Event;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":" * Handles the loading and saving of tasks from/to a specified file.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"public class Storage {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"    private String filePath;","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"    TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"     * Constructs a Storage object with the specified file path.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"     * @param filePath The file path where task data is stored.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"     * Loads tasks from the file specified in the constructor.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"     * @return A TaskList containing the loaded tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If there are errors during loading.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"    public TaskList load() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"            FileReader fileReader \u003d new FileReader(filePath);","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"            Scanner scanner \u003d new Scanner(fileReader);","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"            while (scanner.hasNext()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"                String line \u003d scanner.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"                String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"                String taskType \u003d parts[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"                boolean isDone \u003d parts[1].equals(\"1\");","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"                String description \u003d parts[2];","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"bhnuka"},"content":"                switch (taskType) {","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"bhnuka"},"content":"                case \"T\":","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"bhnuka"},"content":"                    tasks.add(new Todo(description, isDone));","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"bhnuka"},"content":"                    break;","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"bhnuka"},"content":"                case \"D\":","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"bhnuka"},"content":"                    String by \u003d parts[3];","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"bhnuka"},"content":"                    tasks.add(new Deadline(description, isDone, by));","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"bhnuka"},"content":"                    break;","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"bhnuka"},"content":"                case \"E\":","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"bhnuka"},"content":"                    String[] parts2 \u003d parts[3].split(\" - \");","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"bhnuka"},"content":"                    String from \u003d parts2[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"bhnuka"},"content":"                    String to \u003d parts2[1];","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"bhnuka"},"content":"                    tasks.add(new Event(description, isDone, from, to));","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"bhnuka"},"content":"                    break;","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"bhnuka"},"content":"                default:","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"bhnuka"},"content":"                    throw new DukeException(\"☹ OOPS!!! Couldn\u0027t load file.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"bhnuka"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"bhnuka"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"bhnuka"},"content":"            fileReader.close();","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"bhnuka"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"bhnuka"},"content":"            throw new DukeException(\"File not found: \" + e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"bhnuka"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"bhnuka"},"content":"            throw new DukeException(\"Error reading file: \" + e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"bhnuka"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"bhnuka"},"content":"            throw new DukeException(\"Error loading tasks: \" + e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"bhnuka"},"content":"        return tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"bhnuka"},"content":"     * Saves the tasks to the file specified in the constructor.","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"bhnuka"},"content":"     * @param tasks The TaskList containing tasks to be saved.","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If there are errors during saving.","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"bhnuka"},"content":"    public void saveTasks(TaskList tasks) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"bhnuka"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"bhnuka"},"content":"            FileWriter fileWriter \u003d new FileWriter(\"./data/tasks.txt\");","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"bhnuka"},"content":"            for (int i \u003d 0 ; i \u003c tasks.listSize() ; i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"bhnuka"},"content":"                String taskType \u003d \"\";","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"bhnuka"},"content":"                String dateInfo \u003d \"\";","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"bhnuka"},"content":"                if (tasks.getTask(i) instanceof Todo) {","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"bhnuka"},"content":"                    taskType \u003d \"T\";","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"bhnuka"},"content":"                } else if (tasks.getTask(i) instanceof Deadline) {","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"bhnuka"},"content":"                    taskType \u003d \"D\";","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"bhnuka"},"content":"                    dateInfo \u003d ((Deadline) tasks.getTask(i)).getBy();","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"bhnuka"},"content":"                } else if (tasks.getTask(i) instanceof Event) {","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"bhnuka"},"content":"                    taskType \u003d \"E\";","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"bhnuka"},"content":"                    dateInfo \u003d ((Event) tasks.getTask(i)).getFrom() +","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"bhnuka"},"content":"                    \" - \" + ((Event) tasks.getTask(i)).getTo();","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"bhnuka"},"content":"                } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"bhnuka"},"content":"                    throw new DukeException(\"Invalid tasks in list.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"bhnuka"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":103,"author":{"gitId":"bhnuka"},"content":"                fileWriter.write(taskType + \" | \" +","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"bhnuka"},"content":"                (tasks.getTask(i).getDone() ? \"1\" : \"0\") + \" | \" +","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"bhnuka"},"content":"                tasks.getTask(i).getDescription() + \" | \" + dateInfo + \"\\n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"bhnuka"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"bhnuka"},"content":"            fileWriter.close();","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"bhnuka"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"bhnuka"},"content":"            throw new DukeException(\"Error saving tasks: \" + e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"bhnuka"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"bhnuka"},"content":"            throw new DukeException(\"Invalid tasks in list: \" + e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":114,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":114}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":" * Represents the user interface for Duke, handling input and output.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"public class Ui {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"    private Scanner scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"     * Constructs a Ui object and initializes the scanner for user input.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"    public Ui() {","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"        scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"     * Displays a welcome message when Duke starts.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"    public static void showWelcome() {","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"        System.out.println(\"Hello from\\n\" + logo);","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"        System.out.println(\"\\t____________________________________________________________\");","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"        System.out.println(\"\\t Hello! I\u0027m Duke.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"        System.out.println(\"\\t What can I do for you?\");","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"        System.out.println(\"\\t____________________________________________________________\");","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"     * Displays an exit message when Duke is exited.","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"    public static void showExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"        System.out.println(\"\\t Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"     * Displays an error message when loading tasks from storage fails.","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"    public static void showLoadingError() {","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"bhnuka"},"content":"        System.out.println(\"No saved tasks found.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"bhnuka"},"content":"     * Displays an error message with the provided error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"bhnuka"},"content":"     * @param errorMessage The error message to display.","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"bhnuka"},"content":"    public static void showError(String errorMessage) {","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"bhnuka"},"content":"        System.out.println(errorMessage);","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"bhnuka"},"content":"     * Displays a horizontal line separator.","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"bhnuka"},"content":"    public static void showLine() {","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"bhnuka"},"content":"        System.out.println(\"\\t____________________________________________________________\");","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"bhnuka"},"content":"     * Displays a message when a task is added.","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"bhnuka"},"content":"     * @param task The task that was added.","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"bhnuka"},"content":"     * @param size The number of tasks in the list after adding.","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"bhnuka"},"content":"    public static void showAdded(Task task, int size) {","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"bhnuka"},"content":"        System.out.println(\"\\t Got it. I\u0027ve added this task: \");","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"bhnuka"},"content":"        System.out.println(\"\\t\\t\" + task);","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"bhnuka"},"content":"        System.out.println(\"\\t Now you have \" + size + \" task(s) in the list.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"bhnuka"},"content":"     * Displays a message when a task is deleted.","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"bhnuka"},"content":"     * @param task The task that was deleted.","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"bhnuka"},"content":"     * @param size The number of tasks in the list after deletion.","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"bhnuka"},"content":"    public static void showDeleted(Task task, int size) {","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"bhnuka"},"content":"        System.out.println(\"\\t Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"bhnuka"},"content":"        System.out.println(\"\\t   \" + task);","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"bhnuka"},"content":"        System.out.println(\"\\t Now you have \" + size + \" tasks in the list.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"bhnuka"},"content":"     * Displays a message when a task is marked as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"bhnuka"},"content":"     * @param task The task that was marked as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"bhnuka"},"content":"    public static void showMarked(Task task) {","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"bhnuka"},"content":"        System.out.println(\"\\t Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"bhnuka"},"content":"        System.out.println(\"\\t   \" + task);","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"bhnuka"},"content":"     * Displays a message when a task is marked as not done.","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"bhnuka"},"content":"     * @param task The task that was marked as not done.","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"bhnuka"},"content":"    public static void showUnmarked(Task task) {","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"bhnuka"},"content":"        System.out.println(\"\\t OK, I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"bhnuka"},"content":"        System.out.println(\"\\t   \" + task);","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"bhnuka"},"content":"     * Displays the list of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"bhnuka"},"content":"     * @param tasks The list of tasks to display.","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"bhnuka"},"content":"    public static void showList(TaskList tasks) {","lastModifiedDate":"2023-08-31"},{"lineNumber":117,"author":{"gitId":"bhnuka"},"content":"        tasks.listTasks();","lastModifiedDate":"2023-08-31"},{"lineNumber":118,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":119,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":120,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"bhnuka"},"content":"     * Displays matching tasks from a TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"bhnuka"},"content":"     * @param matchingTasks The TaskList containing matching tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":125,"author":{"gitId":"bhnuka"},"content":"    public void showMatchingTasks(TaskList matchingTasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":126,"author":{"gitId":"bhnuka"},"content":"        System.out.println(\"\\t Here are the matching tasks in your list:\");","lastModifiedDate":"2023-09-01"},{"lineNumber":127,"author":{"gitId":"bhnuka"},"content":"        for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":128,"author":{"gitId":"bhnuka"},"content":"            System.out.println(\"\\t \" + (i + 1) + \".\" + matchingTasks.get(i));","lastModifiedDate":"2023-09-01"},{"lineNumber":129,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":131,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":132,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"bhnuka"},"content":"     * Reads a command from the user\u0027s input.","lastModifiedDate":"2023-09-01"},{"lineNumber":134,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":135,"author":{"gitId":"bhnuka"},"content":"     * @return The user\u0027s input command.","lastModifiedDate":"2023-09-01"},{"lineNumber":136,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":137,"author":{"gitId":"bhnuka"},"content":"    public String readCommand() {","lastModifiedDate":"2023-08-31"},{"lineNumber":138,"author":{"gitId":"bhnuka"},"content":"        return scanner.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":139,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":140,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":140}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":" * Represents a command to add a task to the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"    private Task taskToAdd;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     * Constructs an AddCommand with the specified task to be added.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"     * @param taskToAdd The task to be added to the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"    public AddCommand(Task taskToAdd) {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"        this.taskToAdd \u003d taskToAdd;","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"     * Executes the AddCommand to add the task to the task list, update the user interface,","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"     * and save the tasks to storage.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"     * @param tasks   The TaskList containing tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"     * @param ui      The Ui for user interface interactions.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"     * @param storage The Storage for loading and saving tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If there is an error while executing the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"        tasks.addTask(taskToAdd);","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"        ui.showAdded(taskToAdd, tasks.listSize());","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"        storage.saveTasks(tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"     * Checks if the command is an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"     * @return false since AddCommand is not an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"        return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":47}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":" * Represents a command that can be executed by Duke.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"public abstract class Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"     * Executes the command with the given TaskList, Ui, and Storage.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     * @param tasks   The TaskList containing tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     * @param ui      The Ui for user interface interactions.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"     * @param storage The Storage for loading and saving tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If there is an error while executing the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"    public abstract void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"     * Checks if the command is an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"     * @return true if the command is an exit command, otherwise false.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":30}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":" * Represents a command to delete a task from the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"    private int taskIndexToDelete;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     * Constructs a DeleteCommand with the index of the task to be deleted.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"     * @param taskIndexToDelete The index of the task to be deleted.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"    public DeleteCommand(int taskIndexToDelete) {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"        this.taskIndexToDelete \u003d taskIndexToDelete;","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"     * Executes the DeleteCommand to delete the specified task from the task list,","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"     * update the user interface, and save the tasks to storage.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"     * @param tasks   The TaskList containing tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"     * @param ui      The Ui for user interface interactions.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"     * @param storage The Storage for loading and saving tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If there is an error while executing the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"        Task deletedTask \u003d tasks.getTask(taskIndexToDelete);","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"        tasks.deleteTask(taskIndexToDelete);","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"        ui.showDeleted(deletedTask, tasks.listSize());","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"        storage.saveTasks(tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"     * Checks if the command is an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"     * @return false since DeleteCommand is not an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"        return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":48}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":" * Represents a command to exit Duke.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"     * Executes the ExitCommand to save tasks to storage and display the exit message.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     * @param tasks   The TaskList containing tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     * @param ui      The Ui for user interface interactions.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"     * @param storage The Storage for loading and saving tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If there is an error while executing the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"        storage.saveTasks(tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"        ui.showExit();","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"     * Checks if the command is an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"     * @return true since ExitCommand is an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"        return true;","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":34}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":" * Represents a command to find tasks containing a specific keyword in their descriptions.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"    private String keyword;","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"     * Represents a command to find tasks containing a specific keyword in their descriptions.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"     * Executes the FindCommand to search for tasks with descriptions containing the keyword,","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"     * and displays the matching tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"     * @param tasks   The TaskList containing tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"     * @param ui      The Ui for user interface interactions.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"     * @param storage The Storage for loading and saving tasks (not used in this command).","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"        TaskList matchingTasks \u003d tasks.findTasks(keyword);","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"        ui.showMatchingTasks(matchingTasks);","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"     * Checks if the command is an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"     * @return false since FindCommand is not an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"        return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"bhnuka":41}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":" * Represents a command to list all tasks in the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"     * Executes the ListCommand to display the list of tasks from the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"     * @param tasks   The TaskList containing tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"     * @param ui      The Ui for user interface interactions.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     * @param storage The Storage for loading and saving tasks (not used in this command).","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"        ui.showList(tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"     * Checks if the command is an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"     * @return false since ListCommand is not an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"        return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":30}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":" * Represents a command to mark a task as done in the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"    private int taskIndexToMark;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"     * Constructs a MarkCommand with the index of the task to be marked as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     * @param taskIndexToMark The index of the task to be marked as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"    public MarkCommand(int taskIndexToMark) {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"        this.taskIndexToMark \u003d taskIndexToMark;","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"     * Executes the MarkCommand to mark the specified task as done, update the user interface,","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"     * and save the tasks to storage.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"     * @param tasks   The TaskList containing tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"     * @param ui      The Ui for user interface interactions.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"     * @param storage The Storage for loading and saving tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If there is an error while executing the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"        tasks.markTaskAsDone(taskIndexToMark);","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"        ui.showMarked(tasks.getTask(taskIndexToMark));","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"        storage.saveTasks(tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"     * Checks if the command is an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"     * @return false since MarkCommand is not an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"        return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":46}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":" * Represents a command to unmark a task as done in the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"    private int taskIndexToUnmark;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"     * Constructs an UnmarkCommand with the index of the task to be marked as undone.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     * @param taskIndexToUnmark The index of the task to be marked as undone.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"    public UnmarkCommand(int taskIndexToUnmark) {","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"        this.taskIndexToUnmark \u003d taskIndexToUnmark;","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"     * Executes the UnmarkCommand to mark the specified task as undone, update the user interface,","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"     * and save the tasks to storage.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"     * @param tasks   The TaskList containing tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"     * @param ui      The Ui for user interface interactions.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"     * @param storage The Storage for loading and saving tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If there is an error while executing the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"    public void execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"        tasks.markTaskAsUndone(taskIndexToUnmark);","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"        ui.showUnmarked(tasks.getTask(taskIndexToUnmark));","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"        storage.saveTasks(tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"     * Checks if the command is an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"     * @return false since UnmarkCommand is not an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"        return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":46}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":" * A Deadline class to represent deadline tasks","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"    protected LocalDate by;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"     * Constructs deadline with the given description","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"     * @param description the given description of the deadline","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     * @param isDone      whether the deadline is done","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     * @param by          the date by which the deadline is","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"    public Deadline(String description, boolean isDone, String by) {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"        super(description, isDone, TaskType.DEADLINE);","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"        this.by \u003d LocalDate.parse(by, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"     * Returns the do by date","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"     * @return String representing do by date","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"    public String getBy() {","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"        return by.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"     * Returns String representing the deadline","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"     * @return String representing deadline","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":42}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":" * An Event class to represent event tasks","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"    protected LocalDate from;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"    protected LocalDate to;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"     * Constructs deadline with the given description","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     * @param description the given description of the deadline","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     * @param isDone      whether the event is done","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"     * @param from        the time at which the event starts","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"     * @param to          the time at which the event ends","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"    public Event(String description, boolean isDone, String from, String to) {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"        super(description, isDone, TaskType.EVENT);","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"        this.from \u003d LocalDate.parse(from, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"        this.to \u003d LocalDate.parse(to, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"     * Returns the do by date","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"     * @return String representing start from date","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"    public String getFrom() {","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"        return from.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"     * Returns the do by date","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"     * @return String representing end at date","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"    public String getTo() {","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"        return to.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"     * Returns String representing the event","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"bhnuka"},"content":"     * @return String representing event","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"bhnuka"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"bhnuka"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"bhnuka"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + from.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \" to: \" + to.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":54}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":" * A Task class to represent tasks","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"public class Task {","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"    private final String description;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"    private boolean isDone;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"    private final TaskType type;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"     * Constructs task with the given description and type","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"     * @param description the given description of the task","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"     * @param type        the given type of the task","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"    public Task(String description, boolean isDone, TaskType type) {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"        this.type \u003d type;","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"     * Method that marks tasks as done","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"    public void markDone() {","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"     * Method that changes back the task status to not done","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"    public void markUndone() {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"     * Returns whether task is done","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"    public boolean getDone() {","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"        return this.isDone;","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"     * Returns description of task","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"bhnuka"},"content":"    public String getDescription() {","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"bhnuka"},"content":"        return this.description;","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"bhnuka"},"content":"     * Returns String representing the task","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"bhnuka"},"content":"     * @return String representing task","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"bhnuka"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"bhnuka"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"bhnuka"},"content":"        return \"[\" + (isDone ? \"X\" : \" \") + \"] \" + type + \": \" + description;","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":60}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":" * Represents a list of tasks in Duke.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"public class TaskList extends ArrayList\u003cTask\u003e{","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"     * Constructs a TaskList with the specified list of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     * @param tasks The list of tasks to initialize the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"     * Constructs an empty TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"     * Lists all the tasks in the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"    public void listTasks() {","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"            System.out.println(\"\\t No tasks added yet.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"            System.out.println(\"\\t Here are the tasks in your list:\");","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"                System.out.println(\"\\t \" + (i + 1) + \".\" + tasks.get(i));","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"     * Gets the number of tasks in the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"     * @return The number of tasks in the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"bhnuka"},"content":"    public int listSize() {","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"bhnuka"},"content":"        return tasks.size();","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"bhnuka"},"content":"     * Adds a task to the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"bhnuka"},"content":"     * @param task The task to be added.","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"bhnuka"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"bhnuka"},"content":"        // Add task to the list","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"bhnuka"},"content":"        tasks.add(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"bhnuka"},"content":"     * Gets a task at the specified index in the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"bhnuka"},"content":"     * @param index The index of the task to retrieve.","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"bhnuka"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If the index is out of bounds.","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"bhnuka"},"content":"    public Task getTask(int index) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"bhnuka"},"content":"        if (index \u003e\u003d 0 \u0026\u0026 index \u003c tasks.size()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"bhnuka"},"content":"            return tasks.get(index);","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"bhnuka"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"bhnuka"},"content":"            throw new DukeException(\"\\t ☹ OOPS!!! Task not found.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"bhnuka"},"content":"     * Deletes a task at the specified index from the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"bhnuka"},"content":"     * @param index The index of the task to be deleted.","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If the index is out of bounds.","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"bhnuka"},"content":"    public void deleteTask(int index) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"bhnuka"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"bhnuka"},"content":"            if (index \u003e\u003d 0 \u0026\u0026 index \u003c tasks.size()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"bhnuka"},"content":"                tasks.remove(index);","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"bhnuka"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"bhnuka"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"bhnuka"},"content":"            System.out.println(\"\\t ☹ OOPS!!! Please enter a\" +","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"bhnuka"},"content":"             \" valid task index to delete.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"bhnuka"},"content":"     * Marks a task at the specified index as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"bhnuka"},"content":"     * @param index The index of the task to be marked as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If the index is out of bounds.","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"bhnuka"},"content":"    public void markTaskAsDone(int index) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"bhnuka"},"content":"        // Mark task as done","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"bhnuka"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":103,"author":{"gitId":"bhnuka"},"content":"            if (index \u003e\u003d 0 \u0026\u0026 index \u003c tasks.size()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":104,"author":{"gitId":"bhnuka"},"content":"                tasks.get(index).markDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":105,"author":{"gitId":"bhnuka"},"content":"            } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":106,"author":{"gitId":"bhnuka"},"content":"                throw new DukeException(\"☹ OOPS!!! Task not found.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"bhnuka"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"bhnuka"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"bhnuka"},"content":"            e.getMessage();","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"bhnuka"},"content":"     * Marks a task at the specified index as undone.","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"bhnuka"},"content":"     * @param index The index of the task to be marked as undone.","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If the index is out of bounds.","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"bhnuka"},"content":"    public void markTaskAsUndone(int index) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":120,"author":{"gitId":"bhnuka"},"content":"        // Mark task as undone","lastModifiedDate":"2023-08-31"},{"lineNumber":121,"author":{"gitId":"bhnuka"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":122,"author":{"gitId":"bhnuka"},"content":"            if (index \u003e\u003d 0 \u0026\u0026 index \u003c tasks.size()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":123,"author":{"gitId":"bhnuka"},"content":"                tasks.get(index).markUndone();","lastModifiedDate":"2023-08-31"},{"lineNumber":124,"author":{"gitId":"bhnuka"},"content":"            } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":125,"author":{"gitId":"bhnuka"},"content":"                throw new DukeException(\"☹ OOPS!!! Task not found.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":126,"author":{"gitId":"bhnuka"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":127,"author":{"gitId":"bhnuka"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":128,"author":{"gitId":"bhnuka"},"content":"            e.getMessage();","lastModifiedDate":"2023-08-31"},{"lineNumber":129,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":130,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":131,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":132,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"bhnuka"},"content":"     * Finds tasks containing a specific keyword in their description.","lastModifiedDate":"2023-09-01"},{"lineNumber":134,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":135,"author":{"gitId":"bhnuka"},"content":"     * @param keyword The keyword to search for in task descriptions.","lastModifiedDate":"2023-09-01"},{"lineNumber":136,"author":{"gitId":"bhnuka"},"content":"     * @return A TaskList containing tasks with descriptions that match the keyword.","lastModifiedDate":"2023-09-01"},{"lineNumber":137,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":138,"author":{"gitId":"bhnuka"},"content":"    public TaskList findTasks(String keyword) {","lastModifiedDate":"2023-09-01"},{"lineNumber":139,"author":{"gitId":"bhnuka"},"content":"        TaskList matchingTasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":140,"author":{"gitId":"bhnuka"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":141,"author":{"gitId":"bhnuka"},"content":"            if (task.getDescription().contains(keyword)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"bhnuka"},"content":"                matchingTasks.add(task);","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"bhnuka"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":144,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":145,"author":{"gitId":"bhnuka"},"content":"        return matchingTasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":146,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":147,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":147}},{"path":"src/main/java/duke/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":" * Enums to represent the different types of tasks","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"public enum TaskType {","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"    TODO, DEADLINE, EVENT","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":8}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":" * A Todo class to represent todo tasks","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"     * Constructs todo with the given description","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"     * @param description the given description of the todo","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"     * @param isDone whether the todo is done","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"    public Todo(String description, boolean isDone) {","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"        super(description, isDone, TaskType.TODO);","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"     * Returns String representing the todo","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"     * @return String representing todo","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":28}},{"path":"src/test/java/duke/test/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.test;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.Parser;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":" * Test class for the Parser class, which parses user input in Duke.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"public class ParserTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     * Test case for gibberish input that should result in an exception.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If there is an issue with parsing.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"    public void gibberishTest() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"            assertEquals(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", Parser.parse(\"hehehe\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"            assertEquals(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"     * Test case for invalid \u0027todo\u0027 input without a description.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If there is an issue with parsing.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"    public void invalidTodo() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"            assertEquals(\"\\t ☹ OOPS!!! The description of a todo cannot be empty.\", Parser.parse(\"todo\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"            assertEquals(\"\\t ☹ OOPS!!! The description of a todo cannot be empty.\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":42}},{"path":"src/test/java/duke/test/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.test;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":" * Test class for the TaskList class, which manages a list of tasks in Duke.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"public class TaskListTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     * Test case for adding a task to the TaskList and checking the list size.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"    public void testAdd() {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"        tasks.addTask(new Todo(\"a\", true));","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"        assertEquals(1, tasks.listSize());","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"     * Test case for deleting a task from the TaskList and checking the list size.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If there is an issue with deleting the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"    public void testDelete() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"        tasks.addTask(new Todo(\"a\", true));","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"        tasks.addTask(new Todo(\"b\", true));","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"        tasks.addTask(new Todo(\"c\", true));","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"        tasks.deleteTask(1);","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"        assertEquals(2, tasks.listSize());","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":39}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"todo borrow book","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"deadline return book/by Sunday","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"bhnuka":4}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"java -classpath ..\\bin Eva \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"bhnuka":1,"-":20}}]
