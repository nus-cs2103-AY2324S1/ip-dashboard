[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"    id \u0027org.openjfx.javafxplugin\u0027 version \u00270.0.13\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"javafx {","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"    version \u003d \"17.0.7\"","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"    modules \u003d [ \u0027javafx.controls\u0027, \u0027javafx.fxml\u0027 ]","lastModifiedDate":"2023-09-13"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"bhnuka"},"content":"    mainClass.set(\"duke.gui.Launcher\")","lastModifiedDate":"2023-09-13"},{"lineNumber":55,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":64,"author":{"gitId":"bhnuka"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-09-13"},{"lineNumber":65,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"bhnuka":25,"-":40}},{"path":"data/duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"T | 0 | Update UI screenshot again | ","lastModifiedDate":"2023-09-20"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"D | 0 | Submit iP | 2023-09-22","lastModifiedDate":"2023-09-20"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"E | 0 | CS2103 Lecture | 2023-09-22 - 2023-09-22","lastModifiedDate":"2023-09-20"}],"authorContributionMap":{"bhnuka":3}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"D | 0 | Finish iP | 2023-09-19","lastModifiedDate":"2023-09-19"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"E | 0 | CS2103T Lecture | 2023-09-22 - 2023-09-23","lastModifiedDate":"2023-09-19"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"T | 0 | a | ","lastModifiedDate":"2023-09-19"}],"authorContributionMap":{"bhnuka":3}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"# User Guide for Duke","lastModifiedDate":"2023-09-19"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":3,"author":{"gitId":"-"},"content":"## Features ","lastModifiedDate":"2019-07-29"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"Duke allows you to add and manage tasks of various types, including Todos, Events, and Deadlines.","lastModifiedDate":"2023-09-19"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"Duke provides a user-friendly interface for interacting with your task list. You can list tasks, mark them as done, and even search for specific tasks.","lastModifiedDate":"2023-09-19"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":9,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"### Example of usage: ","lastModifiedDate":"2023-09-19"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"`list`","lastModifiedDate":"2023-09-19"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"Expected outcome:","lastModifiedDate":"2023-09-19"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"Duke will list all your tasks in a clear format","lastModifiedDate":"2023-09-19"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"Here are the tasks in your list:","lastModifiedDate":"2023-09-19"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"1. [T][X] Buy groceries","lastModifiedDate":"2023-09-19"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"2. [D][ ] Finish homework (by: Sep 30 2023)","lastModifiedDate":"2023-09-19"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"3. [E][ ] Team meeting (at: Oct 5 2023)","lastModifiedDate":"2023-09-19"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"`mark 1`","lastModifiedDate":"2023-09-19"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"Expected outcome:","lastModifiedDate":"2023-09-19"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"Duke will mark the first task as done.","lastModifiedDate":"2023-09-19"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"Nice! I\u0027ve marked this task as done:","lastModifiedDate":"2023-09-19"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"[T][X] Clean the house","lastModifiedDate":"2023-09-19"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"`unmark 1`","lastModifiedDate":"2023-09-19"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":38,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2023-09-19"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"Duke will mark the first task as not done.","lastModifiedDate":"2023-09-19"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"OK, I\u0027ve marked this task as not done yet:","lastModifiedDate":"2023-09-19"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"[T][] Clean the house","lastModifiedDate":"2023-09-19"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"`todo Clean the house`","lastModifiedDate":"2023-09-19"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":48,"author":{"gitId":"bhnuka"},"content":"Expected outcome:","lastModifiedDate":"2023-09-19"},{"lineNumber":49,"author":{"gitId":"bhnuka"},"content":"Duke will add a new Todo task to your list.","lastModifiedDate":"2023-09-19"},{"lineNumber":50,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":51,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":52,"author":{"gitId":"bhnuka"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2023-09-19"},{"lineNumber":53,"author":{"gitId":"bhnuka"},"content":"[T][ ] Clean the house","lastModifiedDate":"2023-09-19"},{"lineNumber":54,"author":{"gitId":"bhnuka"},"content":"Now you have 1 task(s) in the list.","lastModifiedDate":"2023-09-19"},{"lineNumber":55,"author":{"gitId":"bhnuka"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":56,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":57,"author":{"gitId":"bhnuka"},"content":"`deadline Finish iP /by 2023-09-19`","lastModifiedDate":"2023-09-19"},{"lineNumber":58,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":59,"author":{"gitId":"bhnuka"},"content":"Expected outcome:","lastModifiedDate":"2023-09-19"},{"lineNumber":60,"author":{"gitId":"bhnuka"},"content":"Duke will add a new Deadline task to your list.","lastModifiedDate":"2023-09-19"},{"lineNumber":61,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":62,"author":{"gitId":"bhnuka"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":63,"author":{"gitId":"bhnuka"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2023-09-19"},{"lineNumber":64,"author":{"gitId":"bhnuka"},"content":"[D][ ] Finish iP (by: Sep 19 2023)","lastModifiedDate":"2023-09-19"},{"lineNumber":65,"author":{"gitId":"bhnuka"},"content":"Now you have 2 task(s) in the list.","lastModifiedDate":"2023-09-19"},{"lineNumber":66,"author":{"gitId":"bhnuka"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":67,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":68,"author":{"gitId":"bhnuka"},"content":"`event CS2103T Lecture /from 2023-09-22 /to 2023-09-22`","lastModifiedDate":"2023-09-19"},{"lineNumber":69,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":70,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":71,"author":{"gitId":"bhnuka"},"content":"Duke will add a new Event task to your list.","lastModifiedDate":"2023-09-19"},{"lineNumber":72,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":73,"author":{"gitId":"bhnuka"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":74,"author":{"gitId":"bhnuka"},"content":"Got it. I\u0027ve added this task:","lastModifiedDate":"2023-09-19"},{"lineNumber":75,"author":{"gitId":"bhnuka"},"content":"[E][ ] CS2103T Lecture (from: Sep 22 2023 to: Sep 22 2023)","lastModifiedDate":"2023-09-19"},{"lineNumber":76,"author":{"gitId":"bhnuka"},"content":"Now you have 3 task(s) in the list.","lastModifiedDate":"2023-09-19"},{"lineNumber":77,"author":{"gitId":"bhnuka"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":78,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":79,"author":{"gitId":"bhnuka"},"content":"`delete 1`","lastModifiedDate":"2023-09-19"},{"lineNumber":80,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":81,"author":{"gitId":"bhnuka"},"content":"Expected outcome:","lastModifiedDate":"2023-09-19"},{"lineNumber":82,"author":{"gitId":"bhnuka"},"content":"Duke will delete the first task.","lastModifiedDate":"2023-09-19"},{"lineNumber":83,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":84,"author":{"gitId":"bhnuka"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":85,"author":{"gitId":"bhnuka"},"content":"Noted. I\u0027ve removed this task:","lastModifiedDate":"2023-09-19"},{"lineNumber":86,"author":{"gitId":"bhnuka"},"content":"[D][ ] Finish homework (by: Sep 30 2023)","lastModifiedDate":"2023-09-19"},{"lineNumber":87,"author":{"gitId":"bhnuka"},"content":"Now you have 2 task(s) in the list.","lastModifiedDate":"2023-09-19"},{"lineNumber":88,"author":{"gitId":"bhnuka"},"content":"```","lastModifiedDate":"2023-09-19"},{"lineNumber":89,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":90,"author":{"gitId":"bhnuka"},"content":"`find Lecture`","lastModifiedDate":"2023-09-19"},{"lineNumber":91,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":92,"author":{"gitId":"bhnuka"},"content":"Expected outcome:","lastModifiedDate":"2023-09-19"},{"lineNumber":93,"author":{"gitId":"bhnuka"},"content":"Returns a list of matching tasks.","lastModifiedDate":"2023-09-19"},{"lineNumber":94,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":95,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":96,"author":{"gitId":"bhnuka"},"content":"Here are the matching tasks in your list:","lastModifiedDate":"2023-09-19"},{"lineNumber":97,"author":{"gitId":"bhnuka"},"content":"1. [E][ ] CS2103T Lecture (from: Sep 22 2023 to: Sep 22 2023)","lastModifiedDate":"2023-09-19"},{"lineNumber":98,"author":{"gitId":"bhnuka"},"content":"2. [E][ ] CS2100 Lecture (from: Sep 19 2023 to: Sep 19 2023)","lastModifiedDate":"2023-09-19"},{"lineNumber":99,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"}],"authorContributionMap":{"bhnuka":76,"-":23}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.command.Command;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.gui.DialogBox;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":" * CS2103T iP Week 5","lastModifiedDate":"2023-09-13"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":" * AY23/24 Semester 1","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":" * A product named Duke, a Personal Assistant Chatbot that helps","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":" * a person to keep track of various things.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":" *","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":" * @author bhnuka, Bhanuka Bandara Ekanayake (AXXX7875J), G01","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":" * @version 5.0 CS2103T AY 23/24 Sem 1","lastModifiedDate":"2023-09-13"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":" * All the sourcecode behind the chatbot, Duke","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"public class Duke extends Application {","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"    private Scene scene;","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"    private Image user \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"    private Image duke \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"     * Constructs a Duke instance with the specified file path.","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"    public Duke() {","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"        String filePath \u003d \"./data/duke.txt\";","lastModifiedDate":"2023-09-19"},{"lineNumber":47,"author":{"gitId":"bhnuka"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"bhnuka"},"content":"        storage \u003d new Storage(filePath);","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"bhnuka"},"content":"        try {","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"bhnuka"},"content":"            tasks \u003d new TaskList(storage.load());","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"bhnuka"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"bhnuka"},"content":"            ui.showLoadingError();","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"bhnuka"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"bhnuka"},"content":"     * Runs the Duke chatbot, allowing user interaction.","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"bhnuka"},"content":"     * Displays a welcome message and processes user commands until the user exits.","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"bhnuka"},"content":"    public void run() {","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"bhnuka"},"content":"        ui.showWelcome();","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"bhnuka"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"bhnuka"},"content":"        while (!isExit) {","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"bhnuka"},"content":"            try {","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"bhnuka"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"bhnuka"},"content":"                ui.showLine(); // show the divider line (\"_______\")","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"bhnuka"},"content":"                Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"bhnuka"},"content":"                c.execute(tasks, ui, storage);","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"bhnuka"},"content":"                isExit \u003d c.isExit();","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"bhnuka"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"bhnuka"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"bhnuka"},"content":"            } finally {","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"bhnuka"},"content":"                ui.showLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"bhnuka"},"content":"            }","lastModifiedDate":"2023-08-23"},{"lineNumber":76,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":80,"author":{"gitId":"bhnuka"},"content":"     * Initializes the JavaFX application and sets up the main user interface.","lastModifiedDate":"2023-09-13"},{"lineNumber":81,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":82,"author":{"gitId":"bhnuka"},"content":"     * @param stage The primary stage for the JavaFX application.","lastModifiedDate":"2023-09-13"},{"lineNumber":83,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":84,"author":{"gitId":"bhnuka"},"content":"    @Override","lastModifiedDate":"2023-09-06"},{"lineNumber":85,"author":{"gitId":"bhnuka"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-06"},{"lineNumber":86,"author":{"gitId":"bhnuka"},"content":"        // Step 1: Setting up required components","lastModifiedDate":"2023-09-13"},{"lineNumber":87,"author":{"gitId":"bhnuka"},"content":"        scrollPane \u003d createScrollPane();","lastModifiedDate":"2023-09-13"},{"lineNumber":88,"author":{"gitId":"bhnuka"},"content":"        dialogContainer \u003d new VBox();","lastModifiedDate":"2023-09-06"},{"lineNumber":89,"author":{"gitId":"bhnuka"},"content":"        userInput \u003d new TextField();","lastModifiedDate":"2023-09-06"},{"lineNumber":90,"author":{"gitId":"bhnuka"},"content":"        sendButton \u003d createSendButton();","lastModifiedDate":"2023-09-13"},{"lineNumber":91,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":92,"author":{"gitId":"bhnuka"},"content":"        AnchorPane mainLayout \u003d createMainLayout();","lastModifiedDate":"2023-09-13"},{"lineNumber":93,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":94,"author":{"gitId":"bhnuka"},"content":"        // Step 2: Formatting the window to look as expected","lastModifiedDate":"2023-09-13"},{"lineNumber":95,"author":{"gitId":"bhnuka"},"content":"        formatStage(stage);","lastModifiedDate":"2023-09-13"},{"lineNumber":96,"author":{"gitId":"bhnuka"},"content":"        Scene scene \u003d new Scene(mainLayout, 400.0, 600.0);","lastModifiedDate":"2023-09-13"},{"lineNumber":97,"author":{"gitId":"bhnuka"},"content":"        stage.setScene(scene);","lastModifiedDate":"2023-09-06"},{"lineNumber":98,"author":{"gitId":"bhnuka"},"content":"        stage.show();","lastModifiedDate":"2023-09-06"},{"lineNumber":99,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":100,"author":{"gitId":"bhnuka"},"content":"        // Part 3: Add functionality to handle user input","lastModifiedDate":"2023-09-13"},{"lineNumber":101,"author":{"gitId":"bhnuka"},"content":"        setupUserInputHandlers();","lastModifiedDate":"2023-09-13"},{"lineNumber":102,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":103,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":104,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":105,"author":{"gitId":"bhnuka"},"content":"     * Creates and configures a ScrollPane for displaying the conversation.","lastModifiedDate":"2023-09-13"},{"lineNumber":106,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":107,"author":{"gitId":"bhnuka"},"content":"     * @return The configured ScrollPane.","lastModifiedDate":"2023-09-13"},{"lineNumber":108,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":109,"author":{"gitId":"bhnuka"},"content":"    private ScrollPane createScrollPane() {","lastModifiedDate":"2023-09-13"},{"lineNumber":110,"author":{"gitId":"bhnuka"},"content":"        ScrollPane scrollPane \u003d new ScrollPane();","lastModifiedDate":"2023-09-13"},{"lineNumber":111,"author":{"gitId":"bhnuka"},"content":"        scrollPane.setContent(dialogContainer);","lastModifiedDate":"2023-09-13"},{"lineNumber":112,"author":{"gitId":"bhnuka"},"content":"        scrollPane.setPrefSize(385, 535);","lastModifiedDate":"2023-09-06"},{"lineNumber":113,"author":{"gitId":"bhnuka"},"content":"        scrollPane.setHbarPolicy(ScrollPane.ScrollBarPolicy.NEVER);","lastModifiedDate":"2023-09-06"},{"lineNumber":114,"author":{"gitId":"bhnuka"},"content":"        scrollPane.setVbarPolicy(ScrollPane.ScrollBarPolicy.ALWAYS);","lastModifiedDate":"2023-09-06"},{"lineNumber":115,"author":{"gitId":"bhnuka"},"content":"        scrollPane.setVvalue(1.0);","lastModifiedDate":"2023-09-06"},{"lineNumber":116,"author":{"gitId":"bhnuka"},"content":"        scrollPane.setFitToWidth(true);","lastModifiedDate":"2023-09-06"},{"lineNumber":117,"author":{"gitId":"bhnuka"},"content":"        return scrollPane;","lastModifiedDate":"2023-09-13"},{"lineNumber":118,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":119,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":120,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":121,"author":{"gitId":"bhnuka"},"content":"     * Creates a \"Send\" button for sending user input.","lastModifiedDate":"2023-09-13"},{"lineNumber":122,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":123,"author":{"gitId":"bhnuka"},"content":"     * @return The \"Send\" button.","lastModifiedDate":"2023-09-13"},{"lineNumber":124,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":125,"author":{"gitId":"bhnuka"},"content":"    private Button createSendButton() {","lastModifiedDate":"2023-09-13"},{"lineNumber":126,"author":{"gitId":"bhnuka"},"content":"        Button sendButton \u003d new Button(\"Send\");","lastModifiedDate":"2023-09-13"},{"lineNumber":127,"author":{"gitId":"bhnuka"},"content":"        sendButton.setPrefWidth(55.0);","lastModifiedDate":"2023-09-06"},{"lineNumber":128,"author":{"gitId":"bhnuka"},"content":"        return sendButton;","lastModifiedDate":"2023-09-13"},{"lineNumber":129,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":130,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":131,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":132,"author":{"gitId":"bhnuka"},"content":"     * Creates the main layout of the user interface.","lastModifiedDate":"2023-09-13"},{"lineNumber":133,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":134,"author":{"gitId":"bhnuka"},"content":"     * @return The AnchorPane containing the main layout.","lastModifiedDate":"2023-09-13"},{"lineNumber":135,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":136,"author":{"gitId":"bhnuka"},"content":"    private AnchorPane createMainLayout() {","lastModifiedDate":"2023-09-13"},{"lineNumber":137,"author":{"gitId":"bhnuka"},"content":"        AnchorPane mainLayout \u003d new AnchorPane();","lastModifiedDate":"2023-09-13"},{"lineNumber":138,"author":{"gitId":"bhnuka"},"content":"        mainLayout.getChildren().addAll(scrollPane, userInput, sendButton);","lastModifiedDate":"2023-09-13"},{"lineNumber":139,"author":{"gitId":"bhnuka"},"content":"        mainLayout.setPrefSize(400.0, 600.0);","lastModifiedDate":"2023-09-13"},{"lineNumber":140,"author":{"gitId":"bhnuka"},"content":"        AnchorPane.setTopAnchor(scrollPane, 1.0);","lastModifiedDate":"2023-09-06"},{"lineNumber":141,"author":{"gitId":"bhnuka"},"content":"        AnchorPane.setBottomAnchor(sendButton, 1.0);","lastModifiedDate":"2023-09-06"},{"lineNumber":142,"author":{"gitId":"bhnuka"},"content":"        AnchorPane.setRightAnchor(sendButton, 1.0);","lastModifiedDate":"2023-09-06"},{"lineNumber":143,"author":{"gitId":"bhnuka"},"content":"        AnchorPane.setLeftAnchor(userInput, 1.0);","lastModifiedDate":"2023-09-06"},{"lineNumber":144,"author":{"gitId":"bhnuka"},"content":"        AnchorPane.setBottomAnchor(userInput, 1.0);","lastModifiedDate":"2023-09-06"},{"lineNumber":145,"author":{"gitId":"bhnuka"},"content":"        return mainLayout;","lastModifiedDate":"2023-09-13"},{"lineNumber":146,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":147,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":148,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":149,"author":{"gitId":"bhnuka"},"content":"     * Formats the primary stage with desired properties.","lastModifiedDate":"2023-09-13"},{"lineNumber":150,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":151,"author":{"gitId":"bhnuka"},"content":"     * @param stage The primary stage for the JavaFX application.","lastModifiedDate":"2023-09-13"},{"lineNumber":152,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":153,"author":{"gitId":"bhnuka"},"content":"    private void formatStage(Stage stage) {","lastModifiedDate":"2023-09-13"},{"lineNumber":154,"author":{"gitId":"bhnuka"},"content":"        stage.setTitle(\"Duke\");","lastModifiedDate":"2023-09-13"},{"lineNumber":155,"author":{"gitId":"bhnuka"},"content":"        stage.setResizable(false);","lastModifiedDate":"2023-09-13"},{"lineNumber":156,"author":{"gitId":"bhnuka"},"content":"        stage.setMinHeight(600.0);","lastModifiedDate":"2023-09-13"},{"lineNumber":157,"author":{"gitId":"bhnuka"},"content":"        stage.setMinWidth(400.0);","lastModifiedDate":"2023-09-13"},{"lineNumber":158,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":159,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":160,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":161,"author":{"gitId":"bhnuka"},"content":"     * Sets up event handlers for user input.","lastModifiedDate":"2023-09-13"},{"lineNumber":162,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":163,"author":{"gitId":"bhnuka"},"content":"    private void setupUserInputHandlers() {","lastModifiedDate":"2023-09-13"},{"lineNumber":164,"author":{"gitId":"bhnuka"},"content":"        sendButton.setOnMouseClicked((event) -\u003e handleUserInput());","lastModifiedDate":"2023-09-13"},{"lineNumber":165,"author":{"gitId":"bhnuka"},"content":"        userInput.setOnAction((event) -\u003e handleUserInput());","lastModifiedDate":"2023-09-13"},{"lineNumber":166,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":167,"author":{"gitId":"bhnuka"},"content":"        // Scroll down to the end every time dialogContainer\u0027s height changes.","lastModifiedDate":"2023-09-06"},{"lineNumber":168,"author":{"gitId":"bhnuka"},"content":"        dialogContainer.heightProperty().addListener((observable) -\u003e scrollPane.setVvalue(1.0));","lastModifiedDate":"2023-09-06"},{"lineNumber":169,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":170,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":171,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":172,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":173,"author":{"gitId":"bhnuka"},"content":"     * The start method for the Duke chatbot.","lastModifiedDate":"2023-09-19"},{"lineNumber":174,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":175,"author":{"gitId":"bhnuka"},"content":"     * @param args","lastModifiedDate":"2023-09-19"},{"lineNumber":176,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":177,"author":{"gitId":"bhnuka"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-31"},{"lineNumber":178,"author":{"gitId":"bhnuka"},"content":"        launch(args);","lastModifiedDate":"2023-09-19"},{"lineNumber":179,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":180,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":181,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":182,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":183,"author":{"gitId":"bhnuka"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-06"},{"lineNumber":184,"author":{"gitId":"bhnuka"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-06"},{"lineNumber":185,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":186,"author":{"gitId":"bhnuka"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-06"},{"lineNumber":187,"author":{"gitId":"bhnuka"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-06"},{"lineNumber":188,"author":{"gitId":"bhnuka"},"content":"        String response \u003d getResponse(input);","lastModifiedDate":"2023-09-06"},{"lineNumber":189,"author":{"gitId":"bhnuka"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-06"},{"lineNumber":190,"author":{"gitId":"bhnuka"},"content":"                DialogBox.getUserDialog(input, user),","lastModifiedDate":"2023-09-06"},{"lineNumber":191,"author":{"gitId":"bhnuka"},"content":"                DialogBox.getDukeDialog(response, duke)","lastModifiedDate":"2023-09-06"},{"lineNumber":192,"author":{"gitId":"bhnuka"},"content":"        );","lastModifiedDate":"2023-09-06"},{"lineNumber":193,"author":{"gitId":"bhnuka"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-06"},{"lineNumber":194,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":195,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":196,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":197,"author":{"gitId":"bhnuka"},"content":"     * Generates a response to user input.","lastModifiedDate":"2023-09-19"},{"lineNumber":198,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-19"},{"lineNumber":199,"author":{"gitId":"bhnuka"},"content":"     * @param input The user input to process.","lastModifiedDate":"2023-09-19"},{"lineNumber":200,"author":{"gitId":"bhnuka"},"content":"     * @return A response to the user\u0027s input.","lastModifiedDate":"2023-09-19"},{"lineNumber":201,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":202,"author":{"gitId":"bhnuka"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-09-06"},{"lineNumber":203,"author":{"gitId":"bhnuka"},"content":"        try {","lastModifiedDate":"2023-09-06"},{"lineNumber":204,"author":{"gitId":"bhnuka"},"content":"            String fullCommand \u003d input;","lastModifiedDate":"2023-09-06"},{"lineNumber":205,"author":{"gitId":"bhnuka"},"content":"            ui.showLine(); // Show the divider line (\"_______\")","lastModifiedDate":"2023-09-06"},{"lineNumber":206,"author":{"gitId":"bhnuka"},"content":"            Command c \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-09-06"},{"lineNumber":207,"author":{"gitId":"bhnuka"},"content":"            String output \u003d c.execute(tasks, ui, storage);","lastModifiedDate":"2023-09-06"},{"lineNumber":208,"author":{"gitId":"bhnuka"},"content":"            ui.showLine(); // Show the divider line again","lastModifiedDate":"2023-09-06"},{"lineNumber":209,"author":{"gitId":"bhnuka"},"content":"            return output;","lastModifiedDate":"2023-09-06"},{"lineNumber":210,"author":{"gitId":"bhnuka"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-09-06"},{"lineNumber":211,"author":{"gitId":"bhnuka"},"content":"            return ui.showError(e.getMessage());","lastModifiedDate":"2023-09-06"},{"lineNumber":212,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":213,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":214,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"bhnuka":214}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":" * Represents exceptions specific to Duke, the Personal Assistant Chatbot.","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"     * Constructs a DukeException with the specified error message.","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"     * @param message The error message associated with this exception.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"        super(message);","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":14}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.command.*;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import duke.task.Event;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":" * Parses user input to create the appropriate command for Duke.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"public class Parser {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"     * Parses the user input and returns the corresponding Duke command.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"     * @param input The user input to be parsed.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     * @return A Command object representing the user\u0027s request.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If the input is invalid or contains errors.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"    public static Command parse(String input) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"        String[] parts \u003d input.split(\" \", 2);","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"        String commandType \u003d parts[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"        assert isValidCommandType(commandType) : \"Invalid command type\";","lastModifiedDate":"2023-09-13"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"        switch (commandType) {","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"        case \"bye\":","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"            return new ExitCommand();","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"        case \"list\":","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"            return new ListCommand();","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"        case \"mark\":","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"        case \"unmark\":","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"            return parseMarkOrUnmarkCommand(commandType, input);","lastModifiedDate":"2023-09-13"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"        case \"todo\":","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"            return parseTodoCommand(input);","lastModifiedDate":"2023-09-13"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"        case \"deadline\":","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"            return parseDeadlineCommand(input);","lastModifiedDate":"2023-09-13"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"        case \"event\":","lastModifiedDate":"2023-09-13"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"            return parseEventCommand(input);","lastModifiedDate":"2023-09-13"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"        case \"delete\":","lastModifiedDate":"2023-09-13"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"            return parseDeleteCommand(input);","lastModifiedDate":"2023-09-13"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"        case \"find\":","lastModifiedDate":"2023-09-13"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"            return parseFindCommand(input);","lastModifiedDate":"2023-09-13"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"        default:","lastModifiedDate":"2023-09-13"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"            throw new DukeException(\"I\u0027m sorry, but I don\u0027t know what that means.\");","lastModifiedDate":"2023-09-19"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":47,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":48,"author":{"gitId":"bhnuka"},"content":"     * Parses a mark or unmark command and returns the corresponding Duke command.","lastModifiedDate":"2023-09-13"},{"lineNumber":49,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":50,"author":{"gitId":"bhnuka"},"content":"     * @param commandType The type of command (\u0027mark\u0027 or \u0027unmark\u0027).","lastModifiedDate":"2023-09-13"},{"lineNumber":51,"author":{"gitId":"bhnuka"},"content":"     * @param input The user input to be parsed.","lastModifiedDate":"2023-09-13"},{"lineNumber":52,"author":{"gitId":"bhnuka"},"content":"     * @return A Command object representing the mark/unmark command.","lastModifiedDate":"2023-09-13"},{"lineNumber":53,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If the input is invalid or contains errors.","lastModifiedDate":"2023-09-13"},{"lineNumber":54,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":55,"author":{"gitId":"bhnuka"},"content":"    private static Command parseMarkOrUnmarkCommand(String commandType, String input) throws DukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":56,"author":{"gitId":"bhnuka"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":57,"author":{"gitId":"bhnuka"},"content":"            int taskIndex \u003d Integer.parseInt(input.split(\" \")[1]) - 1;","lastModifiedDate":"2023-09-13"},{"lineNumber":58,"author":{"gitId":"bhnuka"},"content":"            return commandType.equals(\"mark\") ? new MarkCommand(taskIndex) : new UnmarkCommand(taskIndex);","lastModifiedDate":"2023-09-13"},{"lineNumber":59,"author":{"gitId":"bhnuka"},"content":"        } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":60,"author":{"gitId":"bhnuka"},"content":"            throw new DukeException(\"Please enter a valid task index to mark/unmark.\");","lastModifiedDate":"2023-09-19"},{"lineNumber":61,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":62,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":63,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":64,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":65,"author":{"gitId":"bhnuka"},"content":"     * Parses a todo command and returns the corresponding Duke command.","lastModifiedDate":"2023-09-13"},{"lineNumber":66,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":67,"author":{"gitId":"bhnuka"},"content":"     * @param input The user input to be parsed.","lastModifiedDate":"2023-09-13"},{"lineNumber":68,"author":{"gitId":"bhnuka"},"content":"     * @return A Command object representing the todo command.","lastModifiedDate":"2023-09-13"},{"lineNumber":69,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If the input is invalid or contains errors.","lastModifiedDate":"2023-09-13"},{"lineNumber":70,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":71,"author":{"gitId":"bhnuka"},"content":"    private static Command parseTodoCommand(String input) throws DukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":72,"author":{"gitId":"bhnuka"},"content":"        String description \u003d input.substring(5).trim();","lastModifiedDate":"2023-09-13"},{"lineNumber":73,"author":{"gitId":"bhnuka"},"content":"        if (description.isEmpty()) {","lastModifiedDate":"2023-09-13"},{"lineNumber":74,"author":{"gitId":"bhnuka"},"content":"            throw new DukeException(\"The description of a todo cannot be empty.\");","lastModifiedDate":"2023-09-19"},{"lineNumber":75,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":76,"author":{"gitId":"bhnuka"},"content":"        return new AddCommand(new Todo(description, false));","lastModifiedDate":"2023-09-13"},{"lineNumber":77,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":78,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":79,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":80,"author":{"gitId":"bhnuka"},"content":"     * Parses a deadline command and returns the corresponding Duke command.","lastModifiedDate":"2023-09-13"},{"lineNumber":81,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":82,"author":{"gitId":"bhnuka"},"content":"     * @param input The user input to be parsed.","lastModifiedDate":"2023-09-13"},{"lineNumber":83,"author":{"gitId":"bhnuka"},"content":"     * @return A Command object representing the deadline command.","lastModifiedDate":"2023-09-13"},{"lineNumber":84,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If the input is invalid or contains errors.","lastModifiedDate":"2023-09-13"},{"lineNumber":85,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":86,"author":{"gitId":"bhnuka"},"content":"    private static Command parseDeadlineCommand(String input) throws DukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":87,"author":{"gitId":"bhnuka"},"content":"        int byIndex \u003d input.indexOf(\"/by\");","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"bhnuka"},"content":"        if (byIndex \u003d\u003d -1) {","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"bhnuka"},"content":"            throw new DukeException(\"The deadline description must include a /by date.\");","lastModifiedDate":"2023-09-19"},{"lineNumber":90,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"bhnuka"},"content":"        String description \u003d input.substring(9, byIndex).trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"bhnuka"},"content":"        if (description.isEmpty()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"bhnuka"},"content":"            throw new DukeException(\"The deadline description cannot be empty.\");","lastModifiedDate":"2023-09-19"},{"lineNumber":94,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"bhnuka"},"content":"        String by \u003d input.substring(byIndex + 3).trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"bhnuka"},"content":"        if (!isValidDateFormat(by)) {","lastModifiedDate":"2023-09-13"},{"lineNumber":97,"author":{"gitId":"bhnuka"},"content":"            throw new DukeException(\"The deadline date must be in the format yyyy-MM-dd.\");","lastModifiedDate":"2023-09-19"},{"lineNumber":98,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":99,"author":{"gitId":"bhnuka"},"content":"        return new AddCommand(new Deadline(description, false, by));","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":101,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":102,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":103,"author":{"gitId":"bhnuka"},"content":"     * Parses an event command and returns the corresponding Duke command.","lastModifiedDate":"2023-09-13"},{"lineNumber":104,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":105,"author":{"gitId":"bhnuka"},"content":"     * @param input The user input to be parsed.","lastModifiedDate":"2023-09-13"},{"lineNumber":106,"author":{"gitId":"bhnuka"},"content":"     * @return A Command object representing the event command.","lastModifiedDate":"2023-09-13"},{"lineNumber":107,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If the input is invalid or contains errors.","lastModifiedDate":"2023-09-13"},{"lineNumber":108,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":109,"author":{"gitId":"bhnuka"},"content":"    private static Command parseEventCommand(String input) throws DukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":110,"author":{"gitId":"bhnuka"},"content":"        int fromIndex \u003d input.indexOf(\"/from\");","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"bhnuka"},"content":"        int toIndex \u003d input.indexOf(\"/to\");","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"bhnuka"},"content":"        if (fromIndex \u003d\u003d -1 || toIndex \u003d\u003d -1) {","lastModifiedDate":"2023-09-13"},{"lineNumber":113,"author":{"gitId":"bhnuka"},"content":"            throw new DukeException(\"The event description must include both /from and /to dates.\");","lastModifiedDate":"2023-09-19"},{"lineNumber":114,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":115,"author":{"gitId":"bhnuka"},"content":"        String description \u003d input.substring(6, fromIndex).trim();","lastModifiedDate":"2023-09-13"},{"lineNumber":116,"author":{"gitId":"bhnuka"},"content":"        if (description.isEmpty()) {","lastModifiedDate":"2023-09-13"},{"lineNumber":117,"author":{"gitId":"bhnuka"},"content":"            throw new DukeException(\"The event description cannot be empty.\");","lastModifiedDate":"2023-09-19"},{"lineNumber":118,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":119,"author":{"gitId":"bhnuka"},"content":"        String from \u003d input.substring(fromIndex + 5, toIndex).trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":120,"author":{"gitId":"bhnuka"},"content":"        String to \u003d input.substring(toIndex + 3).trim();","lastModifiedDate":"2023-08-31"},{"lineNumber":121,"author":{"gitId":"bhnuka"},"content":"        if (!isValidDateFormat(from) || !isValidDateFormat(to)) {","lastModifiedDate":"2023-09-13"},{"lineNumber":122,"author":{"gitId":"bhnuka"},"content":"            throw new DukeException(\"The event from and to date must be in the format yyyy-MM-dd.\");","lastModifiedDate":"2023-09-19"},{"lineNumber":123,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":124,"author":{"gitId":"bhnuka"},"content":"        return new AddCommand(new Event(description, false, from, to));","lastModifiedDate":"2023-09-13"},{"lineNumber":125,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":126,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":127,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":128,"author":{"gitId":"bhnuka"},"content":"     * Parses a delete command and returns the corresponding Duke command.","lastModifiedDate":"2023-09-13"},{"lineNumber":129,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":130,"author":{"gitId":"bhnuka"},"content":"     * @param input The user input to be parsed.","lastModifiedDate":"2023-09-13"},{"lineNumber":131,"author":{"gitId":"bhnuka"},"content":"     * @return A Command object representing the delete command.","lastModifiedDate":"2023-09-13"},{"lineNumber":132,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If the input is invalid or contains errors.","lastModifiedDate":"2023-09-13"},{"lineNumber":133,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":134,"author":{"gitId":"bhnuka"},"content":"    private static Command parseDeleteCommand(String input) throws DukeException {","lastModifiedDate":"2023-09-13"},{"lineNumber":135,"author":{"gitId":"bhnuka"},"content":"        try {","lastModifiedDate":"2023-09-13"},{"lineNumber":136,"author":{"gitId":"bhnuka"},"content":"            int taskIndex \u003d Integer.parseInt(input.split(\" \")[1]) - 1;","lastModifiedDate":"2023-09-13"},{"lineNumber":137,"author":{"gitId":"bhnuka"},"content":"            return new DeleteCommand(taskIndex);","lastModifiedDate":"2023-08-31"},{"lineNumber":138,"author":{"gitId":"bhnuka"},"content":"        } catch (NumberFormatException | ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-13"},{"lineNumber":139,"author":{"gitId":"bhnuka"},"content":"            throw new DukeException(\"Please enter a valid task index to delete.\");","lastModifiedDate":"2023-09-19"},{"lineNumber":140,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":141,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":142,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":143,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":144,"author":{"gitId":"bhnuka"},"content":"     * Parses a find command and returns the corresponding Duke command.","lastModifiedDate":"2023-09-13"},{"lineNumber":145,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":146,"author":{"gitId":"bhnuka"},"content":"     * @param input The user input to be parsed.","lastModifiedDate":"2023-09-13"},{"lineNumber":147,"author":{"gitId":"bhnuka"},"content":"     * @return A Command object representing the find command.","lastModifiedDate":"2023-09-13"},{"lineNumber":148,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":149,"author":{"gitId":"bhnuka"},"content":"    private static Command parseFindCommand(String input) {","lastModifiedDate":"2023-09-13"},{"lineNumber":150,"author":{"gitId":"bhnuka"},"content":"        String keyword \u003d input.substring(5).trim();","lastModifiedDate":"2023-09-01"},{"lineNumber":151,"author":{"gitId":"bhnuka"},"content":"        return new FindCommand(keyword);","lastModifiedDate":"2023-09-01"},{"lineNumber":152,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":153,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":154,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":155,"author":{"gitId":"bhnuka"},"content":"     * Checks if the given date string has the valid format \"yyyy-MM-dd\".","lastModifiedDate":"2023-09-13"},{"lineNumber":156,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":157,"author":{"gitId":"bhnuka"},"content":"     * @param date The date string to be validated.","lastModifiedDate":"2023-09-13"},{"lineNumber":158,"author":{"gitId":"bhnuka"},"content":"     * @return True if the date string is in the valid format, false otherwise.","lastModifiedDate":"2023-09-13"},{"lineNumber":159,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":160,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":161,"author":{"gitId":"bhnuka"},"content":"    private static boolean isValidDateFormat(String date) {","lastModifiedDate":"2023-09-13"},{"lineNumber":162,"author":{"gitId":"bhnuka"},"content":"        String dateFormatPattern \u003d \"\\\\d{4}-\\\\d{2}-\\\\d{2}\";","lastModifiedDate":"2023-09-13"},{"lineNumber":163,"author":{"gitId":"bhnuka"},"content":"        return date.matches(dateFormatPattern);","lastModifiedDate":"2023-09-13"},{"lineNumber":164,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":165,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":166,"author":{"gitId":"bhnuka"},"content":"    private static boolean isValidCommandType(String commandType) {","lastModifiedDate":"2023-09-13"},{"lineNumber":167,"author":{"gitId":"bhnuka"},"content":"        // Define a list of valid command types","lastModifiedDate":"2023-09-13"},{"lineNumber":168,"author":{"gitId":"bhnuka"},"content":"        String[] validCommandTypes \u003d {\"bye\", \"list\", \"mark\", \"unmark\", \"todo\", \"deadline\", \"event\", \"delete\", \"find\"};","lastModifiedDate":"2023-09-13"},{"lineNumber":169,"author":{"gitId":"bhnuka"},"content":"        for (String validType : validCommandTypes) {","lastModifiedDate":"2023-09-13"},{"lineNumber":170,"author":{"gitId":"bhnuka"},"content":"            if (validType.equals(commandType)) {","lastModifiedDate":"2023-09-13"},{"lineNumber":171,"author":{"gitId":"bhnuka"},"content":"                return true;","lastModifiedDate":"2023-09-13"},{"lineNumber":172,"author":{"gitId":"bhnuka"},"content":"            }","lastModifiedDate":"2023-09-13"},{"lineNumber":173,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":174,"author":{"gitId":"bhnuka"},"content":"        return false;","lastModifiedDate":"2023-09-13"},{"lineNumber":175,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":176,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":176}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.task.Event;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"import java.io.File;","lastModifiedDate":"2023-09-19"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":" * Handles the loading and saving of tasks from/to a specified file.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"public class Storage {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"    private String filePath;","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"    TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"     * Constructs a Storage object with the specified file path.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"     * @param filePath The file path where task data is stored.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"     * Loads tasks from the file specified in the constructor.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"     * @return A TaskList containing the loaded tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If there are errors during loading.","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"    public TaskList load() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"        fileCheck(); // Check if the file exists","lastModifiedDate":"2023-09-19"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"            FileReader fileReader \u003d new FileReader(filePath); // Use the specified file path","lastModifiedDate":"2023-09-19"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"            Scanner scanner \u003d new Scanner(fileReader);","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"            while (scanner.hasNext()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"                String line \u003d scanner.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"bhnuka"},"content":"                String[] parts \u003d line.split(\" \\\\| \");","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"bhnuka"},"content":"                String taskType \u003d parts[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"bhnuka"},"content":"                boolean isDone \u003d parts[1].equals(\"1\");","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"bhnuka"},"content":"                String description \u003d parts[2];","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"bhnuka"},"content":"                switch (taskType) {","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"bhnuka"},"content":"                case \"T\":","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"bhnuka"},"content":"                    tasks.add(new Todo(description, isDone));","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"bhnuka"},"content":"                    break;","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"bhnuka"},"content":"                case \"D\":","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"bhnuka"},"content":"                    String by \u003d parts[3];","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"bhnuka"},"content":"                    tasks.add(new Deadline(description, isDone, by));","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"bhnuka"},"content":"                    break;","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"bhnuka"},"content":"                case \"E\":","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"bhnuka"},"content":"                    String[] parts2 \u003d parts[3].split(\" - \");","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"bhnuka"},"content":"                    String from \u003d parts2[0];","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"bhnuka"},"content":"                    String to \u003d parts2[1];","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"bhnuka"},"content":"                    tasks.add(new Event(description, isDone, from, to));","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"bhnuka"},"content":"                    break;","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"bhnuka"},"content":"                default:","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"bhnuka"},"content":"                    throw new DukeException(\"Couldn\u0027t load file.\");","lastModifiedDate":"2023-09-13"},{"lineNumber":68,"author":{"gitId":"bhnuka"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"bhnuka"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"bhnuka"},"content":"            fileReader.close();","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"bhnuka"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"bhnuka"},"content":"            throw new DukeException(\"File not found: \" + e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"bhnuka"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"bhnuka"},"content":"            throw new DukeException(\"Error reading file: \" + e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"bhnuka"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"bhnuka"},"content":"            throw new DukeException(\"Error loading tasks: \" + e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"bhnuka"},"content":"        return tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"bhnuka"},"content":"     * Saves the tasks to the file specified in the constructor.","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"bhnuka"},"content":"     * @param tasks The TaskList containing tasks to be saved.","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If there are errors during saving.","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"bhnuka"},"content":"    public void saveTasks(TaskList tasks) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"bhnuka"},"content":"        fileCheck(); // Check if the file exists","lastModifiedDate":"2023-09-19"},{"lineNumber":89,"author":{"gitId":"bhnuka"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"bhnuka"},"content":"            FileWriter fileWriter \u003d new FileWriter(filePath);","lastModifiedDate":"2023-09-19"},{"lineNumber":91,"author":{"gitId":"bhnuka"},"content":"            for (int i \u003d 0 ; i \u003c tasks.listSize() ; i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"bhnuka"},"content":"                String taskType \u003d \"\";","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"bhnuka"},"content":"                String dateInfo \u003d \"\";","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"bhnuka"},"content":"                if (tasks.getTask(i) instanceof Todo) {","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"bhnuka"},"content":"                    taskType \u003d \"T\";","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"bhnuka"},"content":"                } else if (tasks.getTask(i) instanceof Deadline) {","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"bhnuka"},"content":"                    taskType \u003d \"D\";","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"bhnuka"},"content":"                    dateInfo \u003d ((Deadline) tasks.getTask(i)).getBy();","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"bhnuka"},"content":"                } else if (tasks.getTask(i) instanceof Event) {","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"bhnuka"},"content":"                    taskType \u003d \"E\";","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"bhnuka"},"content":"                    dateInfo \u003d ((Event) tasks.getTask(i)).getFrom() +","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"bhnuka"},"content":"                    \" - \" + ((Event) tasks.getTask(i)).getTo();","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"bhnuka"},"content":"                } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":105,"author":{"gitId":"bhnuka"},"content":"                    throw new DukeException(\"Invalid tasks in list.\");","lastModifiedDate":"2023-08-31"},{"lineNumber":106,"author":{"gitId":"bhnuka"},"content":"                }","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"bhnuka"},"content":"                fileWriter.write(taskType + \" | \" +","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"bhnuka"},"content":"                (tasks.getTask(i).getDone() ? \"1\" : \"0\") + \" | \" +","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"bhnuka"},"content":"                tasks.getTask(i).getDescription() + \" | \" + dateInfo + \"\\n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"bhnuka"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"bhnuka"},"content":"            fileWriter.close();","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"bhnuka"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":114,"author":{"gitId":"bhnuka"},"content":"            throw new DukeException(\"Error saving tasks: \" + e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":115,"author":{"gitId":"bhnuka"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":116,"author":{"gitId":"bhnuka"},"content":"            throw new DukeException(\"Invalid tasks in list: \" + e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":117,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":118,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":119,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":120,"author":{"gitId":"bhnuka"},"content":"    public void fileCheck() throws DukeException {","lastModifiedDate":"2023-09-19"},{"lineNumber":121,"author":{"gitId":"bhnuka"},"content":"        File file \u003d new File(filePath);","lastModifiedDate":"2023-09-19"},{"lineNumber":122,"author":{"gitId":"bhnuka"},"content":"        if (!file.exists()) {","lastModifiedDate":"2023-09-19"},{"lineNumber":123,"author":{"gitId":"bhnuka"},"content":"            // File does not exist, create the necessary directories and files.","lastModifiedDate":"2023-09-19"},{"lineNumber":124,"author":{"gitId":"bhnuka"},"content":"            file.getParentFile().mkdirs();","lastModifiedDate":"2023-09-19"},{"lineNumber":125,"author":{"gitId":"bhnuka"},"content":"            try {","lastModifiedDate":"2023-09-19"},{"lineNumber":126,"author":{"gitId":"bhnuka"},"content":"                file.createNewFile();","lastModifiedDate":"2023-09-19"},{"lineNumber":127,"author":{"gitId":"bhnuka"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-09-19"},{"lineNumber":128,"author":{"gitId":"bhnuka"},"content":"                throw new DukeException(\"Error creating the file: \" + e.getMessage());","lastModifiedDate":"2023-09-19"},{"lineNumber":129,"author":{"gitId":"bhnuka"},"content":"            }","lastModifiedDate":"2023-09-19"},{"lineNumber":130,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-09-19"},{"lineNumber":131,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-19"},{"lineNumber":132,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":132}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":" * Represents the user interface for Duke, handling input and output.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"public class Ui {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"    private Scanner scanner;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"     * Constructs a Ui object and initializes the scanner for user input.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"    public Ui() {","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"        scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"     * Displays a welcome message when Duke starts and returns it as a String.","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"     * @return The welcome message.","lastModifiedDate":"2023-09-13"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"    public String showWelcome() {","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"        String logo \u003d \" ____        _        \\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"                + \"|  _ \\\\ _   _| | _____ \\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"                + \"| | | | | | | |/ / _ \\\\\\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"                + \"| |_| | |_| |   \u003c  __/\\n\"","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"                + \"|____/ \\\\__,_|_|\\\\_\\\\___|\\n\";","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"        String welcomeMessage \u003d \"Hello from\\n\" + logo + \"\\n\"","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"                + \"____________________________________________________________\\n\"","lastModifiedDate":"2023-09-19"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"                + \" Hello! I\u0027m Duke.\\n\"","lastModifiedDate":"2023-09-19"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"                + \" What can I do for you?\\n\"","lastModifiedDate":"2023-09-19"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"                + \"____________________________________________________________\";","lastModifiedDate":"2023-09-19"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"        return welcomeMessage;","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"     * Displays an exit message when Duke is exited and returns it as a String.","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"     * @return The exit message.","lastModifiedDate":"2023-09-13"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"    public String showExit() {","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"        return \"Bye. Hope to see you again soon! Please close this window.\";","lastModifiedDate":"2023-09-19"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"bhnuka"},"content":"     * Displays an error message when loading tasks from storage fails and returns it as a String.","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":51,"author":{"gitId":"bhnuka"},"content":"     * @return The loading error message.","lastModifiedDate":"2023-09-13"},{"lineNumber":52,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"bhnuka"},"content":"    public String showLoadingError() {","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"bhnuka"},"content":"        return \"No saved tasks found.\";","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"bhnuka"},"content":"     * Displays an error message with the provided error message and returns it as a String.","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"bhnuka"},"content":"     * @param errorMessage The error message to display.","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"bhnuka"},"content":"     * @return The error message.","lastModifiedDate":"2023-09-13"},{"lineNumber":62,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"bhnuka"},"content":"    public String showError(String errorMessage) {","lastModifiedDate":"2023-09-06"},{"lineNumber":64,"author":{"gitId":"bhnuka"},"content":"        return errorMessage;","lastModifiedDate":"2023-09-06"},{"lineNumber":65,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"bhnuka"},"content":"     * Returns a horizontal line separator as a String.","lastModifiedDate":"2023-09-06"},{"lineNumber":69,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":70,"author":{"gitId":"bhnuka"},"content":"     * @return The horizontal line separator.","lastModifiedDate":"2023-09-13"},{"lineNumber":71,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"bhnuka"},"content":"    public String showLine() {","lastModifiedDate":"2023-09-06"},{"lineNumber":73,"author":{"gitId":"bhnuka"},"content":"        return \"____________________________________________________________\";","lastModifiedDate":"2023-09-19"},{"lineNumber":74,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"bhnuka"},"content":"     * Returns a message when a task is added as a String.","lastModifiedDate":"2023-09-06"},{"lineNumber":78,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"bhnuka"},"content":"     * @param task The task that was added.","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"bhnuka"},"content":"     * @param size The number of tasks in the list after adding.","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"bhnuka"},"content":"     * @return The message for adding a task.","lastModifiedDate":"2023-09-13"},{"lineNumber":82,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"bhnuka"},"content":"    public String showAdded(Task task, int size) {","lastModifiedDate":"2023-09-06"},{"lineNumber":84,"author":{"gitId":"bhnuka"},"content":"        return \"Got it. I\u0027ve added this task:\\n\"","lastModifiedDate":"2023-09-19"},{"lineNumber":85,"author":{"gitId":"bhnuka"},"content":"                + task + \"\\n\"","lastModifiedDate":"2023-09-19"},{"lineNumber":86,"author":{"gitId":"bhnuka"},"content":"                + \"Now you have \" + size + \" task(s) in the list.\";","lastModifiedDate":"2023-09-19"},{"lineNumber":87,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"bhnuka"},"content":"     * Returns a message when a task is deleted as a String.","lastModifiedDate":"2023-09-06"},{"lineNumber":91,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"bhnuka"},"content":"     * @param task The task that was deleted.","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"bhnuka"},"content":"     * @param size The number of tasks in the list after deletion.","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"bhnuka"},"content":"     * @return The message for deleting a task.","lastModifiedDate":"2023-09-13"},{"lineNumber":95,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"bhnuka"},"content":"    public String showDeleted(Task task, int size) {","lastModifiedDate":"2023-09-06"},{"lineNumber":97,"author":{"gitId":"bhnuka"},"content":"        return \"Noted. I\u0027ve removed this task:\\n\"","lastModifiedDate":"2023-09-19"},{"lineNumber":98,"author":{"gitId":"bhnuka"},"content":"                + \"   \" + task + \"\\n\"","lastModifiedDate":"2023-09-19"},{"lineNumber":99,"author":{"gitId":"bhnuka"},"content":"                + \" Now you have \" + size + \" tasks in the list.\";","lastModifiedDate":"2023-09-19"},{"lineNumber":100,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"bhnuka"},"content":"     * Returns a message when a task is marked as done as a String.","lastModifiedDate":"2023-09-06"},{"lineNumber":104,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"bhnuka"},"content":"     * @param task The task that was marked as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"bhnuka"},"content":"     * @return The message for marking a task as done.","lastModifiedDate":"2023-09-13"},{"lineNumber":107,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"bhnuka"},"content":"    public String showMarked(Task task) {","lastModifiedDate":"2023-09-06"},{"lineNumber":109,"author":{"gitId":"bhnuka"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\"","lastModifiedDate":"2023-09-19"},{"lineNumber":110,"author":{"gitId":"bhnuka"},"content":"                + \"   \" + task;","lastModifiedDate":"2023-09-19"},{"lineNumber":111,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"bhnuka"},"content":"     * Returns a message when a task is marked as not done as a String.","lastModifiedDate":"2023-09-06"},{"lineNumber":115,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"bhnuka"},"content":"     * @param task The task that was marked as not done.","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"bhnuka"},"content":"     * @return The message for marking a task as not done.","lastModifiedDate":"2023-09-13"},{"lineNumber":118,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"bhnuka"},"content":"    public String showUnmarked(Task task) {","lastModifiedDate":"2023-09-06"},{"lineNumber":120,"author":{"gitId":"bhnuka"},"content":"        return \"OK, I\u0027ve marked this task as not done yet:\\n\"","lastModifiedDate":"2023-09-19"},{"lineNumber":121,"author":{"gitId":"bhnuka"},"content":"                + \"   \" + task;","lastModifiedDate":"2023-09-19"},{"lineNumber":122,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":123,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":125,"author":{"gitId":"bhnuka"},"content":"     * Returns a list of tasks as a String.","lastModifiedDate":"2023-09-06"},{"lineNumber":126,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":127,"author":{"gitId":"bhnuka"},"content":"     * @param tasks The list of tasks to display.","lastModifiedDate":"2023-09-01"},{"lineNumber":128,"author":{"gitId":"bhnuka"},"content":"     * @return The list of tasks as a String.","lastModifiedDate":"2023-09-13"},{"lineNumber":129,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"bhnuka"},"content":"    public String showList(TaskList tasks) {","lastModifiedDate":"2023-09-06"},{"lineNumber":131,"author":{"gitId":"bhnuka"},"content":"        return tasks.listTasks();","lastModifiedDate":"2023-09-06"},{"lineNumber":132,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":133,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":134,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":135,"author":{"gitId":"bhnuka"},"content":"     * Returns matching tasks from a TaskList as a String.","lastModifiedDate":"2023-09-06"},{"lineNumber":136,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":137,"author":{"gitId":"bhnuka"},"content":"     * @param matchingTasks The TaskList containing matching tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":138,"author":{"gitId":"bhnuka"},"content":"     * @return The matching tasks as a String.","lastModifiedDate":"2023-09-13"},{"lineNumber":139,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":140,"author":{"gitId":"bhnuka"},"content":"    public String showMatchingTasks(TaskList matchingTasks) {","lastModifiedDate":"2023-09-06"},{"lineNumber":141,"author":{"gitId":"bhnuka"},"content":"        StringBuilder result \u003d new StringBuilder(\"Here are the matching tasks in your list:\\n\");","lastModifiedDate":"2023-09-19"},{"lineNumber":142,"author":{"gitId":"bhnuka"},"content":"        for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"bhnuka"},"content":"            result.append(i + 1).append(\".\").append(matchingTasks.get(i)).append(\"\\n\");","lastModifiedDate":"2023-09-19"},{"lineNumber":144,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":145,"author":{"gitId":"bhnuka"},"content":"        return result.toString();","lastModifiedDate":"2023-09-06"},{"lineNumber":146,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":147,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":149,"author":{"gitId":"bhnuka"},"content":"     * Reads a command from the user\u0027s input.","lastModifiedDate":"2023-09-01"},{"lineNumber":150,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":151,"author":{"gitId":"bhnuka"},"content":"     * @return The user\u0027s input command.","lastModifiedDate":"2023-09-01"},{"lineNumber":152,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":153,"author":{"gitId":"bhnuka"},"content":"    public String readCommand() {","lastModifiedDate":"2023-08-31"},{"lineNumber":154,"author":{"gitId":"bhnuka"},"content":"        return scanner.nextLine();","lastModifiedDate":"2023-08-31"},{"lineNumber":155,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":156,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":156}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":" * Represents a command to add a task to the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"    private Task taskToAdd;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     * Constructs an AddCommand with the specified task to be added.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"     * @param taskToAdd The task to be added to the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"    public AddCommand(Task taskToAdd) {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"        this.taskToAdd \u003d taskToAdd;","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"     * Executes the AddCommand to add the task to the task list, update the user interface,","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"     * and save the tasks to storage.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"     * @param tasks   The TaskList containing tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"     * @param ui      The Ui for user interface interactions.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"     * @param storage The Storage for loading and saving tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If there is an error while executing the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"        if (tasks.containsDuplicate(taskToAdd)) {","lastModifiedDate":"2023-09-13"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"            return \"A task with the same description already exists.\";","lastModifiedDate":"2023-09-19"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-09-19"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"        else {","lastModifiedDate":"2023-09-19"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"            tasks.addTask(taskToAdd);","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"            storage.saveTasks(tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"            return ui.showAdded(taskToAdd, tasks.listSize());","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"     * Checks if the command is an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"bhnuka"},"content":"     * @return false since AddCommand is not an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"bhnuka"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"bhnuka"},"content":"        return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":52}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":" * Represents a command that can be executed by Duke.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"public abstract class Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"     * Executes the command with the given TaskList, Ui, and Storage.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     * @param tasks   The TaskList containing tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     * @param ui      The Ui for user interface interactions.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"     * @param storage The Storage for loading and saving tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If there is an error while executing the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"    public abstract String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException;","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"     * Checks if the command is an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"     * @return true if the command is an exit command, otherwise false.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":30}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import duke.task.Task;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":" * Represents a command to delete a task from the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"    private int taskIndexToDelete;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     * Constructs a DeleteCommand with the index of the task to be deleted.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"     * @param taskIndexToDelete The index of the task to be deleted.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"    public DeleteCommand(int taskIndexToDelete) {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"        this.taskIndexToDelete \u003d taskIndexToDelete;","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"     * Executes the DeleteCommand to delete the specified task from the task list,","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"     * update the user interface, and save the tasks to storage.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"     * @param tasks   The TaskList containing tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"     * @param ui      The Ui for user interface interactions.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"     * @param storage The Storage for loading and saving tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If there is an error while executing the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"        Task deletedTask \u003d tasks.getTask(taskIndexToDelete);","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"        tasks.deleteTask(taskIndexToDelete);","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"        storage.saveTasks(tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"        return ui.showDeleted(deletedTask, tasks.listSize());","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"     * Checks if the command is an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"     * @return false since DeleteCommand is not an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"        return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":48}},{"path":"src/main/java/duke/command/ExitCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":" * Represents a command to exit Duke.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"public class ExitCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"     * Executes the ExitCommand to save tasks to storage and display the exit message.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     * @param tasks   The TaskList containing tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     * @param ui      The Ui for user interface interactions.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"     * @param storage The Storage for loading and saving tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If there is an error while executing the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"        storage.saveTasks(tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"        return ui.showExit();","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"     * Checks if the command is an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"     * @return true since ExitCommand is an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"        return true;","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":34}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":" * Represents a command to find tasks containing a specific keyword in their descriptions.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"    private String keyword;","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"     * Represents a command to find tasks containing a specific keyword in their descriptions.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"     * Executes the FindCommand to search for tasks with descriptions containing the keyword,","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"     * and displays the matching tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"     * @param tasks   The TaskList containing tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"     * @param ui      The Ui for user interface interactions.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"     * @param storage The Storage for loading and saving tasks (not used in this command).","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"        TaskList matchingTasks \u003d tasks.findTasks(keyword);","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"        return ui.showMatchingTasks(matchingTasks);","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"     * Checks if the command is an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"     * @return false since FindCommand is not an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"        return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"bhnuka":41}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":" * Represents a command to list all tasks in the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"     * Executes the ListCommand to display the list of tasks from the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"     * @param tasks   The TaskList containing tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     * @param ui      The Ui for user interface interactions.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     * @param storage The Storage for loading and saving tasks (not used in this command).","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"        return ui.showList(tasks);","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"     * Checks if the command is an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"     * @return false since ListCommand is not an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"        return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":31}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":" * Represents a command to mark a task as done in the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"    private int taskIndexToMark;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"     * Constructs a MarkCommand with the index of the task to be marked as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     * @param taskIndexToMark The index of the task to be marked as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"    public MarkCommand(int taskIndexToMark) {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"        this.taskIndexToMark \u003d taskIndexToMark;","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"     * Executes the MarkCommand to mark the specified task as done, update the user interface,","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"     * and save the tasks to storage.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"     * @param tasks   The TaskList containing tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"     * @param ui      The Ui for user interface interactions.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"     * @param storage The Storage for loading and saving tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If there is an error while executing the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"        tasks.markTaskAsDone(taskIndexToMark);","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"        storage.saveTasks(tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"        return ui.showMarked(tasks.getTask(taskIndexToMark));","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"     * Checks if the command is an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"     * @return false since MarkCommand is not an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"        return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":46}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.command;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":" * Represents a command to unmark a task as done in the task list.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"    private int taskIndexToUnmark;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"     * Constructs an UnmarkCommand with the index of the task to be marked as undone.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     * @param taskIndexToUnmark The index of the task to be marked as undone.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"    public UnmarkCommand(int taskIndexToUnmark) {","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"        this.taskIndexToUnmark \u003d taskIndexToUnmark;","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"     * Executes the UnmarkCommand to mark the specified task as undone, update the user interface,","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"     * and save the tasks to storage.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"     * @param tasks   The TaskList containing tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"     * @param ui      The Ui for user interface interactions.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"     * @param storage The Storage for loading and saving tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If there is an error while executing the command.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"        tasks.markTaskAsUndone(taskIndexToUnmark);","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"        storage.saveTasks(tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"        return ui.showUnmarked(tasks.getTask(taskIndexToUnmark));","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"     * Checks if the command is an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"     * @return false since UnmarkCommand is not an exit command.","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"        return false;","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":46}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.gui;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"     * Constructs a DialogBox with the specified text and image.","lastModifiedDate":"2023-09-13"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"     * @param text The text to be displayed in the dialog box.","lastModifiedDate":"2023-09-13"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"     * @param img  The image to be displayed in the dialog box.","lastModifiedDate":"2023-09-13"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"        try {","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-06"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-06"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-06"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"bhnuka"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"bhnuka"},"content":"    private void flip() {","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"bhnuka"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"bhnuka"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"bhnuka"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"bhnuka"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":58,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":59,"author":{"gitId":"bhnuka"},"content":"     * Creates and returns a user dialog box with the specified text and image.","lastModifiedDate":"2023-09-13"},{"lineNumber":60,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":61,"author":{"gitId":"bhnuka"},"content":"     * @param text The text to be displayed in the user dialog.","lastModifiedDate":"2023-09-13"},{"lineNumber":62,"author":{"gitId":"bhnuka"},"content":"     * @param img  The image to be displayed in the user dialog.","lastModifiedDate":"2023-09-13"},{"lineNumber":63,"author":{"gitId":"bhnuka"},"content":"     * @return A DialogBox representing the user\u0027s dialog.","lastModifiedDate":"2023-09-13"},{"lineNumber":64,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":65,"author":{"gitId":"bhnuka"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-06"},{"lineNumber":66,"author":{"gitId":"bhnuka"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-09-06"},{"lineNumber":67,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":68,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":69,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":70,"author":{"gitId":"bhnuka"},"content":"     * Creates and returns a Duke dialog box with the specified text and image.","lastModifiedDate":"2023-09-13"},{"lineNumber":71,"author":{"gitId":"bhnuka"},"content":"     * The dialog box is flipped to position the ImageView on the left and text on the right.","lastModifiedDate":"2023-09-13"},{"lineNumber":72,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":73,"author":{"gitId":"bhnuka"},"content":"     * @param text The text to be displayed in Duke\u0027s dialog.","lastModifiedDate":"2023-09-13"},{"lineNumber":74,"author":{"gitId":"bhnuka"},"content":"     * @param img  The image to be displayed in Duke\u0027s dialog.","lastModifiedDate":"2023-09-13"},{"lineNumber":75,"author":{"gitId":"bhnuka"},"content":"     * @return A DialogBox representing Duke\u0027s dialog.","lastModifiedDate":"2023-09-13"},{"lineNumber":76,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":77,"author":{"gitId":"bhnuka"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-09-06"},{"lineNumber":78,"author":{"gitId":"bhnuka"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-06"},{"lineNumber":79,"author":{"gitId":"bhnuka"},"content":"        db.flip();","lastModifiedDate":"2023-09-06"},{"lineNumber":80,"author":{"gitId":"bhnuka"},"content":"        return db;","lastModifiedDate":"2023-09-06"},{"lineNumber":81,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":82,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-09-06"},{"lineNumber":83,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"bhnuka":83}},{"path":"src/main/java/duke/gui/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.gui;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"public class Launcher {","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"bhnuka":12}},{"path":"src/main/java/duke/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.gui;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"     * The entry point of the Duke GUI application.","lastModifiedDate":"2023-09-13"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"     * Initializes the JavaFX application and sets up the main user interface.","lastModifiedDate":"2023-09-13"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"     * @param stage The primary stage for the application.","lastModifiedDate":"2023-09-13"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"    @Override","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"        try {","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-06"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-06"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"            stage.setTitle(\"Duke\");","lastModifiedDate":"2023-09-20"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"            stage.show();","lastModifiedDate":"2023-09-06"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-06"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-06"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"bhnuka":40}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.gui;","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-06"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-06"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-06"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"    private Duke duke;","lastModifiedDate":"2023-09-06"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2023-09-06"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"     * Initializes the main window with a welcome message from Duke and sets up bindings for scrolling.","lastModifiedDate":"2023-09-13"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"        String welcome \u003d \"Hey! I\u0027m Duke\";","lastModifiedDate":"2023-09-19"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-13"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"                DialogBox.getDukeDialog(welcome, dukeImage)","lastModifiedDate":"2023-09-13"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"        );","lastModifiedDate":"2023-09-13"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-06"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"     * Sets the Duke instance for the controller.","lastModifiedDate":"2023-09-13"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"     * @param d The Duke instance to be used for handling user input.","lastModifiedDate":"2023-09-13"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"bhnuka"},"content":"        duke \u003d d;","lastModifiedDate":"2023-09-06"},{"lineNumber":48,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":49,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":50,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-06"},{"lineNumber":51,"author":{"gitId":"bhnuka"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-06"},{"lineNumber":52,"author":{"gitId":"bhnuka"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-06"},{"lineNumber":53,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-06"},{"lineNumber":54,"author":{"gitId":"bhnuka"},"content":"    @FXML","lastModifiedDate":"2023-09-06"},{"lineNumber":55,"author":{"gitId":"bhnuka"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-06"},{"lineNumber":56,"author":{"gitId":"bhnuka"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-06"},{"lineNumber":57,"author":{"gitId":"bhnuka"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-09-06"},{"lineNumber":58,"author":{"gitId":"bhnuka"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-06"},{"lineNumber":59,"author":{"gitId":"bhnuka"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-06"},{"lineNumber":60,"author":{"gitId":"bhnuka"},"content":"                DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-09-06"},{"lineNumber":61,"author":{"gitId":"bhnuka"},"content":"        );","lastModifiedDate":"2023-09-06"},{"lineNumber":62,"author":{"gitId":"bhnuka"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-06"},{"lineNumber":63,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-06"},{"lineNumber":64,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"bhnuka":64}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":" * A Deadline class to represent deadline tasks","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"    protected LocalDate by;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"     * Constructs deadline with the given description","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"     * @param description the given description of the deadline","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     * @param isDone      whether the deadline is done","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     * @param by          the date by which the deadline is","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"    public Deadline(String description, boolean isDone, String by) {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"        super(description, isDone, TaskType.DEADLINE);","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"        this.by \u003d LocalDate.parse(by, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"     * Returns the do by date","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"     * @return String representing do by date","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"    public String getBy() {","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"        return by.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"     * Check if two Event tasks are equal.","lastModifiedDate":"2023-09-13"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"     * @param otherTask the task to compare to","lastModifiedDate":"2023-09-13"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"     * @return true if the tasks are equal, false otherwise","lastModifiedDate":"2023-09-13"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"    @Override","lastModifiedDate":"2023-09-13"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"    public boolean isEqual(Task otherTask) {","lastModifiedDate":"2023-09-13"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"        if (otherTask instanceof Deadline) {","lastModifiedDate":"2023-09-13"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"            Deadline otherDeadline \u003d (Deadline) otherTask;","lastModifiedDate":"2023-09-13"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"            return this.getDescription().equalsIgnoreCase(otherDeadline.getDescription()) \u0026\u0026","lastModifiedDate":"2023-09-13"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"                    this.getType().equalsIgnoreCase(otherDeadline.getType()) \u0026\u0026","lastModifiedDate":"2023-09-13"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"                    this.getBy().equalsIgnoreCase(otherDeadline.getBy());","lastModifiedDate":"2023-09-13"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":47,"author":{"gitId":"bhnuka"},"content":"        return false;","lastModifiedDate":"2023-09-13"},{"lineNumber":48,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":49,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":50,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"bhnuka"},"content":"     * Returns String representing the deadline","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"bhnuka"},"content":"     * @return String representing deadline","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"bhnuka"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"bhnuka"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"bhnuka"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":59}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":" * An Event class to represent event tasks","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"    protected LocalDate from;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"    protected LocalDate to;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"     * Constructs deadline with the given description","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     * @param description the given description of the deadline","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     * @param isDone      whether the event is done","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"     * @param from        the time at which the event starts","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"     * @param to          the time at which the event ends","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"    public Event(String description, boolean isDone, String from, String to) {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"        super(description, isDone, TaskType.EVENT);","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"        this.from \u003d LocalDate.parse(from, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"        this.to \u003d LocalDate.parse(to, DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"     * Returns the do by date","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"     * @return String representing start from date","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"    public String getFrom() {","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"        return from.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"     * Returns the do by date","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"     * @return String representing end at date","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"    public String getTo() {","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"        return to.format(DateTimeFormatter.ofPattern(\"yyyy-MM-dd\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"     * Check if two Event tasks are equal.","lastModifiedDate":"2023-09-13"},{"lineNumber":47,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":48,"author":{"gitId":"bhnuka"},"content":"     * @param otherTask the task to compare to","lastModifiedDate":"2023-09-13"},{"lineNumber":49,"author":{"gitId":"bhnuka"},"content":"     * @return true if the tasks are equal, false otherwise","lastModifiedDate":"2023-09-13"},{"lineNumber":50,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":51,"author":{"gitId":"bhnuka"},"content":"    @Override","lastModifiedDate":"2023-09-13"},{"lineNumber":52,"author":{"gitId":"bhnuka"},"content":"    public boolean isEqual(Task otherTask) {","lastModifiedDate":"2023-09-13"},{"lineNumber":53,"author":{"gitId":"bhnuka"},"content":"        if (otherTask instanceof Event) {","lastModifiedDate":"2023-09-13"},{"lineNumber":54,"author":{"gitId":"bhnuka"},"content":"            Event otherEvent \u003d (Event) otherTask;","lastModifiedDate":"2023-09-13"},{"lineNumber":55,"author":{"gitId":"bhnuka"},"content":"            return this.getDescription().equalsIgnoreCase(otherEvent.getDescription()) \u0026\u0026","lastModifiedDate":"2023-09-13"},{"lineNumber":56,"author":{"gitId":"bhnuka"},"content":"                    this.getType().equalsIgnoreCase(otherEvent.getType()) \u0026\u0026","lastModifiedDate":"2023-09-13"},{"lineNumber":57,"author":{"gitId":"bhnuka"},"content":"                    this.getFrom().equalsIgnoreCase(otherEvent.getFrom()) \u0026\u0026","lastModifiedDate":"2023-09-13"},{"lineNumber":58,"author":{"gitId":"bhnuka"},"content":"                    this.getTo().equalsIgnoreCase(otherEvent.getTo());","lastModifiedDate":"2023-09-13"},{"lineNumber":59,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":60,"author":{"gitId":"bhnuka"},"content":"        return false;","lastModifiedDate":"2023-09-13"},{"lineNumber":61,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":62,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":63,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"bhnuka"},"content":"     * Returns String representing the event","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"bhnuka"},"content":"     * @return String representing event","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"bhnuka"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"bhnuka"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"bhnuka"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + from.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \" to: \" + to.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\")) + \")\";","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":72}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":" * A Task class to represent tasks","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"public abstract class Task {","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"    private final String description;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"    private boolean isDone;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"    private final TaskType type;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"     * Constructs task with the given description and type","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"     * @param description the given description of the task","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"     * @param type        the given type of the task","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"    public Task(String description, boolean isDone, TaskType type) {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"        this.isDone \u003d isDone;","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"        this.type \u003d type;","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"     * Marks the task as completed by setting its status to \u0027done\u0027.","lastModifiedDate":"2023-09-19"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"    public void markDone() {","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"     * Marks the task as not completed by setting its status to \u0027not done\u0027.","lastModifiedDate":"2023-09-19"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"    public void markUndone() {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"     * Returns whether task is done","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"    public boolean getDone() {","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"        return this.isDone;","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"     * Returns description of task","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"bhnuka"},"content":"    public String getDescription() {","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"bhnuka"},"content":"        return this.description;","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":52,"author":{"gitId":"bhnuka"},"content":"     * Returns description of task","lastModifiedDate":"2023-09-13"},{"lineNumber":53,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":54,"author":{"gitId":"bhnuka"},"content":"    public String getType() {","lastModifiedDate":"2023-09-13"},{"lineNumber":55,"author":{"gitId":"bhnuka"},"content":"        return this.type.toString();","lastModifiedDate":"2023-09-13"},{"lineNumber":56,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":57,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":58,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":59,"author":{"gitId":"bhnuka"},"content":"     * Abstract method to check if two tasks are equal.","lastModifiedDate":"2023-09-13"},{"lineNumber":60,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":61,"author":{"gitId":"bhnuka"},"content":"     * @param otherTask the task to compare to","lastModifiedDate":"2023-09-13"},{"lineNumber":62,"author":{"gitId":"bhnuka"},"content":"     * @return true if the tasks are equal, false otherwise","lastModifiedDate":"2023-09-13"},{"lineNumber":63,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":64,"author":{"gitId":"bhnuka"},"content":"    public abstract boolean isEqual(Task otherTask);","lastModifiedDate":"2023-09-13"},{"lineNumber":65,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":66,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":67,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"bhnuka"},"content":"     * Returns String representing the task","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"bhnuka"},"content":"     * @return String representing task","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"bhnuka"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"bhnuka"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"bhnuka"},"content":"        return \"[\" + (isDone ? \"X\" : \" \") + \"] \" + type + \": \" + description;","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":76}},{"path":"src/main/java/duke/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":" * Represents a list of tasks in Duke.","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"public class TaskList extends ArrayList\u003cTask\u003e{","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"     * Constructs a TaskList with the specified list of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     * @param tasks The list of tasks to initialize the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"        assert tasks !\u003d null : \"TasksList must not be null\";","lastModifiedDate":"2023-09-13"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"     * Constructs an empty TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"        this.tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"     * Lists all the tasks in the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"    public String listTasks() {","lastModifiedDate":"2023-09-06"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"        StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2023-09-06"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"        if (tasks.size() \u003d\u003d 0) {","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"            result.append(\"No tasks added yet.\");","lastModifiedDate":"2023-09-19"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"            result.append(\"Here are the tasks in your list:\\n\");","lastModifiedDate":"2023-09-19"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"                result.append(i + 1).append(\".\").append(tasks.get(i)).append(\"\\n\");","lastModifiedDate":"2023-09-19"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"        return result.toString();","lastModifiedDate":"2023-09-06"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":47,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"bhnuka"},"content":"     * Gets the number of tasks in the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"bhnuka"},"content":"     * @return The number of tasks in the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"bhnuka"},"content":"    public int listSize() {","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"bhnuka"},"content":"        return tasks.size();","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"bhnuka"},"content":"     * Adds a task to the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"bhnuka"},"content":"     * @param task The task to be added.","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"bhnuka"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"bhnuka"},"content":"        // Add task to the list","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"bhnuka"},"content":"        tasks.add(task);","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"bhnuka"},"content":"     * Gets a task at the specified index in the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"bhnuka"},"content":"     * @param index The index of the task to retrieve.","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"bhnuka"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If the index is out of bounds.","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"bhnuka"},"content":"    public Task getTask(int index) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"bhnuka"},"content":"        assert index \u003e\u003d 0 \u0026\u0026 index \u003c tasks.size() : \"Index out of bounds\";","lastModifiedDate":"2023-09-13"},{"lineNumber":75,"author":{"gitId":"bhnuka"},"content":"        if (index \u003e\u003d 0 \u0026\u0026 index \u003c tasks.size()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"bhnuka"},"content":"            return tasks.get(index);","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"bhnuka"},"content":"        } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"bhnuka"},"content":"            throw new DukeException(\"Task not found.\");","lastModifiedDate":"2023-09-19"},{"lineNumber":79,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"bhnuka"},"content":"     * Deletes a task at the specified index from the TaskList.","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"bhnuka"},"content":"     * @param index The index of the task to be deleted.","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If the index is out of bounds.","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"bhnuka"},"content":"    public void deleteTask(int index) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"bhnuka"},"content":"        assert index \u003e\u003d 0 \u0026\u0026 index \u003c tasks.size() : \"Index out of bounds\";","lastModifiedDate":"2023-09-13"},{"lineNumber":90,"author":{"gitId":"bhnuka"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"bhnuka"},"content":"            if (index \u003e\u003d 0 \u0026\u0026 index \u003c tasks.size()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"bhnuka"},"content":"                tasks.remove(index);","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"bhnuka"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"bhnuka"},"content":"        } catch (NumberFormatException | IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"bhnuka"},"content":"            System.out.println(\"Please enter a\" +","lastModifiedDate":"2023-09-19"},{"lineNumber":96,"author":{"gitId":"bhnuka"},"content":"             \" valid task index to delete.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"bhnuka"},"content":"     * Marks a task at the specified index as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"bhnuka"},"content":"     * @param index The index of the task to be marked as done.","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If the index is out of bounds.","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"bhnuka"},"content":"    public void markTaskAsDone(int index) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"bhnuka"},"content":"        assert index \u003e\u003d 0 \u0026\u0026 index \u003c tasks.size() : \"Index out of bounds\";","lastModifiedDate":"2023-09-13"},{"lineNumber":108,"author":{"gitId":"bhnuka"},"content":"        // Mark task as done","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"bhnuka"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"bhnuka"},"content":"            if (index \u003e\u003d 0 \u0026\u0026 index \u003c tasks.size()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"bhnuka"},"content":"                tasks.get(index).markDone();","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"bhnuka"},"content":"            } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"bhnuka"},"content":"                throw new DukeException(\"Task not found.\");","lastModifiedDate":"2023-09-19"},{"lineNumber":114,"author":{"gitId":"bhnuka"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":115,"author":{"gitId":"bhnuka"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":116,"author":{"gitId":"bhnuka"},"content":"            e.getMessage();","lastModifiedDate":"2023-08-31"},{"lineNumber":117,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":118,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":119,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":120,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"bhnuka"},"content":"     * Marks a task at the specified index as undone.","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"bhnuka"},"content":"     * @param index The index of the task to be marked as undone.","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If the index is out of bounds.","lastModifiedDate":"2023-09-01"},{"lineNumber":125,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":126,"author":{"gitId":"bhnuka"},"content":"    public void markTaskAsUndone(int index) throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":127,"author":{"gitId":"bhnuka"},"content":"        assert index \u003e\u003d 0 \u0026\u0026 index \u003c tasks.size() : \"Index out of bounds\";","lastModifiedDate":"2023-09-13"},{"lineNumber":128,"author":{"gitId":"bhnuka"},"content":"        // Mark task as undone","lastModifiedDate":"2023-08-31"},{"lineNumber":129,"author":{"gitId":"bhnuka"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":130,"author":{"gitId":"bhnuka"},"content":"            if (index \u003e\u003d 0 \u0026\u0026 index \u003c tasks.size()) {","lastModifiedDate":"2023-08-31"},{"lineNumber":131,"author":{"gitId":"bhnuka"},"content":"                tasks.get(index).markUndone();","lastModifiedDate":"2023-08-31"},{"lineNumber":132,"author":{"gitId":"bhnuka"},"content":"            } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":133,"author":{"gitId":"bhnuka"},"content":"                throw new DukeException(\"Task not found.\");","lastModifiedDate":"2023-09-13"},{"lineNumber":134,"author":{"gitId":"bhnuka"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":135,"author":{"gitId":"bhnuka"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":136,"author":{"gitId":"bhnuka"},"content":"            e.getMessage();","lastModifiedDate":"2023-08-31"},{"lineNumber":137,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":138,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":139,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":140,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":141,"author":{"gitId":"bhnuka"},"content":"     * Finds tasks containing a specific keyword in their description.","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"bhnuka"},"content":"     * @param keyword The keyword to search for in task descriptions.","lastModifiedDate":"2023-09-01"},{"lineNumber":144,"author":{"gitId":"bhnuka"},"content":"     * @return A TaskList containing tasks with descriptions that match the keyword.","lastModifiedDate":"2023-09-01"},{"lineNumber":145,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":146,"author":{"gitId":"bhnuka"},"content":"    public TaskList findTasks(String keyword) {","lastModifiedDate":"2023-09-01"},{"lineNumber":147,"author":{"gitId":"bhnuka"},"content":"        TaskList matchingTasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"bhnuka"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":149,"author":{"gitId":"bhnuka"},"content":"            if (task.getDescription().contains(keyword)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":150,"author":{"gitId":"bhnuka"},"content":"                matchingTasks.add(task);","lastModifiedDate":"2023-09-01"},{"lineNumber":151,"author":{"gitId":"bhnuka"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":152,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":153,"author":{"gitId":"bhnuka"},"content":"        return matchingTasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":154,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":155,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":156,"author":{"gitId":"bhnuka"},"content":"    public boolean containsDuplicate(Task taskToAdd) {","lastModifiedDate":"2023-09-13"},{"lineNumber":157,"author":{"gitId":"bhnuka"},"content":"        boolean isDuplicate \u003d false;","lastModifiedDate":"2023-09-19"},{"lineNumber":158,"author":{"gitId":"bhnuka"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-09-13"},{"lineNumber":159,"author":{"gitId":"bhnuka"},"content":"            if (task.isEqual(taskToAdd)) {","lastModifiedDate":"2023-09-13"},{"lineNumber":160,"author":{"gitId":"bhnuka"},"content":"                isDuplicate \u003d true;","lastModifiedDate":"2023-09-19"},{"lineNumber":161,"author":{"gitId":"bhnuka"},"content":"            }","lastModifiedDate":"2023-09-13"},{"lineNumber":162,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":163,"author":{"gitId":"bhnuka"},"content":"        return isDuplicate;","lastModifiedDate":"2023-09-19"},{"lineNumber":164,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":165,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":165}},{"path":"src/main/java/duke/task/TaskType.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":" * Enums to represent the different types of tasks","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"public enum TaskType {","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"    TODO, DEADLINE, EVENT","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":8}},{"path":"src/main/java/duke/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":" * A Todo class to represent todo tasks","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"     * Constructs todo with the given description","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"     * @param description the given description of the todo","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"     * @param isDone whether the todo is done","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"    public Todo(String description, boolean isDone) {","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"        super(description, isDone, TaskType.TODO);","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-13"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"     * Check if two Todo tasks are equal.","lastModifiedDate":"2023-09-13"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-13"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"     * @param otherTask the task to compare to","lastModifiedDate":"2023-09-13"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"     * @return true if the tasks are equal, false otherwise","lastModifiedDate":"2023-09-13"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-13"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"    @Override","lastModifiedDate":"2023-09-13"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"    public boolean isEqual(Task otherTask) {","lastModifiedDate":"2023-09-13"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"        if (otherTask instanceof Todo) {","lastModifiedDate":"2023-09-13"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"            Todo otherTodo \u003d (Todo) otherTask;","lastModifiedDate":"2023-09-13"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"            return this.getDescription().equalsIgnoreCase(otherTodo.getDescription()) \u0026\u0026","lastModifiedDate":"2023-09-13"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"                    this.getType().equalsIgnoreCase(otherTodo.getType());","lastModifiedDate":"2023-09-13"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-09-13"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"        return false;","lastModifiedDate":"2023-09-13"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-09-13"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"     * Returns String representing the todo","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"     * @return String representing todo","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"    @Override","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"    public String toString() {","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":44}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefHeight\u003d\"130.0\" prefWidth\u003d\"443.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"97.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"bhnuka":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-06"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"443.0\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"42.0\" prefWidth\u003d\"442.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"366.0\" layoutY\u003d\"557.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"558.0\" prefWidth\u003d\"443.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-19"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-06"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-06"}],"authorContributionMap":{"bhnuka":19}},{"path":"src/test/java/duke/test/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.test;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.Parser;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":" * Test class for the Parser class, which parses user input in Duke.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"public class ParserTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     * Test case for gibberish input that should result in an exception.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If there is an issue with parsing.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"    public void gibberishTest() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"            assertEquals(\"I\u0027m sorry, but I don\u0027t know what that means\", Parser.parse(\"rubbish\"));","lastModifiedDate":"2023-09-19"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"            assertEquals(\"I\u0027m sorry, but I don\u0027t know what that means\", e.getMessage());","lastModifiedDate":"2023-09-19"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"     * Test case for invalid \u0027todo\u0027 input without a description.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If there is an issue with parsing.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"    public void invalidTodo() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"            assertEquals(\"The description of a todo cannot be empty.\", Parser.parse(\"todo\"));","lastModifiedDate":"2023-09-19"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"            assertEquals(\"The description of a todo cannot be empty.\", e.getMessage());","lastModifiedDate":"2023-09-19"},{"lineNumber":40,"author":{"gitId":"bhnuka"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":42}},{"path":"src/test/java/duke/test/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"package duke.test;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"import duke.task.TaskList;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"bhnuka"},"content":"import duke.task.Todo;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"bhnuka"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"bhnuka"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"bhnuka"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"bhnuka"},"content":" * Test class for the TaskList class, which manages a list of tasks in Duke.","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"bhnuka"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"bhnuka"},"content":"public class TaskListTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"bhnuka"},"content":"     * Test case for adding a task to the TaskList and checking the list size.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"bhnuka"},"content":"    public void testAdd() {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"bhnuka"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"bhnuka"},"content":"        tasks.addTask(new Todo(\"a\", true));","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"bhnuka"},"content":"        assertEquals(1, tasks.listSize());","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"bhnuka"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"bhnuka"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"bhnuka"},"content":"     * Test case for deleting a task from the TaskList and checking the list size.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"bhnuka"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"bhnuka"},"content":"     * @throws DukeException If there is an issue with deleting the task.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"bhnuka"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"bhnuka"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"bhnuka"},"content":"    public void testDelete() throws DukeException {","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"bhnuka"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"bhnuka"},"content":"        tasks.addTask(new Todo(\"a\", true));","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"bhnuka"},"content":"        tasks.addTask(new Todo(\"b\", true));","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"bhnuka"},"content":"        tasks.addTask(new Todo(\"c\", true));","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"bhnuka"},"content":"        tasks.deleteTask(1);","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"bhnuka"},"content":"        assertEquals(2, tasks.listSize());","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"bhnuka"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"bhnuka"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"bhnuka":39}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"bhnuka"},"content":"todo borrow book","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"bhnuka"},"content":"list","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"bhnuka"},"content":"deadline return book/by Sunday","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"bhnuka"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"bhnuka":4}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"bhnuka"},"content":"java -classpath ..\\bin Eva \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"bhnuka":1,"-":20}}]
