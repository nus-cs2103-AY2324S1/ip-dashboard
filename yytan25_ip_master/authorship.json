[{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"Task/eat breakfast/N","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"Task/eat lunch/N","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"Task/eat dinner/N","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"Task/Eat supper/N","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"Deadline/eat my words/N/2023-09-01T23:59","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"yytan25":5}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":" * The {@code Deadline} class.","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"    protected LocalDateTime due;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"     * Constructs a new {@code Deadline} object, with {@code isCompleted} set to false.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"     * @param details Details of the {@code Deadline}.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"     * @param due Due date and time of the {@code Deadline}, stored as a {@code LocalDateTime} object.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"    public Deadline(String details, LocalDateTime due) {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"        super(details);","lastModifiedDate":"2023-08-20"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"        this.due \u003d due;","lastModifiedDate":"2023-08-20"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"     * Loads a {@code Deadline} object that was previously stored in the hard disk.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"     * The {@code isCompleted} parameter corresponds to the completion status in the last","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"     * instance of {@code Duke}.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"     * @param details Details of the {@code Deadline}.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"     * @param isCompleted Completion status of the {@code Deadline}.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"     * @param due Due date and time of the {@code Deadline}, stored as a {@code LocalDateTime} object.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"    public Deadline(String details, boolean isCompleted, LocalDateTime due) {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"        super(details, isCompleted);","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"        this.due \u003d due;","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"yytan25"},"content":"     * Returns the string representation of the {@code Deadline}, to be","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"yytan25"},"content":"     * printed in the {@code list} method.","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"yytan25"},"content":"     * @return String representation of the {@code Deadline}.","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"yytan25"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":45,"author":{"gitId":"yytan25"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":46,"author":{"gitId":"yytan25"},"content":"        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"E, dd MMM yyyy\");","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"yytan25"},"content":"        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"yytan25"},"content":"        return \"[D]\" + super.toString() + \" (by: \"","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"yytan25"},"content":"                + this.due.toLocalDate().format(dateFormatter) + \" \"","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"yytan25"},"content":"                + this.due.toLocalTime().format(timeFormatter) + \")\";","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"yytan25":52}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":" * The {@code Duke} class. Main class that drives other functions.","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"    private final Storage storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"    private final TaskList tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"    private final Ui ui;","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"    private final Parser parser;","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"     * Initiates a new {@code Duke} object.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"     * @throws IOException When the {@code saveTasksToDisk()} method in the {@code Storage} class","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"     *     fails to function properly.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"    public Duke() throws IOException {","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"        this.tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"        this.storage \u003d new Storage(tasks);","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"        this.parser \u003d new Parser(this, tasks, ui);","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"        this.run();","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"yytan25"},"content":"     * Contains the tasks required for {@code Duke} to start.","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"yytan25"},"content":"     * Also acts as a driver method for the {@code Parser} to read the user input.","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"yytan25"},"content":"     * @throws IOException When the {@code saveTasksToDisk()} method in the {@code Storage} class","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"yytan25"},"content":"     *     fails to function properly.","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"yytan25"},"content":"    public void run() throws IOException {","lastModifiedDate":"2023-08-26"},{"lineNumber":44,"author":{"gitId":"yytan25"},"content":"        storage.launchOnStart();","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"yytan25"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":46,"author":{"gitId":"yytan25"},"content":"            storage.readTasksFromDisk(\"./data/tasks.txt\");","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"yytan25"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":48,"author":{"gitId":"yytan25"},"content":"            System.out.println(\"File not found. Please check your directory and try again.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":49,"author":{"gitId":"yytan25"},"content":"            this.exit(2);","lastModifiedDate":"2023-08-26"},{"lineNumber":50,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":51,"author":{"gitId":"yytan25"},"content":"        ui.printSelfIntroduction();","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"yytan25"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-20"},{"lineNumber":53,"author":{"gitId":"yytan25"},"content":"        while (true) {","lastModifiedDate":"2023-09-05"},{"lineNumber":54,"author":{"gitId":"yytan25"},"content":"            if (ui.getInvalidInputCount() \u003e\u003d 10) {","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"yytan25"},"content":"                this.exit(1);","lastModifiedDate":"2023-08-26"},{"lineNumber":56,"author":{"gitId":"yytan25"},"content":"                break;","lastModifiedDate":"2023-08-24"},{"lineNumber":57,"author":{"gitId":"yytan25"},"content":"            } else if (ui.getInvalidInputCount() \u003d\u003d 8) {","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"yytan25"},"content":"                System.out.println(\"If you keep giving me nonsense, I\u0027m leaving!\");","lastModifiedDate":"2023-08-24"},{"lineNumber":59,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":60,"author":{"gitId":"yytan25"},"content":"            String msg \u003d sc.nextLine();","lastModifiedDate":"2023-08-20"},{"lineNumber":61,"author":{"gitId":"yytan25"},"content":"            parser.readInput(msg);","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":63,"author":{"gitId":"yytan25"},"content":"        this.exit(0);","lastModifiedDate":"2023-08-26"},{"lineNumber":64,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":65,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":66,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"yytan25"},"content":"     * Creates a new {@code Task} object with details input by the user and adds it to the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"yytan25"},"content":"    public void createTask() {","lastModifiedDate":"2023-08-24"},{"lineNumber":70,"author":{"gitId":"yytan25"},"content":"        String details \u003d parser.checkTaskInput(\"task\");","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"yytan25"},"content":"        if (details !\u003d null) {","lastModifiedDate":"2023-08-24"},{"lineNumber":72,"author":{"gitId":"yytan25"},"content":"            tasks.add(new Task(details));","lastModifiedDate":"2023-08-24"},{"lineNumber":73,"author":{"gitId":"yytan25"},"content":"            System.out.printf(\"Don\u0027t expect me to %s for you!%n\", details);","lastModifiedDate":"2023-08-24"},{"lineNumber":74,"author":{"gitId":"yytan25"},"content":"            ui.printEndOfOperation();","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":76,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":77,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":78,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"yytan25"},"content":"     * Creates a new {@code Todo} object with details input by the user and adds it to the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"yytan25"},"content":"    public void createToDo() {","lastModifiedDate":"2023-08-24"},{"lineNumber":82,"author":{"gitId":"yytan25"},"content":"        String details \u003d parser.checkTaskInput(\"todo\");","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"yytan25"},"content":"        if (details !\u003d null) {","lastModifiedDate":"2023-08-24"},{"lineNumber":84,"author":{"gitId":"yytan25"},"content":"            tasks.add(new ToDo(details));","lastModifiedDate":"2023-08-24"},{"lineNumber":85,"author":{"gitId":"yytan25"},"content":"            System.out.printf(\"Stop talking to me! Go and %s!%n\", details);","lastModifiedDate":"2023-08-24"},{"lineNumber":86,"author":{"gitId":"yytan25"},"content":"            ui.printEndOfOperation();","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":88,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":89,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":90,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"yytan25"},"content":"     * Creates a new {@code Deadline} object with details input by the user and adds it to the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"yytan25"},"content":"     * If no time is input by the user, the time will be set to 23:59 by default.","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"yytan25"},"content":"    public void createDeadline() {","lastModifiedDate":"2023-08-24"},{"lineNumber":95,"author":{"gitId":"yytan25"},"content":"        String details \u003d parser.checkTaskInput(\"deadline\");","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"yytan25"},"content":"        if (details \u003d\u003d null) {","lastModifiedDate":"2023-08-24"},{"lineNumber":97,"author":{"gitId":"yytan25"},"content":"            return;","lastModifiedDate":"2023-08-24"},{"lineNumber":98,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":99,"author":{"gitId":"yytan25"},"content":"        LocalDate dueDate \u003d parser.checkDateInput(\"deadline\", \"due\");","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"yytan25"},"content":"        if (dueDate \u003d\u003d null) {","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"yytan25"},"content":"            return;","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"yytan25"},"content":"        LocalTime dueTime \u003d parser.checkTimeInput(\"deadline\", \"due\");","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"yytan25"},"content":"        if (dueTime \u003d\u003d null) {","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"yytan25"},"content":"            // Shouldn\u0027t reach here as creation of deadline without time input is supported.","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"yytan25"},"content":"            // Invalid input is also handled in the Parser class.","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"yytan25"},"content":"            // Default dueTime is 23:59.","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"yytan25"},"content":"            return;","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"yytan25"},"content":"        LocalDateTime due \u003d dueTime.atDate(dueDate);","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"yytan25"},"content":"        if (parser.checkStartDateTime(\"deadline\", due)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"yytan25"},"content":"            tasks.add(new Deadline(details, due));","lastModifiedDate":"2023-08-24"},{"lineNumber":113,"author":{"gitId":"yytan25"},"content":"            System.out.printf(\"Just saying, better %s now.%n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"yytan25"},"content":"                    + \"Not like it\u0027s my problem if you don\u0027t.%n\", details);","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"yytan25"},"content":"            ui.printEndOfOperation();","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":117,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":119,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":120,"author":{"gitId":"yytan25"},"content":"     * Creates a new {@code Event} object with details input by the user and adds it to the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"yytan25"},"content":"    public void createEvent() {","lastModifiedDate":"2023-08-24"},{"lineNumber":123,"author":{"gitId":"yytan25"},"content":"        String details \u003d parser.checkTaskInput(\"event\");","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"yytan25"},"content":"        if (details \u003d\u003d null) {","lastModifiedDate":"2023-08-24"},{"lineNumber":125,"author":{"gitId":"yytan25"},"content":"            return;","lastModifiedDate":"2023-08-24"},{"lineNumber":126,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":127,"author":{"gitId":"yytan25"},"content":"        LocalDate startDate \u003d parser.checkDateInput(\"event\", \"start\");","lastModifiedDate":"2023-09-01"},{"lineNumber":128,"author":{"gitId":"yytan25"},"content":"        if (startDate \u003d\u003d null) {","lastModifiedDate":"2023-09-01"},{"lineNumber":129,"author":{"gitId":"yytan25"},"content":"            return;","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":131,"author":{"gitId":"yytan25"},"content":"        LocalTime startTime \u003d parser.checkTimeInput(\"event\", \"start\");","lastModifiedDate":"2023-09-01"},{"lineNumber":132,"author":{"gitId":"yytan25"},"content":"        if (startTime \u003d\u003d null) {","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"yytan25"},"content":"            return;","lastModifiedDate":"2023-09-01"},{"lineNumber":134,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":135,"author":{"gitId":"yytan25"},"content":"        LocalDate endDate \u003d parser.checkDateInput(\"event\", \"end\");","lastModifiedDate":"2023-09-01"},{"lineNumber":136,"author":{"gitId":"yytan25"},"content":"        if (endDate \u003d\u003d null) {","lastModifiedDate":"2023-09-01"},{"lineNumber":137,"author":{"gitId":"yytan25"},"content":"            return;","lastModifiedDate":"2023-09-01"},{"lineNumber":138,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":139,"author":{"gitId":"yytan25"},"content":"        LocalTime endTime \u003d parser.checkTimeInput(\"event\", \"end\");","lastModifiedDate":"2023-09-01"},{"lineNumber":140,"author":{"gitId":"yytan25"},"content":"        if (endTime \u003d\u003d null) {","lastModifiedDate":"2023-09-01"},{"lineNumber":141,"author":{"gitId":"yytan25"},"content":"            return;","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"yytan25"},"content":"        LocalDateTime start \u003d startTime.atDate(startDate);","lastModifiedDate":"2023-08-31"},{"lineNumber":144,"author":{"gitId":"yytan25"},"content":"        LocalDateTime end \u003d endTime.atDate(endDate);","lastModifiedDate":"2023-08-31"},{"lineNumber":145,"author":{"gitId":"yytan25"},"content":"        if (parser.checkStartDateTime(\"event\", end)","lastModifiedDate":"2023-09-05"},{"lineNumber":146,"author":{"gitId":"yytan25"},"content":"                \u0026\u0026 parser.checkTimeInterval(\"event\", start, end)) {","lastModifiedDate":"2023-09-05"},{"lineNumber":147,"author":{"gitId":"yytan25"},"content":"            tasks.add(new Event(details, start, end));","lastModifiedDate":"2023-08-24"},{"lineNumber":148,"author":{"gitId":"yytan25"},"content":"            System.out.printf(\"Wow, you have a %s?%n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":149,"author":{"gitId":"yytan25"},"content":"                    + \"Uhh, n-not like I wanna join you!%n\", details);","lastModifiedDate":"2023-09-01"},{"lineNumber":150,"author":{"gitId":"yytan25"},"content":"            ui.printEndOfOperation();","lastModifiedDate":"2023-09-01"},{"lineNumber":151,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":152,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":153,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":154,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":155,"author":{"gitId":"yytan25"},"content":"     * Prints all stored Task objects and prints them in a list format.","lastModifiedDate":"2023-09-01"},{"lineNumber":156,"author":{"gitId":"yytan25"},"content":"     * Also shows the completion status of each task marked with an \"[X]\", and the","lastModifiedDate":"2023-09-01"},{"lineNumber":157,"author":{"gitId":"yytan25"},"content":"     * breakdown of completed/incomplete tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":158,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":159,"author":{"gitId":"yytan25"},"content":"    public void list() {","lastModifiedDate":"2023-08-20"},{"lineNumber":160,"author":{"gitId":"yytan25"},"content":"        int numOfTasks \u003d tasks.getNumOfTasks();","lastModifiedDate":"2023-09-01"},{"lineNumber":161,"author":{"gitId":"yytan25"},"content":"        int numOfCompletedTasks \u003d tasks.getNumOfCompletedTasks();","lastModifiedDate":"2023-09-01"},{"lineNumber":162,"author":{"gitId":"yytan25"},"content":"        System.out.printf(\"You have %d tasks. (%d complete, %d incomplete)%n\",","lastModifiedDate":"2023-08-21"},{"lineNumber":163,"author":{"gitId":"yytan25"},"content":"                numOfTasks, numOfCompletedTasks, numOfTasks - numOfCompletedTasks);","lastModifiedDate":"2023-08-21"},{"lineNumber":164,"author":{"gitId":"yytan25"},"content":"        for (int i \u003d 0; i \u003c numOfTasks; i++) {","lastModifiedDate":"2023-08-20"},{"lineNumber":165,"author":{"gitId":"yytan25"},"content":"            System.out.printf(\"%d. \" + tasks.get(i).toString()","lastModifiedDate":"2023-08-20"},{"lineNumber":166,"author":{"gitId":"yytan25"},"content":"                    + \"%n\", i + 1);","lastModifiedDate":"2023-08-20"},{"lineNumber":167,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":168,"author":{"gitId":"yytan25"},"content":"        if (numOfCompletedTasks \u003d\u003d numOfTasks) {","lastModifiedDate":"2023-08-21"},{"lineNumber":169,"author":{"gitId":"yytan25"},"content":"            System.out.println(\"You\u0027ve completed all your tasks. Good for you.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":170,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-08-21"},{"lineNumber":171,"author":{"gitId":"yytan25"},"content":"            System.out.println(\"Don\u0027t expect me to remember them for you!\");","lastModifiedDate":"2023-08-20"},{"lineNumber":172,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":173,"author":{"gitId":"yytan25"},"content":"        ui.printEndOfOperation();","lastModifiedDate":"2023-09-01"},{"lineNumber":174,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":175,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":176,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":177,"author":{"gitId":"yytan25"},"content":"     * Marks a selected task as complete, with the task number input by the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":178,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":179,"author":{"gitId":"yytan25"},"content":"    public void markAsComplete() {","lastModifiedDate":"2023-08-20"},{"lineNumber":180,"author":{"gitId":"yytan25"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":181,"author":{"gitId":"yytan25"},"content":"            System.out.println(\"No tasks to mark.\");","lastModifiedDate":"2023-08-24"},{"lineNumber":182,"author":{"gitId":"yytan25"},"content":"            System.out.println(\"Please create a task first.\");","lastModifiedDate":"2023-08-24"},{"lineNumber":183,"author":{"gitId":"yytan25"},"content":"            ui.incrementInvalidInputs();","lastModifiedDate":"2023-09-01"},{"lineNumber":184,"author":{"gitId":"yytan25"},"content":"            ui.printHorizontalLine();","lastModifiedDate":"2023-09-01"},{"lineNumber":185,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-08-24"},{"lineNumber":186,"author":{"gitId":"yytan25"},"content":"            Integer taskNumber \u003d parser.launchConfirmationScreen(\"mark as complete\");","lastModifiedDate":"2023-09-01"},{"lineNumber":187,"author":{"gitId":"yytan25"},"content":"            if (taskNumber !\u003d null) {","lastModifiedDate":"2023-08-24"},{"lineNumber":188,"author":{"gitId":"yytan25"},"content":"                Task task \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2023-08-20"},{"lineNumber":189,"author":{"gitId":"yytan25"},"content":"                if (!task.isCompleted) {","lastModifiedDate":"2023-08-20"},{"lineNumber":190,"author":{"gitId":"yytan25"},"content":"                    task.setCompleted();","lastModifiedDate":"2023-08-20"},{"lineNumber":191,"author":{"gitId":"yytan25"},"content":"                    tasks.incrementCompletedTasks();","lastModifiedDate":"2023-09-01"},{"lineNumber":192,"author":{"gitId":"yytan25"},"content":"                    System.out.printf(\"Task %d set as complete.%n\", taskNumber);","lastModifiedDate":"2023-08-20"},{"lineNumber":193,"author":{"gitId":"yytan25"},"content":"                } else {","lastModifiedDate":"2023-08-20"},{"lineNumber":194,"author":{"gitId":"yytan25"},"content":"                    System.out.printf(\"Task %d is already complete.%n Stop wasting my time!%n\", taskNumber);","lastModifiedDate":"2023-09-01"},{"lineNumber":195,"author":{"gitId":"yytan25"},"content":"                }","lastModifiedDate":"2023-08-20"},{"lineNumber":196,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":197,"author":{"gitId":"yytan25"},"content":"            ui.printEndOfOperation();","lastModifiedDate":"2023-09-01"},{"lineNumber":198,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":199,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":200,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":201,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":202,"author":{"gitId":"yytan25"},"content":"     * Marks a selected task as incomplete, with the task number input by the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":203,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":204,"author":{"gitId":"yytan25"},"content":"    public void markAsIncomplete() {","lastModifiedDate":"2023-08-20"},{"lineNumber":205,"author":{"gitId":"yytan25"},"content":"        if (!tasks.hasCompletedTasks()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":206,"author":{"gitId":"yytan25"},"content":"            System.out.println(\"No tasks to unmark.\");","lastModifiedDate":"2023-08-24"},{"lineNumber":207,"author":{"gitId":"yytan25"},"content":"            if (!tasks.isEmpty()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":208,"author":{"gitId":"yytan25"},"content":"                System.out.println(\"You have no completed tasks.\");","lastModifiedDate":"2023-08-24"},{"lineNumber":209,"author":{"gitId":"yytan25"},"content":"            } else {","lastModifiedDate":"2023-08-24"},{"lineNumber":210,"author":{"gitId":"yytan25"},"content":"                System.out.println(\"Please create a task first.\");","lastModifiedDate":"2023-08-24"},{"lineNumber":211,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":212,"author":{"gitId":"yytan25"},"content":"            ui.incrementInvalidInputs();","lastModifiedDate":"2023-09-01"},{"lineNumber":213,"author":{"gitId":"yytan25"},"content":"            ui.printHorizontalLine();","lastModifiedDate":"2023-09-01"},{"lineNumber":214,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-08-24"},{"lineNumber":215,"author":{"gitId":"yytan25"},"content":"            Integer taskNumber \u003d parser.launchConfirmationScreen(\"mark as incomplete\");","lastModifiedDate":"2023-09-01"},{"lineNumber":216,"author":{"gitId":"yytan25"},"content":"            if (taskNumber !\u003d null) {","lastModifiedDate":"2023-08-24"},{"lineNumber":217,"author":{"gitId":"yytan25"},"content":"                Task task \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2023-08-20"},{"lineNumber":218,"author":{"gitId":"yytan25"},"content":"                if (task.isCompleted) {","lastModifiedDate":"2023-08-20"},{"lineNumber":219,"author":{"gitId":"yytan25"},"content":"                    task.setIncomplete();","lastModifiedDate":"2023-08-20"},{"lineNumber":220,"author":{"gitId":"yytan25"},"content":"                    tasks.decrementCompletedTasks();","lastModifiedDate":"2023-09-01"},{"lineNumber":221,"author":{"gitId":"yytan25"},"content":"                    System.out.printf(\"Task %d set as incomplete.%n\", taskNumber);","lastModifiedDate":"2023-08-20"},{"lineNumber":222,"author":{"gitId":"yytan25"},"content":"                } else {","lastModifiedDate":"2023-08-20"},{"lineNumber":223,"author":{"gitId":"yytan25"},"content":"                    System.out.printf(\"Task %d is already incomplete.%n Stop wasting my time!%n\", taskNumber);","lastModifiedDate":"2023-09-01"},{"lineNumber":224,"author":{"gitId":"yytan25"},"content":"                }","lastModifiedDate":"2023-08-20"},{"lineNumber":225,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":226,"author":{"gitId":"yytan25"},"content":"            ui.printEndOfOperation();","lastModifiedDate":"2023-09-01"},{"lineNumber":227,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":228,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":229,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":230,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":231,"author":{"gitId":"yytan25"},"content":"     * Deletes a selected task from the list, with the task number input by the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":232,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":233,"author":{"gitId":"yytan25"},"content":"    public void deleteTask() {","lastModifiedDate":"2023-08-24"},{"lineNumber":234,"author":{"gitId":"yytan25"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":235,"author":{"gitId":"yytan25"},"content":"            System.out.println(\"No tasks to delete.\");","lastModifiedDate":"2023-08-24"},{"lineNumber":236,"author":{"gitId":"yytan25"},"content":"            System.out.println(\"Please create a task first.\");","lastModifiedDate":"2023-08-24"},{"lineNumber":237,"author":{"gitId":"yytan25"},"content":"            ui.incrementInvalidInputs();","lastModifiedDate":"2023-09-01"},{"lineNumber":238,"author":{"gitId":"yytan25"},"content":"            ui.printHorizontalLine();","lastModifiedDate":"2023-09-01"},{"lineNumber":239,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-08-24"},{"lineNumber":240,"author":{"gitId":"yytan25"},"content":"            Integer taskNumber \u003d parser.launchConfirmationScreen(\"delete\");","lastModifiedDate":"2023-09-01"},{"lineNumber":241,"author":{"gitId":"yytan25"},"content":"            if (taskNumber !\u003d null) {","lastModifiedDate":"2023-08-24"},{"lineNumber":242,"author":{"gitId":"yytan25"},"content":"                Task task \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2023-08-24"},{"lineNumber":243,"author":{"gitId":"yytan25"},"content":"                tasks.remove(task);","lastModifiedDate":"2023-08-24"},{"lineNumber":244,"author":{"gitId":"yytan25"},"content":"                System.out.printf(\"Task %d deleted successfully.%n You now have %d tasks.%n\",","lastModifiedDate":"2023-09-01"},{"lineNumber":245,"author":{"gitId":"yytan25"},"content":"                        taskNumber, tasks.getNumOfTasks());","lastModifiedDate":"2023-09-01"},{"lineNumber":246,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":247,"author":{"gitId":"yytan25"},"content":"            ui.printEndOfOperation();","lastModifiedDate":"2023-09-01"},{"lineNumber":248,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":249,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":250,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":251,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":252,"author":{"gitId":"yytan25"},"content":"     * Finds all tasks containing a keyword input by the user, and prints them in a list format.","lastModifiedDate":"2023-09-01"},{"lineNumber":253,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":254,"author":{"gitId":"yytan25"},"content":"    public void findTask() {","lastModifiedDate":"2023-09-01"},{"lineNumber":255,"author":{"gitId":"yytan25"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":256,"author":{"gitId":"yytan25"},"content":"            System.out.println(\"No tasks to find.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":257,"author":{"gitId":"yytan25"},"content":"            System.out.println(\"Please create a task first.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":258,"author":{"gitId":"yytan25"},"content":"            ui.incrementInvalidInputs();","lastModifiedDate":"2023-09-01"},{"lineNumber":259,"author":{"gitId":"yytan25"},"content":"            ui.printHorizontalLine();","lastModifiedDate":"2023-09-01"},{"lineNumber":260,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":261,"author":{"gitId":"yytan25"},"content":"            ArrayList\u003cTask\u003e matchingTasks \u003d parser.getMatchingTasks();","lastModifiedDate":"2023-09-01"},{"lineNumber":262,"author":{"gitId":"yytan25"},"content":"            if (matchingTasks \u003d\u003d null) {","lastModifiedDate":"2023-09-01"},{"lineNumber":263,"author":{"gitId":"yytan25"},"content":"                System.out.printf(\"Keyword cannot be empty. Please try again.%n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":264,"author":{"gitId":"yytan25"},"content":"                ui.printHorizontalLine();","lastModifiedDate":"2023-09-01"},{"lineNumber":265,"author":{"gitId":"yytan25"},"content":"            } else if (matchingTasks.isEmpty()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":266,"author":{"gitId":"yytan25"},"content":"                System.out.printf(\"No tasks with your keyword. Please try again.%n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":267,"author":{"gitId":"yytan25"},"content":"                ui.printHorizontalLine();","lastModifiedDate":"2023-09-01"},{"lineNumber":268,"author":{"gitId":"yytan25"},"content":"            } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":269,"author":{"gitId":"yytan25"},"content":"                System.out.printf(\"Here are the matching tasks in your list:%n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":270,"author":{"gitId":"yytan25"},"content":"                for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":271,"author":{"gitId":"yytan25"},"content":"                    System.out.printf(\"%d. \" + matchingTasks.get(i).toString()","lastModifiedDate":"2023-09-01"},{"lineNumber":272,"author":{"gitId":"yytan25"},"content":"                            + \"%n\", i + 1);","lastModifiedDate":"2023-09-01"},{"lineNumber":273,"author":{"gitId":"yytan25"},"content":"                }","lastModifiedDate":"2023-09-01"},{"lineNumber":274,"author":{"gitId":"yytan25"},"content":"                ui.printEndOfOperation();","lastModifiedDate":"2023-09-01"},{"lineNumber":275,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":276,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":277,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":278,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":279,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":280,"author":{"gitId":"yytan25"},"content":"     * Terminates the {@code Duke} object.","lastModifiedDate":"2023-09-01"},{"lineNumber":281,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":282,"author":{"gitId":"yytan25"},"content":"     * @param status Indicates the cause of termination as follows:","lastModifiedDate":"2023-09-01"},{"lineNumber":283,"author":{"gitId":"yytan25"},"content":"     *               0 - Normal operations.","lastModifiedDate":"2023-09-01"},{"lineNumber":284,"author":{"gitId":"yytan25"},"content":"     *               1 - Excessive invalid inputs from user.","lastModifiedDate":"2023-09-01"},{"lineNumber":285,"author":{"gitId":"yytan25"},"content":"     *               2 - When {@code FileNotFoundException} is thrown.","lastModifiedDate":"2023-09-01"},{"lineNumber":286,"author":{"gitId":"yytan25"},"content":"     * @throws IOException When the {@code saveTasksToDisk()} method in the {@code Storage} class","lastModifiedDate":"2023-09-01"},{"lineNumber":287,"author":{"gitId":"yytan25"},"content":"     *     fails to function properly.","lastModifiedDate":"2023-09-01"},{"lineNumber":288,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":289,"author":{"gitId":"yytan25"},"content":"    public void exit(int status) throws IOException {","lastModifiedDate":"2023-08-26"},{"lineNumber":290,"author":{"gitId":"yytan25"},"content":"        storage.saveTasksToDisk(\"./data/tasks.txt\", tasks);","lastModifiedDate":"2023-09-01"},{"lineNumber":291,"author":{"gitId":"yytan25"},"content":"        if (status \u003d\u003d 1) {","lastModifiedDate":"2023-08-26"},{"lineNumber":292,"author":{"gitId":"yytan25"},"content":"            System.out.printf(\"I\u0027ve had enough of your nonsense!%n\"","lastModifiedDate":"2023-09-05"},{"lineNumber":293,"author":{"gitId":"yytan25"},"content":"                    + \"Don\u0027t let me see you again!%n\");","lastModifiedDate":"2023-09-05"},{"lineNumber":294,"author":{"gitId":"yytan25"},"content":"        } else if (status \u003d\u003d 0) {","lastModifiedDate":"2023-08-26"},{"lineNumber":295,"author":{"gitId":"yytan25"},"content":"            System.out.println(\"Finally I can rest. Bye!\");","lastModifiedDate":"2023-08-24"},{"lineNumber":296,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":297,"author":{"gitId":"yytan25"},"content":"        ui.printHorizontalLine();","lastModifiedDate":"2023-09-01"},{"lineNumber":298,"author":{"gitId":"yytan25"},"content":"        System.exit(0);","lastModifiedDate":"2023-08-24"},{"lineNumber":299,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":300,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":301,"author":{"gitId":"yytan25"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2023-08-26"},{"lineNumber":302,"author":{"gitId":"yytan25"},"content":"        new Duke();","lastModifiedDate":"2023-08-19"},{"lineNumber":303,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":304,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"yytan25":301,"-":3}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":" * The {@code Event} class.","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"    protected LocalDateTime start;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"    protected LocalDateTime end;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"     * Constructs a new {@code Event} object, with {@code isCompleted} set to false.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"     * @param details Details of the {@code Event}.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"     * @param start Start date and time of the {@code Event}, stored as a {@code LocalDateTime} object.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"     * @param end End date and time of the {@code Event}, stored as a {@code LocalDateTime} object.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"    public Event(String details, LocalDateTime start, LocalDateTime end) {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"        super(details);","lastModifiedDate":"2023-08-20"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-08-20"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-08-20"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"     * Loads a {@code Event} object that was previously stored in the hard disk.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"     * The {@code isCompleted} parameter corresponds to the completion status in the last","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"     * instance of {@code Duke}.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"     * @param details Details of the {@code Event}.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"     * @param isCompleted Completion status of the {@code Event}.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"     * @param start Start date and time of the {@code Event}, stored as a {@code LocalDateTime} object.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"     * @param end End date and time of the {@code Event}, stored as a {@code LocalDateTime} object.","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"yytan25"},"content":"    public Event(String details, boolean isCompleted, LocalDateTime start,","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"yytan25"},"content":"                 LocalDateTime end) {","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"yytan25"},"content":"        super(details, isCompleted);","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"yytan25"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"yytan25"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-08-26"},{"lineNumber":42,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":43,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":44,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"yytan25"},"content":"     * Returns the string representation of the {@code Event}, to be","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"yytan25"},"content":"     * printed in the {@code list} method.","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"yytan25"},"content":"     * @return String representation of the {@code Event}.","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"yytan25"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":51,"author":{"gitId":"yytan25"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":52,"author":{"gitId":"yytan25"},"content":"        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"yytan25"},"content":"        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"yytan25"},"content":"        String startDate \u003d this.start.toLocalDate().format(dateFormatter);","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"yytan25"},"content":"        String endDate \u003d this.end.toLocalDate().format(dateFormatter);","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"yytan25"},"content":"        String startTime \u003d this.start.toLocalTime().format(timeFormatter);","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"yytan25"},"content":"        String endTime \u003d this.end.toLocalTime().format(timeFormatter);","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"yytan25"},"content":"        return \"[E]\" + super.toString() + String.format(","lastModifiedDate":"2023-08-20"},{"lineNumber":59,"author":{"gitId":"yytan25"},"content":"                \" (from: %s to: %s)\",","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"yytan25"},"content":"                startDate + \" \" + startTime,","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"yytan25"},"content":"                endDate + \" \" + endTime);","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":63,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"yytan25":63}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"import java.util.InputMismatchException;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":" * The {@code Parser} class. Deals with making sense of the user input.","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"public class Parser {","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"    private final Ui ui;","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"    private final Duke duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"    private final TaskList tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"     * Enumeration of all possible user commands.","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"    public enum Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"        TASK, TODO, DEADLINE, EVENT, LIST, MARK, UNMARK, DELETE, COMMANDS, BYE, FIND","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"     * Constructs a new {@code Parser} object.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"     * Can only be instantiated with a {@code Duke} object.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"     * @param duke {@code Duke} object that called the constructor.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"     * @param tasks {@code TaskList} object instantiated by the same {@code Duke} object.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"     * @param ui {@code Ui} object instantiated by the same {@code Duke} object.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"yytan25"},"content":"    Parser(Duke duke, duke.TaskList tasks, duke.Ui ui) { // Can only be instantiated with a Duke object","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"yytan25"},"content":"        this.duke \u003d duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"yytan25"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"yytan25"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"yytan25"},"content":"     * Parses the user input from the {@code Scanner}.","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"yytan25"},"content":"     * If the input corresponds to one of the valid commands, the {@code executeCommand} method","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"yytan25"},"content":"     * will execute the command. Otherwise, an error message will be printed. (This will be","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"yytan25"},"content":"     * treated as an invalid input.)","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"yytan25"},"content":"     * @param message Input from the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"yytan25"},"content":"    public void readInput(String message) {","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"yytan25"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"yytan25"},"content":"            executeCommand(Command.valueOf(message.toUpperCase()));","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"yytan25"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":54,"author":{"gitId":"yytan25"},"content":"            System.out.printf(\"I\u0027m just a robot!%n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"yytan25"},"content":"                    + \"I don\u0027t understand what %s is!%n\", message);","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"yytan25"},"content":"            ui.incrementInvalidInputs();","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"yytan25"},"content":"            ui.printHorizontalLine();","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"yytan25"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":59,"author":{"gitId":"yytan25"},"content":"            System.out.printf(\"Something went wrong: \" + e);","lastModifiedDate":"2023-09-05"},{"lineNumber":60,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"yytan25"},"content":"     * Executes the command generated from the {@code readInput} method.","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"yytan25"},"content":"     * @param command Command to be executed.","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"yytan25"},"content":"    public void executeCommand(Command command) throws IOException {","lastModifiedDate":"2023-09-05"},{"lineNumber":69,"author":{"gitId":"yytan25"},"content":"        switch (command) {","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"yytan25"},"content":"        case TASK:","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"yytan25"},"content":"            duke.createTask();","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"yytan25"},"content":"        case TODO:","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"yytan25"},"content":"            duke.createToDo();","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"yytan25"},"content":"        case DEADLINE:","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"yytan25"},"content":"            duke.createDeadline();","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"yytan25"},"content":"        case EVENT:","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"yytan25"},"content":"            duke.createEvent();","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"yytan25"},"content":"        case LIST:","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"yytan25"},"content":"            duke.list();","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"yytan25"},"content":"        case MARK:","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"yytan25"},"content":"            duke.markAsComplete();","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"yytan25"},"content":"        case UNMARK:","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"yytan25"},"content":"            duke.markAsIncomplete();","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"yytan25"},"content":"        case DELETE:","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"yytan25"},"content":"            duke.deleteTask();","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"yytan25"},"content":"        case COMMANDS:","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"yytan25"},"content":"            ui.printCommands();","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"yytan25"},"content":"        case BYE:","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"yytan25"},"content":"            duke.exit(0);","lastModifiedDate":"2023-09-05"},{"lineNumber":99,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"yytan25"},"content":"        case FIND:","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"yytan25"},"content":"            duke.findTask();","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"yytan25"},"content":"        default:","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"yytan25"},"content":"            // Shouldn\u0027t reach here","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"yytan25"},"content":"            // Input errors should already be caught in the readInput() method.","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"yytan25"},"content":"     * Instantiates a {@code Scanner} object that reads the user\u0027s input when attempting","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"yytan25"},"content":"     * to instantiate a {@code Task}. Then, checks if the details are empty, or if there","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"yytan25"},"content":"     * already exists a {@code Task} of the same name.","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"yytan25"},"content":"     * @param taskType Type of the {@code Task} being instantiated.","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"yytan25"},"content":"     * @return Details of the {@code Task} for valid inputs; {@code null} otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"yytan25"},"content":"    public String checkTaskInput(String taskType) {","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"yytan25"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-09-01"},{"lineNumber":120,"author":{"gitId":"yytan25"},"content":"        System.out.printf(\"Input %s details.%n\", taskType);","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"yytan25"},"content":"        String message \u003d sc.nextLine();","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"yytan25"},"content":"        if (message.isBlank()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"yytan25"},"content":"            System.out.printf(\"The %s details cannot be empty.%n\", taskType);","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"yytan25"},"content":"            ui.printEndOfOperation();","lastModifiedDate":"2023-09-01"},{"lineNumber":125,"author":{"gitId":"yytan25"},"content":"            return null;","lastModifiedDate":"2023-09-01"},{"lineNumber":126,"author":{"gitId":"yytan25"},"content":"        } else if (tasks.checkDuplicates(message)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":127,"author":{"gitId":"yytan25"},"content":"            System.out.printf(\"Task %s already exists.%n\", message);","lastModifiedDate":"2023-09-01"},{"lineNumber":128,"author":{"gitId":"yytan25"},"content":"            ui.printEndOfOperation();","lastModifiedDate":"2023-09-01"},{"lineNumber":129,"author":{"gitId":"yytan25"},"content":"            return null;","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":131,"author":{"gitId":"yytan25"},"content":"            return message;","lastModifiedDate":"2023-09-01"},{"lineNumber":132,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":134,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":135,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":136,"author":{"gitId":"yytan25"},"content":"     * Instantiates a {@code Scanner} object that reads the user\u0027s input when inputting a","lastModifiedDate":"2023-09-01"},{"lineNumber":137,"author":{"gitId":"yytan25"},"content":"     * date. Then, checks if the details are empty, and if the format of the date is valid.","lastModifiedDate":"2023-09-01"},{"lineNumber":138,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":139,"author":{"gitId":"yytan25"},"content":"     * @param taskType Type of the {@code Task} being instantiated.","lastModifiedDate":"2023-09-01"},{"lineNumber":140,"author":{"gitId":"yytan25"},"content":"     * @param input Description of the date input, to be printed in the UI.","lastModifiedDate":"2023-09-01"},{"lineNumber":141,"author":{"gitId":"yytan25"},"content":"     * @return {@code LocalDate} object corresponding to the user input if valid;","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"yytan25"},"content":"     *     null otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":144,"author":{"gitId":"yytan25"},"content":"    public LocalDate checkDateInput(String taskType, String input) {","lastModifiedDate":"2023-09-01"},{"lineNumber":145,"author":{"gitId":"yytan25"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-09-01"},{"lineNumber":146,"author":{"gitId":"yytan25"},"content":"        System.out.printf(\"Input %s %s date. (Required format: YYYY-MM-DD)%n\",","lastModifiedDate":"2023-09-01"},{"lineNumber":147,"author":{"gitId":"yytan25"},"content":"                taskType, input);","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"yytan25"},"content":"        String message \u003d sc.nextLine();","lastModifiedDate":"2023-09-01"},{"lineNumber":149,"author":{"gitId":"yytan25"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":150,"author":{"gitId":"yytan25"},"content":"            if (message.isBlank()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":151,"author":{"gitId":"yytan25"},"content":"                System.out.printf(\"The %s %s cannot be empty.%n\", taskType, input);","lastModifiedDate":"2023-09-01"},{"lineNumber":152,"author":{"gitId":"yytan25"},"content":"                ui.printEndOfOperation();","lastModifiedDate":"2023-09-01"},{"lineNumber":153,"author":{"gitId":"yytan25"},"content":"                return null;","lastModifiedDate":"2023-09-01"},{"lineNumber":154,"author":{"gitId":"yytan25"},"content":"            } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":155,"author":{"gitId":"yytan25"},"content":"                return LocalDate.parse(message);","lastModifiedDate":"2023-09-01"},{"lineNumber":156,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":157,"author":{"gitId":"yytan25"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":158,"author":{"gitId":"yytan25"},"content":"            System.out.printf(\"Invalid date format. Please try again.%n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":159,"author":{"gitId":"yytan25"},"content":"            ui.printEndOfOperation();","lastModifiedDate":"2023-09-01"},{"lineNumber":160,"author":{"gitId":"yytan25"},"content":"            return null;","lastModifiedDate":"2023-09-01"},{"lineNumber":161,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":162,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":163,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":164,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":165,"author":{"gitId":"yytan25"},"content":"     * Instantiates a {@code Scanner} object that reads the user\u0027s input when inputting a","lastModifiedDate":"2023-09-01"},{"lineNumber":166,"author":{"gitId":"yytan25"},"content":"     * time. Then, checks if the details are empty, and if the format of the time is valid.","lastModifiedDate":"2023-09-01"},{"lineNumber":167,"author":{"gitId":"yytan25"},"content":"     * If the task is a {@code Deadline}, and there is no input from the user, {@code checkTimeInput}","lastModifiedDate":"2023-09-01"},{"lineNumber":168,"author":{"gitId":"yytan25"},"content":"     * will return {@code LocalTime.of(23, 59)}.","lastModifiedDate":"2023-09-01"},{"lineNumber":169,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":170,"author":{"gitId":"yytan25"},"content":"     * @param taskType Type of the {@code Task} being instantiated.","lastModifiedDate":"2023-09-01"},{"lineNumber":171,"author":{"gitId":"yytan25"},"content":"     * @param input Description of the time input, to be printed in the UI.","lastModifiedDate":"2023-09-01"},{"lineNumber":172,"author":{"gitId":"yytan25"},"content":"     * @return {@code LocalTime} object corresponding to the user input if valid;","lastModifiedDate":"2023-09-01"},{"lineNumber":173,"author":{"gitId":"yytan25"},"content":"     *     null otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":174,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":175,"author":{"gitId":"yytan25"},"content":"    public LocalTime checkTimeInput(String taskType, String input) {","lastModifiedDate":"2023-09-01"},{"lineNumber":176,"author":{"gitId":"yytan25"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-09-01"},{"lineNumber":177,"author":{"gitId":"yytan25"},"content":"        System.out.printf(\"Input %s %s time. (Required format: HH:MM)%n\",","lastModifiedDate":"2023-09-01"},{"lineNumber":178,"author":{"gitId":"yytan25"},"content":"                taskType, input);","lastModifiedDate":"2023-09-01"},{"lineNumber":179,"author":{"gitId":"yytan25"},"content":"        String message \u003d sc.nextLine();","lastModifiedDate":"2023-09-01"},{"lineNumber":180,"author":{"gitId":"yytan25"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":181,"author":{"gitId":"yytan25"},"content":"            if (message.isBlank()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":182,"author":{"gitId":"yytan25"},"content":"                if (taskType.equals(\"deadline\") \u0026\u0026 input.equals(\"due\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":183,"author":{"gitId":"yytan25"},"content":"                    return LocalTime.of(23, 59);","lastModifiedDate":"2023-09-01"},{"lineNumber":184,"author":{"gitId":"yytan25"},"content":"                } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":185,"author":{"gitId":"yytan25"},"content":"                    System.out.printf(\"The %s %s cannot be empty.%n\", taskType, input);","lastModifiedDate":"2023-09-01"},{"lineNumber":186,"author":{"gitId":"yytan25"},"content":"                    ui.printEndOfOperation();","lastModifiedDate":"2023-09-01"},{"lineNumber":187,"author":{"gitId":"yytan25"},"content":"                    return null;","lastModifiedDate":"2023-09-01"},{"lineNumber":188,"author":{"gitId":"yytan25"},"content":"                }","lastModifiedDate":"2023-09-01"},{"lineNumber":189,"author":{"gitId":"yytan25"},"content":"            } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":190,"author":{"gitId":"yytan25"},"content":"                return LocalTime.parse(message);","lastModifiedDate":"2023-09-01"},{"lineNumber":191,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":192,"author":{"gitId":"yytan25"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":193,"author":{"gitId":"yytan25"},"content":"            System.out.printf(\"Invalid time format. Please try again.%n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":194,"author":{"gitId":"yytan25"},"content":"            ui.printEndOfOperation();","lastModifiedDate":"2023-09-01"},{"lineNumber":195,"author":{"gitId":"yytan25"},"content":"            return null;","lastModifiedDate":"2023-09-01"},{"lineNumber":196,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":197,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":198,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":199,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":200,"author":{"gitId":"yytan25"},"content":"     * Checks if the input {@code LocalDateTime} is at or after the current system time.","lastModifiedDate":"2023-09-01"},{"lineNumber":201,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":202,"author":{"gitId":"yytan25"},"content":"     * @param taskType Type of the {@code Task} being instantiated.","lastModifiedDate":"2023-09-01"},{"lineNumber":203,"author":{"gitId":"yytan25"},"content":"     * @param dateTime {@code LocalDateTime} of the {@code Task}.","lastModifiedDate":"2023-09-01"},{"lineNumber":204,"author":{"gitId":"yytan25"},"content":"     * @return {@code true} if the {@code LocalDateTime} is at or after the current system time;","lastModifiedDate":"2023-09-01"},{"lineNumber":205,"author":{"gitId":"yytan25"},"content":"     *     {@code false} otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":206,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":207,"author":{"gitId":"yytan25"},"content":"    public boolean checkStartDateTime(String taskType, LocalDateTime dateTime) {","lastModifiedDate":"2023-09-01"},{"lineNumber":208,"author":{"gitId":"yytan25"},"content":"        if (dateTime.isBefore(LocalDateTime.now())) {","lastModifiedDate":"2023-09-01"},{"lineNumber":209,"author":{"gitId":"yytan25"},"content":"            System.out.printf(\"Cannot create %s before the current time. \"","lastModifiedDate":"2023-09-01"},{"lineNumber":210,"author":{"gitId":"yytan25"},"content":"                    + \"Please try again.%n\", taskType);","lastModifiedDate":"2023-09-01"},{"lineNumber":211,"author":{"gitId":"yytan25"},"content":"            ui.printEndOfOperation();","lastModifiedDate":"2023-09-01"},{"lineNumber":212,"author":{"gitId":"yytan25"},"content":"            return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":213,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":214,"author":{"gitId":"yytan25"},"content":"        return true;","lastModifiedDate":"2023-09-01"},{"lineNumber":215,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":216,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":217,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":218,"author":{"gitId":"yytan25"},"content":"     * Checks if the end time of a {@code Task} is at or after the start time.","lastModifiedDate":"2023-09-01"},{"lineNumber":219,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":220,"author":{"gitId":"yytan25"},"content":"     * @param taskType Type of the {@code Task} being instantiated. Currently, only {@code Event}s","lastModifiedDate":"2023-09-01"},{"lineNumber":221,"author":{"gitId":"yytan25"},"content":"     *                 require this method.","lastModifiedDate":"2023-09-01"},{"lineNumber":222,"author":{"gitId":"yytan25"},"content":"     * @param start Start time of the {@code Task}.","lastModifiedDate":"2023-09-01"},{"lineNumber":223,"author":{"gitId":"yytan25"},"content":"     * @param end End time of the {@code Task}.","lastModifiedDate":"2023-09-01"},{"lineNumber":224,"author":{"gitId":"yytan25"},"content":"     * @return {@code true} if the end time is at or after the start time; {@code false} otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":225,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":226,"author":{"gitId":"yytan25"},"content":"    public boolean checkTimeInterval(String taskType, LocalDateTime start, LocalDateTime end) {","lastModifiedDate":"2023-09-01"},{"lineNumber":227,"author":{"gitId":"yytan25"},"content":"        if (end.isBefore(start)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":228,"author":{"gitId":"yytan25"},"content":"            System.out.printf(\"Invalid %s time interval. Please try again.%n\", taskType);","lastModifiedDate":"2023-09-01"},{"lineNumber":229,"author":{"gitId":"yytan25"},"content":"            ui.printEndOfOperation();","lastModifiedDate":"2023-09-01"},{"lineNumber":230,"author":{"gitId":"yytan25"},"content":"            return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":231,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":232,"author":{"gitId":"yytan25"},"content":"        return true;","lastModifiedDate":"2023-09-01"},{"lineNumber":233,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":234,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":235,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":236,"author":{"gitId":"yytan25"},"content":"     * Gets all tasks in the {@code TaskList} containing a keyword input by the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":237,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":238,"author":{"gitId":"yytan25"},"content":"     * @return {@code ArrayList} of tasks matching the keyword; {@code null} if the user input is blank.","lastModifiedDate":"2023-09-01"},{"lineNumber":239,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":240,"author":{"gitId":"yytan25"},"content":"    public ArrayList\u003cTask\u003e getMatchingTasks() {","lastModifiedDate":"2023-09-01"},{"lineNumber":241,"author":{"gitId":"yytan25"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-09-01"},{"lineNumber":242,"author":{"gitId":"yytan25"},"content":"        System.out.printf(\"Please input search keyword.%n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":243,"author":{"gitId":"yytan25"},"content":"        String keyword \u003d sc.nextLine();","lastModifiedDate":"2023-09-01"},{"lineNumber":244,"author":{"gitId":"yytan25"},"content":"        if (keyword.isBlank()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":245,"author":{"gitId":"yytan25"},"content":"            return null;","lastModifiedDate":"2023-09-01"},{"lineNumber":246,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":247,"author":{"gitId":"yytan25"},"content":"            ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":248,"author":{"gitId":"yytan25"},"content":"            for (int i \u003d 0; i \u003c tasks.getNumOfTasks(); i++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":249,"author":{"gitId":"yytan25"},"content":"                Task t \u003d tasks.get(i);","lastModifiedDate":"2023-09-01"},{"lineNumber":250,"author":{"gitId":"yytan25"},"content":"                String details \u003d t.getDetails();","lastModifiedDate":"2023-09-01"},{"lineNumber":251,"author":{"gitId":"yytan25"},"content":"                if (details.contains(keyword)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":252,"author":{"gitId":"yytan25"},"content":"                    matchingTasks.add(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":253,"author":{"gitId":"yytan25"},"content":"                }","lastModifiedDate":"2023-09-01"},{"lineNumber":254,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":255,"author":{"gitId":"yytan25"},"content":"            return matchingTasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":256,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":257,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":258,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":259,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":260,"author":{"gitId":"yytan25"},"content":"     * Instantiates a new {@code Scanner} object that reads the user\u0027s input when attempting","lastModifiedDate":"2023-09-01"},{"lineNumber":261,"author":{"gitId":"yytan25"},"content":"     * to mark, unmark, or delete a {@code Task}. Only positive integer inputs less than or","lastModifiedDate":"2023-09-01"},{"lineNumber":262,"author":{"gitId":"yytan25"},"content":"     * equal to the total number of tasks are accepted.","lastModifiedDate":"2023-09-01"},{"lineNumber":263,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":264,"author":{"gitId":"yytan25"},"content":"     * @param message Description of the command, to be printed in the UI.","lastModifiedDate":"2023-09-01"},{"lineNumber":265,"author":{"gitId":"yytan25"},"content":"     * @return {@code taskNumber} that corresponds to the index of the {@code Task} in the","lastModifiedDate":"2023-09-01"},{"lineNumber":266,"author":{"gitId":"yytan25"},"content":"     *     {@code TaskList} if input is valid; {@code null} otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":267,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":268,"author":{"gitId":"yytan25"},"content":"    public Integer launchConfirmationScreen(String message) {","lastModifiedDate":"2023-09-01"},{"lineNumber":269,"author":{"gitId":"yytan25"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-09-01"},{"lineNumber":270,"author":{"gitId":"yytan25"},"content":"        System.out.printf(\"Please input the task number you wish to %s.%n\",","lastModifiedDate":"2023-09-01"},{"lineNumber":271,"author":{"gitId":"yytan25"},"content":"                message);","lastModifiedDate":"2023-09-01"},{"lineNumber":272,"author":{"gitId":"yytan25"},"content":"        ui.printHorizontalLine();","lastModifiedDate":"2023-09-01"},{"lineNumber":273,"author":{"gitId":"yytan25"},"content":"        for (int i \u003d 0; i \u003c tasks.getNumOfTasks(); i++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":274,"author":{"gitId":"yytan25"},"content":"            System.out.printf(\"%d. \" + tasks.get(i).toString()","lastModifiedDate":"2023-09-01"},{"lineNumber":275,"author":{"gitId":"yytan25"},"content":"                    + \"%n\", i + 1);","lastModifiedDate":"2023-09-01"},{"lineNumber":276,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":277,"author":{"gitId":"yytan25"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":278,"author":{"gitId":"yytan25"},"content":"            int taskNumber \u003d sc.nextInt();","lastModifiedDate":"2023-09-01"},{"lineNumber":279,"author":{"gitId":"yytan25"},"content":"            if (taskNumber \u003e tasks.getNumOfTasks() || taskNumber \u003c 1) {","lastModifiedDate":"2023-09-01"},{"lineNumber":280,"author":{"gitId":"yytan25"},"content":"                System.out.println(\"Request unsuccessful. (reason: invalid task number)\");","lastModifiedDate":"2023-09-01"},{"lineNumber":281,"author":{"gitId":"yytan25"},"content":"                return null;","lastModifiedDate":"2023-09-01"},{"lineNumber":282,"author":{"gitId":"yytan25"},"content":"            } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":283,"author":{"gitId":"yytan25"},"content":"                return taskNumber;","lastModifiedDate":"2023-09-01"},{"lineNumber":284,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":285,"author":{"gitId":"yytan25"},"content":"        } catch (InputMismatchException e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":286,"author":{"gitId":"yytan25"},"content":"            System.out.println(\"Request unsuccessful. (reason: invalid input)\");","lastModifiedDate":"2023-09-01"},{"lineNumber":287,"author":{"gitId":"yytan25"},"content":"            return null;","lastModifiedDate":"2023-09-01"},{"lineNumber":288,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":289,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":290,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":291,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"yytan25":291}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"import java.io.File;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":" * The {@code Storage} class. Deals with writing to, and reading from, text files.","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"public class Storage {","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"    private final TaskList tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"    public Storage(duke.TaskList tasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"     * Greets the user and creates the requisite folder and text file, if required.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"    @SuppressWarnings(\"ResultOfMethodCallIgnored\")","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"    public void launchOnStart() {","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"        File f \u003d new File(\"./data\");","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"        f.mkdirs();","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"            File file \u003d new File(\"./data/tasks.txt\");","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"            file.createNewFile();","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"            System.out.println(\"Due to technical issues, I\u0027m only available in guest mode.%n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"                    + \"I sincerely apologise for the inconvenience caused.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"yytan25"},"content":"     * Reads previously saved tasks from the specified {@code filePath}, parses them and","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"yytan25"},"content":"     * directly adds them to the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"yytan25"},"content":"     * @param filePath Relative path of the text file containing details on the tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"yytan25"},"content":"     * @throws FileNotFoundException When the system is unable to find the specified file.","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"yytan25"},"content":"     * @throws IllegalArgumentException When the system is unable to parse the saved tasks,","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"yytan25"},"content":"     *     possibly due to the file being corrupted.","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"yytan25"},"content":"    public void readTasksFromDisk(String filePath) throws FileNotFoundException,","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"yytan25"},"content":"            IllegalArgumentException {","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"yytan25"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"yytan25"},"content":"        Scanner sc \u003d new Scanner(f);","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"yytan25"},"content":"        while (sc.hasNext()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"yytan25"},"content":"            String[] args \u003d sc.nextLine().split(\"/\", -1);","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"yytan25"},"content":"            duke.TaskList.TaskType type;","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"yytan25"},"content":"            LocalDateTime due \u003d null;","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"yytan25"},"content":"            LocalDateTime start \u003d null;","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"yytan25"},"content":"            LocalDateTime end \u003d null;","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"yytan25"},"content":"            try {","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"yytan25"},"content":"                type \u003d TaskList.TaskType.valueOf(args[0].toUpperCase());","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"yytan25"},"content":"            } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"yytan25"},"content":"                System.out.println(\"Task not found\");","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"yytan25"},"content":"                return;","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"yytan25"},"content":"            String details \u003d args[1];","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"yytan25"},"content":"            boolean isCompleted \u003d args[2].equals(\"Y\");","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"yytan25"},"content":"            try {","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"yytan25"},"content":"                if (type \u003d\u003d TaskList.TaskType.DEADLINE) {","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"yytan25"},"content":"                    due \u003d LocalDateTime.parse(args[3]);","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"yytan25"},"content":"                } else if (type \u003d\u003d TaskList.TaskType.EVENT) {","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"yytan25"},"content":"                    start \u003d LocalDateTime.parse(args[3]);","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"yytan25"},"content":"                    end \u003d LocalDateTime.parse(args[4]);","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"yytan25"},"content":"                }","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"yytan25"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"yytan25"},"content":"                System.out.println(\"Could not retrieve date and/or time\");","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"yytan25"},"content":"                return;","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"yytan25"},"content":"            switch (type) {","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"yytan25"},"content":"            case TASK:","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"yytan25"},"content":"                Task t \u003d new Task(details, isCompleted);","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"yytan25"},"content":"                tasks.add(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"yytan25"},"content":"                break;","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"yytan25"},"content":"            case TODO:","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"yytan25"},"content":"                ToDo todo \u003d new ToDo(details, isCompleted);","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"yytan25"},"content":"                tasks.add(todo);","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"yytan25"},"content":"                break;","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"yytan25"},"content":"            case DEADLINE:","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"yytan25"},"content":"                Deadline d \u003d new Deadline(details, isCompleted, due);","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"yytan25"},"content":"                tasks.add(d);","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"yytan25"},"content":"                break;","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"yytan25"},"content":"            case EVENT:","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"yytan25"},"content":"                Event e \u003d new Event(details, isCompleted, start, end);","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"yytan25"},"content":"                tasks.add(e);","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"yytan25"},"content":"                break;","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"yytan25"},"content":"            default:","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"yytan25"},"content":"                // Shouldn\u0027t reach here","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"yytan25"},"content":"                break;","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"yytan25"},"content":"     * Saves the tasks in the {@code TaskList} in the text file specified by the {@code filePath}.","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"yytan25"},"content":"     * @param filePath Relative path of the text file to be written to.","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"yytan25"},"content":"     * @param tasks {@code TaskList} containing the current tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"yytan25"},"content":"     * @throws IOException When the {@code FileWriter} is unable to write to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"yytan25"},"content":"    public void saveTasksToDisk(String filePath, duke.TaskList tasks) throws IOException {","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"yytan25"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"yytan25"},"content":"        BufferedWriter bw \u003d new BufferedWriter(fw);","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"yytan25"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"yytan25"},"content":"            for (int i \u003d 0; i \u003c tasks.getNumOfTasks(); i++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"yytan25"},"content":"                duke.TaskList.TaskType type \u003d tasks.getTaskType(i);","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"yytan25"},"content":"                Task t \u003d tasks.get(i);","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"yytan25"},"content":"                switch (type) {","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"yytan25"},"content":"                case TODO:","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"yytan25"},"content":"                    bw.write(String.format(\"ToDo/%s/%c\",","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"yytan25"},"content":"                            t.getDetails(),","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"yytan25"},"content":"                            t.isCompleted ? \u0027Y\u0027 : \u0027N\u0027));","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"yytan25"},"content":"                    break;","lastModifiedDate":"2023-09-01"},{"lineNumber":120,"author":{"gitId":"yytan25"},"content":"                case DEADLINE:","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"yytan25"},"content":"                    bw.write(String.format(\"Deadline/%s/%c/%s\",","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"yytan25"},"content":"                            t.getDetails(),","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"yytan25"},"content":"                            t.isCompleted ? \u0027Y\u0027 : \u0027N\u0027, (","lastModifiedDate":"2023-09-05"},{"lineNumber":124,"author":{"gitId":"yytan25"},"content":"                            (Deadline) t).due));","lastModifiedDate":"2023-09-05"},{"lineNumber":125,"author":{"gitId":"yytan25"},"content":"                    break;","lastModifiedDate":"2023-09-01"},{"lineNumber":126,"author":{"gitId":"yytan25"},"content":"                case EVENT:","lastModifiedDate":"2023-09-01"},{"lineNumber":127,"author":{"gitId":"yytan25"},"content":"                    bw.write(String.format(\"Event/%s/%c/%s/%s\",","lastModifiedDate":"2023-09-01"},{"lineNumber":128,"author":{"gitId":"yytan25"},"content":"                            t.getDetails(),","lastModifiedDate":"2023-09-01"},{"lineNumber":129,"author":{"gitId":"yytan25"},"content":"                            t.isCompleted ? \u0027Y\u0027 : \u0027N\u0027, (","lastModifiedDate":"2023-09-05"},{"lineNumber":130,"author":{"gitId":"yytan25"},"content":"                            (Event) t).start, (","lastModifiedDate":"2023-09-05"},{"lineNumber":131,"author":{"gitId":"yytan25"},"content":"                            (Event) t).end));","lastModifiedDate":"2023-09-05"},{"lineNumber":132,"author":{"gitId":"yytan25"},"content":"                    break;","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"yytan25"},"content":"                case TASK:","lastModifiedDate":"2023-09-01"},{"lineNumber":134,"author":{"gitId":"yytan25"},"content":"                    bw.write(String.format(\"Task/%s/%c\",","lastModifiedDate":"2023-09-01"},{"lineNumber":135,"author":{"gitId":"yytan25"},"content":"                            t.getDetails(),","lastModifiedDate":"2023-09-01"},{"lineNumber":136,"author":{"gitId":"yytan25"},"content":"                            t.isCompleted ? \u0027Y\u0027 : \u0027N\u0027));","lastModifiedDate":"2023-09-01"},{"lineNumber":137,"author":{"gitId":"yytan25"},"content":"                    break;","lastModifiedDate":"2023-09-01"},{"lineNumber":138,"author":{"gitId":"yytan25"},"content":"                default:","lastModifiedDate":"2023-09-01"},{"lineNumber":139,"author":{"gitId":"yytan25"},"content":"                    // Shouldn\u0027t reach here","lastModifiedDate":"2023-09-01"},{"lineNumber":140,"author":{"gitId":"yytan25"},"content":"                    break;","lastModifiedDate":"2023-09-01"},{"lineNumber":141,"author":{"gitId":"yytan25"},"content":"                }","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"yytan25"},"content":"                bw.newLine();","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":144,"author":{"gitId":"yytan25"},"content":"            bw.flush();","lastModifiedDate":"2023-09-01"},{"lineNumber":145,"author":{"gitId":"yytan25"},"content":"            bw.close();","lastModifiedDate":"2023-09-01"},{"lineNumber":146,"author":{"gitId":"yytan25"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":147,"author":{"gitId":"yytan25"},"content":"            System.out.println(\"Something went wrong: \" + e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":149,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":150,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"yytan25":150}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":" * The {@code Task} class. Contains all methods that are common to any generic task.","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"public class Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"    protected String details;","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"    protected boolean isCompleted;","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"     * Constructs a new {@code Task} object, with {@code isCompleted} set to false.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"     * @param details Details of the {@code Task}.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"    public Task(String details) {","lastModifiedDate":"2023-08-20"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"        this.details \u003d details;","lastModifiedDate":"2023-08-20"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"        this.isCompleted \u003d false;","lastModifiedDate":"2023-08-20"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"     * Loads a {@code Task} object that was previously stored in the hard disk.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"     * The {@code isCompleted} parameter corresponds to the completion status in the last","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"     * instance of {@code Duke}.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"     * @param details Details of the {@code Task}.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"     * @param isCompleted Completion status of the {@code Task}.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"    public Task(String details, boolean isCompleted) {","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"        this.details \u003d details;","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"        this.isCompleted \u003d isCompleted;","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"yytan25"},"content":"     * Sets the {@code Task} as completed.","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"yytan25"},"content":"    public void setCompleted() {","lastModifiedDate":"2023-08-20"},{"lineNumber":39,"author":{"gitId":"yytan25"},"content":"        this.isCompleted \u003d true;","lastModifiedDate":"2023-08-20"},{"lineNumber":40,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":41,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":42,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"yytan25"},"content":"     * Sets the {@code Task} as incomplete.","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"yytan25"},"content":"    public void setIncomplete() {","lastModifiedDate":"2023-08-20"},{"lineNumber":46,"author":{"gitId":"yytan25"},"content":"        this.isCompleted \u003d false;","lastModifiedDate":"2023-08-20"},{"lineNumber":47,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":48,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":49,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"yytan25"},"content":"     * Gets the details of the {@code Task}.","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"yytan25"},"content":"     * @return Details of the {@code Task.}","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"yytan25"},"content":"    protected String getDetails() {","lastModifiedDate":"2023-08-24"},{"lineNumber":55,"author":{"gitId":"yytan25"},"content":"        return this.details;","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":57,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":58,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"yytan25"},"content":"     * Returns the string representation of the {@code Task}, to be","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"yytan25"},"content":"     * printed in the {@code list} method.","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"yytan25"},"content":"     * @return String representation of the {@code Task}.","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"yytan25"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":65,"author":{"gitId":"yytan25"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":66,"author":{"gitId":"yytan25"},"content":"        if (this.isCompleted) {","lastModifiedDate":"2023-08-20"},{"lineNumber":67,"author":{"gitId":"yytan25"},"content":"            return \"[X] \" + this.details;","lastModifiedDate":"2023-08-20"},{"lineNumber":68,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-08-20"},{"lineNumber":69,"author":{"gitId":"yytan25"},"content":"            return \"[ ] \" + this.details;","lastModifiedDate":"2023-08-20"},{"lineNumber":70,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":71,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":72,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"yytan25":72}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":" * The {@code TaskList} class. Deals with storing tasks and performing","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":" * operations on tasks.","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"public class TaskList {","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"    private int numOfTasks \u003d 0;","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":"    private int numOfCompletedTasks \u003d 0;","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"     * Enumeration of all task types, for type checking purposes.","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"    public enum TaskType {","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"        TASK, TODO, DEADLINE, EVENT","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"     * Creates a new {@code ArrayList} to store the tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"    public TaskList() {","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"     * Adds a {@code Task} to the {@code ArrayList}.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"     * @param t {@code Task} to be added.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"    public void add(Task t) {","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"        tasks.add(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"yytan25"},"content":"        this.numOfTasks++;","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"yytan25"},"content":"        if (t.isCompleted) {","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"yytan25"},"content":"            this.numOfCompletedTasks++;","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"yytan25"},"content":"     * Gets the {@code Task} object at the specified index.","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"yytan25"},"content":"     * @param i Index of the {@code Task}.","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"yytan25"},"content":"     * @return {@code Task} object at index i.","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"yytan25"},"content":"    public Task get(int i) {","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"yytan25"},"content":"        if (i \u003e -1 \u0026\u0026 i \u003c numOfTasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"yytan25"},"content":"            return tasks.get(i);","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"yytan25"},"content":"            return null;","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"yytan25"},"content":"     * Gets the total number of {@code Task}s in the {@code ArrayList}.","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"yytan25"},"content":"     * @return Total number of {@code Task}s.","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"yytan25"},"content":"    public int getNumOfTasks() {","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"yytan25"},"content":"        return this.numOfTasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"yytan25"},"content":"     * Gets the total number of completed {@code Task}s in the {@code ArrayList}.","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"yytan25"},"content":"     * @return Total number of completed {@code Task}s.","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"yytan25"},"content":"    public int getNumOfCompletedTasks() {","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"yytan25"},"content":"        return this.numOfCompletedTasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"yytan25"},"content":"     * Checks if the {@code ArrayList} is empty.","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"yytan25"},"content":"     * @return {@code true} iff the {@code ArrayList} is empty; {@code false} otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"yytan25"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"yytan25"},"content":"        return this.numOfTasks \u003d\u003d 0;","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"yytan25"},"content":"     * Checks if there are completed tasks in the {@code ArrayList}.","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"yytan25"},"content":"     * @return {@code true} iff the {@code ArrayList} contains at least one completed task;","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"yytan25"},"content":"     *     {@code false} otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"yytan25"},"content":"    public boolean hasCompletedTasks() {","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"yytan25"},"content":"        return this.numOfCompletedTasks \u003e 0;","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"yytan25"},"content":"     * Increments the number of completed tasks when a {@code Task} is marked as complete.","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"yytan25"},"content":"    public void incrementCompletedTasks() {","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"yytan25"},"content":"        this.numOfCompletedTasks++;","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"yytan25"},"content":"     * Decrements the number of completed tasks when a {@code Task} is marked as incomplete.","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"yytan25"},"content":"    public void decrementCompletedTasks() {","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"yytan25"},"content":"        this.numOfCompletedTasks--;","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"yytan25"},"content":"     * Checks if there already exists a {@code Task} in the {@code ArrayList} with the","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"yytan25"},"content":"     * given details.","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"yytan25"},"content":"     * @param details Details to be checked.","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"yytan25"},"content":"     * @return {@code true} iff there exists a {@code Task} with the given details;","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"yytan25"},"content":"     *     false otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"yytan25"},"content":"    public boolean checkDuplicates(String details) {","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"yytan25"},"content":"        for (Task t : tasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"yytan25"},"content":"            if (details.equals(t.getDetails())) {","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"yytan25"},"content":"                return true;","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":120,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"yytan25"},"content":"        return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":125,"author":{"gitId":"yytan25"},"content":"     * Gets the {@code TaskType} of the {@code Task} at the specified index.","lastModifiedDate":"2023-09-01"},{"lineNumber":126,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":127,"author":{"gitId":"yytan25"},"content":"     * @param i Index of the {@code Task}.","lastModifiedDate":"2023-09-01"},{"lineNumber":128,"author":{"gitId":"yytan25"},"content":"     * @return {@code TaskType} of {@code Task} at index i.","lastModifiedDate":"2023-09-01"},{"lineNumber":129,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"yytan25"},"content":"    public TaskType getTaskType(int i) {","lastModifiedDate":"2023-09-01"},{"lineNumber":131,"author":{"gitId":"yytan25"},"content":"        Task t \u003d this.get(i);","lastModifiedDate":"2023-09-01"},{"lineNumber":132,"author":{"gitId":"yytan25"},"content":"        if (t instanceof ToDo) {","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"yytan25"},"content":"            return TaskType.TODO;","lastModifiedDate":"2023-09-01"},{"lineNumber":134,"author":{"gitId":"yytan25"},"content":"        } else if (t instanceof Deadline) {","lastModifiedDate":"2023-09-01"},{"lineNumber":135,"author":{"gitId":"yytan25"},"content":"            return TaskType.DEADLINE;","lastModifiedDate":"2023-09-01"},{"lineNumber":136,"author":{"gitId":"yytan25"},"content":"        } else if (t instanceof Event) {","lastModifiedDate":"2023-09-01"},{"lineNumber":137,"author":{"gitId":"yytan25"},"content":"            return TaskType.EVENT;","lastModifiedDate":"2023-09-01"},{"lineNumber":138,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":139,"author":{"gitId":"yytan25"},"content":"            return TaskType.TASK;","lastModifiedDate":"2023-09-01"},{"lineNumber":140,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":141,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":144,"author":{"gitId":"yytan25"},"content":"     * Removes a {@code Task} from the {@code ArrayList}.","lastModifiedDate":"2023-09-01"},{"lineNumber":145,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":146,"author":{"gitId":"yytan25"},"content":"     * @param t {@code Task} to be removed.","lastModifiedDate":"2023-09-01"},{"lineNumber":147,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"yytan25"},"content":"    public void remove(Task t) {","lastModifiedDate":"2023-09-01"},{"lineNumber":149,"author":{"gitId":"yytan25"},"content":"        tasks.remove(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":150,"author":{"gitId":"yytan25"},"content":"        this.numOfTasks--;","lastModifiedDate":"2023-09-01"},{"lineNumber":151,"author":{"gitId":"yytan25"},"content":"        if (t.isCompleted) {","lastModifiedDate":"2023-09-01"},{"lineNumber":152,"author":{"gitId":"yytan25"},"content":"            this.numOfCompletedTasks--;","lastModifiedDate":"2023-09-01"},{"lineNumber":153,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":154,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":155,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"yytan25":155}},{"path":"src/main/java/duke/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":" * The {@code ToDo} class.","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"     * Constructs a new {@code ToDo} object, with {@code isCompleted} set to false.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"     * @param details Details of the {@code ToDo}.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"    public ToDo(String details) {","lastModifiedDate":"2023-08-20"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"        super(details);","lastModifiedDate":"2023-08-20"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"     * Loads a {@code ToDo} object that was previously stored in the hard disk.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"     * The {@code isCompleted} parameter corresponds to the completion status in the last","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"     * instance of {@code Duke}.","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"     * @param details Details of the {@code ToDo}.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"     * @param isCompleted Completion status of the {@code ToDo}.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"    public ToDo(String details, boolean isCompleted) {","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"        super(details, isCompleted);","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"     * Returns the string representation of the {@code ToDo}, to be","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"     * printed in the {@code list} method.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"     * @return String representation of the {@code ToDo}.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"yytan25"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":37,"author":{"gitId":"yytan25"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":38,"author":{"gitId":"yytan25"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-20"},{"lineNumber":39,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":40,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"yytan25":40}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":" * The {@code Ui} class. Deals with interactions with the user.","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"public class Ui {","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"    private final String name;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"    private int invalidInputCount \u003d 0;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"    public Ui() {","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"        this.name \u003d \"Meg\";","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"     * Prints a horizontal line to demarcate the end of an operation.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"    public void printHorizontalLine() {","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"        for (int i \u003d 0; i \u003c 20; i++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"            System.out.print(\"-\");","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"        System.out.println();","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"     * Prints the available commands for the user, when {@code Duke} is started or","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"     * when the user inputs {@code commands}.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"    public void printCommands() {","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"        System.out.printf(\"\\033[3mtask\\033[0m - Create a new task%n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"        System.out.printf(\"\\033[3mtodo\\033[0m - Create a new todo%n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"        System.out.printf(\"\\033[3mdeadline\\033[0m - Create a new deadline%n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"        System.out.printf(\"\\033[3mevent\\033[0m - Create a new event%n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"        System.out.printf(\"\\033[3mlist\\033[0m - View your current tasks and completion status%n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"        System.out.printf(\"\\033[3mmark\\033[0m - Mark a task as complete%n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"yytan25"},"content":"        System.out.printf(\"\\033[3munmark\\033[0m - Mark a task as incomplete%n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"yytan25"},"content":"        System.out.printf(\"\\033[3mdelete\\033[0m - Delete a task%n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"yytan25"},"content":"        System.out.printf(\"\\033[3mbye\\033[0m - Exit the program%n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"yytan25"},"content":"        System.out.printf(\"\\033[3mfind\\033[0m - Find all tasks containing a given keyword%n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"yytan25"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"yytan25"},"content":"     * Prints the statements when {@code Duke} is first instantiated.","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"yytan25"},"content":"    public void printSelfIntroduction() {","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"yytan25"},"content":"        System.out.printf(\"I\u0027m %s. Nice to meet you.%n\", this.name);","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"yytan25"},"content":"        System.out.println(\"I support the following commands:\" + \"\\n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"yytan25"},"content":"        printCommands();","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"yytan25"},"content":"     * Prints the statements when a user operation is over.","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"yytan25"},"content":"    public void printEndOfOperation() {","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"yytan25"},"content":"        System.out.println();","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"yytan25"},"content":"        System.out.printf(\"Anything else you want me to do?%n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"yytan25"},"content":"        System.out.printf(\"Just so you know, you can input \\033[3mcommands\\033[0m to view the commands again.%n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"yytan25"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"yytan25"},"content":"     * Increments the number of invalid inputs. When the number of consecutive invalid","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"yytan25"},"content":"     * inputs reaches a certain threshold, {@code Duke} will forcibly terminate.","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"yytan25"},"content":"    public void incrementInvalidInputs() {","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"yytan25"},"content":"        this.invalidInputCount++;","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"yytan25"},"content":"     * Gets the number of consecutive invalid inputs.","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"yytan25"},"content":"     * @return Number of consecutive invalid inputs.","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"yytan25"},"content":"    public int getInvalidInputCount() {","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"yytan25"},"content":"        return this.invalidInputCount;","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"yytan25":79}},{"path":"src/test/java/duke/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"import java.time.Month;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"    public void deadline_toString_success() {","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"        Deadline d \u003d new Deadline(\"test\",","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"                LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"                        LocalTime.of(23, 59)));","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"        assertEquals(\"[D][ ] test (by: Sun, 01 Jan 2023 23:59)\",","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"                d.toString());","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"    public void deadlineCompleted_toString_success() {","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"        Deadline d \u003d new Deadline(\"test\", true,","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"                LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"                        LocalTime.of(23, 59)));","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"        assertEquals(\"[D][X] test (by: Sun, 01 Jan 2023 23:59)\",","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"                d.toString());","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"yytan25":30}},{"path":"src/test/java/duke/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"import java.time.Month;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":"public class EventTest {","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"    public void event_toString_success() {","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"        Event e \u003d new Event(\"test\",","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"                LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"                        LocalTime.of(0, 0)),","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"                LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"                        LocalTime.of(23, 59)));","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"        assertEquals(\"[E][ ] test (from: 01 Jan 2023 00:00 to: 01 Jan 2023 23:59)\",","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"                e.toString());","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"    public void eventCompleted_toString_success() {","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"        Event e \u003d new Event(\"test\", true,","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"                LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"                        LocalTime.of(0, 0)),","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"                LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"                        LocalTime.of(23, 59)));","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"        assertEquals(\"[E][X] test (from: 01 Jan 2023 00:00 to: 01 Jan 2023 23:59)\",","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"                e.toString());","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"yytan25":36}},{"path":"src/test/java/duke/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package duke;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"public class TaskListTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":"    public void addTask_numTasksIncremented() {","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"        tasks.add(new Task(\"test\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"        assertEquals(1, tasks.getNumOfTasks());","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"    public void addCompletedTask_numTasksIncremented() {","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"        tasks.add(new Task(\"test\", true));","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"        assertEquals(1, tasks.getNumOfTasks());","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"    public void addCompletedTask_numCompletedTasksIncremented() {","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"        tasks.add(new Task(\"test\", true));","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"        assertEquals(1, tasks.getNumOfCompletedTasks());","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"    public void addTask_getTaskType_success() {","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"yytan25"},"content":"        tasks.add(new Task(\"test\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"yytan25"},"content":"        assertEquals(TaskList.TaskType.TASK, tasks.getTaskType(0));","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"yytan25"},"content":"    public void addToDo_getTaskType_success() {","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"yytan25"},"content":"        tasks.add(new ToDo(\"test\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"yytan25"},"content":"        assertEquals(TaskList.TaskType.TODO, tasks.getTaskType(0));","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"yytan25"},"content":"    public void addDeadline_getTaskType_success() {","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"yytan25"},"content":"        tasks.add(new Deadline(\"test\", LocalDateTime.MIN));","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"yytan25"},"content":"        assertEquals(TaskList.TaskType.DEADLINE, tasks.getTaskType(0));","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"yytan25"},"content":"    public void addEvent_getTaskType_success() {","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"yytan25"},"content":"        tasks.add(new Event(\"test\", LocalDateTime.MIN, LocalDateTime.MAX));","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"yytan25"},"content":"        assertEquals(TaskList.TaskType.EVENT, tasks.getTaskType(0));","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"yytan25"},"content":"    public void removeTask_numTasksDecremented() {","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"yytan25"},"content":"        Task t \u003d new Task(\"test\");","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"yytan25"},"content":"        tasks.add(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"yytan25"},"content":"        tasks.remove(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"yytan25"},"content":"        assertEquals(0, tasks.getNumOfTasks());","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"yytan25"},"content":"    public void removeCompletedTask_numTasksDecremented() {","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"yytan25"},"content":"        Task t \u003d new Task(\"test\", true);","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"yytan25"},"content":"        tasks.add(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"yytan25"},"content":"        tasks.remove(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"yytan25"},"content":"        assertEquals(0, tasks.getNumOfTasks());","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"yytan25"},"content":"    public void removeCompletedTask_numCompletedTasksDecremented() {","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"yytan25"},"content":"        Task t \u003d new Task(\"test\", true);","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"yytan25"},"content":"        tasks.add(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"yytan25"},"content":"        tasks.remove(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"yytan25"},"content":"        assertEquals(0, tasks.getNumOfCompletedTasks());","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"yytan25"},"content":"    public void checkDuplicates_success() {","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"yytan25"},"content":"        Task t \u003d new Task(\"test\");","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"yytan25"},"content":"        tasks.add(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"yytan25"},"content":"        assertTrue(tasks.checkDuplicates(\"test\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"yytan25":96}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"deadline","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"finish software engineering assignment","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"fri 2359","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"event","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"party at Jon\u0027s","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"fri 8pm","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":"sat 2am","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"list","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"yytan25":8}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"echo \"The output will be redirected to stdoutput.txt\"","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"yytan25":2,"-":21}}]
