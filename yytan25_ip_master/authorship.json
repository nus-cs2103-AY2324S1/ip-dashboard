[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-22"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"yytan25"},"content":"    mainClass.set(\"javafx.Launcher\")","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"yytan25"},"content":"    archiveBaseName \u003d \"leon\"","lastModifiedDate":"2023-09-22"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":52,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"yytan25":16,"-":40}},{"path":"data/tasks.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"Task/clean the floor/N","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"Deadline/finish assignment/Y/2023-09-22T23:59","lastModifiedDate":"2023-09-22"}],"authorContributionMap":{"yytan25":2}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"# User Guide for Leon","lastModifiedDate":"2023-09-20"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"## Overview","lastModifiedDate":"2023-09-20"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"Ever found yourself being swarmed by deadlines and not even know where to start? Or is your phone calendar just way too","lastModifiedDate":"2023-09-20"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"cluttered with tasks all throughout the day?","lastModifiedDate":"2023-09-20"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"Don\u0027t worry, your personal assistant Leon is here to help! Some features include:","lastModifiedDate":"2023-09-20"},{"lineNumber":9,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"- Creation of 4 different tasks (Task, ToDo, Deadline, Event)","lastModifiedDate":"2023-09-20"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"- Mark tasks as complete/incomplete","lastModifiedDate":"2023-09-20"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"- Find tasks using keywords","lastModifiedDate":"2023-09-20"},{"lineNumber":13,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"And the best part? When you exit the chatbot, your tasks will be saved so you can come back to it later! How cool is","lastModifiedDate":"2023-09-20"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"that?? ðŸ¤ª","lastModifiedDate":"2023-09-20"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"## Note for Linux Users","lastModifiedDate":"2023-09-27"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-27"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"Please run the following commands in your terminal to install JDK 11 and OpenJFX respectively:","lastModifiedDate":"2023-09-27"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-27"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"`sudo apt-get install openjdk-11-jdk`","lastModifiedDate":"2023-09-27"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"`sudo apt install openjfx`","lastModifiedDate":"2023-09-27"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-27"},{"lineNumber":24,"author":{"gitId":"-"},"content":"## Features","lastModifiedDate":"2019-07-29"},{"lineNumber":25,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"### Task, ToDo, Deadline, Event","lastModifiedDate":"2023-09-20"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"Supports creation of a variety of tasks. You can input a due date and time for Deadlines, and start and end times for","lastModifiedDate":"2023-09-20"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"Events.","lastModifiedDate":"2023-09-20"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"### List","lastModifiedDate":"2023-09-20"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"View your current tasks and completion status.","lastModifiedDate":"2023-09-20"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"### Mark and Unmark","lastModifiedDate":"2023-09-20"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":37,"author":{"gitId":"yytan25"},"content":"Mark a task as complete, and incomplete, respectively.","lastModifiedDate":"2023-09-20"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":39,"author":{"gitId":"yytan25"},"content":"### Delete","lastModifiedDate":"2023-09-20"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":41,"author":{"gitId":"yytan25"},"content":"Delete a task from the list.","lastModifiedDate":"2023-09-20"},{"lineNumber":42,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":43,"author":{"gitId":"yytan25"},"content":"### Find","lastModifiedDate":"2023-09-20"},{"lineNumber":44,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":45,"author":{"gitId":"yytan25"},"content":"Find all tasks containing a given keyword.","lastModifiedDate":"2023-09-20"},{"lineNumber":46,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":47,"author":{"gitId":"yytan25"},"content":"### Detect date and time anomalies","lastModifiedDate":"2023-09-20"},{"lineNumber":48,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":49,"author":{"gitId":"yytan25"},"content":"Leon is able to detect the following anomalies and raise an error:","lastModifiedDate":"2023-09-20"},{"lineNumber":50,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":51,"author":{"gitId":"yytan25"},"content":"- When the deadline due time, or the event end time, is before the current system time.","lastModifiedDate":"2023-09-20"},{"lineNumber":52,"author":{"gitId":"yytan25"},"content":"- When the start time of an event is after its end time.","lastModifiedDate":"2023-09-20"},{"lineNumber":53,"author":{"gitId":"yytan25"},"content":"- When you attempt to create an event that overlaps with another event.","lastModifiedDate":"2023-09-20"},{"lineNumber":54,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":55,"author":{"gitId":"yytan25"},"content":"### Check duplicates","lastModifiedDate":"2023-09-20"},{"lineNumber":56,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":57,"author":{"gitId":"yytan25"},"content":"Leon will raise an error when you try to create a duplicate task. He doesn\u0027t want you to confuse yourself!","lastModifiedDate":"2023-09-20"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":59,"author":{"gitId":"-"},"content":"## Usage","lastModifiedDate":"2019-07-29"},{"lineNumber":60,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":61,"author":{"gitId":"yytan25"},"content":"### `task` - Create a new task","lastModifiedDate":"2023-09-20"},{"lineNumber":62,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":63,"author":{"gitId":"yytan25"},"content":"The user inputs the keyword `task`, followed by the details of the task. The task will then be added to the list.","lastModifiedDate":"2023-09-20"},{"lineNumber":64,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":65,"author":{"gitId":"-"},"content":"Example of usage:","lastModifiedDate":"2019-07-29"},{"lineNumber":66,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":67,"author":{"gitId":"yytan25"},"content":"- User: `task`","lastModifiedDate":"2023-09-20"},{"lineNumber":68,"author":{"gitId":"yytan25"},"content":"- Leon: `Input task details.`","lastModifiedDate":"2023-09-20"},{"lineNumber":69,"author":{"gitId":"yytan25"},"content":"- User: `clean the room`","lastModifiedDate":"2023-09-20"},{"lineNumber":70,"author":{"gitId":"yytan25"},"content":"- Leon: `Don\u0027t expect me to clean the room for you!`","lastModifiedDate":"2023-09-20"},{"lineNumber":71,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":72,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2019-07-29"},{"lineNumber":73,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":74,"author":{"gitId":"yytan25"},"content":"Task is added to the list.","lastModifiedDate":"2023-09-20"},{"lineNumber":75,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":76,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":77,"author":{"gitId":"yytan25"},"content":"Don\u0027t expect me to clean the room for you!","lastModifiedDate":"2023-09-20"},{"lineNumber":78,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2021-07-17"},{"lineNumber":79,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":80,"author":{"gitId":"yytan25"},"content":"### `todo` - Create a new Todo","lastModifiedDate":"2023-09-20"},{"lineNumber":81,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":82,"author":{"gitId":"yytan25"},"content":"The user inputs the keyword `todo`, followed by the details of the Todo. The Todo will then be added to the list.","lastModifiedDate":"2023-09-20"},{"lineNumber":83,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":84,"author":{"gitId":"yytan25"},"content":"Example of usage:","lastModifiedDate":"2023-09-20"},{"lineNumber":85,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":86,"author":{"gitId":"yytan25"},"content":"- User: `todo`","lastModifiedDate":"2023-09-20"},{"lineNumber":87,"author":{"gitId":"yytan25"},"content":"- Leon: `Input todo details.`","lastModifiedDate":"2023-09-20"},{"lineNumber":88,"author":{"gitId":"yytan25"},"content":"- User: `finish cs2103 project`","lastModifiedDate":"2023-09-20"},{"lineNumber":89,"author":{"gitId":"yytan25"},"content":"- Leon: `Stop talking to me! Go and finish cs2103 project!`","lastModifiedDate":"2023-09-20"},{"lineNumber":90,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":91,"author":{"gitId":"yytan25"},"content":"Expected outcome:","lastModifiedDate":"2023-09-20"},{"lineNumber":92,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":93,"author":{"gitId":"yytan25"},"content":"Todo is added to the list.","lastModifiedDate":"2023-09-20"},{"lineNumber":94,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":95,"author":{"gitId":"yytan25"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":96,"author":{"gitId":"yytan25"},"content":"Stop talking to me! Go and finish cs2103 project!","lastModifiedDate":"2023-09-20"},{"lineNumber":97,"author":{"gitId":"yytan25"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":98,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":99,"author":{"gitId":"yytan25"},"content":"### `deadline` - Create a new Deadline","lastModifiedDate":"2023-09-20"},{"lineNumber":100,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":101,"author":{"gitId":"yytan25"},"content":"The user inputs the keyword `deadline`, followed by the details and due time of the deadline. The Deadline will then be","lastModifiedDate":"2023-09-20"},{"lineNumber":102,"author":{"gitId":"yytan25"},"content":"added to the list.","lastModifiedDate":"2023-09-20"},{"lineNumber":103,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":104,"author":{"gitId":"yytan25"},"content":"Example of usage:","lastModifiedDate":"2023-09-20"},{"lineNumber":105,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":106,"author":{"gitId":"yytan25"},"content":"- User: `deadline`","lastModifiedDate":"2023-09-20"},{"lineNumber":107,"author":{"gitId":"yytan25"},"content":"- Leon: `Input deadline details.`","lastModifiedDate":"2023-09-20"},{"lineNumber":108,"author":{"gitId":"yytan25"},"content":"- User: `CS2100 Assignment`","lastModifiedDate":"2023-09-20"},{"lineNumber":109,"author":{"gitId":"yytan25"},"content":"- Leon: `Input deadline due date. (Required format: YYYY-MM-DD)`","lastModifiedDate":"2023-09-20"},{"lineNumber":110,"author":{"gitId":"yytan25"},"content":"- User: `2023-09-22`","lastModifiedDate":"2023-09-20"},{"lineNumber":111,"author":{"gitId":"yytan25"},"content":"- Leon: `Input deadline due time. (Required format: HH:MM)`","lastModifiedDate":"2023-09-20"},{"lineNumber":112,"author":{"gitId":"yytan25"},"content":"- User: `23:59`","lastModifiedDate":"2023-09-20"},{"lineNumber":113,"author":{"gitId":"yytan25"},"content":"- Leon: `Just saying, better do CS2100 Assignment now. Not like it\u0027s my problem if you don\u0027t.`","lastModifiedDate":"2023-09-20"},{"lineNumber":114,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":115,"author":{"gitId":"yytan25"},"content":"Expected outcome:","lastModifiedDate":"2023-09-20"},{"lineNumber":116,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":117,"author":{"gitId":"yytan25"},"content":"Deadline is added to the list.","lastModifiedDate":"2023-09-20"},{"lineNumber":118,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":119,"author":{"gitId":"yytan25"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":120,"author":{"gitId":"yytan25"},"content":"Just saying, better do CS2100 Assignment now. Not like it\u0027s my problem if you don\u0027t.","lastModifiedDate":"2023-09-20"},{"lineNumber":121,"author":{"gitId":"yytan25"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":122,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":123,"author":{"gitId":"yytan25"},"content":"### `event` - Create a new Event","lastModifiedDate":"2023-09-20"},{"lineNumber":124,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":125,"author":{"gitId":"yytan25"},"content":"The user inputs the keyword `event`, followed by the details, start time and end time of the event. The Event will then","lastModifiedDate":"2023-09-20"},{"lineNumber":126,"author":{"gitId":"yytan25"},"content":"be added to the list.","lastModifiedDate":"2023-09-20"},{"lineNumber":127,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":128,"author":{"gitId":"yytan25"},"content":"Example of usage:","lastModifiedDate":"2023-09-20"},{"lineNumber":129,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":130,"author":{"gitId":"yytan25"},"content":"- User: `event`","lastModifiedDate":"2023-09-20"},{"lineNumber":131,"author":{"gitId":"yytan25"},"content":"- Leon: `Input event details.`","lastModifiedDate":"2023-09-20"},{"lineNumber":132,"author":{"gitId":"yytan25"},"content":"- User: `Career Fair`","lastModifiedDate":"2023-09-20"},{"lineNumber":133,"author":{"gitId":"yytan25"},"content":"- Leon: `Input event start date. (Required format: YYYY-MM-DD)`","lastModifiedDate":"2023-09-20"},{"lineNumber":134,"author":{"gitId":"yytan25"},"content":"- User: `2023-10-01`","lastModifiedDate":"2023-09-20"},{"lineNumber":135,"author":{"gitId":"yytan25"},"content":"- Leon: `Input event start time. (Required format: HH:MM)`","lastModifiedDate":"2023-09-20"},{"lineNumber":136,"author":{"gitId":"yytan25"},"content":"- User: `11:00`","lastModifiedDate":"2023-09-20"},{"lineNumber":137,"author":{"gitId":"yytan25"},"content":"- Leon: `Input event end date. (Required format: YYYY-MM-DD)`","lastModifiedDate":"2023-09-20"},{"lineNumber":138,"author":{"gitId":"yytan25"},"content":"- User: `2023-10-01`","lastModifiedDate":"2023-09-20"},{"lineNumber":139,"author":{"gitId":"yytan25"},"content":"- Leon: `Input event end time. (Required format: HH:MM)`","lastModifiedDate":"2023-09-20"},{"lineNumber":140,"author":{"gitId":"yytan25"},"content":"- User: `17:00`","lastModifiedDate":"2023-09-20"},{"lineNumber":141,"author":{"gitId":"yytan25"},"content":"- Leon: \"Wow, you have a Career Fair? Uhh, n-not like I wanna join you!\"","lastModifiedDate":"2023-09-20"},{"lineNumber":142,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":143,"author":{"gitId":"yytan25"},"content":"Expected outcome:","lastModifiedDate":"2023-09-20"},{"lineNumber":144,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":145,"author":{"gitId":"yytan25"},"content":"Event is added to the list.","lastModifiedDate":"2023-09-20"},{"lineNumber":146,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":147,"author":{"gitId":"yytan25"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":148,"author":{"gitId":"yytan25"},"content":"Wow, you have a Career Fair? Uhh, n-not like I wanna join you!","lastModifiedDate":"2023-09-20"},{"lineNumber":149,"author":{"gitId":"yytan25"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":150,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":151,"author":{"gitId":"yytan25"},"content":"### `list` - View your current tasks and completion status","lastModifiedDate":"2023-09-20"},{"lineNumber":152,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":153,"author":{"gitId":"yytan25"},"content":"The user inputs the keyword `list`. Leon will then display all tasks in the list and their completion status. (Tasks","lastModifiedDate":"2023-09-20"},{"lineNumber":154,"author":{"gitId":"yytan25"},"content":"that are completed will be marked with an [X])","lastModifiedDate":"2023-09-20"},{"lineNumber":155,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":156,"author":{"gitId":"yytan25"},"content":"Example of usage:","lastModifiedDate":"2023-09-20"},{"lineNumber":157,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":158,"author":{"gitId":"yytan25"},"content":"`list`","lastModifiedDate":"2023-09-20"},{"lineNumber":159,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":160,"author":{"gitId":"yytan25"},"content":"Expected outcome:","lastModifiedDate":"2023-09-20"},{"lineNumber":161,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":162,"author":{"gitId":"yytan25"},"content":"All tasks are printed in the list, with their respective completion statuses.","lastModifiedDate":"2023-09-20"},{"lineNumber":163,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":164,"author":{"gitId":"yytan25"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":165,"author":{"gitId":"yytan25"},"content":"list","lastModifiedDate":"2023-09-20"},{"lineNumber":166,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":167,"author":{"gitId":"yytan25"},"content":"You have 4 tasks. (0 complete, 4 incomplete)","lastModifiedDate":"2023-09-20"},{"lineNumber":168,"author":{"gitId":"yytan25"},"content":"1. [ ] clean the room","lastModifiedDate":"2023-09-20"},{"lineNumber":169,"author":{"gitId":"yytan25"},"content":"2. [T] [ ] finish cs2103 project","lastModifiedDate":"2023-09-20"},{"lineNumber":170,"author":{"gitId":"yytan25"},"content":"3. [D] [ ] CS2100 Assignment (by: Fri, 22 Sep 2023, 23:59)","lastModifiedDate":"2023-09-20"},{"lineNumber":171,"author":{"gitId":"yytan25"},"content":"4. [E] [ ] Career Fair (from: 01 Oct 2023 11:00 to: 01 Oct 2023 17:00)","lastModifiedDate":"2023-09-20"},{"lineNumber":172,"author":{"gitId":"yytan25"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":173,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":174,"author":{"gitId":"yytan25"},"content":"### `mark` - Mark a task as complete","lastModifiedDate":"2023-09-20"},{"lineNumber":175,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":176,"author":{"gitId":"yytan25"},"content":"The user inputs the keyword `mark`, followed by the task number. Leon will then mark the corresponding task as complete.","lastModifiedDate":"2023-09-20"},{"lineNumber":177,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":178,"author":{"gitId":"yytan25"},"content":"Example of usage:","lastModifiedDate":"2023-09-20"},{"lineNumber":179,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":180,"author":{"gitId":"yytan25"},"content":"- User: `mark`","lastModifiedDate":"2023-09-20"},{"lineNumber":181,"author":{"gitId":"yytan25"},"content":"- Leon: `Please input the task number you wish to mark.` (List of tasks will be provided for reference)","lastModifiedDate":"2023-09-20"},{"lineNumber":182,"author":{"gitId":"yytan25"},"content":"- User: `1`","lastModifiedDate":"2023-09-20"},{"lineNumber":183,"author":{"gitId":"yytan25"},"content":"- Leon: `Task 1 set as complete.`","lastModifiedDate":"2023-09-20"},{"lineNumber":184,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":185,"author":{"gitId":"yytan25"},"content":"Expected outcome:","lastModifiedDate":"2023-09-20"},{"lineNumber":186,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":187,"author":{"gitId":"yytan25"},"content":"The task is marked as complete.","lastModifiedDate":"2023-09-20"},{"lineNumber":188,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":189,"author":{"gitId":"yytan25"},"content":"Leon will raise an error if:","lastModifiedDate":"2023-09-20"},{"lineNumber":190,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":191,"author":{"gitId":"yytan25"},"content":"- There are no tasks in the list.","lastModifiedDate":"2023-09-20"},{"lineNumber":192,"author":{"gitId":"yytan25"},"content":"- The task number input is invalid or outside the range 1 \u003c taskNumber \u003c totalNumberOfTasks.","lastModifiedDate":"2023-09-20"},{"lineNumber":193,"author":{"gitId":"yytan25"},"content":"- The corresponding task is already marked as complete.","lastModifiedDate":"2023-09-20"},{"lineNumber":194,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":195,"author":{"gitId":"yytan25"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":196,"author":{"gitId":"yytan25"},"content":"mark","lastModifiedDate":"2023-09-20"},{"lineNumber":197,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":198,"author":{"gitId":"yytan25"},"content":"Please input the task number you wish to mark.","lastModifiedDate":"2023-09-20"},{"lineNumber":199,"author":{"gitId":"yytan25"},"content":"1. [ ] clean the room","lastModifiedDate":"2023-09-20"},{"lineNumber":200,"author":{"gitId":"yytan25"},"content":"2. [T] [ ] finish cs2103 project","lastModifiedDate":"2023-09-20"},{"lineNumber":201,"author":{"gitId":"yytan25"},"content":"3. [D] [ ] CS2100 Assignment (by: Fri, 22 Sep 2023, 23:59)","lastModifiedDate":"2023-09-20"},{"lineNumber":202,"author":{"gitId":"yytan25"},"content":"4. [E] [ ] Career Fair (from: 01 Oct 2023 11:00 to: 01 Oct 2023 17:00)","lastModifiedDate":"2023-09-20"},{"lineNumber":203,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":204,"author":{"gitId":"yytan25"},"content":"1","lastModifiedDate":"2023-09-20"},{"lineNumber":205,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":206,"author":{"gitId":"yytan25"},"content":"Task 1 set as complete.","lastModifiedDate":"2023-09-20"},{"lineNumber":207,"author":{"gitId":"yytan25"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":208,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":209,"author":{"gitId":"yytan25"},"content":"### `unmark` - Mark a task as incomplete","lastModifiedDate":"2023-09-20"},{"lineNumber":210,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":211,"author":{"gitId":"yytan25"},"content":"The user inputs the keyword `unmark`, followed by the task number. Leon will then mark the corresponding task as","lastModifiedDate":"2023-09-20"},{"lineNumber":212,"author":{"gitId":"yytan25"},"content":"incomplete.","lastModifiedDate":"2023-09-20"},{"lineNumber":213,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":214,"author":{"gitId":"yytan25"},"content":"Example of usage:","lastModifiedDate":"2023-09-20"},{"lineNumber":215,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":216,"author":{"gitId":"yytan25"},"content":"- User: `unmark`","lastModifiedDate":"2023-09-20"},{"lineNumber":217,"author":{"gitId":"yytan25"},"content":"- Leon: `Please input the task number you wish to unmark.` (List of tasks will be provided for reference)","lastModifiedDate":"2023-09-20"},{"lineNumber":218,"author":{"gitId":"yytan25"},"content":"- User: `1`","lastModifiedDate":"2023-09-20"},{"lineNumber":219,"author":{"gitId":"yytan25"},"content":"- Leon: `Task 1 set as incomplete.`","lastModifiedDate":"2023-09-20"},{"lineNumber":220,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":221,"author":{"gitId":"yytan25"},"content":"Expected outcome:","lastModifiedDate":"2023-09-20"},{"lineNumber":222,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":223,"author":{"gitId":"yytan25"},"content":"The task is marked as incomplete.","lastModifiedDate":"2023-09-20"},{"lineNumber":224,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":225,"author":{"gitId":"yytan25"},"content":"Leon will raise an error if:","lastModifiedDate":"2023-09-20"},{"lineNumber":226,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":227,"author":{"gitId":"yytan25"},"content":"- There are no tasks in the list.","lastModifiedDate":"2023-09-20"},{"lineNumber":228,"author":{"gitId":"yytan25"},"content":"- The task number input is invalid or outside the range 1 \u003c taskNumber \u003c totalNumberOfTasks.","lastModifiedDate":"2023-09-20"},{"lineNumber":229,"author":{"gitId":"yytan25"},"content":"- The corresponding task is already marked as incomplete.","lastModifiedDate":"2023-09-20"},{"lineNumber":230,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":231,"author":{"gitId":"yytan25"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":232,"author":{"gitId":"yytan25"},"content":"unmark","lastModifiedDate":"2023-09-20"},{"lineNumber":233,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":234,"author":{"gitId":"yytan25"},"content":"Please input the task number you wish to unmark.","lastModifiedDate":"2023-09-20"},{"lineNumber":235,"author":{"gitId":"yytan25"},"content":"1. [X] clean the room","lastModifiedDate":"2023-09-20"},{"lineNumber":236,"author":{"gitId":"yytan25"},"content":"2. [T] [ ] finish cs2103 project","lastModifiedDate":"2023-09-20"},{"lineNumber":237,"author":{"gitId":"yytan25"},"content":"3. [D] [ ] CS2100 Assignment (by: Fri, 22 Sep 2023, 23:59)","lastModifiedDate":"2023-09-20"},{"lineNumber":238,"author":{"gitId":"yytan25"},"content":"4. [E] [ ] Career Fair (from: 01 Oct 2023 11:00 to: 01 Oct 2023 17:00)","lastModifiedDate":"2023-09-20"},{"lineNumber":239,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":240,"author":{"gitId":"yytan25"},"content":"1","lastModifiedDate":"2023-09-20"},{"lineNumber":241,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":242,"author":{"gitId":"yytan25"},"content":"Task 1 set as incomplete.","lastModifiedDate":"2023-09-20"},{"lineNumber":243,"author":{"gitId":"yytan25"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":244,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":245,"author":{"gitId":"yytan25"},"content":"### `delete` - Delete a task","lastModifiedDate":"2023-09-20"},{"lineNumber":246,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":247,"author":{"gitId":"yytan25"},"content":"The user inputs the keyword `delete`, followed by the task number. Leon will then delete the corresponding task from the","lastModifiedDate":"2023-09-20"},{"lineNumber":248,"author":{"gitId":"yytan25"},"content":"list.","lastModifiedDate":"2023-09-20"},{"lineNumber":249,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":250,"author":{"gitId":"yytan25"},"content":"Example of usage:","lastModifiedDate":"2023-09-20"},{"lineNumber":251,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":252,"author":{"gitId":"yytan25"},"content":"- User: `delete`","lastModifiedDate":"2023-09-20"},{"lineNumber":253,"author":{"gitId":"yytan25"},"content":"- Leon: `Please input the task number you wish to delete.` (List of tasks will be provided for reference)","lastModifiedDate":"2023-09-20"},{"lineNumber":254,"author":{"gitId":"yytan25"},"content":"- User: `1`","lastModifiedDate":"2023-09-20"},{"lineNumber":255,"author":{"gitId":"yytan25"},"content":"- Leon: `Task 1 deleted successfully. You now have 3 tasks.`","lastModifiedDate":"2023-09-20"},{"lineNumber":256,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":257,"author":{"gitId":"-"},"content":"Expected outcome:","lastModifiedDate":"2023-09-20"},{"lineNumber":258,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":259,"author":{"gitId":"yytan25"},"content":"The task is deleted from the list.","lastModifiedDate":"2023-09-20"},{"lineNumber":260,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":261,"author":{"gitId":"yytan25"},"content":"Leon will raise an error if:","lastModifiedDate":"2023-09-20"},{"lineNumber":262,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":263,"author":{"gitId":"yytan25"},"content":"- There are no tasks in the list.","lastModifiedDate":"2023-09-20"},{"lineNumber":264,"author":{"gitId":"yytan25"},"content":"- The task number input is invalid or outside the range 1 \u003c taskNumber \u003c totalNumberOfTasks.","lastModifiedDate":"2023-09-20"},{"lineNumber":265,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":266,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":267,"author":{"gitId":"yytan25"},"content":"delete","lastModifiedDate":"2023-09-20"},{"lineNumber":268,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":269,"author":{"gitId":"yytan25"},"content":"Please input the task number you wish to delete.","lastModifiedDate":"2023-09-20"},{"lineNumber":270,"author":{"gitId":"yytan25"},"content":"1. [ ] clean the room","lastModifiedDate":"2023-09-20"},{"lineNumber":271,"author":{"gitId":"yytan25"},"content":"2. [T] [ ] finish cs2103 project","lastModifiedDate":"2023-09-20"},{"lineNumber":272,"author":{"gitId":"yytan25"},"content":"3. [D] [ ] CS2100 Assignment (by: Fri, 22 Sep 2023, 23:59)","lastModifiedDate":"2023-09-20"},{"lineNumber":273,"author":{"gitId":"yytan25"},"content":"4. [E] [ ] Career Fair (from: 01 Oct 2023 11:00 to: 01 Oct 2023 17:00)","lastModifiedDate":"2023-09-20"},{"lineNumber":274,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":275,"author":{"gitId":"yytan25"},"content":"1","lastModifiedDate":"2023-09-20"},{"lineNumber":276,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":277,"author":{"gitId":"yytan25"},"content":"Task 1 deleted successfully.","lastModifiedDate":"2023-09-20"},{"lineNumber":278,"author":{"gitId":"yytan25"},"content":"You now have 3 tasks.","lastModifiedDate":"2023-09-20"},{"lineNumber":279,"author":{"gitId":"yytan25"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":280,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":281,"author":{"gitId":"yytan25"},"content":"### `find` or `search` - Find all tasks containing a given keyword","lastModifiedDate":"2023-09-20"},{"lineNumber":282,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":283,"author":{"gitId":"yytan25"},"content":"The user inputs either the keyword `find` or `search`. Leon will the prompt the user to input a keyword. Then, Leon will","lastModifiedDate":"2023-09-20"},{"lineNumber":284,"author":{"gitId":"yytan25"},"content":"return a list of all the tasks containing the keyword (case sensitive).","lastModifiedDate":"2023-09-20"},{"lineNumber":285,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":286,"author":{"gitId":"yytan25"},"content":"Example of usage:","lastModifiedDate":"2023-09-20"},{"lineNumber":287,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":288,"author":{"gitId":"yytan25"},"content":"- User: `find`","lastModifiedDate":"2023-09-20"},{"lineNumber":289,"author":{"gitId":"yytan25"},"content":"- Leon: `Please input search keyword.`","lastModifiedDate":"2023-09-20"},{"lineNumber":290,"author":{"gitId":"yytan25"},"content":"- User: `project`","lastModifiedDate":"2023-09-20"},{"lineNumber":291,"author":{"gitId":"yytan25"},"content":"- Leon: (Returns all tasks containing keyword `project`)","lastModifiedDate":"2023-09-20"},{"lineNumber":292,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":293,"author":{"gitId":"yytan25"},"content":"Expected outcome:","lastModifiedDate":"2023-09-20"},{"lineNumber":294,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":295,"author":{"gitId":"yytan25"},"content":"A list of all tasks containing the given keyword is returned.","lastModifiedDate":"2023-09-20"},{"lineNumber":296,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":297,"author":{"gitId":"yytan25"},"content":"Leon will raise an error if:","lastModifiedDate":"2023-09-20"},{"lineNumber":298,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":299,"author":{"gitId":"yytan25"},"content":"- There are no tasks in the list.","lastModifiedDate":"2023-09-20"},{"lineNumber":300,"author":{"gitId":"yytan25"},"content":"- The search keyword is empty.","lastModifiedDate":"2023-09-20"},{"lineNumber":301,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":302,"author":{"gitId":"-"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":303,"author":{"gitId":"yytan25"},"content":"find","lastModifiedDate":"2023-09-20"},{"lineNumber":304,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":305,"author":{"gitId":"yytan25"},"content":"Please input search keyword.","lastModifiedDate":"2023-09-20"},{"lineNumber":306,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":307,"author":{"gitId":"yytan25"},"content":"project","lastModifiedDate":"2023-09-20"},{"lineNumber":308,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":309,"author":{"gitId":"yytan25"},"content":"Here are the matching tasks in your list:","lastModifiedDate":"2023-09-20"},{"lineNumber":310,"author":{"gitId":"yytan25"},"content":"1. [T] [ ] finish cs2103 project","lastModifiedDate":"2023-09-20"},{"lineNumber":311,"author":{"gitId":"yytan25"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":312,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":313,"author":{"gitId":"yytan25"},"content":"### `commands` - View all user commands and functions","lastModifiedDate":"2023-09-20"},{"lineNumber":314,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":315,"author":{"gitId":"yytan25"},"content":"When Leon is not currently executing a command, the user may input `command`. Leon will then provide the user with all","lastModifiedDate":"2023-09-20"},{"lineNumber":316,"author":{"gitId":"yytan25"},"content":"the available commands, and their respective functions.","lastModifiedDate":"2023-09-20"},{"lineNumber":317,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":318,"author":{"gitId":"yytan25"},"content":"Example execution:","lastModifiedDate":"2023-09-20"},{"lineNumber":319,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":320,"author":{"gitId":"yytan25"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":321,"author":{"gitId":"yytan25"},"content":"commands","lastModifiedDate":"2023-09-20"},{"lineNumber":322,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":323,"author":{"gitId":"yytan25"},"content":"task - Create a new task","lastModifiedDate":"2023-09-20"},{"lineNumber":324,"author":{"gitId":"yytan25"},"content":"todo - Create a new todo","lastModifiedDate":"2023-09-20"},{"lineNumber":325,"author":{"gitId":"yytan25"},"content":"deadline - Create a new deadline","lastModifiedDate":"2023-09-20"},{"lineNumber":326,"author":{"gitId":"yytan25"},"content":"event - Create a new event","lastModifiedDate":"2023-09-20"},{"lineNumber":327,"author":{"gitId":"yytan25"},"content":"list - View your current tasks and completion status","lastModifiedDate":"2023-09-20"},{"lineNumber":328,"author":{"gitId":"yytan25"},"content":"mark - Mark a task as complete","lastModifiedDate":"2023-09-20"},{"lineNumber":329,"author":{"gitId":"yytan25"},"content":"unmark - Mark a task as incomplete","lastModifiedDate":"2023-09-20"},{"lineNumber":330,"author":{"gitId":"yytan25"},"content":"delete - Delete a task","lastModifiedDate":"2023-09-20"},{"lineNumber":331,"author":{"gitId":"yytan25"},"content":"search - Find all tasks containing a given keyword","lastModifiedDate":"2023-09-20"},{"lineNumber":332,"author":{"gitId":"yytan25"},"content":"bye - Exit the program","lastModifiedDate":"2023-09-20"},{"lineNumber":333,"author":{"gitId":"yytan25"},"content":"```","lastModifiedDate":"2023-09-20"},{"lineNumber":334,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":335,"author":{"gitId":"yytan25"},"content":"### `bye` - Exit the program","lastModifiedDate":"2023-09-20"},{"lineNumber":336,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":337,"author":{"gitId":"yytan25"},"content":"When the user inputs `bye`, the chatbot will close. All existing tasks will be saved, and the user will be able to","lastModifiedDate":"2023-09-20"},{"lineNumber":338,"author":{"gitId":"yytan25"},"content":"access them (including mark, unmark and delete) the next time they open the chatbot.","lastModifiedDate":"2023-09-20"},{"lineNumber":339,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":340,"author":{"gitId":"yytan25"},"content":"## Frequently Asked Questions","lastModifiedDate":"2023-09-20"},{"lineNumber":341,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":342,"author":{"gitId":"yytan25"},"content":"**Q: I can\u0027t create a Task, even though I filled in all fields.** \u003cbr\u003e","lastModifiedDate":"2023-09-20"},{"lineNumber":343,"author":{"gitId":"yytan25"},"content":"A: Before you create a Task, you may wish to execute the `list` command and make sure that there are no existing tasks","lastModifiedDate":"2023-09-20"},{"lineNumber":344,"author":{"gitId":"yytan25"},"content":"of the same name, especially if it was saved from a previous session. In the case of Deadlines and Events, please check","lastModifiedDate":"2023-09-20"},{"lineNumber":345,"author":{"gitId":"yytan25"},"content":"that your date and time inputs are of the form `YYYY-MM-DD` and `HH:MM` respectively.","lastModifiedDate":"2023-09-20"},{"lineNumber":346,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-20"},{"lineNumber":347,"author":{"gitId":"yytan25"},"content":"**Q: When I run the `find` command, I can\u0027t see the list of tasks with the keyword, even though I typed it correctly.** \u003cbr\u003e","lastModifiedDate":"2023-09-27"},{"lineNumber":348,"author":{"gitId":"yytan25"},"content":"A: Currently, the keyword is case-sensitive, i.e. the keyword `finish` will correctly return a task","lastModifiedDate":"2023-09-20"},{"lineNumber":349,"author":{"gitId":"yytan25"},"content":"named `finish assignment`, but the keyword `Finish` will return nothing. We are working on allowing non-case-sensitive","lastModifiedDate":"2023-09-20"},{"lineNumber":350,"author":{"gitId":"yytan25"},"content":"inputs in a future update to enhance the user experience.","lastModifiedDate":"2023-09-20"}],"authorContributionMap":{"yytan25":317,"-":33}},{"path":"src/main/java/javafx/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package javafx;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"    DialogBox(String text, Image img) {","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"        try {","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"yytan25"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"yytan25"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"yytan25"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"yytan25"},"content":"    private void flip() {","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"yytan25"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"yytan25"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"yytan25"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-09"},{"lineNumber":48,"author":{"gitId":"yytan25"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":50,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":51,"author":{"gitId":"yytan25"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-09"},{"lineNumber":52,"author":{"gitId":"yytan25"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-09-09"},{"lineNumber":53,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":54,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":55,"author":{"gitId":"yytan25"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-09-09"},{"lineNumber":56,"author":{"gitId":"yytan25"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-09"},{"lineNumber":57,"author":{"gitId":"yytan25"},"content":"        db.flip();","lastModifiedDate":"2023-09-09"},{"lineNumber":58,"author":{"gitId":"yytan25"},"content":"        return db;","lastModifiedDate":"2023-09-09"},{"lineNumber":59,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":60,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-09-09"},{"lineNumber":61,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"yytan25":61}},{"path":"src/main/java/javafx/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package javafx;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"public class Launcher {","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"yytan25":12}},{"path":"src/main/java/javafx/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package javafx;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"import leon.Leon;","lastModifiedDate":"2023-09-22"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"    private final Leon leon \u003d new Leon();","lastModifiedDate":"2023-09-22"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"    public Main() throws IOException {","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"    @Override","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"        try {","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setLeon(leon);","lastModifiedDate":"2023-09-22"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"            stage.show();","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"yytan25":37}},{"path":"src/main/java/javafx/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package javafx;","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"import java.util.Objects;","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"import leon.Leon;","lastModifiedDate":"2023-09-22"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"import leon.Ui;","lastModifiedDate":"2023-09-22"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"    private Leon leon;","lastModifiedDate":"2023-09-22"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"    private final Image userImage \u003d new Image(","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"        Objects.requireNonNull(this.getClass().getResourceAsStream(\"/images/DaUser.png\")));","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"    private final Image dukeImage \u003d new Image(","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"        Objects.requireNonNull(this.getClass().getResourceAsStream(\"/images/DaDuke.png\")));","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"yytan25"},"content":"     * Initializes the JavaFX user interface.","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"yytan25"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"yytan25"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"yytan25"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"yytan25"},"content":"        dialogContainer.getChildren().add(DialogBox.getDukeDialog(","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"yytan25"},"content":"            Ui.getSelfIntroduction(), dukeImage));","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"yytan25"},"content":"    public void setLeon(Leon l) {","lastModifiedDate":"2023-09-22"},{"lineNumber":47,"author":{"gitId":"yytan25"},"content":"        leon \u003d l;","lastModifiedDate":"2023-09-22"},{"lineNumber":48,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":50,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":51,"author":{"gitId":"yytan25"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-09"},{"lineNumber":52,"author":{"gitId":"yytan25"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-09"},{"lineNumber":53,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":54,"author":{"gitId":"yytan25"},"content":"    @FXML","lastModifiedDate":"2023-09-09"},{"lineNumber":55,"author":{"gitId":"yytan25"},"content":"    private void handleUserInput() throws IOException {","lastModifiedDate":"2023-09-09"},{"lineNumber":56,"author":{"gitId":"yytan25"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-09"},{"lineNumber":57,"author":{"gitId":"yytan25"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2023-09-09"},{"lineNumber":58,"author":{"gitId":"yytan25"},"content":"            Platform.exit();","lastModifiedDate":"2023-09-09"},{"lineNumber":59,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":60,"author":{"gitId":"yytan25"},"content":"        String response \u003d leon.getResponse(input);","lastModifiedDate":"2023-09-22"},{"lineNumber":61,"author":{"gitId":"yytan25"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-09"},{"lineNumber":62,"author":{"gitId":"yytan25"},"content":"            DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-09"},{"lineNumber":63,"author":{"gitId":"yytan25"},"content":"            DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-09-09"},{"lineNumber":64,"author":{"gitId":"yytan25"},"content":"        );","lastModifiedDate":"2023-09-09"},{"lineNumber":65,"author":{"gitId":"yytan25"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-09"},{"lineNumber":66,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":67,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"yytan25":67}},{"path":"src/main/java/leon/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package leon;","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":" * The {@code Deadline} class.","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"    protected LocalDateTime due;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"     * Constructs a new {@code Deadline} object, with {@code isCompleted} set to false.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"     * @param details Details of the {@code Deadline}.","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"     * @param due     Due date and time of the {@code Deadline}, stored as a {@code LocalDateTime} object.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"    public Deadline(String details, LocalDateTime due) {","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"        super(details);","lastModifiedDate":"2023-08-20"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"        this.due \u003d due;","lastModifiedDate":"2023-08-20"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"     * Loads a {@code Deadline} object that was previously stored in the hard disk.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"     * The {@code isCompleted} parameter corresponds to the completion status in the last","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"     * instance of {@code Leon}.","lastModifiedDate":"2023-09-22"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"     * @param details     Details of the {@code Deadline}.","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"     * @param isCompleted Completion status of the {@code Deadline}.","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"     * @param due         Due date and time of the {@code Deadline}, stored as a {@code LocalDateTime} object.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"    public Deadline(String details, boolean isCompleted, LocalDateTime due) {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"        super(details, isCompleted);","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"        this.due \u003d due;","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":39,"author":{"gitId":"yytan25"},"content":"     * Returns the string representation of the {@code Deadline}, to be","lastModifiedDate":"2023-09-14"},{"lineNumber":40,"author":{"gitId":"yytan25"},"content":"     * saved in the text file.","lastModifiedDate":"2023-09-14"},{"lineNumber":41,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-14"},{"lineNumber":42,"author":{"gitId":"yytan25"},"content":"     * @return Compressed string representation of the {@code Deadline}.","lastModifiedDate":"2023-09-14"},{"lineNumber":43,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":44,"author":{"gitId":"yytan25"},"content":"    @Override","lastModifiedDate":"2023-09-14"},{"lineNumber":45,"author":{"gitId":"yytan25"},"content":"    public String toFileSaveFormat() {","lastModifiedDate":"2023-09-14"},{"lineNumber":46,"author":{"gitId":"yytan25"},"content":"        return String.format(\"Deadline/%s/%c/%s\",","lastModifiedDate":"2023-09-14"},{"lineNumber":47,"author":{"gitId":"yytan25"},"content":"            this.getDetails(),","lastModifiedDate":"2023-09-14"},{"lineNumber":48,"author":{"gitId":"yytan25"},"content":"            this.isCompleted ? \u0027Y\u0027 : \u0027N\u0027,","lastModifiedDate":"2023-09-14"},{"lineNumber":49,"author":{"gitId":"yytan25"},"content":"            this.due);","lastModifiedDate":"2023-09-14"},{"lineNumber":50,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":51,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":52,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"yytan25"},"content":"     * Returns the string representation of the {@code Deadline}, to be","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"yytan25"},"content":"     * printed in the {@code list} method.","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"yytan25"},"content":"     * @return String representation of the {@code Deadline}.","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"yytan25"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":59,"author":{"gitId":"yytan25"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":60,"author":{"gitId":"yytan25"},"content":"        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"E, dd MMM yyyy\");","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"yytan25"},"content":"        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"yytan25"},"content":"        return \"[D]\" + super.toString() + \" (by: \"","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"yytan25"},"content":"            + this.due.toLocalDate().format(dateFormatter) + \" \"","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"yytan25"},"content":"            + this.due.toLocalTime().format(timeFormatter) + \")\";","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"yytan25":66}},{"path":"src/main/java/leon/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package leon;","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":" * The {@code Event} class.","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"    protected LocalDateTime start;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"    protected LocalDateTime end;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"     * Constructs a new {@code Event} object, with {@code isCompleted} set to false.","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"     * @param details Details of the {@code Event}.","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"     * @param start   Start date and time of the {@code Event}, stored as a {@code LocalDateTime} object.","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"     * @param end     End date and time of the {@code Event}, stored as a {@code LocalDateTime} object.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"    public Event(String details, LocalDateTime start, LocalDateTime end) {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"        super(details);","lastModifiedDate":"2023-08-20"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-08-20"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-08-20"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"     * Loads a {@code Event} object that was previously stored in the hard disk.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"     * The {@code isCompleted} parameter corresponds to the completion status in the last","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"     * instance of {@code Leon}.","lastModifiedDate":"2023-09-22"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"     * @param details     Details of the {@code Event}.","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"     * @param isCompleted Completion status of the {@code Event}.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"     * @param start       Start date and time of the {@code Event}, stored as a {@code LocalDateTime} object.","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"     * @param end         End date and time of the {@code Event}, stored as a {@code LocalDateTime} object.","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"yytan25"},"content":"    public Event(String details, boolean isCompleted, LocalDateTime start,","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"yytan25"},"content":"                 LocalDateTime end) {","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"yytan25"},"content":"        super(details, isCompleted);","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"yytan25"},"content":"        this.start \u003d start;","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"yytan25"},"content":"        this.end \u003d end;","lastModifiedDate":"2023-08-26"},{"lineNumber":42,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":43,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":44,"author":{"gitId":"yytan25"},"content":"    public LocalDateTime getStartDateTime() {","lastModifiedDate":"2023-09-15"},{"lineNumber":45,"author":{"gitId":"yytan25"},"content":"        return this.start;","lastModifiedDate":"2023-09-15"},{"lineNumber":46,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":47,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":48,"author":{"gitId":"yytan25"},"content":"    public LocalDateTime getEndDateTime() {","lastModifiedDate":"2023-09-15"},{"lineNumber":49,"author":{"gitId":"yytan25"},"content":"        return this.end;","lastModifiedDate":"2023-09-15"},{"lineNumber":50,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":51,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":52,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":53,"author":{"gitId":"yytan25"},"content":"     * Returns the string representation of the {@code Event}, to be","lastModifiedDate":"2023-09-14"},{"lineNumber":54,"author":{"gitId":"yytan25"},"content":"     * saved in the text file.","lastModifiedDate":"2023-09-14"},{"lineNumber":55,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-14"},{"lineNumber":56,"author":{"gitId":"yytan25"},"content":"     * @return Compressed string representation of the {@code Event}.","lastModifiedDate":"2023-09-14"},{"lineNumber":57,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":58,"author":{"gitId":"yytan25"},"content":"    @Override","lastModifiedDate":"2023-09-14"},{"lineNumber":59,"author":{"gitId":"yytan25"},"content":"    public String toFileSaveFormat() {","lastModifiedDate":"2023-09-14"},{"lineNumber":60,"author":{"gitId":"yytan25"},"content":"        return String.format(\"Event/%s/%c/%s/%s\",","lastModifiedDate":"2023-09-14"},{"lineNumber":61,"author":{"gitId":"yytan25"},"content":"            this.getDetails(),","lastModifiedDate":"2023-09-14"},{"lineNumber":62,"author":{"gitId":"yytan25"},"content":"            this.isCompleted ? \u0027Y\u0027 : \u0027N\u0027,","lastModifiedDate":"2023-09-14"},{"lineNumber":63,"author":{"gitId":"yytan25"},"content":"            this.start,","lastModifiedDate":"2023-09-14"},{"lineNumber":64,"author":{"gitId":"yytan25"},"content":"            this.end);","lastModifiedDate":"2023-09-14"},{"lineNumber":65,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":66,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":67,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"yytan25"},"content":"     * Returns the string representation of the {@code Event}, to be","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"yytan25"},"content":"     * printed in the {@code list} method.","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"yytan25"},"content":"     * @return String representation of the {@code Event}.","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"yytan25"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":74,"author":{"gitId":"yytan25"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":75,"author":{"gitId":"yytan25"},"content":"        DateTimeFormatter dateFormatter \u003d DateTimeFormatter.ofPattern(\"dd MMM yyyy\");","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"yytan25"},"content":"        DateTimeFormatter timeFormatter \u003d DateTimeFormatter.ofPattern(\"HH:mm\");","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"yytan25"},"content":"        String startDate \u003d this.start.toLocalDate().format(dateFormatter);","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"yytan25"},"content":"        String endDate \u003d this.end.toLocalDate().format(dateFormatter);","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"yytan25"},"content":"        String startTime \u003d this.start.toLocalTime().format(timeFormatter);","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"yytan25"},"content":"        String endTime \u003d this.end.toLocalTime().format(timeFormatter);","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"yytan25"},"content":"        return \"[E]\" + super.toString() + String.format(","lastModifiedDate":"2023-08-20"},{"lineNumber":82,"author":{"gitId":"yytan25"},"content":"            \" (from: %s to: %s)\",","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"yytan25"},"content":"            startDate + \" \" + startTime,","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"yytan25"},"content":"            endDate + \" \" + endTime);","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":86,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"yytan25":86}},{"path":"src/main/java/leon/Leon.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package leon;","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":" * The {@code Leon} class. Main class that drives other functions.","lastModifiedDate":"2023-09-22"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"public class Leon {","lastModifiedDate":"2023-09-22"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"    private final TaskList tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":"    private final Ui ui;","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"    private final Parser parser;","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"     * Initiates a new {@code Leon} object.","lastModifiedDate":"2023-09-22"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"     * @throws IOException When the {@code saveTasksToDisk()} method in the {@code Storage} class","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"     *                     fails to function properly.","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"    public Leon() throws IOException {","lastModifiedDate":"2023-09-22"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"        this.tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"        Storage storage \u003d new Storage(tasks);","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"        this.parser \u003d new Parser(this, tasks, ui, storage);","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"        storage.launchOnStart();","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"        storage.readTasksFromDisk(\"./data/tasks.txt\");","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"     * Passes the user input to the {@code Parser} that returns the required response.","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"    public String getResponse(String input) throws IOException {","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"        return parser.readInput(input);","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":37,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":38,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"yytan25"},"content":"     * Helper function to execute the {@code TASK} command.","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"yytan25"},"content":"     * @param res     StringBuilder to be returned in {@code executeCommand}.","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"yytan25"},"content":"     * @param details Details of task.","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"yytan25"},"content":"    public void executeTask(StringBuilder res, String details) {","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"yytan25"},"content":"        assert !details.isBlank();","lastModifiedDate":"2023-09-14"},{"lineNumber":46,"author":{"gitId":"yytan25"},"content":"        if (tasks.checkDuplicates(details)) {","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"yytan25"},"content":"            res.append(ui.getDuplicateTasksMessage(details));","lastModifiedDate":"2023-09-09"},{"lineNumber":48,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"yytan25"},"content":"            tasks.add(new Task(details));","lastModifiedDate":"2023-08-24"},{"lineNumber":50,"author":{"gitId":"yytan25"},"content":"            res.append(ui.getTaskAddedMessage(details));","lastModifiedDate":"2023-09-09"},{"lineNumber":51,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":52,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":53,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":54,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":55,"author":{"gitId":"yytan25"},"content":"     * Helper function to execute the {@code TODO} command.","lastModifiedDate":"2023-09-09"},{"lineNumber":56,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":57,"author":{"gitId":"yytan25"},"content":"     * @param res     StringBuilder to be returned in {@code executeCommand}.","lastModifiedDate":"2023-09-09"},{"lineNumber":58,"author":{"gitId":"yytan25"},"content":"     * @param details Details of TODO.","lastModifiedDate":"2023-09-09"},{"lineNumber":59,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":60,"author":{"gitId":"yytan25"},"content":"    public void executeTodo(StringBuilder res, String details) {","lastModifiedDate":"2023-09-09"},{"lineNumber":61,"author":{"gitId":"yytan25"},"content":"        assert !details.isBlank();","lastModifiedDate":"2023-09-14"},{"lineNumber":62,"author":{"gitId":"yytan25"},"content":"        if (tasks.checkDuplicates(details)) {","lastModifiedDate":"2023-09-09"},{"lineNumber":63,"author":{"gitId":"yytan25"},"content":"            res.append(ui.getDuplicateTasksMessage(details));","lastModifiedDate":"2023-09-09"},{"lineNumber":64,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-09-09"},{"lineNumber":65,"author":{"gitId":"yytan25"},"content":"            tasks.add(new ToDo(details));","lastModifiedDate":"2023-08-24"},{"lineNumber":66,"author":{"gitId":"yytan25"},"content":"            res.append(ui.getTodoAddedMessage(details));","lastModifiedDate":"2023-09-09"},{"lineNumber":67,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":68,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":69,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":70,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":71,"author":{"gitId":"yytan25"},"content":"     * Helper function to execute the {@code DEADLINE} command.","lastModifiedDate":"2023-09-09"},{"lineNumber":72,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":73,"author":{"gitId":"yytan25"},"content":"     * @param res     StringBuilder to be returned in {@code executeCommand}.","lastModifiedDate":"2023-09-09"},{"lineNumber":74,"author":{"gitId":"yytan25"},"content":"     * @param details Details of deadline.","lastModifiedDate":"2023-09-09"},{"lineNumber":75,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":76,"author":{"gitId":"yytan25"},"content":"    public void executeDeadline(StringBuilder res, String details, LocalDateTime dueDateTime) {","lastModifiedDate":"2023-09-09"},{"lineNumber":77,"author":{"gitId":"yytan25"},"content":"        assert !details.isBlank();","lastModifiedDate":"2023-09-14"},{"lineNumber":78,"author":{"gitId":"yytan25"},"content":"        assert dueDateTime !\u003d null;","lastModifiedDate":"2023-09-14"},{"lineNumber":79,"author":{"gitId":"yytan25"},"content":"        if (tasks.checkDuplicates(details)) {","lastModifiedDate":"2023-09-09"},{"lineNumber":80,"author":{"gitId":"yytan25"},"content":"            res.append(ui.getDuplicateTasksMessage(details));","lastModifiedDate":"2023-09-09"},{"lineNumber":81,"author":{"gitId":"yytan25"},"content":"        } else if (dueDateTime.isBefore(LocalDateTime.now())) {","lastModifiedDate":"2023-09-14"},{"lineNumber":82,"author":{"gitId":"yytan25"},"content":"            res.append(ui.getInvalidStartMessage(Parser.Command.DEADLINE));","lastModifiedDate":"2023-09-09"},{"lineNumber":83,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-09-09"},{"lineNumber":84,"author":{"gitId":"yytan25"},"content":"            tasks.add(new Deadline(details, dueDateTime));","lastModifiedDate":"2023-09-09"},{"lineNumber":85,"author":{"gitId":"yytan25"},"content":"            res.append(ui.getDeadlineAddedMessage(details));","lastModifiedDate":"2023-09-09"},{"lineNumber":86,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":87,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":89,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":90,"author":{"gitId":"yytan25"},"content":"     * Helper function to execute the {@code EVENT} command.","lastModifiedDate":"2023-09-09"},{"lineNumber":91,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":92,"author":{"gitId":"yytan25"},"content":"     * @param res     StringBuilder to be returned in {@code executeCommand}.","lastModifiedDate":"2023-09-09"},{"lineNumber":93,"author":{"gitId":"yytan25"},"content":"     * @param details Details of event.","lastModifiedDate":"2023-09-09"},{"lineNumber":94,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":95,"author":{"gitId":"yytan25"},"content":"    public void executeEvent(StringBuilder res, String details, LocalDateTime startDateTime,","lastModifiedDate":"2023-09-09"},{"lineNumber":96,"author":{"gitId":"yytan25"},"content":"                             LocalDateTime endDateTime) {","lastModifiedDate":"2023-09-09"},{"lineNumber":97,"author":{"gitId":"yytan25"},"content":"        assert !details.isBlank();","lastModifiedDate":"2023-09-14"},{"lineNumber":98,"author":{"gitId":"yytan25"},"content":"        assert startDateTime !\u003d null;","lastModifiedDate":"2023-09-14"},{"lineNumber":99,"author":{"gitId":"yytan25"},"content":"        assert endDateTime !\u003d null;","lastModifiedDate":"2023-09-14"},{"lineNumber":100,"author":{"gitId":"yytan25"},"content":"        if (tasks.checkDuplicates(details)) {","lastModifiedDate":"2023-09-09"},{"lineNumber":101,"author":{"gitId":"yytan25"},"content":"            res.append(ui.getDuplicateTasksMessage(details));","lastModifiedDate":"2023-09-09"},{"lineNumber":102,"author":{"gitId":"yytan25"},"content":"        } else if (endDateTime.isBefore(LocalDateTime.now())) {","lastModifiedDate":"2023-09-14"},{"lineNumber":103,"author":{"gitId":"yytan25"},"content":"            res.append(ui.getInvalidStartMessage(Parser.Command.EVENT));","lastModifiedDate":"2023-09-09"},{"lineNumber":104,"author":{"gitId":"yytan25"},"content":"        } else if (!isValidTimeInterval(startDateTime, endDateTime)) {","lastModifiedDate":"2023-09-14"},{"lineNumber":105,"author":{"gitId":"yytan25"},"content":"            res.append(ui.getInvalidIntervalMessage(Parser.Command.EVENT));","lastModifiedDate":"2023-09-09"},{"lineNumber":106,"author":{"gitId":"yytan25"},"content":"        } else if (tasks.hasScheduleClash(startDateTime, endDateTime)) {","lastModifiedDate":"2023-09-15"},{"lineNumber":107,"author":{"gitId":"yytan25"},"content":"            String scheduleClash \u003d tasks.getScheduleClash(startDateTime, endDateTime);","lastModifiedDate":"2023-09-15"},{"lineNumber":108,"author":{"gitId":"yytan25"},"content":"            res.append(ui.getScheduleClashMessage(scheduleClash));","lastModifiedDate":"2023-09-15"},{"lineNumber":109,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-09-09"},{"lineNumber":110,"author":{"gitId":"yytan25"},"content":"            tasks.add(new Event(details, startDateTime, endDateTime));","lastModifiedDate":"2023-09-09"},{"lineNumber":111,"author":{"gitId":"yytan25"},"content":"            res.append(ui.getEventAddedMessage(details));","lastModifiedDate":"2023-09-09"},{"lineNumber":112,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":113,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":115,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":116,"author":{"gitId":"yytan25"},"content":"     * Helper function to execute the {@code LIST} command.","lastModifiedDate":"2023-09-09"},{"lineNumber":117,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":118,"author":{"gitId":"yytan25"},"content":"     * @param res StringBuilder to be returned in {@code executeCommand}.","lastModifiedDate":"2023-09-09"},{"lineNumber":119,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":120,"author":{"gitId":"yytan25"},"content":"    public void executeList(StringBuilder res) {","lastModifiedDate":"2023-09-09"},{"lineNumber":121,"author":{"gitId":"yytan25"},"content":"        int numOfTasks \u003d tasks.getNumOfTasks();","lastModifiedDate":"2023-09-09"},{"lineNumber":122,"author":{"gitId":"yytan25"},"content":"        int numOfCompletedTasks \u003d tasks.getNumOfCompletedTasks();","lastModifiedDate":"2023-09-09"},{"lineNumber":123,"author":{"gitId":"yytan25"},"content":"        res.append(ui.getListSummary(numOfTasks, numOfCompletedTasks));","lastModifiedDate":"2023-09-09"},{"lineNumber":124,"author":{"gitId":"yytan25"},"content":"        res.append(ui.getTasksInList(tasks));","lastModifiedDate":"2023-09-09"},{"lineNumber":125,"author":{"gitId":"yytan25"},"content":"        if (numOfCompletedTasks \u003d\u003d numOfTasks) {","lastModifiedDate":"2023-09-09"},{"lineNumber":126,"author":{"gitId":"yytan25"},"content":"            res.append(ui.getAllCompleteMessage());","lastModifiedDate":"2023-09-09"},{"lineNumber":127,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-09-09"},{"lineNumber":128,"author":{"gitId":"yytan25"},"content":"            res.append(ui.getNotAllCompleteMessage());","lastModifiedDate":"2023-09-09"},{"lineNumber":129,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":131,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":132,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":133,"author":{"gitId":"yytan25"},"content":"     * Helper function to execute the {@code MARK} command.","lastModifiedDate":"2023-09-09"},{"lineNumber":134,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":135,"author":{"gitId":"yytan25"},"content":"     * @param res        StringBuilder to be returned in {@code executeCommand}.","lastModifiedDate":"2023-09-09"},{"lineNumber":136,"author":{"gitId":"yytan25"},"content":"     * @param taskNumber Index of task to be marked.","lastModifiedDate":"2023-09-09"},{"lineNumber":137,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":138,"author":{"gitId":"yytan25"},"content":"    public void executeMark(StringBuilder res, int taskNumber) {","lastModifiedDate":"2023-09-09"},{"lineNumber":139,"author":{"gitId":"yytan25"},"content":"        assert taskNumber \u003e 0 \u0026\u0026 taskNumber \u003c\u003d tasks.getNumOfTasks();","lastModifiedDate":"2023-09-14"},{"lineNumber":140,"author":{"gitId":"yytan25"},"content":"        assert !tasks.isEmpty();","lastModifiedDate":"2023-09-14"},{"lineNumber":141,"author":{"gitId":"yytan25"},"content":"        if (markAsComplete(taskNumber)) {","lastModifiedDate":"2023-09-09"},{"lineNumber":142,"author":{"gitId":"yytan25"},"content":"            res.append(ui.getMarkMessage(Parser.Command.MARK, taskNumber));","lastModifiedDate":"2023-09-09"},{"lineNumber":143,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-09-09"},{"lineNumber":144,"author":{"gitId":"yytan25"},"content":"            res.append(ui.getMarkRedundantMessage(Parser.Command.MARK, taskNumber));","lastModifiedDate":"2023-09-09"},{"lineNumber":145,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":146,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":147,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":148,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":149,"author":{"gitId":"yytan25"},"content":"     * Helper function to execute the {@code UNMARK} command.","lastModifiedDate":"2023-09-09"},{"lineNumber":150,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":151,"author":{"gitId":"yytan25"},"content":"     * @param res        StringBuilder to be returned in {@code executeCommand}.","lastModifiedDate":"2023-09-09"},{"lineNumber":152,"author":{"gitId":"yytan25"},"content":"     * @param taskNumber Index of task to be unmarked.","lastModifiedDate":"2023-09-09"},{"lineNumber":153,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":154,"author":{"gitId":"yytan25"},"content":"    public void executeUnmark(StringBuilder res, int taskNumber) {","lastModifiedDate":"2023-09-09"},{"lineNumber":155,"author":{"gitId":"yytan25"},"content":"        assert taskNumber \u003e 0 \u0026\u0026 taskNumber \u003c\u003d tasks.getNumOfTasks();","lastModifiedDate":"2023-09-14"},{"lineNumber":156,"author":{"gitId":"yytan25"},"content":"        assert !tasks.isEmpty();","lastModifiedDate":"2023-09-14"},{"lineNumber":157,"author":{"gitId":"yytan25"},"content":"        if (markAsIncomplete(taskNumber)) {","lastModifiedDate":"2023-09-09"},{"lineNumber":158,"author":{"gitId":"yytan25"},"content":"            res.append(ui.getMarkMessage(Parser.Command.UNMARK, taskNumber));","lastModifiedDate":"2023-09-09"},{"lineNumber":159,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-09-09"},{"lineNumber":160,"author":{"gitId":"yytan25"},"content":"            res.append(ui.getMarkRedundantMessage(Parser.Command.UNMARK, taskNumber));","lastModifiedDate":"2023-09-09"},{"lineNumber":161,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":162,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":163,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":164,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":165,"author":{"gitId":"yytan25"},"content":"     * Helper function to execute the {@code DELETE} command.","lastModifiedDate":"2023-09-09"},{"lineNumber":166,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":167,"author":{"gitId":"yytan25"},"content":"     * @param res        StringBuilder to be returned in {@code executeCommand}.","lastModifiedDate":"2023-09-09"},{"lineNumber":168,"author":{"gitId":"yytan25"},"content":"     * @param taskNumber Index of task to be deleted.","lastModifiedDate":"2023-09-09"},{"lineNumber":169,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":170,"author":{"gitId":"yytan25"},"content":"    public void executeDelete(StringBuilder res, int taskNumber) {","lastModifiedDate":"2023-09-09"},{"lineNumber":171,"author":{"gitId":"yytan25"},"content":"        assert taskNumber \u003e 0 \u0026\u0026 taskNumber \u003c\u003d tasks.getNumOfTasks();","lastModifiedDate":"2023-09-14"},{"lineNumber":172,"author":{"gitId":"yytan25"},"content":"        assert !tasks.isEmpty();","lastModifiedDate":"2023-09-14"},{"lineNumber":173,"author":{"gitId":"yytan25"},"content":"        Task task \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2023-09-09"},{"lineNumber":174,"author":{"gitId":"yytan25"},"content":"        tasks.remove(task);","lastModifiedDate":"2023-09-09"},{"lineNumber":175,"author":{"gitId":"yytan25"},"content":"        res.append(ui.getTaskDeletedMessage(tasks, taskNumber));","lastModifiedDate":"2023-09-09"},{"lineNumber":176,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":177,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":178,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":179,"author":{"gitId":"yytan25"},"content":"     * Helper function to execute the {@code SEARCH} command.","lastModifiedDate":"2023-09-09"},{"lineNumber":180,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":181,"author":{"gitId":"yytan25"},"content":"     * @param res     StringBuilder to be returned in {@code executeCommand}.","lastModifiedDate":"2023-09-09"},{"lineNumber":182,"author":{"gitId":"yytan25"},"content":"     * @param keyword Keyword to be searched.","lastModifiedDate":"2023-09-09"},{"lineNumber":183,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":184,"author":{"gitId":"yytan25"},"content":"    public void executeSearch(StringBuilder res, String keyword) {","lastModifiedDate":"2023-09-09"},{"lineNumber":185,"author":{"gitId":"yytan25"},"content":"        assert !keyword.isBlank();","lastModifiedDate":"2023-09-14"},{"lineNumber":186,"author":{"gitId":"yytan25"},"content":"        assert !tasks.isEmpty();","lastModifiedDate":"2023-09-14"},{"lineNumber":187,"author":{"gitId":"yytan25"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d getMatchingTasks(keyword);","lastModifiedDate":"2023-09-09"},{"lineNumber":188,"author":{"gitId":"yytan25"},"content":"        if (matchingTasks.isEmpty()) {","lastModifiedDate":"2023-09-09"},{"lineNumber":189,"author":{"gitId":"yytan25"},"content":"            res.append(ui.getEmptySearchResultsMessage(keyword));","lastModifiedDate":"2023-09-09"},{"lineNumber":190,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-08-21"},{"lineNumber":191,"author":{"gitId":"yytan25"},"content":"            res.append(ui.getSearchResultsMessage(matchingTasks));","lastModifiedDate":"2023-09-09"},{"lineNumber":192,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":193,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":194,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":195,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":196,"author":{"gitId":"yytan25"},"content":"     * Marks a selected task as complete, with the task number input by the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":197,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":198,"author":{"gitId":"yytan25"},"content":"    public boolean markAsComplete(int taskNumber) {","lastModifiedDate":"2023-09-09"},{"lineNumber":199,"author":{"gitId":"yytan25"},"content":"        assert taskNumber \u003e 0 \u0026\u0026 taskNumber \u003c\u003d tasks.getNumOfTasks();","lastModifiedDate":"2023-09-14"},{"lineNumber":200,"author":{"gitId":"yytan25"},"content":"        assert !tasks.isEmpty();","lastModifiedDate":"2023-09-14"},{"lineNumber":201,"author":{"gitId":"yytan25"},"content":"        Task task \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2023-08-20"},{"lineNumber":202,"author":{"gitId":"yytan25"},"content":"        if (!task.isCompleted) {","lastModifiedDate":"2023-08-20"},{"lineNumber":203,"author":{"gitId":"yytan25"},"content":"            task.setCompleted();","lastModifiedDate":"2023-08-20"},{"lineNumber":204,"author":{"gitId":"yytan25"},"content":"            tasks.incrementCompletedTasks();","lastModifiedDate":"2023-09-01"},{"lineNumber":205,"author":{"gitId":"yytan25"},"content":"            return true;","lastModifiedDate":"2023-09-09"},{"lineNumber":206,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-08-20"},{"lineNumber":207,"author":{"gitId":"yytan25"},"content":"            return false;","lastModifiedDate":"2023-09-09"},{"lineNumber":208,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":209,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":210,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":211,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":212,"author":{"gitId":"yytan25"},"content":"     * Marks a selected task as incomplete, with the task number input by the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":213,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":214,"author":{"gitId":"yytan25"},"content":"    public boolean markAsIncomplete(int taskNumber) {","lastModifiedDate":"2023-09-09"},{"lineNumber":215,"author":{"gitId":"yytan25"},"content":"        assert taskNumber \u003e 0 \u0026\u0026 taskNumber \u003c\u003d tasks.getNumOfTasks();","lastModifiedDate":"2023-09-14"},{"lineNumber":216,"author":{"gitId":"yytan25"},"content":"        assert !tasks.isEmpty();","lastModifiedDate":"2023-09-14"},{"lineNumber":217,"author":{"gitId":"yytan25"},"content":"        Task task \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2023-08-20"},{"lineNumber":218,"author":{"gitId":"yytan25"},"content":"        if (task.isCompleted) {","lastModifiedDate":"2023-08-20"},{"lineNumber":219,"author":{"gitId":"yytan25"},"content":"            task.setIncomplete();","lastModifiedDate":"2023-08-20"},{"lineNumber":220,"author":{"gitId":"yytan25"},"content":"            tasks.decrementCompletedTasks();","lastModifiedDate":"2023-09-01"},{"lineNumber":221,"author":{"gitId":"yytan25"},"content":"            return true;","lastModifiedDate":"2023-09-09"},{"lineNumber":222,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-08-20"},{"lineNumber":223,"author":{"gitId":"yytan25"},"content":"            return false;","lastModifiedDate":"2023-09-09"},{"lineNumber":224,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":225,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":226,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":227,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":228,"author":{"gitId":"yytan25"},"content":"     * Gets all tasks in the {@code TaskList} containing a keyword input by the user.","lastModifiedDate":"2023-09-09"},{"lineNumber":229,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":230,"author":{"gitId":"yytan25"},"content":"     * @return {@code ArrayList} of tasks matching the keyword; {@code null} if the user input is blank.","lastModifiedDate":"2023-09-09"},{"lineNumber":231,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":232,"author":{"gitId":"yytan25"},"content":"    public ArrayList\u003cTask\u003e getMatchingTasks(String keyword) {","lastModifiedDate":"2023-09-09"},{"lineNumber":233,"author":{"gitId":"yytan25"},"content":"        ArrayList\u003cTask\u003e matchingTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-09"},{"lineNumber":234,"author":{"gitId":"yytan25"},"content":"        for (int i \u003d 0; i \u003c tasks.getNumOfTasks(); i++) {","lastModifiedDate":"2023-09-09"},{"lineNumber":235,"author":{"gitId":"yytan25"},"content":"            Task t \u003d tasks.get(i);","lastModifiedDate":"2023-09-09"},{"lineNumber":236,"author":{"gitId":"yytan25"},"content":"            String details \u003d t.getDetails();","lastModifiedDate":"2023-09-09"},{"lineNumber":237,"author":{"gitId":"yytan25"},"content":"            if (details.contains(keyword)) {","lastModifiedDate":"2023-09-09"},{"lineNumber":238,"author":{"gitId":"yytan25"},"content":"                matchingTasks.add(t);","lastModifiedDate":"2023-09-09"},{"lineNumber":239,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":240,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":241,"author":{"gitId":"yytan25"},"content":"        return matchingTasks;","lastModifiedDate":"2023-09-09"},{"lineNumber":242,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":243,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":244,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":245,"author":{"gitId":"yytan25"},"content":"     * Checks if the end time of a {@code Task} is at or after the start time.","lastModifiedDate":"2023-09-09"},{"lineNumber":246,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":247,"author":{"gitId":"yytan25"},"content":"     * @param startTime Start time of the {@code Task}.","lastModifiedDate":"2023-09-09"},{"lineNumber":248,"author":{"gitId":"yytan25"},"content":"     * @param endTime   End time of the {@code Task}.","lastModifiedDate":"2023-09-09"},{"lineNumber":249,"author":{"gitId":"yytan25"},"content":"     * @return {@code true} if the end time is at or after the start time; {@code false} otherwise.","lastModifiedDate":"2023-09-09"},{"lineNumber":250,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":251,"author":{"gitId":"yytan25"},"content":"    public boolean isValidTimeInterval(LocalDateTime startTime, LocalDateTime endTime) {","lastModifiedDate":"2023-09-14"},{"lineNumber":252,"author":{"gitId":"yytan25"},"content":"        return endTime.isAfter(startTime);","lastModifiedDate":"2023-09-09"},{"lineNumber":253,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":254,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":255,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":256,"author":{"gitId":"yytan25"},"content":"     * Driver function to execute commands once all operations are complete.","lastModifiedDate":"2023-09-09"},{"lineNumber":257,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":258,"author":{"gitId":"yytan25"},"content":"     * @param command        Command to be executed.","lastModifiedDate":"2023-09-09"},{"lineNumber":259,"author":{"gitId":"yytan25"},"content":"     * @param message        Message that is passed from the {@code Parser}.","lastModifiedDate":"2023-09-09"},{"lineNumber":260,"author":{"gitId":"yytan25"},"content":"     * @param localDateTimes Variable number of {@code LocalDateTime}s to account for the parameters","lastModifiedDate":"2023-09-09"},{"lineNumber":261,"author":{"gitId":"yytan25"},"content":"     *                       of commands.","lastModifiedDate":"2023-09-09"},{"lineNumber":262,"author":{"gitId":"yytan25"},"content":"     * @return Output of Leon as a String.","lastModifiedDate":"2023-09-22"},{"lineNumber":263,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":264,"author":{"gitId":"yytan25"},"content":"    public String executeCommand(Parser.Command command, String message,","lastModifiedDate":"2023-09-09"},{"lineNumber":265,"author":{"gitId":"yytan25"},"content":"                                 LocalDateTime... localDateTimes) {","lastModifiedDate":"2023-09-09"},{"lineNumber":266,"author":{"gitId":"yytan25"},"content":"        StringBuilder res \u003d new StringBuilder();","lastModifiedDate":"2023-09-09"},{"lineNumber":267,"author":{"gitId":"yytan25"},"content":"        switch (command) {","lastModifiedDate":"2023-09-09"},{"lineNumber":268,"author":{"gitId":"yytan25"},"content":"        case TASK:","lastModifiedDate":"2023-09-22"},{"lineNumber":269,"author":{"gitId":"yytan25"},"content":"            executeTask(res, message);","lastModifiedDate":"2023-09-22"},{"lineNumber":270,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":271,"author":{"gitId":"yytan25"},"content":"        case TODO:","lastModifiedDate":"2023-09-22"},{"lineNumber":272,"author":{"gitId":"yytan25"},"content":"            executeTodo(res, message);","lastModifiedDate":"2023-09-22"},{"lineNumber":273,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":274,"author":{"gitId":"yytan25"},"content":"        case DEADLINE:","lastModifiedDate":"2023-09-22"},{"lineNumber":275,"author":{"gitId":"yytan25"},"content":"            executeDeadline(res, message, localDateTimes[0]);","lastModifiedDate":"2023-09-22"},{"lineNumber":276,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":277,"author":{"gitId":"yytan25"},"content":"        case EVENT:","lastModifiedDate":"2023-09-22"},{"lineNumber":278,"author":{"gitId":"yytan25"},"content":"            executeEvent(res, message, localDateTimes[0], localDateTimes[1]);","lastModifiedDate":"2023-09-22"},{"lineNumber":279,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":280,"author":{"gitId":"yytan25"},"content":"        case LIST:","lastModifiedDate":"2023-09-22"},{"lineNumber":281,"author":{"gitId":"yytan25"},"content":"            executeList(res);","lastModifiedDate":"2023-09-22"},{"lineNumber":282,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":283,"author":{"gitId":"yytan25"},"content":"        case MARK:","lastModifiedDate":"2023-09-22"},{"lineNumber":284,"author":{"gitId":"yytan25"},"content":"            int taskNumber1 \u003d Integer.parseInt(message);","lastModifiedDate":"2023-09-22"},{"lineNumber":285,"author":{"gitId":"yytan25"},"content":"            executeMark(res, taskNumber1);","lastModifiedDate":"2023-09-22"},{"lineNumber":286,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":287,"author":{"gitId":"yytan25"},"content":"        case UNMARK:","lastModifiedDate":"2023-09-22"},{"lineNumber":288,"author":{"gitId":"yytan25"},"content":"            int taskNumber2 \u003d Integer.parseInt(message);","lastModifiedDate":"2023-09-22"},{"lineNumber":289,"author":{"gitId":"yytan25"},"content":"            executeUnmark(res, taskNumber2);","lastModifiedDate":"2023-09-22"},{"lineNumber":290,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":291,"author":{"gitId":"yytan25"},"content":"        case DELETE:","lastModifiedDate":"2023-09-22"},{"lineNumber":292,"author":{"gitId":"yytan25"},"content":"            int taskNumber3 \u003d Integer.parseInt(message);","lastModifiedDate":"2023-09-22"},{"lineNumber":293,"author":{"gitId":"yytan25"},"content":"            executeDelete(res, taskNumber3);","lastModifiedDate":"2023-09-22"},{"lineNumber":294,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":295,"author":{"gitId":"yytan25"},"content":"        case FIND:","lastModifiedDate":"2023-09-22"},{"lineNumber":296,"author":{"gitId":"yytan25"},"content":"        case SEARCH:","lastModifiedDate":"2023-09-22"},{"lineNumber":297,"author":{"gitId":"yytan25"},"content":"            executeSearch(res, message);","lastModifiedDate":"2023-09-22"},{"lineNumber":298,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":299,"author":{"gitId":"yytan25"},"content":"        case COMMANDS:","lastModifiedDate":"2023-09-22"},{"lineNumber":300,"author":{"gitId":"yytan25"},"content":"            res.append(ui.getCommands());","lastModifiedDate":"2023-09-22"},{"lineNumber":301,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":302,"author":{"gitId":"yytan25"},"content":"        default:","lastModifiedDate":"2023-09-22"},{"lineNumber":303,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":304,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":305,"author":{"gitId":"yytan25"},"content":"        parser.resetCommandInExecution();","lastModifiedDate":"2023-09-09"},{"lineNumber":306,"author":{"gitId":"yytan25"},"content":"        return res.toString();","lastModifiedDate":"2023-09-09"},{"lineNumber":307,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":308,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":309,"author":{"gitId":"yytan25"},"content":"    public static void main(String[] args) throws IOException {","lastModifiedDate":"2023-08-26"},{"lineNumber":310,"author":{"gitId":"yytan25"},"content":"        new Leon();","lastModifiedDate":"2023-09-22"},{"lineNumber":311,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":312,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"yytan25":310,"-":2}},{"path":"src/main/java/leon/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package leon;","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"import static leon.Parser.Command.DEADLINE;","lastModifiedDate":"2023-09-22"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"import static leon.Parser.Operation.CONFIRM;","lastModifiedDate":"2023-09-22"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"import static leon.Parser.Operation.DATE;","lastModifiedDate":"2023-09-22"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"import static leon.Parser.Operation.DETAILS;","lastModifiedDate":"2023-09-22"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":"import static leon.Parser.Operation.KEYWORD;","lastModifiedDate":"2023-09-22"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"import static leon.Parser.Operation.TIME;","lastModifiedDate":"2023-09-22"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"import java.util.LinkedList;","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":" * The {@code Parser} class. Deals with making sense of the user input.","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"public class Parser {","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"    private final Ui ui;","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"    private final Leon leon;","lastModifiedDate":"2023-09-22"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"    private final TaskList tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"    private final Storage storage;","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"    private String storedDetails;","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"    private final ArrayList\u003cLocalDate\u003e localDates \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"    private final ArrayList\u003cLocalTime\u003e localTimes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"    private Command commandInExecution \u003d Command.NONE;","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"    private Operation operationInExecution \u003d Operation.NONE;","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"    private final LinkedList\u003cOperation\u003e operations \u003d new LinkedList\u003c\u003e();","lastModifiedDate":"2023-09-09"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"     * Enumeration of all possible user commands.","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"yytan25"},"content":"    public enum Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"yytan25"},"content":"        TASK, TODO, DEADLINE, EVENT, LIST, MARK, UNMARK, DELETE, COMMANDS, FIND, SEARCH, NONE","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"yytan25"},"content":"     * Enumeration of all possible operations on the commands.","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"yytan25"},"content":"    public enum Operation {","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"yytan25"},"content":"        DETAILS, DATE, TIME, CONFIRM, KEYWORD, NONE","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":50,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"yytan25"},"content":"     * Constructs a new {@code Parser} object.","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"yytan25"},"content":"     * Can only be instantiated with a {@code Leon} object.","lastModifiedDate":"2023-09-22"},{"lineNumber":53,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"yytan25"},"content":"     * @param leon  {@code Leon} object that called the constructor.","lastModifiedDate":"2023-09-22"},{"lineNumber":55,"author":{"gitId":"yytan25"},"content":"     * @param tasks {@code TaskList} object instantiated by the same {@code Leon} object.","lastModifiedDate":"2023-09-22"},{"lineNumber":56,"author":{"gitId":"yytan25"},"content":"     * @param ui    {@code Ui} object instantiated by the same {@code Leon} object.","lastModifiedDate":"2023-09-22"},{"lineNumber":57,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"yytan25"},"content":"    Parser(Leon leon, TaskList tasks, Ui ui,","lastModifiedDate":"2023-09-22"},{"lineNumber":59,"author":{"gitId":"yytan25"},"content":"           Storage storage) { // Can only be instantiated with a Leon object","lastModifiedDate":"2023-09-22"},{"lineNumber":60,"author":{"gitId":"yytan25"},"content":"        this.leon \u003d leon;","lastModifiedDate":"2023-09-22"},{"lineNumber":61,"author":{"gitId":"yytan25"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"yytan25"},"content":"        this.ui \u003d ui;","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"yytan25"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2023-09-09"},{"lineNumber":64,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"yytan25"},"content":"     * Parses the user input from the {@code Scanner}.","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"yytan25"},"content":"     * If the input corresponds to one of the valid commands, the {@code executeCommand} method","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"yytan25"},"content":"     * will execute the command. Otherwise, an error message will be printed. (This will be","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"yytan25"},"content":"     * treated as an invalid input.)","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"yytan25"},"content":"     * @param message Input from the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"yytan25"},"content":"    public String readInput(String message) throws IOException {","lastModifiedDate":"2023-09-09"},{"lineNumber":75,"author":{"gitId":"yytan25"},"content":"        if (message.equals(\"bye\")) {","lastModifiedDate":"2023-09-09"},{"lineNumber":76,"author":{"gitId":"yytan25"},"content":"            storage.saveTasksToDisk(\"./data/tasks.txt\", tasks);","lastModifiedDate":"2023-09-09"},{"lineNumber":77,"author":{"gitId":"yytan25"},"content":"            return ui.getExitMessage(0);","lastModifiedDate":"2023-09-09"},{"lineNumber":78,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":79,"author":{"gitId":"yytan25"},"content":"        if (this.commandInExecution \u003d\u003d Command.NONE) {","lastModifiedDate":"2023-09-09"},{"lineNumber":80,"author":{"gitId":"yytan25"},"content":"            String invalidInputMessage \u003d initialiseCommand(message);","lastModifiedDate":"2023-09-14"},{"lineNumber":81,"author":{"gitId":"yytan25"},"content":"            if (invalidInputMessage !\u003d null) {","lastModifiedDate":"2023-09-14"},{"lineNumber":82,"author":{"gitId":"yytan25"},"content":"                return invalidInputMessage;","lastModifiedDate":"2023-09-14"},{"lineNumber":83,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-09-09"},{"lineNumber":84,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":85,"author":{"gitId":"yytan25"},"content":"        String errorMessage \u003d checkOperation(commandInExecution, operationInExecution, message);","lastModifiedDate":"2023-09-09"},{"lineNumber":86,"author":{"gitId":"yytan25"},"content":"        if (errorMessage !\u003d null) {","lastModifiedDate":"2023-09-09"},{"lineNumber":87,"author":{"gitId":"yytan25"},"content":"            resetCommandInExecution();","lastModifiedDate":"2023-09-09"},{"lineNumber":88,"author":{"gitId":"yytan25"},"content":"            return errorMessage;","lastModifiedDate":"2023-09-09"},{"lineNumber":89,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":90,"author":{"gitId":"yytan25"},"content":"        if (operations.isEmpty()) {","lastModifiedDate":"2023-09-09"},{"lineNumber":91,"author":{"gitId":"yytan25"},"content":"            return taskExecutionHelper(commandInExecution, message);","lastModifiedDate":"2023-09-14"},{"lineNumber":92,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-09-09"},{"lineNumber":93,"author":{"gitId":"yytan25"},"content":"            Operation operation \u003d operations.poll();","lastModifiedDate":"2023-09-09"},{"lineNumber":94,"author":{"gitId":"yytan25"},"content":"            operationInExecution \u003d operation;","lastModifiedDate":"2023-09-09"},{"lineNumber":95,"author":{"gitId":"yytan25"},"content":"            return executeOperation(commandInExecution, operation);","lastModifiedDate":"2023-09-09"},{"lineNumber":96,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":100,"author":{"gitId":"yytan25"},"content":"     * Aims to initialise a command corresponding to the user input. If successful,","lastModifiedDate":"2023-09-14"},{"lineNumber":101,"author":{"gitId":"yytan25"},"content":"     * enqueues the necessary operations of the command into the LinkedList. If unsuccessful,","lastModifiedDate":"2023-09-14"},{"lineNumber":102,"author":{"gitId":"yytan25"},"content":"     * returns an invalid input message.","lastModifiedDate":"2023-09-14"},{"lineNumber":103,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":104,"author":{"gitId":"yytan25"},"content":"     * @param message The user input.","lastModifiedDate":"2023-09-14"},{"lineNumber":105,"author":{"gitId":"yytan25"},"content":"     * @return {@code InvalidInputMessage} if the user input is invalid; null otherwise.","lastModifiedDate":"2023-09-14"},{"lineNumber":106,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":107,"author":{"gitId":"yytan25"},"content":"    public String initialiseCommand(String message) {","lastModifiedDate":"2023-09-14"},{"lineNumber":108,"author":{"gitId":"yytan25"},"content":"        try {","lastModifiedDate":"2023-09-14"},{"lineNumber":109,"author":{"gitId":"yytan25"},"content":"            commandInExecution \u003d Command.valueOf(message.trim().toUpperCase());","lastModifiedDate":"2023-09-14"},{"lineNumber":110,"author":{"gitId":"yytan25"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-09-14"},{"lineNumber":111,"author":{"gitId":"yytan25"},"content":"            return ui.getInvalidInputMessage(message);","lastModifiedDate":"2023-09-14"},{"lineNumber":112,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":113,"author":{"gitId":"yytan25"},"content":"        switch (commandInExecution) {","lastModifiedDate":"2023-09-14"},{"lineNumber":114,"author":{"gitId":"yytan25"},"content":"        case TASK:","lastModifiedDate":"2023-09-22"},{"lineNumber":115,"author":{"gitId":"yytan25"},"content":"        case TODO:","lastModifiedDate":"2023-09-22"},{"lineNumber":116,"author":{"gitId":"yytan25"},"content":"            operations.add(DETAILS);","lastModifiedDate":"2023-09-22"},{"lineNumber":117,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":118,"author":{"gitId":"yytan25"},"content":"        case DEADLINE:","lastModifiedDate":"2023-09-22"},{"lineNumber":119,"author":{"gitId":"yytan25"},"content":"            operations.addLast(DETAILS);","lastModifiedDate":"2023-09-09"},{"lineNumber":120,"author":{"gitId":"yytan25"},"content":"            operations.addLast(DATE);","lastModifiedDate":"2023-09-09"},{"lineNumber":121,"author":{"gitId":"yytan25"},"content":"            operations.addLast(TIME);","lastModifiedDate":"2023-09-09"},{"lineNumber":122,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":123,"author":{"gitId":"yytan25"},"content":"        case EVENT:","lastModifiedDate":"2023-09-22"},{"lineNumber":124,"author":{"gitId":"yytan25"},"content":"            operations.addLast(DETAILS);","lastModifiedDate":"2023-09-09"},{"lineNumber":125,"author":{"gitId":"yytan25"},"content":"            for (int i \u003d 0; i \u003c 2; i++) {","lastModifiedDate":"2023-09-14"},{"lineNumber":126,"author":{"gitId":"yytan25"},"content":"                operations.addLast(DATE);","lastModifiedDate":"2023-09-09"},{"lineNumber":127,"author":{"gitId":"yytan25"},"content":"                operations.addLast(TIME);","lastModifiedDate":"2023-09-09"},{"lineNumber":128,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-09-14"},{"lineNumber":129,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":130,"author":{"gitId":"yytan25"},"content":"        case MARK:","lastModifiedDate":"2023-09-22"},{"lineNumber":131,"author":{"gitId":"yytan25"},"content":"        case UNMARK:","lastModifiedDate":"2023-09-22"},{"lineNumber":132,"author":{"gitId":"yytan25"},"content":"        case DELETE:","lastModifiedDate":"2023-09-22"},{"lineNumber":133,"author":{"gitId":"yytan25"},"content":"            operations.addLast(CONFIRM);","lastModifiedDate":"2023-09-22"},{"lineNumber":134,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":135,"author":{"gitId":"yytan25"},"content":"        case FIND:","lastModifiedDate":"2023-09-22"},{"lineNumber":136,"author":{"gitId":"yytan25"},"content":"        case SEARCH:","lastModifiedDate":"2023-09-22"},{"lineNumber":137,"author":{"gitId":"yytan25"},"content":"            operations.addLast(KEYWORD);","lastModifiedDate":"2023-09-22"},{"lineNumber":138,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":139,"author":{"gitId":"yytan25"},"content":"        default:","lastModifiedDate":"2023-09-22"},{"lineNumber":140,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":141,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"yytan25"},"content":"        return null;","lastModifiedDate":"2023-09-14"},{"lineNumber":143,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":144,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":145,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":146,"author":{"gitId":"yytan25"},"content":"     * Executes the necessary operation.","lastModifiedDate":"2023-09-09"},{"lineNumber":147,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":148,"author":{"gitId":"yytan25"},"content":"     * @param command   Current command in execution.","lastModifiedDate":"2023-09-09"},{"lineNumber":149,"author":{"gitId":"yytan25"},"content":"     * @param operation Current operation in execution.","lastModifiedDate":"2023-09-09"},{"lineNumber":150,"author":{"gitId":"yytan25"},"content":"     * @return Output of Leon as a String.","lastModifiedDate":"2023-09-22"},{"lineNumber":151,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":152,"author":{"gitId":"yytan25"},"content":"    public String executeOperation(Command command, Operation operation) {","lastModifiedDate":"2023-09-09"},{"lineNumber":153,"author":{"gitId":"yytan25"},"content":"        switch (operation) {","lastModifiedDate":"2023-09-09"},{"lineNumber":154,"author":{"gitId":"yytan25"},"content":"        case DETAILS:","lastModifiedDate":"2023-09-22"},{"lineNumber":155,"author":{"gitId":"yytan25"},"content":"            return ui.getDetailsPrompt(command);","lastModifiedDate":"2023-09-09"},{"lineNumber":156,"author":{"gitId":"yytan25"},"content":"        case DATE:","lastModifiedDate":"2023-09-22"},{"lineNumber":157,"author":{"gitId":"yytan25"},"content":"            String dateType \u003d getDateTimeType(command);","lastModifiedDate":"2023-09-09"},{"lineNumber":158,"author":{"gitId":"yytan25"},"content":"            return ui.getDateInputMessage(command, dateType);","lastModifiedDate":"2023-09-09"},{"lineNumber":159,"author":{"gitId":"yytan25"},"content":"        case TIME:","lastModifiedDate":"2023-09-22"},{"lineNumber":160,"author":{"gitId":"yytan25"},"content":"            String timeType \u003d getDateTimeType(command);","lastModifiedDate":"2023-09-09"},{"lineNumber":161,"author":{"gitId":"yytan25"},"content":"            return ui.getTimeInputMessage(command, timeType);","lastModifiedDate":"2023-09-09"},{"lineNumber":162,"author":{"gitId":"yytan25"},"content":"        case CONFIRM:","lastModifiedDate":"2023-09-22"},{"lineNumber":163,"author":{"gitId":"yytan25"},"content":"            if (tasks.isEmpty()) {","lastModifiedDate":"2023-09-09"},{"lineNumber":164,"author":{"gitId":"yytan25"},"content":"                resetCommandInExecution();","lastModifiedDate":"2023-09-09"},{"lineNumber":165,"author":{"gitId":"yytan25"},"content":"                return ui.getTasksEmptyMessage(command);","lastModifiedDate":"2023-09-09"},{"lineNumber":166,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-09-09"},{"lineNumber":167,"author":{"gitId":"yytan25"},"content":"            return ui.getConfirmationMessage(command, tasks);","lastModifiedDate":"2023-09-09"},{"lineNumber":168,"author":{"gitId":"yytan25"},"content":"        case KEYWORD:","lastModifiedDate":"2023-09-22"},{"lineNumber":169,"author":{"gitId":"yytan25"},"content":"            if (tasks.isEmpty()) {","lastModifiedDate":"2023-09-09"},{"lineNumber":170,"author":{"gitId":"yytan25"},"content":"                resetCommandInExecution();","lastModifiedDate":"2023-09-09"},{"lineNumber":171,"author":{"gitId":"yytan25"},"content":"                return ui.getTasksEmptyMessage(command);","lastModifiedDate":"2023-09-09"},{"lineNumber":172,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-09-09"},{"lineNumber":173,"author":{"gitId":"yytan25"},"content":"            return ui.getKeywordMessage();","lastModifiedDate":"2023-09-09"},{"lineNumber":174,"author":{"gitId":"yytan25"},"content":"        default:","lastModifiedDate":"2023-09-22"},{"lineNumber":175,"author":{"gitId":"yytan25"},"content":"            return null;","lastModifiedDate":"2023-09-01"},{"lineNumber":176,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":177,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":178,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":179,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":180,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":181,"author":{"gitId":"yytan25"},"content":"     * Checks and handles invalid user inputs.","lastModifiedDate":"2023-09-09"},{"lineNumber":182,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":183,"author":{"gitId":"yytan25"},"content":"     * @param command   Current command in execution.","lastModifiedDate":"2023-09-09"},{"lineNumber":184,"author":{"gitId":"yytan25"},"content":"     * @param operation Current operation in execution.","lastModifiedDate":"2023-09-09"},{"lineNumber":185,"author":{"gitId":"yytan25"},"content":"     * @param input     The user input.","lastModifiedDate":"2023-09-09"},{"lineNumber":186,"author":{"gitId":"yytan25"},"content":"     * @return Error message as a String, to be output by Leon; {@code null} if no errors are detected.","lastModifiedDate":"2023-09-22"},{"lineNumber":187,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":188,"author":{"gitId":"yytan25"},"content":"    public String checkOperation(Command command, Operation operation, String input) {","lastModifiedDate":"2023-09-09"},{"lineNumber":189,"author":{"gitId":"yytan25"},"content":"        if (input.isBlank()) {","lastModifiedDate":"2023-09-09"},{"lineNumber":190,"author":{"gitId":"yytan25"},"content":"            return ui.getEmptyInputMessage(command);","lastModifiedDate":"2023-09-09"},{"lineNumber":191,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":192,"author":{"gitId":"yytan25"},"content":"        switch (operation) {","lastModifiedDate":"2023-09-09"},{"lineNumber":193,"author":{"gitId":"yytan25"},"content":"        case DETAILS:","lastModifiedDate":"2023-09-22"},{"lineNumber":194,"author":{"gitId":"yytan25"},"content":"            storedDetails \u003d input;","lastModifiedDate":"2023-09-22"},{"lineNumber":195,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":196,"author":{"gitId":"yytan25"},"content":"        case DATE:","lastModifiedDate":"2023-09-22"},{"lineNumber":197,"author":{"gitId":"yytan25"},"content":"            if (!isValidDateInput(input)) {","lastModifiedDate":"2023-09-14"},{"lineNumber":198,"author":{"gitId":"yytan25"},"content":"                return ui.getInvalidFormatMessage(operation);","lastModifiedDate":"2023-09-09"},{"lineNumber":199,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":200,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":201,"author":{"gitId":"yytan25"},"content":"        case TIME:","lastModifiedDate":"2023-09-22"},{"lineNumber":202,"author":{"gitId":"yytan25"},"content":"            if (!isValidTimeInput(input)) {","lastModifiedDate":"2023-09-14"},{"lineNumber":203,"author":{"gitId":"yytan25"},"content":"                return ui.getInvalidFormatMessage(operation);","lastModifiedDate":"2023-09-09"},{"lineNumber":204,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":205,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":206,"author":{"gitId":"yytan25"},"content":"        case CONFIRM:","lastModifiedDate":"2023-09-22"},{"lineNumber":207,"author":{"gitId":"yytan25"},"content":"            if (!isValidNumberInput(input)) {","lastModifiedDate":"2023-09-14"},{"lineNumber":208,"author":{"gitId":"yytan25"},"content":"                return ui.getRequestFailedMessage(\"input\");","lastModifiedDate":"2023-09-09"},{"lineNumber":209,"author":{"gitId":"yytan25"},"content":"            } else if (!isValidTaskNumber(Integer.parseInt(input))) {","lastModifiedDate":"2023-09-14"},{"lineNumber":210,"author":{"gitId":"yytan25"},"content":"                return ui.getRequestFailedMessage(\"task number\");","lastModifiedDate":"2023-09-14"},{"lineNumber":211,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":212,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":213,"author":{"gitId":"yytan25"},"content":"        default:","lastModifiedDate":"2023-09-22"},{"lineNumber":214,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":215,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":216,"author":{"gitId":"yytan25"},"content":"        return null;","lastModifiedDate":"2023-09-09"},{"lineNumber":217,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":218,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":219,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":220,"author":{"gitId":"yytan25"},"content":"     * Checks if the date input is valid for the {@code DATE} operation.","lastModifiedDate":"2023-09-14"},{"lineNumber":221,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-14"},{"lineNumber":222,"author":{"gitId":"yytan25"},"content":"     * @param input Date input by user.","lastModifiedDate":"2023-09-14"},{"lineNumber":223,"author":{"gitId":"yytan25"},"content":"     * @return true if user input is valid; false otherwise.","lastModifiedDate":"2023-09-14"},{"lineNumber":224,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":225,"author":{"gitId":"yytan25"},"content":"    public boolean isValidDateInput(String input) {","lastModifiedDate":"2023-09-14"},{"lineNumber":226,"author":{"gitId":"yytan25"},"content":"        try {","lastModifiedDate":"2023-09-14"},{"lineNumber":227,"author":{"gitId":"yytan25"},"content":"            localDates.add(LocalDate.parse(input));","lastModifiedDate":"2023-09-14"},{"lineNumber":228,"author":{"gitId":"yytan25"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-14"},{"lineNumber":229,"author":{"gitId":"yytan25"},"content":"            return false;","lastModifiedDate":"2023-09-14"},{"lineNumber":230,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":231,"author":{"gitId":"yytan25"},"content":"        return true;","lastModifiedDate":"2023-09-14"},{"lineNumber":232,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":233,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":234,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":235,"author":{"gitId":"yytan25"},"content":"     * Checks if the time input is valid for the {@code TIME} operation.","lastModifiedDate":"2023-09-14"},{"lineNumber":236,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-14"},{"lineNumber":237,"author":{"gitId":"yytan25"},"content":"     * @param input Time input by user.","lastModifiedDate":"2023-09-14"},{"lineNumber":238,"author":{"gitId":"yytan25"},"content":"     * @return true if user input is valid; false otherwise.","lastModifiedDate":"2023-09-14"},{"lineNumber":239,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":240,"author":{"gitId":"yytan25"},"content":"    public boolean isValidTimeInput(String input) {","lastModifiedDate":"2023-09-14"},{"lineNumber":241,"author":{"gitId":"yytan25"},"content":"        try {","lastModifiedDate":"2023-09-14"},{"lineNumber":242,"author":{"gitId":"yytan25"},"content":"            localTimes.add(LocalTime.parse(input));","lastModifiedDate":"2023-09-14"},{"lineNumber":243,"author":{"gitId":"yytan25"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-14"},{"lineNumber":244,"author":{"gitId":"yytan25"},"content":"            return false;","lastModifiedDate":"2023-09-14"},{"lineNumber":245,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":246,"author":{"gitId":"yytan25"},"content":"        return true;","lastModifiedDate":"2023-09-14"},{"lineNumber":247,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":248,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":249,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":250,"author":{"gitId":"yytan25"},"content":"     * Checks if the number input is valid for the {@code CONFIRM} operation.","lastModifiedDate":"2023-09-14"},{"lineNumber":251,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":252,"author":{"gitId":"yytan25"},"content":"     * @param input Number input by user.","lastModifiedDate":"2023-09-14"},{"lineNumber":253,"author":{"gitId":"yytan25"},"content":"     * @return true if user input is valid; false otherwise.","lastModifiedDate":"2023-09-14"},{"lineNumber":254,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":255,"author":{"gitId":"yytan25"},"content":"    public boolean isValidNumberInput(String input) {","lastModifiedDate":"2023-09-14"},{"lineNumber":256,"author":{"gitId":"yytan25"},"content":"        try {","lastModifiedDate":"2023-09-14"},{"lineNumber":257,"author":{"gitId":"yytan25"},"content":"            Integer.parseInt(input);","lastModifiedDate":"2023-09-14"},{"lineNumber":258,"author":{"gitId":"yytan25"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-14"},{"lineNumber":259,"author":{"gitId":"yytan25"},"content":"            return false;","lastModifiedDate":"2023-09-14"},{"lineNumber":260,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":261,"author":{"gitId":"yytan25"},"content":"        return true;","lastModifiedDate":"2023-09-14"},{"lineNumber":262,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":263,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":264,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":265,"author":{"gitId":"yytan25"},"content":"     * Checks if the task number input is valid for the {@code CONFIRM} operation.","lastModifiedDate":"2023-09-14"},{"lineNumber":266,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-14"},{"lineNumber":267,"author":{"gitId":"yytan25"},"content":"     * @param taskNumber Task number input by user.","lastModifiedDate":"2023-09-14"},{"lineNumber":268,"author":{"gitId":"yytan25"},"content":"     * @return true if user input is valid; false otherwise.","lastModifiedDate":"2023-09-14"},{"lineNumber":269,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":270,"author":{"gitId":"yytan25"},"content":"    public boolean isValidTaskNumber(int taskNumber) {","lastModifiedDate":"2023-09-14"},{"lineNumber":271,"author":{"gitId":"yytan25"},"content":"        return taskNumber \u003e\u003d 1 \u0026\u0026 taskNumber \u003c\u003d tasks.getNumOfTasks();","lastModifiedDate":"2023-09-14"},{"lineNumber":272,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":273,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":274,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":275,"author":{"gitId":"yytan25"},"content":"     * Executes {@code Command}s in the {@code Leon} class.","lastModifiedDate":"2023-09-22"},{"lineNumber":276,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-14"},{"lineNumber":277,"author":{"gitId":"yytan25"},"content":"     * @param command {@code Command} to be executed.","lastModifiedDate":"2023-09-14"},{"lineNumber":278,"author":{"gitId":"yytan25"},"content":"     * @return The appropriate {@code executeCommand} function.","lastModifiedDate":"2023-09-09"},{"lineNumber":279,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":280,"author":{"gitId":"yytan25"},"content":"    public String taskExecutionHelper(Command command, String message) {","lastModifiedDate":"2023-09-14"},{"lineNumber":281,"author":{"gitId":"yytan25"},"content":"        if (storedDetails \u003d\u003d null) {","lastModifiedDate":"2023-09-14"},{"lineNumber":282,"author":{"gitId":"yytan25"},"content":"            return leon.executeCommand(commandInExecution, message);","lastModifiedDate":"2023-09-22"},{"lineNumber":283,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":284,"author":{"gitId":"yytan25"},"content":"        if (localDates.isEmpty() || localTimes.isEmpty()) {","lastModifiedDate":"2023-09-09"},{"lineNumber":285,"author":{"gitId":"yytan25"},"content":"            return leon.executeCommand(command, storedDetails);","lastModifiedDate":"2023-09-22"},{"lineNumber":286,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":287,"author":{"gitId":"yytan25"},"content":"        int size \u003d Math.min(localDates.size(), localTimes.size());","lastModifiedDate":"2023-09-09"},{"lineNumber":288,"author":{"gitId":"yytan25"},"content":"        ArrayList\u003cLocalDateTime\u003e localDateTimes \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-09"},{"lineNumber":289,"author":{"gitId":"yytan25"},"content":"        for (int i \u003d 0; i \u003c size; i++) {","lastModifiedDate":"2023-09-09"},{"lineNumber":290,"author":{"gitId":"yytan25"},"content":"            localDateTimes.add(LocalDateTime.of(localDates.get(i), localTimes.get(i)));","lastModifiedDate":"2023-09-09"},{"lineNumber":291,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":292,"author":{"gitId":"yytan25"},"content":"        if (size \u003d\u003d 1) {","lastModifiedDate":"2023-09-09"},{"lineNumber":293,"author":{"gitId":"yytan25"},"content":"            return leon.executeCommand(command, storedDetails, localDateTimes.get(0));","lastModifiedDate":"2023-09-22"},{"lineNumber":294,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-09-09"},{"lineNumber":295,"author":{"gitId":"yytan25"},"content":"            return leon.executeCommand(command, storedDetails, localDateTimes.get(0),","lastModifiedDate":"2023-09-22"},{"lineNumber":296,"author":{"gitId":"yytan25"},"content":"                localDateTimes.get(1));","lastModifiedDate":"2023-09-09"},{"lineNumber":297,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":298,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":299,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":300,"author":{"gitId":"yytan25"},"content":"    public String getDateTimeType(Command command) {","lastModifiedDate":"2023-09-09"},{"lineNumber":301,"author":{"gitId":"yytan25"},"content":"        if (command \u003d\u003d DEADLINE) {","lastModifiedDate":"2023-09-09"},{"lineNumber":302,"author":{"gitId":"yytan25"},"content":"            return \"due\";","lastModifiedDate":"2023-09-09"},{"lineNumber":303,"author":{"gitId":"yytan25"},"content":"        } else if (command \u003d\u003d Command.EVENT) {","lastModifiedDate":"2023-09-09"},{"lineNumber":304,"author":{"gitId":"yytan25"},"content":"            if (localDates.isEmpty() || localTimes.isEmpty()) {","lastModifiedDate":"2023-09-09"},{"lineNumber":305,"author":{"gitId":"yytan25"},"content":"                return \"start\";","lastModifiedDate":"2023-09-09"},{"lineNumber":306,"author":{"gitId":"yytan25"},"content":"            } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":307,"author":{"gitId":"yytan25"},"content":"                return \"end\";","lastModifiedDate":"2023-09-09"},{"lineNumber":308,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":309,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":310,"author":{"gitId":"yytan25"},"content":"        return null;","lastModifiedDate":"2023-09-09"},{"lineNumber":311,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":312,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":313,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":314,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":315,"author":{"gitId":"yytan25"},"content":"     * Resets all pointers, local parameters and arrays upon completion of a command.","lastModifiedDate":"2023-09-09"},{"lineNumber":316,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":317,"author":{"gitId":"yytan25"},"content":"    public void resetCommandInExecution() {","lastModifiedDate":"2023-09-09"},{"lineNumber":318,"author":{"gitId":"yytan25"},"content":"        this.commandInExecution \u003d Command.NONE;","lastModifiedDate":"2023-09-09"},{"lineNumber":319,"author":{"gitId":"yytan25"},"content":"        this.operationInExecution \u003d Operation.NONE;","lastModifiedDate":"2023-09-09"},{"lineNumber":320,"author":{"gitId":"yytan25"},"content":"        this.storedDetails \u003d null;","lastModifiedDate":"2023-09-09"},{"lineNumber":321,"author":{"gitId":"yytan25"},"content":"        this.localDates.clear();","lastModifiedDate":"2023-09-09"},{"lineNumber":322,"author":{"gitId":"yytan25"},"content":"        this.localTimes.clear();","lastModifiedDate":"2023-09-09"},{"lineNumber":323,"author":{"gitId":"yytan25"},"content":"        this.operations.clear();","lastModifiedDate":"2023-09-09"},{"lineNumber":324,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":325,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"yytan25":325}},{"path":"src/main/java/leon/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package leon;","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"import java.io.File;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":" * The {@code Storage} class. Deals with writing to, and reading from, text files.","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"public class Storage {","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"    private final TaskList tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"    public Storage(leon.TaskList tasks) {","lastModifiedDate":"2023-09-22"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"     * Greets the user and creates the requisite folder and text file, if required.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"    @SuppressWarnings(\"ResultOfMethodCallIgnored\")","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"    public void launchOnStart() {","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"        File f \u003d new File(\"./data\");","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"        f.mkdirs();","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"            File file \u003d new File(\"./data/tasks.txt\");","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"            file.createNewFile();","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"            System.out.println(\"Due to technical issues, I\u0027m only available in guest mode.%n\"","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"                + \"I sincerely apologise for the inconvenience caused.\");","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"yytan25"},"content":"     * Reads previously saved tasks from the specified {@code filePath}, parses them and","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"yytan25"},"content":"     * directly adds them to the list.","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"yytan25"},"content":"     * @param filePath Relative path of the text file containing details on the tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"yytan25"},"content":"     * @throws FileNotFoundException    When the system is unable to find the specified file.","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"yytan25"},"content":"     * @throws IllegalArgumentException When the system is unable to parse the saved tasks,","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"yytan25"},"content":"     *                                  possibly due to the file being corrupted.","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"yytan25"},"content":"    public void readTasksFromDisk(String filePath) throws FileNotFoundException, IllegalArgumentException {","lastModifiedDate":"2023-09-14"},{"lineNumber":47,"author":{"gitId":"yytan25"},"content":"        File f \u003d new File(filePath);","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"yytan25"},"content":"        Scanner sc \u003d new Scanner(f);","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"yytan25"},"content":"        while (sc.hasNext()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"yytan25"},"content":"            String[] args \u003d sc.nextLine().split(\"/\", -1);","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"yytan25"},"content":"            readArguments(args);","lastModifiedDate":"2023-09-14"},{"lineNumber":52,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":53,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":54,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":55,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":56,"author":{"gitId":"yytan25"},"content":"     * Helper function to parse the string arguments from the text file.","lastModifiedDate":"2023-09-14"},{"lineNumber":57,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-14"},{"lineNumber":58,"author":{"gitId":"yytan25"},"content":"     * @param args Array of string arguments that represent details of a task.","lastModifiedDate":"2023-09-14"},{"lineNumber":59,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":60,"author":{"gitId":"yytan25"},"content":"    public void readArguments(String[] args) {","lastModifiedDate":"2023-09-14"},{"lineNumber":61,"author":{"gitId":"yytan25"},"content":"        int numOfArgs \u003d args.length;","lastModifiedDate":"2023-09-14"},{"lineNumber":62,"author":{"gitId":"yytan25"},"content":"        leon.TaskList.TaskType type;","lastModifiedDate":"2023-09-22"},{"lineNumber":63,"author":{"gitId":"yytan25"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"yytan25"},"content":"            type \u003d TaskList.TaskType.valueOf(args[0].toUpperCase());","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"yytan25"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"yytan25"},"content":"            return;","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"yytan25"},"content":"        String details \u003d args[1];","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"yytan25"},"content":"        boolean isCompleted \u003d args[2].equals(\"Y\");","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"yytan25"},"content":"        if (numOfArgs \u003d\u003d 3) {","lastModifiedDate":"2023-09-14"},{"lineNumber":71,"author":{"gitId":"yytan25"},"content":"            addTaskToList(type, details, isCompleted);","lastModifiedDate":"2023-09-14"},{"lineNumber":72,"author":{"gitId":"yytan25"},"content":"        } else if (numOfArgs \u003d\u003d 4) {","lastModifiedDate":"2023-09-14"},{"lineNumber":73,"author":{"gitId":"yytan25"},"content":"            LocalDateTime dueDateTime \u003d LocalDateTime.parse(args[3]);","lastModifiedDate":"2023-09-14"},{"lineNumber":74,"author":{"gitId":"yytan25"},"content":"            addTaskToList(type, details, isCompleted, dueDateTime);","lastModifiedDate":"2023-09-14"},{"lineNumber":75,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-09-14"},{"lineNumber":76,"author":{"gitId":"yytan25"},"content":"            LocalDateTime startDateTime \u003d LocalDateTime.parse(args[3]);","lastModifiedDate":"2023-09-14"},{"lineNumber":77,"author":{"gitId":"yytan25"},"content":"            LocalDateTime endDateTime \u003d LocalDateTime.parse(args[4]);","lastModifiedDate":"2023-09-14"},{"lineNumber":78,"author":{"gitId":"yytan25"},"content":"            addTaskToList(type, details, isCompleted, startDateTime, endDateTime);","lastModifiedDate":"2023-09-14"},{"lineNumber":79,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":82,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":83,"author":{"gitId":"yytan25"},"content":"     * Helper function to add the stored tasks in the {@code TaskList}.","lastModifiedDate":"2023-09-14"},{"lineNumber":84,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-14"},{"lineNumber":85,"author":{"gitId":"yytan25"},"content":"     * @param taskType       Type of task.","lastModifiedDate":"2023-09-14"},{"lineNumber":86,"author":{"gitId":"yytan25"},"content":"     * @param details        Details of task.","lastModifiedDate":"2023-09-14"},{"lineNumber":87,"author":{"gitId":"yytan25"},"content":"     * @param isCompleted    Completion status of task.","lastModifiedDate":"2023-09-14"},{"lineNumber":88,"author":{"gitId":"yytan25"},"content":"     * @param localDateTimes Variable number of LocalDateTimes.","lastModifiedDate":"2023-09-14"},{"lineNumber":89,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":90,"author":{"gitId":"yytan25"},"content":"    public void addTaskToList(TaskList.TaskType taskType, String details, boolean isCompleted,","lastModifiedDate":"2023-09-14"},{"lineNumber":91,"author":{"gitId":"yytan25"},"content":"                              LocalDateTime... localDateTimes) {","lastModifiedDate":"2023-09-14"},{"lineNumber":92,"author":{"gitId":"yytan25"},"content":"        switch (taskType) {","lastModifiedDate":"2023-09-14"},{"lineNumber":93,"author":{"gitId":"yytan25"},"content":"        case TASK:","lastModifiedDate":"2023-09-22"},{"lineNumber":94,"author":{"gitId":"yytan25"},"content":"            Task t \u003d new Task(details, isCompleted);","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"yytan25"},"content":"            tasks.add(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":97,"author":{"gitId":"yytan25"},"content":"        case TODO:","lastModifiedDate":"2023-09-22"},{"lineNumber":98,"author":{"gitId":"yytan25"},"content":"            ToDo todo \u003d new ToDo(details, isCompleted);","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"yytan25"},"content":"            tasks.add(todo);","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":101,"author":{"gitId":"yytan25"},"content":"        case DEADLINE:","lastModifiedDate":"2023-09-22"},{"lineNumber":102,"author":{"gitId":"yytan25"},"content":"            Deadline d \u003d new Deadline(details, isCompleted, localDateTimes[0]);","lastModifiedDate":"2023-09-14"},{"lineNumber":103,"author":{"gitId":"yytan25"},"content":"            tasks.add(d);","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":105,"author":{"gitId":"yytan25"},"content":"        case EVENT:","lastModifiedDate":"2023-09-22"},{"lineNumber":106,"author":{"gitId":"yytan25"},"content":"            Event e \u003d new Event(details, isCompleted, localDateTimes[0], localDateTimes[1]);","lastModifiedDate":"2023-09-14"},{"lineNumber":107,"author":{"gitId":"yytan25"},"content":"            tasks.add(e);","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":109,"author":{"gitId":"yytan25"},"content":"        default:","lastModifiedDate":"2023-09-22"},{"lineNumber":110,"author":{"gitId":"yytan25"},"content":"            break;","lastModifiedDate":"2023-09-22"},{"lineNumber":111,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":115,"author":{"gitId":"yytan25"},"content":"     * Saves the tasks in the {@code TaskList} in the text file specified by the {@code filePath}.","lastModifiedDate":"2023-09-01"},{"lineNumber":116,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":117,"author":{"gitId":"yytan25"},"content":"     * @param filePath Relative path of the text file to be written to.","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"yytan25"},"content":"     * @param tasks    {@code TaskList} containing the current tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"yytan25"},"content":"     * @throws IOException When the {@code FileWriter} is unable to write to the file.","lastModifiedDate":"2023-09-01"},{"lineNumber":120,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"yytan25"},"content":"    public void saveTasksToDisk(String filePath, leon.TaskList tasks) throws IOException {","lastModifiedDate":"2023-09-22"},{"lineNumber":122,"author":{"gitId":"yytan25"},"content":"        FileWriter fw \u003d new FileWriter(filePath);","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"yytan25"},"content":"        BufferedWriter bw \u003d new BufferedWriter(fw);","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"yytan25"},"content":"        try {","lastModifiedDate":"2023-09-01"},{"lineNumber":125,"author":{"gitId":"yytan25"},"content":"            for (int i \u003d 0; i \u003c tasks.getNumOfTasks(); i++) {","lastModifiedDate":"2023-09-01"},{"lineNumber":126,"author":{"gitId":"yytan25"},"content":"                Task t \u003d tasks.get(i);","lastModifiedDate":"2023-09-01"},{"lineNumber":127,"author":{"gitId":"yytan25"},"content":"                bw.write(t.toFileSaveFormat());","lastModifiedDate":"2023-09-14"},{"lineNumber":128,"author":{"gitId":"yytan25"},"content":"                bw.newLine();","lastModifiedDate":"2023-09-01"},{"lineNumber":129,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":130,"author":{"gitId":"yytan25"},"content":"            bw.flush();","lastModifiedDate":"2023-09-01"},{"lineNumber":131,"author":{"gitId":"yytan25"},"content":"            bw.close();","lastModifiedDate":"2023-09-01"},{"lineNumber":132,"author":{"gitId":"yytan25"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"yytan25"},"content":"            System.out.println(\"Something went wrong: \" + e.getMessage());","lastModifiedDate":"2023-09-01"},{"lineNumber":134,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":135,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":136,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"yytan25":136}},{"path":"src/main/java/leon/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package leon;","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":" * The {@code Task} class. Contains all methods that are common to any generic task.","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"public class Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"    protected String details;","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"    protected boolean isCompleted;","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"     * Constructs a new {@code Task} object, with {@code isCompleted} set to false.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"     * @param details Details of the {@code Task}.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"    public Task(String details) {","lastModifiedDate":"2023-08-20"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"        this.details \u003d details;","lastModifiedDate":"2023-08-20"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"        this.isCompleted \u003d false;","lastModifiedDate":"2023-08-20"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"     * Loads a {@code Task} object that was previously stored in the hard disk.","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"     * The {@code isCompleted} parameter corresponds to the completion status in the last","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"     * instance of {@code Leon}.","lastModifiedDate":"2023-09-22"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"     * @param details     Details of the {@code Task}.","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"     * @param isCompleted Completion status of the {@code Task}.","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"    public Task(String details, boolean isCompleted) {","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"        this.details \u003d details;","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"        this.isCompleted \u003d isCompleted;","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"yytan25"},"content":"     * Sets the {@code Task} as completed.","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"yytan25"},"content":"    public void setCompleted() {","lastModifiedDate":"2023-08-20"},{"lineNumber":39,"author":{"gitId":"yytan25"},"content":"        this.isCompleted \u003d true;","lastModifiedDate":"2023-08-20"},{"lineNumber":40,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":41,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":42,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"yytan25"},"content":"     * Sets the {@code Task} as incomplete.","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"yytan25"},"content":"    public void setIncomplete() {","lastModifiedDate":"2023-08-20"},{"lineNumber":46,"author":{"gitId":"yytan25"},"content":"        this.isCompleted \u003d false;","lastModifiedDate":"2023-08-20"},{"lineNumber":47,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":48,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":49,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"yytan25"},"content":"     * Gets the details of the {@code Task}.","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"yytan25"},"content":"     * @return Details of the {@code Task}.","lastModifiedDate":"2023-09-14"},{"lineNumber":53,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"yytan25"},"content":"    protected String getDetails() {","lastModifiedDate":"2023-08-24"},{"lineNumber":55,"author":{"gitId":"yytan25"},"content":"        return this.details;","lastModifiedDate":"2023-08-24"},{"lineNumber":56,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":57,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":58,"author":{"gitId":"yytan25"},"content":"    protected boolean getCompleted() {","lastModifiedDate":"2023-09-15"},{"lineNumber":59,"author":{"gitId":"yytan25"},"content":"        return this.isCompleted;","lastModifiedDate":"2023-09-15"},{"lineNumber":60,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":61,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":62,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":63,"author":{"gitId":"yytan25"},"content":"     * Returns the string representation of the {@code Task}, to be","lastModifiedDate":"2023-09-14"},{"lineNumber":64,"author":{"gitId":"yytan25"},"content":"     * saved in the text file.","lastModifiedDate":"2023-09-14"},{"lineNumber":65,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-14"},{"lineNumber":66,"author":{"gitId":"yytan25"},"content":"     * @return Compressed string representation of the {@code Task}.","lastModifiedDate":"2023-09-14"},{"lineNumber":67,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":68,"author":{"gitId":"yytan25"},"content":"    public String toFileSaveFormat() {","lastModifiedDate":"2023-09-14"},{"lineNumber":69,"author":{"gitId":"yytan25"},"content":"        return String.format(\"Task/%s/%c\",","lastModifiedDate":"2023-09-14"},{"lineNumber":70,"author":{"gitId":"yytan25"},"content":"            this.getDetails(),","lastModifiedDate":"2023-09-14"},{"lineNumber":71,"author":{"gitId":"yytan25"},"content":"            this.isCompleted ? \u0027Y\u0027 : \u0027N\u0027);","lastModifiedDate":"2023-09-14"},{"lineNumber":72,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":73,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":74,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"yytan25"},"content":"     * Returns the string representation of the {@code Task}, to be","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"yytan25"},"content":"     * printed in the {@code list} method.","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"yytan25"},"content":"     * @return String representation of the {@code Task}.","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"yytan25"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":81,"author":{"gitId":"yytan25"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":82,"author":{"gitId":"yytan25"},"content":"        if (this.isCompleted) {","lastModifiedDate":"2023-08-20"},{"lineNumber":83,"author":{"gitId":"yytan25"},"content":"            return \"[X] \" + this.details;","lastModifiedDate":"2023-08-20"},{"lineNumber":84,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-08-20"},{"lineNumber":85,"author":{"gitId":"yytan25"},"content":"            return \"[ ] \" + this.details;","lastModifiedDate":"2023-08-20"},{"lineNumber":86,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":87,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":88,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"yytan25":88}},{"path":"src/main/java/leon/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package leon;","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-15"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":" * The {@code TaskList} class. Deals with storing tasks and performing","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":" * operations on tasks.","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"public class TaskList {","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":"    private int numOfTasks \u003d 0;","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"    private int numOfCompletedTasks \u003d 0;","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"     * Enumeration of all task types, for type checking purposes.","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"    public enum TaskType {","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"        TASK, TODO, DEADLINE, EVENT","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"     * Creates a new {@code ArrayList} to store the tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"    public TaskList() {","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"     * Adds a {@code Task} to the {@code ArrayList}.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"     * @param t {@code Task} to be added.","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"    public void add(Task t) {","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"yytan25"},"content":"        tasks.add(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"yytan25"},"content":"        this.numOfTasks++;","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"yytan25"},"content":"        if (t.isCompleted) {","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"yytan25"},"content":"            this.numOfCompletedTasks++;","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"yytan25"},"content":"     * Gets the {@code Task} object at the specified index.","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"yytan25"},"content":"     * @param i Index of the {@code Task}.","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"yytan25"},"content":"     * @return {@code Task} object at index i.","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"yytan25"},"content":"    public Task get(int i) {","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"yytan25"},"content":"        if (i \u003e -1 \u0026\u0026 i \u003c numOfTasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"yytan25"},"content":"            return tasks.get(i);","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"yytan25"},"content":"            return null;","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"yytan25"},"content":"     * Gets the total number of {@code Task}s in the {@code ArrayList}.","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"yytan25"},"content":"     * @return Total number of {@code Task}s.","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"yytan25"},"content":"    public int getNumOfTasks() {","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"yytan25"},"content":"        return this.numOfTasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"yytan25"},"content":"     * Gets the total number of completed {@code Task}s in the {@code ArrayList}.","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"yytan25"},"content":"     * @return Total number of completed {@code Task}s.","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"yytan25"},"content":"    public int getNumOfCompletedTasks() {","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"yytan25"},"content":"        return this.numOfCompletedTasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"yytan25"},"content":"     * Checks if the {@code ArrayList} is empty.","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"yytan25"},"content":"     * @return {@code true} iff the {@code ArrayList} is empty; {@code false} otherwise.","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"yytan25"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"yytan25"},"content":"        return this.numOfTasks \u003d\u003d 0;","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"yytan25"},"content":"     * Increments the number of completed tasks when a {@code Task} is marked as complete.","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"yytan25"},"content":"    public void incrementCompletedTasks() {","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"yytan25"},"content":"        this.numOfCompletedTasks++;","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"yytan25"},"content":"     * Decrements the number of completed tasks when a {@code Task} is marked as incomplete.","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"yytan25"},"content":"    public void decrementCompletedTasks() {","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"yytan25"},"content":"        this.numOfCompletedTasks--;","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"yytan25"},"content":"     * Checks if there already exists a {@code Task} in the {@code ArrayList} with the","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"yytan25"},"content":"     * given details.","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"yytan25"},"content":"     * @param details Details to be checked.","lastModifiedDate":"2023-09-01"},{"lineNumber":103,"author":{"gitId":"yytan25"},"content":"     * @return {@code true} iff there exists a {@code Task} with the given details; false otherwise.","lastModifiedDate":"2023-09-09"},{"lineNumber":104,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"yytan25"},"content":"    public boolean checkDuplicates(String details) {","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"yytan25"},"content":"        for (Task t : tasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"yytan25"},"content":"            if (details.equals(t.getDetails())) {","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"yytan25"},"content":"                return true;","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":110,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":111,"author":{"gitId":"yytan25"},"content":"        return false;","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":113,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"yytan25"},"content":"    public boolean hasScheduleClash(LocalDateTime startDateTime, LocalDateTime endDateTime) {","lastModifiedDate":"2023-09-15"},{"lineNumber":115,"author":{"gitId":"yytan25"},"content":"        return getScheduleClash(startDateTime, endDateTime) !\u003d null;","lastModifiedDate":"2023-09-15"},{"lineNumber":116,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":117,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":118,"author":{"gitId":"yytan25"},"content":"    public String getScheduleClash(LocalDateTime startDateTime, LocalDateTime endDateTime) {","lastModifiedDate":"2023-09-15"},{"lineNumber":119,"author":{"gitId":"yytan25"},"content":"        ArrayList\u003cEvent\u003e events \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-15"},{"lineNumber":120,"author":{"gitId":"yytan25"},"content":"        for (int i \u003d 0; i \u003c this.numOfTasks; i++) {","lastModifiedDate":"2023-09-15"},{"lineNumber":121,"author":{"gitId":"yytan25"},"content":"            Task task \u003d tasks.get(i);","lastModifiedDate":"2023-09-15"},{"lineNumber":122,"author":{"gitId":"yytan25"},"content":"            if (getTaskType(i) \u003d\u003d TaskType.EVENT \u0026\u0026 !task.getCompleted()) {","lastModifiedDate":"2023-09-15"},{"lineNumber":123,"author":{"gitId":"yytan25"},"content":"                events.add((Event) task);","lastModifiedDate":"2023-09-15"},{"lineNumber":124,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-09-15"},{"lineNumber":125,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":126,"author":{"gitId":"yytan25"},"content":"        for (Event e : events) {","lastModifiedDate":"2023-09-15"},{"lineNumber":127,"author":{"gitId":"yytan25"},"content":"            if (checkScheduleClash(startDateTime, endDateTime,","lastModifiedDate":"2023-09-15"},{"lineNumber":128,"author":{"gitId":"yytan25"},"content":"                e.getStartDateTime(), e.getEndDateTime())) {","lastModifiedDate":"2023-09-15"},{"lineNumber":129,"author":{"gitId":"yytan25"},"content":"                return e.getDetails();","lastModifiedDate":"2023-09-15"},{"lineNumber":130,"author":{"gitId":"yytan25"},"content":"            }","lastModifiedDate":"2023-09-15"},{"lineNumber":131,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-15"},{"lineNumber":132,"author":{"gitId":"yytan25"},"content":"        return null;","lastModifiedDate":"2023-09-15"},{"lineNumber":133,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":134,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":135,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-15"},{"lineNumber":136,"author":{"gitId":"yytan25"},"content":"     * Checks if two events have overlapping times.","lastModifiedDate":"2023-09-15"},{"lineNumber":137,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-15"},{"lineNumber":138,"author":{"gitId":"yytan25"},"content":"     * @param start1 Start date and time of first event.","lastModifiedDate":"2023-09-15"},{"lineNumber":139,"author":{"gitId":"yytan25"},"content":"     * @param end1   End date and time of first event.","lastModifiedDate":"2023-09-15"},{"lineNumber":140,"author":{"gitId":"yytan25"},"content":"     * @param start2 Start date and time of second event.","lastModifiedDate":"2023-09-15"},{"lineNumber":141,"author":{"gitId":"yytan25"},"content":"     * @param end2   End date and time of second event.","lastModifiedDate":"2023-09-15"},{"lineNumber":142,"author":{"gitId":"yytan25"},"content":"     * @return true if the two events have overlapping times; false otherwise.","lastModifiedDate":"2023-09-15"},{"lineNumber":143,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-15"},{"lineNumber":144,"author":{"gitId":"yytan25"},"content":"    public boolean checkScheduleClash(LocalDateTime start1, LocalDateTime end1,","lastModifiedDate":"2023-09-15"},{"lineNumber":145,"author":{"gitId":"yytan25"},"content":"                                      LocalDateTime start2, LocalDateTime end2) {","lastModifiedDate":"2023-09-15"},{"lineNumber":146,"author":{"gitId":"yytan25"},"content":"        return start1.isBefore(start2) \u0026\u0026 end1.isAfter(start2)","lastModifiedDate":"2023-09-15"},{"lineNumber":147,"author":{"gitId":"yytan25"},"content":"            || start1.isAfter(start2) \u0026\u0026 start1.isBefore(end2);","lastModifiedDate":"2023-09-15"},{"lineNumber":148,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":149,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":150,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":151,"author":{"gitId":"yytan25"},"content":"     * Gets the {@code TaskType} of the {@code Task} at the specified index.","lastModifiedDate":"2023-09-01"},{"lineNumber":152,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":153,"author":{"gitId":"yytan25"},"content":"     * @param i Index of the {@code Task}.","lastModifiedDate":"2023-09-01"},{"lineNumber":154,"author":{"gitId":"yytan25"},"content":"     * @return {@code TaskType} of {@code Task} at index i.","lastModifiedDate":"2023-09-01"},{"lineNumber":155,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":156,"author":{"gitId":"yytan25"},"content":"    public TaskType getTaskType(int i) {","lastModifiedDate":"2023-09-01"},{"lineNumber":157,"author":{"gitId":"yytan25"},"content":"        Task t \u003d this.get(i);","lastModifiedDate":"2023-09-01"},{"lineNumber":158,"author":{"gitId":"yytan25"},"content":"        if (t instanceof ToDo) {","lastModifiedDate":"2023-09-01"},{"lineNumber":159,"author":{"gitId":"yytan25"},"content":"            return TaskType.TODO;","lastModifiedDate":"2023-09-01"},{"lineNumber":160,"author":{"gitId":"yytan25"},"content":"        } else if (t instanceof Deadline) {","lastModifiedDate":"2023-09-01"},{"lineNumber":161,"author":{"gitId":"yytan25"},"content":"            return TaskType.DEADLINE;","lastModifiedDate":"2023-09-01"},{"lineNumber":162,"author":{"gitId":"yytan25"},"content":"        } else if (t instanceof Event) {","lastModifiedDate":"2023-09-01"},{"lineNumber":163,"author":{"gitId":"yytan25"},"content":"            return TaskType.EVENT;","lastModifiedDate":"2023-09-01"},{"lineNumber":164,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":165,"author":{"gitId":"yytan25"},"content":"            return TaskType.TASK;","lastModifiedDate":"2023-09-01"},{"lineNumber":166,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":167,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":168,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":169,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":170,"author":{"gitId":"yytan25"},"content":"     * Removes a {@code Task} from the {@code ArrayList}.","lastModifiedDate":"2023-09-01"},{"lineNumber":171,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":172,"author":{"gitId":"yytan25"},"content":"     * @param t {@code Task} to be removed.","lastModifiedDate":"2023-09-01"},{"lineNumber":173,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":174,"author":{"gitId":"yytan25"},"content":"    public void remove(Task t) {","lastModifiedDate":"2023-09-01"},{"lineNumber":175,"author":{"gitId":"yytan25"},"content":"        tasks.remove(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":176,"author":{"gitId":"yytan25"},"content":"        this.numOfTasks--;","lastModifiedDate":"2023-09-01"},{"lineNumber":177,"author":{"gitId":"yytan25"},"content":"        if (t.isCompleted) {","lastModifiedDate":"2023-09-01"},{"lineNumber":178,"author":{"gitId":"yytan25"},"content":"            this.numOfCompletedTasks--;","lastModifiedDate":"2023-09-01"},{"lineNumber":179,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":180,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":181,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"yytan25":181}},{"path":"src/main/java/leon/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package leon;","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":" * The {@code ToDo} class.","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"     * Constructs a new {@code ToDo} object, with {@code isCompleted} set to false.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"     * @param details Details of the {@code ToDo}.","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"    public ToDo(String details) {","lastModifiedDate":"2023-08-20"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"        super(details);","lastModifiedDate":"2023-08-20"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"     * Loads a {@code ToDo} object that was previously stored in the hard disk.","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"     * The {@code isCompleted} parameter corresponds to the completion status in the last","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"     * instance of {@code Leon}.","lastModifiedDate":"2023-09-22"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"     * @param details     Details of the {@code ToDo}.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"     * @param isCompleted Completion status of the {@code ToDo}.","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"    public ToDo(String details, boolean isCompleted) {","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"        super(details, isCompleted);","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"     * Returns the string representation of the {@code Todo}, to be","lastModifiedDate":"2023-09-14"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"     * saved in the text file.","lastModifiedDate":"2023-09-14"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-14"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"     * @return Compressed string representation of the {@code Todo}.","lastModifiedDate":"2023-09-14"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":36,"author":{"gitId":"yytan25"},"content":"    @Override","lastModifiedDate":"2023-09-14"},{"lineNumber":37,"author":{"gitId":"yytan25"},"content":"    public String toFileSaveFormat() {","lastModifiedDate":"2023-09-14"},{"lineNumber":38,"author":{"gitId":"yytan25"},"content":"        return String.format(\"Todo/%s/%c\",","lastModifiedDate":"2023-09-14"},{"lineNumber":39,"author":{"gitId":"yytan25"},"content":"            this.getDetails(),","lastModifiedDate":"2023-09-14"},{"lineNumber":40,"author":{"gitId":"yytan25"},"content":"            this.isCompleted ? \u0027Y\u0027 : \u0027N\u0027);","lastModifiedDate":"2023-09-14"},{"lineNumber":41,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":42,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":43,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"yytan25"},"content":"     * Returns the string representation of the {@code ToDo}, to be","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"yytan25"},"content":"     * printed in the {@code list} method.","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"yytan25"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"yytan25"},"content":"     * @return String representation of the {@code ToDo}.","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"yytan25"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":50,"author":{"gitId":"yytan25"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":51,"author":{"gitId":"yytan25"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-20"},{"lineNumber":52,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":53,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"yytan25":53}},{"path":"src/main/java/leon/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package leon;","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":" * The {@code Ui} class. Deals with interactions with the user.","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"public class Ui {","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"    private static final String name \u003d \"Leon\";","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"    private static final String taskDescription \u003d \"task - Create a new task\" + \"\\n\";","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"    private static final String todoDescription \u003d \"todo - Create a new todo\" + \"\\n\";","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":"    private static final String deadlineDescription \u003d \"deadline - Create a new deadline\" + \"\\n\";","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"    private static final String eventDescription \u003d \"event - Create a new event\" + \"\\n\";","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"    private static final String listDescription \u003d","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"        \"list - View your current tasks and completion status\" + \"\\n\";","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"    private static final String markDescription \u003d \"mark - Mark a task as complete\" + \"\\n\";","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"    private static final String unmarkDescription \u003d \"unmark - Mark a task as incomplete\" + \"\\n\";","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"    private static final String deleteDescription \u003d \"delete - Delete a task\" + \"\\n\";","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"    private static final String byeDescription \u003d \"bye - Exit the program\" + \"\\n\";","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"    private static final String searchDescription \u003d \"search - Find all tasks containing a given keyword\" + \"\\n\";","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"    private static final String commands \u003d taskDescription + todoDescription + deadlineDescription","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"        + eventDescription + listDescription + markDescription + unmarkDescription","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"        + deleteDescription + byeDescription + searchDescription;","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"    public Ui() {","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"     * Prints the available commands for the user, when {@code Leon} is started or","lastModifiedDate":"2023-09-22"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"     * when the user inputs {@code commands}.","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"    public String getCommands() {","lastModifiedDate":"2023-09-09"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"        return commands;","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"yytan25"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"yytan25"},"content":"     * Prints the statements when {@code Leon} is first instantiated.","lastModifiedDate":"2023-09-22"},{"lineNumber":39,"author":{"gitId":"yytan25"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"yytan25"},"content":"    public static String getSelfIntroduction() {","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"yytan25"},"content":"        String intro1 \u003d String.format(\"I\u0027m %s. Nice to meet you.\" + \"\\n\", name);","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"yytan25"},"content":"        String intro2 \u003d \"I support the following commands:\" + \"\\n\";","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"yytan25"},"content":"        return intro1 + intro2 + commands;","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"yytan25"},"content":"    public String getInvalidInputMessage(String message) {","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"yytan25"},"content":"        return String.format(\"I\u0027m just a robot!%n\" + \"I don\u0027t understand what %s is!\", message);","lastModifiedDate":"2023-09-09"},{"lineNumber":48,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"yytan25"},"content":"    public String getDetailsPrompt(Parser.Command command) {","lastModifiedDate":"2023-09-09"},{"lineNumber":51,"author":{"gitId":"yytan25"},"content":"        String taskType \u003d command.toString().toLowerCase();","lastModifiedDate":"2023-09-09"},{"lineNumber":52,"author":{"gitId":"yytan25"},"content":"        return String.format(\"Input %s details.\", taskType);","lastModifiedDate":"2023-09-09"},{"lineNumber":53,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":54,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":55,"author":{"gitId":"yytan25"},"content":"    public String getListSummary(int numOfTasks, int numOfCompletedTasks) {","lastModifiedDate":"2023-09-09"},{"lineNumber":56,"author":{"gitId":"yytan25"},"content":"        return String.format(\"You have %d tasks. (%d complete, %d incomplete)%n\",","lastModifiedDate":"2023-09-09"},{"lineNumber":57,"author":{"gitId":"yytan25"},"content":"            numOfTasks, numOfCompletedTasks, numOfTasks - numOfCompletedTasks);","lastModifiedDate":"2023-09-09"},{"lineNumber":58,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":59,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":60,"author":{"gitId":"yytan25"},"content":"    public String getTasksInList(TaskList taskList) {","lastModifiedDate":"2023-09-09"},{"lineNumber":61,"author":{"gitId":"yytan25"},"content":"        StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2023-09-09"},{"lineNumber":62,"author":{"gitId":"yytan25"},"content":"        for (int i \u003d 0; i \u003c taskList.getNumOfTasks(); i++) {","lastModifiedDate":"2023-09-09"},{"lineNumber":63,"author":{"gitId":"yytan25"},"content":"            result.append(String.format(\"%d. \" + taskList.get(i).toString()","lastModifiedDate":"2023-09-09"},{"lineNumber":64,"author":{"gitId":"yytan25"},"content":"                + \"%n\", i + 1));","lastModifiedDate":"2023-09-09"},{"lineNumber":65,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":66,"author":{"gitId":"yytan25"},"content":"        return result.toString();","lastModifiedDate":"2023-09-09"},{"lineNumber":67,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":68,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":69,"author":{"gitId":"yytan25"},"content":"    public String getEmptyInputMessage(Parser.Command command) {","lastModifiedDate":"2023-09-09"},{"lineNumber":70,"author":{"gitId":"yytan25"},"content":"        String taskType \u003d command.toString().toLowerCase();","lastModifiedDate":"2023-09-09"},{"lineNumber":71,"author":{"gitId":"yytan25"},"content":"        return String.format(\"The %s input cannot be empty.%n\", taskType);","lastModifiedDate":"2023-09-09"},{"lineNumber":72,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":73,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":74,"author":{"gitId":"yytan25"},"content":"    public String getDuplicateTasksMessage(String message) {","lastModifiedDate":"2023-09-09"},{"lineNumber":75,"author":{"gitId":"yytan25"},"content":"        return String.format(\"Task %s already exists.%n\", message);","lastModifiedDate":"2023-09-09"},{"lineNumber":76,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":77,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":78,"author":{"gitId":"yytan25"},"content":"    public String getDateInputMessage(Parser.Command command, String input) {","lastModifiedDate":"2023-09-09"},{"lineNumber":79,"author":{"gitId":"yytan25"},"content":"        String taskType \u003d command.toString().toLowerCase();","lastModifiedDate":"2023-09-09"},{"lineNumber":80,"author":{"gitId":"yytan25"},"content":"        return String.format(\"Input %s %s date. (Required format: YYYY-MM-DD)%n\",","lastModifiedDate":"2023-09-09"},{"lineNumber":81,"author":{"gitId":"yytan25"},"content":"            taskType, input);","lastModifiedDate":"2023-09-09"},{"lineNumber":82,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":83,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":84,"author":{"gitId":"yytan25"},"content":"    public String getTimeInputMessage(Parser.Command command, String input) {","lastModifiedDate":"2023-09-09"},{"lineNumber":85,"author":{"gitId":"yytan25"},"content":"        String taskType \u003d command.toString().toLowerCase();","lastModifiedDate":"2023-09-09"},{"lineNumber":86,"author":{"gitId":"yytan25"},"content":"        return String.format(\"Input %s %s time. (Required format: HH:MM)%n\",","lastModifiedDate":"2023-09-09"},{"lineNumber":87,"author":{"gitId":"yytan25"},"content":"            taskType, input);","lastModifiedDate":"2023-09-09"},{"lineNumber":88,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":89,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":90,"author":{"gitId":"yytan25"},"content":"    public String getInvalidFormatMessage(Parser.Operation operation) {","lastModifiedDate":"2023-09-09"},{"lineNumber":91,"author":{"gitId":"yytan25"},"content":"        String inputType \u003d operation.toString().toLowerCase();","lastModifiedDate":"2023-09-09"},{"lineNumber":92,"author":{"gitId":"yytan25"},"content":"        return String.format(\"Invalid %s format. Please try again.\", inputType);","lastModifiedDate":"2023-09-09"},{"lineNumber":93,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":94,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":95,"author":{"gitId":"yytan25"},"content":"    public String getConfirmationMessage(Parser.Command command, TaskList taskList) {","lastModifiedDate":"2023-09-09"},{"lineNumber":96,"author":{"gitId":"yytan25"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-09-09"},{"lineNumber":97,"author":{"gitId":"yytan25"},"content":"        String operation \u003d command.toString().toLowerCase();","lastModifiedDate":"2023-09-09"},{"lineNumber":98,"author":{"gitId":"yytan25"},"content":"        sb.append(String.format(\"Please input the task number you wish to %s.%n\",","lastModifiedDate":"2023-09-09"},{"lineNumber":99,"author":{"gitId":"yytan25"},"content":"            operation));","lastModifiedDate":"2023-09-09"},{"lineNumber":100,"author":{"gitId":"yytan25"},"content":"        sb.append(getTasksInList(taskList));","lastModifiedDate":"2023-09-09"},{"lineNumber":101,"author":{"gitId":"yytan25"},"content":"        return sb.toString();","lastModifiedDate":"2023-09-09"},{"lineNumber":102,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":103,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":104,"author":{"gitId":"yytan25"},"content":"    public String getRequestFailedMessage(String reason) {","lastModifiedDate":"2023-09-09"},{"lineNumber":105,"author":{"gitId":"yytan25"},"content":"        return String.format(\"Request unsuccessful. (reason: invalid %s)\", reason);","lastModifiedDate":"2023-09-09"},{"lineNumber":106,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":107,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":108,"author":{"gitId":"yytan25"},"content":"    public String getTaskAddedMessage(String details) {","lastModifiedDate":"2023-09-09"},{"lineNumber":109,"author":{"gitId":"yytan25"},"content":"        return String.format(\"Don\u0027t expect me to %s for you!%n\", details);","lastModifiedDate":"2023-09-09"},{"lineNumber":110,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":111,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":112,"author":{"gitId":"yytan25"},"content":"    public String getTodoAddedMessage(String details) {","lastModifiedDate":"2023-09-09"},{"lineNumber":113,"author":{"gitId":"yytan25"},"content":"        return String.format(\"Stop talking to me! Go and %s!%n\", details);","lastModifiedDate":"2023-09-09"},{"lineNumber":114,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":115,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":116,"author":{"gitId":"yytan25"},"content":"    public String getDeadlineAddedMessage(String details) {","lastModifiedDate":"2023-09-09"},{"lineNumber":117,"author":{"gitId":"yytan25"},"content":"        return String.format(\"Just saying, better %s now.%n\"","lastModifiedDate":"2023-09-09"},{"lineNumber":118,"author":{"gitId":"yytan25"},"content":"            + \"Not like it\u0027s my problem if you don\u0027t.%n\", details);","lastModifiedDate":"2023-09-09"},{"lineNumber":119,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":120,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":121,"author":{"gitId":"yytan25"},"content":"    public String getEventAddedMessage(String details) {","lastModifiedDate":"2023-09-09"},{"lineNumber":122,"author":{"gitId":"yytan25"},"content":"        return String.format(\"Wow, you have a %s?%n\"","lastModifiedDate":"2023-09-09"},{"lineNumber":123,"author":{"gitId":"yytan25"},"content":"            + \"Uhh, n-not like I wanna join you!%n\", details);","lastModifiedDate":"2023-09-09"},{"lineNumber":124,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":125,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":126,"author":{"gitId":"yytan25"},"content":"    public String getNotAllCompleteMessage() {","lastModifiedDate":"2023-09-09"},{"lineNumber":127,"author":{"gitId":"yytan25"},"content":"        return \"Don\u0027t expect me to remember them for you!\";","lastModifiedDate":"2023-09-09"},{"lineNumber":128,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":129,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":130,"author":{"gitId":"yytan25"},"content":"    public String getAllCompleteMessage() {","lastModifiedDate":"2023-09-09"},{"lineNumber":131,"author":{"gitId":"yytan25"},"content":"        return \"You\u0027ve completed all your tasks. Good for you.\";","lastModifiedDate":"2023-09-09"},{"lineNumber":132,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":133,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":134,"author":{"gitId":"yytan25"},"content":"    public String getMarkMessage(Parser.Command command, int taskNumber) {","lastModifiedDate":"2023-09-09"},{"lineNumber":135,"author":{"gitId":"yytan25"},"content":"        String markType \u003d \"\";","lastModifiedDate":"2023-09-09"},{"lineNumber":136,"author":{"gitId":"yytan25"},"content":"        if (command \u003d\u003d Parser.Command.MARK) {","lastModifiedDate":"2023-09-09"},{"lineNumber":137,"author":{"gitId":"yytan25"},"content":"            markType \u003d \"complete\";","lastModifiedDate":"2023-09-09"},{"lineNumber":138,"author":{"gitId":"yytan25"},"content":"        } else if (command \u003d\u003d Parser.Command.UNMARK) {","lastModifiedDate":"2023-09-09"},{"lineNumber":139,"author":{"gitId":"yytan25"},"content":"            markType \u003d \"incomplete\";","lastModifiedDate":"2023-09-09"},{"lineNumber":140,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":141,"author":{"gitId":"yytan25"},"content":"        return String.format(\"Task %d set as %s.%n\", taskNumber, markType);","lastModifiedDate":"2023-09-09"},{"lineNumber":142,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":143,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":144,"author":{"gitId":"yytan25"},"content":"    public String getMarkRedundantMessage(Parser.Command command, int taskNumber) {","lastModifiedDate":"2023-09-09"},{"lineNumber":145,"author":{"gitId":"yytan25"},"content":"        String markType \u003d \"\";","lastModifiedDate":"2023-09-09"},{"lineNumber":146,"author":{"gitId":"yytan25"},"content":"        if (command \u003d\u003d Parser.Command.MARK) {","lastModifiedDate":"2023-09-09"},{"lineNumber":147,"author":{"gitId":"yytan25"},"content":"            markType \u003d \"complete\";","lastModifiedDate":"2023-09-09"},{"lineNumber":148,"author":{"gitId":"yytan25"},"content":"        } else if (command \u003d\u003d Parser.Command.UNMARK) {","lastModifiedDate":"2023-09-09"},{"lineNumber":149,"author":{"gitId":"yytan25"},"content":"            markType \u003d \"incomplete\";","lastModifiedDate":"2023-09-09"},{"lineNumber":150,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":151,"author":{"gitId":"yytan25"},"content":"        return String.format(\"Task %d is already %s.%n Stop wasting my time!%n\", taskNumber, markType);","lastModifiedDate":"2023-09-09"},{"lineNumber":152,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":153,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":154,"author":{"gitId":"yytan25"},"content":"    public String getTasksEmptyMessage(Parser.Command command) {","lastModifiedDate":"2023-09-09"},{"lineNumber":155,"author":{"gitId":"yytan25"},"content":"        String operation \u003d command.toString().toLowerCase();","lastModifiedDate":"2023-09-09"},{"lineNumber":156,"author":{"gitId":"yytan25"},"content":"        return String.format(\"No tasks to %s.%n Please create a task first.\", operation);","lastModifiedDate":"2023-09-09"},{"lineNumber":157,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":158,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":159,"author":{"gitId":"yytan25"},"content":"    public String getTaskDeletedMessage(TaskList taskList, int taskNumber) {","lastModifiedDate":"2023-09-09"},{"lineNumber":160,"author":{"gitId":"yytan25"},"content":"        return String.format(\"Task %d deleted successfully.%n You now have %d tasks.%n\",","lastModifiedDate":"2023-09-09"},{"lineNumber":161,"author":{"gitId":"yytan25"},"content":"            taskNumber, taskList.getNumOfTasks());","lastModifiedDate":"2023-09-09"},{"lineNumber":162,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":163,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":164,"author":{"gitId":"yytan25"},"content":"    public String getKeywordMessage() {","lastModifiedDate":"2023-09-09"},{"lineNumber":165,"author":{"gitId":"yytan25"},"content":"        return \"Please input search keyword.\";","lastModifiedDate":"2023-09-09"},{"lineNumber":166,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":167,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":168,"author":{"gitId":"yytan25"},"content":"    public String getEmptySearchResultsMessage(String keyword) {","lastModifiedDate":"2023-09-09"},{"lineNumber":169,"author":{"gitId":"yytan25"},"content":"        return String.format(\"No tasks containing your keyword \\\"%s\\\". Please try again.%n\", keyword);","lastModifiedDate":"2023-09-09"},{"lineNumber":170,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":171,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":172,"author":{"gitId":"yytan25"},"content":"    public String getSearchResultsMessage(ArrayList\u003cTask\u003e matchingTasks) {","lastModifiedDate":"2023-09-09"},{"lineNumber":173,"author":{"gitId":"yytan25"},"content":"        StringBuilder res \u003d new StringBuilder(String.format(\"Here are the matching tasks in your list:%n\"));","lastModifiedDate":"2023-09-09"},{"lineNumber":174,"author":{"gitId":"yytan25"},"content":"        for (int i \u003d 0; i \u003c matchingTasks.size(); i++) {","lastModifiedDate":"2023-09-09"},{"lineNumber":175,"author":{"gitId":"yytan25"},"content":"            res.append(String.format(\"%d. \" + matchingTasks.get(i).toString()","lastModifiedDate":"2023-09-09"},{"lineNumber":176,"author":{"gitId":"yytan25"},"content":"                + \"%n\", i + 1));","lastModifiedDate":"2023-09-09"},{"lineNumber":177,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":178,"author":{"gitId":"yytan25"},"content":"        return res.toString();","lastModifiedDate":"2023-09-09"},{"lineNumber":179,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":180,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":181,"author":{"gitId":"yytan25"},"content":"    public String getInvalidStartMessage(Parser.Command command) {","lastModifiedDate":"2023-09-09"},{"lineNumber":182,"author":{"gitId":"yytan25"},"content":"        String taskType \u003d command.toString().toLowerCase();","lastModifiedDate":"2023-09-09"},{"lineNumber":183,"author":{"gitId":"yytan25"},"content":"        return String.format(\"Cannot create %s before the current time. \"","lastModifiedDate":"2023-09-09"},{"lineNumber":184,"author":{"gitId":"yytan25"},"content":"            + \"Please try again.%n\", taskType);","lastModifiedDate":"2023-09-09"},{"lineNumber":185,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":186,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":187,"author":{"gitId":"yytan25"},"content":"    public String getInvalidIntervalMessage(Parser.Command command) {","lastModifiedDate":"2023-09-09"},{"lineNumber":188,"author":{"gitId":"yytan25"},"content":"        String taskType \u003d command.toString().toLowerCase();","lastModifiedDate":"2023-09-09"},{"lineNumber":189,"author":{"gitId":"yytan25"},"content":"        return String.format(\"Invalid %s time interval. Please try again.%n\", taskType);","lastModifiedDate":"2023-09-09"},{"lineNumber":190,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":191,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":192,"author":{"gitId":"yytan25"},"content":"    public String getScheduleClashMessage(String details) {","lastModifiedDate":"2023-09-15"},{"lineNumber":193,"author":{"gitId":"yytan25"},"content":"        return String.format(\"There already exists a task %s at the same time. Please try again.\",","lastModifiedDate":"2023-09-15"},{"lineNumber":194,"author":{"gitId":"yytan25"},"content":"            details);","lastModifiedDate":"2023-09-15"},{"lineNumber":195,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":196,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":197,"author":{"gitId":"yytan25"},"content":"    public String getExitMessage(int status) {","lastModifiedDate":"2023-09-09"},{"lineNumber":198,"author":{"gitId":"yytan25"},"content":"        if (status \u003d\u003d 0) {","lastModifiedDate":"2023-09-09"},{"lineNumber":199,"author":{"gitId":"yytan25"},"content":"            return \"Finally I can rest. Bye!\";","lastModifiedDate":"2023-09-09"},{"lineNumber":200,"author":{"gitId":"yytan25"},"content":"        } else if (status \u003d\u003d 1) {","lastModifiedDate":"2023-09-09"},{"lineNumber":201,"author":{"gitId":"yytan25"},"content":"            return String.format(\"I\u0027ve had enough of your nonsense!%n Don\u0027t let me see you again!\");","lastModifiedDate":"2023-09-09"},{"lineNumber":202,"author":{"gitId":"yytan25"},"content":"        } else {","lastModifiedDate":"2023-09-09"},{"lineNumber":203,"author":{"gitId":"yytan25"},"content":"            return \"An unexpected error occurred.\";","lastModifiedDate":"2023-09-09"},{"lineNumber":204,"author":{"gitId":"yytan25"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":205,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":206,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"yytan25":206}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"yytan25":17}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\"","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"            fx:controller\u003d\"javafx.MainWindow\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"    \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\"","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":"               AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"    \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\"","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"            prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"    \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\"","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"                vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"        \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"    \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"yytan25":21}},{"path":"src/test/java/leon/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package leon;","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"import java.time.Month;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"    public void deadline_toString_success() {","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"        Deadline d \u003d new Deadline(\"test\",","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(23, 59)));","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"        assertEquals(\"[D][ ] test (by: Sun, 01 Jan 2023 23:59)\",","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"            d.toString());","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"    public void deadlineCompleted_toString_success() {","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"        Deadline d \u003d new Deadline(\"test\", true,","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(23, 59)));","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"        assertEquals(\"[D][X] test (by: Sun, 01 Jan 2023 23:59)\",","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"            d.toString());","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"yytan25":30}},{"path":"src/test/java/leon/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package leon;","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"import java.time.Month;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":"public class EventTest {","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"    public void event_toString_success() {","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"        Event e \u003d new Event(\"test\",","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(0, 0)),","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(23, 59)));","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"        assertEquals(\"[E][ ] test (from: 01 Jan 2023 00:00 to: 01 Jan 2023 23:59)\",","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"            e.toString());","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"    public void eventCompleted_toString_success() {","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"        Event e \u003d new Event(\"test\", true,","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(0, 0)),","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(23, 59)));","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"        assertEquals(\"[E][X] test (from: 01 Jan 2023 00:00 to: 01 Jan 2023 23:59)\",","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"            e.toString());","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"yytan25":35}},{"path":"src/test/java/leon/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"package leon;","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"import static org.junit.jupiter.api.Assertions.assertFalse;","lastModifiedDate":"2023-09-15"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-09-15"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"yytan25"},"content":"import java.time.LocalTime;","lastModifiedDate":"2023-09-15"},{"lineNumber":10,"author":{"gitId":"yytan25"},"content":"import java.time.Month;","lastModifiedDate":"2023-09-15"},{"lineNumber":11,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"yytan25"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"yytan25"},"content":"public class TaskListTest {","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"yytan25"},"content":"    public void addTask_numTasksIncremented() {","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"yytan25"},"content":"        tasks.add(new Task(\"test\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"yytan25"},"content":"        assertEquals(1, tasks.getNumOfTasks());","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"yytan25"},"content":"    public void addCompletedTask_numTasksIncremented() {","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"yytan25"},"content":"        tasks.add(new Task(\"test\", true));","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"yytan25"},"content":"        assertEquals(1, tasks.getNumOfTasks());","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"yytan25"},"content":"    public void addCompletedTask_numCompletedTasksIncremented() {","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"yytan25"},"content":"        tasks.add(new Task(\"test\", true));","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"yytan25"},"content":"        assertEquals(1, tasks.getNumOfCompletedTasks());","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"yytan25"},"content":"    public void addTask_getTaskType_success() {","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"yytan25"},"content":"        tasks.add(new Task(\"test\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"yytan25"},"content":"        assertEquals(TaskList.TaskType.TASK, tasks.getTaskType(0));","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"yytan25"},"content":"    public void addToDo_getTaskType_success() {","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"yytan25"},"content":"        tasks.add(new ToDo(\"test\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"yytan25"},"content":"        assertEquals(TaskList.TaskType.TODO, tasks.getTaskType(0));","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"yytan25"},"content":"    public void addDeadline_getTaskType_success() {","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"yytan25"},"content":"        tasks.add(new Deadline(\"test\", LocalDateTime.MIN));","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"yytan25"},"content":"        assertEquals(TaskList.TaskType.DEADLINE, tasks.getTaskType(0));","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"yytan25"},"content":"    public void addEvent_getTaskType_success() {","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"yytan25"},"content":"        tasks.add(new Event(\"test\", LocalDateTime.MIN, LocalDateTime.MAX));","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"yytan25"},"content":"        assertEquals(TaskList.TaskType.EVENT, tasks.getTaskType(0));","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"yytan25"},"content":"    public void removeTask_numTasksDecremented() {","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"yytan25"},"content":"        Task t \u003d new Task(\"test\");","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"yytan25"},"content":"        tasks.add(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"yytan25"},"content":"        tasks.remove(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"yytan25"},"content":"        assertEquals(0, tasks.getNumOfTasks());","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"yytan25"},"content":"    public void removeCompletedTask_numTasksDecremented() {","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"yytan25"},"content":"        Task t \u003d new Task(\"test\", true);","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"yytan25"},"content":"        tasks.add(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"yytan25"},"content":"        tasks.remove(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"yytan25"},"content":"        assertEquals(0, tasks.getNumOfTasks());","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":84,"author":{"gitId":"yytan25"},"content":"    public void removeCompletedTask_numCompletedTasksDecremented() {","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"yytan25"},"content":"        Task t \u003d new Task(\"test\", true);","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"yytan25"},"content":"        tasks.add(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"yytan25"},"content":"        tasks.remove(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"yytan25"},"content":"        assertEquals(0, tasks.getNumOfCompletedTasks());","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"yytan25"},"content":"    public void checkDuplicates_success() {","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"yytan25"},"content":"        Task t \u003d new Task(\"test\");","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"yytan25"},"content":"        tasks.add(t);","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"yytan25"},"content":"        assertTrue(tasks.checkDuplicates(\"test\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-15"},{"lineNumber":101,"author":{"gitId":"yytan25"},"content":"    public void checkScheduleClash_event2BeforeEvent1_false() {","lastModifiedDate":"2023-09-15"},{"lineNumber":102,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-15"},{"lineNumber":103,"author":{"gitId":"yytan25"},"content":"        Event event1 \u003d new Event(\"test1\",","lastModifiedDate":"2023-09-15"},{"lineNumber":104,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-15"},{"lineNumber":105,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(0, 0)),","lastModifiedDate":"2023-09-15"},{"lineNumber":106,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-15"},{"lineNumber":107,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(23, 59)));","lastModifiedDate":"2023-09-15"},{"lineNumber":108,"author":{"gitId":"yytan25"},"content":"        Event event2 \u003d new Event(\"test2\",","lastModifiedDate":"2023-09-15"},{"lineNumber":109,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2022, Month.JANUARY, 1),","lastModifiedDate":"2023-09-15"},{"lineNumber":110,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(0, 0)),","lastModifiedDate":"2023-09-15"},{"lineNumber":111,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2022, Month.JANUARY, 1),","lastModifiedDate":"2023-09-15"},{"lineNumber":112,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(23, 59)));","lastModifiedDate":"2023-09-15"},{"lineNumber":113,"author":{"gitId":"yytan25"},"content":"        assertFalse(tasks.checkScheduleClash(event1.getStartDateTime(),","lastModifiedDate":"2023-09-15"},{"lineNumber":114,"author":{"gitId":"yytan25"},"content":"            event1.getEndDateTime(), event2.getStartDateTime(), event2.getEndDateTime()));","lastModifiedDate":"2023-09-15"},{"lineNumber":115,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":116,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":117,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-15"},{"lineNumber":118,"author":{"gitId":"yytan25"},"content":"    public void checkScheduleClash_event2AfterEvent1_false() {","lastModifiedDate":"2023-09-15"},{"lineNumber":119,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-15"},{"lineNumber":120,"author":{"gitId":"yytan25"},"content":"        Event event1 \u003d new Event(\"test1\",","lastModifiedDate":"2023-09-15"},{"lineNumber":121,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-15"},{"lineNumber":122,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(0, 0)),","lastModifiedDate":"2023-09-15"},{"lineNumber":123,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-15"},{"lineNumber":124,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(23, 59)));","lastModifiedDate":"2023-09-15"},{"lineNumber":125,"author":{"gitId":"yytan25"},"content":"        Event event2 \u003d new Event(\"test2\",","lastModifiedDate":"2023-09-15"},{"lineNumber":126,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2024, Month.JANUARY, 1),","lastModifiedDate":"2023-09-15"},{"lineNumber":127,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(0, 0)),","lastModifiedDate":"2023-09-15"},{"lineNumber":128,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2024, Month.JANUARY, 1),","lastModifiedDate":"2023-09-15"},{"lineNumber":129,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(23, 59)));","lastModifiedDate":"2023-09-15"},{"lineNumber":130,"author":{"gitId":"yytan25"},"content":"        assertFalse(tasks.checkScheduleClash(event1.getStartDateTime(),","lastModifiedDate":"2023-09-15"},{"lineNumber":131,"author":{"gitId":"yytan25"},"content":"            event1.getEndDateTime(), event2.getStartDateTime(), event2.getEndDateTime()));","lastModifiedDate":"2023-09-15"},{"lineNumber":132,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":133,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":134,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-15"},{"lineNumber":135,"author":{"gitId":"yytan25"},"content":"    public void checkScheduleClash_event2ContainsEvent1_true() {","lastModifiedDate":"2023-09-15"},{"lineNumber":136,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-15"},{"lineNumber":137,"author":{"gitId":"yytan25"},"content":"        Event event1 \u003d new Event(\"test1\",","lastModifiedDate":"2023-09-15"},{"lineNumber":138,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-15"},{"lineNumber":139,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(0, 0)),","lastModifiedDate":"2023-09-15"},{"lineNumber":140,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-15"},{"lineNumber":141,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(23, 59)));","lastModifiedDate":"2023-09-15"},{"lineNumber":142,"author":{"gitId":"yytan25"},"content":"        Event event2 \u003d new Event(\"test2\",","lastModifiedDate":"2023-09-15"},{"lineNumber":143,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2022, Month.JANUARY, 1),","lastModifiedDate":"2023-09-15"},{"lineNumber":144,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(0, 0)),","lastModifiedDate":"2023-09-15"},{"lineNumber":145,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2024, Month.JANUARY, 1),","lastModifiedDate":"2023-09-15"},{"lineNumber":146,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(23, 59)));","lastModifiedDate":"2023-09-15"},{"lineNumber":147,"author":{"gitId":"yytan25"},"content":"        assertTrue(tasks.checkScheduleClash(event1.getStartDateTime(),","lastModifiedDate":"2023-09-15"},{"lineNumber":148,"author":{"gitId":"yytan25"},"content":"            event1.getEndDateTime(), event2.getStartDateTime(), event2.getEndDateTime()));","lastModifiedDate":"2023-09-15"},{"lineNumber":149,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":150,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":151,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-15"},{"lineNumber":152,"author":{"gitId":"yytan25"},"content":"    public void checkScheduleClash_event1ContainsEvent2_true() {","lastModifiedDate":"2023-09-15"},{"lineNumber":153,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-15"},{"lineNumber":154,"author":{"gitId":"yytan25"},"content":"        Event event1 \u003d new Event(\"test1\",","lastModifiedDate":"2023-09-15"},{"lineNumber":155,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-15"},{"lineNumber":156,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(0, 0)),","lastModifiedDate":"2023-09-15"},{"lineNumber":157,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-15"},{"lineNumber":158,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(23, 59)));","lastModifiedDate":"2023-09-15"},{"lineNumber":159,"author":{"gitId":"yytan25"},"content":"        Event event2 \u003d new Event(\"test2\",","lastModifiedDate":"2023-09-15"},{"lineNumber":160,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-15"},{"lineNumber":161,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(0, 1)),","lastModifiedDate":"2023-09-15"},{"lineNumber":162,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-15"},{"lineNumber":163,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(23, 58)));","lastModifiedDate":"2023-09-15"},{"lineNumber":164,"author":{"gitId":"yytan25"},"content":"        assertTrue(tasks.checkScheduleClash(event1.getStartDateTime(),","lastModifiedDate":"2023-09-15"},{"lineNumber":165,"author":{"gitId":"yytan25"},"content":"            event1.getEndDateTime(), event2.getStartDateTime(), event2.getEndDateTime()));","lastModifiedDate":"2023-09-15"},{"lineNumber":166,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":167,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":168,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-15"},{"lineNumber":169,"author":{"gitId":"yytan25"},"content":"    public void checkScheduleClash_event2OverlapEvent1Start_true() {","lastModifiedDate":"2023-09-15"},{"lineNumber":170,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-15"},{"lineNumber":171,"author":{"gitId":"yytan25"},"content":"        Event event1 \u003d new Event(\"test1\",","lastModifiedDate":"2023-09-15"},{"lineNumber":172,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-15"},{"lineNumber":173,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(0, 0)),","lastModifiedDate":"2023-09-15"},{"lineNumber":174,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-15"},{"lineNumber":175,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(23, 59)));","lastModifiedDate":"2023-09-15"},{"lineNumber":176,"author":{"gitId":"yytan25"},"content":"        Event event2 \u003d new Event(\"test2\",","lastModifiedDate":"2023-09-15"},{"lineNumber":177,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2022, Month.JANUARY, 1),","lastModifiedDate":"2023-09-15"},{"lineNumber":178,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(0, 0)),","lastModifiedDate":"2023-09-15"},{"lineNumber":179,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-15"},{"lineNumber":180,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(0, 1)));","lastModifiedDate":"2023-09-15"},{"lineNumber":181,"author":{"gitId":"yytan25"},"content":"        assertTrue(tasks.checkScheduleClash(event1.getStartDateTime(),","lastModifiedDate":"2023-09-15"},{"lineNumber":182,"author":{"gitId":"yytan25"},"content":"            event1.getEndDateTime(), event2.getStartDateTime(), event2.getEndDateTime()));","lastModifiedDate":"2023-09-15"},{"lineNumber":183,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":184,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-09-15"},{"lineNumber":185,"author":{"gitId":"yytan25"},"content":"    @Test","lastModifiedDate":"2023-09-15"},{"lineNumber":186,"author":{"gitId":"yytan25"},"content":"    public void checkScheduleClash_event2OverlapEvent1End_true() {","lastModifiedDate":"2023-09-15"},{"lineNumber":187,"author":{"gitId":"yytan25"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-15"},{"lineNumber":188,"author":{"gitId":"yytan25"},"content":"        Event event1 \u003d new Event(\"test1\",","lastModifiedDate":"2023-09-15"},{"lineNumber":189,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-15"},{"lineNumber":190,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(0, 0)),","lastModifiedDate":"2023-09-15"},{"lineNumber":191,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-15"},{"lineNumber":192,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(23, 59)));","lastModifiedDate":"2023-09-15"},{"lineNumber":193,"author":{"gitId":"yytan25"},"content":"        Event event2 \u003d new Event(\"test2\",","lastModifiedDate":"2023-09-15"},{"lineNumber":194,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2023, Month.JANUARY, 1),","lastModifiedDate":"2023-09-15"},{"lineNumber":195,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(0, 1)),","lastModifiedDate":"2023-09-15"},{"lineNumber":196,"author":{"gitId":"yytan25"},"content":"            LocalDateTime.of(LocalDate.of(2024, Month.JANUARY, 1),","lastModifiedDate":"2023-09-15"},{"lineNumber":197,"author":{"gitId":"yytan25"},"content":"                LocalTime.of(0, 0)));","lastModifiedDate":"2023-09-15"},{"lineNumber":198,"author":{"gitId":"yytan25"},"content":"        assertTrue(tasks.checkScheduleClash(event1.getStartDateTime(),","lastModifiedDate":"2023-09-15"},{"lineNumber":199,"author":{"gitId":"yytan25"},"content":"            event1.getEndDateTime(), event2.getStartDateTime(), event2.getEndDateTime()));","lastModifiedDate":"2023-09-15"},{"lineNumber":200,"author":{"gitId":"yytan25"},"content":"    }","lastModifiedDate":"2023-09-15"},{"lineNumber":201,"author":{"gitId":"yytan25"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"yytan25":201}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"yytan25"},"content":"deadline","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"yytan25"},"content":"finish software engineering assignment","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"fri 2359","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"event","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"yytan25"},"content":"party at Jon\u0027s","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"yytan25"},"content":"fri 8pm","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"yytan25"},"content":"sat 2am","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"yytan25"},"content":"list","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"yytan25":8}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"yytan25"},"content":"echo \"The output will be redirected to stdoutput.txt\"","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"yytan25"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"yytan25":2,"-":21}}]
