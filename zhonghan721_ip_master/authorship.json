[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"zhonghan721"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"zhonghan721"},"content":"    mainClass.set(\"zean.Zean\")","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"zhonghan721"},"content":"}","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"zhonghan721"},"content":"checkstyle {","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"zhonghan721"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"zhonghan721"},"content":"    archiveBaseName \u003d \"zean\"","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"zhonghan721"},"content":"    enableAssertions \u003d true","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":40,"zhonghan721":8}},{"path":"src/main/java/zean/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhonghan721"},"content":"package zean;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"zhonghan721"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"zhonghan721"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"zhonghan721"},"content":"import zean.exception.DukeException;","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"zhonghan721"},"content":"import zean.task.Deadline;","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"zhonghan721"},"content":"import zean.task.Event;","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"zhonghan721"},"content":"import zean.task.Task;","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"zhonghan721"},"content":"import zean.task.Todo;","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"zhonghan721"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"zhonghan721"},"content":" * The class that provides the parser of the input.","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"zhonghan721"},"content":" *","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"zhonghan721"},"content":" * @author Zhong Han","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"zhonghan721"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"zhonghan721"},"content":"public class Parser {","lastModifiedDate":"2023-08-20"},{"lineNumber":18,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":19,"author":{"gitId":"zhonghan721"},"content":"    private static final Pattern DATE_PATTERN \u003d Pattern.compile(\"\\\\d\\\\d\\\\d\\\\d-\\\\d\\\\d-\\\\d\\\\d\");","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"zhonghan721"},"content":"     * Parses the input and calls the corresponding methods.","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"zhonghan721"},"content":"     * @param input The input from the user.","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"zhonghan721"},"content":"     * @param tasks The taskList object to store the tasks.","lastModifiedDate":"2023-08-28"},{"lineNumber":26,"author":{"gitId":"zhonghan721"},"content":"     * @return The output to be printed on the console.","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"zhonghan721"},"content":"     * @throws DukeException An exception related to the chatbot.","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"zhonghan721"},"content":"    public static String parse(String input, TaskList tasks) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"zhonghan721"},"content":"        if (input.isBlank()) {","lastModifiedDate":"2023-08-20"},{"lineNumber":31,"author":{"gitId":"zhonghan721"},"content":"            return \"\";","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"zhonghan721"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":33,"author":{"gitId":"zhonghan721"},"content":"        String[] inputArr \u003d input.split(\" \");","lastModifiedDate":"2023-08-20"},{"lineNumber":34,"author":{"gitId":"zhonghan721"},"content":"        String description;","lastModifiedDate":"2023-08-20"},{"lineNumber":35,"author":{"gitId":"zhonghan721"},"content":"        String output \u003d \"\";","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"zhonghan721"},"content":"        switch(inputArr[0]) {","lastModifiedDate":"2023-08-20"},{"lineNumber":37,"author":{"gitId":"zhonghan721"},"content":"        case \"mark\":","lastModifiedDate":"2023-08-20"},{"lineNumber":38,"author":{"gitId":"zhonghan721"},"content":"            if (inputArr.length \u003c 2) {","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"zhonghan721"},"content":"                throw new DukeException(\"\\tPlease provide the task number.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"zhonghan721"},"content":"            try {","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"zhonghan721"},"content":"                output \u003d tasks.markTaskDone(Integer.parseInt(inputArr[1]));","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"zhonghan721"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"zhonghan721"},"content":"                throw new DukeException(\"\\tPlease provide a valid task number.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":45,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":46,"author":{"gitId":"zhonghan721"},"content":"            break;","lastModifiedDate":"2023-08-20"},{"lineNumber":47,"author":{"gitId":"zhonghan721"},"content":"        case \"unmark\":","lastModifiedDate":"2023-08-20"},{"lineNumber":48,"author":{"gitId":"zhonghan721"},"content":"            if (inputArr.length \u003c 2) {","lastModifiedDate":"2023-08-21"},{"lineNumber":49,"author":{"gitId":"zhonghan721"},"content":"                throw new DukeException(\"\\tPlease provide the task number.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":50,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":51,"author":{"gitId":"zhonghan721"},"content":"            try {","lastModifiedDate":"2023-08-21"},{"lineNumber":52,"author":{"gitId":"zhonghan721"},"content":"                output \u003d tasks.markTaskNotDone(Integer.parseInt(inputArr[1]));","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"zhonghan721"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-21"},{"lineNumber":54,"author":{"gitId":"zhonghan721"},"content":"                throw new DukeException(\"\\tPlease provide a valid task number.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":55,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":56,"author":{"gitId":"zhonghan721"},"content":"            break;","lastModifiedDate":"2023-08-20"},{"lineNumber":57,"author":{"gitId":"zhonghan721"},"content":"        case \"delete\":","lastModifiedDate":"2023-08-21"},{"lineNumber":58,"author":{"gitId":"zhonghan721"},"content":"            if (inputArr.length \u003c 2) {","lastModifiedDate":"2023-08-21"},{"lineNumber":59,"author":{"gitId":"zhonghan721"},"content":"                throw new DukeException(\"\\tPlease provide the task number.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":60,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":61,"author":{"gitId":"zhonghan721"},"content":"            try {","lastModifiedDate":"2023-08-21"},{"lineNumber":62,"author":{"gitId":"zhonghan721"},"content":"                output \u003d tasks.deleteTask(Integer.parseInt(inputArr[1]));","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"zhonghan721"},"content":"            } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-21"},{"lineNumber":64,"author":{"gitId":"zhonghan721"},"content":"                throw new DukeException(\"\\tPlease provide a valid task number.\");","lastModifiedDate":"2023-08-21"},{"lineNumber":65,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":66,"author":{"gitId":"zhonghan721"},"content":"            break;","lastModifiedDate":"2023-08-21"},{"lineNumber":67,"author":{"gitId":"zhonghan721"},"content":"        case \"list\":","lastModifiedDate":"2023-08-20"},{"lineNumber":68,"author":{"gitId":"zhonghan721"},"content":"            output \u003d tasks.list();","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"zhonghan721"},"content":"            break;","lastModifiedDate":"2023-08-20"},{"lineNumber":70,"author":{"gitId":"zhonghan721"},"content":"        case \"todo\":","lastModifiedDate":"2023-08-20"},{"lineNumber":71,"author":{"gitId":"zhonghan721"},"content":"            description \u003d input.substring(4);","lastModifiedDate":"2023-08-20"},{"lineNumber":72,"author":{"gitId":"zhonghan721"},"content":"            if (description.isBlank()) {","lastModifiedDate":"2023-08-20"},{"lineNumber":73,"author":{"gitId":"zhonghan721"},"content":"                throw new DukeException(\"\\tHmm, the description of a todo cannot be empty :(\");","lastModifiedDate":"2023-08-20"},{"lineNumber":74,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":75,"author":{"gitId":"zhonghan721"},"content":"            output \u003d tasks.add(description);","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"zhonghan721"},"content":"            break;","lastModifiedDate":"2023-08-20"},{"lineNumber":77,"author":{"gitId":"zhonghan721"},"content":"        case \"deadline\":","lastModifiedDate":"2023-08-20"},{"lineNumber":78,"author":{"gitId":"zhonghan721"},"content":"            int indexOfBy \u003d input.indexOf(\"/by\");","lastModifiedDate":"2023-08-20"},{"lineNumber":79,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":80,"author":{"gitId":"zhonghan721"},"content":"            if (indexOfBy \u003d\u003d -1) {","lastModifiedDate":"2023-08-20"},{"lineNumber":81,"author":{"gitId":"zhonghan721"},"content":"                throw new DukeException(\"\\tOOPS!!! You forgot to specify the deadline.\"","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"zhonghan721"},"content":"                        + \"\\n\\tUse \\\"/by\\\" to do so.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":84,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":85,"author":{"gitId":"zhonghan721"},"content":"            description \u003d input.substring(8, indexOfBy);","lastModifiedDate":"2023-08-21"},{"lineNumber":86,"author":{"gitId":"zhonghan721"},"content":"            if (description.isBlank()) {","lastModifiedDate":"2023-08-20"},{"lineNumber":87,"author":{"gitId":"zhonghan721"},"content":"                throw new DukeException(\"\\tHmm, the description of a deadline cannot be empty :(\");","lastModifiedDate":"2023-08-20"},{"lineNumber":88,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":89,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":90,"author":{"gitId":"zhonghan721"},"content":"            String deadline \u003d input.substring(indexOfBy + 3).strip();","lastModifiedDate":"2023-08-27"},{"lineNumber":91,"author":{"gitId":"zhonghan721"},"content":"            if (deadline.isBlank()) {","lastModifiedDate":"2023-08-21"},{"lineNumber":92,"author":{"gitId":"zhonghan721"},"content":"                throw new DukeException(\"\\tOOPS!!! You forgot to specify the deadline.\");","lastModifiedDate":"2023-08-20"},{"lineNumber":93,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":94,"author":{"gitId":"zhonghan721"},"content":"            if (!DATE_PATTERN.matcher(deadline).matches()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":95,"author":{"gitId":"zhonghan721"},"content":"                throw new DukeException(\"\\tHmm, I don\u0027t understand the date. \"","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"zhonghan721"},"content":"                        + \"Use this format: YYYY-MM-DD\");","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":98,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":99,"author":{"gitId":"zhonghan721"},"content":"            output \u003d tasks.add(description, deadline);","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"zhonghan721"},"content":"            break;","lastModifiedDate":"2023-08-20"},{"lineNumber":101,"author":{"gitId":"zhonghan721"},"content":"        case \"event\":","lastModifiedDate":"2023-08-20"},{"lineNumber":102,"author":{"gitId":"zhonghan721"},"content":"            int indexOfFrom \u003d input.indexOf(\"/from\");","lastModifiedDate":"2023-08-20"},{"lineNumber":103,"author":{"gitId":"zhonghan721"},"content":"            int indexOfTo \u003d input.indexOf(\"/to\");","lastModifiedDate":"2023-08-20"},{"lineNumber":104,"author":{"gitId":"zhonghan721"},"content":"            if (indexOfFrom \u003d\u003d -1) {","lastModifiedDate":"2023-08-20"},{"lineNumber":105,"author":{"gitId":"zhonghan721"},"content":"                throw new DukeException(\"\\tOOPS!!! You forgot to specify the starting date.\"","lastModifiedDate":"2023-08-27"},{"lineNumber":106,"author":{"gitId":"zhonghan721"},"content":"                        + \"\\n\\tUse \\\"/from\\\" to do so.\");","lastModifiedDate":"2023-08-27"},{"lineNumber":107,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":108,"author":{"gitId":"zhonghan721"},"content":"            if (indexOfTo \u003d\u003d -1) {","lastModifiedDate":"2023-08-21"},{"lineNumber":109,"author":{"gitId":"zhonghan721"},"content":"                throw new DukeException(\"\\tOOPS!!! You forgot to specify the ending date.\"","lastModifiedDate":"2023-08-29"},{"lineNumber":110,"author":{"gitId":"zhonghan721"},"content":"                        + \"\\n\\tUse \\\"/to\\\" to do so.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":111,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":112,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":113,"author":{"gitId":"zhonghan721"},"content":"            description \u003d input.substring(5, indexOfFrom);","lastModifiedDate":"2023-08-21"},{"lineNumber":114,"author":{"gitId":"zhonghan721"},"content":"            if (description.isBlank()) {","lastModifiedDate":"2023-08-20"},{"lineNumber":115,"author":{"gitId":"zhonghan721"},"content":"                throw new DukeException(\"\\tHmm, the description of an event cannot be empty :(\");","lastModifiedDate":"2023-08-20"},{"lineNumber":116,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":117,"author":{"gitId":"zhonghan721"},"content":"            String from \u003d input.substring(indexOfFrom + 5, indexOfTo).strip();","lastModifiedDate":"2023-08-27"},{"lineNumber":118,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":119,"author":{"gitId":"zhonghan721"},"content":"            if (from.isBlank()) {","lastModifiedDate":"2023-08-21"},{"lineNumber":120,"author":{"gitId":"zhonghan721"},"content":"                throw new DukeException(\"\\tOOPS!!! You forgot to specify the starting date.\");","lastModifiedDate":"2023-08-27"},{"lineNumber":121,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":122,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":123,"author":{"gitId":"zhonghan721"},"content":"            String to \u003d input.substring(indexOfTo + 3).strip();","lastModifiedDate":"2023-08-27"},{"lineNumber":124,"author":{"gitId":"zhonghan721"},"content":"            if (to.isBlank()) {","lastModifiedDate":"2023-08-21"},{"lineNumber":125,"author":{"gitId":"zhonghan721"},"content":"                throw new DukeException(\"\\tOOPS!!! You forgot to specify the ending date.\");","lastModifiedDate":"2023-08-27"},{"lineNumber":126,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":127,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":128,"author":{"gitId":"zhonghan721"},"content":"            if (!DATE_PATTERN.matcher(from).matches() || !DATE_PATTERN.matcher(to).matches()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":129,"author":{"gitId":"zhonghan721"},"content":"                throw new DukeException(\"\\tHmm, I don\u0027t understand the date. \"","lastModifiedDate":"2023-08-29"},{"lineNumber":130,"author":{"gitId":"zhonghan721"},"content":"                        + \"Use this format: YYYY-MM-DD\");","lastModifiedDate":"2023-08-29"},{"lineNumber":131,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":132,"author":{"gitId":"zhonghan721"},"content":"            output \u003d tasks.add(description, from, to);","lastModifiedDate":"2023-08-30"},{"lineNumber":133,"author":{"gitId":"zhonghan721"},"content":"            break;","lastModifiedDate":"2023-08-20"},{"lineNumber":134,"author":{"gitId":"zhonghan721"},"content":"        case \"find\":","lastModifiedDate":"2023-08-29"},{"lineNumber":135,"author":{"gitId":"zhonghan721"},"content":"            description \u003d input.substring(4);","lastModifiedDate":"2023-08-29"},{"lineNumber":136,"author":{"gitId":"zhonghan721"},"content":"            System.out.println(description);","lastModifiedDate":"2023-08-29"},{"lineNumber":137,"author":{"gitId":"zhonghan721"},"content":"            if (description.isBlank()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":138,"author":{"gitId":"zhonghan721"},"content":"                throw new DukeException(\"\\tPlease provide the keyword for me to search.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":139,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":140,"author":{"gitId":"zhonghan721"},"content":"            output \u003d tasks.find(description);","lastModifiedDate":"2023-08-30"},{"lineNumber":141,"author":{"gitId":"zhonghan721"},"content":"            break;","lastModifiedDate":"2023-08-29"},{"lineNumber":142,"author":{"gitId":"zhonghan721"},"content":"        default:","lastModifiedDate":"2023-08-20"},{"lineNumber":143,"author":{"gitId":"zhonghan721"},"content":"            throw new DukeException(\"\\tOOPS!!! I\u0027m sorry, but I don\u0027t understand what that means :-(\");","lastModifiedDate":"2023-08-20"},{"lineNumber":144,"author":{"gitId":"zhonghan721"},"content":"        }","lastModifiedDate":"2023-08-20"},{"lineNumber":145,"author":{"gitId":"zhonghan721"},"content":"        return output;","lastModifiedDate":"2023-08-30"},{"lineNumber":146,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":147,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":148,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":149,"author":{"gitId":"zhonghan721"},"content":"     * Parses the formatted text read from the file and adds the created task to the ArrayList.","lastModifiedDate":"2023-08-29"},{"lineNumber":150,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":151,"author":{"gitId":"zhonghan721"},"content":"     * @param arrList The ArrayList to contain the tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":152,"author":{"gitId":"zhonghan721"},"content":"     * @param text The formatted text read from the file.","lastModifiedDate":"2023-08-29"},{"lineNumber":153,"author":{"gitId":"zhonghan721"},"content":"     * @return The number of tasks added successfully to the ArrayList.","lastModifiedDate":"2023-08-29"},{"lineNumber":154,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":155,"author":{"gitId":"zhonghan721"},"content":"    public static int parseToTask(ArrayList\u003cTask\u003e arrList, String text) {","lastModifiedDate":"2023-08-27"},{"lineNumber":156,"author":{"gitId":"zhonghan721"},"content":"        String[] textArr \u003d text.split(\" \\\\| \");","lastModifiedDate":"2023-08-27"},{"lineNumber":157,"author":{"gitId":"zhonghan721"},"content":"        int count \u003d 0;","lastModifiedDate":"2023-08-27"},{"lineNumber":158,"author":{"gitId":"zhonghan721"},"content":"        switch (textArr[0]) {","lastModifiedDate":"2023-08-27"},{"lineNumber":159,"author":{"gitId":"zhonghan721"},"content":"        case \"T\":","lastModifiedDate":"2023-08-27"},{"lineNumber":160,"author":{"gitId":"zhonghan721"},"content":"            arrList.add(new Todo(textArr[1], textArr[2]));","lastModifiedDate":"2023-08-27"},{"lineNumber":161,"author":{"gitId":"zhonghan721"},"content":"            count++;","lastModifiedDate":"2023-08-27"},{"lineNumber":162,"author":{"gitId":"zhonghan721"},"content":"            break;","lastModifiedDate":"2023-08-27"},{"lineNumber":163,"author":{"gitId":"zhonghan721"},"content":"        case \"D\":","lastModifiedDate":"2023-08-27"},{"lineNumber":164,"author":{"gitId":"zhonghan721"},"content":"            arrList.add(new Deadline(textArr[1], textArr[2], textArr[3]));","lastModifiedDate":"2023-08-27"},{"lineNumber":165,"author":{"gitId":"zhonghan721"},"content":"            count++;","lastModifiedDate":"2023-08-27"},{"lineNumber":166,"author":{"gitId":"zhonghan721"},"content":"            break;","lastModifiedDate":"2023-08-27"},{"lineNumber":167,"author":{"gitId":"zhonghan721"},"content":"        case \"E\":","lastModifiedDate":"2023-08-27"},{"lineNumber":168,"author":{"gitId":"zhonghan721"},"content":"            arrList.add(new Event(textArr[1], textArr[2], textArr[3], textArr[4]));","lastModifiedDate":"2023-08-27"},{"lineNumber":169,"author":{"gitId":"zhonghan721"},"content":"            count++;","lastModifiedDate":"2023-08-27"},{"lineNumber":170,"author":{"gitId":"zhonghan721"},"content":"            break;","lastModifiedDate":"2023-08-27"},{"lineNumber":171,"author":{"gitId":"zhonghan721"},"content":"        default:","lastModifiedDate":"2023-08-27"},{"lineNumber":172,"author":{"gitId":"zhonghan721"},"content":"            break;","lastModifiedDate":"2023-08-27"},{"lineNumber":173,"author":{"gitId":"zhonghan721"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":174,"author":{"gitId":"zhonghan721"},"content":"        return count;","lastModifiedDate":"2023-08-27"},{"lineNumber":175,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":176,"author":{"gitId":"zhonghan721"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"zhonghan721":176}},{"path":"src/main/java/zean/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhonghan721"},"content":"package zean;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"zhonghan721"},"content":"import java.io.File;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"zhonghan721"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"zhonghan721"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"zhonghan721"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"zhonghan721"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"zhonghan721"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-27"},{"lineNumber":9,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"zhonghan721"},"content":"import zean.exception.DukeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"zhonghan721"},"content":"import zean.task.Task;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"zhonghan721"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"zhonghan721"},"content":" * The class that deals with loading tasks from the file and saving tasks in the file.","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"zhonghan721"},"content":" *","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"zhonghan721"},"content":" * @author Zhong Han","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"zhonghan721"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"zhonghan721"},"content":"public class Storage {","lastModifiedDate":"2023-08-20"},{"lineNumber":19,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":20,"author":{"gitId":"zhonghan721"},"content":"    private File f;","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"zhonghan721"},"content":"    private String filePath;","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"zhonghan721"},"content":"     * Empty constructor for storage.","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"zhonghan721"},"content":"     * For the purpose of testing.","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"zhonghan721"},"content":"    public Storage() {","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"zhonghan721"},"content":"     * Constructor for storage.","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"zhonghan721"},"content":"     * Creates the necessary directory and file if not present.","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"zhonghan721"},"content":"     * Reads the present content in the file into the ArrayList.","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"zhonghan721"},"content":"    public Storage(String filePath) throws FileNotFoundException, IOException {","lastModifiedDate":"2023-08-28"},{"lineNumber":38,"author":{"gitId":"zhonghan721"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"zhonghan721"},"content":"        File dir \u003d new File(\"./data\");","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"zhonghan721"},"content":"        if (!dir.exists()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"zhonghan721"},"content":"            if (!dir.mkdir()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"zhonghan721"},"content":"                throw new DukeException(\"\\tOOPS! The file cannot be created.\");","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"zhonghan721"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"zhonghan721"},"content":"        File f \u003d new File(this.filePath);","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"zhonghan721"},"content":"        this.f \u003d f;","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"zhonghan721"},"content":"        if (!f.exists()) {","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"zhonghan721"},"content":"            f.createNewFile();","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"zhonghan721"},"content":"            System.out.println(\"\\tA new folder and file to store your tasks has been created.\");","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"zhonghan721"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":53,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":54,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"zhonghan721"},"content":"     * Returns an ArrayList populated with tasks that is present in the file.","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"zhonghan721"},"content":"     * @return An ArrayList populated with tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"zhonghan721"},"content":"    public ArrayList\u003cTask\u003e load() {","lastModifiedDate":"2023-08-28"},{"lineNumber":60,"author":{"gitId":"zhonghan721"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-28"},{"lineNumber":61,"author":{"gitId":"zhonghan721"},"content":"        Scanner sc \u003d null;","lastModifiedDate":"2023-08-28"},{"lineNumber":62,"author":{"gitId":"zhonghan721"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":63,"author":{"gitId":"zhonghan721"},"content":"            sc \u003d new Scanner(this.f);","lastModifiedDate":"2023-08-28"},{"lineNumber":64,"author":{"gitId":"zhonghan721"},"content":"            while (sc.hasNext()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":65,"author":{"gitId":"zhonghan721"},"content":"                Parser.parseToTask(tasks, sc.nextLine());","lastModifiedDate":"2023-08-28"},{"lineNumber":66,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-20"},{"lineNumber":67,"author":{"gitId":"zhonghan721"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":68,"author":{"gitId":"zhonghan721"},"content":"            throw new DukeException(\"\\tOOPS! The file cannot be created.\");","lastModifiedDate":"2023-08-28"},{"lineNumber":69,"author":{"gitId":"zhonghan721"},"content":"        } finally {","lastModifiedDate":"2023-08-28"},{"lineNumber":70,"author":{"gitId":"zhonghan721"},"content":"            if (sc !\u003d null) {","lastModifiedDate":"2023-08-28"},{"lineNumber":71,"author":{"gitId":"zhonghan721"},"content":"                sc.close();","lastModifiedDate":"2023-08-28"},{"lineNumber":72,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-21"},{"lineNumber":73,"author":{"gitId":"zhonghan721"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":74,"author":{"gitId":"zhonghan721"},"content":"        return tasks;","lastModifiedDate":"2023-08-28"},{"lineNumber":75,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":76,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":77,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"zhonghan721"},"content":"     * Appends task to the file.","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"zhonghan721"},"content":"     * @param task The task to be written to the file.","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"zhonghan721"},"content":"    public void addToDisk(Task task) {","lastModifiedDate":"2023-08-27"},{"lineNumber":83,"author":{"gitId":"zhonghan721"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":84,"author":{"gitId":"zhonghan721"},"content":"            FileWriter fw \u003d new FileWriter(this.filePath, true);","lastModifiedDate":"2023-08-28"},{"lineNumber":85,"author":{"gitId":"zhonghan721"},"content":"            fw.write(task.toStringForFile() + System.lineSeparator());","lastModifiedDate":"2023-08-27"},{"lineNumber":86,"author":{"gitId":"zhonghan721"},"content":"            fw.close();","lastModifiedDate":"2023-08-27"},{"lineNumber":87,"author":{"gitId":"zhonghan721"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":88,"author":{"gitId":"zhonghan721"},"content":"            throw new DukeException(\"\\tOOPS! The file is not available!\");","lastModifiedDate":"2023-08-27"},{"lineNumber":89,"author":{"gitId":"zhonghan721"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":90,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":91,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":92,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"zhonghan721"},"content":"     * Overwrites all the tasks to the file.","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"zhonghan721"},"content":"     * @param tasks The ArrayList containing all the tasks to be written to the file.","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"zhonghan721"},"content":"    public void rewriteToDisk(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-28"},{"lineNumber":98,"author":{"gitId":"zhonghan721"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":99,"author":{"gitId":"zhonghan721"},"content":"            FileWriter fw \u003d new FileWriter(this.filePath);","lastModifiedDate":"2023-08-28"},{"lineNumber":100,"author":{"gitId":"zhonghan721"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-08-28"},{"lineNumber":101,"author":{"gitId":"zhonghan721"},"content":"                fw.write(tasks.get(i).toStringForFile() + System.lineSeparator());","lastModifiedDate":"2023-08-28"},{"lineNumber":102,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":103,"author":{"gitId":"zhonghan721"},"content":"            fw.close();","lastModifiedDate":"2023-08-27"},{"lineNumber":104,"author":{"gitId":"zhonghan721"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":105,"author":{"gitId":"zhonghan721"},"content":"            throw new DukeException(\"\\tOOPS! The file is not available!\");","lastModifiedDate":"2023-08-27"},{"lineNumber":106,"author":{"gitId":"zhonghan721"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":107,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":108,"author":{"gitId":"zhonghan721"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"zhonghan721":108}},{"path":"src/main/java/zean/StorageStub.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhonghan721"},"content":"package zean;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"zhonghan721"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"zhonghan721"},"content":"import zean.task.Task;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"zhonghan721"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"zhonghan721"},"content":" * A class that is used for testing. Provides a storage stub.","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"zhonghan721"},"content":" *","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"zhonghan721"},"content":" * @author Zhong Han","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"zhonghan721"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"zhonghan721"},"content":"public class StorageStub extends Storage {","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"zhonghan721"},"content":"    public StorageStub() {","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"zhonghan721"},"content":"        super();","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"zhonghan721"},"content":"     * Returns an empty ArrayList.","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"zhonghan721"},"content":"     * @return An empty ArrayList","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"zhonghan721"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"zhonghan721"},"content":"    public ArrayList\u003cTask\u003e load() {","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"zhonghan721"},"content":"        return new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"zhonghan721"},"content":"     * Consumes the task. Does nothing as it acts as a stub.","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"zhonghan721"},"content":"     * @param task The task to be written to disk.","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"zhonghan721"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"zhonghan721"},"content":"    public void addToDisk(Task task) {","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"zhonghan721"},"content":"        // does nothing","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"zhonghan721"},"content":"     * Does nothing as it acts as a stub.","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"zhonghan721"},"content":"     * @param tasks The ArrayList containing all the updated tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"zhonghan721"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"zhonghan721"},"content":"    public void rewriteToDisk(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"zhonghan721"},"content":"        // does nothing","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"zhonghan721"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"zhonghan721":46}},{"path":"src/main/java/zean/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhonghan721"},"content":"package zean;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"zhonghan721"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"zhonghan721"},"content":"import zean.exception.DukeException;","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"zhonghan721"},"content":"import zean.task.Deadline;","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"zhonghan721"},"content":"import zean.task.Event;","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"zhonghan721"},"content":"import zean.task.Task;","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"zhonghan721"},"content":"import zean.task.Todo;","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"zhonghan721"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"zhonghan721"},"content":" * The class that contains the task list, with operations to add/delete tasks in the list.","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"zhonghan721"},"content":" *","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"zhonghan721"},"content":" * @author Zhong Han","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"zhonghan721"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"zhonghan721"},"content":"public class TaskList {","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"zhonghan721"},"content":"    private ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"zhonghan721"},"content":"    private int count;","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"zhonghan721"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"zhonghan721"},"content":"     * An empty constructor for TaskList.","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"zhonghan721"},"content":"     * For the purpose of testing.","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"zhonghan721"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"zhonghan721"},"content":"        this.tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"zhonghan721"},"content":"     * Constructor for TaskList.","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"zhonghan721"},"content":"     * Loads the tasks from storage.","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"zhonghan721"},"content":"     * @param storage The storage object that reads and write data from the file.","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":36,"author":{"gitId":"zhonghan721"},"content":"    public TaskList(Storage storage) {","lastModifiedDate":"2023-08-28"},{"lineNumber":37,"author":{"gitId":"zhonghan721"},"content":"        this.storage \u003d storage;","lastModifiedDate":"2023-08-28"},{"lineNumber":38,"author":{"gitId":"zhonghan721"},"content":"        this.tasks \u003d storage.load();","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"zhonghan721"},"content":"        this.count \u003d this.tasks.size();","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"zhonghan721"},"content":"     * Adds a todo task to the array list and writes to the disk.","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"zhonghan721"},"content":"     * @param description The description of the todo task.","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"zhonghan721"},"content":"     * @return The output to be printed on the console.","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"zhonghan721"},"content":"    public String add(String description) {","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"zhonghan721"},"content":"        Todo task \u003d new Todo(description);","lastModifiedDate":"2023-08-28"},{"lineNumber":50,"author":{"gitId":"zhonghan721"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-08-28"},{"lineNumber":51,"author":{"gitId":"zhonghan721"},"content":"        this.count++;","lastModifiedDate":"2023-08-28"},{"lineNumber":52,"author":{"gitId":"zhonghan721"},"content":"        this.storage.addToDisk(task);","lastModifiedDate":"2023-08-28"},{"lineNumber":53,"author":{"gitId":"zhonghan721"},"content":"        return printAddTask(task);","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":55,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"zhonghan721"},"content":"     * Adds a deadline task to the array list and writes to the disk.","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-28"},{"lineNumber":59,"author":{"gitId":"zhonghan721"},"content":"     * @param description The description of the deadline task.","lastModifiedDate":"2023-08-28"},{"lineNumber":60,"author":{"gitId":"zhonghan721"},"content":"     * @param by The due date of the deadline task.","lastModifiedDate":"2023-08-28"},{"lineNumber":61,"author":{"gitId":"zhonghan721"},"content":"     * @return The output to be printed on the console.","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":63,"author":{"gitId":"zhonghan721"},"content":"    public String add(String description, String by) {","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"zhonghan721"},"content":"        Deadline task \u003d new Deadline(description, by);","lastModifiedDate":"2023-08-28"},{"lineNumber":65,"author":{"gitId":"zhonghan721"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-08-28"},{"lineNumber":66,"author":{"gitId":"zhonghan721"},"content":"        this.count++;","lastModifiedDate":"2023-08-28"},{"lineNumber":67,"author":{"gitId":"zhonghan721"},"content":"        this.storage.addToDisk(task);","lastModifiedDate":"2023-08-28"},{"lineNumber":68,"author":{"gitId":"zhonghan721"},"content":"        return printAddTask(task);","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":70,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":71,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":72,"author":{"gitId":"zhonghan721"},"content":"     * Adds an event task to the array list and writes to the disk.","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-28"},{"lineNumber":74,"author":{"gitId":"zhonghan721"},"content":"     * @param description The description of the event task.","lastModifiedDate":"2023-08-28"},{"lineNumber":75,"author":{"gitId":"zhonghan721"},"content":"     * @param from The start date of the event task.","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"zhonghan721"},"content":"     * @param to The end date of the event task.","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"zhonghan721"},"content":"     * @return The output to be printed on the console.","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":79,"author":{"gitId":"zhonghan721"},"content":"    public String add(String description, String from, String to) {","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"zhonghan721"},"content":"        Event task \u003d new Event(description, from, to);","lastModifiedDate":"2023-08-28"},{"lineNumber":81,"author":{"gitId":"zhonghan721"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-08-28"},{"lineNumber":82,"author":{"gitId":"zhonghan721"},"content":"        this.count++;","lastModifiedDate":"2023-08-28"},{"lineNumber":83,"author":{"gitId":"zhonghan721"},"content":"        this.storage.addToDisk(task);","lastModifiedDate":"2023-08-28"},{"lineNumber":84,"author":{"gitId":"zhonghan721"},"content":"        return printAddTask(task);","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":86,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":87,"author":{"gitId":"zhonghan721"},"content":"    private String printAddTask(Task task) {","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"zhonghan721"},"content":"        return \"\\tGot it. I\u0027ve added this task:\\n\\t  \" + task + \"\\n\" + this.printNumOfTasks();","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":90,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":91,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":92,"author":{"gitId":"zhonghan721"},"content":"     * Returns the string of the list of tasks that the list holds.","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"zhonghan721"},"content":"     * @return The output to be printed on the console.","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":96,"author":{"gitId":"zhonghan721"},"content":"    public String list() {","lastModifiedDate":"2023-08-30"},{"lineNumber":97,"author":{"gitId":"zhonghan721"},"content":"        if (this.count \u003d\u003d 0) {","lastModifiedDate":"2023-08-28"},{"lineNumber":98,"author":{"gitId":"zhonghan721"},"content":"            return \"\\tThere are currently no tasks in your list:\\n\";","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"zhonghan721"},"content":"        } else {","lastModifiedDate":"2023-08-28"},{"lineNumber":100,"author":{"gitId":"zhonghan721"},"content":"            StringBuilder output \u003d new StringBuilder(\"\\tAs requested, here are the tasks in your list:\\n\");","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"zhonghan721"},"content":"            for (int i \u003d 0; i \u003c this.count; i++) {","lastModifiedDate":"2023-08-28"},{"lineNumber":102,"author":{"gitId":"zhonghan721"},"content":"                output.append(String.format(\"\\t%d.%s\\n\", i + 1, this.tasks.get(i)));","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":104,"author":{"gitId":"zhonghan721"},"content":"            return output.toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":105,"author":{"gitId":"zhonghan721"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":106,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":107,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":108,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":109,"author":{"gitId":"zhonghan721"},"content":"     * Marks the task corresponding to the index as done and writes to the disk.","lastModifiedDate":"2023-08-29"},{"lineNumber":110,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-28"},{"lineNumber":111,"author":{"gitId":"zhonghan721"},"content":"     * @param index The index of the task seen by the user, which starts from 1.","lastModifiedDate":"2023-08-28"},{"lineNumber":112,"author":{"gitId":"zhonghan721"},"content":"     * @return The output to be printed on the console.","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"zhonghan721"},"content":"     * @throws DukeException An exception related to the chatbot.","lastModifiedDate":"2023-08-28"},{"lineNumber":114,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":115,"author":{"gitId":"zhonghan721"},"content":"    public String markTaskDone(int index) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"zhonghan721"},"content":"        if (index \u003e this.count || index \u003c\u003d 0) {","lastModifiedDate":"2023-08-28"},{"lineNumber":117,"author":{"gitId":"zhonghan721"},"content":"            throw new DukeException(\"\\tHmm, this task does not exist :|\");","lastModifiedDate":"2023-08-28"},{"lineNumber":118,"author":{"gitId":"zhonghan721"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":119,"author":{"gitId":"zhonghan721"},"content":"        this.storage.rewriteToDisk(this.tasks);","lastModifiedDate":"2023-08-28"},{"lineNumber":120,"author":{"gitId":"zhonghan721"},"content":"        String taskOutput \u003d this.tasks.get(index - 1).markTaskDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":121,"author":{"gitId":"zhonghan721"},"content":"        return \"\\tNice! I\u0027ve marked this task as done:\\n\" + taskOutput;","lastModifiedDate":"2023-08-30"},{"lineNumber":122,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":123,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":124,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":125,"author":{"gitId":"zhonghan721"},"content":"     * Marks the task corresponding to the index as not done and writes to the disk.","lastModifiedDate":"2023-08-29"},{"lineNumber":126,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-28"},{"lineNumber":127,"author":{"gitId":"zhonghan721"},"content":"     * @param index The index of the task seen by the user, which starts from 1.","lastModifiedDate":"2023-08-28"},{"lineNumber":128,"author":{"gitId":"zhonghan721"},"content":"     * @return The output to be printed on the console.","lastModifiedDate":"2023-08-30"},{"lineNumber":129,"author":{"gitId":"zhonghan721"},"content":"     * @throws DukeException An exception related to the chatbot.","lastModifiedDate":"2023-08-28"},{"lineNumber":130,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":131,"author":{"gitId":"zhonghan721"},"content":"    public String markTaskNotDone(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":132,"author":{"gitId":"zhonghan721"},"content":"        if (index \u003e this.count || index \u003c\u003d 0) {","lastModifiedDate":"2023-08-28"},{"lineNumber":133,"author":{"gitId":"zhonghan721"},"content":"            throw new DukeException(\"\\tHmm, this task does not exist :|\");","lastModifiedDate":"2023-08-28"},{"lineNumber":134,"author":{"gitId":"zhonghan721"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":135,"author":{"gitId":"zhonghan721"},"content":"        this.storage.rewriteToDisk(this.tasks);","lastModifiedDate":"2023-08-28"},{"lineNumber":136,"author":{"gitId":"zhonghan721"},"content":"        String taskOutput \u003d this.tasks.get(index - 1).markTaskNotDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":137,"author":{"gitId":"zhonghan721"},"content":"        return \"\\tSure, I\u0027ve marked this task as not done yet:\\n\" + taskOutput;","lastModifiedDate":"2023-08-30"},{"lineNumber":138,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":139,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":140,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":141,"author":{"gitId":"zhonghan721"},"content":"    private String printNumOfTasks() {","lastModifiedDate":"2023-08-30"},{"lineNumber":142,"author":{"gitId":"zhonghan721"},"content":"        if (this.count \u003c 2) {","lastModifiedDate":"2023-08-28"},{"lineNumber":143,"author":{"gitId":"zhonghan721"},"content":"            return String.format(\"\\tNow you have %d task in the list.\", this.count);","lastModifiedDate":"2023-08-30"},{"lineNumber":144,"author":{"gitId":"zhonghan721"},"content":"        } else {","lastModifiedDate":"2023-08-28"},{"lineNumber":145,"author":{"gitId":"zhonghan721"},"content":"            return String.format(\"\\tNow you have %d tasks in the list.\", this.count);","lastModifiedDate":"2023-08-30"},{"lineNumber":146,"author":{"gitId":"zhonghan721"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":147,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":148,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":149,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":150,"author":{"gitId":"zhonghan721"},"content":"     * Deletes the task corresponding to the index and writes to the disk.","lastModifiedDate":"2023-08-29"},{"lineNumber":151,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-28"},{"lineNumber":152,"author":{"gitId":"zhonghan721"},"content":"     * @param index The index of the task seen by the user, which starts from 1.","lastModifiedDate":"2023-08-28"},{"lineNumber":153,"author":{"gitId":"zhonghan721"},"content":"     * @return The output to be printed on the console.","lastModifiedDate":"2023-08-30"},{"lineNumber":154,"author":{"gitId":"zhonghan721"},"content":"     * @throws DukeException An exception related to the chatbot.","lastModifiedDate":"2023-08-28"},{"lineNumber":155,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":156,"author":{"gitId":"zhonghan721"},"content":"    public String deleteTask(int index) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":157,"author":{"gitId":"zhonghan721"},"content":"        if (index \u003c 1 || index \u003e this.count) {","lastModifiedDate":"2023-08-28"},{"lineNumber":158,"author":{"gitId":"zhonghan721"},"content":"            throw new DukeException(\"\\tHmm, this task does not exist :|\");","lastModifiedDate":"2023-08-28"},{"lineNumber":159,"author":{"gitId":"zhonghan721"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":160,"author":{"gitId":"zhonghan721"},"content":"        this.tasks.remove(index - 1);","lastModifiedDate":"2023-08-28"},{"lineNumber":161,"author":{"gitId":"zhonghan721"},"content":"        this.count--;","lastModifiedDate":"2023-08-28"},{"lineNumber":162,"author":{"gitId":"zhonghan721"},"content":"        this.storage.rewriteToDisk(this.tasks);","lastModifiedDate":"2023-08-28"},{"lineNumber":163,"author":{"gitId":"zhonghan721"},"content":"        return \"\\tNoted. I\u0027ve removed this task.\\n\" + printNumOfTasks();","lastModifiedDate":"2023-08-30"},{"lineNumber":164,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":165,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":166,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":167,"author":{"gitId":"zhonghan721"},"content":"     * Returns the string of the list of tasks that matches the search string.","lastModifiedDate":"2023-08-30"},{"lineNumber":168,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":169,"author":{"gitId":"zhonghan721"},"content":"     * @param description The search string.","lastModifiedDate":"2023-08-29"},{"lineNumber":170,"author":{"gitId":"zhonghan721"},"content":"     * @return The output to be printed on the console.","lastModifiedDate":"2023-08-30"},{"lineNumber":171,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":172,"author":{"gitId":"zhonghan721"},"content":"    public String find(String description) {","lastModifiedDate":"2023-08-30"},{"lineNumber":173,"author":{"gitId":"zhonghan721"},"content":"        ArrayList\u003cTask\u003e subList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":174,"author":{"gitId":"zhonghan721"},"content":"        this.tasks.forEach((task) -\u003e {","lastModifiedDate":"2023-08-29"},{"lineNumber":175,"author":{"gitId":"zhonghan721"},"content":"            if (task.getDescription().toLowerCase().contains(description.trim().toLowerCase())) {","lastModifiedDate":"2023-08-29"},{"lineNumber":176,"author":{"gitId":"zhonghan721"},"content":"                subList.add(task);","lastModifiedDate":"2023-08-29"},{"lineNumber":177,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":178,"author":{"gitId":"zhonghan721"},"content":"        });","lastModifiedDate":"2023-08-29"},{"lineNumber":179,"author":{"gitId":"zhonghan721"},"content":"        if (subList.isEmpty()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":180,"author":{"gitId":"zhonghan721"},"content":"            return \"\\tThere are no matching tasks in your list.\";","lastModifiedDate":"2023-08-30"},{"lineNumber":181,"author":{"gitId":"zhonghan721"},"content":"        } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":182,"author":{"gitId":"zhonghan721"},"content":"            StringBuilder output \u003d new StringBuilder(\"\\tHere are the matching tasks in your list:\\n\");","lastModifiedDate":"2023-08-30"},{"lineNumber":183,"author":{"gitId":"zhonghan721"},"content":"            for (int i \u003d 0; i \u003c subList.size(); i++) {","lastModifiedDate":"2023-08-29"},{"lineNumber":184,"author":{"gitId":"zhonghan721"},"content":"                output.append(String.format(\"\\t%d.%s\\n\", i + 1, subList.get(i)));","lastModifiedDate":"2023-08-30"},{"lineNumber":185,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":186,"author":{"gitId":"zhonghan721"},"content":"            return output.toString();","lastModifiedDate":"2023-08-30"},{"lineNumber":187,"author":{"gitId":"zhonghan721"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":188,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":189,"author":{"gitId":"zhonghan721"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"zhonghan721":189}},{"path":"src/main/java/zean/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhonghan721"},"content":"package zean;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"zhonghan721"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"zhonghan721"},"content":" * The class which deals with interactions with the user.","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"zhonghan721"},"content":" *","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"zhonghan721"},"content":" * @author Zhong Han","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"zhonghan721"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"zhonghan721"},"content":"public class Ui {","lastModifiedDate":"2023-08-19"},{"lineNumber":9,"author":{"gitId":"zhonghan721"},"content":"    private static final String DIVIDER \u003d \"\\t__________________________________\";","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"zhonghan721"},"content":"    private static final String ERROR_DIVIDER \u003d \"\\t**********************************\";","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"zhonghan721"},"content":"    public Ui() {","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":16,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"zhonghan721"},"content":"     * Prints the welcome message.","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"zhonghan721"},"content":"     * @param name The name of the chatbot.","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"zhonghan721"},"content":"    public void greet(String name) {","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"zhonghan721"},"content":"        printDivider();","lastModifiedDate":"2023-08-20"},{"lineNumber":23,"author":{"gitId":"zhonghan721"},"content":"        printLogo();","lastModifiedDate":"2023-08-19"},{"lineNumber":24,"author":{"gitId":"zhonghan721"},"content":"        System.out.println(\"\\tHi there! I\u0027m \" + name);","lastModifiedDate":"2023-08-20"},{"lineNumber":25,"author":{"gitId":"zhonghan721"},"content":"        System.out.println(\"\\tHow can I help you today?\");","lastModifiedDate":"2023-08-20"},{"lineNumber":26,"author":{"gitId":"zhonghan721"},"content":"        printDivider();","lastModifiedDate":"2023-08-19"},{"lineNumber":27,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":28,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":29,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"zhonghan721"},"content":"     * Prints the exit message.","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"zhonghan721"},"content":"    public void exit() {","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"zhonghan721"},"content":"        printDivider();","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"zhonghan721"},"content":"        System.out.println(\"\\tBye. Have a nice day!\");","lastModifiedDate":"2023-08-20"},{"lineNumber":35,"author":{"gitId":"zhonghan721"},"content":"        printDivider();","lastModifiedDate":"2023-08-19"},{"lineNumber":36,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":37,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":38,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"zhonghan721"},"content":"     * Prints the normal horizontal divider.","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"zhonghan721"},"content":"    public void printDivider() {","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"zhonghan721"},"content":"        System.out.println(Ui.DIVIDER);","lastModifiedDate":"2023-08-20"},{"lineNumber":43,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":44,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":45,"author":{"gitId":"zhonghan721"},"content":"    private void printLogo() {","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"zhonghan721"},"content":"        String logo \u003d \"\\t++      ++      ++\\n\"","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"zhonghan721"},"content":"                + \"\\t||      ||      ||\\n\"","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"zhonghan721"},"content":"                + \"\\t| +----+ |      ||\\n\"","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"zhonghan721"},"content":"                + \"\\t| +----+ |      ||\\n\"","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"zhonghan721"},"content":"                + \"\\t||      ||      ||\\n\"","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"zhonghan721"},"content":"                + \"\\t++      ++      ++\\n\";","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"zhonghan721"},"content":"        System.out.println(logo);","lastModifiedDate":"2023-08-19"},{"lineNumber":53,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":54,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":55,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"zhonghan721"},"content":"     * Prints the error message with a horizontal error divider.","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"zhonghan721"},"content":"     * @param msg The error message to be printed.","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"zhonghan721"},"content":"    public void showError(String msg) {","lastModifiedDate":"2023-08-28"},{"lineNumber":61,"author":{"gitId":"zhonghan721"},"content":"        System.out.println(ERROR_DIVIDER);","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"zhonghan721"},"content":"        System.out.println(msg);","lastModifiedDate":"2023-08-28"},{"lineNumber":63,"author":{"gitId":"zhonghan721"},"content":"        System.out.println(ERROR_DIVIDER);","lastModifiedDate":"2023-08-28"},{"lineNumber":64,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":65,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"zhonghan721"},"content":"     * Prints the input String in the console enclosed in two horizontal dividers.","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"zhonghan721"},"content":"     * @param msg The message to be printed.","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"zhonghan721"},"content":"    public void printOutput(String msg) {","lastModifiedDate":"2023-08-30"},{"lineNumber":72,"author":{"gitId":"zhonghan721"},"content":"        if (msg.isBlank()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":73,"author":{"gitId":"zhonghan721"},"content":"            return;","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"zhonghan721"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"zhonghan721"},"content":"        this.printDivider();","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"zhonghan721"},"content":"        System.out.println(msg);","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"zhonghan721"},"content":"        this.printDivider();","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"zhonghan721"},"content":"}","lastModifiedDate":"2023-08-19"}],"authorContributionMap":{"zhonghan721":79}},{"path":"src/main/java/zean/Zean.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhonghan721"},"content":"package zean;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"zhonghan721"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"zhonghan721"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"zhonghan721"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"zhonghan721"},"content":"import zean.exception.DukeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"zhonghan721"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"zhonghan721"},"content":" * The main class for the chatbot.","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"zhonghan721"},"content":" *","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"zhonghan721"},"content":" * @author Zhong Han","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"zhonghan721"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"zhonghan721"},"content":"public class Zean {","lastModifiedDate":"2023-08-19"},{"lineNumber":15,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-19"},{"lineNumber":16,"author":{"gitId":"zhonghan721"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"zhonghan721"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"zhonghan721"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"zhonghan721"},"content":"     * Constructor for the chatbot zean.","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"zhonghan721"},"content":"     * @param filePath The filepath of the data to be retrieved or written.","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"zhonghan721"},"content":"    public Zean(String filePath) {","lastModifiedDate":"2023-08-28"},{"lineNumber":26,"author":{"gitId":"zhonghan721"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"zhonghan721"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"zhonghan721"},"content":"            this.storage \u003d new Storage(filePath);","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"zhonghan721"},"content":"            this.tasks \u003d new TaskList(this.storage);","lastModifiedDate":"2023-08-28"},{"lineNumber":30,"author":{"gitId":"zhonghan721"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"zhonghan721"},"content":"            this.ui.showError(\"\\tOOPS! Something went wrong with the file.\"","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"zhonghan721"},"content":"                    + \"\\n\\tShutting down now...\");","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"zhonghan721"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"zhonghan721"},"content":"            this.ui.showError(\"\\tOOPS! The file cannot be created.\\n\\tShutting down now...\");","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"zhonghan721"},"content":"        } catch (SecurityException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":36,"author":{"gitId":"zhonghan721"},"content":"            this.ui.showError(\"\\tOOPS! The file cannot be written due to invalid access.\"","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"zhonghan721"},"content":"                    + \"\\n\\tShutting down now...\");","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"zhonghan721"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"zhonghan721"},"content":"            this.ui.showError(e.getMessage());","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"zhonghan721"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"zhonghan721"},"content":"     * Runs the chatbot.","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"zhonghan721"},"content":"    public void run() {","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"zhonghan721"},"content":"        this.ui.greet(\"Zean\");","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"zhonghan721"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-28"},{"lineNumber":49,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":50,"author":{"gitId":"zhonghan721"},"content":"        while (true) {","lastModifiedDate":"2023-08-28"},{"lineNumber":51,"author":{"gitId":"zhonghan721"},"content":"            String input \u003d sc.nextLine();","lastModifiedDate":"2023-08-28"},{"lineNumber":52,"author":{"gitId":"zhonghan721"},"content":"            if (input.strip().equals(\"bye\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"zhonghan721"},"content":"                break;","lastModifiedDate":"2023-08-28"},{"lineNumber":54,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":55,"author":{"gitId":"zhonghan721"},"content":"            try {","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"zhonghan721"},"content":"                this.ui.printOutput(Parser.parse(input, this.tasks));","lastModifiedDate":"2023-08-30"},{"lineNumber":57,"author":{"gitId":"zhonghan721"},"content":"            } catch (DukeException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":58,"author":{"gitId":"zhonghan721"},"content":"                this.ui.showError(e.getMessage());","lastModifiedDate":"2023-08-28"},{"lineNumber":59,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":60,"author":{"gitId":"zhonghan721"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"zhonghan721"},"content":"        sc.close();","lastModifiedDate":"2023-08-28"},{"lineNumber":62,"author":{"gitId":"zhonghan721"},"content":"        this.ui.exit();","lastModifiedDate":"2023-08-28"},{"lineNumber":63,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-19"},{"lineNumber":65,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":66,"author":{"gitId":"zhonghan721"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-28"},{"lineNumber":67,"author":{"gitId":"zhonghan721"},"content":"        new Zean(\"./data/zean.txt\").run();","lastModifiedDate":"2023-08-28"},{"lineNumber":68,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":69,"author":{"gitId":"zhonghan721"},"content":"}","lastModifiedDate":"2023-08-19"}],"authorContributionMap":{"zhonghan721":69}},{"path":"src/main/java/zean/exception/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhonghan721"},"content":"package zean.exception;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"zhonghan721"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"zhonghan721"},"content":" * The class that represents exceptions specific to the chatbot.","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"zhonghan721"},"content":" *","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"zhonghan721"},"content":" * @author Zhong Han","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"zhonghan721"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"zhonghan721"},"content":"public class DukeException extends RuntimeException {","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"zhonghan721"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"zhonghan721"},"content":"        super(message);","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":13,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":14,"author":{"gitId":"zhonghan721"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"zhonghan721":14}},{"path":"src/main/java/zean/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhonghan721"},"content":"package zean.task;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"zhonghan721"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"zhonghan721"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"zhonghan721"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"zhonghan721"},"content":"import zean.exception.DukeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"zhonghan721"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"zhonghan721"},"content":" * The class representing a deadline task.","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"zhonghan721"},"content":" *","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"zhonghan721"},"content":" * @author Zhong Han","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"zhonghan721"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"zhonghan721"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":15,"author":{"gitId":"zhonghan721"},"content":"    private LocalDate by;","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":17,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"zhonghan721"},"content":"     * Constructor for the deadline task.","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"zhonghan721"},"content":"     * @param description The description of the deadline task.","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"zhonghan721"},"content":"     * @param by The due date of the deadline task.","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"zhonghan721"},"content":"    public Deadline(String description, String by) throws DukeException {","lastModifiedDate":"2023-08-27"},{"lineNumber":24,"author":{"gitId":"zhonghan721"},"content":"        super(description.strip());","lastModifiedDate":"2023-08-20"},{"lineNumber":25,"author":{"gitId":"zhonghan721"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"zhonghan721"},"content":"            this.by \u003d LocalDate.parse(by.strip());","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"zhonghan721"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"zhonghan721"},"content":"            throw new DukeException(\"\\tThe date is invalid!\");","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"zhonghan721"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":31,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":32,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"zhonghan721"},"content":"     * Constructor for the deadline task.","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"zhonghan721"},"content":"     * @param bool The completion status of the deadline task..","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"zhonghan721"},"content":"     * @param description The description of the deadline task.","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"zhonghan721"},"content":"    public Deadline(String bool, String description, String by) {","lastModifiedDate":"2023-08-27"},{"lineNumber":39,"author":{"gitId":"zhonghan721"},"content":"        super(description.strip());","lastModifiedDate":"2023-08-27"},{"lineNumber":40,"author":{"gitId":"zhonghan721"},"content":"        this.by \u003d LocalDate.parse(by.strip());","lastModifiedDate":"2023-08-27"},{"lineNumber":41,"author":{"gitId":"zhonghan721"},"content":"        if (Integer.parseInt(bool) \u003d\u003d 1) {","lastModifiedDate":"2023-08-27"},{"lineNumber":42,"author":{"gitId":"zhonghan721"},"content":"            this.isDone \u003d true;","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"zhonghan721"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":47,"author":{"gitId":"zhonghan721"},"content":"     * Returns the string representation of the deadline task.","lastModifiedDate":"2023-08-21"},{"lineNumber":48,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":49,"author":{"gitId":"zhonghan721"},"content":"     * @return a string comprising the symbol, status,","lastModifiedDate":"2023-08-21"},{"lineNumber":50,"author":{"gitId":"zhonghan721"},"content":"     *      description and due date of the deadline task.","lastModifiedDate":"2023-08-21"},{"lineNumber":51,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":52,"author":{"gitId":"zhonghan721"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":53,"author":{"gitId":"zhonghan721"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":54,"author":{"gitId":"zhonghan721"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + this.getDeadline() + \")\";","lastModifiedDate":"2023-08-27"},{"lineNumber":55,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":56,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":57,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":58,"author":{"gitId":"zhonghan721"},"content":"     * Returns the string representing the task to be written in the disk.","lastModifiedDate":"2023-08-27"},{"lineNumber":59,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":60,"author":{"gitId":"zhonghan721"},"content":"     * @return The string describing this task to be written in the disk.","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"zhonghan721"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"zhonghan721"},"content":"    public String toStringForFile() {","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"zhonghan721"},"content":"        return \"D | \" + super.toStringForFile() + \" | \" + this.by;","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"zhonghan721"},"content":"     * Returns the string with formatted due date of the deadline task.","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"zhonghan721"},"content":"     * @return The string with formatted due date of the deadline task.","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"zhonghan721"},"content":"    protected String getDeadline() {","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"zhonghan721"},"content":"        return this.by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":75,"author":{"gitId":"zhonghan721"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"zhonghan721":75}},{"path":"src/main/java/zean/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhonghan721"},"content":"package zean.task;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"zhonghan721"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"zhonghan721"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"zhonghan721"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-27"},{"lineNumber":6,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":7,"author":{"gitId":"zhonghan721"},"content":"import zean.exception.DukeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"zhonghan721"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"zhonghan721"},"content":" * The class that represents an event task.","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"zhonghan721"},"content":" *","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"zhonghan721"},"content":" * @author Zhong Han","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"zhonghan721"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"zhonghan721"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":15,"author":{"gitId":"zhonghan721"},"content":"    private final LocalDate from;","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"zhonghan721"},"content":"    private final LocalDate to;","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":18,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"zhonghan721"},"content":"     * Constructor for the event task.","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"zhonghan721"},"content":"     * @param description The description of the event task.","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"zhonghan721"},"content":"     * @param from The start time/date of the event task.","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"zhonghan721"},"content":"     * @param to The end time/date of the event task.","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"zhonghan721"},"content":"    public Event(String description, String from, String to) throws DukeException {","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"zhonghan721"},"content":"        super(description.strip());","lastModifiedDate":"2023-08-20"},{"lineNumber":27,"author":{"gitId":"zhonghan721"},"content":"        try {","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"zhonghan721"},"content":"            this.from \u003d LocalDate.parse(from.strip());","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"zhonghan721"},"content":"            this.to \u003d LocalDate.parse(to.strip());","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"zhonghan721"},"content":"            if (this.to.isBefore(this.from)) {","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"zhonghan721"},"content":"                throw new DukeException(\"\\tThe end date is before the start date!\");","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"zhonghan721"},"content":"            }","lastModifiedDate":"2023-08-27"},{"lineNumber":33,"author":{"gitId":"zhonghan721"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-27"},{"lineNumber":34,"author":{"gitId":"zhonghan721"},"content":"            throw new DukeException(\"\\tThe date is invalid!\");","lastModifiedDate":"2023-08-27"},{"lineNumber":35,"author":{"gitId":"zhonghan721"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":36,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":37,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":38,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"zhonghan721"},"content":"     * Constructor for the event task.","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"zhonghan721"},"content":"     * @param bool The completion status of the event task.","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"zhonghan721"},"content":"     * @param description The description of the event task.","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"zhonghan721"},"content":"    public Event(String bool, String description, String from, String to) {","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"zhonghan721"},"content":"        super(description.strip());","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"zhonghan721"},"content":"        this.from \u003d LocalDate.parse(from.strip());","lastModifiedDate":"2023-08-27"},{"lineNumber":47,"author":{"gitId":"zhonghan721"},"content":"        this.to \u003d LocalDate.parse(to.strip());","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"zhonghan721"},"content":"        if (Integer.parseInt(bool) \u003d\u003d 1) {","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"zhonghan721"},"content":"            this.isDone \u003d true;","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"zhonghan721"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":53,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":54,"author":{"gitId":"zhonghan721"},"content":"     * Returns the string representation of the event task.","lastModifiedDate":"2023-08-21"},{"lineNumber":55,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":56,"author":{"gitId":"zhonghan721"},"content":"     * @return A string comprising the symbol, status,","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"zhonghan721"},"content":"     *      description, start and end time/date of the event task.","lastModifiedDate":"2023-08-21"},{"lineNumber":58,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":59,"author":{"gitId":"zhonghan721"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":60,"author":{"gitId":"zhonghan721"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":61,"author":{"gitId":"zhonghan721"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + this.getFrom() + \" to: \" + this.getTo() + \")\";","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":63,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":65,"author":{"gitId":"zhonghan721"},"content":"     * Returns the string representing the task to be written in the disk.","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"zhonghan721"},"content":"     * @return The string describing this task to be written in the disk.","lastModifiedDate":"2023-08-27"},{"lineNumber":68,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":69,"author":{"gitId":"zhonghan721"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"zhonghan721"},"content":"    public String toStringForFile() {","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"zhonghan721"},"content":"        return \"E | \" + super.toStringForFile() + \" | \" + this.from + \" | \" + this.to;","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":73,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":74,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"zhonghan721"},"content":"     * Returns the string with formatted start date of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"zhonghan721"},"content":"     * @return The string with formatted start date of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"zhonghan721"},"content":"    protected String getFrom() {","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"zhonghan721"},"content":"        return this.from.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2023-08-27"},{"lineNumber":81,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":82,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":83,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"zhonghan721"},"content":"     * Returns the string with formatted end date of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"zhonghan721"},"content":"     * @return The string with formatted end date of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"zhonghan721"},"content":"    protected String getTo() {","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"zhonghan721"},"content":"        return this.to.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2023-08-27"},{"lineNumber":90,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":91,"author":{"gitId":"zhonghan721"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"zhonghan721":91}},{"path":"src/main/java/zean/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhonghan721"},"content":"package zean.task;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"zhonghan721"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"zhonghan721"},"content":" * The class that represents a task.","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"zhonghan721"},"content":" *","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"zhonghan721"},"content":" * @author Zhong Han","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"zhonghan721"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"zhonghan721"},"content":"public class Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"zhonghan721"},"content":"    protected final String description;","lastModifiedDate":"2023-08-27"},{"lineNumber":10,"author":{"gitId":"zhonghan721"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-27"},{"lineNumber":11,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"zhonghan721"},"content":"     * Constructor for the task.","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"zhonghan721"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"zhonghan721"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-20"},{"lineNumber":18,"author":{"gitId":"zhonghan721"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-20"},{"lineNumber":19,"author":{"gitId":"zhonghan721"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-20"},{"lineNumber":20,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":21,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":22,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"zhonghan721"},"content":"     * Returns \"X\" if the task is marked as done, and \" \" otherwise.","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"zhonghan721"},"content":"     * @return A string indicating the status of the task.","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"zhonghan721"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-20"},{"lineNumber":28,"author":{"gitId":"zhonghan721"},"content":"        return isDone ? \"X\" : \" \";","lastModifiedDate":"2023-08-20"},{"lineNumber":29,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":30,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":31,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"zhonghan721"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"zhonghan721"},"content":"     * @return The string to be printed on the console.","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"zhonghan721"},"content":"    public String markTaskDone() {","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"zhonghan721"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-20"},{"lineNumber":38,"author":{"gitId":"zhonghan721"},"content":"        return \"\\t  \" + this;","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":40,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":41,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"zhonghan721"},"content":"     * Marks the task as not done.","lastModifiedDate":"2023-08-21"},{"lineNumber":43,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"zhonghan721"},"content":"     * @return The string to be printed on the console.","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":46,"author":{"gitId":"zhonghan721"},"content":"    public String markTaskNotDone() {","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"zhonghan721"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-20"},{"lineNumber":48,"author":{"gitId":"zhonghan721"},"content":"        return \"\\t  \" + this;","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":50,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":51,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":52,"author":{"gitId":"zhonghan721"},"content":"     * Returns a string representation of the task.","lastModifiedDate":"2023-08-21"},{"lineNumber":53,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":54,"author":{"gitId":"zhonghan721"},"content":"     * @return A string comprising the status and description of the task.","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":56,"author":{"gitId":"zhonghan721"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":57,"author":{"gitId":"zhonghan721"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":58,"author":{"gitId":"zhonghan721"},"content":"        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);","lastModifiedDate":"2023-08-20"},{"lineNumber":59,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":60,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":61,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":62,"author":{"gitId":"zhonghan721"},"content":"     * Returns the string representing the task to be written in the disk.","lastModifiedDate":"2023-08-27"},{"lineNumber":63,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":64,"author":{"gitId":"zhonghan721"},"content":"     * @return The string describing the task to be written in the disk.","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":66,"author":{"gitId":"zhonghan721"},"content":"    public String toStringForFile() {","lastModifiedDate":"2023-08-27"},{"lineNumber":67,"author":{"gitId":"zhonghan721"},"content":"        if (this.isDone) {","lastModifiedDate":"2023-08-27"},{"lineNumber":68,"author":{"gitId":"zhonghan721"},"content":"            return \"1 | \" + this.description;","lastModifiedDate":"2023-08-27"},{"lineNumber":69,"author":{"gitId":"zhonghan721"},"content":"        } else {","lastModifiedDate":"2023-08-27"},{"lineNumber":70,"author":{"gitId":"zhonghan721"},"content":"            return \"0 | \" + this.description;","lastModifiedDate":"2023-08-27"},{"lineNumber":71,"author":{"gitId":"zhonghan721"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":72,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":73,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"zhonghan721"},"content":"     * Returns the description of the task.","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"zhonghan721"},"content":"     * @return The description of the task.","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"zhonghan721"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"zhonghan721"},"content":"        return this.description;","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"zhonghan721"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"zhonghan721":82}},{"path":"src/main/java/zean/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhonghan721"},"content":"package zean.task;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"zhonghan721"},"content":"/**","lastModifiedDate":"2023-08-21"},{"lineNumber":4,"author":{"gitId":"zhonghan721"},"content":" * The class that represents a todo task.","lastModifiedDate":"2023-08-21"},{"lineNumber":5,"author":{"gitId":"zhonghan721"},"content":" *","lastModifiedDate":"2023-08-21"},{"lineNumber":6,"author":{"gitId":"zhonghan721"},"content":" * @author Zhong Han","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"zhonghan721"},"content":" */","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"zhonghan721"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"zhonghan721"},"content":"     * Constructor for the todo task.","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"zhonghan721"},"content":"     * @param description The description of the todo task.","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"zhonghan721"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-08-20"},{"lineNumber":16,"author":{"gitId":"zhonghan721"},"content":"        super(description.strip());","lastModifiedDate":"2023-08-20"},{"lineNumber":17,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":18,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-20"},{"lineNumber":19,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"zhonghan721"},"content":"     * Constructor for the todo task.","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"zhonghan721"},"content":"     * @param bool The completion status of the todo task.","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"zhonghan721"},"content":"     * @param description The description of the todo task.","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"zhonghan721"},"content":"    public Todo(String bool, String description) {","lastModifiedDate":"2023-08-27"},{"lineNumber":26,"author":{"gitId":"zhonghan721"},"content":"        super(description.strip());","lastModifiedDate":"2023-08-27"},{"lineNumber":27,"author":{"gitId":"zhonghan721"},"content":"        if (Integer.parseInt(bool) \u003d\u003d 1) {","lastModifiedDate":"2023-08-27"},{"lineNumber":28,"author":{"gitId":"zhonghan721"},"content":"            this.isDone \u003d true;","lastModifiedDate":"2023-08-27"},{"lineNumber":29,"author":{"gitId":"zhonghan721"},"content":"        }","lastModifiedDate":"2023-08-27"},{"lineNumber":30,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":31,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":32,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"zhonghan721"},"content":"     * Returns the string representation of the todo task.","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"zhonghan721"},"content":"     * @return S string comprising the symbol, status","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"zhonghan721"},"content":"     *      and the description of the todo task.","lastModifiedDate":"2023-08-21"},{"lineNumber":37,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"zhonghan721"},"content":"    @Override","lastModifiedDate":"2023-08-20"},{"lineNumber":39,"author":{"gitId":"zhonghan721"},"content":"    public String toString() {","lastModifiedDate":"2023-08-20"},{"lineNumber":40,"author":{"gitId":"zhonghan721"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-20"},{"lineNumber":41,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-20"},{"lineNumber":42,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":43,"author":{"gitId":"zhonghan721"},"content":"    /**","lastModifiedDate":"2023-08-27"},{"lineNumber":44,"author":{"gitId":"zhonghan721"},"content":"     * Returns the string representing the task to be written in the disk.","lastModifiedDate":"2023-08-27"},{"lineNumber":45,"author":{"gitId":"zhonghan721"},"content":"     *","lastModifiedDate":"2023-08-27"},{"lineNumber":46,"author":{"gitId":"zhonghan721"},"content":"     * @return The string describing the task to be written in the disk.","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"zhonghan721"},"content":"     */","lastModifiedDate":"2023-08-27"},{"lineNumber":48,"author":{"gitId":"zhonghan721"},"content":"    @Override","lastModifiedDate":"2023-08-27"},{"lineNumber":49,"author":{"gitId":"zhonghan721"},"content":"    public String toStringForFile() {","lastModifiedDate":"2023-08-27"},{"lineNumber":50,"author":{"gitId":"zhonghan721"},"content":"        return \"T | \" + super.toStringForFile();","lastModifiedDate":"2023-08-27"},{"lineNumber":51,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-27"},{"lineNumber":52,"author":{"gitId":"zhonghan721"},"content":"}","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"zhonghan721":52}},{"path":"src/test/java/zean/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhonghan721"},"content":"package zean;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"zhonghan721"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"zhonghan721"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"zhonghan721"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"zhonghan721"},"content":"import zean.exception.DukeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"zhonghan721"},"content":"public class ParserTest {","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"zhonghan721"},"content":"    public void invalidCommandTest1() {","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"zhonghan721"},"content":"                Parser.parse(\"hey\", new TaskList()));","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tOOPS!!! I\u0027m sorry, but I don\u0027t understand what that means :-(\",","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"zhonghan721"},"content":"    public void invalidCommandTest2() {","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"zhonghan721"},"content":"                Parser.parse(\"kjshdkafhk\", new TaskList()));","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tOOPS!!! I\u0027m sorry, but I don\u0027t understand what that means :-(\",","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"zhonghan721"},"content":"    public void invalidMarkTest1() {","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"zhonghan721"},"content":"                Parser.parse(\"mark \", new TaskList()));","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tPlease provide the task number.\",","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"zhonghan721"},"content":"    public void invalidMarkTest2() {","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"zhonghan721"},"content":"                Parser.parse(\"mark aas\", new TaskList()));","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tPlease provide a valid task number.\",","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"zhonghan721"},"content":"    public void invalidUnmarkTest1() {","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"zhonghan721"},"content":"                Parser.parse(\"unmark \", new TaskList()));","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tPlease provide the task number.\",","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"zhonghan721"},"content":"    public void invalidUnmarkTest2() {","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"zhonghan721"},"content":"                Parser.parse(\"unmark aas\", new TaskList()));","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tPlease provide a valid task number.\",","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"zhonghan721"},"content":"    public void invalidDeleteTest1() {","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"zhonghan721"},"content":"                Parser.parse(\"delete \", new TaskList()));","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tPlease provide the task number.\",","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"zhonghan721"},"content":"    public void invalidDeleteTest2() {","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"zhonghan721"},"content":"                Parser.parse(\"delete aas\", new TaskList()));","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tPlease provide a valid task number.\",","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"zhonghan721"},"content":"    public void emptyTodoTest() {","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"zhonghan721"},"content":"                Parser.parse(\"todo \", new TaskList()));","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tHmm, the description of a todo cannot be empty :(\",","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"zhonghan721"},"content":"    public void emptyDeadlineDescriptionTest1() {","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"zhonghan721"},"content":"                Parser.parse(\"deadline /by 2\", new TaskList()));","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tHmm, the description of a deadline cannot be empty :(\",","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"zhonghan721"},"content":"    public void emptyDeadlineDescriptionTest2() {","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"zhonghan721"},"content":"                Parser.parse(\"deadline \", new TaskList()));","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tOOPS!!! You forgot to specify the deadline.\\n\\tUse \\\"/by\\\" to do so.\",","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":100,"author":{"gitId":"zhonghan721"},"content":"    public void emptyDeadlineDateTest() {","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":102,"author":{"gitId":"zhonghan721"},"content":"                Parser.parse(\"deadline abc /by\", new TaskList()));","lastModifiedDate":"2023-08-29"},{"lineNumber":103,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tOOPS!!! You forgot to specify the deadline.\",","lastModifiedDate":"2023-08-29"},{"lineNumber":104,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":105,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":106,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":107,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":108,"author":{"gitId":"zhonghan721"},"content":"    public void wrongDeadlineDateTest() {","lastModifiedDate":"2023-08-29"},{"lineNumber":109,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":110,"author":{"gitId":"zhonghan721"},"content":"                Parser.parse(\"deadline abc /by abc\", new TaskList()));","lastModifiedDate":"2023-08-29"},{"lineNumber":111,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tHmm, I don\u0027t understand the date. Use this format: YYYY-MM-DD\",","lastModifiedDate":"2023-08-29"},{"lineNumber":112,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":113,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":114,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":115,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":116,"author":{"gitId":"zhonghan721"},"content":"    public void emptyEventDescriptionTest1() {","lastModifiedDate":"2023-08-29"},{"lineNumber":117,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":118,"author":{"gitId":"zhonghan721"},"content":"                Parser.parse(\"event /to 2\", new TaskList()));","lastModifiedDate":"2023-08-29"},{"lineNumber":119,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tOOPS!!! You forgot to specify the starting date.\"","lastModifiedDate":"2023-08-29"},{"lineNumber":120,"author":{"gitId":"zhonghan721"},"content":"                        + \"\\n\\tUse \\\"/from\\\" to do so.\",","lastModifiedDate":"2023-08-29"},{"lineNumber":121,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":122,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":123,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":124,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":125,"author":{"gitId":"zhonghan721"},"content":"    public void emptyEventDescriptionTest2() {","lastModifiedDate":"2023-08-29"},{"lineNumber":126,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":127,"author":{"gitId":"zhonghan721"},"content":"                Parser.parse(\"event /from \", new TaskList()));","lastModifiedDate":"2023-08-29"},{"lineNumber":128,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tOOPS!!! You forgot to specify the ending date.\\n\\tUse \\\"/to\\\" to do so.\",","lastModifiedDate":"2023-08-29"},{"lineNumber":129,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":130,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":131,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":132,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":133,"author":{"gitId":"zhonghan721"},"content":"    public void emptyEventDescriptionTest3() {","lastModifiedDate":"2023-08-29"},{"lineNumber":134,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":135,"author":{"gitId":"zhonghan721"},"content":"                Parser.parse(\"event /from /to\", new TaskList()));","lastModifiedDate":"2023-08-29"},{"lineNumber":136,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tHmm, the description of an event cannot be empty :(\",","lastModifiedDate":"2023-08-29"},{"lineNumber":137,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":138,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":139,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":140,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":141,"author":{"gitId":"zhonghan721"},"content":"    public void emptyEventDescriptionTest4() {","lastModifiedDate":"2023-08-29"},{"lineNumber":142,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":143,"author":{"gitId":"zhonghan721"},"content":"                Parser.parse(\"event /from 2023-08-29 /to\", new TaskList()));","lastModifiedDate":"2023-08-29"},{"lineNumber":144,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tHmm, the description of an event cannot be empty :(\",","lastModifiedDate":"2023-08-29"},{"lineNumber":145,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":146,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":147,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":148,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":149,"author":{"gitId":"zhonghan721"},"content":"    public void emptyEventDescriptionTest5() {","lastModifiedDate":"2023-08-29"},{"lineNumber":150,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":151,"author":{"gitId":"zhonghan721"},"content":"                Parser.parse(\"event /from /to 2023-08-29\", new TaskList()));","lastModifiedDate":"2023-08-29"},{"lineNumber":152,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tHmm, the description of an event cannot be empty :(\",","lastModifiedDate":"2023-08-29"},{"lineNumber":153,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":154,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":155,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":156,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":157,"author":{"gitId":"zhonghan721"},"content":"    public void emptyEventDescriptionTest6() {","lastModifiedDate":"2023-08-29"},{"lineNumber":158,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":159,"author":{"gitId":"zhonghan721"},"content":"                Parser.parse(\"event /from 2023-08-28 /to 2023-08-29\", new TaskList()));","lastModifiedDate":"2023-08-29"},{"lineNumber":160,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tHmm, the description of an event cannot be empty :(\",","lastModifiedDate":"2023-08-29"},{"lineNumber":161,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":162,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":163,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":164,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":165,"author":{"gitId":"zhonghan721"},"content":"    public void emptyEventDateTest1() {","lastModifiedDate":"2023-08-29"},{"lineNumber":166,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":167,"author":{"gitId":"zhonghan721"},"content":"                Parser.parse(\"event afgd /from /to\", new TaskList()));","lastModifiedDate":"2023-08-29"},{"lineNumber":168,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tOOPS!!! You forgot to specify the starting date.\",","lastModifiedDate":"2023-08-29"},{"lineNumber":169,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":170,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":171,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":172,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":173,"author":{"gitId":"zhonghan721"},"content":"    public void emptyEventDateTest2() {","lastModifiedDate":"2023-08-29"},{"lineNumber":174,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":175,"author":{"gitId":"zhonghan721"},"content":"                Parser.parse(\"event afgd /from /to 2023-08-29\", new TaskList()));","lastModifiedDate":"2023-08-29"},{"lineNumber":176,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tOOPS!!! You forgot to specify the starting date.\",","lastModifiedDate":"2023-08-29"},{"lineNumber":177,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":178,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":179,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":180,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":181,"author":{"gitId":"zhonghan721"},"content":"    public void emptyEventDateTest3() {","lastModifiedDate":"2023-08-29"},{"lineNumber":182,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":183,"author":{"gitId":"zhonghan721"},"content":"                Parser.parse(\"event afgd /from 2023-08-29 /to\", new TaskList()));","lastModifiedDate":"2023-08-29"},{"lineNumber":184,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tOOPS!!! You forgot to specify the ending date.\",","lastModifiedDate":"2023-08-29"},{"lineNumber":185,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":186,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":187,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":188,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":189,"author":{"gitId":"zhonghan721"},"content":"    public void wrongEventDateTest1() {","lastModifiedDate":"2023-08-29"},{"lineNumber":190,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":191,"author":{"gitId":"zhonghan721"},"content":"                Parser.parse(\"event afsdf /from a /to a\", new TaskList()));","lastModifiedDate":"2023-08-29"},{"lineNumber":192,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tHmm, I don\u0027t understand the date. Use this format: YYYY-MM-DD\",","lastModifiedDate":"2023-08-29"},{"lineNumber":193,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":194,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":195,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":196,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":197,"author":{"gitId":"zhonghan721"},"content":"    public void wrongEventDateTest2() {","lastModifiedDate":"2023-08-29"},{"lineNumber":198,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":199,"author":{"gitId":"zhonghan721"},"content":"                Parser.parse(\"event afsdf /from 2023-08-29 /to a\", new TaskList()));","lastModifiedDate":"2023-08-29"},{"lineNumber":200,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tHmm, I don\u0027t understand the date. Use this format: YYYY-MM-DD\",","lastModifiedDate":"2023-08-29"},{"lineNumber":201,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":202,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":203,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":204,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":205,"author":{"gitId":"zhonghan721"},"content":"    public void wrongEventDateTest3() {","lastModifiedDate":"2023-08-29"},{"lineNumber":206,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":207,"author":{"gitId":"zhonghan721"},"content":"                Parser.parse(\"event afsdf /from g /to 2023-08-29\", new TaskList()));","lastModifiedDate":"2023-08-29"},{"lineNumber":208,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tHmm, I don\u0027t understand the date. Use this format: YYYY-MM-DD\",","lastModifiedDate":"2023-08-29"},{"lineNumber":209,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":210,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":211,"author":{"gitId":"zhonghan721"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"zhonghan721":211}},{"path":"src/test/java/zean/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhonghan721"},"content":"package zean;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"zhonghan721"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"zhonghan721"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"zhonghan721"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"zhonghan721"},"content":"import zean.exception.DukeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"zhonghan721"},"content":"public class TaskListTest {","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"zhonghan721"},"content":"    public void invalidTaskIndexTest1() {","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"zhonghan721"},"content":"                new TaskList(new StorageStub()).markTaskDone(1));","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tHmm, this task does not exist :|\",","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"zhonghan721"},"content":"    public void invalidTaskIndexTest2() {","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"zhonghan721"},"content":"                new TaskList(new StorageStub()).markTaskDone(-1));","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tHmm, this task does not exist :|\",","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"zhonghan721"},"content":"    public void invalidTaskIndexTest3() {","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"zhonghan721"},"content":"                new TaskList(new StorageStub()).markTaskDone(0));","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tHmm, this task does not exist :|\",","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"zhonghan721"},"content":"    public void invalidTaskIndexTest4() {","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"zhonghan721"},"content":"                new TaskList(new StorageStub()).markTaskNotDone(1));","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tHmm, this task does not exist :|\",","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"zhonghan721"},"content":"    public void invalidTaskIndexTest5() {","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"zhonghan721"},"content":"                new TaskList(new StorageStub()).markTaskNotDone(-1));","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tHmm, this task does not exist :|\",","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"zhonghan721"},"content":"    public void invalidTaskIndexTest6() {","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"zhonghan721"},"content":"                new TaskList(new StorageStub()).markTaskNotDone(0));","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tHmm, this task does not exist :|\",","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"zhonghan721"},"content":"    public void invalidTaskIndexTest7() {","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"zhonghan721"},"content":"                new TaskList(new StorageStub()).deleteTask(1));","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tHmm, this task does not exist :|\",","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"zhonghan721"},"content":"    public void invalidTaskIndexTest8() {","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"zhonghan721"},"content":"                new TaskList(new StorageStub()).deleteTask(-1));","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tHmm, this task does not exist :|\",","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"zhonghan721"},"content":"    public void invalidTaskIndexTest9() {","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"zhonghan721"},"content":"                new TaskList(new StorageStub()).deleteTask(0));","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tHmm, this task does not exist :|\",","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"zhonghan721"},"content":"                exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"zhonghan721"},"content":"    public void printAddTaskTest1() {","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tGot it. I\u0027ve added this task:\\n\\t  \"","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"zhonghan721"},"content":"                        + \"[T][ ] read book\\n\"","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"zhonghan721"},"content":"                        + \"\\tNow you have 1 task in the list.\",","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"zhonghan721"},"content":"                new TaskList(new StorageStub()).add(\"read book\"));","lastModifiedDate":"2023-08-30"},{"lineNumber":90,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":91,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"zhonghan721"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"zhonghan721":92}},{"path":"src/test/java/zean/task/DeadlineTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhonghan721"},"content":"package zean.task;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"zhonghan721"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"zhonghan721"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"zhonghan721"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"zhonghan721"},"content":"import zean.exception.DukeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"zhonghan721"},"content":"public class DeadlineTest {","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"zhonghan721"},"content":"    public void invalidDateTest1() {","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"zhonghan721"},"content":"                new Deadline(\"invalid date\", \"2023-02-29\"));","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tThe date is invalid!\", exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"zhonghan721"},"content":"    public void invalidDateTest2() {","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"zhonghan721"},"content":"                new Deadline(\"invalid date\", \"2023-13-29\"));","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tThe date is invalid!\", exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"zhonghan721"},"content":"    public void validDeadlineFormatTest1() {","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"zhonghan721"},"content":"        Deadline deadline \u003d new Deadline(\"test\", \"2023-09-29\");","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"Sep 29 2023\", deadline.getDeadline());","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"zhonghan721"},"content":"    public void validDeadlineFormatTest2() {","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"zhonghan721"},"content":"        Deadline deadline \u003d new Deadline(\"test\", \"2024-02-29\");","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"Feb 29 2024\", deadline.getDeadline());","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"zhonghan721"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"zhonghan721":36}},{"path":"src/test/java/zean/task/EventTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"zhonghan721"},"content":"package zean.task;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"zhonghan721"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"zhonghan721"},"content":"import static org.junit.jupiter.api.Assertions.assertThrows;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"zhonghan721"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"zhonghan721"},"content":"import zean.exception.DukeException;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"zhonghan721"},"content":"public class EventTest {","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"zhonghan721"},"content":"    public void invalidFromDateTest1() {","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"zhonghan721"},"content":"                new Event(\"invalid from date\", \"2023-02-29\", \"2023-03-01\"));","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tThe date is invalid!\", exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"zhonghan721"},"content":"    public void invalidFromDateTest2() {","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"zhonghan721"},"content":"                new Event(\"invalid from date\", \"2023-13-13\", \"2024-03-01\"));","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tThe date is invalid!\", exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"zhonghan721"},"content":"    public void invalidToDateTest1() {","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"zhonghan721"},"content":"                new Event(\"invalid to date\", \"2023-02-28\", \"2023-02-29\"));","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tThe date is invalid!\", exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"zhonghan721"},"content":"    public void invalidToDateTest2() {","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"zhonghan721"},"content":"                new Event(\"invalid to date\", \"2023-02-28\", \"2023-32-29\"));","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tThe date is invalid!\", exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"zhonghan721"},"content":"    public void endBeforeStartDateTest1() {","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"zhonghan721"},"content":"                new Event(\"end before start date\", \"2023-02-28\", \"2023-01-29\"));","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tThe end date is before the start date!\", exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"zhonghan721"},"content":"    public void endBeforeStartDateTest2() {","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"zhonghan721"},"content":"                new Event(\"end before start date\", \"2024-01-28\", \"2023-01-29\"));","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tThe end date is before the start date!\", exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"zhonghan721"},"content":"    public void endBeforeStartDateTest3() {","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"zhonghan721"},"content":"        Exception exception \u003d assertThrows(DukeException.class, () -\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"zhonghan721"},"content":"                new Event(\"end before start date\", \"2023-08-29\", \"2023-08-20\"));","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"\\tThe end date is before the start date!\", exception.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"zhonghan721"},"content":"    public void validFromFormatTest1() {","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"zhonghan721"},"content":"        Event event \u003d new Event(\"test\", \"2023-09-29\", \"2023-09-30\");","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"Sep 29 2023\", event.getFrom());","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"zhonghan721"},"content":"    public void validFromFormatTest2() {","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"zhonghan721"},"content":"        Event event \u003d new Event(\"test\", \"2024-02-29\", \"2024-09-30\");","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"Feb 29 2024\", event.getFrom());","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"zhonghan721"},"content":"    public void validToFormatTest1() {","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"zhonghan721"},"content":"        Event event \u003d new Event(\"test\", \"2023-09-29\", \"2023-09-30\");","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"Sep 30 2023\", event.getTo());","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"zhonghan721"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"zhonghan721"},"content":"    public void validToFormatTest2() {","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"zhonghan721"},"content":"        Event event \u003d new Event(\"test\", \"2023-09-29\", \"2024-02-29\");","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"zhonghan721"},"content":"        assertEquals(\"Feb 29 2024\", event.getTo());","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"zhonghan721"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"zhonghan721"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"zhonghan721":83}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"zhonghan721"},"content":"todo borrow book","lastModifiedDate":"2023-08-20"},{"lineNumber":2,"author":{"gitId":"zhonghan721"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":3,"author":{"gitId":"zhonghan721"},"content":"deadline return book /by 2023-08-31","lastModifiedDate":"2023-08-27"},{"lineNumber":4,"author":{"gitId":"zhonghan721"},"content":"event project meeting /from 2023-08-30 /to 2023-08-31","lastModifiedDate":"2023-08-27"},{"lineNumber":5,"author":{"gitId":"zhonghan721"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":6,"author":{"gitId":"zhonghan721"},"content":"mark 1","lastModifiedDate":"2023-08-20"},{"lineNumber":7,"author":{"gitId":"zhonghan721"},"content":"mark 3","lastModifiedDate":"2023-08-20"},{"lineNumber":8,"author":{"gitId":"zhonghan721"},"content":"unmark 3","lastModifiedDate":"2023-08-20"},{"lineNumber":9,"author":{"gitId":"zhonghan721"},"content":"mark 2","lastModifiedDate":"2023-08-20"},{"lineNumber":10,"author":{"gitId":"zhonghan721"},"content":"list","lastModifiedDate":"2023-08-20"},{"lineNumber":11,"author":{"gitId":"zhonghan721"},"content":"todo","lastModifiedDate":"2023-08-20"},{"lineNumber":12,"author":{"gitId":"zhonghan721"},"content":"blah","lastModifiedDate":"2023-08-20"},{"lineNumber":13,"author":{"gitId":"zhonghan721"},"content":"todo join sports club","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"zhonghan721"},"content":"mark 4","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"zhonghan721"},"content":"delete 3","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"zhonghan721"},"content":"bye","lastModifiedDate":"2023-08-20"}],"authorContributionMap":{"zhonghan721":16}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"zhonghan721"},"content":"java -classpath ..\\bin zean.Zean \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"zhonghan721":1}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"zhonghan721"},"content":"# delete data from previous run","lastModifiedDate":"2023-08-27"},{"lineNumber":16,"author":{"gitId":"zhonghan721"},"content":"if [ -e \"./data/zean.txt\" ]","lastModifiedDate":"2023-08-27"},{"lineNumber":17,"author":{"gitId":"zhonghan721"},"content":"then","lastModifiedDate":"2023-08-27"},{"lineNumber":18,"author":{"gitId":"zhonghan721"},"content":"    rm data/zean.txt","lastModifiedDate":"2023-08-27"},{"lineNumber":19,"author":{"gitId":"zhonghan721"},"content":"fi","lastModifiedDate":"2023-08-27"},{"lineNumber":20,"author":{"gitId":"zhonghan721"},"content":"","lastModifiedDate":"2023-08-27"},{"lineNumber":21,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"zhonghan721"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin/zean ../src/main/java/zean/*.java","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"zhonghan721"},"content":"java -classpath ../bin zean/Zean \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-28"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":36,"zhonghan721":8}}]
