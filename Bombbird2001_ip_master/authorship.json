[{"path":"src/main/java/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bombbird2001"},"content":"public enum Command {","lastModifiedDate":"2023-08-23"},{"lineNumber":2,"author":{"gitId":"Bombbird2001"},"content":"    BYE,","lastModifiedDate":"2023-08-23"},{"lineNumber":3,"author":{"gitId":"Bombbird2001"},"content":"    LIST,","lastModifiedDate":"2023-08-23"},{"lineNumber":4,"author":{"gitId":"Bombbird2001"},"content":"    MARK,","lastModifiedDate":"2023-08-23"},{"lineNumber":5,"author":{"gitId":"Bombbird2001"},"content":"    UNMARK,","lastModifiedDate":"2023-08-23"},{"lineNumber":6,"author":{"gitId":"Bombbird2001"},"content":"    TODO,","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"Bombbird2001"},"content":"    DEADLINE,","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"Bombbird2001"},"content":"    EVENT,","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"Bombbird2001"},"content":"    DELETE","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"Bombbird2001"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"Bombbird2001":10}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bombbird2001"},"content":"import exceptions.EmptyTasksException;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"Bombbird2001"},"content":"import exceptions.InvalidCommandException;","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"Bombbird2001"},"content":"import exceptions.ShibaException;","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"Bombbird2001"},"content":"import filehandler.DataSaverLoader;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"Bombbird2001"},"content":"import tasks.DeadlineTask;","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"Bombbird2001"},"content":"import tasks.EventTask;","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"Bombbird2001"},"content":"import tasks.ShibaTask;","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"Bombbird2001"},"content":"import tasks.TodoTask;","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"Bombbird2001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"Bombbird2001"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-21"},{"lineNumber":12,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":14,"author":{"gitId":"Bombbird2001"},"content":"    private static final String HORZ_LINE \u003d \"____________________________________________________________\";","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"Bombbird2001"},"content":"    private static final String BOT_NAME \u003d \"SHIBA-BOT\";","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"Bombbird2001"},"content":"    private static final ArrayList\u003cShibaTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":20,"author":{"gitId":"Bombbird2001"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"Bombbird2001"},"content":"            tasks.addAll(DataSaverLoader.readSavedTasks());","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"Bombbird2001"},"content":"        } catch (ShibaException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"Bombbird2001"},"content":"            printException(e);","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"Bombbird2001"},"content":"        printGreeting();","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"Bombbird2001"},"content":"        processUserInputs();","lastModifiedDate":"2023-08-21"},{"lineNumber":27,"author":{"gitId":"Bombbird2001"},"content":"        printBye();","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"Bombbird2001"},"content":"     * Prints the greeting message.","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"Bombbird2001"},"content":"    private static void printGreeting() {","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"Bombbird2001"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"Bombbird2001"},"content":"        printWithLevel2Indent(\"Woof! I\u0027m \" + BOT_NAME);","lastModifiedDate":"2023-08-22"},{"lineNumber":36,"author":{"gitId":"Bombbird2001"},"content":"        printWithLevel2Indent(\"What can I bark at you?\");","lastModifiedDate":"2023-08-22"},{"lineNumber":37,"author":{"gitId":"Bombbird2001"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":41,"author":{"gitId":"Bombbird2001"},"content":"     * Prints the bye message","lastModifiedDate":"2023-08-21"},{"lineNumber":42,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":43,"author":{"gitId":"Bombbird2001"},"content":"    private static void printBye() {","lastModifiedDate":"2023-08-21"},{"lineNumber":44,"author":{"gitId":"Bombbird2001"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-08-21"},{"lineNumber":45,"author":{"gitId":"Bombbird2001"},"content":"        printWithLevel2Indent(\"Woof! Hope to bark at you again soon!\");","lastModifiedDate":"2023-08-22"},{"lineNumber":46,"author":{"gitId":"Bombbird2001"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-08-22"},{"lineNumber":47,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":48,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":49,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":50,"author":{"gitId":"Bombbird2001"},"content":"     * Prints the unknown command message.","lastModifiedDate":"2023-08-22"},{"lineNumber":51,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":52,"author":{"gitId":"Bombbird2001"},"content":"    private static void printUnknownCommand() {","lastModifiedDate":"2023-08-22"},{"lineNumber":53,"author":{"gitId":"Bombbird2001"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-08-22"},{"lineNumber":54,"author":{"gitId":"Bombbird2001"},"content":"        printWithLevel2Indent(\"Woof! I don\u0027t know what that command is!\");","lastModifiedDate":"2023-08-22"},{"lineNumber":55,"author":{"gitId":"Bombbird2001"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-08-22"},{"lineNumber":56,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":57,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":58,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":59,"author":{"gitId":"Bombbird2001"},"content":"     * Prints the invalid command message.","lastModifiedDate":"2023-08-22"},{"lineNumber":60,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":61,"author":{"gitId":"Bombbird2001"},"content":"     * @param e The ShibaException whose message is to be printed.","lastModifiedDate":"2023-08-22"},{"lineNumber":62,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":63,"author":{"gitId":"Bombbird2001"},"content":"    private static void printException(ShibaException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":64,"author":{"gitId":"Bombbird2001"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-08-22"},{"lineNumber":65,"author":{"gitId":"Bombbird2001"},"content":"        printWithLevel2Indent(\"Woof! \" + e.getMessage());","lastModifiedDate":"2023-08-22"},{"lineNumber":66,"author":{"gitId":"Bombbird2001"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-08-21"},{"lineNumber":67,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":68,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":69,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":70,"author":{"gitId":"Bombbird2001"},"content":"     * Prints a horizontal line.","lastModifiedDate":"2023-08-21"},{"lineNumber":71,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":72,"author":{"gitId":"Bombbird2001"},"content":"    private static void printHorizontalLine() {","lastModifiedDate":"2023-08-21"},{"lineNumber":73,"author":{"gitId":"Bombbird2001"},"content":"        printWithLevel1Indent(HORZ_LINE);","lastModifiedDate":"2023-08-22"},{"lineNumber":74,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":75,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":76,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":77,"author":{"gitId":"Bombbird2001"},"content":"     * Prints the given message with a single tab indent (4 spaces).","lastModifiedDate":"2023-08-22"},{"lineNumber":78,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":79,"author":{"gitId":"Bombbird2001"},"content":"     * @param message The message to be printed.","lastModifiedDate":"2023-08-21"},{"lineNumber":80,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":81,"author":{"gitId":"Bombbird2001"},"content":"    private static void printWithLevel1Indent(String message) {","lastModifiedDate":"2023-08-22"},{"lineNumber":82,"author":{"gitId":"Bombbird2001"},"content":"        printWithIndents(message, 1, 0);","lastModifiedDate":"2023-08-22"},{"lineNumber":83,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":84,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":85,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":86,"author":{"gitId":"Bombbird2001"},"content":"     * Prints the given message with a single tab indent and 1 space.","lastModifiedDate":"2023-08-22"},{"lineNumber":87,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":88,"author":{"gitId":"Bombbird2001"},"content":"     * @param message The message to be printed.","lastModifiedDate":"2023-08-22"},{"lineNumber":89,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":90,"author":{"gitId":"Bombbird2001"},"content":"    private static void printWithLevel2Indent(String message) {","lastModifiedDate":"2023-08-22"},{"lineNumber":91,"author":{"gitId":"Bombbird2001"},"content":"        printWithIndents(message, 1, 1);","lastModifiedDate":"2023-08-22"},{"lineNumber":92,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":93,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":94,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":95,"author":{"gitId":"Bombbird2001"},"content":"     * Prints the given message with a single tab indent and 2 spaces.","lastModifiedDate":"2023-08-22"},{"lineNumber":96,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":97,"author":{"gitId":"Bombbird2001"},"content":"     * @param message The message to be printed.","lastModifiedDate":"2023-08-22"},{"lineNumber":98,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":99,"author":{"gitId":"Bombbird2001"},"content":"    private static void printWithLevel3Indent(String message) {","lastModifiedDate":"2023-08-22"},{"lineNumber":100,"author":{"gitId":"Bombbird2001"},"content":"        printWithIndents(message, 1, 3);","lastModifiedDate":"2023-08-22"},{"lineNumber":101,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":102,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":103,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":104,"author":{"gitId":"Bombbird2001"},"content":"     * Prints the given message with the given number of indents (spaces).","lastModifiedDate":"2023-08-22"},{"lineNumber":105,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":106,"author":{"gitId":"Bombbird2001"},"content":"     * @param message The message to be printed.","lastModifiedDate":"2023-08-22"},{"lineNumber":107,"author":{"gitId":"Bombbird2001"},"content":"     * @param tabs The number of tab indents (4 spaces each).","lastModifiedDate":"2023-08-22"},{"lineNumber":108,"author":{"gitId":"Bombbird2001"},"content":"     * @param spaces The number of spaces indents (in addition to tabs).","lastModifiedDate":"2023-08-22"},{"lineNumber":109,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":110,"author":{"gitId":"Bombbird2001"},"content":"    private static void printWithIndents(String message, int tabs, int spaces) {","lastModifiedDate":"2023-08-22"},{"lineNumber":111,"author":{"gitId":"Bombbird2001"},"content":"        System.out.println(\" \".repeat(tabs * 4 + spaces) + message);","lastModifiedDate":"2023-08-22"},{"lineNumber":112,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":113,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":114,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":115,"author":{"gitId":"Bombbird2001"},"content":"     * Continually processes user input until bye command is issued","lastModifiedDate":"2023-08-21"},{"lineNumber":116,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":117,"author":{"gitId":"Bombbird2001"},"content":"    private static void processUserInputs() {","lastModifiedDate":"2023-08-21"},{"lineNumber":118,"author":{"gitId":"Bombbird2001"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-21"},{"lineNumber":119,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":120,"author":{"gitId":"Bombbird2001"},"content":"        while (true) {","lastModifiedDate":"2023-08-21"},{"lineNumber":121,"author":{"gitId":"Bombbird2001"},"content":"            String input \u003d sc.nextLine().strip();","lastModifiedDate":"2023-08-22"},{"lineNumber":122,"author":{"gitId":"Bombbird2001"},"content":"            String[] cmd \u003d input.split(\" \");","lastModifiedDate":"2023-08-22"},{"lineNumber":123,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":124,"author":{"gitId":"Bombbird2001"},"content":"            try {","lastModifiedDate":"2023-08-22"},{"lineNumber":125,"author":{"gitId":"Bombbird2001"},"content":"                Command command \u003d Command.valueOf(cmd[0].toUpperCase());","lastModifiedDate":"2023-08-23"},{"lineNumber":126,"author":{"gitId":"Bombbird2001"},"content":"                switch (command) {","lastModifiedDate":"2023-08-23"},{"lineNumber":127,"author":{"gitId":"Bombbird2001"},"content":"                case LIST:","lastModifiedDate":"2023-08-23"},{"lineNumber":128,"author":{"gitId":"Bombbird2001"},"content":"                    listTasks();","lastModifiedDate":"2023-08-21"},{"lineNumber":129,"author":{"gitId":"Bombbird2001"},"content":"                    break;","lastModifiedDate":"2023-08-22"},{"lineNumber":130,"author":{"gitId":"Bombbird2001"},"content":"                case MARK:","lastModifiedDate":"2023-08-23"},{"lineNumber":131,"author":{"gitId":"Bombbird2001"},"content":"                    markTask(cmd);","lastModifiedDate":"2023-08-23"},{"lineNumber":132,"author":{"gitId":"Bombbird2001"},"content":"                    break;","lastModifiedDate":"2023-08-22"},{"lineNumber":133,"author":{"gitId":"Bombbird2001"},"content":"                case UNMARK:","lastModifiedDate":"2023-08-23"},{"lineNumber":134,"author":{"gitId":"Bombbird2001"},"content":"                    unmarkTask(cmd);","lastModifiedDate":"2023-08-23"},{"lineNumber":135,"author":{"gitId":"Bombbird2001"},"content":"                    break;","lastModifiedDate":"2023-08-23"},{"lineNumber":136,"author":{"gitId":"Bombbird2001"},"content":"                case TODO:","lastModifiedDate":"2023-08-23"},{"lineNumber":137,"author":{"gitId":"Bombbird2001"},"content":"                    addTodo(input);","lastModifiedDate":"2023-08-22"},{"lineNumber":138,"author":{"gitId":"Bombbird2001"},"content":"                    break;","lastModifiedDate":"2023-08-22"},{"lineNumber":139,"author":{"gitId":"Bombbird2001"},"content":"                case DEADLINE:","lastModifiedDate":"2023-08-23"},{"lineNumber":140,"author":{"gitId":"Bombbird2001"},"content":"                    addDeadline(input);","lastModifiedDate":"2023-08-22"},{"lineNumber":141,"author":{"gitId":"Bombbird2001"},"content":"                    break;","lastModifiedDate":"2023-08-22"},{"lineNumber":142,"author":{"gitId":"Bombbird2001"},"content":"                case EVENT:","lastModifiedDate":"2023-08-23"},{"lineNumber":143,"author":{"gitId":"Bombbird2001"},"content":"                    addEvent(input);","lastModifiedDate":"2023-08-22"},{"lineNumber":144,"author":{"gitId":"Bombbird2001"},"content":"                    break;","lastModifiedDate":"2023-08-22"},{"lineNumber":145,"author":{"gitId":"Bombbird2001"},"content":"                case DELETE:","lastModifiedDate":"2023-08-23"},{"lineNumber":146,"author":{"gitId":"Bombbird2001"},"content":"                    deleteTask(cmd);","lastModifiedDate":"2023-08-22"},{"lineNumber":147,"author":{"gitId":"Bombbird2001"},"content":"                    break;","lastModifiedDate":"2023-08-22"},{"lineNumber":148,"author":{"gitId":"Bombbird2001"},"content":"                case BYE:","lastModifiedDate":"2023-08-23"},{"lineNumber":149,"author":{"gitId":"Bombbird2001"},"content":"                    return;","lastModifiedDate":"2023-08-21"},{"lineNumber":150,"author":{"gitId":"Bombbird2001"},"content":"                }","lastModifiedDate":"2023-08-21"},{"lineNumber":151,"author":{"gitId":"Bombbird2001"},"content":"            } catch (ShibaException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":152,"author":{"gitId":"Bombbird2001"},"content":"                printException(e);","lastModifiedDate":"2023-08-22"},{"lineNumber":153,"author":{"gitId":"Bombbird2001"},"content":"            } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":154,"author":{"gitId":"Bombbird2001"},"content":"                printUnknownCommand();","lastModifiedDate":"2023-08-23"},{"lineNumber":155,"author":{"gitId":"Bombbird2001"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":156,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":157,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":158,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":159,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":160,"author":{"gitId":"Bombbird2001"},"content":"     * Adds a new task to the list.","lastModifiedDate":"2023-08-21"},{"lineNumber":161,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":162,"author":{"gitId":"Bombbird2001"},"content":"     * @param cmd The full command to be parsed into a task.","lastModifiedDate":"2023-08-22"},{"lineNumber":163,"author":{"gitId":"Bombbird2001"},"content":"     * @throws ShibaException If the command has missing parameters.","lastModifiedDate":"2023-08-22"},{"lineNumber":164,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":165,"author":{"gitId":"Bombbird2001"},"content":"    private static void addTodo(String cmd) throws ShibaException {","lastModifiedDate":"2023-08-22"},{"lineNumber":166,"author":{"gitId":"Bombbird2001"},"content":"        TodoTask todo \u003d TodoTask.fromCmd(cmd);","lastModifiedDate":"2023-08-22"},{"lineNumber":167,"author":{"gitId":"Bombbird2001"},"content":"        addTask(todo);","lastModifiedDate":"2023-08-22"},{"lineNumber":168,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":169,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":170,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":171,"author":{"gitId":"Bombbird2001"},"content":"     * Adds a new deadline task to the list.","lastModifiedDate":"2023-08-22"},{"lineNumber":172,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":173,"author":{"gitId":"Bombbird2001"},"content":"     * @param cmd The full command to be parsed into a task.","lastModifiedDate":"2023-08-22"},{"lineNumber":174,"author":{"gitId":"Bombbird2001"},"content":"     * @throws ShibaException If the command has missing parameters.","lastModifiedDate":"2023-08-22"},{"lineNumber":175,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":176,"author":{"gitId":"Bombbird2001"},"content":"    private static void addDeadline(String cmd) throws ShibaException {","lastModifiedDate":"2023-08-22"},{"lineNumber":177,"author":{"gitId":"Bombbird2001"},"content":"        DeadlineTask deadline \u003d DeadlineTask.fromCmd(cmd);","lastModifiedDate":"2023-08-22"},{"lineNumber":178,"author":{"gitId":"Bombbird2001"},"content":"        addTask(deadline);","lastModifiedDate":"2023-08-22"},{"lineNumber":179,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":180,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":181,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":182,"author":{"gitId":"Bombbird2001"},"content":"     * Adds a new event to the list.","lastModifiedDate":"2023-08-22"},{"lineNumber":183,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":184,"author":{"gitId":"Bombbird2001"},"content":"     * @param cmd The full command to be parsed into a task.","lastModifiedDate":"2023-08-22"},{"lineNumber":185,"author":{"gitId":"Bombbird2001"},"content":"     * @throws ShibaException If the command has missing parameters.","lastModifiedDate":"2023-08-22"},{"lineNumber":186,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":187,"author":{"gitId":"Bombbird2001"},"content":"    private static void addEvent(String cmd) throws ShibaException {","lastModifiedDate":"2023-08-22"},{"lineNumber":188,"author":{"gitId":"Bombbird2001"},"content":"        EventTask event \u003d EventTask.fromCmd(cmd);","lastModifiedDate":"2023-08-22"},{"lineNumber":189,"author":{"gitId":"Bombbird2001"},"content":"        addTask(event);","lastModifiedDate":"2023-08-22"},{"lineNumber":190,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":191,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":192,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":193,"author":{"gitId":"Bombbird2001"},"content":"     * Adds a task to the list.","lastModifiedDate":"2023-08-22"},{"lineNumber":194,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":195,"author":{"gitId":"Bombbird2001"},"content":"     * @param task The task to be added.","lastModifiedDate":"2023-08-21"},{"lineNumber":196,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":197,"author":{"gitId":"Bombbird2001"},"content":"    private static void addTask(ShibaTask task) {","lastModifiedDate":"2023-08-22"},{"lineNumber":198,"author":{"gitId":"Bombbird2001"},"content":"        tasks.add(task);","lastModifiedDate":"2023-08-22"},{"lineNumber":199,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":200,"author":{"gitId":"Bombbird2001"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-08-21"},{"lineNumber":201,"author":{"gitId":"Bombbird2001"},"content":"        printWithLevel2Indent(\"Woof! I\u0027ve added this task:\");","lastModifiedDate":"2023-08-22"},{"lineNumber":202,"author":{"gitId":"Bombbird2001"},"content":"        printWithLevel3Indent(task.toString());","lastModifiedDate":"2023-08-22"},{"lineNumber":203,"author":{"gitId":"Bombbird2001"},"content":"        String taskWord \u003d tasks.size() \u003d\u003d 1 ? \" task\" : \" tasks\";","lastModifiedDate":"2023-08-22"},{"lineNumber":204,"author":{"gitId":"Bombbird2001"},"content":"        printWithLevel2Indent(\"You now have \" + tasks.size() + taskWord + \" in the list. Now gimme some treats.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":205,"author":{"gitId":"Bombbird2001"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-08-21"},{"lineNumber":206,"author":{"gitId":"Bombbird2001"},"content":"        saveAllTasks();","lastModifiedDate":"2023-08-26"},{"lineNumber":207,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":208,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":209,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-21"},{"lineNumber":210,"author":{"gitId":"Bombbird2001"},"content":"     * Checks if the task number is valid.","lastModifiedDate":"2023-08-22"},{"lineNumber":211,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":212,"author":{"gitId":"Bombbird2001"},"content":"     * @param cmd The command parameters, split by spaces.","lastModifiedDate":"2023-08-22"},{"lineNumber":213,"author":{"gitId":"Bombbird2001"},"content":"     * @throws ShibaException If the task number is missing, invalid, or there are no tasks in the list.","lastModifiedDate":"2023-08-22"},{"lineNumber":214,"author":{"gitId":"Bombbird2001"},"content":"     * @return The task number if valid.","lastModifiedDate":"2023-08-22"},{"lineNumber":215,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-21"},{"lineNumber":216,"author":{"gitId":"Bombbird2001"},"content":"    private static int checkTaskNumber(String[] cmd) throws ShibaException {","lastModifiedDate":"2023-08-22"},{"lineNumber":217,"author":{"gitId":"Bombbird2001"},"content":"        if (cmd.length \u003c 2) {","lastModifiedDate":"2023-08-22"},{"lineNumber":218,"author":{"gitId":"Bombbird2001"},"content":"            throw new InvalidCommandException(\"Please specify a task number!\");","lastModifiedDate":"2023-08-22"},{"lineNumber":219,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":220,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":221,"author":{"gitId":"Bombbird2001"},"content":"        try {","lastModifiedDate":"2023-08-22"},{"lineNumber":222,"author":{"gitId":"Bombbird2001"},"content":"            int taskNumber \u003d Integer.parseInt(cmd[1]);","lastModifiedDate":"2023-08-22"},{"lineNumber":223,"author":{"gitId":"Bombbird2001"},"content":"            if (taskNumber \u003c 1 || taskNumber \u003e tasks.size()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":224,"author":{"gitId":"Bombbird2001"},"content":"                if (taskNumber \u003e tasks.size() \u0026\u0026 tasks.isEmpty()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":225,"author":{"gitId":"Bombbird2001"},"content":"                    throw new EmptyTasksException();","lastModifiedDate":"2023-08-22"},{"lineNumber":226,"author":{"gitId":"Bombbird2001"},"content":"                }","lastModifiedDate":"2023-08-22"},{"lineNumber":227,"author":{"gitId":"Bombbird2001"},"content":"                throw new InvalidCommandException(\"Please specify a valid task number!\");","lastModifiedDate":"2023-08-22"},{"lineNumber":228,"author":{"gitId":"Bombbird2001"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":229,"author":{"gitId":"Bombbird2001"},"content":"            return taskNumber;","lastModifiedDate":"2023-08-22"},{"lineNumber":230,"author":{"gitId":"Bombbird2001"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":231,"author":{"gitId":"Bombbird2001"},"content":"            throw new InvalidCommandException(\"Invalid task number! Please enter a positive integer.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":232,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-21"},{"lineNumber":233,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":234,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":235,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":236,"author":{"gitId":"Bombbird2001"},"content":"     * Deletes a task from the list.","lastModifiedDate":"2023-08-22"},{"lineNumber":237,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":238,"author":{"gitId":"Bombbird2001"},"content":"     * @param cmd The command parameters, split by spaces.","lastModifiedDate":"2023-08-22"},{"lineNumber":239,"author":{"gitId":"Bombbird2001"},"content":"     * @throws ShibaException If the task number is missing or invalid.","lastModifiedDate":"2023-08-22"},{"lineNumber":240,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":241,"author":{"gitId":"Bombbird2001"},"content":"    private static void deleteTask(String[] cmd) throws ShibaException {","lastModifiedDate":"2023-08-22"},{"lineNumber":242,"author":{"gitId":"Bombbird2001"},"content":"        int taskNumber \u003d checkTaskNumber(cmd);","lastModifiedDate":"2023-08-22"},{"lineNumber":243,"author":{"gitId":"Bombbird2001"},"content":"        ShibaTask task \u003d tasks.remove(taskNumber - 1);","lastModifiedDate":"2023-08-22"},{"lineNumber":244,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":245,"author":{"gitId":"Bombbird2001"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-08-22"},{"lineNumber":246,"author":{"gitId":"Bombbird2001"},"content":"        printWithLevel2Indent(\"Woof! I\u0027ve deleted this task:\");","lastModifiedDate":"2023-08-22"},{"lineNumber":247,"author":{"gitId":"Bombbird2001"},"content":"        printWithLevel3Indent(task.toString());","lastModifiedDate":"2023-08-22"},{"lineNumber":248,"author":{"gitId":"Bombbird2001"},"content":"        String taskWord \u003d tasks.size() \u003d\u003d 1 ? \" task\" : \" tasks\";","lastModifiedDate":"2023-08-22"},{"lineNumber":249,"author":{"gitId":"Bombbird2001"},"content":"        printWithLevel2Indent(\"You now have \" + tasks.size() + taskWord + \" in the list. Some headpats please?\");","lastModifiedDate":"2023-08-22"},{"lineNumber":250,"author":{"gitId":"Bombbird2001"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-08-22"},{"lineNumber":251,"author":{"gitId":"Bombbird2001"},"content":"        saveAllTasks();","lastModifiedDate":"2023-08-26"},{"lineNumber":252,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":253,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":254,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":255,"author":{"gitId":"Bombbird2001"},"content":"     * Lists all the tasks in the list.","lastModifiedDate":"2023-08-22"},{"lineNumber":256,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":257,"author":{"gitId":"Bombbird2001"},"content":"    private static void listTasks() {","lastModifiedDate":"2023-08-22"},{"lineNumber":258,"author":{"gitId":"Bombbird2001"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-08-22"},{"lineNumber":259,"author":{"gitId":"Bombbird2001"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-08-22"},{"lineNumber":260,"author":{"gitId":"Bombbird2001"},"content":"            printWithLevel2Indent((i + 1) + \".\" + tasks.get(i));","lastModifiedDate":"2023-08-22"},{"lineNumber":261,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":262,"author":{"gitId":"Bombbird2001"},"content":"        if (tasks.isEmpty()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":263,"author":{"gitId":"Bombbird2001"},"content":"            printWithLevel2Indent(\"Woof! You have no tasks in the list - go browse some Reddit!\");","lastModifiedDate":"2023-08-22"},{"lineNumber":264,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":265,"author":{"gitId":"Bombbird2001"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-08-22"},{"lineNumber":266,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":267,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":268,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":269,"author":{"gitId":"Bombbird2001"},"content":"     * Performs actions to mark a task based on the input command parameters","lastModifiedDate":"2023-08-23"},{"lineNumber":270,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":271,"author":{"gitId":"Bombbird2001"},"content":"     * @param cmd Input command parameters, split by spaces.","lastModifiedDate":"2023-08-22"},{"lineNumber":272,"author":{"gitId":"Bombbird2001"},"content":"     * @throws ShibaException If the task number is missing or invalid.","lastModifiedDate":"2023-08-22"},{"lineNumber":273,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":274,"author":{"gitId":"Bombbird2001"},"content":"    private static void markTask(String[] cmd) throws ShibaException {","lastModifiedDate":"2023-08-23"},{"lineNumber":275,"author":{"gitId":"Bombbird2001"},"content":"        int taskNumber \u003d checkTaskNumber(cmd);","lastModifiedDate":"2023-08-22"},{"lineNumber":276,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":277,"author":{"gitId":"Bombbird2001"},"content":"        ShibaTask task \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2023-08-22"},{"lineNumber":278,"author":{"gitId":"Bombbird2001"},"content":"        boolean res \u003d task.markDone();","lastModifiedDate":"2023-08-22"},{"lineNumber":279,"author":{"gitId":"Bombbird2001"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-08-22"},{"lineNumber":280,"author":{"gitId":"Bombbird2001"},"content":"        if (res) {","lastModifiedDate":"2023-08-22"},{"lineNumber":281,"author":{"gitId":"Bombbird2001"},"content":"            printWithLevel2Indent(\"Woof! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-08-22"},{"lineNumber":282,"author":{"gitId":"Bombbird2001"},"content":"        } else {","lastModifiedDate":"2023-08-22"},{"lineNumber":283,"author":{"gitId":"Bombbird2001"},"content":"            printWithLevel2Indent(\"Woof! This task is already done!\");","lastModifiedDate":"2023-08-22"},{"lineNumber":284,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":285,"author":{"gitId":"Bombbird2001"},"content":"        printWithLevel3Indent(task.toString());","lastModifiedDate":"2023-08-22"},{"lineNumber":286,"author":{"gitId":"Bombbird2001"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-08-22"},{"lineNumber":287,"author":{"gitId":"Bombbird2001"},"content":"        saveAllTasks();","lastModifiedDate":"2023-08-26"},{"lineNumber":288,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":289,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":290,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-23"},{"lineNumber":291,"author":{"gitId":"Bombbird2001"},"content":"     * Performs actions to unmark a task based on the input command parameters","lastModifiedDate":"2023-08-23"},{"lineNumber":292,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":293,"author":{"gitId":"Bombbird2001"},"content":"     * @param cmd Input command parameters, split by spaces.","lastModifiedDate":"2023-08-23"},{"lineNumber":294,"author":{"gitId":"Bombbird2001"},"content":"     * @throws ShibaException If the task number is missing or invalid.","lastModifiedDate":"2023-08-23"},{"lineNumber":295,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-23"},{"lineNumber":296,"author":{"gitId":"Bombbird2001"},"content":"    private static void unmarkTask(String[] cmd) throws ShibaException {","lastModifiedDate":"2023-08-23"},{"lineNumber":297,"author":{"gitId":"Bombbird2001"},"content":"        int taskNumber \u003d checkTaskNumber(cmd);","lastModifiedDate":"2023-08-23"},{"lineNumber":298,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":299,"author":{"gitId":"Bombbird2001"},"content":"        ShibaTask task \u003d tasks.get(taskNumber - 1);","lastModifiedDate":"2023-08-23"},{"lineNumber":300,"author":{"gitId":"Bombbird2001"},"content":"        boolean res \u003d task.markNotDone();","lastModifiedDate":"2023-08-22"},{"lineNumber":301,"author":{"gitId":"Bombbird2001"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-08-22"},{"lineNumber":302,"author":{"gitId":"Bombbird2001"},"content":"        if (res) {","lastModifiedDate":"2023-08-22"},{"lineNumber":303,"author":{"gitId":"Bombbird2001"},"content":"            printWithLevel2Indent(\"Woof! I\u0027ve marked this task as not done yet:\");","lastModifiedDate":"2023-08-22"},{"lineNumber":304,"author":{"gitId":"Bombbird2001"},"content":"        } else {","lastModifiedDate":"2023-08-22"},{"lineNumber":305,"author":{"gitId":"Bombbird2001"},"content":"            printWithLevel2Indent(\"Woof! You have not done this task yet!\");","lastModifiedDate":"2023-08-22"},{"lineNumber":306,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":307,"author":{"gitId":"Bombbird2001"},"content":"        printWithLevel3Indent(task.toString());","lastModifiedDate":"2023-08-22"},{"lineNumber":308,"author":{"gitId":"Bombbird2001"},"content":"        printHorizontalLine();","lastModifiedDate":"2023-08-22"},{"lineNumber":309,"author":{"gitId":"Bombbird2001"},"content":"        saveAllTasks();","lastModifiedDate":"2023-08-26"},{"lineNumber":310,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":311,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":312,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":313,"author":{"gitId":"Bombbird2001"},"content":"     * Saves all tasks to disk.","lastModifiedDate":"2023-08-26"},{"lineNumber":314,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":315,"author":{"gitId":"Bombbird2001"},"content":"    private static void saveAllTasks() {","lastModifiedDate":"2023-08-26"},{"lineNumber":316,"author":{"gitId":"Bombbird2001"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":317,"author":{"gitId":"Bombbird2001"},"content":"            DataSaverLoader.saveTasks(tasks);","lastModifiedDate":"2023-08-26"},{"lineNumber":318,"author":{"gitId":"Bombbird2001"},"content":"        } catch (ShibaException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":319,"author":{"gitId":"Bombbird2001"},"content":"            printException(e);","lastModifiedDate":"2023-08-26"},{"lineNumber":320,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":321,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":322,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"-":5,"Bombbird2001":317}},{"path":"src/main/java/datetimeformats/DateOptionalTime.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bombbird2001"},"content":"package datetimeformats;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"Bombbird2001"},"content":"import exceptions.InvalidCommandException;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"Bombbird2001"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"Bombbird2001"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"Bombbird2001"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"Bombbird2001"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"Bombbird2001"},"content":"public class DateOptionalTime {","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"Bombbird2001"},"content":"    private LocalDate date;","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"Bombbird2001"},"content":"    private LocalDateTime dateTime;","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"Bombbird2001"},"content":"    public DateOptionalTime(String dateOptionalTime) throws InvalidCommandException {","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"Bombbird2001"},"content":"        // Try with the default ISO format first","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"Bombbird2001"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"Bombbird2001"},"content":"            dateTime \u003d LocalDateTime.parse(dateOptionalTime);","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"Bombbird2001"},"content":"            return;","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"Bombbird2001"},"content":"        } catch (DateTimeParseException ignored) {}","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"Bombbird2001"},"content":"        // Try with the T removed","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"Bombbird2001"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"Bombbird2001"},"content":"            dateTime \u003d LocalDateTime.parse(dateOptionalTime, DateTimeFormatter.ofPattern(\"yyyy-MM-dd HH:mm\"));","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"Bombbird2001"},"content":"            return;","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"Bombbird2001"},"content":"        } catch (DateTimeParseException ignored) {}","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"Bombbird2001"},"content":"        // Try with default ISo date only format","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"Bombbird2001"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"Bombbird2001"},"content":"            date \u003d LocalDate.parse(dateOptionalTime);","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"Bombbird2001"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"Bombbird2001"},"content":"            throw new InvalidCommandException(\"Invalid date format! Date must be in the format YYYY-MM-DD or YYYY-MM-DD HH:mm.\");","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"Bombbird2001"},"content":"     * Gets a readable string representation (day month year hour min am/pm)","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"Bombbird2001"},"content":"     * of a LocalDateTime object for display.","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"Bombbird2001"},"content":"     * @return The string representation of the DateOptionalTime object.","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"Bombbird2001"},"content":"    public String getDisplayRepr() {","lastModifiedDate":"2023-08-26"},{"lineNumber":42,"author":{"gitId":"Bombbird2001"},"content":"        if (dateTime !\u003d null) {","lastModifiedDate":"2023-08-26"},{"lineNumber":43,"author":{"gitId":"Bombbird2001"},"content":"            return dateTime.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy hh:mma\"));","lastModifiedDate":"2023-08-26"},{"lineNumber":44,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":45,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":46,"author":{"gitId":"Bombbird2001"},"content":"        return date.format(DateTimeFormatter.ofPattern(\"dd LLL yyyy\"));","lastModifiedDate":"2023-08-26"},{"lineNumber":47,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":48,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":49,"author":{"gitId":"Bombbird2001"},"content":"    @Override","lastModifiedDate":"2023-08-26"},{"lineNumber":50,"author":{"gitId":"Bombbird2001"},"content":"    public String toString() {","lastModifiedDate":"2023-08-26"},{"lineNumber":51,"author":{"gitId":"Bombbird2001"},"content":"        if (dateTime !\u003d null) {","lastModifiedDate":"2023-08-26"},{"lineNumber":52,"author":{"gitId":"Bombbird2001"},"content":"            return dateTime.toString();","lastModifiedDate":"2023-08-26"},{"lineNumber":53,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":54,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":55,"author":{"gitId":"Bombbird2001"},"content":"        return date.toString();","lastModifiedDate":"2023-08-26"},{"lineNumber":56,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":57,"author":{"gitId":"Bombbird2001"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"Bombbird2001":57}},{"path":"src/main/java/exceptions/EmptyTasksException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bombbird2001"},"content":"package exceptions;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"Bombbird2001"},"content":"public class EmptyTasksException extends ShibaException {","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"Bombbird2001"},"content":"    public EmptyTasksException() {","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"Bombbird2001"},"content":"        super(\"You don\u0027t have any tasks yet!\");","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"Bombbird2001"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Bombbird2001":7}},{"path":"src/main/java/exceptions/InvalidCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bombbird2001"},"content":"package exceptions;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"Bombbird2001"},"content":"public class InvalidCommandException extends ShibaException {","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"Bombbird2001"},"content":"    public InvalidCommandException(String msg) {","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"Bombbird2001"},"content":"        super(msg);","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"Bombbird2001"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Bombbird2001":7}},{"path":"src/main/java/exceptions/ShibaException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bombbird2001"},"content":"package exceptions;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"Bombbird2001"},"content":"public class ShibaException extends Exception {","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"Bombbird2001"},"content":"    public ShibaException(String message) {","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"Bombbird2001"},"content":"        super(message);","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"Bombbird2001"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Bombbird2001":7}},{"path":"src/main/java/filehandler/DataSaverLoader.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bombbird2001"},"content":"package filehandler;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"Bombbird2001"},"content":"import exceptions.ShibaException;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"Bombbird2001"},"content":"import parsers.SpaceSeparatedValuesParser;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"Bombbird2001"},"content":"import tasks.ShibaTask;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"Bombbird2001"},"content":"import java.io.File;","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"Bombbird2001"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"Bombbird2001"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"Bombbird2001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"Bombbird2001"},"content":"import java.util.List;","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"Bombbird2001"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"Bombbird2001"},"content":"public class DataSaverLoader {","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"Bombbird2001"},"content":"    private static final String FILE_PATH \u003d \"./shibaData/tasks.txt\";","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"Bombbird2001"},"content":"     * Saves the tasks to the disk, creating the file if it does not exist.","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"Bombbird2001"},"content":"     * @param tasks List of tasks to be saved.","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"Bombbird2001"},"content":"     * @throws ShibaException If there is an error saving the tasks.","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"Bombbird2001"},"content":"    public static void saveTasks(List\u003cShibaTask\u003e tasks) throws ShibaException {","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"Bombbird2001"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"Bombbird2001"},"content":"            File file \u003d new File(FILE_PATH);","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"Bombbird2001"},"content":"            if (!file.exists()) {","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"Bombbird2001"},"content":"                file.getParentFile().mkdirs();","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"Bombbird2001"},"content":"                file.createNewFile();","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"Bombbird2001"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"Bombbird2001"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"Bombbird2001"},"content":"            throw new ShibaException(\"Error creating save file!\");","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"Bombbird2001"},"content":"        try(FileWriter fw \u003d new FileWriter(FILE_PATH)) {","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"Bombbird2001"},"content":"            boolean firstLineWritten \u003d false;","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"Bombbird2001"},"content":"            for (ShibaTask task : tasks) {","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"Bombbird2001"},"content":"                if (firstLineWritten) {","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"Bombbird2001"},"content":"                    fw.write(\"\\n\");","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"Bombbird2001"},"content":"                }","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"Bombbird2001"},"content":"                fw.write(task.toSaveString());","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"Bombbird2001"},"content":"                firstLineWritten \u003d true;","lastModifiedDate":"2023-08-26"},{"lineNumber":42,"author":{"gitId":"Bombbird2001"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":43,"author":{"gitId":"Bombbird2001"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":44,"author":{"gitId":"Bombbird2001"},"content":"            throw new ShibaException(\"Error saving tasks to file!\");","lastModifiedDate":"2023-08-26"},{"lineNumber":45,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":46,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":47,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":48,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":49,"author":{"gitId":"Bombbird2001"},"content":"     * Reads the saved tasks from the disk.","lastModifiedDate":"2023-08-26"},{"lineNumber":50,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":51,"author":{"gitId":"Bombbird2001"},"content":"     * @return List of tasks read from the disk.","lastModifiedDate":"2023-08-26"},{"lineNumber":52,"author":{"gitId":"Bombbird2001"},"content":"     * @throws ShibaException If there is an error reading the tasks.","lastModifiedDate":"2023-08-26"},{"lineNumber":53,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":54,"author":{"gitId":"Bombbird2001"},"content":"    public static List\u003cShibaTask\u003e readSavedTasks() throws ShibaException {","lastModifiedDate":"2023-08-26"},{"lineNumber":55,"author":{"gitId":"Bombbird2001"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":56,"author":{"gitId":"Bombbird2001"},"content":"            File file \u003d new File(FILE_PATH);","lastModifiedDate":"2023-08-26"},{"lineNumber":57,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":58,"author":{"gitId":"Bombbird2001"},"content":"            ArrayList\u003cShibaTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-26"},{"lineNumber":59,"author":{"gitId":"Bombbird2001"},"content":"            if (!file.exists()) {","lastModifiedDate":"2023-08-26"},{"lineNumber":60,"author":{"gitId":"Bombbird2001"},"content":"                return tasks;","lastModifiedDate":"2023-08-26"},{"lineNumber":61,"author":{"gitId":"Bombbird2001"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":62,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":63,"author":{"gitId":"Bombbird2001"},"content":"            Scanner scanner \u003d new Scanner(file);","lastModifiedDate":"2023-08-26"},{"lineNumber":64,"author":{"gitId":"Bombbird2001"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-08-26"},{"lineNumber":65,"author":{"gitId":"Bombbird2001"},"content":"                String line \u003d scanner.nextLine();","lastModifiedDate":"2023-08-26"},{"lineNumber":66,"author":{"gitId":"Bombbird2001"},"content":"                ShibaTask taskParsed \u003d ShibaTask.fromSaveParams(SpaceSeparatedValuesParser.parse(line));","lastModifiedDate":"2023-08-26"},{"lineNumber":67,"author":{"gitId":"Bombbird2001"},"content":"                if (taskParsed !\u003d null) {","lastModifiedDate":"2023-08-26"},{"lineNumber":68,"author":{"gitId":"Bombbird2001"},"content":"                    tasks.add(taskParsed);","lastModifiedDate":"2023-08-26"},{"lineNumber":69,"author":{"gitId":"Bombbird2001"},"content":"                }","lastModifiedDate":"2023-08-26"},{"lineNumber":70,"author":{"gitId":"Bombbird2001"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":71,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":72,"author":{"gitId":"Bombbird2001"},"content":"            return tasks;","lastModifiedDate":"2023-08-26"},{"lineNumber":73,"author":{"gitId":"Bombbird2001"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":74,"author":{"gitId":"Bombbird2001"},"content":"            throw new ShibaException(\"Error reading tasks from file!\");","lastModifiedDate":"2023-08-26"},{"lineNumber":75,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":76,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":77,"author":{"gitId":"Bombbird2001"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"Bombbird2001":77}},{"path":"src/main/java/parsers/SpaceSeparatedValuesParser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bombbird2001"},"content":"package parsers;","lastModifiedDate":"2023-08-26"},{"lineNumber":2,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":3,"author":{"gitId":"Bombbird2001"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"Bombbird2001"},"content":"import java.util.List;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"Bombbird2001"},"content":"public class SpaceSeparatedValuesParser {","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"Bombbird2001"},"content":"     * Converts the given parameters into an escaped space-separated string.","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"Bombbird2001"},"content":"     * @param params Vararg array of parameters to be converted.","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"Bombbird2001"},"content":"     * @return A space-separated string of the given parameters.","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"Bombbird2001"},"content":"    public static String convert(String... params) {","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"Bombbird2001"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"Bombbird2001"},"content":"        for (String param : params) {","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"Bombbird2001"},"content":"            if (sb.length() \u003e 0) {","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"Bombbird2001"},"content":"                sb.append(\" \");","lastModifiedDate":"2023-08-26"},{"lineNumber":18,"author":{"gitId":"Bombbird2001"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"Bombbird2001"},"content":"            sb.append(param.replace(\" \", \"\\\\ \"));","lastModifiedDate":"2023-08-26"},{"lineNumber":20,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":21,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"Bombbird2001"},"content":"        return sb.toString();","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"Bombbird2001"},"content":"     * Parses the given space-separated string into a list of strings.","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"Bombbird2001"},"content":"     * @param line The space-separated string to be parsed.","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"Bombbird2001"},"content":"     * @return A list of strings parsed from the given space-separated string.","lastModifiedDate":"2023-08-26"},{"lineNumber":30,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":31,"author":{"gitId":"Bombbird2001"},"content":"    public static List\u003cString\u003e parse(String line) {","lastModifiedDate":"2023-08-26"},{"lineNumber":32,"author":{"gitId":"Bombbird2001"},"content":"        ArrayList\u003cString\u003e params \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-26"},{"lineNumber":33,"author":{"gitId":"Bombbird2001"},"content":"        StringBuilder sb \u003d new StringBuilder();","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"Bombbird2001"},"content":"        int index \u003d 0;","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"Bombbird2001"},"content":"        while (index \u003c line.length()) {","lastModifiedDate":"2023-08-26"},{"lineNumber":36,"author":{"gitId":"Bombbird2001"},"content":"            char c \u003d line.charAt(index);","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"Bombbird2001"},"content":"            if (c \u003d\u003d \u0027\\\\\u0027 \u0026\u0026 index \u003c line.length() - 1 \u0026\u0026 line.charAt(index + 1) \u003d\u003d \u0027 \u0027) {","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"Bombbird2001"},"content":"                sb.append(\u0027 \u0027);","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"Bombbird2001"},"content":"                index +\u003d 2;","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"Bombbird2001"},"content":"            } else if (c \u003d\u003d \u0027 \u0027) {","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"Bombbird2001"},"content":"                params.add(sb.toString());","lastModifiedDate":"2023-08-26"},{"lineNumber":42,"author":{"gitId":"Bombbird2001"},"content":"                sb.setLength(0);","lastModifiedDate":"2023-08-26"},{"lineNumber":43,"author":{"gitId":"Bombbird2001"},"content":"                index++;","lastModifiedDate":"2023-08-26"},{"lineNumber":44,"author":{"gitId":"Bombbird2001"},"content":"            } else {","lastModifiedDate":"2023-08-26"},{"lineNumber":45,"author":{"gitId":"Bombbird2001"},"content":"                sb.append(c);","lastModifiedDate":"2023-08-26"},{"lineNumber":46,"author":{"gitId":"Bombbird2001"},"content":"                index++;","lastModifiedDate":"2023-08-26"},{"lineNumber":47,"author":{"gitId":"Bombbird2001"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":48,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":49,"author":{"gitId":"Bombbird2001"},"content":"        if (sb.length() \u003e 0) {","lastModifiedDate":"2023-08-26"},{"lineNumber":50,"author":{"gitId":"Bombbird2001"},"content":"            params.add(sb.toString());","lastModifiedDate":"2023-08-26"},{"lineNumber":51,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":52,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":53,"author":{"gitId":"Bombbird2001"},"content":"        return params;","lastModifiedDate":"2023-08-26"},{"lineNumber":54,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":55,"author":{"gitId":"Bombbird2001"},"content":"}","lastModifiedDate":"2023-08-26"}],"authorContributionMap":{"Bombbird2001":55}},{"path":"src/main/java/tasks/DeadlineTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bombbird2001"},"content":"package tasks;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"Bombbird2001"},"content":"import datetimeformats.DateOptionalTime;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"Bombbird2001"},"content":"import exceptions.InvalidCommandException;","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"Bombbird2001"},"content":"import parsers.SpaceSeparatedValuesParser;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"Bombbird2001"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"Bombbird2001"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"Bombbird2001"},"content":"public class DeadlineTask extends ShibaTask {","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"Bombbird2001"},"content":"    private static final Pattern deadlineRegex \u003d Pattern.compile(\"(.+?) /by (.+)\");","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"Bombbird2001"},"content":"     * Parses a DeadlineTask from a command.","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"Bombbird2001"},"content":"     * @param cmd The command to be parsed.","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"Bombbird2001"},"content":"     * @return The DeadlineTask parsed from the command, or null if the command is invalid.","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"Bombbird2001"},"content":"     * @throws InvalidCommandException If the command is invalid.","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"Bombbird2001"},"content":"    public static DeadlineTask fromCmd(String cmd) throws InvalidCommandException {","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"Bombbird2001"},"content":"        String[] cmdSplit \u003d cmd.split(\" \", 2);","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"Bombbird2001"},"content":"        if (cmdSplit.length !\u003d 2) {","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"Bombbird2001"},"content":"            throw new InvalidCommandException(\"Deadline name should not be empty!\");","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"Bombbird2001"},"content":"        Matcher matcher1 \u003d deadlineRegex.matcher(cmdSplit[1]);","lastModifiedDate":"2023-08-22"},{"lineNumber":27,"author":{"gitId":"Bombbird2001"},"content":"        if (matcher1.find()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":28,"author":{"gitId":"Bombbird2001"},"content":"            return new DeadlineTask(matcher1.group(1), matcher1.group(2));","lastModifiedDate":"2023-08-22"},{"lineNumber":29,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":31,"author":{"gitId":"Bombbird2001"},"content":"        throw new InvalidCommandException(\"Invalid deadline format! Deadline name, /by parameter must be present and not empty.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":32,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":33,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":34,"author":{"gitId":"Bombbird2001"},"content":"    private final DateOptionalTime deadline;","lastModifiedDate":"2023-08-26"},{"lineNumber":35,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":36,"author":{"gitId":"Bombbird2001"},"content":"    public DeadlineTask(String name, String deadline) throws InvalidCommandException {","lastModifiedDate":"2023-08-26"},{"lineNumber":37,"author":{"gitId":"Bombbird2001"},"content":"        super(name, TaskType.DEADLINE);","lastModifiedDate":"2023-08-26"},{"lineNumber":38,"author":{"gitId":"Bombbird2001"},"content":"        this.deadline \u003d new DateOptionalTime(deadline);","lastModifiedDate":"2023-08-26"},{"lineNumber":39,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":40,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":41,"author":{"gitId":"Bombbird2001"},"content":"    @Override","lastModifiedDate":"2023-08-26"},{"lineNumber":42,"author":{"gitId":"Bombbird2001"},"content":"    public String toSaveString() {","lastModifiedDate":"2023-08-26"},{"lineNumber":43,"author":{"gitId":"Bombbird2001"},"content":"        return SpaceSeparatedValuesParser.convert(\"D\", isDone ? \"1\" : \"0\", name, deadline.toString());","lastModifiedDate":"2023-08-26"},{"lineNumber":44,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":45,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":46,"author":{"gitId":"Bombbird2001"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":47,"author":{"gitId":"Bombbird2001"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":48,"author":{"gitId":"Bombbird2001"},"content":"        return super.toString() + \" (by: \" + deadline.getDisplayRepr() + \")\";","lastModifiedDate":"2023-08-26"},{"lineNumber":49,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":50,"author":{"gitId":"Bombbird2001"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Bombbird2001":50}},{"path":"src/main/java/tasks/EventTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bombbird2001"},"content":"package tasks;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"Bombbird2001"},"content":"import datetimeformats.DateOptionalTime;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"Bombbird2001"},"content":"import exceptions.InvalidCommandException;","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"Bombbird2001"},"content":"import parsers.SpaceSeparatedValuesParser;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"Bombbird2001"},"content":"import java.util.regex.Matcher;","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"Bombbird2001"},"content":"import java.util.regex.Pattern;","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"Bombbird2001"},"content":"public class EventTask extends ShibaTask {","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"Bombbird2001"},"content":"    private static final Pattern option1Regex \u003d Pattern.compile(\"(.+?) /from (.+?) /to (.+)\");","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"Bombbird2001"},"content":"    private static final Pattern option2Regex \u003d Pattern.compile(\"(.+?) /to (.+?) /from (.+)\");","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"Bombbird2001"},"content":"     * Parses a EventTask from a command.","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"Bombbird2001"},"content":"     * @param cmd The command to be parsed.","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"Bombbird2001"},"content":"     * @return The EventTask parsed from the command, or null if the command is invalid.","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"Bombbird2001"},"content":"    public static EventTask fromCmd(String cmd) throws InvalidCommandException {","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"Bombbird2001"},"content":"        String[] cmdSplit \u003d cmd.split(\" \", 2);","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"Bombbird2001"},"content":"        if (cmdSplit.length !\u003d 2) {","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"Bombbird2001"},"content":"            throw new InvalidCommandException(\"Event name should not be empty!\");","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"Bombbird2001"},"content":"        Matcher matcher1 \u003d option1Regex.matcher(cmdSplit[1]);","lastModifiedDate":"2023-08-22"},{"lineNumber":27,"author":{"gitId":"Bombbird2001"},"content":"        if (matcher1.find()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":28,"author":{"gitId":"Bombbird2001"},"content":"            return new EventTask(matcher1.group(1), matcher1.group(2), matcher1.group(3));","lastModifiedDate":"2023-08-22"},{"lineNumber":29,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":31,"author":{"gitId":"Bombbird2001"},"content":"        Matcher matcher2 \u003d option2Regex.matcher(cmdSplit[1]);","lastModifiedDate":"2023-08-22"},{"lineNumber":32,"author":{"gitId":"Bombbird2001"},"content":"        if (matcher2.find()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":33,"author":{"gitId":"Bombbird2001"},"content":"            return new EventTask(matcher2.group(1), matcher2.group(3), matcher2.group(2));","lastModifiedDate":"2023-08-22"},{"lineNumber":34,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":35,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":36,"author":{"gitId":"Bombbird2001"},"content":"        throw new InvalidCommandException(\"Invalid event format! Event name, /from and /to parameters must be present and not empty.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":37,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":38,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":39,"author":{"gitId":"Bombbird2001"},"content":"    private final DateOptionalTime startTime;","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"Bombbird2001"},"content":"    private final DateOptionalTime endTime;","lastModifiedDate":"2023-08-26"},{"lineNumber":41,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":42,"author":{"gitId":"Bombbird2001"},"content":"    public EventTask(String name, String from, String to) throws InvalidCommandException {","lastModifiedDate":"2023-08-26"},{"lineNumber":43,"author":{"gitId":"Bombbird2001"},"content":"        super(name, TaskType.EVENT);","lastModifiedDate":"2023-08-26"},{"lineNumber":44,"author":{"gitId":"Bombbird2001"},"content":"        startTime \u003d new DateOptionalTime(from);","lastModifiedDate":"2023-08-26"},{"lineNumber":45,"author":{"gitId":"Bombbird2001"},"content":"        endTime \u003d new DateOptionalTime(to);","lastModifiedDate":"2023-08-26"},{"lineNumber":46,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":47,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":48,"author":{"gitId":"Bombbird2001"},"content":"    @Override","lastModifiedDate":"2023-08-26"},{"lineNumber":49,"author":{"gitId":"Bombbird2001"},"content":"    public String toSaveString() {","lastModifiedDate":"2023-08-26"},{"lineNumber":50,"author":{"gitId":"Bombbird2001"},"content":"        return SpaceSeparatedValuesParser.convert(\"E\", isDone ? \"1\" : \"0\", name,","lastModifiedDate":"2023-08-26"},{"lineNumber":51,"author":{"gitId":"Bombbird2001"},"content":"                startTime.toString(), endTime.toString());","lastModifiedDate":"2023-08-26"},{"lineNumber":52,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":53,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":54,"author":{"gitId":"Bombbird2001"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":55,"author":{"gitId":"Bombbird2001"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":56,"author":{"gitId":"Bombbird2001"},"content":"        return super.toString() + \" (from: \" + startTime.getDisplayRepr() + \" to: \"","lastModifiedDate":"2023-08-26"},{"lineNumber":57,"author":{"gitId":"Bombbird2001"},"content":"                + endTime.getDisplayRepr() + \")\";","lastModifiedDate":"2023-08-26"},{"lineNumber":58,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":59,"author":{"gitId":"Bombbird2001"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Bombbird2001":59}},{"path":"src/main/java/tasks/ShibaTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bombbird2001"},"content":"package tasks;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"Bombbird2001"},"content":"import exceptions.InvalidCommandException;","lastModifiedDate":"2023-08-26"},{"lineNumber":4,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"Bombbird2001"},"content":"import java.util.List;","lastModifiedDate":"2023-08-26"},{"lineNumber":6,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"Bombbird2001"},"content":"public abstract class ShibaTask {","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"Bombbird2001"},"content":"    protected enum TaskType {","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"Bombbird2001"},"content":"        TODO,","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"Bombbird2001"},"content":"        DEADLINE,","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"Bombbird2001"},"content":"        EVENT","lastModifiedDate":"2023-08-26"},{"lineNumber":12,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":13,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":14,"author":{"gitId":"Bombbird2001"},"content":"    protected final String name;","lastModifiedDate":"2023-08-26"},{"lineNumber":15,"author":{"gitId":"Bombbird2001"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-26"},{"lineNumber":16,"author":{"gitId":"Bombbird2001"},"content":"    private final TaskType type;","lastModifiedDate":"2023-08-26"},{"lineNumber":17,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"Bombbird2001"},"content":"    protected ShibaTask(String name, TaskType type) {","lastModifiedDate":"2023-08-26"},{"lineNumber":19,"author":{"gitId":"Bombbird2001"},"content":"        this.name \u003d name;","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"Bombbird2001"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"Bombbird2001"},"content":"        this.type \u003d type;","lastModifiedDate":"2023-08-26"},{"lineNumber":22,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"Bombbird2001"},"content":"     * Marks the task as done, if not already done.","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"Bombbird2001"},"content":"     * @return True if the task was not already done, else false.","lastModifiedDate":"2023-08-22"},{"lineNumber":28,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":29,"author":{"gitId":"Bombbird2001"},"content":"    public boolean markDone() {","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"Bombbird2001"},"content":"        if (isDone) {","lastModifiedDate":"2023-08-22"},{"lineNumber":31,"author":{"gitId":"Bombbird2001"},"content":"            return false;","lastModifiedDate":"2023-08-22"},{"lineNumber":32,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":33,"author":{"gitId":"Bombbird2001"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-08-22"},{"lineNumber":34,"author":{"gitId":"Bombbird2001"},"content":"        return true;","lastModifiedDate":"2023-08-22"},{"lineNumber":35,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":36,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":37,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":38,"author":{"gitId":"Bombbird2001"},"content":"     * Marks the task as not done, if already done.","lastModifiedDate":"2023-08-22"},{"lineNumber":39,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":40,"author":{"gitId":"Bombbird2001"},"content":"     * @return True if the task was already done, else false.","lastModifiedDate":"2023-08-22"},{"lineNumber":41,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":42,"author":{"gitId":"Bombbird2001"},"content":"    public boolean markNotDone() {","lastModifiedDate":"2023-08-22"},{"lineNumber":43,"author":{"gitId":"Bombbird2001"},"content":"        if (!isDone) {","lastModifiedDate":"2023-08-22"},{"lineNumber":44,"author":{"gitId":"Bombbird2001"},"content":"            return false;","lastModifiedDate":"2023-08-22"},{"lineNumber":45,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":46,"author":{"gitId":"Bombbird2001"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":47,"author":{"gitId":"Bombbird2001"},"content":"        return true;","lastModifiedDate":"2023-08-22"},{"lineNumber":48,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":49,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":50,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":51,"author":{"gitId":"Bombbird2001"},"content":"     * Gets the label in the form of [X] for the task type.","lastModifiedDate":"2023-08-26"},{"lineNumber":52,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":53,"author":{"gitId":"Bombbird2001"},"content":"     * @return The label for the task type.","lastModifiedDate":"2023-08-26"},{"lineNumber":54,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":55,"author":{"gitId":"Bombbird2001"},"content":"    private String getTaskLabel() {","lastModifiedDate":"2023-08-26"},{"lineNumber":56,"author":{"gitId":"Bombbird2001"},"content":"        switch (type) {","lastModifiedDate":"2023-08-26"},{"lineNumber":57,"author":{"gitId":"Bombbird2001"},"content":"        case TODO:","lastModifiedDate":"2023-08-26"},{"lineNumber":58,"author":{"gitId":"Bombbird2001"},"content":"            return \"[T]\";","lastModifiedDate":"2023-08-26"},{"lineNumber":59,"author":{"gitId":"Bombbird2001"},"content":"        case DEADLINE:","lastModifiedDate":"2023-08-26"},{"lineNumber":60,"author":{"gitId":"Bombbird2001"},"content":"            return \"[D]\";","lastModifiedDate":"2023-08-26"},{"lineNumber":61,"author":{"gitId":"Bombbird2001"},"content":"        case EVENT:","lastModifiedDate":"2023-08-26"},{"lineNumber":62,"author":{"gitId":"Bombbird2001"},"content":"            return \"[E]\";","lastModifiedDate":"2023-08-26"},{"lineNumber":63,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":64,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":65,"author":{"gitId":"Bombbird2001"},"content":"        return \"[?]\";","lastModifiedDate":"2023-08-26"},{"lineNumber":66,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":67,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":68,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":69,"author":{"gitId":"Bombbird2001"},"content":"     * Converts the task to a string to be saved to disk.","lastModifiedDate":"2023-08-26"},{"lineNumber":70,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":71,"author":{"gitId":"Bombbird2001"},"content":"     * @return A string representation of the task.","lastModifiedDate":"2023-08-26"},{"lineNumber":72,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":73,"author":{"gitId":"Bombbird2001"},"content":"    public abstract String toSaveString();","lastModifiedDate":"2023-08-26"},{"lineNumber":74,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":75,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-26"},{"lineNumber":76,"author":{"gitId":"Bombbird2001"},"content":"     * Parses a task from the provided string parameters.","lastModifiedDate":"2023-08-26"},{"lineNumber":77,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":78,"author":{"gitId":"Bombbird2001"},"content":"     * @param params List of string parameters to parse tasks from.","lastModifiedDate":"2023-08-26"},{"lineNumber":79,"author":{"gitId":"Bombbird2001"},"content":"     * @return The parsed task, or null if the task cannot be parsed from the provided","lastModifiedDate":"2023-08-26"},{"lineNumber":80,"author":{"gitId":"Bombbird2001"},"content":"     * parameters due to insufficient or incorrect parameters.","lastModifiedDate":"2023-08-26"},{"lineNumber":81,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-26"},{"lineNumber":82,"author":{"gitId":"Bombbird2001"},"content":"    public static ShibaTask fromSaveParams(List\u003cString\u003e params) {","lastModifiedDate":"2023-08-26"},{"lineNumber":83,"author":{"gitId":"Bombbird2001"},"content":"        if (params.size() \u003c 3) {","lastModifiedDate":"2023-08-26"},{"lineNumber":84,"author":{"gitId":"Bombbird2001"},"content":"            return null;","lastModifiedDate":"2023-08-26"},{"lineNumber":85,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":86,"author":{"gitId":"Bombbird2001"},"content":"        ShibaTask parsedTask;","lastModifiedDate":"2023-08-26"},{"lineNumber":87,"author":{"gitId":"Bombbird2001"},"content":"        boolean isDone \u003d params.get(1).equals(\"1\");","lastModifiedDate":"2023-08-26"},{"lineNumber":88,"author":{"gitId":"Bombbird2001"},"content":"        String name \u003d params.get(2);","lastModifiedDate":"2023-08-26"},{"lineNumber":89,"author":{"gitId":"Bombbird2001"},"content":"        try {","lastModifiedDate":"2023-08-26"},{"lineNumber":90,"author":{"gitId":"Bombbird2001"},"content":"            switch (params.get(0)) {","lastModifiedDate":"2023-08-26"},{"lineNumber":91,"author":{"gitId":"Bombbird2001"},"content":"            case \"T\":","lastModifiedDate":"2023-08-26"},{"lineNumber":92,"author":{"gitId":"Bombbird2001"},"content":"                parsedTask \u003d new TodoTask(name);","lastModifiedDate":"2023-08-26"},{"lineNumber":93,"author":{"gitId":"Bombbird2001"},"content":"                break;","lastModifiedDate":"2023-08-26"},{"lineNumber":94,"author":{"gitId":"Bombbird2001"},"content":"            case \"D\":","lastModifiedDate":"2023-08-26"},{"lineNumber":95,"author":{"gitId":"Bombbird2001"},"content":"                if (params.size() \u003c 4) {","lastModifiedDate":"2023-08-26"},{"lineNumber":96,"author":{"gitId":"Bombbird2001"},"content":"                    return null;","lastModifiedDate":"2023-08-26"},{"lineNumber":97,"author":{"gitId":"Bombbird2001"},"content":"                }","lastModifiedDate":"2023-08-26"},{"lineNumber":98,"author":{"gitId":"Bombbird2001"},"content":"                parsedTask \u003d new DeadlineTask(name, params.get(3));","lastModifiedDate":"2023-08-26"},{"lineNumber":99,"author":{"gitId":"Bombbird2001"},"content":"                break;","lastModifiedDate":"2023-08-26"},{"lineNumber":100,"author":{"gitId":"Bombbird2001"},"content":"            case \"E\":","lastModifiedDate":"2023-08-26"},{"lineNumber":101,"author":{"gitId":"Bombbird2001"},"content":"                if (params.size() \u003c 5) {","lastModifiedDate":"2023-08-26"},{"lineNumber":102,"author":{"gitId":"Bombbird2001"},"content":"                    return null;","lastModifiedDate":"2023-08-26"},{"lineNumber":103,"author":{"gitId":"Bombbird2001"},"content":"                }","lastModifiedDate":"2023-08-26"},{"lineNumber":104,"author":{"gitId":"Bombbird2001"},"content":"                parsedTask \u003d new EventTask(name, params.get(3), params.get(4));","lastModifiedDate":"2023-08-26"},{"lineNumber":105,"author":{"gitId":"Bombbird2001"},"content":"                break;","lastModifiedDate":"2023-08-26"},{"lineNumber":106,"author":{"gitId":"Bombbird2001"},"content":"            default:","lastModifiedDate":"2023-08-26"},{"lineNumber":107,"author":{"gitId":"Bombbird2001"},"content":"                return null;","lastModifiedDate":"2023-08-26"},{"lineNumber":108,"author":{"gitId":"Bombbird2001"},"content":"            }","lastModifiedDate":"2023-08-26"},{"lineNumber":109,"author":{"gitId":"Bombbird2001"},"content":"        } catch (InvalidCommandException e) {","lastModifiedDate":"2023-08-26"},{"lineNumber":110,"author":{"gitId":"Bombbird2001"},"content":"            return null;","lastModifiedDate":"2023-08-26"},{"lineNumber":111,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":112,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":113,"author":{"gitId":"Bombbird2001"},"content":"        if (isDone) {","lastModifiedDate":"2023-08-26"},{"lineNumber":114,"author":{"gitId":"Bombbird2001"},"content":"            parsedTask.markDone();","lastModifiedDate":"2023-08-26"},{"lineNumber":115,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-26"},{"lineNumber":116,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":117,"author":{"gitId":"Bombbird2001"},"content":"        return parsedTask;","lastModifiedDate":"2023-08-26"},{"lineNumber":118,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":119,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":120,"author":{"gitId":"Bombbird2001"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":121,"author":{"gitId":"Bombbird2001"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":122,"author":{"gitId":"Bombbird2001"},"content":"        return getTaskLabel() + \"[\" + (isDone ? \"X\" : \" \") + \"] \" + name;","lastModifiedDate":"2023-08-26"},{"lineNumber":123,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":124,"author":{"gitId":"Bombbird2001"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Bombbird2001":124}},{"path":"src/main/java/tasks/TodoTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Bombbird2001"},"content":"package tasks;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"Bombbird2001"},"content":"import exceptions.InvalidCommandException;","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"Bombbird2001"},"content":"import parsers.SpaceSeparatedValuesParser;","lastModifiedDate":"2023-08-26"},{"lineNumber":5,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"Bombbird2001"},"content":"public class TodoTask extends ShibaTask {","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"Bombbird2001"},"content":"    /**","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"Bombbird2001"},"content":"     * Parses a TodoTask from a command.","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"Bombbird2001"},"content":"     *","lastModifiedDate":"2023-08-26"},{"lineNumber":10,"author":{"gitId":"Bombbird2001"},"content":"     * @param cmd The command to be parsed.","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"Bombbird2001"},"content":"     * @return The TodoTask parsed from the command, or null if the command is invalid.","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"Bombbird2001"},"content":"     */","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"Bombbird2001"},"content":"    public static TodoTask fromCmd(String cmd) throws InvalidCommandException {","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"Bombbird2001"},"content":"        String[] cmdSplit \u003d cmd.split(\" \", 2);","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"Bombbird2001"},"content":"        if (cmdSplit.length !\u003d 2) {","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"Bombbird2001"},"content":"            throw new InvalidCommandException(\"Todo name should not be empty!\");","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"Bombbird2001"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"Bombbird2001"},"content":"        return new TodoTask(cmdSplit[1]);","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"Bombbird2001"},"content":"    public TodoTask(String name) {","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"Bombbird2001"},"content":"        super(name, TaskType.TODO);","lastModifiedDate":"2023-08-26"},{"lineNumber":24,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-26"},{"lineNumber":25,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":26,"author":{"gitId":"Bombbird2001"},"content":"    @Override","lastModifiedDate":"2023-08-26"},{"lineNumber":27,"author":{"gitId":"Bombbird2001"},"content":"    public String toSaveString() {","lastModifiedDate":"2023-08-26"},{"lineNumber":28,"author":{"gitId":"Bombbird2001"},"content":"        return SpaceSeparatedValuesParser.convert(\"T\", isDone ? \"1\" : \"0\", name);","lastModifiedDate":"2023-08-26"},{"lineNumber":29,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":31,"author":{"gitId":"Bombbird2001"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":32,"author":{"gitId":"Bombbird2001"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":33,"author":{"gitId":"Bombbird2001"},"content":"        return super.toString();","lastModifiedDate":"2023-08-26"},{"lineNumber":34,"author":{"gitId":"Bombbird2001"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":35,"author":{"gitId":"Bombbird2001"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Bombbird2001":35}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Bombbird2001"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"Bombbird2001"},"content":"delete 1","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"Bombbird2001"},"content":"todo Do tutorials","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"Bombbird2001"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"Bombbird2001"},"content":"deadline Prepare for CA1 /by 14 Sept","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"Bombbird2001"},"content":"deadline Prepare for CA1 /by 2023-09-14","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"Bombbird2001"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"Bombbird2001"},"content":"mark 1","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"Bombbird2001"},"content":"event VATSIM Ho Chih Minh - Singapore SeaLink /from 23 Sept 8pm /to 12am","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"Bombbird2001"},"content":"event VATSIM Ho Chih Minh - Singapore SeaLink /from 2023-09-23 20:00 /to 2023-09-24 00:00","lastModifiedDate":"2023-08-26"},{"lineNumber":11,"author":{"gitId":"Bombbird2001"},"content":"mark 2","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"Bombbird2001"},"content":"mark 2","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"Bombbird2001"},"content":"unmark 2","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"Bombbird2001"},"content":"unmark 3","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"Bombbird2001"},"content":"mark ierfgheiurh","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"Bombbird2001"},"content":"mark 0","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"Bombbird2001"},"content":"unmark 999","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"Bombbird2001"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"Bombbird2001"},"content":"some weird command","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"Bombbird2001"},"content":"todo","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"Bombbird2001"},"content":"deadline /by 14 Sept","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"Bombbird2001"},"content":"event Random event /from 2023-09-17 20:00","lastModifiedDate":"2023-08-26"},{"lineNumber":23,"author":{"gitId":"Bombbird2001"},"content":"delete -1","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"Bombbird2001"},"content":"delete 2","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"Bombbird2001"},"content":"bye","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Bombbird2001":25}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"Bombbird2001"},"content":"REM delete saved data folder","lastModifiedDate":"2023-08-26"},{"lineNumber":7,"author":{"gitId":"Bombbird2001"},"content":"if exist shibaData rmdir shibaData /s /q","lastModifiedDate":"2023-08-26"},{"lineNumber":8,"author":{"gitId":"Bombbird2001"},"content":"","lastModifiedDate":"2023-08-26"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"java -classpath ..\\bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":21,"Bombbird2001":3}}]
