[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"# Pooh project template","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the bear _Pooh_. Given below are instructions on how to use it.","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"Zjinnnn"},"content":"3. After that, locate the `src/main/java/Duke.java` file, right-click it, and choose `Run Pooh.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"Zjinnnn"},"content":"    .----------------.  .----------------.  .----------------.  .----------------. ","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"Zjinnnn"},"content":"   | .--------------. || .--------------. || .--------------. || .--------------. |","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"Zjinnnn"},"content":"   | |   ______     | || |     ____     | || |     ____     | || |  ____  ____  | |","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"Zjinnnn"},"content":"   | |  |_   __ \\   | || |   .\u0027    `.   | || |   .\u0027    `.   | || | |_   ||   _| | |","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"Zjinnnn"},"content":"   | |    | |__) |  | || |  /  .--.  \\  | || |  /  .--.  \\  | || |   | |__| |   | |","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"Zjinnnn"},"content":"   | |    |  ___/   | || |  | |    | |  | || |  | |    | |  | || |   |  __  |   | |","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"Zjinnnn"},"content":"   | |   _| |_      | || |  \\  `--\u0027  /  | || |  \\  `--\u0027  /  | || |  _| |  | |_  | |","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"Zjinnnn"},"content":"   | |  |_____|     | || |   `.____.\u0027   | || |   `.____.\u0027   | || | |____||____| | |","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"Zjinnnn"},"content":"   | |              | || |              | || |              | || |              | |","lastModifiedDate":"2023-08-22"},{"lineNumber":27,"author":{"gitId":"Zjinnnn"},"content":"   | \u0027--------------\u0027 || \u0027--------------\u0027 || \u0027--------------\u0027 || \u0027--------------\u0027 |","lastModifiedDate":"2023-08-22"},{"lineNumber":28,"author":{"gitId":"Zjinnnn"},"content":"   \u0027----------------\u0027  \u0027----------------\u0027  \u0027----------------\u0027  \u0027----------------\u0027","lastModifiedDate":"2023-08-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Zjinnnn":14,"-":15}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"Zjinnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"Zjinnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"Zjinnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"Zjinnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"Zjinnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"Zjinnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"Zjinnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"Zjinnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"Zjinnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"Zjinnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"Zjinnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"Zjinnnn"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":28,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":29,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"Zjinnnn"},"content":"    mainClass.set(\"pooh.Pooh\")","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":53,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"run {","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Zjinnnn":16,"-":41}},{"path":"src/main/java/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"Zjinnnn"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"Zjinnnn"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"Zjinnnn"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"Zjinnnn"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"Zjinnnn"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"Zjinnnn"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"Zjinnnn"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"Zjinnnn"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"Zjinnnn"},"content":"    @FXML","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"Zjinnnn"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"Zjinnnn"},"content":"    @FXML","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"Zjinnnn"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"Zjinnnn"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"Zjinnnn"},"content":"        try {","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"Zjinnnn"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"Zjinnnn"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"Zjinnnn"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"Zjinnnn"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"Zjinnnn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"Zjinnnn"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"Zjinnnn"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"Zjinnnn"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"Zjinnnn"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"Zjinnnn"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"Zjinnnn"},"content":"    private void flip() {","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"Zjinnnn"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"Zjinnnn"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"Zjinnnn"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"Zjinnnn"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"Zjinnnn"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"Zjinnnn"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-09-05"},{"lineNumber":52,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":53,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":54,"author":{"gitId":"Zjinnnn"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-09-05"},{"lineNumber":55,"author":{"gitId":"Zjinnnn"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-05"},{"lineNumber":56,"author":{"gitId":"Zjinnnn"},"content":"        db.flip();","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"Zjinnnn"},"content":"        return db;","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":59,"author":{"gitId":"Zjinnnn"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"Zjinnnn":59}},{"path":"src/main/java/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":"public class Launcher {","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"Zjinnnn":10}},{"path":"src/main/java/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"import pooh.Pooh;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"Zjinnnn"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"Zjinnnn"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"Zjinnnn"},"content":"    private Pooh pooh \u003d new Pooh(\"pooh.txt\");","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"Zjinnnn"},"content":"    @Override","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"Zjinnnn"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"Zjinnnn"},"content":"        try {","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"Zjinnnn"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"Zjinnnn"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"Zjinnnn"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"Zjinnnn"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"Zjinnnn"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setPooh(pooh);","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"Zjinnnn"},"content":"            stage.show();","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"Zjinnnn"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"Zjinnnn"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"Zjinnnn"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"Zjinnnn"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"Zjinnnn":30}},{"path":"src/main/java/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"import pooh.Pooh;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"Zjinnnn"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"Zjinnnn"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"Zjinnnn"},"content":"    @FXML","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"Zjinnnn"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"Zjinnnn"},"content":"    @FXML","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"Zjinnnn"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"Zjinnnn"},"content":"    @FXML","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"Zjinnnn"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"Zjinnnn"},"content":"    @FXML","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"Zjinnnn"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"Zjinnnn"},"content":"    private Pooh pooh;","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"Zjinnnn"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/piglet.jpeg\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"Zjinnnn"},"content":"    private Image poohImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/pooh.png\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"Zjinnnn"},"content":"    @FXML","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"Zjinnnn"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"Zjinnnn"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"Zjinnnn"},"content":"    public void setPooh(Pooh p) {","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"Zjinnnn"},"content":"        pooh \u003d p;","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"Zjinnnn"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"Zjinnnn"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"Zjinnnn"},"content":"    @FXML","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"Zjinnnn"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"Zjinnnn"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"Zjinnnn"},"content":"        String response \u003d pooh.getResponse(input);","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"Zjinnnn"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"Zjinnnn"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"Zjinnnn"},"content":"                DialogBox.getDukeDialog(response, poohImage)","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"Zjinnnn"},"content":"        );","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"Zjinnnn"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"Zjinnnn"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"Zjinnnn":51}},{"path":"src/main/java/pooh/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"package pooh;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":" * Represents a deadline task that extends the Task class.","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":" * The Deadline class is a subclass of the Task class, and it adds two additional attributes:","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"Zjinnnn"},"content":" * deadlineString and deadlineDateTime to represent the deadline of the task.","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"Zjinnnn"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"Zjinnnn"},"content":"public class Deadline extends TimeSensitiveTask {","lastModifiedDate":"2023-09-10"},{"lineNumber":15,"author":{"gitId":"Zjinnnn"},"content":"    private String deadlineString;","lastModifiedDate":"2023-09-10"},{"lineNumber":16,"author":{"gitId":"Zjinnnn"},"content":"    private LocalDate deadlineDateTime;","lastModifiedDate":"2023-09-10"},{"lineNumber":17,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"Zjinnnn"},"content":"     * Constructs a new Deadline object with a description and a deadline.","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"Zjinnnn"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"Zjinnnn"},"content":"     * The constructor initializes a Deadline object with a description and a deadline,","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"Zjinnnn"},"content":"     * and it also converts the deadline string into a LocalDate object using the parseDateTime method.","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"Zjinnnn"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"Zjinnnn"},"content":"     * @param description    The description of the deadline task.","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"Zjinnnn"},"content":"     * @param deadlineString The string representation of the deadline.","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"Zjinnnn"},"content":"    public Deadline(String description, String deadlineString) {","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"Zjinnnn"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"Zjinnnn"},"content":"        this.deadlineString \u003d deadlineString;","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"Zjinnnn"},"content":"        this.deadlineDateTime \u003d parseDateTime(deadlineString);","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":33,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":34,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"Zjinnnn"},"content":"     * Writes the task details into a string format suitable for file storage.","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"Zjinnnn"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"Zjinnnn"},"content":"     * This function prepares a string that captures the essential attributes of the Deadline object,","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"Zjinnnn"},"content":"     * such as its type (D for Deadline), its completion status, its description, and its deadline.","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"Zjinnnn"},"content":"     * The attributes are separated by a pipe character (|), making it easier to read them back from the file later.","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"Zjinnnn"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"Zjinnnn"},"content":"     * @return A string containing the task\u0027s details in a format suitable for file storage.","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"Zjinnnn"},"content":"    public String writeTaskToFile() {","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"Zjinnnn"},"content":"        return String.format(\"%s | %s | %s | %s\", \"D\",","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"Zjinnnn"},"content":"                this.getIsDone() ? 1 : 0,","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"Zjinnnn"},"content":"                this.getDescription(),","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"Zjinnnn"},"content":"                this.deadlineString);","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":50,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":51,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"Zjinnnn"},"content":"     * Reads task details from a given file and creates a new Deadline object.","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"Zjinnnn"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"Zjinnnn"},"content":"     * This function takes an array of strings as its argument, which should contain the task details,","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"Zjinnnn"},"content":"     * and returns a Deadline object based on those details.","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"Zjinnnn"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"Zjinnnn"},"content":"     * @param args An array of strings containing the task details.","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"Zjinnnn"},"content":"     *             args[1] should be \"1\" if the task is marked as done, otherwise not.","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"Zjinnnn"},"content":"     *             args[2] should contain the description of the task.","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"Zjinnnn"},"content":"     *             args[3] should contain the deadline for the task.","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"Zjinnnn"},"content":"     * @return A Deadline object initialized with the given task details.","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"Zjinnnn"},"content":"    public static Deadline readTaskFromFile(String[] args) {","lastModifiedDate":"2023-08-28"},{"lineNumber":65,"author":{"gitId":"Zjinnnn"},"content":"        Deadline newDeadlineTask \u003d new Deadline(args[2], args[3]);","lastModifiedDate":"2023-08-28"},{"lineNumber":66,"author":{"gitId":"Zjinnnn"},"content":"        if (args[1].equals(\"1\")) {","lastModifiedDate":"2023-08-28"},{"lineNumber":67,"author":{"gitId":"Zjinnnn"},"content":"            newDeadlineTask.markAsDone();","lastModifiedDate":"2023-08-28"},{"lineNumber":68,"author":{"gitId":"Zjinnnn"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":69,"author":{"gitId":"Zjinnnn"},"content":"        return newDeadlineTask;","lastModifiedDate":"2023-08-28"},{"lineNumber":70,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":71,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":72,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"Zjinnnn"},"content":"     * Parses a deadline string into a LocalDate object.","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"Zjinnnn"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"Zjinnnn"},"content":"     * This function tries to parse a given string into a LocalDate object.","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"Zjinnnn"},"content":"     * If the parsing fails, it returns null.","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"Zjinnnn"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"Zjinnnn"},"content":"     * @param deadlineString The string representing the deadline date.","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"Zjinnnn"},"content":"     * @return A LocalDate object if parsing is successful, otherwise null.","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"Zjinnnn"},"content":"    private LocalDate parseDateTime(String deadlineString) {","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"Zjinnnn"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"Zjinnnn"},"content":"            return LocalDate.parse(deadlineString);","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"Zjinnnn"},"content":"        } catch (DateTimeParseException ex) {","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"Zjinnnn"},"content":"            return null;","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"Zjinnnn"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":91,"author":{"gitId":"Zjinnnn"},"content":"     * Update the deadline of a task.","lastModifiedDate":"2023-09-10"},{"lineNumber":92,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":93,"author":{"gitId":"Zjinnnn"},"content":"     * @param deadlineString The new deadline in string format.","lastModifiedDate":"2023-09-10"},{"lineNumber":94,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":95,"author":{"gitId":"Zjinnnn"},"content":"    @Override","lastModifiedDate":"2023-09-10"},{"lineNumber":96,"author":{"gitId":"Zjinnnn"},"content":"    public void postpone(String deadlineString) {","lastModifiedDate":"2023-09-10"},{"lineNumber":97,"author":{"gitId":"Zjinnnn"},"content":"        this.deadlineString \u003d deadlineString;","lastModifiedDate":"2023-09-10"},{"lineNumber":98,"author":{"gitId":"Zjinnnn"},"content":"        this.deadlineDateTime \u003d parseDateTime(deadlineString);","lastModifiedDate":"2023-09-10"},{"lineNumber":99,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":100,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":101,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":102,"author":{"gitId":"Zjinnnn"},"content":"     * Converts the Deadline object to a string representation.","lastModifiedDate":"2023-08-29"},{"lineNumber":103,"author":{"gitId":"Zjinnnn"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":104,"author":{"gitId":"Zjinnnn"},"content":"     * This function overrides the toString method to provide a string representation of the Deadline object,","lastModifiedDate":"2023-08-29"},{"lineNumber":105,"author":{"gitId":"Zjinnnn"},"content":"     * which includes its status (done or not), description, and deadline date.","lastModifiedDate":"2023-08-29"},{"lineNumber":106,"author":{"gitId":"Zjinnnn"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":107,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":108,"author":{"gitId":"Zjinnnn"},"content":"     * @return A string representation of the Deadline object.","lastModifiedDate":"2023-08-29"},{"lineNumber":109,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":110,"author":{"gitId":"Zjinnnn"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":111,"author":{"gitId":"Zjinnnn"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":112,"author":{"gitId":"Zjinnnn"},"content":"        String deadline;","lastModifiedDate":"2023-08-29"},{"lineNumber":113,"author":{"gitId":"Zjinnnn"},"content":"        if (deadlineDateTime !\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":114,"author":{"gitId":"Zjinnnn"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy\");","lastModifiedDate":"2023-08-29"},{"lineNumber":115,"author":{"gitId":"Zjinnnn"},"content":"            deadline \u003d deadlineDateTime.format(formatter);","lastModifiedDate":"2023-08-29"},{"lineNumber":116,"author":{"gitId":"Zjinnnn"},"content":"            assert !deadline.isEmpty() : \"Error occurred whilst formatting deadlineDateTime\";","lastModifiedDate":"2023-09-09"},{"lineNumber":117,"author":{"gitId":"Zjinnnn"},"content":"        } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":118,"author":{"gitId":"Zjinnnn"},"content":"            deadline \u003d deadlineString;","lastModifiedDate":"2023-08-29"},{"lineNumber":119,"author":{"gitId":"Zjinnnn"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":120,"author":{"gitId":"Zjinnnn"},"content":"        return String.format(\"[D]%s (by: %s)\", super.toString(), deadline);","lastModifiedDate":"2023-08-29"},{"lineNumber":121,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":122,"author":{"gitId":"Zjinnnn"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Zjinnnn":122}},{"path":"src/main/java/pooh/EmptyTaskDescriptorsException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"package pooh;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":" * Exception thrown when an attempt is made to create a todo task with an empty description.","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":" * This exception extends from PoohException, and it overrides the toString method to provide","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":" * a custom error message indicating that the description of a todo cannot be empty.","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":"public class EmptyTaskDescriptorsException extends PoohException {","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"Zjinnnn"},"content":"     * Returns a string representation of the exception, containing a custom error message.","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"Zjinnnn"},"content":"     * @return Custom error message indicating that the description of a todo cannot be empty.","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"Zjinnnn"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"Zjinnnn"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"Zjinnnn"},"content":"        return \"      ☹ OOPS!!! The description of a todo cannot be empty.\";","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"Zjinnnn"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Zjinnnn":21}},{"path":"src/main/java/pooh/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"package pooh;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":" * Represents an event task with a start time and an end time.","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":" * The Event class is a subclass of the Task class and it adds two additional attributes,","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":" * namely eventStartTime and eventEndTime, to represent the duration of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"Zjinnnn"},"content":"    private final String eventStartTime;","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":"    private final String eventEndTime;","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"Zjinnnn"},"content":"     * Constructs a new Event object.","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"Zjinnnn"},"content":"     * @param description    The description of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"Zjinnnn"},"content":"     * @param eventStartTime The start time of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"Zjinnnn"},"content":"     * @param eventEndTime   The end time of the event.","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"Zjinnnn"},"content":"    public Event(String description, String eventStartTime, String eventEndTime) {","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"Zjinnnn"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"Zjinnnn"},"content":"        this.eventStartTime \u003d eventStartTime;","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"Zjinnnn"},"content":"        this.eventEndTime \u003d eventEndTime;","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":27,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"Zjinnnn"},"content":"     * Serializes the Event object into a string format suitable for file storage.","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"Zjinnnn"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"Zjinnnn"},"content":"     * This method prepares a string that captures the essential attributes of the Event object,","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"Zjinnnn"},"content":"     * such as its type (E for Event), its completion status, its description, and its event times.","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"Zjinnnn"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"Zjinnnn"},"content":"     * @return A string containing the task\u0027s details in a format suitable for file storage.","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"Zjinnnn"},"content":"    public String writeTaskToFile() {","lastModifiedDate":"2023-08-28"},{"lineNumber":37,"author":{"gitId":"Zjinnnn"},"content":"        return String.format(\"%s | %s | %s | %s-%s\", \"E\",","lastModifiedDate":"2023-08-28"},{"lineNumber":38,"author":{"gitId":"Zjinnnn"},"content":"                this.getIsDone() ? 1 : 0,","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"Zjinnnn"},"content":"                this.getDescription(),","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"Zjinnnn"},"content":"                this.eventStartTime,","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"Zjinnnn"},"content":"                this.eventEndTime);","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"Zjinnnn"},"content":"     * Reads task details from a given file and creates a new Event object.","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"Zjinnnn"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"Zjinnnn"},"content":"     * This static method takes an array of strings as its argument, which should contain the task details,","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"Zjinnnn"},"content":"     * and returns an Event object based on those details.","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"Zjinnnn"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"Zjinnnn"},"content":"     * @param args An array of strings containing the task details.","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"Zjinnnn"},"content":"     * @return An Event object initialized with the given task details.","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"Zjinnnn"},"content":"    public static Event readTaskFromFile(String[] args) {","lastModifiedDate":"2023-08-28"},{"lineNumber":55,"author":{"gitId":"Zjinnnn"},"content":"        String[] eventTime \u003d args[3].split(\"-\");","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"Zjinnnn"},"content":"        Event newEventTask \u003d new Event(args[2], eventTime[0], eventTime[1]);","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"Zjinnnn"},"content":"        if (args[1].equals(\"1\")) {","lastModifiedDate":"2023-08-28"},{"lineNumber":58,"author":{"gitId":"Zjinnnn"},"content":"            newEventTask.markAsDone();","lastModifiedDate":"2023-08-28"},{"lineNumber":59,"author":{"gitId":"Zjinnnn"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":60,"author":{"gitId":"Zjinnnn"},"content":"        return newEventTask;","lastModifiedDate":"2023-08-28"},{"lineNumber":61,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":62,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":63,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"Zjinnnn"},"content":"     * Converts the Event object to a string representation.","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"Zjinnnn"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"Zjinnnn"},"content":"     * This method overrides the toString method to provide a string representation of the Event object,","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"Zjinnnn"},"content":"     * which includes its status (done or not), description, and event times.","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"Zjinnnn"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"Zjinnnn"},"content":"     * @return A string representation of the Event object.","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"Zjinnnn"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":73,"author":{"gitId":"Zjinnnn"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":74,"author":{"gitId":"Zjinnnn"},"content":"        return String.format(\"[E]%s (from: %s to: %s)\", super.toString(), this.eventStartTime, this.eventEndTime);","lastModifiedDate":"2023-08-22"},{"lineNumber":75,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":76,"author":{"gitId":"Zjinnnn"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Zjinnnn":76}},{"path":"src/main/java/pooh/InvalidTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"package pooh;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":" * Exception thrown when an invalid task is selected.","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":" * This exception extends from PoohException, and it overrides the toString method to provide","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":" * a custom error message indicating that the selected task is not valid.","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":"public class InvalidTaskException extends PoohException {","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"Zjinnnn"},"content":"    ","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"Zjinnnn"},"content":"     * Returns a string representation of the exception, containing a custom error message.","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"Zjinnnn"},"content":"     * @return Custom error message indicating that the selected task is invalid.","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"Zjinnnn"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"Zjinnnn"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"Zjinnnn"},"content":"        return \"      ☹ OOPS!!! No such task! Please reselect carefully!\";","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"Zjinnnn"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Zjinnnn":21}},{"path":"src/main/java/pooh/LoadTasksException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"package pooh;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":" * Exception thrown when there is an error loading tasks from a file.","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":" * This exception is a subclass of PoohException and overrides the toString method to provide","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":" * a custom error message indicating that there was an error loading tasks from a file.","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":"public class LoadTasksException extends PoohException {","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"Zjinnnn"},"content":"     * Returns a string representation of the exception, containing a custom error message.","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"Zjinnnn"},"content":"     * @return Custom error message indicating that an error has occurred while loading tasks from a file.","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"Zjinnnn"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"Zjinnnn"},"content":"    public String toString() {","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"Zjinnnn"},"content":"        return \"      An error has occurred whilst loading tasks from file. :-(\";","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"Zjinnnn"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"Zjinnnn":21}},{"path":"src/main/java/pooh/NotTimeSensitiveTaskException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"package pooh;","lastModifiedDate":"2023-09-10"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"/**","lastModifiedDate":"2023-09-10"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":" * Exception thrown when specific tasks that are not time-sensitive.","lastModifiedDate":"2023-09-10"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":" * This exception is thrown when an operation that requires a time-sensitive task","lastModifiedDate":"2023-09-10"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":" * is performed on a task that is not time-sensitive.","lastModifiedDate":"2023-09-10"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-09-10"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":" */","lastModifiedDate":"2023-09-10"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":"public class NotTimeSensitiveTaskException extends PoohException {","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":13,"author":{"gitId":"Zjinnnn"},"content":"     * Returns a string representation of this exception.","lastModifiedDate":"2023-09-10"},{"lineNumber":14,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":15,"author":{"gitId":"Zjinnnn"},"content":"     * @return A string indicating that the task is not time-sensitive.","lastModifiedDate":"2023-09-10"},{"lineNumber":16,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":17,"author":{"gitId":"Zjinnnn"},"content":"    @Override","lastModifiedDate":"2023-09-10"},{"lineNumber":18,"author":{"gitId":"Zjinnnn"},"content":"    public String toString() {","lastModifiedDate":"2023-09-10"},{"lineNumber":19,"author":{"gitId":"Zjinnnn"},"content":"        return \"Task is not time-sensitive!\";","lastModifiedDate":"2023-09-10"},{"lineNumber":20,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":21,"author":{"gitId":"Zjinnnn"},"content":"}","lastModifiedDate":"2023-09-10"}],"authorContributionMap":{"Zjinnnn":21}},{"path":"src/main/java/pooh/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"package pooh;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":" * Responsible for parsing user input and executing commands.","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":" * This class takes care of interpreting user commands and then calling appropriate","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":" * methods to perform the actions described by those commands. It supports a variety","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":" * of commands including task listing, marking tasks as done or undone, and more.","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"Zjinnnn"},"content":"public class Parser {","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"Zjinnnn"},"content":"     * Parses and executes the command specified in the given user input.","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"Zjinnnn"},"content":"     * @param taskStorage The storage object responsible for task storage operations.","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"Zjinnnn"},"content":"     * @param taskList    The task list that holds all tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"Zjinnnn"},"content":"     * @param userInput   The string input from the user.","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"Zjinnnn"},"content":"     * @throws UnrecognizedCommandException If the command is not recognized.","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"Zjinnnn"},"content":"     * @throws InvalidTaskException         If the task specified for certain operations is invalid.","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"Zjinnnn"},"content":"     * @throws WriteTasksException          If there is an error while writing tasks to storage.","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"Zjinnnn"},"content":"    public String parseInput(Storage taskStorage, TaskList taskList, Ui ui, String userInput) throws","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"Zjinnnn"},"content":"            UnrecognizedCommandException, InvalidTaskException, WriteTasksException {","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"Zjinnnn"},"content":"        String userAction \u003d userInput.split(\" \")[0];","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"Zjinnnn"},"content":"        if (userAction.equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"Zjinnnn"},"content":"            return ui.getTasksMessage(taskList);","lastModifiedDate":"2023-09-10"},{"lineNumber":28,"author":{"gitId":"Zjinnnn"},"content":"        } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"Zjinnnn"},"content":"            switch (userAction.toLowerCase()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"Zjinnnn"},"content":"            case \"bye\":","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"Zjinnnn"},"content":"                taskStorage.writeTask(taskList);","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"Zjinnnn"},"content":"                return ui.getExitMessage();","lastModifiedDate":"2023-09-10"},{"lineNumber":33,"author":{"gitId":"Zjinnnn"},"content":"            case \"mark\":","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"Zjinnnn"},"content":"                int markIndex \u003d Integer.parseInt(userInput.split(\" \")[1]) - 1;","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"Zjinnnn"},"content":"                Task markTask \u003d taskList.getTask(markIndex);","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"Zjinnnn"},"content":"                markTask.markAsDone();","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"Zjinnnn"},"content":"                taskStorage.writeTask(taskList);","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"Zjinnnn"},"content":"                return ui.getTaskDoneMessage(markTask);","lastModifiedDate":"2023-09-10"},{"lineNumber":39,"author":{"gitId":"Zjinnnn"},"content":"            case \"unmark\":","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"Zjinnnn"},"content":"                int unmarkIndex \u003d Integer.parseInt(userInput.split(\" \")[1]) - 1;","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"Zjinnnn"},"content":"                Task unmarkTask \u003d taskList.getTask(unmarkIndex);","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"Zjinnnn"},"content":"                unmarkTask.markAsUndone();","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"Zjinnnn"},"content":"                taskStorage.writeTask(taskList);","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"Zjinnnn"},"content":"                return ui.getTaskUndoneMessage(unmarkTask);","lastModifiedDate":"2023-09-10"},{"lineNumber":45,"author":{"gitId":"Zjinnnn"},"content":"            case \"todo\":","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"Zjinnnn"},"content":"            case \"event\":","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"Zjinnnn"},"content":"            case \"deadline\":","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"Zjinnnn"},"content":"                try {","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"Zjinnnn"},"content":"                    TaskList.addTask(taskList, userAction, userInput);","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"Zjinnnn"},"content":"                    Task task \u003d taskList.getTask(taskList.getSize() - 1);","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"Zjinnnn"},"content":"                    taskStorage.writeTask(taskList);","lastModifiedDate":"2023-09-05"},{"lineNumber":52,"author":{"gitId":"Zjinnnn"},"content":"                    return ui.getAddTaskMessage(taskList, task);","lastModifiedDate":"2023-09-10"},{"lineNumber":53,"author":{"gitId":"Zjinnnn"},"content":"                } catch (EmptyTaskDescriptorsException ex) {","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"Zjinnnn"},"content":"                    return ui.respond(ex.toString());","lastModifiedDate":"2023-09-05"},{"lineNumber":55,"author":{"gitId":"Zjinnnn"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"Zjinnnn"},"content":"            case \"delete\":","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"Zjinnnn"},"content":"                int delIndex \u003d Integer.parseInt(userInput.split(\" \")[1]) - 1;","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"Zjinnnn"},"content":"                Task task \u003d taskList.getTask(delIndex);","lastModifiedDate":"2023-09-05"},{"lineNumber":59,"author":{"gitId":"Zjinnnn"},"content":"                TaskList.deleteTask(taskList, delIndex);","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"Zjinnnn"},"content":"                taskStorage.writeTask(taskList);","lastModifiedDate":"2023-09-05"},{"lineNumber":61,"author":{"gitId":"Zjinnnn"},"content":"                return ui.getDeleteTaskMessage(taskList, task);","lastModifiedDate":"2023-09-10"},{"lineNumber":62,"author":{"gitId":"Zjinnnn"},"content":"            case \"find\":","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"Zjinnnn"},"content":"                String keyword \u003d userInput.split(\" \")[1];","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"Zjinnnn"},"content":"                TaskList keywordTaskList \u003d taskList.getTasksWithKeyword(keyword);","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"Zjinnnn"},"content":"                if (keywordTaskList.getSize() \u003e\u003d 1) {","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"Zjinnnn"},"content":"                    return ui.getKeywordTasksMessage(keywordTaskList);","lastModifiedDate":"2023-09-10"},{"lineNumber":67,"author":{"gitId":"Zjinnnn"},"content":"                } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"Zjinnnn"},"content":"                    return ui.getNoKeywordTasksFoundMessage();","lastModifiedDate":"2023-09-10"},{"lineNumber":69,"author":{"gitId":"Zjinnnn"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"Zjinnnn"},"content":"            case \"postpone\":","lastModifiedDate":"2023-09-10"},{"lineNumber":71,"author":{"gitId":"Zjinnnn"},"content":"                try {","lastModifiedDate":"2023-09-10"},{"lineNumber":72,"author":{"gitId":"Zjinnnn"},"content":"                    int postponeIndex \u003d Integer.parseInt(userInput.split(\" \")[1]) - 1;","lastModifiedDate":"2023-09-10"},{"lineNumber":73,"author":{"gitId":"Zjinnnn"},"content":"                    String deadlineString \u003d userInput.split(\" \")[2];","lastModifiedDate":"2023-09-10"},{"lineNumber":74,"author":{"gitId":"Zjinnnn"},"content":"                    Task postponedTask \u003d taskList.postponeTimeSensitiveTask(postponeIndex, deadlineString);","lastModifiedDate":"2023-09-10"},{"lineNumber":75,"author":{"gitId":"Zjinnnn"},"content":"                    taskStorage.writeTask(taskList);","lastModifiedDate":"2023-09-10"},{"lineNumber":76,"author":{"gitId":"Zjinnnn"},"content":"                    return ui.getPostponeTaskMessage(postponedTask);","lastModifiedDate":"2023-09-10"},{"lineNumber":77,"author":{"gitId":"Zjinnnn"},"content":"                } catch (NotTimeSensitiveTaskException ex) {","lastModifiedDate":"2023-09-10"},{"lineNumber":78,"author":{"gitId":"Zjinnnn"},"content":"                    return ui.getUnableToPostponeTaskMessage();","lastModifiedDate":"2023-09-10"},{"lineNumber":79,"author":{"gitId":"Zjinnnn"},"content":"                }","lastModifiedDate":"2023-09-10"},{"lineNumber":80,"author":{"gitId":"Zjinnnn"},"content":"            default:","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"Zjinnnn"},"content":"                throw new UnrecognizedCommandException();","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"Zjinnnn"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"Zjinnnn"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"Zjinnnn"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"Zjinnnn":85}},{"path":"src/main/java/pooh/Pooh.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"package pooh;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":"import java.util.List;","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":" * Main application class for the Pooh chatbot.","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":" * This class is responsible for initializing storage, loading tasks, and running","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"Zjinnnn"},"content":" * the main event loop of the application. It delegates command parsing to the Parser","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":" * class and storage operations to the Storage class.","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"Zjinnnn"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"Zjinnnn"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"Zjinnnn"},"content":"public class Pooh {","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"Zjinnnn"},"content":"    private final Storage taskStorage;","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"Zjinnnn"},"content":"    private final Parser cmdParser;","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"Zjinnnn"},"content":"    private TaskList taskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"Zjinnnn"},"content":"    private final Ui ui;","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"Zjinnnn"},"content":"     * Constructs a new Pooh chatbot.","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"Zjinnnn"},"content":"     * @param filePath The file path where tasks are stored.","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"Zjinnnn"},"content":"    public Pooh(String filePath) {","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":29,"author":{"gitId":"Zjinnnn"},"content":"        assert !filePath.isEmpty() : \"filePath cannot be empty\";","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"Zjinnnn"},"content":"        cmdParser \u003d new Parser();","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"Zjinnnn"},"content":"        taskStorage \u003d new Storage(filePath);","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"Zjinnnn"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"Zjinnnn"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"Zjinnnn"},"content":"            taskList \u003d new TaskList(taskStorage.loadTasks());","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"Zjinnnn"},"content":"        } catch (LoadTasksException ex) {","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"Zjinnnn"},"content":"            ui.respond(ex.toString());","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"Zjinnnn"},"content":"            List\u003cTask\u003e listOfTasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"Zjinnnn"},"content":"            taskList \u003d new TaskList(listOfTasks);","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"Zjinnnn"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"Zjinnnn"},"content":"     * Processes a given user command, parses it, and returns an appropriate response.","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"Zjinnnn"},"content":"     * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"Zjinnnn"},"content":"     * This method attempts to parse the user\u0027s command through the {@code cmdParser}. If the command is","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"Zjinnnn"},"content":"     * valid, it performs the necessary operations and returns the response. Otherwise, if an exception","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"Zjinnnn"},"content":"     * occurs, it handles the exception and returns a user-friendly error message.","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"Zjinnnn"},"content":"     * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"Zjinnnn"},"content":"     * @param userCmd The command string inputted by the user.","lastModifiedDate":"2023-09-05"},{"lineNumber":52,"author":{"gitId":"Zjinnnn"},"content":"     * @return A response string that results from processing the user\u0027s command.","lastModifiedDate":"2023-09-05"},{"lineNumber":53,"author":{"gitId":"Zjinnnn"},"content":"     * This could be a successful operation message or an error message.","lastModifiedDate":"2023-09-05"},{"lineNumber":54,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"Zjinnnn"},"content":"    public String getResponse(String userCmd) {","lastModifiedDate":"2023-09-05"},{"lineNumber":56,"author":{"gitId":"Zjinnnn"},"content":"        try {","lastModifiedDate":"2023-08-22"},{"lineNumber":57,"author":{"gitId":"Zjinnnn"},"content":"            return cmdParser.parseInput(taskStorage, taskList, ui, userCmd);","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"Zjinnnn"},"content":"        } catch (UnrecognizedCommandException ex) {","lastModifiedDate":"2023-08-22"},{"lineNumber":59,"author":{"gitId":"Zjinnnn"},"content":"            return ui.respond(ex.toString());","lastModifiedDate":"2023-09-05"},{"lineNumber":60,"author":{"gitId":"Zjinnnn"},"content":"        } catch (WriteTasksException ex) {","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"Zjinnnn"},"content":"            return ui.respond(ex.toString());","lastModifiedDate":"2023-09-05"},{"lineNumber":62,"author":{"gitId":"Zjinnnn"},"content":"        } catch (InvalidTaskException ex) {","lastModifiedDate":"2023-08-22"},{"lineNumber":63,"author":{"gitId":"Zjinnnn"},"content":"            return ui.respond(ex.toString());","lastModifiedDate":"2023-09-05"},{"lineNumber":64,"author":{"gitId":"Zjinnnn"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":65,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":66,"author":{"gitId":"Zjinnnn"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Zjinnnn":66}},{"path":"src/main/java/pooh/PoohException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"package pooh;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":" * Custom exception class for the Pooh chatbot.","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":" * This class serves as the base class for all custom exceptions in the Pooh application.","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":" * It is meant to be subclassed by more specific exception types to handle various error","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":" * scenarios within the application.","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"Zjinnnn"},"content":"public class PoohException extends Exception {","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Zjinnnn":12}},{"path":"src/main/java/pooh/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"package pooh;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"import java.io.*;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":"import java.util.List;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":" * Handles storage-related operations for the Pooh chatbot.","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":" * This class is responsible for reading and writing tasks to and from a file.","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"Zjinnnn"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"Zjinnnn"},"content":"public class Storage {","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"Zjinnnn"},"content":"    private final String filePath;","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"Zjinnnn"},"content":"     * Constructs a new Storage instance.","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"Zjinnnn"},"content":"     * @param filePath The path of the file to read from and write to.","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"Zjinnnn"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"Zjinnnn"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"Zjinnnn"},"content":"     * Loads tasks from the file specified by {@code filePath}.","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"Zjinnnn"},"content":"     * @return A list of tasks loaded from the file.","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"Zjinnnn"},"content":"     * @throws LoadTasksException If there is an error reading the file.","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"Zjinnnn"},"content":"    public List\u003cTask\u003e loadTasks() throws LoadTasksException {","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"Zjinnnn"},"content":"        File file \u003d new File(this.filePath);","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"Zjinnnn"},"content":"        List\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"Zjinnnn"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"Zjinnnn"},"content":"            if (file.exists()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"Zjinnnn"},"content":"                BufferedReader fileReader \u003d new BufferedReader(new FileReader(file));","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"Zjinnnn"},"content":"                String line \u003d fileReader.readLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"Zjinnnn"},"content":"                while (line !\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"Zjinnnn"},"content":"                    Task task \u003d Task.readTaskFromFile(line);","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"Zjinnnn"},"content":"                    taskList.add(task);","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"Zjinnnn"},"content":"                    line \u003d fileReader.readLine();","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"Zjinnnn"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"Zjinnnn"},"content":"                fileReader.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"Zjinnnn"},"content":"            } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"Zjinnnn"},"content":"                boolean fileCreated \u003d file.createNewFile();","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"Zjinnnn"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"Zjinnnn"},"content":"        } catch (IOException ex) {","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"Zjinnnn"},"content":"            throw new LoadTasksException();","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"Zjinnnn"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"Zjinnnn"},"content":"        return taskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"Zjinnnn"},"content":"     * Writes the current tasks to the file specified by {@code filePath}.","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"Zjinnnn"},"content":"     * @param taskList The list of tasks to write.","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"Zjinnnn"},"content":"     * @throws WriteTasksException If there is an error writing to the file.","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"Zjinnnn"},"content":"    public void writeTask(TaskList taskList) throws WriteTasksException {","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"Zjinnnn"},"content":"        try (FileWriter fileWriter \u003d new FileWriter(\"pooh.txt\")) {","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"Zjinnnn"},"content":"            for (int i \u003d 0; i \u003c taskList.getSize(); i++) {","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"Zjinnnn"},"content":"                Task task \u003d taskList.getTask(i);","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"Zjinnnn"},"content":"                fileWriter.write(task.writeTaskToFile() + \"\\n\");","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"Zjinnnn"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"Zjinnnn"},"content":"        } catch (IOException ex) {","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"Zjinnnn"},"content":"            throw new WriteTasksException();","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"Zjinnnn"},"content":"        } catch (InvalidTaskException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"Zjinnnn"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"Zjinnnn"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"Zjinnnn"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"Zjinnnn":74}},{"path":"src/main/java/pooh/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"package pooh;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":" * Abstract class representing a task.","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":" * This class serves as the basis for different types of tasks and encapsulates","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":" * the basic information and operations related to a task.","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"Zjinnnn"},"content":"    private final String description;","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":"    private boolean isDone;","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"Zjinnnn"},"content":"     * Constructs a new Task with the given description.","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"Zjinnnn"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"Zjinnnn"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"Zjinnnn"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"Zjinnnn"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"Zjinnnn"},"content":"     * Retrieves the description of the task.","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"Zjinnnn"},"content":"     * @return The description of the task.","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"Zjinnnn"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-28"},{"lineNumber":30,"author":{"gitId":"Zjinnnn"},"content":"        return this.description;","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":32,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":33,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"Zjinnnn"},"content":"     * Checks whether the task is done or not.","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"Zjinnnn"},"content":"     * @return {@code true} if the task is done, {@code false} otherwise.","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"Zjinnnn"},"content":"    public boolean getIsDone() {","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"Zjinnnn"},"content":"        return this.isDone;","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"Zjinnnn"},"content":"     * Retrieves the status icon based on the task\u0027s completion status.","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"Zjinnnn"},"content":"     * @return \"X\" if the task is done, \" \" otherwise.","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"Zjinnnn"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"Zjinnnn"},"content":"        return (isDone ? \"X\" : \" \");    // mark done task with X","lastModifiedDate":"2023-08-28"},{"lineNumber":49,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":50,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":51,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"Zjinnnn"},"content":"     * Marks the task as done.","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"Zjinnnn"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-22"},{"lineNumber":55,"author":{"gitId":"Zjinnnn"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-22"},{"lineNumber":56,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":57,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":58,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"Zjinnnn"},"content":"     * Marks the task as not done.","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"Zjinnnn"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-08-22"},{"lineNumber":62,"author":{"gitId":"Zjinnnn"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":63,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":64,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":65,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"Zjinnnn"},"content":"     * Converts the task to a string format suitable for file storage.","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"Zjinnnn"},"content":"     * @return A string representation of the task for file storage.","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"Zjinnnn"},"content":"    public abstract String writeTaskToFile();","lastModifiedDate":"2023-08-28"},{"lineNumber":71,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":72,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"Zjinnnn"},"content":"     * Creates a task from its string representation in a file.","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"Zjinnnn"},"content":"     * @param input A string containing the task\u0027s information.","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"Zjinnnn"},"content":"     * @return A new Task object corresponding to the input string.","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"Zjinnnn"},"content":"    public static Task readTaskFromFile(String input) {","lastModifiedDate":"2023-08-28"},{"lineNumber":79,"author":{"gitId":"Zjinnnn"},"content":"        String[] args \u003d input.split(\" \\\\| \");","lastModifiedDate":"2023-08-28"},{"lineNumber":80,"author":{"gitId":"Zjinnnn"},"content":"        Task task;","lastModifiedDate":"2023-08-28"},{"lineNumber":81,"author":{"gitId":"Zjinnnn"},"content":"        switch (args[0]) {","lastModifiedDate":"2023-08-28"},{"lineNumber":82,"author":{"gitId":"Zjinnnn"},"content":"        case \"T\":","lastModifiedDate":"2023-08-28"},{"lineNumber":83,"author":{"gitId":"Zjinnnn"},"content":"            task \u003d Todo.readTaskFromFile(args);","lastModifiedDate":"2023-08-28"},{"lineNumber":84,"author":{"gitId":"Zjinnnn"},"content":"            break;","lastModifiedDate":"2023-08-28"},{"lineNumber":85,"author":{"gitId":"Zjinnnn"},"content":"        case \"D\":","lastModifiedDate":"2023-08-28"},{"lineNumber":86,"author":{"gitId":"Zjinnnn"},"content":"            task \u003d Deadline.readTaskFromFile(args);","lastModifiedDate":"2023-08-28"},{"lineNumber":87,"author":{"gitId":"Zjinnnn"},"content":"            break;","lastModifiedDate":"2023-08-28"},{"lineNumber":88,"author":{"gitId":"Zjinnnn"},"content":"        case \"E\":","lastModifiedDate":"2023-08-28"},{"lineNumber":89,"author":{"gitId":"Zjinnnn"},"content":"            task \u003d Event.readTaskFromFile(args);","lastModifiedDate":"2023-08-28"},{"lineNumber":90,"author":{"gitId":"Zjinnnn"},"content":"            break;","lastModifiedDate":"2023-08-28"},{"lineNumber":91,"author":{"gitId":"Zjinnnn"},"content":"        default:","lastModifiedDate":"2023-08-28"},{"lineNumber":92,"author":{"gitId":"Zjinnnn"},"content":"            task \u003d null;","lastModifiedDate":"2023-08-28"},{"lineNumber":93,"author":{"gitId":"Zjinnnn"},"content":"            break;","lastModifiedDate":"2023-08-28"},{"lineNumber":94,"author":{"gitId":"Zjinnnn"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":95,"author":{"gitId":"Zjinnnn"},"content":"        return task;","lastModifiedDate":"2023-08-28"},{"lineNumber":96,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":97,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":98,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"Zjinnnn"},"content":"     * Checks if the task description contains a specified keyword.","lastModifiedDate":"2023-08-29"},{"lineNumber":100,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"Zjinnnn"},"content":"     * @param keyword The string keyword to search for in the task description.","lastModifiedDate":"2023-08-29"},{"lineNumber":102,"author":{"gitId":"Zjinnnn"},"content":"     * @return true if the task description contains the keyword, false otherwise.","lastModifiedDate":"2023-08-29"},{"lineNumber":103,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":104,"author":{"gitId":"Zjinnnn"},"content":"    public boolean ifDescriptionContains(String keyword) {","lastModifiedDate":"2023-08-29"},{"lineNumber":105,"author":{"gitId":"Zjinnnn"},"content":"        return this.description.contains(keyword);","lastModifiedDate":"2023-08-29"},{"lineNumber":106,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":107,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":108,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":109,"author":{"gitId":"Zjinnnn"},"content":"     * Converts the task to a user-friendly string representation.","lastModifiedDate":"2023-08-29"},{"lineNumber":110,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":111,"author":{"gitId":"Zjinnnn"},"content":"     * @return A string representation of the task.","lastModifiedDate":"2023-08-29"},{"lineNumber":112,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":113,"author":{"gitId":"Zjinnnn"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":114,"author":{"gitId":"Zjinnnn"},"content":"    public String toString() {","lastModifiedDate":"2023-08-28"},{"lineNumber":115,"author":{"gitId":"Zjinnnn"},"content":"        return String.format(\"[%s] %s\", getStatusIcon(), description);","lastModifiedDate":"2023-08-28"},{"lineNumber":116,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":117,"author":{"gitId":"Zjinnnn"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Zjinnnn":117}},{"path":"src/main/java/pooh/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"package pooh;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"import java.sql.Time;","lastModifiedDate":"2023-09-10"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":"import java.util.List;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":" * Class representing a list of tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":" * This class encapsulates the list of tasks and provides methods for adding,","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"Zjinnnn"},"content":" * removing, and retrieving tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"Zjinnnn"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"Zjinnnn"},"content":"public class TaskList {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"Zjinnnn"},"content":"    private final List\u003cTask\u003e taskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"Zjinnnn"},"content":"     * Constructs a new TaskList with the given list of tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"Zjinnnn"},"content":"     * @param taskList The initial list of tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"Zjinnnn"},"content":"    public TaskList(List\u003cTask\u003e taskList) {","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"Zjinnnn"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"Zjinnnn"},"content":"     * Adds a new task to the list.","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"Zjinnnn"},"content":"     * @param task The task to be added.","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":31,"author":{"gitId":"Zjinnnn"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"Zjinnnn"},"content":"        this.taskList.add(task);","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"Zjinnnn"},"content":"     * Removes a task from the list at the specified index.","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"Zjinnnn"},"content":"     * @param task The index of the task to be removed.","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"Zjinnnn"},"content":"    public void remove(int task) {","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"Zjinnnn"},"content":"        this.taskList.remove(task);","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"Zjinnnn"},"content":"     * Retrieves a task from the list at the specified index.","lastModifiedDate":"2023-08-29"},{"lineNumber":46,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"Zjinnnn"},"content":"     * @param index The index of the task to retrieve.","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"Zjinnnn"},"content":"     * @return The task at the specified index.","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"Zjinnnn"},"content":"     * @throws InvalidTaskException If the index is out of bounds.","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"Zjinnnn"},"content":"    public Task getTask(int index) throws InvalidTaskException {","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"Zjinnnn"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"Zjinnnn"},"content":"            return this.taskList.get(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"Zjinnnn"},"content":"        } catch (IndexOutOfBoundsException ex) {","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"Zjinnnn"},"content":"            throw new InvalidTaskException();","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"Zjinnnn"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"Zjinnnn"},"content":"     * Retrieves the size of the task list.","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":62,"author":{"gitId":"Zjinnnn"},"content":"     * @return The number of tasks in the list.","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"Zjinnnn"},"content":"    public int getSize() {","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"Zjinnnn"},"content":"        return this.taskList.size();","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"Zjinnnn"},"content":"     * Adds a task to the task list based on user input.","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"Zjinnnn"},"content":"     * @param taskList   The task list to which the task will be added.","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"Zjinnnn"},"content":"     * @param userAction The type of task to be added.","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"Zjinnnn"},"content":"     * @param cmd        The full command from the user.","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"Zjinnnn"},"content":"     * @throws EmptyTaskDescriptorsException If the task description is empty.","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"Zjinnnn"},"content":"    public static void addTask(TaskList taskList, String userAction, String cmd) throws","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"Zjinnnn"},"content":"            EmptyTaskDescriptorsException {","lastModifiedDate":"2023-08-29"},{"lineNumber":78,"author":{"gitId":"Zjinnnn"},"content":"        if (cmd.split(\" \", 2).length \u003d\u003d 1) {","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"Zjinnnn"},"content":"            throw new EmptyTaskDescriptorsException();","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"Zjinnnn"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"Zjinnnn"},"content":"        String userArgs \u003d cmd.split(\" \", 2)[1];","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"Zjinnnn"},"content":"        Task task;","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"Zjinnnn"},"content":"        if (userAction.equalsIgnoreCase(\"todo\")) {","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"Zjinnnn"},"content":"            task \u003d new Todo(userArgs);","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"Zjinnnn"},"content":"        } else if (userAction.equalsIgnoreCase(\"deadline\")) {","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"Zjinnnn"},"content":"            String[] specificArgs \u003d userArgs.split(\" /by \", 2);","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"Zjinnnn"},"content":"            String description \u003d specificArgs[0];","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"Zjinnnn"},"content":"            String deadlineTime \u003d specificArgs[1];","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"Zjinnnn"},"content":"            task \u003d new Deadline(description, deadlineTime);","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"Zjinnnn"},"content":"        } else {","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"Zjinnnn"},"content":"            String[] specificArgs \u003d userArgs.split(\" /from \", 2);","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"Zjinnnn"},"content":"            String description \u003d specificArgs[0];","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"Zjinnnn"},"content":"            String[] eventTimes \u003d specificArgs[1].split(\" /to \");","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"Zjinnnn"},"content":"            String eventStartTime \u003d eventTimes[0];","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"Zjinnnn"},"content":"            String eventEndTime \u003d eventTimes[1];","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"Zjinnnn"},"content":"            task \u003d new Event(description, eventStartTime, eventEndTime);","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"Zjinnnn"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":98,"author":{"gitId":"Zjinnnn"},"content":"        taskList.add(task);","lastModifiedDate":"2023-08-29"},{"lineNumber":99,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":100,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":102,"author":{"gitId":"Zjinnnn"},"content":"     * Deletes a task from the task list at the specified index.","lastModifiedDate":"2023-08-29"},{"lineNumber":103,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":104,"author":{"gitId":"Zjinnnn"},"content":"     * @param taskList The task list from which the task will be deleted.","lastModifiedDate":"2023-08-29"},{"lineNumber":105,"author":{"gitId":"Zjinnnn"},"content":"     * @param index    The index of the task to delete.","lastModifiedDate":"2023-08-29"},{"lineNumber":106,"author":{"gitId":"Zjinnnn"},"content":"     * @throws InvalidTaskException If the index is out of bounds.","lastModifiedDate":"2023-08-29"},{"lineNumber":107,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":108,"author":{"gitId":"Zjinnnn"},"content":"    public static void deleteTask(TaskList taskList, int index) throws InvalidTaskException {","lastModifiedDate":"2023-08-29"},{"lineNumber":109,"author":{"gitId":"Zjinnnn"},"content":"        Task task \u003d taskList.getTask(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":110,"author":{"gitId":"Zjinnnn"},"content":"        taskList.remove(index);","lastModifiedDate":"2023-08-29"},{"lineNumber":111,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":112,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":113,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":114,"author":{"gitId":"Zjinnnn"},"content":"     * Filters tasks in the list based on a keyword.","lastModifiedDate":"2023-08-29"},{"lineNumber":115,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":116,"author":{"gitId":"Zjinnnn"},"content":"     * @param keyword The keyword to search for in the task descriptions.","lastModifiedDate":"2023-08-29"},{"lineNumber":117,"author":{"gitId":"Zjinnnn"},"content":"     * @return A new TaskList containing tasks whose descriptions contain the keyword.","lastModifiedDate":"2023-08-29"},{"lineNumber":118,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":119,"author":{"gitId":"Zjinnnn"},"content":"    public TaskList getTasksWithKeyword(String keyword) {","lastModifiedDate":"2023-08-29"},{"lineNumber":120,"author":{"gitId":"Zjinnnn"},"content":"        List\u003cTask\u003e keywordTasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":121,"author":{"gitId":"Zjinnnn"},"content":"        for (Task task : taskList) {","lastModifiedDate":"2023-08-29"},{"lineNumber":122,"author":{"gitId":"Zjinnnn"},"content":"            if (task.ifDescriptionContains(keyword)) {","lastModifiedDate":"2023-08-29"},{"lineNumber":123,"author":{"gitId":"Zjinnnn"},"content":"                keywordTasks.add(task);","lastModifiedDate":"2023-08-29"},{"lineNumber":124,"author":{"gitId":"Zjinnnn"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":125,"author":{"gitId":"Zjinnnn"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":126,"author":{"gitId":"Zjinnnn"},"content":"        return new TaskList(keywordTasks);","lastModifiedDate":"2023-08-29"},{"lineNumber":127,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":128,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":129,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":130,"author":{"gitId":"Zjinnnn"},"content":"     * Postpones a time-sensitive task to a new specified deadline.","lastModifiedDate":"2023-09-10"},{"lineNumber":131,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":132,"author":{"gitId":"Zjinnnn"},"content":"     * @param postponeIndex  The index of the task to be postponed.","lastModifiedDate":"2023-09-10"},{"lineNumber":133,"author":{"gitId":"Zjinnnn"},"content":"     * @param deadlineString The new deadline to which the task should be postponed.","lastModifiedDate":"2023-09-10"},{"lineNumber":134,"author":{"gitId":"Zjinnnn"},"content":"     * @return The postponed task.","lastModifiedDate":"2023-09-10"},{"lineNumber":135,"author":{"gitId":"Zjinnnn"},"content":"     * @throws InvalidTaskException          If the provided index does not correspond to a valid task.","lastModifiedDate":"2023-09-10"},{"lineNumber":136,"author":{"gitId":"Zjinnnn"},"content":"     * @throws NotTimeSensitiveTaskException If the task at the given index is not time-sensitive.","lastModifiedDate":"2023-09-10"},{"lineNumber":137,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":138,"author":{"gitId":"Zjinnnn"},"content":"    public Task postponeTimeSensitiveTask(int postponeIndex, String deadlineString) throws InvalidTaskException,","lastModifiedDate":"2023-09-10"},{"lineNumber":139,"author":{"gitId":"Zjinnnn"},"content":"            NotTimeSensitiveTaskException {","lastModifiedDate":"2023-09-10"},{"lineNumber":140,"author":{"gitId":"Zjinnnn"},"content":"        Task task \u003d getTask(postponeIndex);","lastModifiedDate":"2023-09-10"},{"lineNumber":141,"author":{"gitId":"Zjinnnn"},"content":"        if (!(task instanceof TimeSensitiveTask)) {","lastModifiedDate":"2023-09-10"},{"lineNumber":142,"author":{"gitId":"Zjinnnn"},"content":"            throw new NotTimeSensitiveTaskException();","lastModifiedDate":"2023-09-10"},{"lineNumber":143,"author":{"gitId":"Zjinnnn"},"content":"        }","lastModifiedDate":"2023-09-10"},{"lineNumber":144,"author":{"gitId":"Zjinnnn"},"content":"        TimeSensitiveTask postponedTask \u003d (TimeSensitiveTask) task;","lastModifiedDate":"2023-09-10"},{"lineNumber":145,"author":{"gitId":"Zjinnnn"},"content":"        postponedTask.postpone(deadlineString);","lastModifiedDate":"2023-09-10"},{"lineNumber":146,"author":{"gitId":"Zjinnnn"},"content":"        return postponedTask;","lastModifiedDate":"2023-09-10"},{"lineNumber":147,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":148,"author":{"gitId":"Zjinnnn"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"Zjinnnn":148}},{"path":"src/main/java/pooh/TimeSensitiveTask.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"package pooh;","lastModifiedDate":"2023-09-10"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"/**","lastModifiedDate":"2023-09-10"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":" * Represents a task that is time-sensitive. This abstract class provides a foundation","lastModifiedDate":"2023-09-10"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":" * for tasks that have a time component and can be postponed.","lastModifiedDate":"2023-09-10"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":" */","lastModifiedDate":"2023-09-10"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":"public abstract class TimeSensitiveTask extends Task {","lastModifiedDate":"2023-09-10"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":"     * Constructs a TimeSensitiveTask with the specified description.","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":"     * @param description A brief description of the task.","lastModifiedDate":"2023-09-10"},{"lineNumber":13,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":14,"author":{"gitId":"Zjinnnn"},"content":"    TimeSensitiveTask(String description) {","lastModifiedDate":"2023-09-10"},{"lineNumber":15,"author":{"gitId":"Zjinnnn"},"content":"        super(description);","lastModifiedDate":"2023-09-10"},{"lineNumber":16,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":17,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":18,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":19,"author":{"gitId":"Zjinnnn"},"content":"     * Postpones the task to a new specified time.","lastModifiedDate":"2023-09-10"},{"lineNumber":20,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":21,"author":{"gitId":"Zjinnnn"},"content":"     * @param time The new time to which the task should be postponed.","lastModifiedDate":"2023-09-10"},{"lineNumber":22,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":23,"author":{"gitId":"Zjinnnn"},"content":"    public abstract void postpone(String time);","lastModifiedDate":"2023-09-10"},{"lineNumber":24,"author":{"gitId":"Zjinnnn"},"content":"}","lastModifiedDate":"2023-09-10"}],"authorContributionMap":{"Zjinnnn":24}},{"path":"src/main/java/pooh/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"package pooh;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":" * Represents a Todo task.","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":" * This class is a subclass of the Task class and represents","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":" * a todo task, which has a description but no specific timing details.","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"Zjinnnn"},"content":"     * Constructs a new Todo task with the given description.","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"Zjinnnn"},"content":"     * @param description The description of the task.","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"Zjinnnn"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"Zjinnnn"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"Zjinnnn"},"content":"     * Writes the task details to a string in a format suitable for saving to a file.","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"Zjinnnn"},"content":"     * @return A string representing the task\u0027s details in a save-file-friendly format.","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"Zjinnnn"},"content":"    public String writeTaskToFile() {","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"Zjinnnn"},"content":"        return String.format(\"%s | %s | %s\", \"T\",","lastModifiedDate":"2023-08-28"},{"lineNumber":28,"author":{"gitId":"Zjinnnn"},"content":"                this.getIsDone() ? 1 : 0,","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"Zjinnnn"},"content":"                this.getDescription());","lastModifiedDate":"2023-08-28"},{"lineNumber":30,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"Zjinnnn"},"content":"     * Reads a todo task from a string array and returns a Todo object.","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"Zjinnnn"},"content":"     * @param args A string array containing the task details.","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"Zjinnnn"},"content":"     * @return A new Todo object constructed from the provided string array.","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"Zjinnnn"},"content":"    public static Todo readTaskFromFile(String[] args) {","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"Zjinnnn"},"content":"        Todo newTodoTask \u003d new Todo(args[2]);","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"Zjinnnn"},"content":"        if (args[1].equals(\"1\")) {","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"Zjinnnn"},"content":"            newTodoTask.markAsDone();","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"Zjinnnn"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"Zjinnnn"},"content":"        return newTodoTask;","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"Zjinnnn"},"content":"     * Returns a string representation of the task, suitable for user output.","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"Zjinnnn"},"content":"     * @return A string containing the type, status, and description of the task.","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"Zjinnnn"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":52,"author":{"gitId":"Zjinnnn"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":53,"author":{"gitId":"Zjinnnn"},"content":"        return String.format(\"[T]%s\", super.toString());","lastModifiedDate":"2023-08-22"},{"lineNumber":54,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":55,"author":{"gitId":"Zjinnnn"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Zjinnnn":55}},{"path":"src/main/java/pooh/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"package pooh;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"public class Ui {","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":"     * Returns the exit message when the user terminates the chatbot.","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":"     * @return The exit message.","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":"    public String getExitMessage() {","lastModifiedDate":"2023-09-10"},{"lineNumber":11,"author":{"gitId":"Zjinnnn"},"content":"        return \"How lucky I am to have something that makes saying goodbye so hard. Bye!\";","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"Zjinnnn"},"content":"     * Returns the input message as a response.","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"Zjinnnn"},"content":"     * @param message The message to be displayed.","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"Zjinnnn"},"content":"     * @return The input message as a response.","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"Zjinnnn"},"content":"    public String respond(String message) {","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"Zjinnnn"},"content":"        return message;","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"Zjinnnn"},"content":"     * Formats and returns a string representation of the tasks in the provided TaskList.","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"Zjinnnn"},"content":"     * @param taskList The list of tasks.","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"Zjinnnn"},"content":"     * @return A formatted string representation of tasks.","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"Zjinnnn"},"content":"    public String getTasksMessage(TaskList taskList) {","lastModifiedDate":"2023-09-10"},{"lineNumber":31,"author":{"gitId":"Zjinnnn"},"content":"        StringBuilder todoListString \u003d new StringBuilder();","lastModifiedDate":"2023-08-29"},{"lineNumber":32,"author":{"gitId":"Zjinnnn"},"content":"        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"Zjinnnn"},"content":"            String task;","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"Zjinnnn"},"content":"            try {","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"Zjinnnn"},"content":"                task \u003d String.format(\"      %d. \", i + 1) + taskList.getTask(i) + \"\\n\";","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"Zjinnnn"},"content":"            } catch (InvalidTaskException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"Zjinnnn"},"content":"                throw new RuntimeException(e);","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"Zjinnnn"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"Zjinnnn"},"content":"            todoListString.append(task);","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"Zjinnnn"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"Zjinnnn"},"content":"        return \"Here are the tasks in your list:\\n\" + todoListString.toString().stripTrailing();","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"Zjinnnn"},"content":"     * Formats and returns a string of tasks from a given TaskList that match a specific keyword.","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"Zjinnnn"},"content":"     * @param taskList The TaskList containing tasks that match the keyword.","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"Zjinnnn"},"content":"     * @return A formatted string representation of matching tasks.","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":50,"author":{"gitId":"Zjinnnn"},"content":"    public String getKeywordTasksMessage(TaskList taskList) {","lastModifiedDate":"2023-09-10"},{"lineNumber":51,"author":{"gitId":"Zjinnnn"},"content":"        StringBuilder todoListString \u003d new StringBuilder();","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"Zjinnnn"},"content":"        for (int i \u003d 0; i \u003c taskList.getSize(); i++) {","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"Zjinnnn"},"content":"            String task;","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"Zjinnnn"},"content":"            try {","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"Zjinnnn"},"content":"                task \u003d String.format(\"      %d. \", i + 1) + taskList.getTask(i) + \"\\n\";","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"Zjinnnn"},"content":"            } catch (InvalidTaskException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"Zjinnnn"},"content":"                throw new RuntimeException(e);","lastModifiedDate":"2023-08-29"},{"lineNumber":58,"author":{"gitId":"Zjinnnn"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":59,"author":{"gitId":"Zjinnnn"},"content":"            todoListString.append(task);","lastModifiedDate":"2023-08-29"},{"lineNumber":60,"author":{"gitId":"Zjinnnn"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":61,"author":{"gitId":"Zjinnnn"},"content":"        return \"Here are the matching tasks in your list:\" + todoListString.toString().stripTrailing();","lastModifiedDate":"2023-09-05"},{"lineNumber":62,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"Zjinnnn"},"content":"     * Returns a message indicating no tasks matched the specified keyword.","lastModifiedDate":"2023-09-05"},{"lineNumber":66,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":67,"author":{"gitId":"Zjinnnn"},"content":"     * @return Message indicating no matching tasks found.","lastModifiedDate":"2023-09-05"},{"lineNumber":68,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"Zjinnnn"},"content":"    public String getNoKeywordTasksFoundMessage() {","lastModifiedDate":"2023-09-10"},{"lineNumber":70,"author":{"gitId":"Zjinnnn"},"content":"        return \"No matching tasks found.\";","lastModifiedDate":"2023-09-05"},{"lineNumber":71,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"Zjinnnn"},"content":"     * Returns a message indicating a task has been marked as done.","lastModifiedDate":"2023-09-05"},{"lineNumber":75,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":76,"author":{"gitId":"Zjinnnn"},"content":"     * @param task The task that has been marked as done.","lastModifiedDate":"2023-08-29"},{"lineNumber":77,"author":{"gitId":"Zjinnnn"},"content":"     * @return Message indicating task marked as done.","lastModifiedDate":"2023-09-05"},{"lineNumber":78,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":79,"author":{"gitId":"Zjinnnn"},"content":"    public String getTaskDoneMessage(Task task) {","lastModifiedDate":"2023-09-10"},{"lineNumber":80,"author":{"gitId":"Zjinnnn"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n      \" + task;","lastModifiedDate":"2023-09-05"},{"lineNumber":81,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"Zjinnnn"},"content":"     * Returns a message indicating a task has been marked as not done.","lastModifiedDate":"2023-09-05"},{"lineNumber":85,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"Zjinnnn"},"content":"     * @param task The task that has been marked as not done.","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"Zjinnnn"},"content":"     * @return Message indicating task marked as not done.","lastModifiedDate":"2023-09-05"},{"lineNumber":88,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":89,"author":{"gitId":"Zjinnnn"},"content":"    public String getTaskUndoneMessage(Task task) {","lastModifiedDate":"2023-09-10"},{"lineNumber":90,"author":{"gitId":"Zjinnnn"},"content":"        return \"OK, I\u0027ve marked this task as not done yet:\\n      \" + task;","lastModifiedDate":"2023-09-05"},{"lineNumber":91,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":92,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":93,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":94,"author":{"gitId":"Zjinnnn"},"content":"     * Returns a message indicating a task has been added to the TaskList.","lastModifiedDate":"2023-09-05"},{"lineNumber":95,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":96,"author":{"gitId":"Zjinnnn"},"content":"     * @param taskList The updated TaskList.","lastModifiedDate":"2023-09-05"},{"lineNumber":97,"author":{"gitId":"Zjinnnn"},"content":"     * @param task     The task that has been added.","lastModifiedDate":"2023-09-05"},{"lineNumber":98,"author":{"gitId":"Zjinnnn"},"content":"     * @return Message indicating task added.","lastModifiedDate":"2023-09-05"},{"lineNumber":99,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":100,"author":{"gitId":"Zjinnnn"},"content":"    public String getAddTaskMessage(TaskList taskList, Task task) {","lastModifiedDate":"2023-09-10"},{"lineNumber":101,"author":{"gitId":"Zjinnnn"},"content":"        return String.format(\"      Got it. I\u0027ve added this task:\\n          %s\\n      Now you have \" +","lastModifiedDate":"2023-09-05"},{"lineNumber":102,"author":{"gitId":"Zjinnnn"},"content":"                \"%d tasks in the list\", task, taskList.getSize());","lastModifiedDate":"2023-09-05"},{"lineNumber":103,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":104,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":105,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":106,"author":{"gitId":"Zjinnnn"},"content":"     * Returns a message indicating a task has been removed from the TaskList.","lastModifiedDate":"2023-09-05"},{"lineNumber":107,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-09-05"},{"lineNumber":108,"author":{"gitId":"Zjinnnn"},"content":"     * @param taskList The updated TaskList.","lastModifiedDate":"2023-09-05"},{"lineNumber":109,"author":{"gitId":"Zjinnnn"},"content":"     * @param task     The task that has been removed.","lastModifiedDate":"2023-09-05"},{"lineNumber":110,"author":{"gitId":"Zjinnnn"},"content":"     * @return Message indicating task removed.","lastModifiedDate":"2023-09-05"},{"lineNumber":111,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":112,"author":{"gitId":"Zjinnnn"},"content":"    public String getDeleteTaskMessage(TaskList taskList, Task task) {","lastModifiedDate":"2023-09-10"},{"lineNumber":113,"author":{"gitId":"Zjinnnn"},"content":"        return String.format(\"Noted. I\u0027ve removed this task:\\n          %s\\n      Now you have\" +","lastModifiedDate":"2023-09-05"},{"lineNumber":114,"author":{"gitId":"Zjinnnn"},"content":"                \" %d tasks in the list\", task, taskList.getSize());","lastModifiedDate":"2023-09-05"},{"lineNumber":115,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":116,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":117,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":118,"author":{"gitId":"Zjinnnn"},"content":"     * Generates a message indicating that a task has been postponed.","lastModifiedDate":"2023-09-10"},{"lineNumber":119,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":120,"author":{"gitId":"Zjinnnn"},"content":"     * @param postponedTask The task that has been postponed.","lastModifiedDate":"2023-09-10"},{"lineNumber":121,"author":{"gitId":"Zjinnnn"},"content":"     * @return A string message indicating the postponed task.","lastModifiedDate":"2023-09-10"},{"lineNumber":122,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":123,"author":{"gitId":"Zjinnnn"},"content":"    public String getPostponeTaskMessage(Task postponedTask) {","lastModifiedDate":"2023-09-10"},{"lineNumber":124,"author":{"gitId":"Zjinnnn"},"content":"        return \"OK, I have postponed this task:\\n      \" + postponedTask;","lastModifiedDate":"2023-09-10"},{"lineNumber":125,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":126,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-10"},{"lineNumber":127,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-09-10"},{"lineNumber":128,"author":{"gitId":"Zjinnnn"},"content":"     * Generates a message indicating that a task cannot be postponed.","lastModifiedDate":"2023-09-10"},{"lineNumber":129,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-09-10"},{"lineNumber":130,"author":{"gitId":"Zjinnnn"},"content":"     * @return A string message indicating the inability to postpone the task.","lastModifiedDate":"2023-09-10"},{"lineNumber":131,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-09-10"},{"lineNumber":132,"author":{"gitId":"Zjinnnn"},"content":"    public String getUnableToPostponeTaskMessage() {","lastModifiedDate":"2023-09-10"},{"lineNumber":133,"author":{"gitId":"Zjinnnn"},"content":"        return \"Task selected is not time-sensitive! Please select carefully!\";","lastModifiedDate":"2023-09-10"},{"lineNumber":134,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-09-10"},{"lineNumber":135,"author":{"gitId":"Zjinnnn"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"Zjinnnn":135}},{"path":"src/main/java/pooh/UnrecognizedCommandException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"package pooh;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":" * Exception thrown when an unrecognized command is entered by the user.","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":" * This exception is meant to be caught and handled by displaying an appropriate","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":" * error message to guide the user.","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":"public class UnrecognizedCommandException extends PoohException {","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"Zjinnnn"},"content":"     * Returns a string representation of the exception, which can be used","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"Zjinnnn"},"content":"     * to display an error message to the user.","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"Zjinnnn"},"content":"     * @return A string explaining that the command was not recognized.","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"Zjinnnn"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"Zjinnnn"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"Zjinnnn"},"content":"        return \"      ☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\";","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"Zjinnnn"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Zjinnnn":22}},{"path":"src/main/java/pooh/WriteTasksException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"package pooh;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"/**","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":" * Exception thrown when an error occurs during the writing of tasks to a file.","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":" * \u003cp\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":" * This exception should be caught and handled by displaying an appropriate","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":" * error message to inform the user of the failure.","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":" * \u003c/p\u003e","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":" */","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":"public class WriteTasksException extends PoohException {","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":"    /**","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"Zjinnnn"},"content":"     * Returns a string representation of the exception, which can be used","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"Zjinnnn"},"content":"     * to display an error message to the user.","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"Zjinnnn"},"content":"     *","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"Zjinnnn"},"content":"     * @return A string describing the issue encountered during file writing.","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"Zjinnnn"},"content":"     */","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"Zjinnnn"},"content":"    @Override","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"Zjinnnn"},"content":"    public String toString() {","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"Zjinnnn"},"content":"        return \"      An error has occurred whilst writing to file. :-(\";","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"Zjinnnn"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"Zjinnnn":22}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\"","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":"         type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"Zjinnnn"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"/\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\"/\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"Zjinnnn"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"Zjinnnn"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"Zjinnnn"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\"/\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"Zjinnnn"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"Zjinnnn"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"Zjinnnn":17}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\"","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":"            prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"Zjinnnn"},"content":"            fx:controller\u003d\"MainWindow\"\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"Zjinnnn"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\"","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"Zjinnnn"},"content":"                   AnchorPane.bottomAnchor\u003d\"1.0\"/\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"Zjinnnn"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\"","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"Zjinnnn"},"content":"                prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"/\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"Zjinnnn"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\"","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"Zjinnnn"},"content":"                    vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"Zjinnnn"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"Zjinnnn"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\"/\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"Zjinnnn"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"Zjinnnn"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"Zjinnnn"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"Zjinnnn"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"Zjinnnn":24}},{"path":"src/test/java/pooh/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"package pooh;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"import java.util.List;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"Zjinnnn"},"content":"public class TaskListTest {","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"Zjinnnn"},"content":"    public void addTask_emptyDescription_exceptionThrown() {","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"Zjinnnn"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"Zjinnnn"},"content":"            List\u003cTask\u003e taskList \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":16,"author":{"gitId":"Zjinnnn"},"content":"            TaskList taskListTester \u003d new TaskList(taskList);","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"Zjinnnn"},"content":"            TaskList.addTask(taskListTester, \"deadline\", \"\");","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"Zjinnnn"},"content":"            fail(\"Expected exception was not thrown.\");","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"Zjinnnn"},"content":"        } catch (EmptyTaskDescriptorsException ex) {","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"Zjinnnn"},"content":"            assertEquals(\"      ☹ OOPS!!! The description of a todo cannot be empty.\", ex.toString());","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"Zjinnnn"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"Zjinnnn"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"Zjinnnn":23}},{"path":"src/test/java/pooh/TodoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"package pooh;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":"public class TodoTest {","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":"    public void todo_correctInitialisation_toStringCorrect() {","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":"        Todo todo \u003d new Todo(\"buy more honey\");","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"Zjinnnn"},"content":"        assertEquals(\"[T][ ] buy more honey\", todo.toString());","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":13,"author":{"gitId":"Zjinnnn"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"Zjinnnn":13}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"Zjinnnn"},"content":"todo borrow book","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"Zjinnnn"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"Zjinnnn"},"content":"deadline return book /by Sunday","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"Zjinnnn"},"content":"event project meeting /from Mon 2pm /to 4pm","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"Zjinnnn"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"Zjinnnn"},"content":"mark 1","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"Zjinnnn"},"content":"mark 2","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"Zjinnnn"},"content":"unmark 1","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"Zjinnnn"},"content":"unmark 2","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"Zjinnnn"},"content":"mark 3","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"Zjinnnn"},"content":"mark3","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"Zjinnnn"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"Zjinnnn"},"content":"bye","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"Zjinnnn":13}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"Zjinnnn"},"content":"java -classpath ../bin Pooh \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"Zjinnnn":1,"-":37}}]
