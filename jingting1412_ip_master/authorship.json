[{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"jingting1412"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"jingting1412"},"content":"    maven { url \u0027https://oss.sonatype.org/content/repositories/snapshots/\u0027 }","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":15,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":16,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"jingting1412"},"content":"    mainClass.set(\"duke.Duke\")","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":40,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"jingting1412":3,"-":41}},{"path":"duke.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jingting1412"},"content":"T | 1 | something","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"jingting1412"},"content":"D | 1 | read | 2023-10-19","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"jingting1412"},"content":"D | 1 | return | 2003-10-08","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"jingting1412"},"content":"T | 0 | work?","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"jingting1412"},"content":"T | 0 | read books","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"jingting1412"},"content":"E | 0 | reading session | friday - sunday","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"jingting1412"},"content":"T | 1 | hahaha","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"jingting1412":7}},{"path":"src/main/java/duke/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingting1412"},"content":"package duke;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"jingting1412"},"content":"import java.time.LocalDate;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"jingting1412"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"jingting1412"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"jingting1412"},"content":" * Represents a \u003ccode\u003eDeadline\u003c/code\u003e object that extends from \u003ccode\u003eTask\u003c/code\u003e.","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"jingting1412"},"content":" * A \u003ccode\u003eDeadline\u003c/code\u003e object contains a deadline and a description.","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"jingting1412"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"jingting1412"},"content":"public class Deadline extends Task{","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"jingting1412"},"content":"    protected LocalDate deadline;","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":13,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"jingting1412"},"content":"     * Constructs a new \u003ccode\u003eDeadline\u003c/code\u003e object.","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"jingting1412"},"content":"     * @param description a description for the event.","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"jingting1412"},"content":"     * @param deadline the deadline of the event.","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"jingting1412"},"content":"     * @throws DukeException when the user fails to supply a deadline or description.","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"jingting1412"},"content":"    public Deadline(String description, String deadline) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"jingting1412"},"content":"        super(description);","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"jingting1412"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"jingting1412"},"content":"            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(\"yyyy-MM-dd\");","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"jingting1412"},"content":"            LocalDate d1 \u003d LocalDate.parse(deadline, formatter);","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"jingting1412"},"content":"            this.deadline \u003d d1;","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"jingting1412"},"content":"        } catch (Exception e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"jingting1412"},"content":"            throw new DukeException(\"Please provide a deadline in the format yyyy-MM-dd\");","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"jingting1412"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"jingting1412"},"content":"     * Gets the description of the \u003ccode\u003eDeadline\u003c/code\u003e object with the deadline in the format \"MMM dd yyyy\".","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"jingting1412"},"content":"     * @return String representation of the \u003ccode\u003eDeadline\u003c/code\u003e\u003e object to be displayed.","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"jingting1412"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":35,"author":{"gitId":"jingting1412"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-21"},{"lineNumber":36,"author":{"gitId":"jingting1412"},"content":"        String dueDate \u003d this.deadline.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy\"));","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"jingting1412"},"content":"        return \"[D] \" + super.getDescription()","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"jingting1412"},"content":"                + \" (by: \" + dueDate + \")\";","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"jingting1412"},"content":"     * Gets the description of the \u003ccode\u003eDeadline\u003c/code\u003e object.","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"jingting1412"},"content":"     * @return String representation of the \u003ccode\u003eDeadline\u003c/code\u003e object to be saved to the task list file.","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"jingting1412"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"jingting1412"},"content":"    public String getSavedString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"jingting1412"},"content":"        return \"D \" + super.getSavedString() + \" | \" + this.deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":49,"author":{"gitId":"jingting1412"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"jingting1412":49}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingting1412"},"content":"package duke;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"jingting1412"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"jingting1412"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"jingting1412"},"content":" * Represents the Duke chatbot.","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"jingting1412"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"jingting1412"},"content":"public class Duke {","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"jingting1412"},"content":"    private Ui ui;","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"jingting1412"},"content":"    private Storage storage;","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"jingting1412"},"content":"    private TaskList toDo;","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"jingting1412"},"content":"     * Constructs a new \u003ccode\u003eDuke\u003c/code\u003e object.","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"jingting1412"},"content":"     * @param filepath the filepath to specify the filepath to document containing the task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"jingting1412"},"content":"    public Duke(String filepath) {","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"jingting1412"},"content":"        ui \u003d new Ui();","lastModifiedDate":"2023-08-28"},{"lineNumber":19,"author":{"gitId":"jingting1412"},"content":"        storage \u003d new Storage(filepath);","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"jingting1412"},"content":"        toDo \u003d new TaskList();","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"jingting1412"},"content":"     * Runs the Duke chatbot.","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"jingting1412"},"content":"     * @throws DukeException if user enters invalid input.","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"jingting1412"},"content":"    public void run() throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"jingting1412"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"jingting1412"},"content":"        String userCommand;","lastModifiedDate":"2023-08-28"},{"lineNumber":30,"author":{"gitId":"jingting1412"},"content":"        storage.load();","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"jingting1412"},"content":"        ui.helloMsg();","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"jingting1412"},"content":"        userCommand \u003d sc.nextLine();","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":34,"author":{"gitId":"jingting1412"},"content":"        while (!userCommand.equals(\"bye\")) {","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"jingting1412"},"content":"            Parser p \u003d new Parser(userCommand);","lastModifiedDate":"2023-08-28"},{"lineNumber":36,"author":{"gitId":"jingting1412"},"content":"            p.parseAndRespond();","lastModifiedDate":"2023-08-28"},{"lineNumber":37,"author":{"gitId":"jingting1412"},"content":"            userCommand \u003d sc.nextLine();","lastModifiedDate":"2023-08-28"},{"lineNumber":38,"author":{"gitId":"jingting1412"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"jingting1412"},"content":"        ui.goodbyeMsg();","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"jingting1412"},"content":"    public static void main(String[] args) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"jingting1412"},"content":"        Duke dukey \u003d new Duke(\"duke.txt\");","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"jingting1412"},"content":"        dukey.run();","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"jingting1412"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"jingting1412":46}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingting1412"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"jingting1412"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"jingting1412"},"content":" * Catches checked exceptions during the execution of Duke.","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"jingting1412"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"jingting1412"},"content":"public class DukeException extends Exception{","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"jingting1412"},"content":"    public DukeException(String errMsg) {","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"jingting1412"},"content":"        super(errMsg);","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"jingting1412"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"jingting1412":10}},{"path":"src/main/java/duke/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingting1412"},"content":"package duke;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"jingting1412"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"jingting1412"},"content":" * Represents a \u003ccode\u003eEvent\u003c/code\u003e object that extends from \u003ccode\u003eTask\u003c/code\u003e.","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"jingting1412"},"content":" * An \u003ccode\u003eEvent\u003c/code\u003e object contains a description, a start time, and an end time.","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"jingting1412"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"jingting1412"},"content":"public class Event extends Task{","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"jingting1412"},"content":"    protected String startTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"jingting1412"},"content":"    protected String endTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":11,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"jingting1412"},"content":"     * Constructs a new \u003ccode\u003eEvent\u003c/code\u003e object.","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"jingting1412"},"content":"     * @param description the description of the event.","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"jingting1412"},"content":"     * @param startTime the start time of the event.","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"jingting1412"},"content":"     * @param endTime the end time of the event.","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"jingting1412"},"content":"    public Event(String description, String startTime, String endTime) {","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"jingting1412"},"content":"        super(description);","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"jingting1412"},"content":"        this.startTime \u003d startTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":20,"author":{"gitId":"jingting1412"},"content":"        this.endTime \u003d endTime;","lastModifiedDate":"2023-08-21"},{"lineNumber":21,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"jingting1412"},"content":"     * Gets the description of the \u003ccode\u003eEvent\u003c/code\u003e object.","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"jingting1412"},"content":"     * @return String representation of the Event object to be displayed.","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"jingting1412"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":28,"author":{"gitId":"jingting1412"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-21"},{"lineNumber":29,"author":{"gitId":"jingting1412"},"content":"        return \"[E] \" + super.getDescription()","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"jingting1412"},"content":"                + \" (from:\" + this.startTime","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"jingting1412"},"content":"                + \" to:\" + this.endTime + \")\";","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":34,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"jingting1412"},"content":"     * Gets the description of the \u003ccode\u003eEvent\u003c/code\u003e object.","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"jingting1412"},"content":"     * @return String representation of the \u003ccode\u003eEvent\u003c/code\u003e object to be saved to the task list file.","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"jingting1412"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"jingting1412"},"content":"    public String getSavedString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"jingting1412"},"content":"        return \"E \" + super.getSavedString() + \" | \" + this.startTime + \"-\" + this.endTime;","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"jingting1412"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"jingting1412":43}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingting1412"},"content":"package duke;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"jingting1412"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"jingting1412"},"content":" * Parses user command and executes tasks based on user commands.","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"jingting1412"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"jingting1412"},"content":"public class Parser {","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"jingting1412"},"content":"    private String userCommand;","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"jingting1412"},"content":"     * Constructs new \u003ccode\u003eParser\u003c/code\u003e object.","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"jingting1412"},"content":"     * @param command the command taken from user input.","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"jingting1412"},"content":"    public Parser(String command) {","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"jingting1412"},"content":"        this.userCommand \u003d command;","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":16,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"jingting1412"},"content":"     * Parses and responds to the user command.","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"jingting1412"},"content":"     * @throws DukeException when user command is invalid.","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"jingting1412"},"content":"    public void parseAndRespond() throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"jingting1412"},"content":"        String[] splitted \u003d userCommand.split(\" \", 2);","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"jingting1412"},"content":"        switch (splitted[0]) {","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"jingting1412"},"content":"        case \"list\":","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"jingting1412"},"content":"            Ui.listTasks();","lastModifiedDate":"2023-08-28"},{"lineNumber":26,"author":{"gitId":"jingting1412"},"content":"            break;","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"jingting1412"},"content":"        case \"mark\":","lastModifiedDate":"2023-08-28"},{"lineNumber":28,"author":{"gitId":"jingting1412"},"content":"            if (splitted.length \u003c\u003d 1) {","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"jingting1412"},"content":"                throw new DukeException(\"Please indicate which task to mark!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":30,"author":{"gitId":"jingting1412"},"content":"            } else {","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"jingting1412"},"content":"                int task_no \u003d Integer.parseInt(splitted[1]);","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"jingting1412"},"content":"                TaskList.mark(task_no);","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"jingting1412"},"content":"                Storage.save();","lastModifiedDate":"2023-08-28"},{"lineNumber":34,"author":{"gitId":"jingting1412"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"jingting1412"},"content":"            break;","lastModifiedDate":"2023-08-28"},{"lineNumber":36,"author":{"gitId":"jingting1412"},"content":"        case \"unmark\":","lastModifiedDate":"2023-08-28"},{"lineNumber":37,"author":{"gitId":"jingting1412"},"content":"            if (splitted.length \u003c\u003d 1) {","lastModifiedDate":"2023-08-28"},{"lineNumber":38,"author":{"gitId":"jingting1412"},"content":"                throw new DukeException(\"Please indicate which task to unmark!\");","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"jingting1412"},"content":"            } else {","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"jingting1412"},"content":"                int taskNo \u003d Integer.parseInt(splitted[1]);","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"jingting1412"},"content":"                TaskList.unmark(taskNo);","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"jingting1412"},"content":"                Storage.save();","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"jingting1412"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"jingting1412"},"content":"            break;","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"jingting1412"},"content":"        case \"find\" :","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"jingting1412"},"content":"            if (splitted.length \u003c\u003d 1) {","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"jingting1412"},"content":"                throw new DukeException(\"Please provide a term to search for! (⋟﹏⋞)\");","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"jingting1412"},"content":"            } else {","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"jingting1412"},"content":"                String searchTerm \u003d splitted[1];","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"jingting1412"},"content":"                TaskList.searchFor(searchTerm);","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"jingting1412"},"content":"            }","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"jingting1412"},"content":"            break;","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"jingting1412"},"content":"        case \"todo\":","lastModifiedDate":"2023-08-28"},{"lineNumber":54,"author":{"gitId":"jingting1412"},"content":"            if (splitted.length \u003c\u003d 1) {","lastModifiedDate":"2023-08-28"},{"lineNumber":55,"author":{"gitId":"jingting1412"},"content":"                throw new DukeException(\"Please provide a description for this todo! (⋟﹏⋞)\");","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"jingting1412"},"content":"            } else {","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"jingting1412"},"content":"                String todoTask \u003d splitted[1];","lastModifiedDate":"2023-08-28"},{"lineNumber":58,"author":{"gitId":"jingting1412"},"content":"                Todo newTodo \u003d new Todo(todoTask);","lastModifiedDate":"2023-08-28"},{"lineNumber":59,"author":{"gitId":"jingting1412"},"content":"                TaskList.add(newTodo, \"todo\");","lastModifiedDate":"2023-08-28"},{"lineNumber":60,"author":{"gitId":"jingting1412"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":61,"author":{"gitId":"jingting1412"},"content":"            break;","lastModifiedDate":"2023-08-28"},{"lineNumber":62,"author":{"gitId":"jingting1412"},"content":"        case \"deadline\":","lastModifiedDate":"2023-08-28"},{"lineNumber":63,"author":{"gitId":"jingting1412"},"content":"            if (splitted.length \u003c\u003d 1) {","lastModifiedDate":"2023-08-28"},{"lineNumber":64,"author":{"gitId":"jingting1412"},"content":"                throw new DukeException(\"Please provide a description for this deadline! (⋟﹏⋞)\");","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"jingting1412"},"content":"            } else {","lastModifiedDate":"2023-08-28"},{"lineNumber":66,"author":{"gitId":"jingting1412"},"content":"                String[] deadTask \u003d splitted[1].split(\"/by\");","lastModifiedDate":"2023-08-28"},{"lineNumber":67,"author":{"gitId":"jingting1412"},"content":"                if (deadTask.length \u003d\u003d 1) {","lastModifiedDate":"2023-08-28"},{"lineNumber":68,"author":{"gitId":"jingting1412"},"content":"                    throw new DukeException(\"Please provide a deadline! (⋟﹏⋞)\");","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"jingting1412"},"content":"                } else {","lastModifiedDate":"2023-08-28"},{"lineNumber":70,"author":{"gitId":"jingting1412"},"content":"                    String deadDescription \u003d deadTask[0];","lastModifiedDate":"2023-08-28"},{"lineNumber":71,"author":{"gitId":"jingting1412"},"content":"                    String deadTime \u003d deadTask[1];","lastModifiedDate":"2023-08-28"},{"lineNumber":72,"author":{"gitId":"jingting1412"},"content":"                    deadTime \u003d deadTime.trim();","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"jingting1412"},"content":"                    Deadline deadlineTask \u003d new Deadline(deadDescription, deadTime);","lastModifiedDate":"2023-08-28"},{"lineNumber":74,"author":{"gitId":"jingting1412"},"content":"                    TaskList.add(deadlineTask, \"deadline\");","lastModifiedDate":"2023-08-28"},{"lineNumber":75,"author":{"gitId":"jingting1412"},"content":"                }","lastModifiedDate":"2023-08-28"},{"lineNumber":76,"author":{"gitId":"jingting1412"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":77,"author":{"gitId":"jingting1412"},"content":"            break;","lastModifiedDate":"2023-08-28"},{"lineNumber":78,"author":{"gitId":"jingting1412"},"content":"        case \"event\":","lastModifiedDate":"2023-08-28"},{"lineNumber":79,"author":{"gitId":"jingting1412"},"content":"            if (splitted.length \u003c\u003d 1) {","lastModifiedDate":"2023-08-28"},{"lineNumber":80,"author":{"gitId":"jingting1412"},"content":"                throw new DukeException(\"Please provide a description for this deadline! (⋟﹏⋞)\");","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"jingting1412"},"content":"            } else {","lastModifiedDate":"2023-08-28"},{"lineNumber":82,"author":{"gitId":"jingting1412"},"content":"                String[] eventTask \u003d splitted[1].split(\"/from\");","lastModifiedDate":"2023-08-28"},{"lineNumber":83,"author":{"gitId":"jingting1412"},"content":"                if (eventTask.length \u003d\u003d 1) {","lastModifiedDate":"2023-08-28"},{"lineNumber":84,"author":{"gitId":"jingting1412"},"content":"                    throw new DukeException(\"Please provide a start time! (⋟﹏⋞)\");","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"jingting1412"},"content":"                } else {","lastModifiedDate":"2023-08-28"},{"lineNumber":86,"author":{"gitId":"jingting1412"},"content":"                    String eventDescription \u003d eventTask[0];","lastModifiedDate":"2023-08-28"},{"lineNumber":87,"author":{"gitId":"jingting1412"},"content":"                    String[] startEnd \u003d eventTask[1].split(\"/to\");","lastModifiedDate":"2023-08-28"},{"lineNumber":88,"author":{"gitId":"jingting1412"},"content":"                    if (startEnd.length \u003d\u003d 1) {","lastModifiedDate":"2023-08-28"},{"lineNumber":89,"author":{"gitId":"jingting1412"},"content":"                        throw new DukeException(\"Please provide an end time! (⋟﹏⋞)\");","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"jingting1412"},"content":"                    } else {","lastModifiedDate":"2023-08-28"},{"lineNumber":91,"author":{"gitId":"jingting1412"},"content":"                        String eventStart \u003d startEnd[0];","lastModifiedDate":"2023-08-28"},{"lineNumber":92,"author":{"gitId":"jingting1412"},"content":"                        String eventEnd \u003d startEnd[1];","lastModifiedDate":"2023-08-28"},{"lineNumber":93,"author":{"gitId":"jingting1412"},"content":"                        Event newEvent \u003d new Event(eventDescription, eventStart, eventEnd);","lastModifiedDate":"2023-08-28"},{"lineNumber":94,"author":{"gitId":"jingting1412"},"content":"                        TaskList.add(newEvent, \"event\");","lastModifiedDate":"2023-08-28"},{"lineNumber":95,"author":{"gitId":"jingting1412"},"content":"                    }","lastModifiedDate":"2023-08-28"},{"lineNumber":96,"author":{"gitId":"jingting1412"},"content":"                }","lastModifiedDate":"2023-08-28"},{"lineNumber":97,"author":{"gitId":"jingting1412"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":98,"author":{"gitId":"jingting1412"},"content":"            break;","lastModifiedDate":"2023-08-28"},{"lineNumber":99,"author":{"gitId":"jingting1412"},"content":"        case \"delete\":","lastModifiedDate":"2023-08-28"},{"lineNumber":100,"author":{"gitId":"jingting1412"},"content":"            if (splitted.length \u003c\u003d 1) {","lastModifiedDate":"2023-08-28"},{"lineNumber":101,"author":{"gitId":"jingting1412"},"content":"                throw new DukeException(\"You do not have that much tasks! (⋟﹏⋞)\");","lastModifiedDate":"2023-08-29"},{"lineNumber":102,"author":{"gitId":"jingting1412"},"content":"            } else {","lastModifiedDate":"2023-08-28"},{"lineNumber":103,"author":{"gitId":"jingting1412"},"content":"                int target \u003d Integer.parseInt(splitted[1]);","lastModifiedDate":"2023-08-28"},{"lineNumber":104,"author":{"gitId":"jingting1412"},"content":"                TaskList.delete(target);","lastModifiedDate":"2023-08-28"},{"lineNumber":105,"author":{"gitId":"jingting1412"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":106,"author":{"gitId":"jingting1412"},"content":"            break;","lastModifiedDate":"2023-08-28"},{"lineNumber":107,"author":{"gitId":"jingting1412"},"content":"        default:","lastModifiedDate":"2023-08-28"},{"lineNumber":108,"author":{"gitId":"jingting1412"},"content":"            throw new DukeException(\"Huhhhhhhh??? (o_O) ? \" +","lastModifiedDate":"2023-08-30"},{"lineNumber":109,"author":{"gitId":"jingting1412"},"content":"                    \"Please use one of the command words: todo, event, deadline, list, mark, unmark, delete, bye\");","lastModifiedDate":"2023-08-30"},{"lineNumber":110,"author":{"gitId":"jingting1412"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":111,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":112,"author":{"gitId":"jingting1412"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"jingting1412":112}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingting1412"},"content":"package duke;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"jingting1412"},"content":"import java.io.File;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"jingting1412"},"content":"import java.io.FileNotFoundException;","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"jingting1412"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-28"},{"lineNumber":6,"author":{"gitId":"jingting1412"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"jingting1412"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-28"},{"lineNumber":8,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"jingting1412"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"jingting1412"},"content":" * Deals with loading tasks from the file in the user\u0027s hard disk and saving tasks in the file.","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"jingting1412"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"jingting1412"},"content":"public class Storage {","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"jingting1412"},"content":"    private static File taskList;","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"jingting1412"},"content":"    private static String filepath;","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":16,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"jingting1412"},"content":"     * Constructs new \u003ccode\u003eStorage\u003c/code\u003e object.","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"jingting1412"},"content":"     * @param filepath the filepath to the file that stores existing tasks. New file created if the file specified does not exist at the start.","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"jingting1412"},"content":"    public Storage(String filepath) {","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"jingting1412"},"content":"        File tasks \u003d new File(filepath);","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"jingting1412"},"content":"        if (!tasks.exists()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"jingting1412"},"content":"            try {","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"jingting1412"},"content":"                tasks.createNewFile();","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"jingting1412"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":26,"author":{"gitId":"jingting1412"},"content":"                System.out.println(\"File cannot be created!\");","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"jingting1412"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":28,"author":{"gitId":"jingting1412"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"jingting1412"},"content":"        this.taskList \u003d tasks;","lastModifiedDate":"2023-08-28"},{"lineNumber":30,"author":{"gitId":"jingting1412"},"content":"        this.filepath \u003d filepath;","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"jingting1412"},"content":"     * Loads data from the hard disk when the chatbot starts up.","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"jingting1412"},"content":"     * Saves any pre-existing tasks in the file to the task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"jingting1412"},"content":"     * @throws DukeException when data from the file cannot be converted to a \u003ccode\u003eTask\u003c/code\u003e object.","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"jingting1412"},"content":"    public static void load() throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"jingting1412"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"jingting1412"},"content":"            Scanner s \u003d new Scanner(taskList);","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"jingting1412"},"content":"            String savedStrings;","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"jingting1412"},"content":"            while (s.hasNextLine()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":43,"author":{"gitId":"jingting1412"},"content":"                savedStrings \u003d s.nextLine();","lastModifiedDate":"2023-08-28"},{"lineNumber":44,"author":{"gitId":"jingting1412"},"content":"                String[] arr \u003d savedStrings.split(\"\\\\|\");","lastModifiedDate":"2023-08-28"},{"lineNumber":45,"author":{"gitId":"jingting1412"},"content":"                for (int i \u003d 0; i \u003c arr.length; i++) {","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"jingting1412"},"content":"                    arr[i] \u003d arr[i].trim();","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"jingting1412"},"content":"                }","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"jingting1412"},"content":"                String taskType \u003d arr[0];","lastModifiedDate":"2023-08-28"},{"lineNumber":49,"author":{"gitId":"jingting1412"},"content":"                switch (taskType) {","lastModifiedDate":"2023-08-28"},{"lineNumber":50,"author":{"gitId":"jingting1412"},"content":"                case \"T\":","lastModifiedDate":"2023-08-28"},{"lineNumber":51,"author":{"gitId":"jingting1412"},"content":"                    Todo t \u003d new Todo(arr[2]);","lastModifiedDate":"2023-08-28"},{"lineNumber":52,"author":{"gitId":"jingting1412"},"content":"                    if (arr[1].equals(\"1\")) {","lastModifiedDate":"2023-08-28"},{"lineNumber":53,"author":{"gitId":"jingting1412"},"content":"                        t.mark();","lastModifiedDate":"2023-08-28"},{"lineNumber":54,"author":{"gitId":"jingting1412"},"content":"                    }","lastModifiedDate":"2023-08-28"},{"lineNumber":55,"author":{"gitId":"jingting1412"},"content":"                    TaskList.add(t);","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"jingting1412"},"content":"                    break;","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"jingting1412"},"content":"                case \"D\":","lastModifiedDate":"2023-08-28"},{"lineNumber":58,"author":{"gitId":"jingting1412"},"content":"                    Deadline d \u003d new Deadline(arr[2], arr[3]);","lastModifiedDate":"2023-08-28"},{"lineNumber":59,"author":{"gitId":"jingting1412"},"content":"                    if (arr[1].equals(\"1\")) {","lastModifiedDate":"2023-08-28"},{"lineNumber":60,"author":{"gitId":"jingting1412"},"content":"                        d.mark();","lastModifiedDate":"2023-08-28"},{"lineNumber":61,"author":{"gitId":"jingting1412"},"content":"                    }","lastModifiedDate":"2023-08-28"},{"lineNumber":62,"author":{"gitId":"jingting1412"},"content":"                    TaskList.add(d);","lastModifiedDate":"2023-08-28"},{"lineNumber":63,"author":{"gitId":"jingting1412"},"content":"                    break;","lastModifiedDate":"2023-08-28"},{"lineNumber":64,"author":{"gitId":"jingting1412"},"content":"                case\"E\":","lastModifiedDate":"2023-08-28"},{"lineNumber":65,"author":{"gitId":"jingting1412"},"content":"                    String startEnd \u003d arr[3];","lastModifiedDate":"2023-08-28"},{"lineNumber":66,"author":{"gitId":"jingting1412"},"content":"                    String[] duration \u003d startEnd.split(\"-\");","lastModifiedDate":"2023-08-28"},{"lineNumber":67,"author":{"gitId":"jingting1412"},"content":"                    String start \u003d duration[0];","lastModifiedDate":"2023-08-28"},{"lineNumber":68,"author":{"gitId":"jingting1412"},"content":"                    String end \u003d duration[1];","lastModifiedDate":"2023-08-28"},{"lineNumber":69,"author":{"gitId":"jingting1412"},"content":"                    Event e \u003d new Event(arr[2], start, end);","lastModifiedDate":"2023-08-28"},{"lineNumber":70,"author":{"gitId":"jingting1412"},"content":"                    if (arr[1].equals(\"1\")) {","lastModifiedDate":"2023-08-28"},{"lineNumber":71,"author":{"gitId":"jingting1412"},"content":"                        e.mark();","lastModifiedDate":"2023-08-28"},{"lineNumber":72,"author":{"gitId":"jingting1412"},"content":"                    }","lastModifiedDate":"2023-08-28"},{"lineNumber":73,"author":{"gitId":"jingting1412"},"content":"                    TaskList.add(e);","lastModifiedDate":"2023-08-28"},{"lineNumber":74,"author":{"gitId":"jingting1412"},"content":"                    break;","lastModifiedDate":"2023-08-28"},{"lineNumber":75,"author":{"gitId":"jingting1412"},"content":"                default:","lastModifiedDate":"2023-08-28"},{"lineNumber":76,"author":{"gitId":"jingting1412"},"content":"                    System.out.println(\"Wrong input recognised :((\");","lastModifiedDate":"2023-08-28"},{"lineNumber":77,"author":{"gitId":"jingting1412"},"content":"                }","lastModifiedDate":"2023-08-28"},{"lineNumber":78,"author":{"gitId":"jingting1412"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":79,"author":{"gitId":"jingting1412"},"content":"        } catch (FileNotFoundException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":80,"author":{"gitId":"jingting1412"},"content":"            throw new RuntimeException(e);","lastModifiedDate":"2023-08-28"},{"lineNumber":81,"author":{"gitId":"jingting1412"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":82,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":83,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":84,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"jingting1412"},"content":"     * Saves the tasks in the hard disk automatically whenever the task list changes.","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"jingting1412"},"content":"    public static void save() {","lastModifiedDate":"2023-08-28"},{"lineNumber":88,"author":{"gitId":"jingting1412"},"content":"        try {","lastModifiedDate":"2023-08-28"},{"lineNumber":89,"author":{"gitId":"jingting1412"},"content":"            FileWriter writer \u003d new FileWriter(filepath);","lastModifiedDate":"2023-08-28"},{"lineNumber":90,"author":{"gitId":"jingting1412"},"content":"            for (Task t : TaskList.toDo) {","lastModifiedDate":"2023-08-28"},{"lineNumber":91,"author":{"gitId":"jingting1412"},"content":"                writer.write(t.getSavedString() + \"\\n\");","lastModifiedDate":"2023-08-30"},{"lineNumber":92,"author":{"gitId":"jingting1412"},"content":"            }","lastModifiedDate":"2023-08-28"},{"lineNumber":93,"author":{"gitId":"jingting1412"},"content":"            writer.close();","lastModifiedDate":"2023-08-28"},{"lineNumber":94,"author":{"gitId":"jingting1412"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-28"},{"lineNumber":95,"author":{"gitId":"jingting1412"},"content":"            System.out.println(\"Cannot save to file :(\");","lastModifiedDate":"2023-08-28"},{"lineNumber":96,"author":{"gitId":"jingting1412"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-08-28"},{"lineNumber":97,"author":{"gitId":"jingting1412"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":98,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":99,"author":{"gitId":"jingting1412"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"jingting1412":99}},{"path":"src/main/java/duke/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingting1412"},"content":"package duke;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"jingting1412"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"jingting1412"},"content":" * Represents a Task object.","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"jingting1412"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"jingting1412"},"content":"public class Task {","lastModifiedDate":"2023-08-21"},{"lineNumber":7,"author":{"gitId":"jingting1412"},"content":"    protected String description;","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"jingting1412"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":10,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"jingting1412"},"content":"     * Constructs a new \u003ccode\u003eTask\u003c/code\u003e object.","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"jingting1412"},"content":"     * @param description the description given by user.","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"jingting1412"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"jingting1412"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"jingting1412"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":18,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":19,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"jingting1412"},"content":"     * Changes the boolean \u003ccode\u003eisDone\u003c/code\u003e to true.","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"jingting1412"},"content":"    public void mark() {","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"jingting1412"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"jingting1412"},"content":"     * Changes the boolean \u003ccode\u003eisDone\u003c/code\u003e to false.","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"jingting1412"},"content":"    public void unmark() {","lastModifiedDate":"2023-08-21"},{"lineNumber":30,"author":{"gitId":"jingting1412"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-21"},{"lineNumber":31,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":32,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":33,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"jingting1412"},"content":"     * Gets the description of the task to be displayed to the user.","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"jingting1412"},"content":"     * @return String representation of the task to be displayed.","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"jingting1412"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-21"},{"lineNumber":38,"author":{"gitId":"jingting1412"},"content":"        return this.isDone ? \"[X] \" + this.description: \"[ ] \" + this.description;","lastModifiedDate":"2023-08-21"},{"lineNumber":39,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":40,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"jingting1412"},"content":"     * Gets the description of the task to be saved to the hard disk.","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"jingting1412"},"content":"     * @return String representation of the task to be saved.","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"jingting1412"},"content":"    public String getSavedString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"jingting1412"},"content":"        String status \u003d this.isDone ? \"1\" : \"0\";","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"jingting1412"},"content":"        return \"| \" + status + \" | \" + this.description;","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":49,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"jingting1412"},"content":"     * Checks if a search term is in the description of a task.","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"jingting1412"},"content":"     * @param term the term to check for in the task description.","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"jingting1412"},"content":"     * @return returns true if the term is in the task description and false if the term is not in the task description","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"jingting1412"},"content":"    public boolean checkTerm(String term) {","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"jingting1412"},"content":"        return this.description.toLowerCase().contains(term.toLowerCase());","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"jingting1412"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"jingting1412":58}},{"path":"src/main/java/duke/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingting1412"},"content":"package duke;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":3,"author":{"gitId":"jingting1412"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-28"},{"lineNumber":4,"author":{"gitId":"jingting1412"},"content":"import java.util.List;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"jingting1412"},"content":"import java.util.stream.Collectors;","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":7,"author":{"gitId":"jingting1412"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"jingting1412"},"content":" * Represents a task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"jingting1412"},"content":" * Contains all current tasks and contain methods to add/delete/mark/unmark a specific task.","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"jingting1412"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"jingting1412"},"content":"public class TaskList {","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"jingting1412"},"content":"    protected static ArrayList\u003cTask\u003e toDo;","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"jingting1412"},"content":"     * Constructs a new \u003ccode\u003eTaskList\u003c/code\u003e object.","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"jingting1412"},"content":"    public TaskList() {","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"jingting1412"},"content":"        toDo \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":20,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":21,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"jingting1412"},"content":"     * Adds a new task to the task list from user input.","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"jingting1412"},"content":"     * @param task the task to add into task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"jingting1412"},"content":"     * @param type type of task added.","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"jingting1412"},"content":"    public static void add(Task task, String type) {","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"jingting1412"},"content":"        toDo.add(task);","lastModifiedDate":"2023-08-28"},{"lineNumber":28,"author":{"gitId":"jingting1412"},"content":"        String description \u003d task.getDescription();","lastModifiedDate":"2023-08-28"},{"lineNumber":29,"author":{"gitId":"jingting1412"},"content":"        Ui.successfulAdd(type, description, toDo.size());","lastModifiedDate":"2023-08-28"},{"lineNumber":30,"author":{"gitId":"jingting1412"},"content":"        Storage.save();","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"jingting1412"},"content":"     * Adds a new task to the task list from the hard disk when chatbot starts up.","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"jingting1412"},"content":"     * @param task the task from the file in the hard disk to be loaded into the task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"jingting1412"},"content":"    public static void add(Task task) {","lastModifiedDate":"2023-08-28"},{"lineNumber":38,"author":{"gitId":"jingting1412"},"content":"        toDo.add(task);","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"jingting1412"},"content":"     * Deletes a specific task from the task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"jingting1412"},"content":"     * @param target the index of the task in the task list that should be deleted.","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"jingting1412"},"content":"     * @throws DukeException throws exception when the index of the task given is larger than the size of the task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"jingting1412"},"content":"    public static void delete(Integer target) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"jingting1412"},"content":"        if (target \u003c\u003d toDo.size()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"jingting1412"},"content":"            Task toDelete \u003d toDo.get(target - 1);","lastModifiedDate":"2023-08-28"},{"lineNumber":49,"author":{"gitId":"jingting1412"},"content":"            String description \u003d toDelete.getDescription();","lastModifiedDate":"2023-08-28"},{"lineNumber":50,"author":{"gitId":"jingting1412"},"content":"            toDo.remove(target - 1);","lastModifiedDate":"2023-08-28"},{"lineNumber":51,"author":{"gitId":"jingting1412"},"content":"            Ui.successfulDelete(description, toDo.size());","lastModifiedDate":"2023-08-28"},{"lineNumber":52,"author":{"gitId":"jingting1412"},"content":"            Storage.save();","lastModifiedDate":"2023-08-28"},{"lineNumber":53,"author":{"gitId":"jingting1412"},"content":"        } else {","lastModifiedDate":"2023-08-28"},{"lineNumber":54,"author":{"gitId":"jingting1412"},"content":"            throw new DukeException(\"You do not have that many tasks! (⋟﹏⋞)\");","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"jingting1412"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":58,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"jingting1412"},"content":"     * Marks the specified task.","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"jingting1412"},"content":"     * @param task_no the index of the task in the task list to be marked.","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"jingting1412"},"content":"     * @throws DukeException exception thrown when the \u003ccode\u003etask_no\u003c/code\u003e given exceeds the size of the task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"jingting1412"},"content":"    public static void mark(Integer task_no) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"jingting1412"},"content":"        if (task_no \u003c\u003d toDo.size()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":65,"author":{"gitId":"jingting1412"},"content":"            Task target \u003d toDo.get(task_no - 1);","lastModifiedDate":"2023-08-28"},{"lineNumber":66,"author":{"gitId":"jingting1412"},"content":"            target.mark();","lastModifiedDate":"2023-08-28"},{"lineNumber":67,"author":{"gitId":"jingting1412"},"content":"            String description \u003d target.getDescription();","lastModifiedDate":"2023-08-28"},{"lineNumber":68,"author":{"gitId":"jingting1412"},"content":"            Ui.markMsg(description);","lastModifiedDate":"2023-08-28"},{"lineNumber":69,"author":{"gitId":"jingting1412"},"content":"            Storage.save();","lastModifiedDate":"2023-08-28"},{"lineNumber":70,"author":{"gitId":"jingting1412"},"content":"        } else {","lastModifiedDate":"2023-08-28"},{"lineNumber":71,"author":{"gitId":"jingting1412"},"content":"            throw new DukeException(\"You do not have that many tasks! (⋟﹏⋞)\");","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"jingting1412"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":73,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":74,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":75,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"jingting1412"},"content":"     * Unmarks the specified task.","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"jingting1412"},"content":"     * @param taskNo the index of the task in the task list to be unmarked.","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"jingting1412"},"content":"     * @throws DukeException exception thrown when the \u003ccode\u003etaskNo\u003c/code\u003e given exceeds the size of the task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"jingting1412"},"content":"    public static void unmark(Integer taskNo) throws DukeException {","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"jingting1412"},"content":"        if (taskNo \u003c\u003d toDo.size()) {","lastModifiedDate":"2023-08-28"},{"lineNumber":82,"author":{"gitId":"jingting1412"},"content":"            Task target \u003d toDo.get(taskNo - 1);","lastModifiedDate":"2023-08-28"},{"lineNumber":83,"author":{"gitId":"jingting1412"},"content":"            target.unmark();","lastModifiedDate":"2023-08-28"},{"lineNumber":84,"author":{"gitId":"jingting1412"},"content":"            String description \u003d target.getDescription();","lastModifiedDate":"2023-08-28"},{"lineNumber":85,"author":{"gitId":"jingting1412"},"content":"            Ui.unmarkMsg(description);","lastModifiedDate":"2023-08-28"},{"lineNumber":86,"author":{"gitId":"jingting1412"},"content":"            Storage.save();","lastModifiedDate":"2023-08-28"},{"lineNumber":87,"author":{"gitId":"jingting1412"},"content":"        } else {","lastModifiedDate":"2023-08-28"},{"lineNumber":88,"author":{"gitId":"jingting1412"},"content":"            throw new DukeException(\"You do not have that many tasks! (⋟﹏⋞)\");","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"jingting1412"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":90,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":91,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":92,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":93,"author":{"gitId":"jingting1412"},"content":"     * Displays all the tasks currently in the task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":95,"author":{"gitId":"jingting1412"},"content":"    public static void listOut() {","lastModifiedDate":"2023-08-28"},{"lineNumber":96,"author":{"gitId":"jingting1412"},"content":"        for (int i \u003d 0; i \u003c toDo.size(); i++) {","lastModifiedDate":"2023-08-28"},{"lineNumber":97,"author":{"gitId":"jingting1412"},"content":"            Task currTask \u003d toDo.get(i);","lastModifiedDate":"2023-08-28"},{"lineNumber":98,"author":{"gitId":"jingting1412"},"content":"            String description \u003d currTask.getDescription();","lastModifiedDate":"2023-08-28"},{"lineNumber":99,"author":{"gitId":"jingting1412"},"content":"            System.out.println(\"        \" + (i + 1) + \".\" + description);","lastModifiedDate":"2023-08-29"},{"lineNumber":100,"author":{"gitId":"jingting1412"},"content":"        }","lastModifiedDate":"2023-08-28"},{"lineNumber":101,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":102,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":103,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-31"},{"lineNumber":104,"author":{"gitId":"jingting1412"},"content":"     * Searches for a task in the task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":105,"author":{"gitId":"jingting1412"},"content":"     * @param searchTerm the term to search for in the task list.","lastModifiedDate":"2023-08-31"},{"lineNumber":106,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"jingting1412"},"content":"    public static void searchFor(String searchTerm) {","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"jingting1412"},"content":"        List\u003cTask\u003e result \u003d toDo.stream()","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"jingting1412"},"content":"                .filter(task -\u003e task.checkTerm(searchTerm))","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"jingting1412"},"content":"                .collect(Collectors.toList());","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"jingting1412"},"content":"        System.out.println(\"        ____________________________________________________________\"","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"jingting1412"},"content":"                + \"\\n        Here are the matching tasks in your list: (≧▽≦)\");","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"jingting1412"},"content":"        for (int i \u003d 0; i \u003c result.size(); i++) {","lastModifiedDate":"2023-08-31"},{"lineNumber":114,"author":{"gitId":"jingting1412"},"content":"            Task currTask \u003d result.get(i);","lastModifiedDate":"2023-08-31"},{"lineNumber":115,"author":{"gitId":"jingting1412"},"content":"            String description \u003d currTask.getDescription();","lastModifiedDate":"2023-08-31"},{"lineNumber":116,"author":{"gitId":"jingting1412"},"content":"            System.out.println(\"        \" + (i + 1) + \".\" + description);","lastModifiedDate":"2023-08-31"},{"lineNumber":117,"author":{"gitId":"jingting1412"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":118,"author":{"gitId":"jingting1412"},"content":"        System.out.println(\"        ____________________________________________________________\");","lastModifiedDate":"2023-08-31"},{"lineNumber":119,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":120,"author":{"gitId":"jingting1412"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"jingting1412":120}},{"path":"src/main/java/duke/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingting1412"},"content":"package duke;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"jingting1412"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"jingting1412"},"content":" * Represents a \u003ccode\u003eTodo\u003c/code\u003e object that extends from \u003ccode\u003eTask\u003c/code\u003e.","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"jingting1412"},"content":" * A \u003ccode\u003eTodo\u003c/code\u003e object contains a description.","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"jingting1412"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"jingting1412"},"content":"public class Todo extends Task{","lastModifiedDate":"2023-08-21"},{"lineNumber":8,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":9,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"jingting1412"},"content":"     * Constructs a new \u003ccode\u003eTodo\u003c/code\u003e object.","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"jingting1412"},"content":"     * @param description the description of the task.","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"jingting1412"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-08-21"},{"lineNumber":14,"author":{"gitId":"jingting1412"},"content":"        super(description);","lastModifiedDate":"2023-08-21"},{"lineNumber":15,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":16,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":17,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"jingting1412"},"content":"     * Gets the description of the \u003ccode\u003eTodo\u003c/code\u003e object.","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"jingting1412"},"content":"     * @return String representation of the \u003ccode\u003eTodo\u003c/code\u003e object to be displayed.","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"jingting1412"},"content":"    @Override","lastModifiedDate":"2023-08-21"},{"lineNumber":22,"author":{"gitId":"jingting1412"},"content":"    public String getDescription() {","lastModifiedDate":"2023-08-21"},{"lineNumber":23,"author":{"gitId":"jingting1412"},"content":"        return \"[T] \" + super.getDescription();","lastModifiedDate":"2023-08-21"},{"lineNumber":24,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-21"},{"lineNumber":25,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-21"},{"lineNumber":26,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"jingting1412"},"content":"     * Gets the description of the \u003ccode\u003eTodo\u003c/code\u003e object.","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"jingting1412"},"content":"     * @return String representation of the \u003ccode\u003eTodo\u003c/code\u003e object to save to file.","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"jingting1412"},"content":"    @Override","lastModifiedDate":"2023-08-28"},{"lineNumber":31,"author":{"gitId":"jingting1412"},"content":"    public String getSavedString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"jingting1412"},"content":"        return \"T \" + super.getSavedString();","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":34,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"jingting1412"},"content":"}","lastModifiedDate":"2023-08-21"}],"authorContributionMap":{"jingting1412":35}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingting1412"},"content":"package duke;","lastModifiedDate":"2023-08-28"},{"lineNumber":2,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"jingting1412"},"content":"import java.util.List;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":5,"author":{"gitId":"jingting1412"},"content":"/**","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"jingting1412"},"content":" * Deals with user interactions.","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"jingting1412"},"content":" */","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"jingting1412"},"content":"public class Ui {","lastModifiedDate":"2023-08-28"},{"lineNumber":9,"author":{"gitId":"jingting1412"},"content":"    //this is the new name for my chatbot","lastModifiedDate":"2023-08-28"},{"lineNumber":10,"author":{"gitId":"jingting1412"},"content":"    private static String name;","lastModifiedDate":"2023-08-28"},{"lineNumber":11,"author":{"gitId":"jingting1412"},"content":"    //these are the lines","lastModifiedDate":"2023-08-28"},{"lineNumber":12,"author":{"gitId":"jingting1412"},"content":"    private static String lines;","lastModifiedDate":"2023-08-28"},{"lineNumber":13,"author":{"gitId":"jingting1412"},"content":"    //this will be the greeting","lastModifiedDate":"2023-08-28"},{"lineNumber":14,"author":{"gitId":"jingting1412"},"content":"    private static String greeting;","lastModifiedDate":"2023-08-28"},{"lineNumber":15,"author":{"gitId":"jingting1412"},"content":"    //this will be goodbye","lastModifiedDate":"2023-08-28"},{"lineNumber":16,"author":{"gitId":"jingting1412"},"content":"    private static String goodbye;","lastModifiedDate":"2023-08-28"},{"lineNumber":17,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":18,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"jingting1412"},"content":"     * Constructs a new \u003ccode\u003eUi\u003c/code\u003e object.","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"jingting1412"},"content":"    public Ui() {","lastModifiedDate":"2023-08-28"},{"lineNumber":22,"author":{"gitId":"jingting1412"},"content":"        name \u003d \"dukey\";","lastModifiedDate":"2023-08-28"},{"lineNumber":23,"author":{"gitId":"jingting1412"},"content":"        lines \u003d \"        ____________________________________________________________\";","lastModifiedDate":"2023-08-28"},{"lineNumber":24,"author":{"gitId":"jingting1412"},"content":"        greeting \u003d \"        Hello! I\u0027m \" + name + \"\\n        What can I do for you?\\n\";","lastModifiedDate":"2023-08-28"},{"lineNumber":25,"author":{"gitId":"jingting1412"},"content":"        goodbye \u003d \"        Bye. Hope to see you again soon! :D\\n\";","lastModifiedDate":"2023-08-28"},{"lineNumber":26,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":27,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"jingting1412"},"content":"     * Prints out the hello message when the chatbot first starts.","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"jingting1412"},"content":"    public static void helloMsg() {","lastModifiedDate":"2023-08-28"},{"lineNumber":32,"author":{"gitId":"jingting1412"},"content":"        System.out.println(lines + \"\\n\" + greeting + lines);","lastModifiedDate":"2023-08-28"},{"lineNumber":33,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":34,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":35,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"jingting1412"},"content":"     * Prints out the goodbye message.","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"jingting1412"},"content":"    public static void goodbyeMsg() {","lastModifiedDate":"2023-08-28"},{"lineNumber":39,"author":{"gitId":"jingting1412"},"content":"        System.out.println(lines + \"\\n\" + goodbye + lines);","lastModifiedDate":"2023-08-28"},{"lineNumber":40,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":41,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":42,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"jingting1412"},"content":"     * Displays all current tasks in the task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"jingting1412"},"content":"    public static void listTasks() {","lastModifiedDate":"2023-08-28"},{"lineNumber":46,"author":{"gitId":"jingting1412"},"content":"        System.out.println(lines + \"\\n        Here are the tasks in your list:\\n\");","lastModifiedDate":"2023-08-28"},{"lineNumber":47,"author":{"gitId":"jingting1412"},"content":"        TaskList.listOut();","lastModifiedDate":"2023-08-28"},{"lineNumber":48,"author":{"gitId":"jingting1412"},"content":"        System.out.println(lines);","lastModifiedDate":"2023-08-28"},{"lineNumber":49,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":50,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":51,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"jingting1412"},"content":"     * Displays message when task if successfully marked.","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"jingting1412"},"content":"     * @param description the description of the task marked.","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"jingting1412"},"content":"    public static void markMsg(String description) {","lastModifiedDate":"2023-08-28"},{"lineNumber":56,"author":{"gitId":"jingting1412"},"content":"        System.out.println(lines","lastModifiedDate":"2023-08-28"},{"lineNumber":57,"author":{"gitId":"jingting1412"},"content":"                + \"\\n        Nice! I\u0027ve marked this task as done: (≧▽≦)\\n          \"","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"jingting1412"},"content":"                + description + \"\\n\"","lastModifiedDate":"2023-08-28"},{"lineNumber":59,"author":{"gitId":"jingting1412"},"content":"                + lines);","lastModifiedDate":"2023-08-28"},{"lineNumber":60,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":61,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":62,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":63,"author":{"gitId":"jingting1412"},"content":"     * Displays message when task is successfully unmarked.","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"jingting1412"},"content":"     * @param description the description of the task unmarked.","lastModifiedDate":"2023-08-30"},{"lineNumber":65,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"jingting1412"},"content":"    public static void unmarkMsg(String description) {","lastModifiedDate":"2023-08-28"},{"lineNumber":67,"author":{"gitId":"jingting1412"},"content":"        System.out.println(lines","lastModifiedDate":"2023-08-28"},{"lineNumber":68,"author":{"gitId":"jingting1412"},"content":"                + \"\\n        OK, I\u0027ve marked this task as not done yet: (≧▽≦)\\n          \"","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"jingting1412"},"content":"                + description + \"\\n\"","lastModifiedDate":"2023-08-28"},{"lineNumber":70,"author":{"gitId":"jingting1412"},"content":"                + lines);","lastModifiedDate":"2023-08-28"},{"lineNumber":71,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":72,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":73,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":74,"author":{"gitId":"jingting1412"},"content":"     * Displays message when task is successfully added to the task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"jingting1412"},"content":"     * @param type the type of the task added.","lastModifiedDate":"2023-08-30"},{"lineNumber":76,"author":{"gitId":"jingting1412"},"content":"     * @param description the description of the task added.","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"jingting1412"},"content":"     * @param size the updated number of tasks in the task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"jingting1412"},"content":"    public static void successfulAdd(String type, String description, Integer size) {","lastModifiedDate":"2023-08-28"},{"lineNumber":80,"author":{"gitId":"jingting1412"},"content":"        System.out.println(lines + \"\\n         Got it. I\u0027ve added this new \" + type + \":\\n            \"","lastModifiedDate":"2023-08-28"},{"lineNumber":81,"author":{"gitId":"jingting1412"},"content":"                + description + \"\\n         Now you have \" + size + \" tasks in the list.\\n\" + lines);","lastModifiedDate":"2023-08-28"},{"lineNumber":82,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":83,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-28"},{"lineNumber":84,"author":{"gitId":"jingting1412"},"content":"    /**","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"jingting1412"},"content":"     * Displays message when task is successfully deleted from the task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"jingting1412"},"content":"     * @param description the description of the task deleted.","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"jingting1412"},"content":"     * @param size the updated number of tasks in the task list.","lastModifiedDate":"2023-08-30"},{"lineNumber":88,"author":{"gitId":"jingting1412"},"content":"     */","lastModifiedDate":"2023-08-30"},{"lineNumber":89,"author":{"gitId":"jingting1412"},"content":"    public static void successfulDelete(String description, Integer size) {","lastModifiedDate":"2023-08-28"},{"lineNumber":90,"author":{"gitId":"jingting1412"},"content":"        System.out.println(lines + \"\\n         Noted, I\u0027ve removed this task:\\n              \"","lastModifiedDate":"2023-08-28"},{"lineNumber":91,"author":{"gitId":"jingting1412"},"content":"                + description + \"\\n         Now you have \" + size + \" tasks in the list\"","lastModifiedDate":"2023-08-28"},{"lineNumber":92,"author":{"gitId":"jingting1412"},"content":"                + \"\\n\" + lines);","lastModifiedDate":"2023-08-28"},{"lineNumber":93,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-28"},{"lineNumber":94,"author":{"gitId":"jingting1412"},"content":"}","lastModifiedDate":"2023-08-28"}],"authorContributionMap":{"jingting1412":94}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingting1412"},"content":"package duke;","lastModifiedDate":"2023-08-29"},{"lineNumber":2,"author":{"gitId":"jingting1412"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-29"},{"lineNumber":3,"author":{"gitId":"jingting1412"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"jingting1412"},"content":"public class ParserTest {","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"jingting1412"},"content":"    @Test","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"jingting1412"},"content":"    public void parseAndRespond_wrongInput_exceptionThrown() {","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"jingting1412"},"content":"        Parser p \u003d new Parser(\"abc\");","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"jingting1412"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"jingting1412"},"content":"            p.parseAndRespond();","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"jingting1412"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"jingting1412"},"content":"            assertEquals(\"Huhhhhhhh??? (o_O) ? Please use one of the command words: todo, event, deadline, list, mark, unmark, delete, bye\",","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"jingting1412"},"content":"                        e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"jingting1412"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":17,"author":{"gitId":"jingting1412"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"jingting1412"},"content":"    public void parseAndRespond_noDeadline_exceptionThrown() {","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"jingting1412"},"content":"        Parser p \u003d new Parser(\"deadline something\");","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"jingting1412"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"jingting1412"},"content":"            p.parseAndRespond();","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"jingting1412"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"jingting1412"},"content":"            assertEquals(\"Please provide a deadline! (⋟﹏⋞)\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"jingting1412"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"jingting1412"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"jingting1412"},"content":"    public void parseAndRespond_noStartTime_exceptionThrown() {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"jingting1412"},"content":"        Parser p \u003d new Parser(\"event testing\");","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"jingting1412"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"jingting1412"},"content":"            p.parseAndRespond();","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"jingting1412"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"jingting1412"},"content":"            assertEquals(\"Please provide a start time! (⋟﹏⋞)\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"jingting1412"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"jingting1412"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"jingting1412"},"content":"    public void parseAndRespond_noEndTime_exceptionThrown() {","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"jingting1412"},"content":"        Parser p \u003d new Parser(\"event testing /from 2pm\");","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"jingting1412"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"jingting1412"},"content":"            p.parseAndRespond();","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"jingting1412"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"jingting1412"},"content":"            assertEquals(\"Please provide an end time! (⋟﹏⋞)\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"jingting1412"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"jingting1412"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"jingting1412"},"content":"    public void parseAndRespond_noTaskIndicated_exceptionThrown() {","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"jingting1412"},"content":"        Parser p \u003d new Parser(\"mark\");","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"jingting1412"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"jingting1412"},"content":"            p.parseAndRespond();","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"jingting1412"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"jingting1412"},"content":"            assertEquals(\"Please indicate which task to mark!\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"jingting1412"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"jingting1412"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"jingting1412":57}},{"path":"src/test/java/duke/TaskTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"jingting1412"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"jingting1412"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"jingting1412"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"jingting1412"},"content":"public class TaskTest {","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"jingting1412"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"jingting1412"},"content":"    public void getDescription_deadlineValidInput_correctString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":10,"author":{"gitId":"jingting1412"},"content":"        Deadline d \u003d null;","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"jingting1412"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"jingting1412"},"content":"            d \u003d new Deadline(\"finish homework\", \"2023-10-19\");","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"jingting1412"},"content":"            assertEquals(\"[D] [ ] finish homework (by: Oct 19 2023)\", d.getDescription());","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"jingting1412"},"content":"            assertEquals(\"D | 0 | finish homework | 2023-10-19\", d.getSavedString());","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"jingting1412"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"jingting1412"},"content":"            assertEquals(\"Please provide a deadline in the format yyyy-MM-dd\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"jingting1412"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"jingting1412"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"jingting1412"},"content":"    public void getDescription_deadlineInvalidInput_exceptionThrown() {","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"jingting1412"},"content":"        Deadline d \u003d null;","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"jingting1412"},"content":"        try {","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"jingting1412"},"content":"            d \u003d new Deadline(\"finish homework\", \"Friday 2pm\");","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"jingting1412"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"jingting1412"},"content":"            assertEquals(\"Please provide a deadline in the format yyyy-MM-dd\", e.getMessage());","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"jingting1412"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"jingting1412"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"jingting1412"},"content":"    @Test","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"jingting1412"},"content":"    public void getDescription_eventValidInput_correctString() {","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"jingting1412"},"content":"        Event d \u003d new Event(\"finish homework\", \"Friday 10pm\", \"11pm\");","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"jingting1412"},"content":"        assertEquals(\"[E] [ ] finish homework (from: Friday 10pm to: 11pm)\", d.getDescription());","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"jingting1412"},"content":"        assertEquals(\"E | 0 | finish homework | Friday 10pm-11pm\", d.getSavedString());","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"jingting1412"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"jingting1412"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"jingting1412":36}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"jingting1412"},"content":"todo eat bread","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"jingting1412"},"content":"deadline finish work /by Friday","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"jingting1412"},"content":"event barbecue /from Friday 7pm /to 10pm","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"jingting1412"},"content":"todo read book","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"jingting1412"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"jingting1412"},"content":"mark 1","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"jingting1412"},"content":"mark 3","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"jingting1412"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"jingting1412"},"content":"unmark 3","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"jingting1412"},"content":"mark 2","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"jingting1412"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"jingting1412"},"content":"bye","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"jingting1412":12}}]
