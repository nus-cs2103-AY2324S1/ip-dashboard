[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"# duke.Duke project template","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":22,"darrentfy":2}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"}","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"checkstyle {","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.10.0\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":19,"author":{"gitId":"darrentfy"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"darrentfy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"darrentfy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"darrentfy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"darrentfy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"darrentfy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"darrentfy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"darrentfy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"darrentfy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"darrentfy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"darrentfy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"darrentfy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"darrentfy"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"darrentfy"},"content":"    mainClass.set(\"duke.Launcher\")","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":54,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"    dependsOn(\"distZip\", \"distTar\")","lastModifiedDate":"2023-08-05"},{"lineNumber":57,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":60,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":41,"darrentfy":20}},{"path":"src/main/java/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"package command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"import task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":" * Represents a command that a user may pass into the Duke chatbot","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":"public class Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":"        return \"This method is to be implemented by child classes\";","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"darrentfy"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"darrentfy":15}},{"path":"src/main/java/command/DeadlineCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"package command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":"import task.Deadline;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"import task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":" * Adds a deadline, which has a description and a date/time to do by, to the todo list","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":"public class DeadlineCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":"    public static final String COMMAND_WORD \u003d \"deadline\";","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"darrentfy"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Got it. I\u0027ve added this task:\\n\";","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"darrentfy"},"content":"    /** Description of the task */","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"darrentfy"},"content":"    protected String description;","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"darrentfy"},"content":"    /** Deadline that the task is to be done by */","lastModifiedDate":"2023-09-02"},{"lineNumber":21,"author":{"gitId":"darrentfy"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"darrentfy"},"content":"     * Creates an add deadline command with the given description and date/time the task is to be done by","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"darrentfy"},"content":"     * @param description description of the task","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"darrentfy"},"content":"     * @param by date/time the task is to be done by","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"darrentfy"},"content":"    public DeadlineCommand(String description, LocalDateTime by) {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"darrentfy"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"darrentfy"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"darrentfy"},"content":"     * Adds the deadline task to the given TaskList, and saves the current TaskList in","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"darrentfy"},"content":"     * the specified Storage file","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"darrentfy"},"content":"     * @param tasks TaskList which contains an ArrayList of tasks","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"darrentfy"},"content":"     * @param ui Text Ui that the user interacts with","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"darrentfy"},"content":"     * @param storage File path where the tasks are stored","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"darrentfy"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"darrentfy"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"darrentfy"},"content":"        Deadline deadline \u003d new Deadline(this.description, this.by);","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"darrentfy"},"content":"        int originalSize \u003d tasks.getSize();","lastModifiedDate":"2023-09-11"},{"lineNumber":46,"author":{"gitId":"darrentfy"},"content":"        tasks.addTask(deadline);","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"darrentfy"},"content":"        assert tasks.getSize() \u003d\u003d originalSize + 1 : \"Task was not properly added to the list\";","lastModifiedDate":"2023-09-11"},{"lineNumber":48,"author":{"gitId":"darrentfy"},"content":"        storage.writeToFile(tasks.getList());","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"darrentfy"},"content":"        String response \u003d MESSAGE_SUCCESS + deadline","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"darrentfy"},"content":"                + \"\\nNow you have \" + tasks.getSize() + \" tasks in the list\";","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"darrentfy"},"content":"        return response;","lastModifiedDate":"2023-09-05"},{"lineNumber":52,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"darrentfy"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"darrentfy":53}},{"path":"src/main/java/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"package command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"import task.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":"import task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":" * Deletes a task from the todo list","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":"    public static final String COMMAND_WORD \u003d \"delete\";","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Noted. I\u0027ve removed this task:\\n\";","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"    /** The index of the task to be deleted */","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"darrentfy"},"content":"    protected int index;","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"darrentfy"},"content":"    public DeleteCommand(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"darrentfy"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"darrentfy"},"content":"     * Deletes the task with the specified index from the TaskList, and saves the current TaskList","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"darrentfy"},"content":"     * in the specified Storage file.","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"darrentfy"},"content":"     * @param tasks TaskList which contains an ArrayList of tasks","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"darrentfy"},"content":"     * @param ui Text Ui that the user interacts with","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"darrentfy"},"content":"     * @param storage File path where the tasks are stored","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"darrentfy"},"content":"     * @throws DukeException if an invalid index is given","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"darrentfy"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"darrentfy"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"darrentfy"},"content":"        if (this.index \u003e\u003d 0 \u0026\u0026 this.index \u003c tasks.getSize()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"darrentfy"},"content":"            Task task \u003d tasks.getTask(this.index);","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"darrentfy"},"content":"            int originalSize \u003d tasks.getSize();","lastModifiedDate":"2023-09-11"},{"lineNumber":37,"author":{"gitId":"darrentfy"},"content":"            tasks.deleteTask(task);","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"darrentfy"},"content":"            assert tasks.getSize() \u003d\u003d originalSize - 1 : \"Task was not properly added to the list\";","lastModifiedDate":"2023-09-11"},{"lineNumber":39,"author":{"gitId":"darrentfy"},"content":"            storage.writeToFile(tasks.getList());","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"darrentfy"},"content":"            String response \u003d MESSAGE_SUCCESS + task.toString()","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"darrentfy"},"content":"                    + \"\\nNow you have \" + tasks.getSize() + \" tasks in the list\";","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"darrentfy"},"content":"            return response;","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"darrentfy"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"darrentfy"},"content":"            // user input is an integer bigger than size of task list","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"darrentfy"},"content":"            String message \u003d tasks.isEmpty()","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"darrentfy"},"content":"                    ? \"You have no tasks! Please add some tasks first\"","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"darrentfy"},"content":"                    : \"No such task! Please enter a task ID between 1 and \" + tasks.getSize();","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"darrentfy"},"content":"            throw new DukeException(message);","lastModifiedDate":"2023-08-30"},{"lineNumber":49,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"darrentfy"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"darrentfy":51}},{"path":"src/main/java/command/EventCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"package command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":"import task.Event;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"import task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":" * Adds an event, which has a start date/time and an end date/time, to the todo list","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":"public class EventCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":"    public static final String COMMAND_WORD \u003d \"event\";","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"darrentfy"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Got it. I\u0027ve added this task:\\n\";","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"darrentfy"},"content":"    /** Description of the task */","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"darrentfy"},"content":"    protected String description;","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"darrentfy"},"content":"    /** Starting date/time of the event */","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"darrentfy"},"content":"    protected LocalDateTime from;","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"darrentfy"},"content":"    /** Ending date/time of the event */","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"darrentfy"},"content":"    protected LocalDateTime to;","lastModifiedDate":"2023-08-30"},{"lineNumber":25,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"darrentfy"},"content":"     * Creates an add event command with the given description, start date/time and end date/time","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"darrentfy"},"content":"     * @param description description of the task","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"darrentfy"},"content":"     * @param from starting date/time of the task","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"darrentfy"},"content":"     * @param to ending date/time of the task","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"darrentfy"},"content":"    public EventCommand(String description, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"darrentfy"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"darrentfy"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"darrentfy"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"darrentfy"},"content":"     * Adds the event task to the given TaskList, and saves the current TaskList in","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"darrentfy"},"content":"     * the specified Storage file","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"darrentfy"},"content":"     * @param tasks TaskList which contains an ArrayList of tasks","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"darrentfy"},"content":"     * @param ui Text Ui that the user interacts with","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"darrentfy"},"content":"     * @param storage File path where the tasks are stored","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"darrentfy"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"darrentfy"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"darrentfy"},"content":"        Event event \u003d new Event(this.description, this.from, this.to);","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"darrentfy"},"content":"        int originalSize \u003d tasks.getSize();","lastModifiedDate":"2023-09-11"},{"lineNumber":51,"author":{"gitId":"darrentfy"},"content":"        tasks.addTask(event);","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"darrentfy"},"content":"        assert tasks.getSize() \u003d\u003d originalSize + 1 : \"Task was not properly added to the list\";","lastModifiedDate":"2023-09-11"},{"lineNumber":53,"author":{"gitId":"darrentfy"},"content":"        storage.writeToFile(tasks.getList());","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"darrentfy"},"content":"        String response \u003d MESSAGE_SUCCESS + event","lastModifiedDate":"2023-09-05"},{"lineNumber":55,"author":{"gitId":"darrentfy"},"content":"                + \"\\nNow you have \" + tasks.getSize() + \" tasks in the list\";","lastModifiedDate":"2023-09-05"},{"lineNumber":56,"author":{"gitId":"darrentfy"},"content":"        return response;","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":58,"author":{"gitId":"darrentfy"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"darrentfy":58}},{"path":"src/main/java/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"package command;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"import duke.Storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"import duke.Ui;","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":"import task.Task;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"import task.TaskList;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":" * Prints a filtered todo list according to the keyword in input","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":"    public static final String COMMAND_WORD \u003d \"find\";","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"    /** Keyword to filter the todo list */","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"darrentfy"},"content":"    protected String keyword;","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"darrentfy"},"content":"    public FindCommand(String keyword) {","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"darrentfy"},"content":"        this.keyword \u003d keyword;","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"darrentfy"},"content":"     * Prints a filtered TaskList which contains tasks whose contains the","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"darrentfy"},"content":"     * given keyword","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"darrentfy"},"content":"     * @param tasks TaskList which contains an ArrayList of tasks","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"darrentfy"},"content":"     * @param ui Text Ui that the user interacts with","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"darrentfy"},"content":"     * @param storage File path where the tasks are stored","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"darrentfy"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"darrentfy"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"darrentfy"},"content":"        ArrayList\u003cTask\u003e filteredTasks \u003d tasks.filterTasks(this.keyword);","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"darrentfy"},"content":"        TaskList filteredList \u003d new TaskList(filteredTasks);","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"darrentfy"},"content":"        if (filteredTasks.isEmpty()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"darrentfy"},"content":"            return \"No matching tasks found\";","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"darrentfy"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"darrentfy"},"content":"            return \"Here are the matching tasks in your list:\\n\" + filteredList;","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"darrentfy"},"content":"}","lastModifiedDate":"2023-09-01"}],"authorContributionMap":{"darrentfy":41}},{"path":"src/main/java/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"package command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"import task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":" * Prints out the current todo list","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":"     * Prints the current TaskList","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"darrentfy"},"content":"     * @param tasks TaskList which contains an ArrayList of tasks","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"     * @param ui Text Ui that the user interacts with","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"darrentfy"},"content":"     * @param storage File path where the tasks are stored","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"darrentfy"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"darrentfy"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"darrentfy"},"content":"        assert tasks.getSize() \u003e\u003d 0 : \"Size of task list should be more than or equal to 0\";","lastModifiedDate":"2023-09-11"},{"lineNumber":22,"author":{"gitId":"darrentfy"},"content":"        return tasks.getSize() \u003d\u003d 0","lastModifiedDate":"2023-09-11"},{"lineNumber":23,"author":{"gitId":"darrentfy"},"content":"                ? \"You have no tasks\\n\"","lastModifiedDate":"2023-09-11"},{"lineNumber":24,"author":{"gitId":"darrentfy"},"content":"                : \"Here are the tasks in your list:\\n\" + tasks;","lastModifiedDate":"2023-09-11"},{"lineNumber":25,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":26,"author":{"gitId":"darrentfy"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"darrentfy":26}},{"path":"src/main/java/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"package command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"import task.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":"import task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":" * Marks a task on the todo list","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":"    public static final String COMMAND_WORD \u003d \"mark\";","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Nice! I\u0027ve marked this task as done:\\n\";","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"    /** The index of the task to be marked as done */","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"darrentfy"},"content":"    protected int index;","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"darrentfy"},"content":"    public MarkCommand(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"darrentfy"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"darrentfy"},"content":"     * Marks the task with the specified index from the TaskList, and saves the current TaskList","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"darrentfy"},"content":"     * in the specified Storage file","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"darrentfy"},"content":"     * @param tasks TaskList which contains an ArrayList of tasks","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"darrentfy"},"content":"     * @param ui Text Ui that the user interacts with","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"darrentfy"},"content":"     * @param storage File path where the tasks are stored","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"darrentfy"},"content":"     * @throws DukeException if an invalid index is given","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"darrentfy"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"darrentfy"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"darrentfy"},"content":"        if (this.index \u003e\u003d 0 \u0026\u0026 this.index \u003c tasks.getSize()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"darrentfy"},"content":"            Task task \u003d tasks.getTask(this.index);","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"darrentfy"},"content":"            tasks.markTask(task);","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"darrentfy"},"content":"            storage.writeToFile(tasks.getList());","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"darrentfy"},"content":"            return MESSAGE_SUCCESS + task;","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"darrentfy"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"darrentfy"},"content":"            // user input is an integer bigger than size of task list","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"darrentfy"},"content":"            String message \u003d tasks.isEmpty()","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"darrentfy"},"content":"                    ? \"You have no tasks! Please add some tasks first\"","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"darrentfy"},"content":"                    : \"No such task! Please enter a task ID between 1 and \" + tasks.getSize();","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"darrentfy"},"content":"            throw new DukeException(message);","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"darrentfy"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"darrentfy":47}},{"path":"src/main/java/command/TodoCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"package command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"import task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"import task.Todo;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":" * Adds a todo, which has a description, to the todo list","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":"public class TodoCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":"    public static final String COMMAND_WORD \u003d \"todo\";","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"Got it. I\u0027ve added this task:\\n\";","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"darrentfy"},"content":"    /** Description of the task */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"    protected String description;","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"darrentfy"},"content":"    public TodoCommand(String description) {","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"darrentfy"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"darrentfy"},"content":"     * Adds the todo to the TaskList, and saves the current TaskList to the specified","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"darrentfy"},"content":"     * Storage file","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"darrentfy"},"content":"     * @param tasks TaskList which contains an ArrayList of tasks","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"darrentfy"},"content":"     * @param ui Text Ui that the user interacts with","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"darrentfy"},"content":"     * @param storage File path where the tasks are stored","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"darrentfy"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"darrentfy"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"darrentfy"},"content":"        Todo todo \u003d new Todo(this.description);","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"darrentfy"},"content":"        int originalSize \u003d tasks.getSize();","lastModifiedDate":"2023-09-11"},{"lineNumber":34,"author":{"gitId":"darrentfy"},"content":"        tasks.addTask(todo);","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"darrentfy"},"content":"        assert tasks.getSize() \u003d\u003d originalSize + 1 : \"Task was not properly added to the list\";","lastModifiedDate":"2023-09-11"},{"lineNumber":36,"author":{"gitId":"darrentfy"},"content":"        storage.writeToFile(tasks.getList());","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"darrentfy"},"content":"        String response \u003d MESSAGE_SUCCESS + todo","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"darrentfy"},"content":"                + \"\\nNow you have \" + tasks.getSize() + \" tasks in the list\";","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"darrentfy"},"content":"        return response;","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"darrentfy"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"darrentfy":41}},{"path":"src/main/java/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"package command;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"import duke.DukeException;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":"import duke.Storage;","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"import duke.Ui;","lastModifiedDate":"2023-08-30"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"import task.Task;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":"import task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":" * Unmarks a task on the todo list","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":"    public static final String COMMAND_WORD \u003d \"unmark\";","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":"    public static final String MESSAGE_SUCCESS \u003d \"OK, I\u0027ve marked this task as not done yet:\\n\";","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"darrentfy"},"content":"     * The index of the task to be marked as undone","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"darrentfy"},"content":"    protected int index;","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"darrentfy"},"content":"     * Creates an unmark command with the given index","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"darrentfy"},"content":"     * @param index index of the task to unmark","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"darrentfy"},"content":"    public UnmarkCommand(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"darrentfy"},"content":"        this.index \u003d index;","lastModifiedDate":"2023-08-30"},{"lineNumber":28,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"darrentfy"},"content":"     * Unmarks the task with the specified index from the TaskList, and saves the current TaskList","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"darrentfy"},"content":"     * in the specified Storage file","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"darrentfy"},"content":"     * @param tasks TaskList which contains an ArrayList of tasks","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"darrentfy"},"content":"     * @param ui Text Ui that the user interacts with","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"darrentfy"},"content":"     * @param storage File path where the tasks are stored","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"darrentfy"},"content":"     * @throws DukeException if an invalid index is given","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"darrentfy"},"content":"    @Override","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"darrentfy"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) throws DukeException {","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"darrentfy"},"content":"        if (this.index \u003e\u003d 0 \u0026\u0026 this.index \u003c tasks.getSize()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"darrentfy"},"content":"            Task task \u003d tasks.getTask(this.index);","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"darrentfy"},"content":"            tasks.unmarkTask(task);","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"darrentfy"},"content":"            storage.writeToFile(tasks.getList());","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"darrentfy"},"content":"            return MESSAGE_SUCCESS + task;","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"darrentfy"},"content":"        } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"darrentfy"},"content":"            // user input is an integer bigger than size of task list","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"darrentfy"},"content":"            String message \u003d tasks.isEmpty()","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"darrentfy"},"content":"                    ? \"You have no tasks! Please add some tasks first\"","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"darrentfy"},"content":"                    : \"No such task! Please enter a task ID between 1 and \" + tasks.getSize();","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"darrentfy"},"content":"            throw new DukeException(message);","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"darrentfy"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"darrentfy":54}},{"path":"src/main/java/duke/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"package duke;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":"import javafx.geometry.Insets;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"darrentfy"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"import javafx.scene.layout.Background;","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"darrentfy"},"content":"import javafx.scene.layout.BackgroundFill;","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"darrentfy"},"content":"import javafx.scene.layout.CornerRadii;","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"darrentfy"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"darrentfy"},"content":"import javafx.scene.paint.Color;","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"darrentfy"},"content":"import javafx.scene.shape.Circle;","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"darrentfy"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"darrentfy"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"darrentfy"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"darrentfy"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"darrentfy"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"darrentfy"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"darrentfy"},"content":"    @FXML","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"darrentfy"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"darrentfy"},"content":"    @FXML","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"darrentfy"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"darrentfy"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"darrentfy"},"content":"        try {","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"darrentfy"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"darrentfy"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"darrentfy"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"darrentfy"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"darrentfy"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"darrentfy"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"darrentfy"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"darrentfy"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"darrentfy"},"content":"        Circle circle \u003d new Circle(35);","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"darrentfy"},"content":"        circle.setCenterX(displayPicture.getFitWidth() / 2);","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"darrentfy"},"content":"        circle.setCenterY(displayPicture.getFitHeight() / 2);","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"darrentfy"},"content":"        displayPicture.setClip(circle);","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"darrentfy"},"content":"        this.setPadding(new Insets(10));","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"darrentfy"},"content":"        this.setSpacing(10);","lastModifiedDate":"2023-09-05"},{"lineNumber":52,"author":{"gitId":"darrentfy"},"content":"        this.setBackground(new Background(new BackgroundFill(Color.valueOf(\"#DFCCFB\"),","lastModifiedDate":"2023-09-05"},{"lineNumber":53,"author":{"gitId":"darrentfy"},"content":"                new CornerRadii(10), new Insets(5))));","lastModifiedDate":"2023-09-05"},{"lineNumber":54,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":55,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":56,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"darrentfy"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":59,"author":{"gitId":"darrentfy"},"content":"    private void flip() {","lastModifiedDate":"2023-09-05"},{"lineNumber":60,"author":{"gitId":"darrentfy"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-05"},{"lineNumber":61,"author":{"gitId":"darrentfy"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-05"},{"lineNumber":62,"author":{"gitId":"darrentfy"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-05"},{"lineNumber":63,"author":{"gitId":"darrentfy"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-05"},{"lineNumber":64,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":65,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":66,"author":{"gitId":"darrentfy"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-05"},{"lineNumber":67,"author":{"gitId":"darrentfy"},"content":"        return new DialogBox(text, img);","lastModifiedDate":"2023-09-05"},{"lineNumber":68,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":69,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":70,"author":{"gitId":"darrentfy"},"content":"    public static DialogBox getDukeDialog(String text, Image img) {","lastModifiedDate":"2023-09-05"},{"lineNumber":71,"author":{"gitId":"darrentfy"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-05"},{"lineNumber":72,"author":{"gitId":"darrentfy"},"content":"        db.flip();","lastModifiedDate":"2023-09-05"},{"lineNumber":73,"author":{"gitId":"darrentfy"},"content":"        return db;","lastModifiedDate":"2023-09-05"},{"lineNumber":74,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":75,"author":{"gitId":"darrentfy"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"darrentfy":75}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"import command.Command;","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"import task.TaskList;","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":" * Entry point of the Duke application.","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":" * Initializes the application and starts the interaction with the user.","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":"    private final Storage storage;","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"darrentfy"},"content":"    private final TaskList tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"    private final Ui ui;","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":18,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"darrentfy"},"content":"     * Initialises a Duke chatbot","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"darrentfy"},"content":"    public Duke() {","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"darrentfy"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"darrentfy"},"content":"        this.storage \u003d new Storage(\"./data/tasks.txt\");","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"darrentfy"},"content":"        this.tasks \u003d new TaskList(storage.readFile());","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":27,"author":{"gitId":"darrentfy"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"darrentfy"},"content":"        try {","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"darrentfy"},"content":"            Command c \u003d Parser.parse(input);","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"darrentfy"},"content":"            return c.execute(this.tasks, this.ui, this.storage);","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"darrentfy"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"darrentfy"},"content":"            // user input has invalid argument for mark and unmark eg. \"mark ab\"","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"darrentfy"},"content":"            return \"Invalid command! Please enter only one valid task ID (numbers only)\";","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"darrentfy"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"darrentfy"},"content":"            // user input has date/time in invalid format","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"darrentfy"},"content":"            return \"Invalid date and time format! Please use the format dd/mm/yyyy hhmm\";","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"darrentfy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"darrentfy"},"content":"            return e.getMessage();","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":40,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"},{"lineNumber":42,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"-":2,"darrentfy":40}},{"path":"src/main/java/duke/DukeException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":" * Signals an error caused by invalid inputs from user","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"public class DukeException extends Exception {","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":"    public DukeException(String message) {","lastModifiedDate":"2023-08-23"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"        super(message);","lastModifiedDate":"2023-08-23"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"darrentfy":10}},{"path":"src/main/java/duke/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"package duke;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"public class Launcher {","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"darrentfy":12}},{"path":"src/main/java/duke/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"package duke;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":" * A GUI for Duke using FXML.","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"darrentfy"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"darrentfy"},"content":"    @Override","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"darrentfy"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"darrentfy"},"content":"        try {","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"darrentfy"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"darrentfy"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"darrentfy"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"darrentfy"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"darrentfy"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"darrentfy"},"content":"            stage.show();","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"darrentfy"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"darrentfy"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"darrentfy"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"darrentfy":30}},{"path":"src/main/java/duke/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"package duke;","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"import javafx.application.Platform;","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":"/**","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":" * Controller for MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":" */","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"darrentfy"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"    @FXML","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"darrentfy"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"darrentfy"},"content":"    @FXML","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"darrentfy"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"darrentfy"},"content":"    @FXML","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"darrentfy"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"darrentfy"},"content":"    @FXML","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"darrentfy"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"darrentfy"},"content":"    private Duke duke;","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":27,"author":{"gitId":"darrentfy"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaUser.png\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":28,"author":{"gitId":"darrentfy"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/DaDuke.png\"));","lastModifiedDate":"2023-09-05"},{"lineNumber":29,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":30,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":31,"author":{"gitId":"darrentfy"},"content":"     * Initialises the main window with the welcome message","lastModifiedDate":"2023-09-05"},{"lineNumber":32,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":33,"author":{"gitId":"darrentfy"},"content":"    @FXML","lastModifiedDate":"2023-09-05"},{"lineNumber":34,"author":{"gitId":"darrentfy"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-05"},{"lineNumber":35,"author":{"gitId":"darrentfy"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-05"},{"lineNumber":36,"author":{"gitId":"darrentfy"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-05"},{"lineNumber":37,"author":{"gitId":"darrentfy"},"content":"                DialogBox.getDukeDialog(\"Hello! I\u0027m Handsome!\\nWhat can I do for you?\", dukeImage));","lastModifiedDate":"2023-09-05"},{"lineNumber":38,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":39,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":40,"author":{"gitId":"darrentfy"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-09-05"},{"lineNumber":41,"author":{"gitId":"darrentfy"},"content":"        duke \u003d d;","lastModifiedDate":"2023-09-05"},{"lineNumber":42,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":43,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":44,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-05"},{"lineNumber":45,"author":{"gitId":"darrentfy"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing Duke\u0027s reply and then appends them to","lastModifiedDate":"2023-09-05"},{"lineNumber":46,"author":{"gitId":"darrentfy"},"content":"     * the dialog container. Clears the user input after processing.","lastModifiedDate":"2023-09-05"},{"lineNumber":47,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-05"},{"lineNumber":48,"author":{"gitId":"darrentfy"},"content":"    @FXML","lastModifiedDate":"2023-09-05"},{"lineNumber":49,"author":{"gitId":"darrentfy"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-05"},{"lineNumber":50,"author":{"gitId":"darrentfy"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-05"},{"lineNumber":51,"author":{"gitId":"darrentfy"},"content":"        if (input.equals(\"bye\")) {","lastModifiedDate":"2023-09-05"},{"lineNumber":52,"author":{"gitId":"darrentfy"},"content":"            Platform.exit();","lastModifiedDate":"2023-09-05"},{"lineNumber":53,"author":{"gitId":"darrentfy"},"content":"        } else {","lastModifiedDate":"2023-09-05"},{"lineNumber":54,"author":{"gitId":"darrentfy"},"content":"            String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-09-05"},{"lineNumber":55,"author":{"gitId":"darrentfy"},"content":"            dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-05"},{"lineNumber":56,"author":{"gitId":"darrentfy"},"content":"                    DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-05"},{"lineNumber":57,"author":{"gitId":"darrentfy"},"content":"                    DialogBox.getDukeDialog(response, dukeImage)","lastModifiedDate":"2023-09-05"},{"lineNumber":58,"author":{"gitId":"darrentfy"},"content":"            );","lastModifiedDate":"2023-09-05"},{"lineNumber":59,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-09-05"},{"lineNumber":60,"author":{"gitId":"darrentfy"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-05"},{"lineNumber":61,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-09-05"},{"lineNumber":62,"author":{"gitId":"darrentfy"},"content":"}","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"darrentfy":62}},{"path":"src/main/java/duke/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"import command.Command;","lastModifiedDate":"2023-08-31"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":"import command.DeadlineCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"import command.DeleteCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":"import command.EventCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":"import command.FindCommand;","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":"import command.ListCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":"import command.MarkCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":"import command.TodoCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":"import command.UnmarkCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"darrentfy"},"content":" * Parses user input","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"darrentfy"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"darrentfy"},"content":"public class Parser {","lastModifiedDate":"2023-08-30"},{"lineNumber":20,"author":{"gitId":"darrentfy"},"content":"    private static final DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"dd/MM/yyyy HHmm\");","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"darrentfy"},"content":"     * Parses user input into command for execution.","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"darrentfy"},"content":"     * @param input user input string","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"darrentfy"},"content":"     * @return the command based on the user input","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"darrentfy"},"content":"    public static Command parse(String input) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":29,"author":{"gitId":"darrentfy"},"content":"        if (input.equals(\"list\")) {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"darrentfy"},"content":"            return new ListCommand();","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"darrentfy"},"content":"        } else {","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"darrentfy"},"content":"            String[] details \u003d input.split(\" \", 2);","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"darrentfy"},"content":"            String commandName \u003d details[0];","lastModifiedDate":"2023-08-30"},{"lineNumber":34,"author":{"gitId":"darrentfy"},"content":"            switch (commandName) {","lastModifiedDate":"2023-08-30"},{"lineNumber":35,"author":{"gitId":"darrentfy"},"content":"            case MarkCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-30"},{"lineNumber":36,"author":{"gitId":"darrentfy"},"content":"                return prepareMark(details);","lastModifiedDate":"2023-08-30"},{"lineNumber":37,"author":{"gitId":"darrentfy"},"content":"            case UnmarkCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"darrentfy"},"content":"                return prepareUnmark(details);","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"darrentfy"},"content":"            case DeleteCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"darrentfy"},"content":"                return prepareDelete(details);","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"darrentfy"},"content":"            case TodoCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"darrentfy"},"content":"                return prepareTodo(details);","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"darrentfy"},"content":"            case DeadlineCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"darrentfy"},"content":"                return prepareDeadline(details);","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"darrentfy"},"content":"            case EventCommand.COMMAND_WORD:","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"darrentfy"},"content":"                return prepareEvent(details);","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"darrentfy"},"content":"            case FindCommand.COMMAND_WORD:","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"darrentfy"},"content":"                return prepareFind(details);","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"darrentfy"},"content":"            default:","lastModifiedDate":"2023-08-30"},{"lineNumber":50,"author":{"gitId":"darrentfy"},"content":"                throw new DukeException(\"Sorry! I do not recognise this command\");","lastModifiedDate":"2023-08-30"},{"lineNumber":51,"author":{"gitId":"darrentfy"},"content":"            }","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"darrentfy"},"content":"     * Parses arguments in the context of the mark task command","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"darrentfy"},"content":"     * @param details full command args string","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"darrentfy"},"content":"     * @return the prepared command","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"darrentfy"},"content":"    private static MarkCommand prepareMark(String[] details) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"darrentfy"},"content":"        // user input only has the command eg \"mark\"","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"darrentfy"},"content":"        if (details.length \u003c 2 || details[1].trim().isEmpty()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":64,"author":{"gitId":"darrentfy"},"content":"            throw new DukeException(\"Invalid command! \"","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"darrentfy"},"content":"                    + \"Please include the index of the task you wish to mark\");","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"darrentfy"},"content":"        int markTaskId \u003d Integer.parseInt(details[1]) - 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"darrentfy"},"content":"        return new MarkCommand(markTaskId);","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":70,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":71,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"darrentfy"},"content":"     * Parses arguments in the context of the unmark task command","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"darrentfy"},"content":"     * @param details full command args string","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"darrentfy"},"content":"     * @return the prepared command","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"darrentfy"},"content":"    private static UnmarkCommand prepareUnmark(String[] details) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":78,"author":{"gitId":"darrentfy"},"content":"        // user input only has the command eg \"unmark\"","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"darrentfy"},"content":"        if (details.length \u003c 2 || details[1].trim().isEmpty()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"darrentfy"},"content":"            throw new DukeException(\"Invalid command! \"","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"darrentfy"},"content":"                    + \"Please include the index of the task you wish to unmark\");","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":83,"author":{"gitId":"darrentfy"},"content":"        int unmarkTaskId \u003d Integer.parseInt(details[1]) - 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":84,"author":{"gitId":"darrentfy"},"content":"        return new UnmarkCommand(unmarkTaskId);","lastModifiedDate":"2023-08-30"},{"lineNumber":85,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":86,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":87,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":88,"author":{"gitId":"darrentfy"},"content":"     * Parses arguments in the context of the delete task command","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"darrentfy"},"content":"     * @param details full command args string","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"darrentfy"},"content":"     * @return the prepared command","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"darrentfy"},"content":"    private static DeleteCommand prepareDelete(String[] details) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":94,"author":{"gitId":"darrentfy"},"content":"        // user input only has the command eg \"delete\"","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"darrentfy"},"content":"        if (details.length \u003c 2 || details[1].trim().isEmpty()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":96,"author":{"gitId":"darrentfy"},"content":"            throw new DukeException(\"Invalid command! \"","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"darrentfy"},"content":"                    + \"Please include the index of the task you wish to delete\");","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":99,"author":{"gitId":"darrentfy"},"content":"        int deleteTaskId \u003d Integer.parseInt(details[1]) - 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":100,"author":{"gitId":"darrentfy"},"content":"        return new DeleteCommand(deleteTaskId);","lastModifiedDate":"2023-08-30"},{"lineNumber":101,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":103,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":104,"author":{"gitId":"darrentfy"},"content":"     * Parses arguments in the context of the add todo command","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":106,"author":{"gitId":"darrentfy"},"content":"     * @param details full command args string","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"darrentfy"},"content":"     * @return the prepared command","lastModifiedDate":"2023-09-01"},{"lineNumber":108,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":109,"author":{"gitId":"darrentfy"},"content":"    private static TodoCommand prepareTodo(String[] details) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":110,"author":{"gitId":"darrentfy"},"content":"        // user input only has the command eg \"todo\"","lastModifiedDate":"2023-08-30"},{"lineNumber":111,"author":{"gitId":"darrentfy"},"content":"        if (details.length \u003c 2 || details[1].trim().isEmpty()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":112,"author":{"gitId":"darrentfy"},"content":"            throw new DukeException(\"Invalid command! Please include details of this task\");","lastModifiedDate":"2023-08-30"},{"lineNumber":113,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":114,"author":{"gitId":"darrentfy"},"content":"        String todoDesc \u003d details[1].trim();","lastModifiedDate":"2023-08-30"},{"lineNumber":115,"author":{"gitId":"darrentfy"},"content":"        return new TodoCommand(todoDesc);","lastModifiedDate":"2023-08-30"},{"lineNumber":116,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":117,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":118,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":119,"author":{"gitId":"darrentfy"},"content":"     * Parses arguments in the context of the add deadline command","lastModifiedDate":"2023-09-01"},{"lineNumber":120,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":121,"author":{"gitId":"darrentfy"},"content":"     * @param details full command args string","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"darrentfy"},"content":"     * @return the prepared command","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"darrentfy"},"content":"    private static DeadlineCommand prepareDeadline(String[] details) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":125,"author":{"gitId":"darrentfy"},"content":"        // user input only has the command eg \"deadline\"","lastModifiedDate":"2023-08-30"},{"lineNumber":126,"author":{"gitId":"darrentfy"},"content":"        if (details.length \u003c 2 || details[1].trim().isEmpty()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":127,"author":{"gitId":"darrentfy"},"content":"            throw new DukeException(\"Invalid command! Please include details of this task\");","lastModifiedDate":"2023-08-30"},{"lineNumber":128,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":129,"author":{"gitId":"darrentfy"},"content":"        String[] deadline \u003d details[1].split(\"/by\", 2);","lastModifiedDate":"2023-08-30"},{"lineNumber":130,"author":{"gitId":"darrentfy"},"content":"        // user input does not include /by","lastModifiedDate":"2023-09-01"},{"lineNumber":131,"author":{"gitId":"darrentfy"},"content":"        if (deadline.length \u003c 2 || deadline[1].trim().isEmpty()) { // user input does not have /by","lastModifiedDate":"2023-08-30"},{"lineNumber":132,"author":{"gitId":"darrentfy"},"content":"            throw new DukeException(\"Invalid command! Please include the deadline of this task\");","lastModifiedDate":"2023-08-30"},{"lineNumber":133,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":134,"author":{"gitId":"darrentfy"},"content":"        // user input is missing the description of the deadline","lastModifiedDate":"2023-09-01"},{"lineNumber":135,"author":{"gitId":"darrentfy"},"content":"        if (deadline[0].split(\" \", 2).length \u003c 2) {","lastModifiedDate":"2023-08-30"},{"lineNumber":136,"author":{"gitId":"darrentfy"},"content":"            throw new DukeException(\"Invalid command! Please include details of this task\");","lastModifiedDate":"2023-08-30"},{"lineNumber":137,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":138,"author":{"gitId":"darrentfy"},"content":"        LocalDateTime by \u003d LocalDateTime.parse(deadline[1].trim(), inputFormatter);","lastModifiedDate":"2023-08-30"},{"lineNumber":139,"author":{"gitId":"darrentfy"},"content":"        return new DeadlineCommand(deadline[0].trim(), by);","lastModifiedDate":"2023-08-30"},{"lineNumber":140,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":141,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":142,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":143,"author":{"gitId":"darrentfy"},"content":"     * Parses arguments in the context of the add event command","lastModifiedDate":"2023-09-01"},{"lineNumber":144,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":145,"author":{"gitId":"darrentfy"},"content":"     * @param details full command args string","lastModifiedDate":"2023-09-01"},{"lineNumber":146,"author":{"gitId":"darrentfy"},"content":"     * @return the prepared command","lastModifiedDate":"2023-09-01"},{"lineNumber":147,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"darrentfy"},"content":"    private static EventCommand prepareEvent(String[] details) throws DukeException {","lastModifiedDate":"2023-08-30"},{"lineNumber":149,"author":{"gitId":"darrentfy"},"content":"        // user input only has the command eg \"event\"","lastModifiedDate":"2023-08-30"},{"lineNumber":150,"author":{"gitId":"darrentfy"},"content":"        if (details.length \u003c 2 || details[1].trim().isEmpty()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":151,"author":{"gitId":"darrentfy"},"content":"            throw new DukeException(\"Invalid command! Please include details of this task\");","lastModifiedDate":"2023-08-30"},{"lineNumber":152,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":153,"author":{"gitId":"darrentfy"},"content":"        String[] eventDetails \u003d details[1].split(\"/from\", 2);","lastModifiedDate":"2023-08-30"},{"lineNumber":154,"author":{"gitId":"darrentfy"},"content":"        // user input does not include /from","lastModifiedDate":"2023-08-30"},{"lineNumber":155,"author":{"gitId":"darrentfy"},"content":"        if (eventDetails.length \u003c 2 || eventDetails[1].trim().isEmpty()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":156,"author":{"gitId":"darrentfy"},"content":"            throw new DukeException(\"Invalid command! Please include when the event starts\");","lastModifiedDate":"2023-08-30"},{"lineNumber":157,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":158,"author":{"gitId":"darrentfy"},"content":"        // user input does not include the description of the event","lastModifiedDate":"2023-09-01"},{"lineNumber":159,"author":{"gitId":"darrentfy"},"content":"        if (eventDetails[0].split(\" \", 2).length \u003c 2) {","lastModifiedDate":"2023-08-30"},{"lineNumber":160,"author":{"gitId":"darrentfy"},"content":"            throw new DukeException(\"Invalid command! Please include details of this task\");","lastModifiedDate":"2023-08-30"},{"lineNumber":161,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":162,"author":{"gitId":"darrentfy"},"content":"        String[] eventTimings \u003d eventDetails[1].split(\"/to\", 2);","lastModifiedDate":"2023-08-30"},{"lineNumber":163,"author":{"gitId":"darrentfy"},"content":"        // user input does not include /to","lastModifiedDate":"2023-08-30"},{"lineNumber":164,"author":{"gitId":"darrentfy"},"content":"        if (eventTimings.length \u003c 2 || eventTimings[1].trim().isEmpty()) {","lastModifiedDate":"2023-08-30"},{"lineNumber":165,"author":{"gitId":"darrentfy"},"content":"            throw new DukeException(\"Invalid command! Please include when the event ends\");","lastModifiedDate":"2023-08-30"},{"lineNumber":166,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":167,"author":{"gitId":"darrentfy"},"content":"        LocalDateTime from \u003d LocalDateTime.parse(eventTimings[0].trim(), inputFormatter);","lastModifiedDate":"2023-08-30"},{"lineNumber":168,"author":{"gitId":"darrentfy"},"content":"        LocalDateTime to \u003d LocalDateTime.parse(eventTimings[1].trim(), inputFormatter);","lastModifiedDate":"2023-08-30"},{"lineNumber":169,"author":{"gitId":"darrentfy"},"content":"        return new EventCommand(eventDetails[0].trim(), from, to);","lastModifiedDate":"2023-08-30"},{"lineNumber":170,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":171,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":172,"author":{"gitId":"darrentfy"},"content":"    private static FindCommand prepareFind(String[] details) throws DukeException {","lastModifiedDate":"2023-09-01"},{"lineNumber":173,"author":{"gitId":"darrentfy"},"content":"        // user input only has the command eg \"event\"","lastModifiedDate":"2023-09-01"},{"lineNumber":174,"author":{"gitId":"darrentfy"},"content":"        if (details.length \u003c 2 || details[1].trim().isEmpty()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":175,"author":{"gitId":"darrentfy"},"content":"            throw new DukeException(\"Invalid command! Please include a search keyword\");","lastModifiedDate":"2023-09-01"},{"lineNumber":176,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":177,"author":{"gitId":"darrentfy"},"content":"        return new FindCommand(details[1].trim());","lastModifiedDate":"2023-09-01"},{"lineNumber":178,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":179,"author":{"gitId":"darrentfy"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"darrentfy":179}},{"path":"src/main/java/duke/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"import java.io.File;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"import java.io.IOException;","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-08-29"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-29"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-29"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":"import task.Deadline;","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":"import task.Event;","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":"import task.Task;","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"darrentfy"},"content":"import task.Todo;","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"darrentfy"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"darrentfy"},"content":" * Represents the file used to store the todo list","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"darrentfy"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"darrentfy"},"content":"public class Storage {","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"darrentfy"},"content":"    private String filePath;","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"darrentfy"},"content":"    public Storage(String filePath) {","lastModifiedDate":"2023-08-29"},{"lineNumber":24,"author":{"gitId":"darrentfy"},"content":"        this.filePath \u003d filePath;","lastModifiedDate":"2023-08-29"},{"lineNumber":25,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":26,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"darrentfy"},"content":"     * Saves the TaskList data to the storage file.","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"darrentfy"},"content":"     * @param tasks the ArrayList of tasks to be saved","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"darrentfy"},"content":"    public void writeToFile(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-29"},{"lineNumber":33,"author":{"gitId":"darrentfy"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":34,"author":{"gitId":"darrentfy"},"content":"            File file \u003d new File(this.filePath);","lastModifiedDate":"2023-08-29"},{"lineNumber":35,"author":{"gitId":"darrentfy"},"content":"            if (!file.exists()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"darrentfy"},"content":"                File parentDir \u003d file.getParentFile();","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"darrentfy"},"content":"                if (parentDir !\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":38,"author":{"gitId":"darrentfy"},"content":"                    parentDir.mkdirs();","lastModifiedDate":"2023-08-29"},{"lineNumber":39,"author":{"gitId":"darrentfy"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":40,"author":{"gitId":"darrentfy"},"content":"                file.createNewFile();","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"darrentfy"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"darrentfy"},"content":"            StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"darrentfy"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2023-08-29"},{"lineNumber":44,"author":{"gitId":"darrentfy"},"content":"                String str \u003d String.format(\"%s | %s | %s\\n\", task.getType(),","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"darrentfy"},"content":"                        task.isDone() ? 1 : 0, task.formatForFileWriting());","lastModifiedDate":"2023-09-11"},{"lineNumber":46,"author":{"gitId":"darrentfy"},"content":"                result.append(str);","lastModifiedDate":"2023-08-29"},{"lineNumber":47,"author":{"gitId":"darrentfy"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":48,"author":{"gitId":"darrentfy"},"content":"            FileWriter fw \u003d new FileWriter(this.filePath);","lastModifiedDate":"2023-08-29"},{"lineNumber":49,"author":{"gitId":"darrentfy"},"content":"            assert file.exists() : \"File should be created if it does not exist\";","lastModifiedDate":"2023-09-11"},{"lineNumber":50,"author":{"gitId":"darrentfy"},"content":"            fw.write(result.toString());","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"darrentfy"},"content":"            fw.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"darrentfy"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"darrentfy"},"content":"            System.out.println(\"Something went wrong when saving tasks: \" + e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":54,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":57,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"darrentfy"},"content":"     * Loads the todo list data from this storage file, and then returns it","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"darrentfy"},"content":"     * Returns an empty ArrayList of tasks if the file does not exist","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"darrentfy"},"content":"     * @throws DukeException when data of invalid format is read from Storage file","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"darrentfy"},"content":"    public ArrayList\u003cTask\u003e readFile() {","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"darrentfy"},"content":"        DateTimeFormatter inputFormatter \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\");","lastModifiedDate":"2023-08-29"},{"lineNumber":65,"author":{"gitId":"darrentfy"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-29"},{"lineNumber":66,"author":{"gitId":"darrentfy"},"content":"        Scanner scanner \u003d null;","lastModifiedDate":"2023-08-29"},{"lineNumber":67,"author":{"gitId":"darrentfy"},"content":"        try {","lastModifiedDate":"2023-08-29"},{"lineNumber":68,"author":{"gitId":"darrentfy"},"content":"            File file \u003d new File(filePath);","lastModifiedDate":"2023-08-29"},{"lineNumber":69,"author":{"gitId":"darrentfy"},"content":"            if (!file.exists()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":70,"author":{"gitId":"darrentfy"},"content":"                return tasks;","lastModifiedDate":"2023-08-29"},{"lineNumber":71,"author":{"gitId":"darrentfy"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"darrentfy"},"content":"            scanner \u003d new Scanner(file);","lastModifiedDate":"2023-08-29"},{"lineNumber":73,"author":{"gitId":"darrentfy"},"content":"            while (scanner.hasNextLine()) {","lastModifiedDate":"2023-08-29"},{"lineNumber":74,"author":{"gitId":"darrentfy"},"content":"                String[] line \u003d scanner.nextLine().split(\"\\\\s*\\\\|\\\\s*\");","lastModifiedDate":"2023-08-29"},{"lineNumber":75,"author":{"gitId":"darrentfy"},"content":"                if (line.length \u003c 3) {","lastModifiedDate":"2023-09-11"},{"lineNumber":76,"author":{"gitId":"darrentfy"},"content":"                    throw new DukeException(\"Invalid format found in ./data/tasks.txt,\"","lastModifiedDate":"2023-09-11"},{"lineNumber":77,"author":{"gitId":"darrentfy"},"content":"                            + \" please ensure data is in correct format\");","lastModifiedDate":"2023-09-11"},{"lineNumber":78,"author":{"gitId":"darrentfy"},"content":"                }","lastModifiedDate":"2023-09-11"},{"lineNumber":79,"author":{"gitId":"darrentfy"},"content":"                String taskType \u003d line[0];","lastModifiedDate":"2023-08-29"},{"lineNumber":80,"author":{"gitId":"darrentfy"},"content":"                boolean isDone \u003d line[1].equals(\"1\");","lastModifiedDate":"2023-08-29"},{"lineNumber":81,"author":{"gitId":"darrentfy"},"content":"                String description \u003d line[2];","lastModifiedDate":"2023-08-29"},{"lineNumber":82,"author":{"gitId":"darrentfy"},"content":"                Task task;","lastModifiedDate":"2023-08-29"},{"lineNumber":83,"author":{"gitId":"darrentfy"},"content":"                switch (taskType) {","lastModifiedDate":"2023-08-29"},{"lineNumber":84,"author":{"gitId":"darrentfy"},"content":"                case \"T\":","lastModifiedDate":"2023-08-29"},{"lineNumber":85,"author":{"gitId":"darrentfy"},"content":"                    task \u003d new Todo(description);","lastModifiedDate":"2023-08-29"},{"lineNumber":86,"author":{"gitId":"darrentfy"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":87,"author":{"gitId":"darrentfy"},"content":"                case \"D\":","lastModifiedDate":"2023-08-29"},{"lineNumber":88,"author":{"gitId":"darrentfy"},"content":"                    LocalDateTime by \u003d LocalDateTime.parse(line[3].trim(), inputFormatter);","lastModifiedDate":"2023-08-29"},{"lineNumber":89,"author":{"gitId":"darrentfy"},"content":"                    task \u003d new Deadline(description, by);","lastModifiedDate":"2023-08-29"},{"lineNumber":90,"author":{"gitId":"darrentfy"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":91,"author":{"gitId":"darrentfy"},"content":"                case \"E\":","lastModifiedDate":"2023-08-29"},{"lineNumber":92,"author":{"gitId":"darrentfy"},"content":"                    LocalDateTime from \u003d LocalDateTime.parse(line[3].trim(), inputFormatter);","lastModifiedDate":"2023-08-29"},{"lineNumber":93,"author":{"gitId":"darrentfy"},"content":"                    LocalDateTime to \u003d LocalDateTime.parse(line[4].trim(), inputFormatter);","lastModifiedDate":"2023-08-29"},{"lineNumber":94,"author":{"gitId":"darrentfy"},"content":"                    task \u003d new Event(description, from, to);","lastModifiedDate":"2023-08-29"},{"lineNumber":95,"author":{"gitId":"darrentfy"},"content":"                    break;","lastModifiedDate":"2023-08-29"},{"lineNumber":96,"author":{"gitId":"darrentfy"},"content":"                default:","lastModifiedDate":"2023-08-29"},{"lineNumber":97,"author":{"gitId":"darrentfy"},"content":"                    throw new DukeException(\"Invalid format found in ./data/tasks.txt,\"","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"darrentfy"},"content":"                            + \" please ensure data is in correct format\");","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"darrentfy"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":100,"author":{"gitId":"darrentfy"},"content":"                if (isDone) {","lastModifiedDate":"2023-08-29"},{"lineNumber":101,"author":{"gitId":"darrentfy"},"content":"                    task.setDone(true);","lastModifiedDate":"2023-08-30"},{"lineNumber":102,"author":{"gitId":"darrentfy"},"content":"                }","lastModifiedDate":"2023-08-29"},{"lineNumber":103,"author":{"gitId":"darrentfy"},"content":"                tasks.add(task);","lastModifiedDate":"2023-08-29"},{"lineNumber":104,"author":{"gitId":"darrentfy"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":105,"author":{"gitId":"darrentfy"},"content":"        } catch (IOException | DukeException | DateTimeParseException e) {","lastModifiedDate":"2023-08-29"},{"lineNumber":106,"author":{"gitId":"darrentfy"},"content":"            System.out.println(\"Something went wrong when loading tasks: \" + e.getMessage());","lastModifiedDate":"2023-08-29"},{"lineNumber":107,"author":{"gitId":"darrentfy"},"content":"        } finally {","lastModifiedDate":"2023-08-29"},{"lineNumber":108,"author":{"gitId":"darrentfy"},"content":"            if (scanner !\u003d null) {","lastModifiedDate":"2023-08-29"},{"lineNumber":109,"author":{"gitId":"darrentfy"},"content":"                scanner.close();","lastModifiedDate":"2023-08-29"},{"lineNumber":110,"author":{"gitId":"darrentfy"},"content":"            }","lastModifiedDate":"2023-08-29"},{"lineNumber":111,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-29"},{"lineNumber":112,"author":{"gitId":"darrentfy"},"content":"        return tasks;","lastModifiedDate":"2023-08-29"},{"lineNumber":113,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":114,"author":{"gitId":"darrentfy"},"content":"}","lastModifiedDate":"2023-08-29"}],"authorContributionMap":{"darrentfy":114}},{"path":"src/main/java/duke/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"package duke;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":" * Text UI of the application","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"public class Ui {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":"    private final Scanner scanner;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":"    public Ui() {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"darrentfy":14}},{"path":"src/main/java/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"package task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":" * Represents a deadline task with a description and a date/time to do by","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":"    public static final String TASK_TYPE \u003d \"D\";","lastModifiedDate":"2023-09-11"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":"    /** Deadline that the task is to be done by */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":"    protected LocalDateTime by;","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"darrentfy"},"content":"     * Creates a deadline with the given description, and the date/time the task is to be done by","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"darrentfy"},"content":"     * @param description description of the task","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"darrentfy"},"content":"     * @param by date/time the task is to be done by","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"darrentfy"},"content":"    public Deadline(String description, LocalDateTime by) {","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"darrentfy"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"darrentfy"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-08-23"},{"lineNumber":25,"author":{"gitId":"darrentfy"},"content":"        this.taskType \u003d TASK_TYPE;","lastModifiedDate":"2023-09-11"},{"lineNumber":26,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-11"},{"lineNumber":29,"author":{"gitId":"darrentfy"},"content":"     * Formats the task into a string to be written to the storage file","lastModifiedDate":"2023-09-11"},{"lineNumber":30,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-11"},{"lineNumber":31,"author":{"gitId":"darrentfy"},"content":"     * @return string to be written to the storage file","lastModifiedDate":"2023-09-11"},{"lineNumber":32,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-11"},{"lineNumber":33,"author":{"gitId":"darrentfy"},"content":"    public String formatForFileWriting() {","lastModifiedDate":"2023-09-11"},{"lineNumber":34,"author":{"gitId":"darrentfy"},"content":"        return this.getDescription() + \" | \" + this.by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\"));","lastModifiedDate":"2023-09-11"},{"lineNumber":35,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":36,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"darrentfy"},"content":"     * Returns a string representation of the task","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"darrentfy"},"content":"     * @return string representation of the task","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"darrentfy"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":43,"author":{"gitId":"darrentfy"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":44,"author":{"gitId":"darrentfy"},"content":"        return super.toString() + \" (by: \" + this.by.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\")) + \")\";","lastModifiedDate":"2023-08-29"},{"lineNumber":45,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":46,"author":{"gitId":"darrentfy"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"darrentfy":46}},{"path":"src/main/java/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"package task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-08-29"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-08-29"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":" * Represents a event task with a description, start date/time and end date/time","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":"    public static final String TASK_TYPE \u003d \"E\";","lastModifiedDate":"2023-09-11"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":"    /** Starting date/time of the event */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":"    protected LocalDateTime from;","lastModifiedDate":"2023-08-29"},{"lineNumber":15,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"    /** Ending date/time of the event */","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"darrentfy"},"content":"    protected LocalDateTime to;","lastModifiedDate":"2023-08-29"},{"lineNumber":18,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"darrentfy"},"content":"     * Creates an event with the given description, starting date/time and ending date/time of the event","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"darrentfy"},"content":"     * @param description description of the task","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"darrentfy"},"content":"     * @param from starting date/time of the task","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"darrentfy"},"content":"     * @param to ending date/time of the task","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"darrentfy"},"content":"    public Event(String description, LocalDateTime from, LocalDateTime to) {","lastModifiedDate":"2023-08-29"},{"lineNumber":27,"author":{"gitId":"darrentfy"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":28,"author":{"gitId":"darrentfy"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-08-23"},{"lineNumber":29,"author":{"gitId":"darrentfy"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-08-23"},{"lineNumber":30,"author":{"gitId":"darrentfy"},"content":"        this.taskType \u003d TASK_TYPE;","lastModifiedDate":"2023-09-11"},{"lineNumber":31,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":32,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-11"},{"lineNumber":34,"author":{"gitId":"darrentfy"},"content":"     * Formats the task into a string to be written to the storage file","lastModifiedDate":"2023-09-11"},{"lineNumber":35,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-11"},{"lineNumber":36,"author":{"gitId":"darrentfy"},"content":"     * @return string to be written to the storage file","lastModifiedDate":"2023-09-11"},{"lineNumber":37,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-11"},{"lineNumber":38,"author":{"gitId":"darrentfy"},"content":"    public String formatForFileWriting() {","lastModifiedDate":"2023-09-11"},{"lineNumber":39,"author":{"gitId":"darrentfy"},"content":"        return this.getDescription() + \" | \" + this.from.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\"))","lastModifiedDate":"2023-09-11"},{"lineNumber":40,"author":{"gitId":"darrentfy"},"content":"                + \" | \" + this.to.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\"));","lastModifiedDate":"2023-08-29"},{"lineNumber":41,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":42,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":43,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"darrentfy"},"content":"     * Returns a string representation of the task","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"darrentfy"},"content":"     * @return string representation of the task","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"darrentfy"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"darrentfy"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"darrentfy"},"content":"        return super.toString() + \" (from: \" + this.from.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\"))","lastModifiedDate":"2023-08-29"},{"lineNumber":51,"author":{"gitId":"darrentfy"},"content":"                + \" to: \" + this.to.format(DateTimeFormatter.ofPattern(\"MMM dd yyyy HHmm\")) + \")\";","lastModifiedDate":"2023-08-29"},{"lineNumber":52,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":53,"author":{"gitId":"darrentfy"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"darrentfy":53}},{"path":"src/main/java/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"package task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":" * Represents a task","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"public class Task {","lastModifiedDate":"2023-08-30"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"    /** Description of the task */","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":"    protected String description;","lastModifiedDate":"2023-08-23"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":"    protected String taskType;","lastModifiedDate":"2023-09-11"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":"    /** True if the task is done, false otherwise */","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-23"},{"lineNumber":15,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"darrentfy"},"content":"     * Creates a task with the given description","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"darrentfy"},"content":"     * @param description description of the task","lastModifiedDate":"2023-09-04"},{"lineNumber":20,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"darrentfy"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-23"},{"lineNumber":22,"author":{"gitId":"darrentfy"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-23"},{"lineNumber":23,"author":{"gitId":"darrentfy"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":24,"author":{"gitId":"darrentfy"},"content":"        this.taskType \u003d \" \";","lastModifiedDate":"2023-09-11"},{"lineNumber":25,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":26,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":27,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"darrentfy"},"content":"     * Returns an icon depending on whether the task is done","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"darrentfy"},"content":"     * @return \"X\" if the task is done, \" \" otherwise","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"darrentfy"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-23"},{"lineNumber":33,"author":{"gitId":"darrentfy"},"content":"        return (this.isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-08-23"},{"lineNumber":34,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"darrentfy"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-23"},{"lineNumber":37,"author":{"gitId":"darrentfy"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":39,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":40,"author":{"gitId":"darrentfy"},"content":"    public boolean isDone() {","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"darrentfy"},"content":"        return this.isDone;","lastModifiedDate":"2023-08-30"},{"lineNumber":42,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":43,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":44,"author":{"gitId":"darrentfy"},"content":"    public void setDone(boolean done) {","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"darrentfy"},"content":"        this.isDone \u003d done;","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"darrentfy"},"content":"    public void markAsUndone() {","lastModifiedDate":"2023-08-23"},{"lineNumber":49,"author":{"gitId":"darrentfy"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-23"},{"lineNumber":50,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":51,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":52,"author":{"gitId":"darrentfy"},"content":"    public String getType() {","lastModifiedDate":"2023-08-29"},{"lineNumber":53,"author":{"gitId":"darrentfy"},"content":"        return this.taskType;","lastModifiedDate":"2023-09-11"},{"lineNumber":54,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":55,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":56,"author":{"gitId":"darrentfy"},"content":"    public String getDescription() {","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"darrentfy"},"content":"        return this.description;","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"darrentfy"},"content":"    public String formatForFileWriting() {","lastModifiedDate":"2023-09-11"},{"lineNumber":61,"author":{"gitId":"darrentfy"},"content":"        return \"\";","lastModifiedDate":"2023-09-11"},{"lineNumber":62,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":63,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":64,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"darrentfy"},"content":"     * Returns a string representation of the task","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"darrentfy"},"content":"     * @return string representation of the task","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"darrentfy"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":70,"author":{"gitId":"darrentfy"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":71,"author":{"gitId":"darrentfy"},"content":"        return \"[\" + this.getType() + \"]\" + \"[\" + this.getStatusIcon() + \"] \" + this.description;","lastModifiedDate":"2023-08-29"},{"lineNumber":72,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":73,"author":{"gitId":"darrentfy"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"darrentfy":73}},{"path":"src/main/java/task/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"package task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-30"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":" * Represents a list of task to do","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"public class TaskList {","lastModifiedDate":"2023-08-30"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":"    private final ArrayList\u003cTask\u003e tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":"    public TaskList(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":"        this.tasks \u003d tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":15,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"     * Returns the list of tasks","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"darrentfy"},"content":"     * @return ArrayList of tasks","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"darrentfy"},"content":"    public ArrayList\u003cTask\u003e getList() {","lastModifiedDate":"2023-08-30"},{"lineNumber":21,"author":{"gitId":"darrentfy"},"content":"        return this.tasks;","lastModifiedDate":"2023-08-30"},{"lineNumber":22,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":23,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":24,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"darrentfy"},"content":"     * returns the length of to do list","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"darrentfy"},"content":"     * @return length of to do list","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"darrentfy"},"content":"    public int getSize() {","lastModifiedDate":"2023-08-30"},{"lineNumber":30,"author":{"gitId":"darrentfy"},"content":"        return this.tasks.size();","lastModifiedDate":"2023-08-30"},{"lineNumber":31,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"darrentfy"},"content":"    public boolean isEmpty() {","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"darrentfy"},"content":"        return this.getSize() \u003d\u003d 0;","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"darrentfy"},"content":"    public Task getTask(int index) {","lastModifiedDate":"2023-08-30"},{"lineNumber":38,"author":{"gitId":"darrentfy"},"content":"        return this.tasks.get(index);","lastModifiedDate":"2023-08-30"},{"lineNumber":39,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":40,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":41,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"darrentfy"},"content":"     * Adds the given task to the list","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"darrentfy"},"content":"    public void addTask(Task task) {","lastModifiedDate":"2023-08-30"},{"lineNumber":45,"author":{"gitId":"darrentfy"},"content":"        this.tasks.add(task);","lastModifiedDate":"2023-08-30"},{"lineNumber":46,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":47,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":48,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"darrentfy"},"content":"     * Deletes the given task from the list","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"darrentfy"},"content":"    public void deleteTask(Task task) {","lastModifiedDate":"2023-08-30"},{"lineNumber":52,"author":{"gitId":"darrentfy"},"content":"        this.tasks.remove(task);","lastModifiedDate":"2023-08-30"},{"lineNumber":53,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":54,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":55,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"darrentfy"},"content":"     * Marks the given task as done","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"darrentfy"},"content":"    public void markTask(Task task) {","lastModifiedDate":"2023-08-30"},{"lineNumber":59,"author":{"gitId":"darrentfy"},"content":"        task.markAsDone();","lastModifiedDate":"2023-08-30"},{"lineNumber":60,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":61,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":62,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"darrentfy"},"content":"     * Marks the given task as undone","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"darrentfy"},"content":"    public void unmarkTask(Task task) {","lastModifiedDate":"2023-08-30"},{"lineNumber":66,"author":{"gitId":"darrentfy"},"content":"        task.markAsUndone();","lastModifiedDate":"2023-08-30"},{"lineNumber":67,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":68,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":69,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"darrentfy"},"content":"     * Returns a string representation of the task list","lastModifiedDate":"2023-09-05"},{"lineNumber":71,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"darrentfy"},"content":"    @Override","lastModifiedDate":"2023-09-11"},{"lineNumber":73,"author":{"gitId":"darrentfy"},"content":"    public String toString() {","lastModifiedDate":"2023-09-05"},{"lineNumber":74,"author":{"gitId":"darrentfy"},"content":"        int index \u003d 1;","lastModifiedDate":"2023-08-30"},{"lineNumber":75,"author":{"gitId":"darrentfy"},"content":"        String res \u003d \"\";","lastModifiedDate":"2023-09-05"},{"lineNumber":76,"author":{"gitId":"darrentfy"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-08-30"},{"lineNumber":77,"author":{"gitId":"darrentfy"},"content":"            res +\u003d String.format(\"%d. %s\\n\", index, task.toString());","lastModifiedDate":"2023-09-05"},{"lineNumber":78,"author":{"gitId":"darrentfy"},"content":"            index++;","lastModifiedDate":"2023-08-30"},{"lineNumber":79,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-30"},{"lineNumber":80,"author":{"gitId":"darrentfy"},"content":"        return res;","lastModifiedDate":"2023-09-05"},{"lineNumber":81,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-30"},{"lineNumber":82,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-04"},{"lineNumber":84,"author":{"gitId":"darrentfy"},"content":"     * Filters the task list by the given keyword","lastModifiedDate":"2023-09-04"},{"lineNumber":85,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-04"},{"lineNumber":86,"author":{"gitId":"darrentfy"},"content":"     * @param keyword keyword to filter the task list by","lastModifiedDate":"2023-09-04"},{"lineNumber":87,"author":{"gitId":"darrentfy"},"content":"     * @return filtered task list with tasks which contain the given keyword","lastModifiedDate":"2023-09-04"},{"lineNumber":88,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-04"},{"lineNumber":89,"author":{"gitId":"darrentfy"},"content":"    public ArrayList\u003cTask\u003e filterTasks(String keyword) {","lastModifiedDate":"2023-09-01"},{"lineNumber":90,"author":{"gitId":"darrentfy"},"content":"        ArrayList\u003cTask\u003e filteredTasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":91,"author":{"gitId":"darrentfy"},"content":"        String keywordLowercase \u003d keyword.toLowerCase();","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"darrentfy"},"content":"        for (Task task : tasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":93,"author":{"gitId":"darrentfy"},"content":"            String description \u003d task.getDescription().toLowerCase();","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"darrentfy"},"content":"            if (description.contains(keywordLowercase)) {","lastModifiedDate":"2023-09-01"},{"lineNumber":95,"author":{"gitId":"darrentfy"},"content":"                filteredTasks.add(task);","lastModifiedDate":"2023-09-01"},{"lineNumber":96,"author":{"gitId":"darrentfy"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"darrentfy"},"content":"        assert filteredTasks.size() \u003c\u003d this.getSize() : \"Filtered task list should not be longer than original list\";","lastModifiedDate":"2023-09-11"},{"lineNumber":99,"author":{"gitId":"darrentfy"},"content":"        return filteredTasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"darrentfy"},"content":"}","lastModifiedDate":"2023-08-30"}],"authorContributionMap":{"darrentfy":101}},{"path":"src/main/java/task/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"package task;","lastModifiedDate":"2023-08-30"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-30"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"/**","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":" * Represents a todo task with a description","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":" */","lastModifiedDate":"2023-09-01"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-23"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"    public static final String TASK_TYPE \u003d \"T\";","lastModifiedDate":"2023-09-11"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-11"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":"     * Creates a todo with the given description","lastModifiedDate":"2023-09-11"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-11"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":"     * @param description description of the task","lastModifiedDate":"2023-09-11"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-11"},{"lineNumber":15,"author":{"gitId":"darrentfy"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-08-23"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"        super(description);","lastModifiedDate":"2023-08-23"},{"lineNumber":17,"author":{"gitId":"darrentfy"},"content":"        this.taskType \u003d TASK_TYPE;","lastModifiedDate":"2023-09-11"},{"lineNumber":18,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":19,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-23"},{"lineNumber":20,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-11"},{"lineNumber":21,"author":{"gitId":"darrentfy"},"content":"     * Formats the task into a string to be written to the storage file","lastModifiedDate":"2023-09-11"},{"lineNumber":22,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-11"},{"lineNumber":23,"author":{"gitId":"darrentfy"},"content":"     * @return string to be written to the storage file","lastModifiedDate":"2023-09-11"},{"lineNumber":24,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-11"},{"lineNumber":25,"author":{"gitId":"darrentfy"},"content":"    public String formatForFileWriting() {","lastModifiedDate":"2023-09-11"},{"lineNumber":26,"author":{"gitId":"darrentfy"},"content":"        return this.getDescription();","lastModifiedDate":"2023-09-11"},{"lineNumber":27,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-29"},{"lineNumber":28,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-29"},{"lineNumber":29,"author":{"gitId":"darrentfy"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"darrentfy"},"content":"     * Returns a string representation of the task","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"darrentfy"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"darrentfy"},"content":"     * @return string representation of the task","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"darrentfy"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"darrentfy"},"content":"    @Override","lastModifiedDate":"2023-08-23"},{"lineNumber":35,"author":{"gitId":"darrentfy"},"content":"    public String toString() {","lastModifiedDate":"2023-08-23"},{"lineNumber":36,"author":{"gitId":"darrentfy"},"content":"        return super.toString();","lastModifiedDate":"2023-08-29"},{"lineNumber":37,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-23"},{"lineNumber":38,"author":{"gitId":"darrentfy"},"content":"}","lastModifiedDate":"2023-08-23"}],"authorContributionMap":{"darrentfy":38}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":"        \u003cLabel fx:id\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\"\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":"         \u003cfont\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":"            \u003cFont name\u003d\"Helvetica\" size\u003d\"13.0\" /\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":"         \u003c/font\u003e\u003c/Label\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"darrentfy"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"darrentfy"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"darrentfy"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"darrentfy"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"darrentfy"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"darrentfy":20}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"\u003c?import javafx.scene.text.Font?\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-05"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/20.0.1\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.MainWindow\"\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":"        \u003cTextField fx:id\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" promptText\u003d\"Enter a command\" AnchorPane.bottomAnchor\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":"         \u003cfont\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":"            \u003cFont name\u003d\"Helvetica\" size\u003d\"13.0\" /\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":15,"author":{"gitId":"darrentfy"},"content":"         \u003c/font\u003e\u003c/TextField\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"        \u003cButton fx:id\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\"\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":17,"author":{"gitId":"darrentfy"},"content":"         \u003cfont\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":18,"author":{"gitId":"darrentfy"},"content":"            \u003cFont name\u003d\"Helvetica\" size\u003d\"13.0\" /\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":19,"author":{"gitId":"darrentfy"},"content":"         \u003c/font\u003e\u003c/Button\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":20,"author":{"gitId":"darrentfy"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":21,"author":{"gitId":"darrentfy"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":22,"author":{"gitId":"darrentfy"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefHeight\u003d\"552.0\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":23,"author":{"gitId":"darrentfy"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":24,"author":{"gitId":"darrentfy"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":25,"author":{"gitId":"darrentfy"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-05"},{"lineNumber":26,"author":{"gitId":"darrentfy"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-05"}],"authorContributionMap":{"darrentfy":26}},{"path":"src/test/java/duke/ParserTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"package duke;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":"import static org.junit.jupiter.api.Assertions.fail;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-11"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"import command.Command;","lastModifiedDate":"2023-08-31"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":"import command.DeadlineCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":"import command.DeleteCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":"import command.EventCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":"import command.ListCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":"import command.MarkCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":"import command.TodoCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"darrentfy"},"content":"import command.UnmarkCommand;","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"darrentfy"},"content":"public class ParserTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"darrentfy"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"darrentfy"},"content":"    public void parse_validListInput_success() {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"darrentfy"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"darrentfy"},"content":"            String validInput \u003d \"list\";","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"darrentfy"},"content":"            Command command \u003d Parser.parse(validInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"darrentfy"},"content":"            assertEquals(ListCommand.class, command.getClass());","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"darrentfy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"darrentfy"},"content":"            System.out.println(\"Unexpected DukeException was thrown\");","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"darrentfy"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"darrentfy"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"darrentfy"},"content":"    public void parse_validMarkInput_success() {","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"darrentfy"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"darrentfy"},"content":"            String validInput \u003d \"mark 1\";","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"darrentfy"},"content":"            Command command \u003d Parser.parse(validInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"darrentfy"},"content":"            assertEquals(MarkCommand.class, command.getClass());","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"darrentfy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"darrentfy"},"content":"            System.out.println(\"Unexpected DukeException was thrown\");","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"darrentfy"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"darrentfy"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"darrentfy"},"content":"    public void parse_invalidMarkInput_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"darrentfy"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"darrentfy"},"content":"            String invalidInput \u003d \"mark\";","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"darrentfy"},"content":"            Parser.parse(invalidInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"darrentfy"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"darrentfy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"darrentfy"},"content":"            assertEquals(\"Invalid command! Please include the index of the task you wish to mark\",","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"darrentfy"},"content":"                    e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"darrentfy"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":56,"author":{"gitId":"darrentfy"},"content":"    public void parse_validUnmarkInput_success() {","lastModifiedDate":"2023-08-31"},{"lineNumber":57,"author":{"gitId":"darrentfy"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":58,"author":{"gitId":"darrentfy"},"content":"            String validInput \u003d \"unmark 1\";","lastModifiedDate":"2023-08-31"},{"lineNumber":59,"author":{"gitId":"darrentfy"},"content":"            Command command \u003d Parser.parse(validInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":60,"author":{"gitId":"darrentfy"},"content":"            assertEquals(UnmarkCommand.class, command.getClass());","lastModifiedDate":"2023-08-31"},{"lineNumber":61,"author":{"gitId":"darrentfy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":62,"author":{"gitId":"darrentfy"},"content":"            System.out.println(\"Unexpected DukeException was thrown\");","lastModifiedDate":"2023-08-31"},{"lineNumber":63,"author":{"gitId":"darrentfy"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":64,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":65,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":66,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":67,"author":{"gitId":"darrentfy"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":68,"author":{"gitId":"darrentfy"},"content":"    public void parse_invalidUnmarkInput_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":69,"author":{"gitId":"darrentfy"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":70,"author":{"gitId":"darrentfy"},"content":"            String invalidInput \u003d \"unmark\";","lastModifiedDate":"2023-08-31"},{"lineNumber":71,"author":{"gitId":"darrentfy"},"content":"            Parser.parse(invalidInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":72,"author":{"gitId":"darrentfy"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":73,"author":{"gitId":"darrentfy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":74,"author":{"gitId":"darrentfy"},"content":"            assertEquals(\"Invalid command! Please include the index of the task you wish to unmark\",","lastModifiedDate":"2023-08-31"},{"lineNumber":75,"author":{"gitId":"darrentfy"},"content":"                    e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":76,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":77,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":78,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":79,"author":{"gitId":"darrentfy"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":80,"author":{"gitId":"darrentfy"},"content":"    public void parse_validDeleteInput_success() {","lastModifiedDate":"2023-08-31"},{"lineNumber":81,"author":{"gitId":"darrentfy"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":82,"author":{"gitId":"darrentfy"},"content":"            String validInput \u003d \"delete 1\";","lastModifiedDate":"2023-08-31"},{"lineNumber":83,"author":{"gitId":"darrentfy"},"content":"            Command command \u003d Parser.parse(validInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":84,"author":{"gitId":"darrentfy"},"content":"            assertEquals(DeleteCommand.class, command.getClass());","lastModifiedDate":"2023-08-31"},{"lineNumber":85,"author":{"gitId":"darrentfy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":86,"author":{"gitId":"darrentfy"},"content":"            System.out.println(\"Unexpected DukeException was thrown\");","lastModifiedDate":"2023-08-31"},{"lineNumber":87,"author":{"gitId":"darrentfy"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":88,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":89,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":90,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":91,"author":{"gitId":"darrentfy"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":92,"author":{"gitId":"darrentfy"},"content":"    public void parse_invalidDeleteInput_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":93,"author":{"gitId":"darrentfy"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":94,"author":{"gitId":"darrentfy"},"content":"            String invalidInput \u003d \"delete\";","lastModifiedDate":"2023-08-31"},{"lineNumber":95,"author":{"gitId":"darrentfy"},"content":"            Parser.parse(invalidInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":96,"author":{"gitId":"darrentfy"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":97,"author":{"gitId":"darrentfy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":98,"author":{"gitId":"darrentfy"},"content":"            assertEquals(\"Invalid command! Please include the index of the task you wish to delete\",","lastModifiedDate":"2023-08-31"},{"lineNumber":99,"author":{"gitId":"darrentfy"},"content":"                    e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":100,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":101,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":102,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":103,"author":{"gitId":"darrentfy"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":104,"author":{"gitId":"darrentfy"},"content":"    public void parse_validTodoInput_success() {","lastModifiedDate":"2023-08-31"},{"lineNumber":105,"author":{"gitId":"darrentfy"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":106,"author":{"gitId":"darrentfy"},"content":"            String validInput \u003d \"todo read book\";","lastModifiedDate":"2023-08-31"},{"lineNumber":107,"author":{"gitId":"darrentfy"},"content":"            Command command \u003d Parser.parse(validInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":108,"author":{"gitId":"darrentfy"},"content":"            assertEquals(TodoCommand.class, command.getClass());","lastModifiedDate":"2023-08-31"},{"lineNumber":109,"author":{"gitId":"darrentfy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":110,"author":{"gitId":"darrentfy"},"content":"            System.out.println(\"Unexpected DukeException was thrown\");","lastModifiedDate":"2023-08-31"},{"lineNumber":111,"author":{"gitId":"darrentfy"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":112,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":113,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":114,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":115,"author":{"gitId":"darrentfy"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":116,"author":{"gitId":"darrentfy"},"content":"    public void parse_invalidTodoInput_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":117,"author":{"gitId":"darrentfy"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":118,"author":{"gitId":"darrentfy"},"content":"            String invalidInput \u003d \"todo\";","lastModifiedDate":"2023-08-31"},{"lineNumber":119,"author":{"gitId":"darrentfy"},"content":"            Parser.parse(invalidInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":120,"author":{"gitId":"darrentfy"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":121,"author":{"gitId":"darrentfy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":122,"author":{"gitId":"darrentfy"},"content":"            assertEquals(\"Invalid command! Please include details of this task\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":123,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":124,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":125,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":126,"author":{"gitId":"darrentfy"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":127,"author":{"gitId":"darrentfy"},"content":"    public void parse_validDeadlineInput_success() {","lastModifiedDate":"2023-08-31"},{"lineNumber":128,"author":{"gitId":"darrentfy"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":129,"author":{"gitId":"darrentfy"},"content":"            String validInput \u003d \"deadline homework /by 01/01/2024 2359\";","lastModifiedDate":"2023-08-31"},{"lineNumber":130,"author":{"gitId":"darrentfy"},"content":"            Command command \u003d Parser.parse(validInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":131,"author":{"gitId":"darrentfy"},"content":"            assertEquals(DeadlineCommand.class, command.getClass());","lastModifiedDate":"2023-08-31"},{"lineNumber":132,"author":{"gitId":"darrentfy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":133,"author":{"gitId":"darrentfy"},"content":"            System.out.println(\"Unexpected DukeException was thrown\");","lastModifiedDate":"2023-08-31"},{"lineNumber":134,"author":{"gitId":"darrentfy"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":135,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":136,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":137,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":138,"author":{"gitId":"darrentfy"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":139,"author":{"gitId":"darrentfy"},"content":"    public void parse_invalidDeadlineInput_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":140,"author":{"gitId":"darrentfy"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":141,"author":{"gitId":"darrentfy"},"content":"            String invalidInput \u003d \"deadline\";","lastModifiedDate":"2023-08-31"},{"lineNumber":142,"author":{"gitId":"darrentfy"},"content":"            Parser.parse(invalidInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":143,"author":{"gitId":"darrentfy"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":144,"author":{"gitId":"darrentfy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":145,"author":{"gitId":"darrentfy"},"content":"            assertEquals(\"Invalid command! Please include details of this task\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":146,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":147,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":148,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":149,"author":{"gitId":"darrentfy"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":150,"author":{"gitId":"darrentfy"},"content":"    public void parse_invalidDeadlineInputMissingDeadline_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":151,"author":{"gitId":"darrentfy"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":152,"author":{"gitId":"darrentfy"},"content":"            String invalidInput \u003d \"deadline homework\";","lastModifiedDate":"2023-08-31"},{"lineNumber":153,"author":{"gitId":"darrentfy"},"content":"            Parser.parse(invalidInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":154,"author":{"gitId":"darrentfy"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":155,"author":{"gitId":"darrentfy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":156,"author":{"gitId":"darrentfy"},"content":"            assertEquals(\"Invalid command! Please include the deadline of this task\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":157,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":158,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":159,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":160,"author":{"gitId":"darrentfy"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":161,"author":{"gitId":"darrentfy"},"content":"    public void parse_validEventInput_success() {","lastModifiedDate":"2023-08-31"},{"lineNumber":162,"author":{"gitId":"darrentfy"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":163,"author":{"gitId":"darrentfy"},"content":"            String validInput \u003d \"event meeting /from 01/01/2024 0800 /to 01/01/2024 1000\";","lastModifiedDate":"2023-08-31"},{"lineNumber":164,"author":{"gitId":"darrentfy"},"content":"            Command command \u003d Parser.parse(validInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":165,"author":{"gitId":"darrentfy"},"content":"            assertEquals(EventCommand.class, command.getClass());","lastModifiedDate":"2023-08-31"},{"lineNumber":166,"author":{"gitId":"darrentfy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":167,"author":{"gitId":"darrentfy"},"content":"            System.out.println(\"Unexpected DukeException was thrown\");","lastModifiedDate":"2023-08-31"},{"lineNumber":168,"author":{"gitId":"darrentfy"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":169,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":170,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":171,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":172,"author":{"gitId":"darrentfy"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":173,"author":{"gitId":"darrentfy"},"content":"    public void parse_invalidEventInput_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":174,"author":{"gitId":"darrentfy"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":175,"author":{"gitId":"darrentfy"},"content":"            String invalidInput \u003d \"event\";","lastModifiedDate":"2023-08-31"},{"lineNumber":176,"author":{"gitId":"darrentfy"},"content":"            Parser.parse(invalidInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":177,"author":{"gitId":"darrentfy"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":178,"author":{"gitId":"darrentfy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":179,"author":{"gitId":"darrentfy"},"content":"            assertEquals(\"Invalid command! Please include details of this task\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":180,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":181,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":182,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":183,"author":{"gitId":"darrentfy"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":184,"author":{"gitId":"darrentfy"},"content":"    public void parse_invalidEventInputMissingStart_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":185,"author":{"gitId":"darrentfy"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":186,"author":{"gitId":"darrentfy"},"content":"            String invalidInput \u003d \"event meeting\";","lastModifiedDate":"2023-08-31"},{"lineNumber":187,"author":{"gitId":"darrentfy"},"content":"            Parser.parse(invalidInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":188,"author":{"gitId":"darrentfy"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":189,"author":{"gitId":"darrentfy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":190,"author":{"gitId":"darrentfy"},"content":"            assertEquals(\"Invalid command! Please include when the event starts\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":191,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":192,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":193,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":194,"author":{"gitId":"darrentfy"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":195,"author":{"gitId":"darrentfy"},"content":"    public void parse_invalidEventInputMissingEnd_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":196,"author":{"gitId":"darrentfy"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":197,"author":{"gitId":"darrentfy"},"content":"            String invalidInput \u003d \"event meeting /from 01/01/2024 0800\";","lastModifiedDate":"2023-08-31"},{"lineNumber":198,"author":{"gitId":"darrentfy"},"content":"            Parser.parse(invalidInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":199,"author":{"gitId":"darrentfy"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":200,"author":{"gitId":"darrentfy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":201,"author":{"gitId":"darrentfy"},"content":"            assertEquals(\"Invalid command! Please include when the event ends\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":202,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":203,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":204,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":205,"author":{"gitId":"darrentfy"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":206,"author":{"gitId":"darrentfy"},"content":"    public void parse_invalidCommand_exceptionThrown() {","lastModifiedDate":"2023-08-31"},{"lineNumber":207,"author":{"gitId":"darrentfy"},"content":"        try {","lastModifiedDate":"2023-08-31"},{"lineNumber":208,"author":{"gitId":"darrentfy"},"content":"            String invalidInput \u003d \"blah\";","lastModifiedDate":"2023-08-31"},{"lineNumber":209,"author":{"gitId":"darrentfy"},"content":"            Parser.parse(invalidInput);","lastModifiedDate":"2023-08-31"},{"lineNumber":210,"author":{"gitId":"darrentfy"},"content":"            fail();","lastModifiedDate":"2023-08-31"},{"lineNumber":211,"author":{"gitId":"darrentfy"},"content":"        } catch (DukeException e) {","lastModifiedDate":"2023-08-31"},{"lineNumber":212,"author":{"gitId":"darrentfy"},"content":"            assertEquals(\"Sorry! I do not recognise this command\", e.getMessage());","lastModifiedDate":"2023-08-31"},{"lineNumber":213,"author":{"gitId":"darrentfy"},"content":"        }","lastModifiedDate":"2023-08-31"},{"lineNumber":214,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":215,"author":{"gitId":"darrentfy"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"darrentfy":215}},{"path":"src/test/java/task/TaskListTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"package task;","lastModifiedDate":"2023-08-31"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-08-31"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-08-31"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-11"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-11"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-09-11"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":"public class TaskListTest {","lastModifiedDate":"2023-08-31"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":"    public void getList_success() {","lastModifiedDate":"2023-08-31"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":"        tasks.add(new Todo(\"read book\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":15,"author":{"gitId":"darrentfy"},"content":"        TaskList taskList \u003d new TaskList(tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"        assertEquals(tasks, taskList.getList());","lastModifiedDate":"2023-08-31"},{"lineNumber":17,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":18,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":19,"author":{"gitId":"darrentfy"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":20,"author":{"gitId":"darrentfy"},"content":"    public void getTask_success() {","lastModifiedDate":"2023-08-31"},{"lineNumber":21,"author":{"gitId":"darrentfy"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":22,"author":{"gitId":"darrentfy"},"content":"        Task todo \u003d new Todo(\"read book\");","lastModifiedDate":"2023-08-31"},{"lineNumber":23,"author":{"gitId":"darrentfy"},"content":"        tasks.add(todo);","lastModifiedDate":"2023-08-31"},{"lineNumber":24,"author":{"gitId":"darrentfy"},"content":"        TaskList taskList \u003d new TaskList(tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":25,"author":{"gitId":"darrentfy"},"content":"        assertEquals(todo, taskList.getTask(0));","lastModifiedDate":"2023-08-31"},{"lineNumber":26,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":27,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":28,"author":{"gitId":"darrentfy"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":29,"author":{"gitId":"darrentfy"},"content":"    public void addTask_success() {","lastModifiedDate":"2023-08-31"},{"lineNumber":30,"author":{"gitId":"darrentfy"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":31,"author":{"gitId":"darrentfy"},"content":"        TaskList taskList \u003d new TaskList(tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":32,"author":{"gitId":"darrentfy"},"content":"        taskList.addTask(new Todo(\"read book\"));","lastModifiedDate":"2023-08-31"},{"lineNumber":33,"author":{"gitId":"darrentfy"},"content":"        assertEquals(1, taskList.getSize());","lastModifiedDate":"2023-08-31"},{"lineNumber":34,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":35,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":36,"author":{"gitId":"darrentfy"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":37,"author":{"gitId":"darrentfy"},"content":"    public void deleteTask_success() {","lastModifiedDate":"2023-08-31"},{"lineNumber":38,"author":{"gitId":"darrentfy"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":39,"author":{"gitId":"darrentfy"},"content":"        TaskList taskList \u003d new TaskList(tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":40,"author":{"gitId":"darrentfy"},"content":"        Task todo \u003d new Todo(\"read book\");","lastModifiedDate":"2023-08-31"},{"lineNumber":41,"author":{"gitId":"darrentfy"},"content":"        taskList.addTask(todo);","lastModifiedDate":"2023-08-31"},{"lineNumber":42,"author":{"gitId":"darrentfy"},"content":"        taskList.deleteTask(todo);","lastModifiedDate":"2023-08-31"},{"lineNumber":43,"author":{"gitId":"darrentfy"},"content":"        assertEquals(0, taskList.getSize());","lastModifiedDate":"2023-08-31"},{"lineNumber":44,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":45,"author":{"gitId":"darrentfy"},"content":"","lastModifiedDate":"2023-08-31"},{"lineNumber":46,"author":{"gitId":"darrentfy"},"content":"    @Test","lastModifiedDate":"2023-08-31"},{"lineNumber":47,"author":{"gitId":"darrentfy"},"content":"    public void markTaskAsDone_success() {","lastModifiedDate":"2023-08-31"},{"lineNumber":48,"author":{"gitId":"darrentfy"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-31"},{"lineNumber":49,"author":{"gitId":"darrentfy"},"content":"        TaskList taskList \u003d new TaskList(tasks);","lastModifiedDate":"2023-08-31"},{"lineNumber":50,"author":{"gitId":"darrentfy"},"content":"        Task todo \u003d new Todo(\"read book\");","lastModifiedDate":"2023-08-31"},{"lineNumber":51,"author":{"gitId":"darrentfy"},"content":"        taskList.addTask(todo);","lastModifiedDate":"2023-08-31"},{"lineNumber":52,"author":{"gitId":"darrentfy"},"content":"        taskList.markTask(todo);","lastModifiedDate":"2023-08-31"},{"lineNumber":53,"author":{"gitId":"darrentfy"},"content":"        assertTrue(todo.isDone());","lastModifiedDate":"2023-08-31"},{"lineNumber":54,"author":{"gitId":"darrentfy"},"content":"    }","lastModifiedDate":"2023-08-31"},{"lineNumber":55,"author":{"gitId":"darrentfy"},"content":"}","lastModifiedDate":"2023-08-31"}],"authorContributionMap":{"darrentfy":55}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"darrentfy"},"content":"mark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"darrentfy"},"content":"unmark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"darrentfy"},"content":"delete 1","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"darrentfy"},"content":"mark","lastModifiedDate":"2023-08-24"},{"lineNumber":5,"author":{"gitId":"darrentfy"},"content":"unmark","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"darrentfy"},"content":"delete","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"darrentfy"},"content":"todo","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"darrentfy"},"content":"deadline","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"darrentfy"},"content":"deadline homework","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"darrentfy"},"content":"event","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"darrentfy"},"content":"event meeting","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"darrentfy"},"content":"event meeting /from","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"darrentfy"},"content":"event meeting /from 01/01/2024 2359","lastModifiedDate":"2023-08-30"},{"lineNumber":14,"author":{"gitId":"darrentfy"},"content":"event meeting /to","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"darrentfy"},"content":"mark abc","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"blah","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"darrentfy"},"content":"todo borrow book","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"darrentfy"},"content":"deadline homework /by 01/01/2024 2359","lastModifiedDate":"2023-08-29"},{"lineNumber":19,"author":{"gitId":"darrentfy"},"content":"deadline homework /by 1/1/2024 2359","lastModifiedDate":"2023-08-29"},{"lineNumber":20,"author":{"gitId":"darrentfy"},"content":"deadline homework /by 32/01/2024 2359","lastModifiedDate":"2023-08-29"},{"lineNumber":21,"author":{"gitId":"darrentfy"},"content":"event meeting /from 01/01/2024 0800 /to 01/01/2024 1000","lastModifiedDate":"2023-08-29"},{"lineNumber":22,"author":{"gitId":"darrentfy"},"content":"event meeting /from 1/1/2024 0800 /to 1/1/2024 1000","lastModifiedDate":"2023-08-29"},{"lineNumber":23,"author":{"gitId":"darrentfy"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"darrentfy"},"content":"mark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"darrentfy"},"content":"mark 2","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"darrentfy"},"content":"unmark 1","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"darrentfy"},"content":"mark 4","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"darrentfy"},"content":"unmark 4","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"darrentfy"},"content":"delete 4","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"darrentfy"},"content":"delete 2","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"darrentfy"},"content":"delete 2","lastModifiedDate":"2023-08-30"},{"lineNumber":32,"author":{"gitId":"darrentfy"},"content":"delete 1","lastModifiedDate":"2023-08-30"},{"lineNumber":33,"author":{"gitId":"darrentfy"},"content":"list","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"darrentfy"},"content":"bye","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"darrentfy":34}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"darrentfy"},"content":"java -classpath ..\\bin duke.Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-30"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"darrentfy":1}},{"path":"text-ui-test/runtest.sh","fileType":"sh","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"#!/usr/bin/env bash","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"# create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if [ ! -d \"../bin\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"    mkdir ../bin","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"# delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"if [ -e \"./ACTUAL.TXT\" ]","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    rm ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"# compile the code into the bin folder, terminates if error occurred","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"darrentfy"},"content":"if ! javac -cp ../src/main/java -Xlint:none -d ../bin ../src/main/java/duke/*.java ../src/main/java/task/*.java ../src/main/java/command/*.java","lastModifiedDate":"2023-08-30"},{"lineNumber":17,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"    echo \"********** BUILD FAILURE **********\"","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"# run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"java -classpath ../bin Duke \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":25,"author":{"gitId":"-"},"content":"# convert to UNIX format","lastModifiedDate":"2020-05-25"},{"lineNumber":26,"author":{"gitId":"-"},"content":"cp EXPECTED.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":27,"author":{"gitId":"-"},"content":"dos2unix ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":28,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":29,"author":{"gitId":"-"},"content":"# compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":30,"author":{"gitId":"-"},"content":"diff ACTUAL.TXT EXPECTED-UNIX.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":31,"author":{"gitId":"-"},"content":"if [ $? -eq 0 ]","lastModifiedDate":"2020-05-25"},{"lineNumber":32,"author":{"gitId":"-"},"content":"then","lastModifiedDate":"2020-05-25"},{"lineNumber":33,"author":{"gitId":"-"},"content":"    echo \"Test result: PASSED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":34,"author":{"gitId":"-"},"content":"    exit 0","lastModifiedDate":"2020-05-25"},{"lineNumber":35,"author":{"gitId":"-"},"content":"else","lastModifiedDate":"2020-05-25"},{"lineNumber":36,"author":{"gitId":"-"},"content":"    echo \"Test result: FAILED\"","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"    exit 1","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"fi","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":37,"darrentfy":1}}]
