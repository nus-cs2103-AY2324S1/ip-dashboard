[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"# duke.Duke project template","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"3. After that, locate the `src/main/java/duke.Duke.java` file, right-click it, and choose `Run duke.Duke.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-09-14"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"adammangzijun":2,"-":22}},{"path":"build.gradle","fileType":"gradle","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"plugins {","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"    id \u0027java\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"    id \u0027application\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"    id \u0027com.github.johnrengelman.shadow\u0027 version \u00277.1.2\u0027","lastModifiedDate":"2023-08-05"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"    id \u0027checkstyle\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":6,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"repositories {","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"    mavenCentral()","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"dependencies {","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    testImplementation group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-api\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.8.1\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.8.1\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.8.1\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.8.1\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"    testImplementation \u0027org.junit.jupiter:junit-jupiter:5.8.1\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    testRuntimeOnly group: \u0027org.junit.jupiter\u0027, name: \u0027junit-jupiter-engine\u0027, version: \u00275.5.0\u0027","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"    String javaFxVersion \u003d \u002717.0.7\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-base\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-controls\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-fxml\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027win\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027mac\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"    implementation group: \u0027org.openjfx\u0027, name: \u0027javafx-graphics\u0027, version: javaFxVersion, classifier: \u0027linux\u0027","lastModifiedDate":"2023-09-14"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":36,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":37,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":38,"author":{"gitId":"-"},"content":"test {","lastModifiedDate":"2020-05-25"},{"lineNumber":39,"author":{"gitId":"-"},"content":"    useJUnitPlatform()","lastModifiedDate":"2020-05-25"},{"lineNumber":40,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":41,"author":{"gitId":"-"},"content":"    testLogging {","lastModifiedDate":"2020-05-25"},{"lineNumber":42,"author":{"gitId":"-"},"content":"        events \"passed\", \"skipped\", \"failed\"","lastModifiedDate":"2020-05-25"},{"lineNumber":43,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":44,"author":{"gitId":"-"},"content":"        showExceptions true","lastModifiedDate":"2020-05-25"},{"lineNumber":45,"author":{"gitId":"-"},"content":"        exceptionFormat \"full\"","lastModifiedDate":"2020-05-25"},{"lineNumber":46,"author":{"gitId":"-"},"content":"        showCauses true","lastModifiedDate":"2020-05-25"},{"lineNumber":47,"author":{"gitId":"-"},"content":"        showStackTraces true","lastModifiedDate":"2020-05-25"},{"lineNumber":48,"author":{"gitId":"-"},"content":"        showStandardStreams \u003d false","lastModifiedDate":"2020-05-25"},{"lineNumber":49,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2020-05-25"},{"lineNumber":50,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":51,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":52,"author":{"gitId":"-"},"content":"application {","lastModifiedDate":"2020-05-25"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"    mainClassName \u003d \u0027seedu.duke.Main\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":55,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":56,"author":{"gitId":"-"},"content":"shadowJar {","lastModifiedDate":"2020-05-25"},{"lineNumber":57,"author":{"gitId":"-"},"content":"    archiveBaseName \u003d \"duke\"","lastModifiedDate":"2020-05-25"},{"lineNumber":58,"author":{"gitId":"-"},"content":"    archiveClassifier \u003d null","lastModifiedDate":"2020-05-25"},{"lineNumber":59,"author":{"gitId":"adammangzijun"},"content":"    archiveFileName \u003d \u0027duke.jar\u0027","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":61,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":62,"author":{"gitId":"-"},"content":"run{","lastModifiedDate":"2020-05-25"},{"lineNumber":63,"author":{"gitId":"-"},"content":"    standardInput \u003d System.in","lastModifiedDate":"2020-05-25"},{"lineNumber":64,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2020-05-25"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"checkstyle {","lastModifiedDate":"2023-09-13"},{"lineNumber":67,"author":{"gitId":"adammangzijun"},"content":"    toolVersion \u003d \u002710.2\u0027","lastModifiedDate":"2023-09-13"},{"lineNumber":68,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-09-13"},{"lineNumber":69,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"}],"authorContributionMap":{"-":40,"adammangzijun":29}},{"path":"docs/README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"# Adam’s ChatBot","lastModifiedDate":"2023-09-22"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"Welcome to the Adam’s ChatBot user guide. Adam is capable of tracking your to do list.","lastModifiedDate":"2023-09-22"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"It is an application that uses Command Line Interface (user text inputs) and","lastModifiedDate":"2023-09-22"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"Graphics User Interface to showcase interactive list management.","lastModifiedDate":"2023-09-22"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"## Getting Started","lastModifiedDate":"2023-09-22"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"1.\tEnsure that you have [installed Java 11](https://www.oracle.com/java/technologies/javase/jdk11-archive-downloads.html) or above installed.","lastModifiedDate":"2023-09-22"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"2.\tDownload the latest [Duke.jar]().","lastModifiedDate":"2023-09-22"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"3.\tUsing the command terminal, go to the destination folder of your Duke.jar and then run the command `java -jar Duke.jar`.","lastModifiedDate":"2023-09-22"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"4.\tA Window should appear.","lastModifiedDate":"2023-09-22"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"5.\tNow type in your inputs and start using the ChatBot.","lastModifiedDate":"2023-09-22"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"      .","lastModifiedDate":"2023-09-22"},{"lineNumber":12,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"## 2. Commands","lastModifiedDate":"2023-09-22"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"In Adam’s ChatBot application, you will use text to interact with the application. Below are the commands you can use:","lastModifiedDate":"2023-09-22"},{"lineNumber":15,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"### Command List:","lastModifiedDate":"2023-09-22"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"1. [ToDo](#todo)","lastModifiedDate":"2023-09-22"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"2. [Deadline](#deadline)","lastModifiedDate":"2023-09-22"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"3. [Event](#event)","lastModifiedDate":"2023-09-22"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"4. [List](#list)","lastModifiedDate":"2023-09-22"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"5. [Delete](#delete)","lastModifiedDate":"2023-09-22"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"6. [Mark](#mark)","lastModifiedDate":"2023-09-22"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"7. [Unmark](#unmark)","lastModifiedDate":"2023-09-22"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"8. [Find](#find)","lastModifiedDate":"2023-09-22"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"9. [Update](#update)","lastModifiedDate":"2023-09-22"},{"lineNumber":27,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":29,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"### ToDo","lastModifiedDate":"2023-09-22"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"#### Usage: ","lastModifiedDate":"2023-09-22"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"todo *TASK_DESCRIPTION*","lastModifiedDate":"2023-09-22"},{"lineNumber":33,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"#### Description: ","lastModifiedDate":"2023-09-22"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"Adds a to-do task with the specified description. Replace the `TASK_DESCRIPTION` with the desired name of the task you want to add to the list.","lastModifiedDate":"2023-09-22"},{"lineNumber":36,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"#### Example:","lastModifiedDate":"2023-09-22"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"`todo Read a book`","lastModifiedDate":"2023-09-22"},{"lineNumber":39,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":41,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"### Deadline","lastModifiedDate":"2023-09-22"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"#### Usage: ","lastModifiedDate":"2023-09-22"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"deadline *TASK_DESCRIPTION* /by *DATE_AND_TIME*","lastModifiedDate":"2023-09-22"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"#### Description: ","lastModifiedDate":"2023-09-22"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"Adds a deadline task with a specified description and due date.","lastModifiedDate":"2023-09-22"},{"lineNumber":47,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"The date and time should be in one of the supported formats: *yyyy-MM-dd HH:mm*, *dd/MM/yyyy HH:mm*, *MM-dd-yyyy HH:mm*.","lastModifiedDate":"2023-09-22"},{"lineNumber":49,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"#### Example: ","lastModifiedDate":"2023-09-22"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"`deadline Submit report /by 2023-09-01 18:00`","lastModifiedDate":"2023-09-22"},{"lineNumber":52,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2019-07-29"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"`deadline Buy snacks /by 01/09/2023 18:00`","lastModifiedDate":"2023-09-22"},{"lineNumber":54,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2021-07-17"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"`deadline Buy computer /by 09-01-2023 18:00`","lastModifiedDate":"2023-09-22"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":59,"author":{"gitId":"adammangzijun"},"content":"### Event","lastModifiedDate":"2023-09-22"},{"lineNumber":60,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"#### Usage: ","lastModifiedDate":"2023-09-22"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"event *TASK_DESCRIPTION* /from *DATE_AND_TIME* /to *DATE_AND_TIME*","lastModifiedDate":"2023-09-22"},{"lineNumber":63,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":64,"author":{"gitId":"adammangzijun"},"content":"#### Description: ","lastModifiedDate":"2023-09-22"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"Adds an event task with a specified description, start date, and end date. ","lastModifiedDate":"2023-09-22"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"The dates and times should be in one of the supported formats mentioned above.","lastModifiedDate":"2023-09-22"},{"lineNumber":67,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":68,"author":{"gitId":"adammangzijun"},"content":"#### Example: ","lastModifiedDate":"2023-09-22"},{"lineNumber":69,"author":{"gitId":"adammangzijun"},"content":"`event Team meeting /from 2023-09-01 09:00 /to 2023-09-01 11:00`","lastModifiedDate":"2023-09-22"},{"lineNumber":70,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":71,"author":{"gitId":"adammangzijun"},"content":"\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":72,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":73,"author":{"gitId":"adammangzijun"},"content":"### List","lastModifiedDate":"2023-09-22"},{"lineNumber":74,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":75,"author":{"gitId":"adammangzijun"},"content":"#### Usage: ","lastModifiedDate":"2023-09-22"},{"lineNumber":76,"author":{"gitId":"adammangzijun"},"content":"list","lastModifiedDate":"2023-09-22"},{"lineNumber":77,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":78,"author":{"gitId":"adammangzijun"},"content":"#### Description: ","lastModifiedDate":"2023-09-22"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"Lists all the tasks that you have. ","lastModifiedDate":"2023-09-22"},{"lineNumber":80,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":81,"author":{"gitId":"adammangzijun"},"content":"`[T]` represents todo tasks, `[D]` presents deadline tasks, and `[E]` represents event tasks.","lastModifiedDate":"2023-09-22"},{"lineNumber":82,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":83,"author":{"gitId":"adammangzijun"},"content":"It also indicates if the tasks are cocmpleted, `[ ]` for incomplete and `[X]` for completed.","lastModifiedDate":"2023-09-22"},{"lineNumber":84,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":85,"author":{"gitId":"adammangzijun"},"content":"\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":86,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":87,"author":{"gitId":"adammangzijun"},"content":"### Delete","lastModifiedDate":"2023-09-22"},{"lineNumber":88,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":89,"author":{"gitId":"adammangzijun"},"content":"#### Usage: ","lastModifiedDate":"2023-09-22"},{"lineNumber":90,"author":{"gitId":"adammangzijun"},"content":"delete *TASK_NUMBER*","lastModifiedDate":"2023-09-22"},{"lineNumber":91,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":92,"author":{"gitId":"adammangzijun"},"content":"#### Description: ","lastModifiedDate":"2023-09-22"},{"lineNumber":93,"author":{"gitId":"adammangzijun"},"content":"Deletes the task corresponding to the specified task number from the list.","lastModifiedDate":"2023-09-22"},{"lineNumber":94,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":95,"author":{"gitId":"adammangzijun"},"content":"#### Example: ","lastModifiedDate":"2023-09-22"},{"lineNumber":96,"author":{"gitId":"adammangzijun"},"content":"`delete 3`","lastModifiedDate":"2023-09-22"},{"lineNumber":97,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":98,"author":{"gitId":"adammangzijun"},"content":"\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":99,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":100,"author":{"gitId":"adammangzijun"},"content":"### Mark","lastModifiedDate":"2023-09-22"},{"lineNumber":101,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":102,"author":{"gitId":"adammangzijun"},"content":"#### Usage: ","lastModifiedDate":"2023-09-22"},{"lineNumber":103,"author":{"gitId":"adammangzijun"},"content":"mark *TASK_NUMBER*","lastModifiedDate":"2023-09-22"},{"lineNumber":104,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":105,"author":{"gitId":"adammangzijun"},"content":"#### Description: ","lastModifiedDate":"2023-09-22"},{"lineNumber":106,"author":{"gitId":"adammangzijun"},"content":"Marks the task corresponding to the specified task number as done.  ","lastModifiedDate":"2023-09-22"},{"lineNumber":107,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":108,"author":{"gitId":"adammangzijun"},"content":"It is represented by `[X]` in the list.","lastModifiedDate":"2023-09-22"},{"lineNumber":109,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":110,"author":{"gitId":"adammangzijun"},"content":"#### Example: ","lastModifiedDate":"2023-09-22"},{"lineNumber":111,"author":{"gitId":"adammangzijun"},"content":"`mark 2`","lastModifiedDate":"2023-09-22"},{"lineNumber":112,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":113,"author":{"gitId":"adammangzijun"},"content":"\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":114,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":115,"author":{"gitId":"adammangzijun"},"content":"### Unmark","lastModifiedDate":"2023-09-22"},{"lineNumber":116,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":117,"author":{"gitId":"adammangzijun"},"content":"#### Usage: ","lastModifiedDate":"2023-09-22"},{"lineNumber":118,"author":{"gitId":"adammangzijun"},"content":"unmark *TASK_NUMBER*","lastModifiedDate":"2023-09-22"},{"lineNumber":119,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":120,"author":{"gitId":"adammangzijun"},"content":"#### Description: ","lastModifiedDate":"2023-09-22"},{"lineNumber":121,"author":{"gitId":"adammangzijun"},"content":"Unmarks the task corresponding to the specified task number, reverting it to undone.","lastModifiedDate":"2023-09-22"},{"lineNumber":122,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":123,"author":{"gitId":"adammangzijun"},"content":"It is represented by `[ ]` in the list.","lastModifiedDate":"2023-09-22"},{"lineNumber":124,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":125,"author":{"gitId":"adammangzijun"},"content":"#### Example: ","lastModifiedDate":"2023-09-22"},{"lineNumber":126,"author":{"gitId":"adammangzijun"},"content":"`unmark 2`","lastModifiedDate":"2023-09-22"},{"lineNumber":127,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":128,"author":{"gitId":"adammangzijun"},"content":"\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":129,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":130,"author":{"gitId":"adammangzijun"},"content":"### Find","lastModifiedDate":"2023-09-22"},{"lineNumber":131,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":132,"author":{"gitId":"adammangzijun"},"content":"#### Usage: ","lastModifiedDate":"2023-09-22"},{"lineNumber":133,"author":{"gitId":"adammangzijun"},"content":"find *KEYWORD*","lastModifiedDate":"2023-09-22"},{"lineNumber":134,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":135,"author":{"gitId":"adammangzijun"},"content":"#### Description: ","lastModifiedDate":"2023-09-22"},{"lineNumber":136,"author":{"gitId":"adammangzijun"},"content":"Finds and lists all tasks that contain the specified keyword in the task description.","lastModifiedDate":"2023-09-22"},{"lineNumber":137,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":138,"author":{"gitId":"adammangzijun"},"content":"#### Example: ","lastModifiedDate":"2023-09-22"},{"lineNumber":139,"author":{"gitId":"adammangzijun"},"content":"`find book`","lastModifiedDate":"2023-09-22"},{"lineNumber":140,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":141,"author":{"gitId":"adammangzijun"},"content":"\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":142,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":143,"author":{"gitId":"adammangzijun"},"content":"### Update","lastModifiedDate":"2023-09-22"},{"lineNumber":144,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":145,"author":{"gitId":"adammangzijun"},"content":"#### Usage: ","lastModifiedDate":"2023-09-22"},{"lineNumber":146,"author":{"gitId":"adammangzijun"},"content":"update *TASK_NUMBER* *FIELD* *NEW_VALUE*","lastModifiedDate":"2023-09-22"},{"lineNumber":147,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":148,"author":{"gitId":"adammangzijun"},"content":"#### Description: ","lastModifiedDate":"2023-09-22"},{"lineNumber":149,"author":{"gitId":"adammangzijun"},"content":"Updates the specified field of the task corresponding to the specified task number with the new value.","lastModifiedDate":"2023-09-22"},{"lineNumber":150,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":151,"author":{"gitId":"adammangzijun"},"content":"#### Example: ","lastModifiedDate":"2023-09-22"},{"lineNumber":152,"author":{"gitId":"adammangzijun"},"content":"`update 1 /by 2023-10-10 23:59`","lastModifiedDate":"2023-09-22"},{"lineNumber":153,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":154,"author":{"gitId":"adammangzijun"},"content":"`update 1 taskDescription Boil water`","lastModifiedDate":"2023-09-22"},{"lineNumber":155,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":156,"author":{"gitId":"adammangzijun"},"content":"`update 1 /from 2023-10-10 23:59`","lastModifiedDate":"2023-09-22"},{"lineNumber":157,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":158,"author":{"gitId":"adammangzijun"},"content":"`update 1 /to 2023-10-10 23:59`","lastModifiedDate":"2023-09-22"},{"lineNumber":159,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":160,"author":{"gitId":"adammangzijun"},"content":"\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":161,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":162,"author":{"gitId":"adammangzijun"},"content":"### bye","lastModifiedDate":"2023-09-22"},{"lineNumber":163,"author":{"gitId":"adammangzijun"},"content":"#### Usage: ","lastModifiedDate":"2023-09-22"},{"lineNumber":164,"author":{"gitId":"adammangzijun"},"content":"bye","lastModifiedDate":"2023-09-22"},{"lineNumber":165,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":166,"author":{"gitId":"adammangzijun"},"content":"#### Description: ","lastModifiedDate":"2023-09-22"},{"lineNumber":167,"author":{"gitId":"adammangzijun"},"content":"Exits the application.","lastModifiedDate":"2023-09-22"},{"lineNumber":168,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":169,"author":{"gitId":"adammangzijun"},"content":"\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":170,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":171,"author":{"gitId":"adammangzijun"},"content":"## Command Summary","lastModifiedDate":"2023-09-22"},{"lineNumber":172,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":173,"author":{"gitId":"adammangzijun"},"content":"| Command     | Usage   | Example                                                                                                                                           |","lastModifiedDate":"2023-09-22"},{"lineNumber":174,"author":{"gitId":"adammangzijun"},"content":"|-------------| ------- |---------------------------------------------------------------------------------------------------------------------------------------------------|","lastModifiedDate":"2023-09-22"},{"lineNumber":175,"author":{"gitId":"adammangzijun"},"content":"| todo        | todo *TASK_DESCRIPTION*   | `todo Read a book`                                                                                                                                |","lastModifiedDate":"2023-09-22"},{"lineNumber":176,"author":{"gitId":"adammangzijun"},"content":"| deadline    | deadline *TASK_DESCRIPTION* /by *DATE_AND_TIME*   | `deadline Submit report /by 2023-09-01 18:00`\u003cbr\u003e`deadline Buy snacks /by 01/09/2023 18:00`\u003cbr\u003e`deadline Buy computer /by 09-01-2023 18:00`       |","lastModifiedDate":"2023-09-22"},{"lineNumber":177,"author":{"gitId":"adammangzijun"},"content":"| event       | event *TASK_DESCRIPTION* /from *DATE_AND_TIME* /to *DATE_AND_TIME* | `event Team meeting /from 2023-09-01 09:00 /to 2023-09-01 11:00`                                                                                  |","lastModifiedDate":"2023-09-22"},{"lineNumber":178,"author":{"gitId":"adammangzijun"},"content":"| list        | list | `list`                                                                                                                                            |","lastModifiedDate":"2023-09-22"},{"lineNumber":179,"author":{"gitId":"adammangzijun"},"content":"| delete      | delete *TASK_NUMBER*   | `delete 3`                                                                                                                                        |","lastModifiedDate":"2023-09-22"},{"lineNumber":180,"author":{"gitId":"adammangzijun"},"content":"| mark        | mark *TASK_NUMBER*   | `mark 2`                                                                                                                                          |","lastModifiedDate":"2023-09-22"},{"lineNumber":181,"author":{"gitId":"adammangzijun"},"content":"| unmark      | unmark *TASK_NUMBER* | `unmark 2`                                                                                                                                        |","lastModifiedDate":"2023-09-22"},{"lineNumber":182,"author":{"gitId":"adammangzijun"},"content":"| find        | find *KEYWORD*   | `find book`                                                                                                                                       |","lastModifiedDate":"2023-09-22"},{"lineNumber":183,"author":{"gitId":"adammangzijun"},"content":"| update      | update *TASK_NUMBER* *FIELD* *NEW_VALUE*   | `update 1 /by 2023-10-10 23:59` \u003cbr\u003e`update 1 taskDescription Boil water`\u003cbr\u003e`update 1 /from 2023-10-10 23:59`\u003cbr\u003e`update 1 /to 2023-10-10 23:59` |","lastModifiedDate":"2023-09-22"},{"lineNumber":184,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":185,"author":{"gitId":"adammangzijun"},"content":"\u003cbr\u003e\u003cbr\u003e\u003cbr\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":186,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":187,"author":{"gitId":"adammangzijun"},"content":"## 3. Error Handling","lastModifiedDate":"2023-09-22"},{"lineNumber":188,"author":{"gitId":"adammangzijun"},"content":"In case of any errors, such as invalid date format or missing task description, the application will display an error message with details about what went wrong to guide you to fix the issue.","lastModifiedDate":"2023-09-22"},{"lineNumber":189,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":190,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":191,"author":{"gitId":"adammangzijun"},"content":"## 4. Auto-save List","lastModifiedDate":"2023-09-22"},{"lineNumber":192,"author":{"gitId":"adammangzijun"},"content":"Ending the  application with a `bye` command will save all the data of Task List into `./data/duke.txt`.","lastModifiedDate":"2023-09-22"},{"lineNumber":193,"author":{"gitId":"adammangzijun"},"content":"As such all the data will be saved in the hard disk automatically.","lastModifiedDate":"2023-09-22"},{"lineNumber":194,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":195,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-22"},{"lineNumber":196,"author":{"gitId":"adammangzijun"},"content":"## 5. Conclusion","lastModifiedDate":"2023-09-22"},{"lineNumber":197,"author":{"gitId":"adammangzijun"},"content":"Thank you for using the Adam’s ChatBot. We hope this user guide helps you manage your tasks effectively and efficiently. Happy task managing!","lastModifiedDate":"2023-09-22"}],"authorContributionMap":{"adammangzijun":184,"-":13}},{"path":"src/main/java/duke/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import duke.command.Command;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import duke.parser.Parser;","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":" * The duke.Duke class represents a chatbot that manages tasks.","lastModifiedDate":"2023-09-14"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":" * It is the main class that contains the methods to run the chatbot.","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"    private Storage storage;","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"    private TaskList tasks;","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"    private Ui ui;","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"     * Creates a duke.Duke instance that represents the chatbot.","lastModifiedDate":"2023-09-14"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"     * @param filePath The path to the file where tasks are saved and loaded from.","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"    Duke(String filePath) {","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"        this.storage \u003d new Storage(filePath);","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"        this.storage.createFileIfNotExists();","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"        try {","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"            this.tasks \u003d new TaskList(this.storage.loadTasksFromFile());","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"            this.ui.showError(\"Unable to load saved task. Starting with a new empty task list\");","lastModifiedDate":"2023-09-03"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"     * Creates a duke.Duke instance that represents the chatbot without any parameters.","lastModifiedDate":"2023-09-14"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"    public Duke() {","lastModifiedDate":"2023-09-14"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"        this.ui \u003d new Ui();","lastModifiedDate":"2023-09-14"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"        this.storage \u003d new Storage(\"./data/duke.txt\");","lastModifiedDate":"2023-09-14"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"        this.storage.createFileIfNotExists();","lastModifiedDate":"2023-09-14"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"        try {","lastModifiedDate":"2023-09-14"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"            this.tasks \u003d new TaskList(this.storage.loadTasksFromFile());","lastModifiedDate":"2023-09-14"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-14"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"            this.ui.showError(\"Unable to load saved task. Starting with a new empty task list\");","lastModifiedDate":"2023-09-14"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"            tasks \u003d new TaskList();","lastModifiedDate":"2023-09-14"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"    };","lastModifiedDate":"2023-09-14"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"     * Runs the duke.Duke chatbot. It reads and executes commands from the user until the user exits.","lastModifiedDate":"2023-09-14"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"    public void run() {","lastModifiedDate":"2023-09-03"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"        ui.showWelcome();","lastModifiedDate":"2023-09-03"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"        boolean isExit \u003d false;","lastModifiedDate":"2023-09-03"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":59,"author":{"gitId":"adammangzijun"},"content":"        while (!isExit) {","lastModifiedDate":"2023-09-03"},{"lineNumber":60,"author":{"gitId":"adammangzijun"},"content":"            try {","lastModifiedDate":"2023-08-24"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"                String fullCommand \u003d ui.readCommand();","lastModifiedDate":"2023-09-03"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"                Command command \u003d Parser.parse(fullCommand);","lastModifiedDate":"2023-09-08"},{"lineNumber":63,"author":{"gitId":"adammangzijun"},"content":"                command.execute(tasks, ui, storage);","lastModifiedDate":"2023-09-08"},{"lineNumber":64,"author":{"gitId":"adammangzijun"},"content":"                isExit \u003d command.isExit();","lastModifiedDate":"2023-09-08"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"            } catch (Exception e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"                ui.showError(e.getMessage());","lastModifiedDate":"2023-09-03"},{"lineNumber":67,"author":{"gitId":"adammangzijun"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":70,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":72,"author":{"gitId":"adammangzijun"},"content":"     * You should have your own function to generate a response to user input.","lastModifiedDate":"2023-09-14"},{"lineNumber":73,"author":{"gitId":"adammangzijun"},"content":"     * Replace this stub with your completed method.","lastModifiedDate":"2023-09-14"},{"lineNumber":74,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":75,"author":{"gitId":"adammangzijun"},"content":"    public String getResponse(String input) {","lastModifiedDate":"2023-09-14"},{"lineNumber":76,"author":{"gitId":"adammangzijun"},"content":"        Command command \u003d Parser.parse(input);","lastModifiedDate":"2023-09-14"},{"lineNumber":77,"author":{"gitId":"adammangzijun"},"content":"        String output \u003d command.execute(tasks, ui, storage);","lastModifiedDate":"2023-09-14"},{"lineNumber":78,"author":{"gitId":"adammangzijun"},"content":"        return output;","lastModifiedDate":"2023-09-14"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":80,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":81,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":82,"author":{"gitId":"adammangzijun"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-03"},{"lineNumber":83,"author":{"gitId":"adammangzijun"},"content":"        new Duke(\"./data/duke.txt\").run();","lastModifiedDate":"2023-09-04"},{"lineNumber":84,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":85,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":86,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"adammangzijun":84,"-":2}},{"path":"src/main/java/duke/command/AddCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke.command;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":" * Represents a command to add a task to the taskList.","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":" * This class is a child of the abstract Command class and","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":" * contains method to execute the add task command,","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":" * including methods to check whether it is an exit command.","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"public class AddCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"    /** Task to be added to the task list */","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"    private Task task;","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"     * Creates a new add command with the specified task to be added.","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"     * @param task The task to be added to the taskList.","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"    public AddCommand(Task task) {","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"        this.task \u003d task;","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"     * Executes the add command.","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"     * This method adds the task to the taskList,","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"     * and invokes the UI to display the add task message.","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"     * @param tasks The list of task on which the command will operate on.","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"     * @param ui The UI which is used during the command execution to show add text.","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"     * @param storage The storage where tasks are stored and retrieved from, currently","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"     *                not utilized in this method but can be extended to use in the future.","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-14"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"        tasks.add(this.task);","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"        return ui.showAddText(this.task, tasks.size());","lastModifiedDate":"2023-09-14"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"     * Specifies that this command is not an exit command.","lastModifiedDate":"2023-09-08"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"     * @return false, as this command does not cause the program to exit.","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-03"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"        return false;","lastModifiedDate":"2023-09-03"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"adammangzijun":53}},{"path":"src/main/java/duke/command/ByeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke.command;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":" * Represents a command to print out the goodbye message","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":" * and also saves the current list of tasks into the storage file.","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":" * This class is a child of the abstract Command class","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":" * and contains method to execute the bye command,","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":" * including methods to check whether it is an exit command.","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"public class ByeCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"     * Executes the bye command.","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"     * This method  use the UI to display the goodbye message","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"     * and then saves the current list of tasks into the storage and thereafter exits the program.","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"     * @param tasks The current list of task to be saved.","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"     * @param ui The UI which is used during the command execution to show goodbye text.","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"     * @param storage The storage where list of tasks are stored.","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-14"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"        storage.saveTasksToFile(tasks);","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"        return ui.showGoodbye();","lastModifiedDate":"2023-09-14"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"     * Specifies that this command is an exit command.","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"     * @return true, as this command causes the program to exit.","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"        return true;","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"adammangzijun":40}},{"path":"src/main/java/duke/command/Command.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke.command;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":" * Represents an abstract command that can be executed.","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":" * This class is used to represent the command to be executed","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":" * based on type of input the user gives.","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"public abstract class Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"     * Executes the specific command implemented in subclasses.","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"     * The command execution can interact with the specified taskList, user interface, and storage.","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"     * @param tasks The list of tasks on which the command will operate on.","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"     * @param ui The UI which is used during the command execution.","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"     * @param storage The storage where tasks are stored and retrieved from.","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"    public abstract String execute(TaskList tasks, Ui ui, Storage storage);","lastModifiedDate":"2023-09-14"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"     * Checks if the command ends the program.","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"     * @return true if the command ends the program, false otherwise.","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"    public abstract boolean isExit();","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"adammangzijun":30}},{"path":"src/main/java/duke/command/DeleteCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke.command;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":" * Represents a command to delete a task from the task list.","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":" * This class is a child of the abstract Command class","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":" * and contains method to execute the delete command,","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":" * including methods to check whether it is an exit command.","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"public class DeleteCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"    /** Number of the task in the task list */","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"    private int taskNumber;","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"     * Creates a new delete command with the specified number for the task to be deleted.","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"     * @param taskNumber The number of the task to be deleted from the task list.","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"    public DeleteCommand(int taskNumber) {","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"        this.taskNumber \u003d taskNumber;","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"     * Executes the delete command.","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"     * This method retrieves the task to be deleted using the number,","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"     * deletes the task from the task list,","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"     * and invokes UI to display the delete task message.","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"     * @param tasks The list of tasks on which the command will operate on.","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"     * @param ui The UI which is used during the command execution to show delete text.","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"     * @param storage The storage where tasks are stored and retrieved from, currently","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"     *                not utilized in this method but can be extended to use in the future.","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-14"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"        Task task \u003d tasks.get(this.taskNumber);","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"        assert task !\u003d null; // Check task is not null.","lastModifiedDate":"2023-09-17"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"        tasks.delete(this.taskNumber);","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"        return ui.showDeleteText(task, tasks.size());","lastModifiedDate":"2023-09-14"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"     * Specifies that this command is not an exit command.","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"     * @return false, as this command does not cause the program to exit.","lastModifiedDate":"2023-09-08"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-03"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"        return false;","lastModifiedDate":"2023-09-03"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"adammangzijun":56}},{"path":"src/main/java/duke/command/ErrorCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke.command;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":" * Represents a command to display an error message in the UI.","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":" * This class extends the Command class and contains method to execute the error command","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":" * and to check whether it is an exit command.","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"public class ErrorCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"    /** Error message to be displayed in the UI */","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"    private String errorMessage;","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"     * Creates a new ErrorCommand with the specified error message to be displayed in the UI.","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"     * @param errorMessage The error message to be displayed in the UI.","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"    public ErrorCommand(String errorMessage) {","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"        this.errorMessage \u003d errorMessage;","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"     * Executes the error command by displaying the error message in the UI.","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"     * @param tasks The list of tasks, which is not utilized in this method","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"     *              but is here to override the abstract method in the parent class.","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"     * @param ui The UI where the error message will be displayed.","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"     * @param storage The storage of tasks, which is not utilized in this method","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"     *                but is here to override the abstract method in the parent class.","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-14"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"        return ui.showError(this.errorMessage);","lastModifiedDate":"2023-09-14"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"     * Specifies that this command is not an exit command.","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"     * @return false, as this command does not cause the program to exit.","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-03"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"        return false;","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"adammangzijun":49}},{"path":"src/main/java/duke/command/FindCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke.command;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-09-09"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":" * Represents a command that searches the task list for a specific keyword.","lastModifiedDate":"2023-09-09"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":" * This command when executed, will search through all the tasks present in the task list and","lastModifiedDate":"2023-09-09"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":" * displays the ones that contain the specified keyword.","lastModifiedDate":"2023-09-09"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-09-09"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"public class FindCommand extends Command {","lastModifiedDate":"2023-09-09"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"    /** The keyword to search for in tasks. */","lastModifiedDate":"2023-09-09"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"    private String keyWord;","lastModifiedDate":"2023-09-09"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"     * Creates a FindCommand with the keyword that the user is searching for.","lastModifiedDate":"2023-09-09"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"     * @param keyWord The keyword to search for in the task list.","lastModifiedDate":"2023-09-09"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"    public FindCommand(String keyWord) {","lastModifiedDate":"2023-09-09"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"        this.keyWord \u003d keyWord;","lastModifiedDate":"2023-09-09"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"     * Executes the find command.","lastModifiedDate":"2023-09-09"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"     * This method goes through the tasks in the taskList, and searches for the tasks that contain the keyword,","lastModifiedDate":"2023-09-09"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"     * then invokes the UI to these tasks.","lastModifiedDate":"2023-09-09"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"     * @param tasks The list of task on which the command will operate on.","lastModifiedDate":"2023-09-09"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"     * @param ui The UI which is used during the command execution to show find text.","lastModifiedDate":"2023-09-09"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"     * @param storage The storage where tasks are stored and retrieved from, currently not","lastModifiedDate":"2023-09-13"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"     *                utilized in this method but can be extended to use in the future.","lastModifiedDate":"2023-09-13"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-09-09"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-14"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"        return ui.showFindText(tasks, this.keyWord);","lastModifiedDate":"2023-09-14"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"     * Specifies that this command is not an exit command.","lastModifiedDate":"2023-09-09"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"     * @return false, as this command does not cause the program to exit.","lastModifiedDate":"2023-09-09"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-09-09"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-09"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"        return false;","lastModifiedDate":"2023-09-09"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-09-09"}],"authorContributionMap":{"adammangzijun":49}},{"path":"src/main/java/duke/command/ListCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke.command;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":" * Represents a command to list all the current tasks.","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":" * This class extends the Command class and contains method to execute the list command","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":" * and to check whether it is an exit command.","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"public class ListCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"     * Executes the list command which triggers the UI","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"     * to display all tasks currently in the task list.","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"     * @param tasks The list of tasks to be displayed in the UI.","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"     * @param ui The UI where the task list will be displayed.","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"     * @param storage The storage of tasks, which is not utilized in this method but","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"     *                is here to override the abstract method in the parent class.","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-14"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"        return ui.showTaskList(tasks);","lastModifiedDate":"2023-09-14"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"     * Specifies that this command is not an exit command.","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"     * @return false, as this command does not cause the program to exit.","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"        return false;","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"adammangzijun":37}},{"path":"src/main/java/duke/command/MarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke.command;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":" * Represents a command to mark a task as done.","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":" * This class extends the Command class and contains method to execute the mark command","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":" * and to check whether it is an exit command.","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"public class MarkCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"    /** Number of the task to be mark as done from the task list */","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"    private int taskNumber;","lastModifiedDate":"2023-09-03"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"     * Creates a new mark command with the specified number for the task to be marked done.","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"     * @param taskNumber The number of the task to be marked as done from the task list.","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"    public MarkCommand(int taskNumber) {","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"        this.taskNumber \u003d taskNumber;","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"     * Executes the mark command.","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"     * This method retrieves the task to be marked using the number,","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"     * marks the task from the task list,","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"     * and invokes UI to display the mark task message.","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"     * @param tasks The list of tasks on which the command will operate on.","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"     * @param ui The UI which is used during the command execution to show the mark task text.","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"     * @param storage The storage where tasks are stored and retrieved from, currently","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"     *                not utilized in this method but can be extended to use in the future.","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-14"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"        Task task \u003d tasks.get(this.taskNumber);","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"        assert task !\u003d null; // Check task is not null.","lastModifiedDate":"2023-09-17"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"        task.markDone();","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"        return ui.showMarkText(task);","lastModifiedDate":"2023-09-14"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"     * Specifies that this command is not an exit command.","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"     * @return false, as this command does not cause the program to exit.","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-03"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"        return false;","lastModifiedDate":"2023-09-03"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"adammangzijun":55}},{"path":"src/main/java/duke/command/UnmarkCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke.command;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":" * Represents a command to mark a task as undone.","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":" * This class extends the Command class and contains method to execute the unmark command","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":" * and to check whether it is an exit command.","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"public class UnmarkCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"    /** Number of the task to be mark as undone from the task list */","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"    private int taskNumber;","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"     * Creates a new unmark command with the specified number for the task to be marked undone.","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"     * @param taskNumber The number of the task to be marked as undone from the task list.","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"    public UnmarkCommand(int taskNumber) {","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"        this.taskNumber \u003d taskNumber;","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"     * Executes the unmark command.","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"     * This method retrieves the task to be marked undone using the number,","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"     * marks the task from the task list as undone,","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"     * and invokes UI to display the unmark task message.","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"     * @param tasks The list of tasks on which the command will operate on.","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"     * @param ui The UI which is used during the command execution to show the unmark task text.","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"     * @param storage The storage where tasks are stored and retrieved from, currently","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"     *                not utilized in this method but can be extended to use in the future.","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-14"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"        Task task \u003d tasks.get(this.taskNumber);","lastModifiedDate":"2023-09-03"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"        assert task !\u003d null; // Check task is not null.","lastModifiedDate":"2023-09-17"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"        task.unmarkDone();","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"        return ui.showUnmarkText(task);","lastModifiedDate":"2023-09-14"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"     * Specifies that this command is not an exit command.","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"     * @return false, as this command does not cause the program to exit.","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-03"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"        return false;","lastModifiedDate":"2023-09-03"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"adammangzijun":55}},{"path":"src/main/java/duke/command/UpdateCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke.command;","lastModifiedDate":"2023-09-19"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-19"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-09-19"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-19"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-09-19"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":" * Represents a command that updates a specific field of a task in the task list.","lastModifiedDate":"2023-09-19"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-09-19"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"public class UpdateCommand extends Command {","lastModifiedDate":"2023-09-19"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"    /** Number of the task to be mark as done from the task list */","lastModifiedDate":"2023-09-19"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"    private int taskNumber;","lastModifiedDate":"2023-09-19"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"    /** The field of the task to update. */","lastModifiedDate":"2023-09-19"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"    private String field;","lastModifiedDate":"2023-09-19"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"    /** The new value to set for the specified field. */","lastModifiedDate":"2023-09-19"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"    private String newValue;","lastModifiedDate":"2023-09-19"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-19"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"     * Creates an update command with the specified task number, field, and new value.","lastModifiedDate":"2023-09-19"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-19"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"     * @param taskNumber The number of the task to update in the task list.","lastModifiedDate":"2023-09-19"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"     * @param field The field of the task to update.","lastModifiedDate":"2023-09-19"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"     * @param newValue The new value to set for the specified field.","lastModifiedDate":"2023-09-19"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-19"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"    public UpdateCommand(int taskNumber, String field, String newValue) {","lastModifiedDate":"2023-09-19"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"        this.taskNumber \u003d taskNumber;","lastModifiedDate":"2023-09-19"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"        this.field \u003d field;","lastModifiedDate":"2023-09-19"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"        this.newValue \u003d newValue;","lastModifiedDate":"2023-09-19"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-19"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-19"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"     * Executes the update command.","lastModifiedDate":"2023-09-19"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"     * Retrieves the task with the specified number from the task list","lastModifiedDate":"2023-09-19"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"     * and updates the specified field with the new value.","lastModifiedDate":"2023-09-19"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"     * Invokes the UI to display a message indicating the task has been updated.","lastModifiedDate":"2023-09-19"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-19"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"     * @param tasks The list of tasks to operate on.","lastModifiedDate":"2023-09-19"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"     * @param ui The UI used to display the update message.","lastModifiedDate":"2023-09-19"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"     * @param storage The storage mechanism used to persist tasks, not","lastModifiedDate":"2023-09-19"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"     *                utilized in this method but available for future extensions.","lastModifiedDate":"2023-09-19"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"     * @return The message generated by the UI indicating the task has been updated.","lastModifiedDate":"2023-09-19"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-19"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-09-19"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-19"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"        tasks.updateTask(this.taskNumber, this.field, this.newValue);","lastModifiedDate":"2023-09-19"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"        return ui.showUpdateText(tasks, this.taskNumber);","lastModifiedDate":"2023-09-19"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-19"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-19"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"     * Specifies that this command is not an exit command.","lastModifiedDate":"2023-09-19"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-19"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"     * @return false, as this command does not cause the program to exit.","lastModifiedDate":"2023-09-19"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-19"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-09-19"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-19"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"        return false;","lastModifiedDate":"2023-09-19"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-19"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-09-19"},{"lineNumber":59,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-19"}],"authorContributionMap":{"adammangzijun":59}},{"path":"src/main/java/duke/command/WelcomeCommand.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke.command;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import duke.storage.Storage;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import duke.ui.Ui;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":" * Represents a command to print out the welcome message","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":" * and also load list of tasks from the storage file, or create a storage file if there isn\u0027t one.","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":" * This class is a child of the abstract Command class","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":" * and contains method to execute the welcome command,","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":" * including methods to check whether it is an exit command.","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"public class WelcomeCommand extends Command {","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"     * Executes the welcome command.","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"     * It calls the showWelcome method of the Ui  to print out the welcome message.","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"     * @param tasks The task list that will store the list of tasks","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"     *              being loaded from the storage file.","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"     * @param ui The UI that is used during command execution to show the welcome message.","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"     * @param storage The storage where the list of tasks are loaded from.","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"    public String execute(TaskList tasks, Ui ui, Storage storage) {","lastModifiedDate":"2023-09-14"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"        return ui.showWelcome();","lastModifiedDate":"2023-09-14"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"     * Specifies that this command is not an exit command.","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"     * @return false, as this command does not cause the program to exit.","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"    public boolean isExit() {","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"        return false;","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"adammangzijun":39}},{"path":"src/main/java/duke/gui/DialogBox.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke.gui;","lastModifiedDate":"2023-09-17"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import java.util.Collections;","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import javafx.collections.FXCollections;","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"import javafx.collections.ObservableList;","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"import javafx.geometry.Pos;","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"import javafx.scene.Node;","lastModifiedDate":"2023-09-14"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"import javafx.scene.control.Label;","lastModifiedDate":"2023-09-14"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-14"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"import javafx.scene.image.ImageView;","lastModifiedDate":"2023-09-14"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"import javafx.scene.layout.HBox;","lastModifiedDate":"2023-09-14"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-09-14"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":" * An example of a custom control using FXML.","lastModifiedDate":"2023-09-14"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":" * This control represents a dialog box consisting of an ImageView to represent the speaker\u0027s face and a label","lastModifiedDate":"2023-09-14"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":" * containing text from the speaker.","lastModifiedDate":"2023-09-14"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-09-14"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"public class DialogBox extends HBox {","lastModifiedDate":"2023-09-14"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"    @FXML","lastModifiedDate":"2023-09-14"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"    private Label dialog;","lastModifiedDate":"2023-09-14"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"    @FXML","lastModifiedDate":"2023-09-14"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"    private ImageView displayPicture;","lastModifiedDate":"2023-09-14"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-17"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"     * Constructs a DialogBox with specified text and image.","lastModifiedDate":"2023-09-17"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-17"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"     * @param text the text to be displayed in the dialog box.","lastModifiedDate":"2023-09-17"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"     * @param img the image to be displayed in the dialog box.","lastModifiedDate":"2023-09-17"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-17"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"    private DialogBox(String text, Image img) {","lastModifiedDate":"2023-09-14"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"        try {","lastModifiedDate":"2023-09-14"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(MainWindow.class.getResource(\"/view/DialogBox.fxml\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"            fxmlLoader.setController(this);","lastModifiedDate":"2023-09-14"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"            fxmlLoader.setRoot(this);","lastModifiedDate":"2023-09-14"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"            fxmlLoader.load();","lastModifiedDate":"2023-09-14"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-14"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-14"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"        dialog.setText(text);","lastModifiedDate":"2023-09-14"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"        displayPicture.setImage(img);","lastModifiedDate":"2023-09-14"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"     * Flips the dialog box such that the ImageView is on the left and text on the right.","lastModifiedDate":"2023-09-14"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"    private void flip() {","lastModifiedDate":"2023-09-14"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"        ObservableList\u003cNode\u003e tmp \u003d FXCollections.observableArrayList(this.getChildren());","lastModifiedDate":"2023-09-14"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"        Collections.reverse(tmp);","lastModifiedDate":"2023-09-14"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"        getChildren().setAll(tmp);","lastModifiedDate":"2023-09-14"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"        setAlignment(Pos.TOP_LEFT);","lastModifiedDate":"2023-09-14"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-17"},{"lineNumber":59,"author":{"gitId":"adammangzijun"},"content":"     * Creates a user dialog box with specified text and image.","lastModifiedDate":"2023-09-17"},{"lineNumber":60,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-17"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"     * @param text the text to be displayed as user\u0027s dialog.","lastModifiedDate":"2023-09-17"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"     * @param img the image to be displayed representing the user.","lastModifiedDate":"2023-09-17"},{"lineNumber":63,"author":{"gitId":"adammangzijun"},"content":"     * @return a new DialogBox object representing user\u0027s dialog.","lastModifiedDate":"2023-09-17"},{"lineNumber":64,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-17"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"    public static DialogBox getUserDialog(String text, Image img) {","lastModifiedDate":"2023-09-14"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"        DialogBox dialogBox \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-22"},{"lineNumber":67,"author":{"gitId":"adammangzijun"},"content":"        dialogBox.setStyle(\"-fx-background-color: #FFCCCC\");","lastModifiedDate":"2023-09-22"},{"lineNumber":68,"author":{"gitId":"adammangzijun"},"content":"        return dialogBox;","lastModifiedDate":"2023-09-22"},{"lineNumber":69,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":70,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":71,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-17"},{"lineNumber":72,"author":{"gitId":"adammangzijun"},"content":"     * Creates a Adam\u0027 Chat Bot dialog box with specified text and image.","lastModifiedDate":"2023-09-17"},{"lineNumber":73,"author":{"gitId":"adammangzijun"},"content":"     * The dialog box is flipped to distinguish","lastModifiedDate":"2023-09-17"},{"lineNumber":74,"author":{"gitId":"adammangzijun"},"content":"     * Adam\u0027s dialog from the user\u0027s.","lastModifiedDate":"2023-09-17"},{"lineNumber":75,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-17"},{"lineNumber":76,"author":{"gitId":"adammangzijun"},"content":"     * @param text the text to be displayed as Adam\u0027s dialog.","lastModifiedDate":"2023-09-17"},{"lineNumber":77,"author":{"gitId":"adammangzijun"},"content":"     * @param img the image to be displayed representing Adam.","lastModifiedDate":"2023-09-17"},{"lineNumber":78,"author":{"gitId":"adammangzijun"},"content":"     * @return a new DialogBox object representing Adam\u0027s dialog.","lastModifiedDate":"2023-09-17"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-17"},{"lineNumber":80,"author":{"gitId":"adammangzijun"},"content":"    public static DialogBox getAdamDialog(String text, Image img) {","lastModifiedDate":"2023-09-17"},{"lineNumber":81,"author":{"gitId":"adammangzijun"},"content":"        var db \u003d new DialogBox(text, img);","lastModifiedDate":"2023-09-14"},{"lineNumber":82,"author":{"gitId":"adammangzijun"},"content":"        db.flip();","lastModifiedDate":"2023-09-14"},{"lineNumber":83,"author":{"gitId":"adammangzijun"},"content":"        db.setStyle(\"-fx-background-color: #FFFFCC\");","lastModifiedDate":"2023-09-22"},{"lineNumber":84,"author":{"gitId":"adammangzijun"},"content":"        return db;","lastModifiedDate":"2023-09-14"},{"lineNumber":85,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":86,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-09-14"}],"authorContributionMap":{"adammangzijun":86}},{"path":"src/main/java/duke/gui/Launcher.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke.gui;","lastModifiedDate":"2023-09-17"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":" * A launcher class to workaround classpath issues.","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"public class Launcher {","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"        Application.launch(Main.class, args);","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-09-14"}],"authorContributionMap":{"adammangzijun":12}},{"path":"src/main/java/duke/gui/Main.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke.gui;","lastModifiedDate":"2023-09-17"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import javafx.application.Application;","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"import javafx.fxml.FXMLLoader;","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"import javafx.scene.Scene;","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"import javafx.stage.Stage;","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-09-14"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":" * A GUI for duke.Duke using FXML.","lastModifiedDate":"2023-09-14"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-09-14"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"public class Main extends Application {","lastModifiedDate":"2023-09-14"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"    private Duke duke \u003d new Duke();","lastModifiedDate":"2023-09-14"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-09-14"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"    public void start(Stage stage) {","lastModifiedDate":"2023-09-14"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"        try {","lastModifiedDate":"2023-09-14"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"            FXMLLoader fxmlLoader \u003d new FXMLLoader(Main.class.getResource(\"/view/MainWindow.fxml\"));","lastModifiedDate":"2023-09-14"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"            AnchorPane ap \u003d fxmlLoader.load();","lastModifiedDate":"2023-09-14"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"            Scene scene \u003d new Scene(ap);","lastModifiedDate":"2023-09-14"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"            scene.getStylesheets().add(\"/view/Styles.css\");","lastModifiedDate":"2023-09-22"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"            stage.setTitle(\"Adam\u0027s ChatBot\");","lastModifiedDate":"2023-09-22"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"            stage.setScene(scene);","lastModifiedDate":"2023-09-14"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"            fxmlLoader.\u003cMainWindow\u003egetController().setDuke(duke);","lastModifiedDate":"2023-09-14"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"            stage.show();","lastModifiedDate":"2023-09-14"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-14"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-14"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-14"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-09-14"}],"authorContributionMap":{"adammangzijun":34}},{"path":"src/main/java/duke/gui/MainWindow.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke.gui;","lastModifiedDate":"2023-09-17"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import duke.Duke;","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import javafx.fxml.FXML;","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import javafx.scene.control.Button;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import javafx.scene.control.ScrollPane;","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"import javafx.scene.control.TextField;","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"import javafx.scene.image.Image;","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"import javafx.scene.layout.AnchorPane;","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"import javafx.scene.layout.VBox;","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-09-14"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":" * Controller for duke.GUI.MainWindow. Provides the layout for the other controls.","lastModifiedDate":"2023-09-14"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-09-14"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"public class MainWindow extends AnchorPane {","lastModifiedDate":"2023-09-14"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"    @FXML","lastModifiedDate":"2023-09-14"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"    private ScrollPane scrollPane;","lastModifiedDate":"2023-09-14"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"    @FXML","lastModifiedDate":"2023-09-14"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"    private VBox dialogContainer;","lastModifiedDate":"2023-09-14"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"    @FXML","lastModifiedDate":"2023-09-14"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"    private TextField userInput;","lastModifiedDate":"2023-09-14"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"    @FXML","lastModifiedDate":"2023-09-14"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"    private Button sendButton;","lastModifiedDate":"2023-09-14"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"    private Duke duke;","lastModifiedDate":"2023-09-14"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"    private Image userImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/Crabs.jpg\"));","lastModifiedDate":"2023-09-22"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"    private Image dukeImage \u003d new Image(this.getClass().getResourceAsStream(\"/images/SpongeBob.jpg\"));","lastModifiedDate":"2023-09-22"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"    @FXML","lastModifiedDate":"2023-09-14"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"    public void initialize() {","lastModifiedDate":"2023-09-14"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"        scrollPane.vvalueProperty().bind(dialogContainer.heightProperty());","lastModifiedDate":"2023-09-14"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"    public void setDuke(Duke d) {","lastModifiedDate":"2023-09-14"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"        duke \u003d d;","lastModifiedDate":"2023-09-14"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-14"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"     * Creates two dialog boxes, one echoing user input and the other containing duke.","lastModifiedDate":"2023-09-17"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"     * Duke\u0027s reply and then appends them to the dialog container.","lastModifiedDate":"2023-09-17"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"     * Clears the user input after processing.","lastModifiedDate":"2023-09-17"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-14"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"    @FXML","lastModifiedDate":"2023-09-14"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"    private void handleUserInput() {","lastModifiedDate":"2023-09-14"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"        String input \u003d userInput.getText();","lastModifiedDate":"2023-09-14"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"        String response \u003d duke.getResponse(input);","lastModifiedDate":"2023-09-14"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"        dialogContainer.getChildren().addAll(","lastModifiedDate":"2023-09-14"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"                DialogBox.getUserDialog(input, userImage),","lastModifiedDate":"2023-09-14"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"                DialogBox.getAdamDialog(response, dukeImage)","lastModifiedDate":"2023-09-17"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"        );","lastModifiedDate":"2023-09-14"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"        userInput.clear();","lastModifiedDate":"2023-09-14"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-14"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-09-14"}],"authorContributionMap":{"adammangzijun":51}},{"path":"src/main/java/duke/parser/Parser.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke.parser;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-03"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-03"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-09-03"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"import java.util.List;","lastModifiedDate":"2023-09-03"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"import duke.command.AddCommand;","lastModifiedDate":"2023-09-22"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"import duke.command.ByeCommand;","lastModifiedDate":"2023-09-22"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"import duke.command.Command;","lastModifiedDate":"2023-09-22"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"import duke.command.DeleteCommand;","lastModifiedDate":"2023-09-22"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"import duke.command.ErrorCommand;","lastModifiedDate":"2023-09-22"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"import duke.command.FindCommand;","lastModifiedDate":"2023-09-22"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"import duke.command.ListCommand;","lastModifiedDate":"2023-09-22"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"import duke.command.MarkCommand;","lastModifiedDate":"2023-09-22"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"import duke.command.UnmarkCommand;","lastModifiedDate":"2023-09-22"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"import duke.command.UpdateCommand;","lastModifiedDate":"2023-09-22"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-09-14"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"import duke.task.Event;","lastModifiedDate":"2023-09-14"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-09-14"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":" * Parser class handles the interpretation of user input into commands that can be executed.","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"public class Parser {","lastModifiedDate":"2023-09-03"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"    /** A List containing possible formats of date and time */","lastModifiedDate":"2023-09-17"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"    private static final List\u003cString\u003e DATE_STRING_FORMATS \u003d Arrays.asList(","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"            \"yyyy-MM-dd HH:mm\",","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"            \"dd/MM/yyyy HH:mm\",","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"            \"MM-dd-yyyy HH:mm\"","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"            // Add other formats here","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"    );","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"    /** Required date and time format */","lastModifiedDate":"2023-09-17"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"    private static final DateTimeFormatter DEFAULT_DATE_TIME_FORMAT \u003d DateTimeFormatter.ofPattern(\"MMM dd yyyy HH:mm\");","lastModifiedDate":"2023-09-17"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-17"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"     * Parses the user input and returns a Command object","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"     * representing the user\u0027s intended action.","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"     * @param userInput The full input string entered by the user.","lastModifiedDate":"2023-09-17"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"     * @return A Command object representing the action to be taken.","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"    public static Command parse(String userInput) {","lastModifiedDate":"2023-09-17"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"        assert userInput !\u003d null \u0026\u0026 !userInput.trim().isEmpty() : \"Input cannot be empty.\"; // Check input is not empty.","lastModifiedDate":"2023-09-22"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"        // Extracts the first word (the command word) from the input","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"        String commandWord \u003d userInput.split(\" \")[0].toLowerCase();","lastModifiedDate":"2023-09-17"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"        switch (commandWord) {","lastModifiedDate":"2023-09-03"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"        case \"bye\":","lastModifiedDate":"2023-09-03"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"            return new ByeCommand();","lastModifiedDate":"2023-09-03"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"            // Fallthrough","lastModifiedDate":"2023-09-08"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"        case \"list\":","lastModifiedDate":"2023-09-03"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"            return new ListCommand();","lastModifiedDate":"2023-09-03"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"            // Fallthrough","lastModifiedDate":"2023-09-08"},{"lineNumber":59,"author":{"gitId":"adammangzijun"},"content":"        case \"todo\":","lastModifiedDate":"2023-09-03"},{"lineNumber":60,"author":{"gitId":"adammangzijun"},"content":"            return Parser.parseToDo(userInput);","lastModifiedDate":"2023-09-17"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"            // Fallthrough","lastModifiedDate":"2023-09-08"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"        case \"deadline\":","lastModifiedDate":"2023-09-03"},{"lineNumber":63,"author":{"gitId":"adammangzijun"},"content":"            return Parser.parseDeadline(userInput);","lastModifiedDate":"2023-09-17"},{"lineNumber":64,"author":{"gitId":"adammangzijun"},"content":"            // Fallthrough","lastModifiedDate":"2023-09-17"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"        case \"event\":","lastModifiedDate":"2023-09-17"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"            return Parser.parseEvent(userInput);","lastModifiedDate":"2023-09-17"},{"lineNumber":67,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":68,"author":{"gitId":"adammangzijun"},"content":"            // Fallthrough","lastModifiedDate":"2023-09-17"},{"lineNumber":69,"author":{"gitId":"adammangzijun"},"content":"        case \"delete\":","lastModifiedDate":"2023-09-17"},{"lineNumber":70,"author":{"gitId":"adammangzijun"},"content":"            return Parser.parseDelete(userInput);","lastModifiedDate":"2023-09-17"},{"lineNumber":71,"author":{"gitId":"adammangzijun"},"content":"            // Fallthrough","lastModifiedDate":"2023-09-17"},{"lineNumber":72,"author":{"gitId":"adammangzijun"},"content":"        case \"mark\":","lastModifiedDate":"2023-09-17"},{"lineNumber":73,"author":{"gitId":"adammangzijun"},"content":"            return Parser.parseMark(userInput);","lastModifiedDate":"2023-09-17"},{"lineNumber":74,"author":{"gitId":"adammangzijun"},"content":"            // Fallthrough","lastModifiedDate":"2023-09-17"},{"lineNumber":75,"author":{"gitId":"adammangzijun"},"content":"        case \"unmark\":","lastModifiedDate":"2023-09-17"},{"lineNumber":76,"author":{"gitId":"adammangzijun"},"content":"            return Parser.parseUnmark(userInput);","lastModifiedDate":"2023-09-17"},{"lineNumber":77,"author":{"gitId":"adammangzijun"},"content":"        case \"find\":","lastModifiedDate":"2023-09-17"},{"lineNumber":78,"author":{"gitId":"adammangzijun"},"content":"            return Parser.parseFind(userInput);","lastModifiedDate":"2023-09-17"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"            // Fallthrough","lastModifiedDate":"2023-09-17"},{"lineNumber":80,"author":{"gitId":"adammangzijun"},"content":"        case \"update\":","lastModifiedDate":"2023-09-19"},{"lineNumber":81,"author":{"gitId":"adammangzijun"},"content":"            return Parser.parseUpdate(userInput);","lastModifiedDate":"2023-09-22"},{"lineNumber":82,"author":{"gitId":"adammangzijun"},"content":"            //Fallthrough","lastModifiedDate":"2023-09-22"},{"lineNumber":83,"author":{"gitId":"adammangzijun"},"content":"        default:","lastModifiedDate":"2023-09-17"},{"lineNumber":84,"author":{"gitId":"adammangzijun"},"content":"            return new ErrorCommand(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-09-17"},{"lineNumber":85,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-17"},{"lineNumber":86,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-17"},{"lineNumber":87,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":88,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-19"},{"lineNumber":89,"author":{"gitId":"adammangzijun"},"content":"     * Parses the user input and returns an update command object.","lastModifiedDate":"2023-09-19"},{"lineNumber":90,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-19"},{"lineNumber":91,"author":{"gitId":"adammangzijun"},"content":"     * @param userInput The full input string entered by the user.","lastModifiedDate":"2023-09-19"},{"lineNumber":92,"author":{"gitId":"adammangzijun"},"content":"     * @return An updateCommand object that updates the specified field with the new Value.","lastModifiedDate":"2023-09-19"},{"lineNumber":93,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-19"},{"lineNumber":94,"author":{"gitId":"adammangzijun"},"content":"    public static Command parseUpdate(String userInput) {","lastModifiedDate":"2023-09-19"},{"lineNumber":95,"author":{"gitId":"adammangzijun"},"content":"        try {","lastModifiedDate":"2023-09-03"},{"lineNumber":96,"author":{"gitId":"adammangzijun"},"content":"            int taskNumber \u003d Integer.parseInt(userInput.split(\" \")[1]);","lastModifiedDate":"2023-09-19"},{"lineNumber":97,"author":{"gitId":"adammangzijun"},"content":"            String field \u003d userInput.split(\" \", 4)[2];","lastModifiedDate":"2023-09-19"},{"lineNumber":98,"author":{"gitId":"adammangzijun"},"content":"            String newValue \u003d userInput.split(\" \", 4)[3];","lastModifiedDate":"2023-09-19"},{"lineNumber":99,"author":{"gitId":"adammangzijun"},"content":"            return new UpdateCommand(taskNumber, field, newValue);","lastModifiedDate":"2023-09-19"},{"lineNumber":100,"author":{"gitId":"adammangzijun"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-09-19"},{"lineNumber":101,"author":{"gitId":"adammangzijun"},"content":"            return new ErrorCommand(\"☹ OOPS!!! The format of your update is invalid.\");","lastModifiedDate":"2023-09-19"},{"lineNumber":102,"author":{"gitId":"adammangzijun"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-19"},{"lineNumber":103,"author":{"gitId":"adammangzijun"},"content":"            return new ErrorCommand(\"☹ OOPS!!! There are wrong number of fields given\");","lastModifiedDate":"2023-09-19"},{"lineNumber":104,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-19"},{"lineNumber":105,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-19"},{"lineNumber":106,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":107,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-17"},{"lineNumber":108,"author":{"gitId":"adammangzijun"},"content":"     * Changes the format of a date and time input string into a the  DEFAULT_DATE_TIME_FORMAT.","lastModifiedDate":"2023-09-17"},{"lineNumber":109,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-17"},{"lineNumber":110,"author":{"gitId":"adammangzijun"},"content":"     * @param dateTimeInput The date and time string to be formatted.","lastModifiedDate":"2023-09-17"},{"lineNumber":111,"author":{"gitId":"adammangzijun"},"content":"     * @return A string representing the date and time in a standard format.","lastModifiedDate":"2023-09-17"},{"lineNumber":112,"author":{"gitId":"adammangzijun"},"content":"     * @throws DateTimeParseException Exception thrown if the input does not match any of the expected formats.","lastModifiedDate":"2023-09-17"},{"lineNumber":113,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-17"},{"lineNumber":114,"author":{"gitId":"adammangzijun"},"content":"    public static String changeDateFormat(String dateTimeInput) throws DateTimeParseException {","lastModifiedDate":"2023-09-17"},{"lineNumber":115,"author":{"gitId":"adammangzijun"},"content":"        String dateTimeString \u003d \"\";","lastModifiedDate":"2023-09-17"},{"lineNumber":116,"author":{"gitId":"adammangzijun"},"content":"        // Try parsing with different formats","lastModifiedDate":"2023-09-03"},{"lineNumber":117,"author":{"gitId":"adammangzijun"},"content":"        for (String formatString : DATE_STRING_FORMATS) {","lastModifiedDate":"2023-09-08"},{"lineNumber":118,"author":{"gitId":"adammangzijun"},"content":"            try {","lastModifiedDate":"2023-09-03"},{"lineNumber":119,"author":{"gitId":"adammangzijun"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(formatString);","lastModifiedDate":"2023-09-03"},{"lineNumber":120,"author":{"gitId":"adammangzijun"},"content":"                LocalDateTime dateTime \u003d LocalDateTime.parse(dateTimeInput, formatter);","lastModifiedDate":"2023-09-17"},{"lineNumber":121,"author":{"gitId":"adammangzijun"},"content":"                dateTimeString \u003d dateTime.format(DEFAULT_DATE_TIME_FORMAT);","lastModifiedDate":"2023-09-17"},{"lineNumber":122,"author":{"gitId":"adammangzijun"},"content":"                break; // Stop at the first successful parse","lastModifiedDate":"2023-09-03"},{"lineNumber":123,"author":{"gitId":"adammangzijun"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":124,"author":{"gitId":"adammangzijun"},"content":"                // Ignore the exception and try the next format","lastModifiedDate":"2023-09-03"},{"lineNumber":125,"author":{"gitId":"adammangzijun"},"content":"            }","lastModifiedDate":"2023-09-03"},{"lineNumber":126,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":127,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":128,"author":{"gitId":"adammangzijun"},"content":"        // if the input fits none of the format, throw DateTimeParseException","lastModifiedDate":"2023-09-03"},{"lineNumber":129,"author":{"gitId":"adammangzijun"},"content":"        if (dateTimeString.isEmpty()) {","lastModifiedDate":"2023-09-17"},{"lineNumber":130,"author":{"gitId":"adammangzijun"},"content":"            throw new DateTimeParseException(","lastModifiedDate":"2023-09-08"},{"lineNumber":131,"author":{"gitId":"adammangzijun"},"content":"                    \"Invalid date/time format\", dateTimeInput, 0);","lastModifiedDate":"2023-09-17"},{"lineNumber":132,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-17"},{"lineNumber":133,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-17"},{"lineNumber":134,"author":{"gitId":"adammangzijun"},"content":"        return dateTimeString;","lastModifiedDate":"2023-09-17"},{"lineNumber":135,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":136,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":137,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-17"},{"lineNumber":138,"author":{"gitId":"adammangzijun"},"content":"     * Checks the sequence of start and due dates to ensure the start date is before the due date.","lastModifiedDate":"2023-09-17"},{"lineNumber":139,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-17"},{"lineNumber":140,"author":{"gitId":"adammangzijun"},"content":"     * @param startDateString The start date in string format.","lastModifiedDate":"2023-09-17"},{"lineNumber":141,"author":{"gitId":"adammangzijun"},"content":"     * @param dueDateString The due date in string format.","lastModifiedDate":"2023-09-17"},{"lineNumber":142,"author":{"gitId":"adammangzijun"},"content":"     * @throws IllegalArgumentException Exception thrown if the start date is equal to or after the due date.","lastModifiedDate":"2023-09-17"},{"lineNumber":143,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-17"},{"lineNumber":144,"author":{"gitId":"adammangzijun"},"content":"    public static void checkDateSequence(String startDateString, String dueDateString) throws IllegalArgumentException {","lastModifiedDate":"2023-09-17"},{"lineNumber":145,"author":{"gitId":"adammangzijun"},"content":"        LocalDateTime startDateTime \u003d LocalDateTime.parse(startDateString, DEFAULT_DATE_TIME_FORMAT);","lastModifiedDate":"2023-09-17"},{"lineNumber":146,"author":{"gitId":"adammangzijun"},"content":"        LocalDateTime dueDateTime \u003d LocalDateTime.parse(dueDateString, DEFAULT_DATE_TIME_FORMAT);","lastModifiedDate":"2023-09-17"},{"lineNumber":147,"author":{"gitId":"adammangzijun"},"content":"        boolean isStartAfterDue \u003d startDateTime.isAfter(dueDateTime);","lastModifiedDate":"2023-09-17"},{"lineNumber":148,"author":{"gitId":"adammangzijun"},"content":"        boolean isStartEqualDue \u003d startDateTime.isEqual(dueDateTime);","lastModifiedDate":"2023-09-17"},{"lineNumber":149,"author":{"gitId":"adammangzijun"},"content":"        if (isStartEqualDue || isStartAfterDue) {","lastModifiedDate":"2023-09-17"},{"lineNumber":150,"author":{"gitId":"adammangzijun"},"content":"            throw new IllegalArgumentException();","lastModifiedDate":"2023-09-17"},{"lineNumber":151,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-17"},{"lineNumber":152,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-17"},{"lineNumber":153,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-17"},{"lineNumber":154,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-17"},{"lineNumber":155,"author":{"gitId":"adammangzijun"},"content":"     * Parses the user input to create a new ToDo task.","lastModifiedDate":"2023-09-17"},{"lineNumber":156,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-17"},{"lineNumber":157,"author":{"gitId":"adammangzijun"},"content":"     * @param userInput The full input string entered by the user.","lastModifiedDate":"2023-09-17"},{"lineNumber":158,"author":{"gitId":"adammangzijun"},"content":"     * @return A Command object to add a new ToDo task.","lastModifiedDate":"2023-09-17"},{"lineNumber":159,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-17"},{"lineNumber":160,"author":{"gitId":"adammangzijun"},"content":"    public static Command parseToDo(String userInput) {","lastModifiedDate":"2023-09-17"},{"lineNumber":161,"author":{"gitId":"adammangzijun"},"content":"        try {","lastModifiedDate":"2023-09-17"},{"lineNumber":162,"author":{"gitId":"adammangzijun"},"content":"            String taskDescription \u003d userInput.split(\" \", 2)[1];","lastModifiedDate":"2023-09-17"},{"lineNumber":163,"author":{"gitId":"adammangzijun"},"content":"            ToDo task \u003d new ToDo(taskDescription);","lastModifiedDate":"2023-09-17"},{"lineNumber":164,"author":{"gitId":"adammangzijun"},"content":"            return new AddCommand(task);","lastModifiedDate":"2023-09-03"},{"lineNumber":165,"author":{"gitId":"adammangzijun"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":166,"author":{"gitId":"adammangzijun"},"content":"            return new ErrorCommand(","lastModifiedDate":"2023-09-17"},{"lineNumber":167,"author":{"gitId":"adammangzijun"},"content":"                    \"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-09-17"},{"lineNumber":168,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-17"},{"lineNumber":169,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":170,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":171,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-17"},{"lineNumber":172,"author":{"gitId":"adammangzijun"},"content":"     * Parses the user input to create a new Deadline task.","lastModifiedDate":"2023-09-17"},{"lineNumber":173,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-17"},{"lineNumber":174,"author":{"gitId":"adammangzijun"},"content":"     * @param userInput The full input string entered by the user.","lastModifiedDate":"2023-09-17"},{"lineNumber":175,"author":{"gitId":"adammangzijun"},"content":"     * @return A Command object to add a new Deadline task.","lastModifiedDate":"2023-09-17"},{"lineNumber":176,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-17"},{"lineNumber":177,"author":{"gitId":"adammangzijun"},"content":"    public static Command parseDeadline(String userInput) {","lastModifiedDate":"2023-09-17"},{"lineNumber":178,"author":{"gitId":"adammangzijun"},"content":"        try {","lastModifiedDate":"2023-09-17"},{"lineNumber":179,"author":{"gitId":"adammangzijun"},"content":"            String taskDescription \u003d userInput.split(\" /by \", 2)[0].split(\" \", 2)[1];","lastModifiedDate":"2023-09-17"},{"lineNumber":180,"author":{"gitId":"adammangzijun"},"content":"            String dateInput \u003d userInput.split(\" /by \", 2)[1];","lastModifiedDate":"2023-09-17"},{"lineNumber":181,"author":{"gitId":"adammangzijun"},"content":"            String dueDate \u003d Parser.changeDateFormat(dateInput);","lastModifiedDate":"2023-09-17"},{"lineNumber":182,"author":{"gitId":"adammangzijun"},"content":"            Deadline task \u003d new Deadline(taskDescription, dueDate);","lastModifiedDate":"2023-09-17"},{"lineNumber":183,"author":{"gitId":"adammangzijun"},"content":"            return new AddCommand(task);","lastModifiedDate":"2023-09-03"},{"lineNumber":184,"author":{"gitId":"adammangzijun"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":185,"author":{"gitId":"adammangzijun"},"content":"            if (userInput.split(\" \").length \u003d\u003d 1) {","lastModifiedDate":"2023-09-17"},{"lineNumber":186,"author":{"gitId":"adammangzijun"},"content":"                return new ErrorCommand(","lastModifiedDate":"2023-09-08"},{"lineNumber":187,"author":{"gitId":"adammangzijun"},"content":"                        \"☹ OOPS!!! The description of a deadline cannot be empty\");","lastModifiedDate":"2023-09-08"},{"lineNumber":188,"author":{"gitId":"adammangzijun"},"content":"            } else {","lastModifiedDate":"2023-09-03"},{"lineNumber":189,"author":{"gitId":"adammangzijun"},"content":"                return new ErrorCommand(","lastModifiedDate":"2023-09-08"},{"lineNumber":190,"author":{"gitId":"adammangzijun"},"content":"                        \"☹ OOPS!!! The description of a deadline \"","lastModifiedDate":"2023-09-08"},{"lineNumber":191,"author":{"gitId":"adammangzijun"},"content":"                                + \"does not have \\\"/by\\\" specified\");","lastModifiedDate":"2023-09-08"},{"lineNumber":192,"author":{"gitId":"adammangzijun"},"content":"            }","lastModifiedDate":"2023-09-03"},{"lineNumber":193,"author":{"gitId":"adammangzijun"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":194,"author":{"gitId":"adammangzijun"},"content":"            return new ErrorCommand(","lastModifiedDate":"2023-09-08"},{"lineNumber":195,"author":{"gitId":"adammangzijun"},"content":"                    \"☹ OOPS!!! The format of deadline is wrong, \"","lastModifiedDate":"2023-09-08"},{"lineNumber":196,"author":{"gitId":"adammangzijun"},"content":"                            + \"please write it in the correct format\");","lastModifiedDate":"2023-09-08"},{"lineNumber":197,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":198,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":199,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":200,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-17"},{"lineNumber":201,"author":{"gitId":"adammangzijun"},"content":"     * Parses the user input to create a new Event task.","lastModifiedDate":"2023-09-17"},{"lineNumber":202,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-17"},{"lineNumber":203,"author":{"gitId":"adammangzijun"},"content":"     * @param userInput The full input string entered by the user.","lastModifiedDate":"2023-09-17"},{"lineNumber":204,"author":{"gitId":"adammangzijun"},"content":"     * @return A Command object to add a new Event task.","lastModifiedDate":"2023-09-17"},{"lineNumber":205,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-17"},{"lineNumber":206,"author":{"gitId":"adammangzijun"},"content":"    public static Command parseEvent(String userInput) {","lastModifiedDate":"2023-09-17"},{"lineNumber":207,"author":{"gitId":"adammangzijun"},"content":"        try {","lastModifiedDate":"2023-09-03"},{"lineNumber":208,"author":{"gitId":"adammangzijun"},"content":"            String taskName \u003d userInput.split(\" /from | /to \", 3)[0].split(\" \", 2)[1];","lastModifiedDate":"2023-09-17"},{"lineNumber":209,"author":{"gitId":"adammangzijun"},"content":"            String startDateInput \u003d userInput.split(\" /from | /to \", 3)[1];","lastModifiedDate":"2023-09-17"},{"lineNumber":210,"author":{"gitId":"adammangzijun"},"content":"            String dueDateInput \u003d userInput.split(\" /from | /to \", 3)[2];","lastModifiedDate":"2023-09-17"},{"lineNumber":211,"author":{"gitId":"adammangzijun"},"content":"            String startDateString \u003d Parser.changeDateFormat(startDateInput);","lastModifiedDate":"2023-09-17"},{"lineNumber":212,"author":{"gitId":"adammangzijun"},"content":"            String dueDateString \u003d Parser.changeDateFormat(dueDateInput);","lastModifiedDate":"2023-09-17"},{"lineNumber":213,"author":{"gitId":"adammangzijun"},"content":"            Parser.checkDateSequence(startDateString, dueDateString);","lastModifiedDate":"2023-09-17"},{"lineNumber":214,"author":{"gitId":"adammangzijun"},"content":"            Event task \u003d new Event(taskName, startDateString, dueDateString);","lastModifiedDate":"2023-09-08"},{"lineNumber":215,"author":{"gitId":"adammangzijun"},"content":"            return new AddCommand(task);","lastModifiedDate":"2023-09-03"},{"lineNumber":216,"author":{"gitId":"adammangzijun"},"content":"        } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":217,"author":{"gitId":"adammangzijun"},"content":"            if (userInput.split(\" \").length \u003d\u003d 1) {","lastModifiedDate":"2023-09-17"},{"lineNumber":218,"author":{"gitId":"adammangzijun"},"content":"                return new ErrorCommand(","lastModifiedDate":"2023-09-08"},{"lineNumber":219,"author":{"gitId":"adammangzijun"},"content":"                        \"☹ OOPS!!! The description of a event cannot be empty\");","lastModifiedDate":"2023-09-08"},{"lineNumber":220,"author":{"gitId":"adammangzijun"},"content":"            } else {","lastModifiedDate":"2023-09-03"},{"lineNumber":221,"author":{"gitId":"adammangzijun"},"content":"                return new ErrorCommand(","lastModifiedDate":"2023-09-08"},{"lineNumber":222,"author":{"gitId":"adammangzijun"},"content":"                        \"☹ OOPS!!! The format of starting date or due date is wrong,\"","lastModifiedDate":"2023-09-08"},{"lineNumber":223,"author":{"gitId":"adammangzijun"},"content":"                                + \" please write it in the format correct format\");","lastModifiedDate":"2023-09-08"},{"lineNumber":224,"author":{"gitId":"adammangzijun"},"content":"            }","lastModifiedDate":"2023-09-03"},{"lineNumber":225,"author":{"gitId":"adammangzijun"},"content":"        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":226,"author":{"gitId":"adammangzijun"},"content":"            return new ErrorCommand(","lastModifiedDate":"2023-09-08"},{"lineNumber":227,"author":{"gitId":"adammangzijun"},"content":"                    \"☹ OOPS!!! The format of starting date or due date is wrong,\"","lastModifiedDate":"2023-09-08"},{"lineNumber":228,"author":{"gitId":"adammangzijun"},"content":"                            + \" please write it in the format correct format\");","lastModifiedDate":"2023-09-08"},{"lineNumber":229,"author":{"gitId":"adammangzijun"},"content":"        } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":230,"author":{"gitId":"adammangzijun"},"content":"            return new ErrorCommand(","lastModifiedDate":"2023-09-08"},{"lineNumber":231,"author":{"gitId":"adammangzijun"},"content":"                    \"☹ OOPS!!! The starting date \"","lastModifiedDate":"2023-09-08"},{"lineNumber":232,"author":{"gitId":"adammangzijun"},"content":"                            + \"cannot be later than the due date.\");","lastModifiedDate":"2023-09-08"},{"lineNumber":233,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":234,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-17"},{"lineNumber":235,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-17"},{"lineNumber":236,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-17"},{"lineNumber":237,"author":{"gitId":"adammangzijun"},"content":"     * Parses the user input to create a command to delete a task.","lastModifiedDate":"2023-09-17"},{"lineNumber":238,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-17"},{"lineNumber":239,"author":{"gitId":"adammangzijun"},"content":"     * @param userInput The full input string entered by the user.","lastModifiedDate":"2023-09-17"},{"lineNumber":240,"author":{"gitId":"adammangzijun"},"content":"     * @return A Command object to delete a task based on the task number.","lastModifiedDate":"2023-09-17"},{"lineNumber":241,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-17"},{"lineNumber":242,"author":{"gitId":"adammangzijun"},"content":"    public static Command parseDelete(String userInput) {","lastModifiedDate":"2023-09-17"},{"lineNumber":243,"author":{"gitId":"adammangzijun"},"content":"        try {","lastModifiedDate":"2023-09-03"},{"lineNumber":244,"author":{"gitId":"adammangzijun"},"content":"            int taskNumber \u003d Integer.parseInt(userInput.split(\" \")[1]);","lastModifiedDate":"2023-09-17"},{"lineNumber":245,"author":{"gitId":"adammangzijun"},"content":"            return new DeleteCommand(taskNumber);","lastModifiedDate":"2023-09-03"},{"lineNumber":246,"author":{"gitId":"adammangzijun"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":247,"author":{"gitId":"adammangzijun"},"content":"            return new ErrorCommand(","lastModifiedDate":"2023-09-08"},{"lineNumber":248,"author":{"gitId":"adammangzijun"},"content":"                    \"☹ OOPS!!! The task number you entered \"","lastModifiedDate":"2023-09-08"},{"lineNumber":249,"author":{"gitId":"adammangzijun"},"content":"                            + \"for deleting is not in the list.\");","lastModifiedDate":"2023-09-08"},{"lineNumber":250,"author":{"gitId":"adammangzijun"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":251,"author":{"gitId":"adammangzijun"},"content":"            return new ErrorCommand(\"☹ OOPS!!! The task number you entered \"","lastModifiedDate":"2023-09-08"},{"lineNumber":252,"author":{"gitId":"adammangzijun"},"content":"                    + \"for deleting is invalid. Please enter a number.\");","lastModifiedDate":"2023-09-08"},{"lineNumber":253,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":254,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-17"},{"lineNumber":255,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-17"},{"lineNumber":256,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-17"},{"lineNumber":257,"author":{"gitId":"adammangzijun"},"content":"     * Parses the user input to create a command to mark a task as done.","lastModifiedDate":"2023-09-17"},{"lineNumber":258,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-17"},{"lineNumber":259,"author":{"gitId":"adammangzijun"},"content":"     * @param userInput The full input string entered by the user.","lastModifiedDate":"2023-09-17"},{"lineNumber":260,"author":{"gitId":"adammangzijun"},"content":"     * @return A Command object to mark a task as done based on the task number.","lastModifiedDate":"2023-09-17"},{"lineNumber":261,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-17"},{"lineNumber":262,"author":{"gitId":"adammangzijun"},"content":"    public static Command parseMark(String userInput) {","lastModifiedDate":"2023-09-17"},{"lineNumber":263,"author":{"gitId":"adammangzijun"},"content":"        try {","lastModifiedDate":"2023-09-03"},{"lineNumber":264,"author":{"gitId":"adammangzijun"},"content":"            int taskNumber \u003d Integer.parseInt(userInput.split(\" \")[1]);","lastModifiedDate":"2023-09-17"},{"lineNumber":265,"author":{"gitId":"adammangzijun"},"content":"            return new MarkCommand(taskNumber);","lastModifiedDate":"2023-09-03"},{"lineNumber":266,"author":{"gitId":"adammangzijun"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":267,"author":{"gitId":"adammangzijun"},"content":"            return new ErrorCommand(","lastModifiedDate":"2023-09-08"},{"lineNumber":268,"author":{"gitId":"adammangzijun"},"content":"                    \"☹ OOPS!!! The task number you \"","lastModifiedDate":"2023-09-08"},{"lineNumber":269,"author":{"gitId":"adammangzijun"},"content":"                            + \"entered for marking is not in the list.\");","lastModifiedDate":"2023-09-08"},{"lineNumber":270,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":271,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-17"},{"lineNumber":272,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-17"},{"lineNumber":273,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-17"},{"lineNumber":274,"author":{"gitId":"adammangzijun"},"content":"     * Parses the user input to create a command to mark a task as undone.","lastModifiedDate":"2023-09-17"},{"lineNumber":275,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-17"},{"lineNumber":276,"author":{"gitId":"adammangzijun"},"content":"     * @param userInput The full input string entered by the user.","lastModifiedDate":"2023-09-17"},{"lineNumber":277,"author":{"gitId":"adammangzijun"},"content":"     * @return A Command object to mark a task as undone based on the task number.","lastModifiedDate":"2023-09-17"},{"lineNumber":278,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-17"},{"lineNumber":279,"author":{"gitId":"adammangzijun"},"content":"    public static Command parseUnmark(String userInput) {","lastModifiedDate":"2023-09-17"},{"lineNumber":280,"author":{"gitId":"adammangzijun"},"content":"        try {","lastModifiedDate":"2023-09-03"},{"lineNumber":281,"author":{"gitId":"adammangzijun"},"content":"            int taskNumber \u003d Integer.parseInt(userInput.split(\" \")[1]);","lastModifiedDate":"2023-09-17"},{"lineNumber":282,"author":{"gitId":"adammangzijun"},"content":"            return new UnmarkCommand(taskNumber);","lastModifiedDate":"2023-09-03"},{"lineNumber":283,"author":{"gitId":"adammangzijun"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":284,"author":{"gitId":"adammangzijun"},"content":"            return new ErrorCommand(","lastModifiedDate":"2023-09-08"},{"lineNumber":285,"author":{"gitId":"adammangzijun"},"content":"                    \"☹ OOPS!!! The task number you \"","lastModifiedDate":"2023-09-08"},{"lineNumber":286,"author":{"gitId":"adammangzijun"},"content":"                            + \"entered for marking is not in the list.\");","lastModifiedDate":"2023-09-08"},{"lineNumber":287,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":288,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":289,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-17"},{"lineNumber":290,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-19"},{"lineNumber":291,"author":{"gitId":"adammangzijun"},"content":"     * Parses the user input to create a command to find tasks that match a keyword.","lastModifiedDate":"2023-09-17"},{"lineNumber":292,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-19"},{"lineNumber":293,"author":{"gitId":"adammangzijun"},"content":"     * @param userInput The full input string entered by the user.","lastModifiedDate":"2023-09-19"},{"lineNumber":294,"author":{"gitId":"adammangzijun"},"content":"     * @return A Command object to find tasks that contain the keyword.","lastModifiedDate":"2023-09-17"},{"lineNumber":295,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-19"},{"lineNumber":296,"author":{"gitId":"adammangzijun"},"content":"    public static Command parseFind(String userInput) {","lastModifiedDate":"2023-09-17"},{"lineNumber":297,"author":{"gitId":"adammangzijun"},"content":"        try {","lastModifiedDate":"2023-09-19"},{"lineNumber":298,"author":{"gitId":"adammangzijun"},"content":"            String keyWord \u003d userInput.split(\" \", 2)[1];","lastModifiedDate":"2023-09-17"},{"lineNumber":299,"author":{"gitId":"adammangzijun"},"content":"            return new FindCommand(keyWord);","lastModifiedDate":"2023-09-09"},{"lineNumber":300,"author":{"gitId":"adammangzijun"},"content":"        } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-09-19"},{"lineNumber":301,"author":{"gitId":"adammangzijun"},"content":"            return new ErrorCommand(\"☹ OOPS!!! You did not specify \"","lastModifiedDate":"2023-09-17"},{"lineNumber":302,"author":{"gitId":"adammangzijun"},"content":"                    + \"your key word you are finding for.\");","lastModifiedDate":"2023-09-17"},{"lineNumber":303,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":304,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-19"},{"lineNumber":305,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-19"},{"lineNumber":306,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"adammangzijun":306}},{"path":"src/main/java/duke/storage/Storage.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke.storage;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-09-22"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import java.io.BufferedWriter;","lastModifiedDate":"2023-09-22"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-09-22"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-09-22"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-22"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-09-03"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"import java.nio.file.Paths;","lastModifiedDate":"2023-09-03"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-03"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-09-14"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"import duke.task.Event;","lastModifiedDate":"2023-09-14"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-14"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-09-14"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":" * Responsible for reading from and writing to the","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":" * file that stores the list of tasks in the String format.","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"public class Storage {","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"    private String filepath;","lastModifiedDate":"2023-09-03"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"    private Path path;","lastModifiedDate":"2023-09-03"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"     * Constructs a new Storage instance with a specified file path.","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"     * @param filepath The path to the file that stores the list of tasks in the String format.","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"    public Storage(String filepath) {","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"        assert filepath !\u003d \"\"; // Check that filepath entered is not empty string.","lastModifiedDate":"2023-09-17"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"        this.filepath \u003d filepath;","lastModifiedDate":"2023-09-03"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"        this.path \u003d Paths.get(this.filepath);","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"     * Ensures that the necessary directories and file used for storage exist.","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"     * If the directory or file does not exist, it creates them.","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"    public void createFileIfNotExists() {","lastModifiedDate":"2023-09-03"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"        Path directoryPath \u003d this.path.getParent();","lastModifiedDate":"2023-09-03"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"        if (!Files.exists(directoryPath)) {","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"            try {","lastModifiedDate":"2023-09-03"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"                Files.createDirectories(directoryPath);","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"                e.printStackTrace();","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"            }","lastModifiedDate":"2023-09-03"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"        if (!Files.exists(this.path)) {","lastModifiedDate":"2023-09-03"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"            try {","lastModifiedDate":"2023-09-03"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"                Files.createFile(this.path);","lastModifiedDate":"2023-09-03"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"                System.out.println(\"file created\");","lastModifiedDate":"2023-09-03"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"                e.printStackTrace();","lastModifiedDate":"2023-09-03"},{"lineNumber":59,"author":{"gitId":"adammangzijun"},"content":"            }","lastModifiedDate":"2023-09-03"},{"lineNumber":60,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":63,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":64,"author":{"gitId":"adammangzijun"},"content":"     * Writes the current list of tasks to the file right before the program ends.","lastModifiedDate":"2023-09-08"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"     * @param tasks The current list of tasks right before the program ends.","lastModifiedDate":"2023-09-08"},{"lineNumber":67,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":68,"author":{"gitId":"adammangzijun"},"content":"    public void saveTasksToFile(TaskList tasks) {","lastModifiedDate":"2023-09-03"},{"lineNumber":69,"author":{"gitId":"adammangzijun"},"content":"        try (BufferedWriter writer \u003d new BufferedWriter(new FileWriter(this.path.toFile()))) {","lastModifiedDate":"2023-09-03"},{"lineNumber":70,"author":{"gitId":"adammangzijun"},"content":"            for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-09-03"},{"lineNumber":71,"author":{"gitId":"adammangzijun"},"content":"                int currentNumber \u003d i + 1;","lastModifiedDate":"2023-09-03"},{"lineNumber":72,"author":{"gitId":"adammangzijun"},"content":"                writer.write(tasks.get(currentNumber).toString() + \"\\n\");","lastModifiedDate":"2023-09-03"},{"lineNumber":73,"author":{"gitId":"adammangzijun"},"content":"            }","lastModifiedDate":"2023-09-03"},{"lineNumber":74,"author":{"gitId":"adammangzijun"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":75,"author":{"gitId":"adammangzijun"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-03"},{"lineNumber":76,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":77,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":78,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-03"},{"lineNumber":80,"author":{"gitId":"adammangzijun"},"content":"     * Reads the list of tasks from the file in the String format","lastModifiedDate":"2023-09-08"},{"lineNumber":81,"author":{"gitId":"adammangzijun"},"content":"     * and returns it as an ArrayList of Task objects.","lastModifiedDate":"2023-09-08"},{"lineNumber":82,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-03"},{"lineNumber":83,"author":{"gitId":"adammangzijun"},"content":"     * @return The list of tasks read from the file.","lastModifiedDate":"2023-09-08"},{"lineNumber":84,"author":{"gitId":"adammangzijun"},"content":"     * @throws IOException If an I/O error occurs while reading from the file.","lastModifiedDate":"2023-09-08"},{"lineNumber":85,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-03"},{"lineNumber":86,"author":{"gitId":"adammangzijun"},"content":"    public ArrayList\u003cTask\u003e loadTasksFromFile() throws IOException {","lastModifiedDate":"2023-09-03"},{"lineNumber":87,"author":{"gitId":"adammangzijun"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-03"},{"lineNumber":88,"author":{"gitId":"adammangzijun"},"content":"        try (BufferedReader reader \u003d new BufferedReader(new FileReader(this.path.toFile()))) {","lastModifiedDate":"2023-09-03"},{"lineNumber":89,"author":{"gitId":"adammangzijun"},"content":"            String line;","lastModifiedDate":"2023-09-03"},{"lineNumber":90,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":91,"author":{"gitId":"adammangzijun"},"content":"            while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2023-09-03"},{"lineNumber":92,"author":{"gitId":"adammangzijun"},"content":"                String taskType \u003d line.substring(line.indexOf(\"[\") + 1, line.indexOf(\"]\"));","lastModifiedDate":"2023-09-03"},{"lineNumber":93,"author":{"gitId":"adammangzijun"},"content":"                // Convert String back to Task object","lastModifiedDate":"2023-09-03"},{"lineNumber":94,"author":{"gitId":"adammangzijun"},"content":"                if (taskType.equals(\"T\")) {","lastModifiedDate":"2023-09-03"},{"lineNumber":95,"author":{"gitId":"adammangzijun"},"content":"                    tasks.add(ToDo.parseFromString(line));","lastModifiedDate":"2023-09-03"},{"lineNumber":96,"author":{"gitId":"adammangzijun"},"content":"                } else if (taskType.equals(\"D\")) {","lastModifiedDate":"2023-09-03"},{"lineNumber":97,"author":{"gitId":"adammangzijun"},"content":"                    tasks.add(Deadline.parseFromString(line));","lastModifiedDate":"2023-09-03"},{"lineNumber":98,"author":{"gitId":"adammangzijun"},"content":"                } else {","lastModifiedDate":"2023-09-03"},{"lineNumber":99,"author":{"gitId":"adammangzijun"},"content":"                    tasks.add(Event.parseFromString(line));","lastModifiedDate":"2023-09-03"},{"lineNumber":100,"author":{"gitId":"adammangzijun"},"content":"                }","lastModifiedDate":"2023-09-03"},{"lineNumber":101,"author":{"gitId":"adammangzijun"},"content":"            }","lastModifiedDate":"2023-09-03"},{"lineNumber":102,"author":{"gitId":"adammangzijun"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-03"},{"lineNumber":103,"author":{"gitId":"adammangzijun"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-03"},{"lineNumber":104,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":105,"author":{"gitId":"adammangzijun"},"content":"        return tasks;","lastModifiedDate":"2023-09-03"},{"lineNumber":106,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":107,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"adammangzijun":107}},{"path":"src/main/java/duke/task/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke.task;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"import java.util.List;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":" * Represents a \"Deadline\" task, which extends the abstract Task class.","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":" * A \"Deadline\" task is a task with a description","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":" * and a due date by which the task should be completed.","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"    // A List containing possible formats of date and time.","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"    private static final List\u003cString\u003e DATE_STRING_FORMATS \u003d Arrays.asList(","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"            \"yyyy-MM-dd HH:mm\",","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"            \"dd/MM/yyyy HH:mm\",","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"            \"MM-dd-yyyy HH:mm\"","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"            // Add other formats here","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"    );","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"    private String dueDate;","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"     * Constructs a Deadline instance with a specified task name and due date,","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"     * automatically setting its task type to DEADLINE.","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"     * @param taskName The name or description of the Deadline task.","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"     * @param dueDate The due date for the Deadline task represented as a String.","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"    public Deadline(String taskName, String dueDate) {","lastModifiedDate":"2023-08-24"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"        super(taskName, TaskType.DEADLINE);","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"        this.dueDate \u003d dueDate;","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"     * Returns a string representation of the Deadline task,","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"     * which includes its task type represented as \"[D]\"","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"     * followed by its status (done or not done), its name, and its due date.","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"     * @return A string representing the Deadline task.","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + dueDate + \")\";","lastModifiedDate":"2023-08-24"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"     * Parses a string representation of a Deadline task back into a Deadline object.","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"     * It reads the task\u0027s description, completion status,","lastModifiedDate":"2023-09-08"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"     * and due date from the given line of string and creates a corresponding Deadline object.","lastModifiedDate":"2023-09-08"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"     * It also handles dates formatted in different styles","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"     * by trying to parse the date in various formats.","lastModifiedDate":"2023-09-08"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"     * @param line The string representation of the Deadline task, typically read from a data file.","lastModifiedDate":"2023-09-08"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"     * @return A Deadline object that corresponds to the data in the given line of string.","lastModifiedDate":"2023-09-08"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"    public static Deadline parseFromString(String line) {","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"adammangzijun"},"content":"        int firstBracketIndex \u003d line.indexOf(\u0027]\u0027);","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"adammangzijun"},"content":"        String description \u003d line.substring(firstBracketIndex + 5).split(\" \\\\(by: \")[0];","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"        String dateInput \u003d line.split(\"\\\\(by: |\\\\)\")[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"        String dueDate \u003d null;","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"adammangzijun"},"content":"        // Try parsing with different formats","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"        for (String formatString : DATE_STRING_FORMATS) {","lastModifiedDate":"2023-09-08"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"            try {","lastModifiedDate":"2023-09-02"},{"lineNumber":67,"author":{"gitId":"adammangzijun"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(formatString);","lastModifiedDate":"2023-09-02"},{"lineNumber":68,"author":{"gitId":"adammangzijun"},"content":"                LocalDateTime dateTime \u003d LocalDateTime.parse(dateInput, formatter);","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"adammangzijun"},"content":"                dueDate \u003d dateTime.format(formatter);","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"adammangzijun"},"content":"                break; // Stop at the first successful parse","lastModifiedDate":"2023-09-02"},{"lineNumber":71,"author":{"gitId":"adammangzijun"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"adammangzijun"},"content":"                // Ignore the exception and try the next format","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"adammangzijun"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":74,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":75,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":76,"author":{"gitId":"adammangzijun"},"content":"        String mark \u003d line.substring(firstBracketIndex + 2, firstBracketIndex + 3);","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"adammangzijun"},"content":"        Deadline task \u003d new Deadline(description, dueDate);","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"        // if task is initially marked done, then mark the task as done","lastModifiedDate":"2023-09-01"},{"lineNumber":80,"author":{"gitId":"adammangzijun"},"content":"        if (mark.equals(\"X\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"adammangzijun"},"content":"            task.markDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":84,"author":{"gitId":"adammangzijun"},"content":"        return task;","lastModifiedDate":"2023-09-01"},{"lineNumber":85,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":86,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":87,"author":{"gitId":"adammangzijun"},"content":"    public void updateDueDate(String newDueDate) {","lastModifiedDate":"2023-09-19"},{"lineNumber":88,"author":{"gitId":"adammangzijun"},"content":"        this.dueDate \u003d newDueDate;","lastModifiedDate":"2023-09-19"},{"lineNumber":89,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-19"},{"lineNumber":90,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":91,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"adammangzijun":91}},{"path":"src/main/java/duke/task/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke.task;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"import java.util.List;","lastModifiedDate":"2023-09-02"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":" * Represents an \"Event\" task, which extends the abstract Task class.","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":" * An \"Event\" task is a task with a description, a start date,","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":" * and a due date by which the task should be completed.","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"    // A List containing possible formats of date and time.","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"    private static final List\u003cString\u003e DATE_STRING_FORMATS \u003d Arrays.asList(","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"            \"yyyy-MM-dd HH:mm\",","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"            \"dd/MM/yyyy HH:mm\",","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"            \"MM-dd-yyyy HH:mm\"","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"            // Add other formats here","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"    );","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"    private String startDate;","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"    private String dueDate;","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"     * Constructs an Event instance with a specified task name, start date,","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"     * and due date, automatically setting its task type to EVENT.","lastModifiedDate":"2023-09-08"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"     * @param taskName The name or description of the Event task.","lastModifiedDate":"2023-09-08"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"     * @param startDate The start date for the Event task.","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"     * @param dueDate The due date for the Event task represented as a String.","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"    public Event(String taskName, String startDate, String dueDate) {","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"        super(taskName, TaskType.EVENT);","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2023-08-24"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"        this.dueDate \u003d dueDate;","lastModifiedDate":"2023-08-24"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"     * Returns a string representation of the Event task, which includes","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"     * its task type represented as \"[E]\"","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"     * followed by its status (done or not done), its name, its start date and its due date.","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"     * @return A string representing the Event task.","lastModifiedDate":"2023-09-08"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + startDate + \" to: \" + dueDate + \")\";","lastModifiedDate":"2023-08-24"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"     * Parses a string representation of an Event task back into an Event object.","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"     * It reads the task\u0027s description, completion status, start date","lastModifiedDate":"2023-09-08"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"     * and due date from the given line of string and creates a corresponding Event object.","lastModifiedDate":"2023-09-08"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"     * It also handles dates formatted in different styles","lastModifiedDate":"2023-09-08"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"     * by trying to parse the date in various formats.","lastModifiedDate":"2023-09-08"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"     * @param line The string representation of the Event task, typically read from a data file.","lastModifiedDate":"2023-09-08"},{"lineNumber":59,"author":{"gitId":"adammangzijun"},"content":"     * @return An Event object that corresponds to the data in the given line of string.","lastModifiedDate":"2023-09-08"},{"lineNumber":60,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"    public static Event parseFromString(String line) {","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"        int firstBracketIndex \u003d line.indexOf(\u0027]\u0027);","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"adammangzijun"},"content":"        String description \u003d line.substring(firstBracketIndex + 5).split(\" \\\\(from: | to: \")[0];","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"adammangzijun"},"content":"        String startDateInput \u003d line.split(\" \\\\(from: | to: |\\\\) \")[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"        String dueDateInput \u003d line.split(\" \\\\(from: | to: |\\\\)\")[2];","lastModifiedDate":"2023-09-02"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"        String startDateString \u003d null;","lastModifiedDate":"2023-09-08"},{"lineNumber":67,"author":{"gitId":"adammangzijun"},"content":"        String dueDateString \u003d null;","lastModifiedDate":"2023-09-08"},{"lineNumber":68,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":69,"author":{"gitId":"adammangzijun"},"content":"        // Try parsing with different formats for starting date and time input.","lastModifiedDate":"2023-09-02"},{"lineNumber":70,"author":{"gitId":"adammangzijun"},"content":"        for (String formatString : DATE_STRING_FORMATS) {","lastModifiedDate":"2023-09-08"},{"lineNumber":71,"author":{"gitId":"adammangzijun"},"content":"            try {","lastModifiedDate":"2023-09-02"},{"lineNumber":72,"author":{"gitId":"adammangzijun"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(formatString);","lastModifiedDate":"2023-09-02"},{"lineNumber":73,"author":{"gitId":"adammangzijun"},"content":"                LocalDateTime startDate \u003d LocalDateTime.parse(startDateInput, formatter);","lastModifiedDate":"2023-09-08"},{"lineNumber":74,"author":{"gitId":"adammangzijun"},"content":"                startDateString \u003d startDate.format(formatter);","lastModifiedDate":"2023-09-08"},{"lineNumber":75,"author":{"gitId":"adammangzijun"},"content":"                break; // Stop at the first successful parse","lastModifiedDate":"2023-09-02"},{"lineNumber":76,"author":{"gitId":"adammangzijun"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":77,"author":{"gitId":"adammangzijun"},"content":"                // Ignore the exception and try the next format","lastModifiedDate":"2023-09-02"},{"lineNumber":78,"author":{"gitId":"adammangzijun"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":80,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":81,"author":{"gitId":"adammangzijun"},"content":"        // Try parsing with different formats for due date and time input.","lastModifiedDate":"2023-09-02"},{"lineNumber":82,"author":{"gitId":"adammangzijun"},"content":"        for (String formatString : DATE_STRING_FORMATS) {","lastModifiedDate":"2023-09-08"},{"lineNumber":83,"author":{"gitId":"adammangzijun"},"content":"            try {","lastModifiedDate":"2023-09-02"},{"lineNumber":84,"author":{"gitId":"adammangzijun"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(formatString);","lastModifiedDate":"2023-09-02"},{"lineNumber":85,"author":{"gitId":"adammangzijun"},"content":"                LocalDateTime dueDate \u003d LocalDateTime.parse(dueDateInput, formatter);","lastModifiedDate":"2023-09-08"},{"lineNumber":86,"author":{"gitId":"adammangzijun"},"content":"                dueDateString \u003d dueDate.format(formatter);","lastModifiedDate":"2023-09-08"},{"lineNumber":87,"author":{"gitId":"adammangzijun"},"content":"                break; // Stop at the first successful parse","lastModifiedDate":"2023-09-02"},{"lineNumber":88,"author":{"gitId":"adammangzijun"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":89,"author":{"gitId":"adammangzijun"},"content":"                // Ignore the exception and try the next format","lastModifiedDate":"2023-09-02"},{"lineNumber":90,"author":{"gitId":"adammangzijun"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":91,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":92,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":93,"author":{"gitId":"adammangzijun"},"content":"        String mark \u003d line.substring(firstBracketIndex + 2, firstBracketIndex + 3);","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"adammangzijun"},"content":"        Event task \u003d new Event(description, startDateString, dueDateString);","lastModifiedDate":"2023-09-08"},{"lineNumber":95,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":96,"author":{"gitId":"adammangzijun"},"content":"        // if task is initially marked done, then mark the task as done","lastModifiedDate":"2023-09-01"},{"lineNumber":97,"author":{"gitId":"adammangzijun"},"content":"        if (mark.equals(\"X\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":98,"author":{"gitId":"adammangzijun"},"content":"            task.markDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":99,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":100,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":101,"author":{"gitId":"adammangzijun"},"content":"        return task;","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":103,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":104,"author":{"gitId":"adammangzijun"},"content":"    public void updateStartDate(String newStartDate) {","lastModifiedDate":"2023-09-19"},{"lineNumber":105,"author":{"gitId":"adammangzijun"},"content":"        this.startDate \u003d newStartDate;","lastModifiedDate":"2023-09-19"},{"lineNumber":106,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-19"},{"lineNumber":107,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":108,"author":{"gitId":"adammangzijun"},"content":"    public void updateDueDate(String newDueDate) {","lastModifiedDate":"2023-09-19"},{"lineNumber":109,"author":{"gitId":"adammangzijun"},"content":"        this.dueDate \u003d newDueDate;","lastModifiedDate":"2023-09-19"},{"lineNumber":110,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-19"},{"lineNumber":111,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"adammangzijun":111}},{"path":"src/main/java/duke/task/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke.task;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":" * The enumeration of all possible task types: TODO, DEADLINE, and EVENT.","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"enum TaskType {","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"    TODO, DEADLINE, EVENT","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":" * Represents an abstract Task class with a type, name, and completion status.","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":" * The Task class serves as a template for different types","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":" * of tasks such as TODO, DEADLINE, and EVENT.","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"    private String taskName;","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"    private boolean isDone \u003d false;","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"    private TaskType taskType;","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"     * Constructs a Task object with a specified name and type of task.","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"     * @param taskName The name or description of the task.","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"     * @param taskType The type of the task, as defined in the TaskType enum.","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"    public Task(String taskName, TaskType taskType) {","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"     * Returns a string representation of the task, indicating its completion status and name.","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"     * @return A string representing the task, where a done task is represented with \"[X]\"","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"     *         and an undone task with \"[ ]\", followed by the task name.","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-09-08"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"        if (isDone) {","lastModifiedDate":"2023-08-24"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"            return \"[X] \" + taskName;","lastModifiedDate":"2023-08-24"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"        } else {","lastModifiedDate":"2023-08-24"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"            return \"[ ] \" + taskName;","lastModifiedDate":"2023-08-24"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"     * Marks the task as done by setting the isDone attribute to true.","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"    public void markDone() {","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"     * Marks the task as undone by setting the isDone attribute to false.","lastModifiedDate":"2023-09-08"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"    public void unmarkDone() {","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"adammangzijun"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"    public boolean findKeyWord(String keyWord) {","lastModifiedDate":"2023-09-09"},{"lineNumber":63,"author":{"gitId":"adammangzijun"},"content":"        return this.taskName.contains(keyWord);","lastModifiedDate":"2023-09-09"},{"lineNumber":64,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"    public void updateTaskName(String newName) {","lastModifiedDate":"2023-09-19"},{"lineNumber":67,"author":{"gitId":"adammangzijun"},"content":"        this.taskName \u003d newName;","lastModifiedDate":"2023-09-19"},{"lineNumber":68,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-19"},{"lineNumber":69,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"adammangzijun":69}},{"path":"src/main/java/duke/task/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke.task;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":" * Represents a \"ToDo\" task, extending the abstract Task class.","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":" * A \"ToDo\" task is a simple task with only a description and no time or date associated with it.","lastModifiedDate":"2023-09-08"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"public class ToDo extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"     * Constructs a ToDo instance with a specified task name,","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"     * automatically setting its task type to TODO.","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"     * @param taskName The name or description of the ToDo task.","lastModifiedDate":"2023-09-08"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"    public ToDo(String taskName) {","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"        super(taskName, TaskType.TODO);","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"     * Returns a string representation of the ToDo task,","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"     * which includes its task type represented as \"[T]\"","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"     * followed by its status (done or not done) and its name.","lastModifiedDate":"2023-09-08"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"     * @return A string representing the ToDo task.","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-24"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"     * Parses a string representation of a ToDo task back into a ToDo object.","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"     * It reads the task\u0027s description and completion status from the given string","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"     * and creates a corresponding ToDo object.","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"     * @param line The string representation of the ToDo task, typically read from a data file.","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"     * @return A ToDo object that corresponds to the data in the given line of String.","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"    public static ToDo parseFromString(String line) {","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"        int firstCloseBracketIndex \u003d line.indexOf(\u0027]\u0027);","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"        String description \u003d line.substring(firstCloseBracketIndex + 5);","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"        String marking \u003d line.substring(firstCloseBracketIndex + 2, firstCloseBracketIndex + 3);","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"        ToDo task \u003d new ToDo(description);","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"        // if task is initially marked done, then mark the task as done","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"        if (marking.equals(\"X\")) {","lastModifiedDate":"2023-09-08"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"            task.markDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"        return task;","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"adammangzijun":52}},{"path":"src/main/java/duke/tasklist/TaskList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke.tasklist;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import duke.task.Deadline;","lastModifiedDate":"2023-09-19"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import duke.task.Event;","lastModifiedDate":"2023-09-19"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":" * The TaskList class encapsulates a list of tasks.","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"public class TaskList {","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"    private ArrayList\u003cTask\u003e taskList;","lastModifiedDate":"2023-09-03"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"     * Constructs a TaskList object with a given list of tasks.","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"     * @param taskList An ArrayList of Task objects.","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"    public TaskList(ArrayList\u003cTask\u003e taskList) {","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"        this.taskList \u003d taskList;","lastModifiedDate":"2023-09-03"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"     * Constructs a TaskList object with an empty list of tasks.","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"    public TaskList() {","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"        this.taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"     * Adds a Task object to the taskList.","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"     * @param task The Task object being added to the taskList.","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"    public void add(Task task) {","lastModifiedDate":"2023-09-03"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"        this.taskList.add(task);","lastModifiedDate":"2023-09-03"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"     * Deletes a Task object from the taskList using its number.","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"     * @param taskNumber The number of the task to be deleted.","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"    public void delete(int taskNumber) {","lastModifiedDate":"2023-09-03"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"        // change number to index","lastModifiedDate":"2023-09-03"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"        int index \u003d taskNumber - 1;","lastModifiedDate":"2023-09-08"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"        this.taskList.remove(index);","lastModifiedDate":"2023-09-08"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"     * Retrieves the number of tasks in the tasklist.","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"     * @return The number of tasks in the tasklist.","lastModifiedDate":"2023-09-08"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"    public int size() {","lastModifiedDate":"2023-09-03"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"        return this.taskList.size();","lastModifiedDate":"2023-09-08"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":59,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":60,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"     * Retrieves a task from the tasklist using its number.","lastModifiedDate":"2023-09-08"},{"lineNumber":63,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":64,"author":{"gitId":"adammangzijun"},"content":"     * @param taskNumber The number of the task to be retrieved.","lastModifiedDate":"2023-09-08"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"     * @return The Task object at the specified position in the list.","lastModifiedDate":"2023-09-08"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":67,"author":{"gitId":"adammangzijun"},"content":"    public Task get(int taskNumber) {","lastModifiedDate":"2023-09-03"},{"lineNumber":68,"author":{"gitId":"adammangzijun"},"content":"        // change number to index","lastModifiedDate":"2023-09-08"},{"lineNumber":69,"author":{"gitId":"adammangzijun"},"content":"        int index \u003d taskNumber - 1;","lastModifiedDate":"2023-09-08"},{"lineNumber":70,"author":{"gitId":"adammangzijun"},"content":"        return this.taskList.get(index);","lastModifiedDate":"2023-09-08"},{"lineNumber":71,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":72,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":73,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-19"},{"lineNumber":74,"author":{"gitId":"adammangzijun"},"content":"     * Updates a specific field of a task in the task list with a new value.","lastModifiedDate":"2023-09-19"},{"lineNumber":75,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-19"},{"lineNumber":76,"author":{"gitId":"adammangzijun"},"content":"     * @param taskNum The number of the task in the task list to update","lastModifiedDate":"2023-09-19"},{"lineNumber":77,"author":{"gitId":"adammangzijun"},"content":"     * @param field the field of the task to update; should be one of \"taskDescription\", \"/by\", \"/from\", or \"/to\"","lastModifiedDate":"2023-09-19"},{"lineNumber":78,"author":{"gitId":"adammangzijun"},"content":"     * @param newValue the new value to set for the specified field","lastModifiedDate":"2023-09-19"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-19"},{"lineNumber":80,"author":{"gitId":"adammangzijun"},"content":"    public void updateTask(int taskNum, String field, String newValue) {","lastModifiedDate":"2023-09-19"},{"lineNumber":81,"author":{"gitId":"adammangzijun"},"content":"        Task task \u003d this.taskList.get(taskNum - 1);","lastModifiedDate":"2023-09-19"},{"lineNumber":82,"author":{"gitId":"adammangzijun"},"content":"        if (field.equals(\"taskDescription\")) {","lastModifiedDate":"2023-09-19"},{"lineNumber":83,"author":{"gitId":"adammangzijun"},"content":"            task.updateTaskName(newValue);","lastModifiedDate":"2023-09-19"},{"lineNumber":84,"author":{"gitId":"adammangzijun"},"content":"        } else if (field.equals(\"/by\")) {","lastModifiedDate":"2023-09-19"},{"lineNumber":85,"author":{"gitId":"adammangzijun"},"content":"            if (task instanceof Deadline) {","lastModifiedDate":"2023-09-19"},{"lineNumber":86,"author":{"gitId":"adammangzijun"},"content":"                Deadline deadline \u003d (Deadline) task;","lastModifiedDate":"2023-09-19"},{"lineNumber":87,"author":{"gitId":"adammangzijun"},"content":"                deadline.updateDueDate(newValue);","lastModifiedDate":"2023-09-19"},{"lineNumber":88,"author":{"gitId":"adammangzijun"},"content":"            }","lastModifiedDate":"2023-09-19"},{"lineNumber":89,"author":{"gitId":"adammangzijun"},"content":"        } else if (field.equals(\"/from\")) {","lastModifiedDate":"2023-09-19"},{"lineNumber":90,"author":{"gitId":"adammangzijun"},"content":"            if (task instanceof Event) {","lastModifiedDate":"2023-09-19"},{"lineNumber":91,"author":{"gitId":"adammangzijun"},"content":"                Event event \u003d (Event) task;","lastModifiedDate":"2023-09-19"},{"lineNumber":92,"author":{"gitId":"adammangzijun"},"content":"                event.updateStartDate(newValue);","lastModifiedDate":"2023-09-19"},{"lineNumber":93,"author":{"gitId":"adammangzijun"},"content":"            }","lastModifiedDate":"2023-09-19"},{"lineNumber":94,"author":{"gitId":"adammangzijun"},"content":"        } else if (field.equals(\"/to\")) {","lastModifiedDate":"2023-09-19"},{"lineNumber":95,"author":{"gitId":"adammangzijun"},"content":"            if (task instanceof Event) {","lastModifiedDate":"2023-09-19"},{"lineNumber":96,"author":{"gitId":"adammangzijun"},"content":"                Event event \u003d (Event) task;","lastModifiedDate":"2023-09-19"},{"lineNumber":97,"author":{"gitId":"adammangzijun"},"content":"                event.updateDueDate(newValue);","lastModifiedDate":"2023-09-19"},{"lineNumber":98,"author":{"gitId":"adammangzijun"},"content":"            }","lastModifiedDate":"2023-09-19"},{"lineNumber":99,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-19"},{"lineNumber":100,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-19"},{"lineNumber":101,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"adammangzijun":101}},{"path":"src/main/java/duke/ui/Ui.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke.ui;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-03"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"/**","lastModifiedDate":"2023-09-08"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":" * This class handles the User Interface part of the chatbot,","lastModifiedDate":"2023-09-08"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":" * managing user inputs and displaying outputs.","lastModifiedDate":"2023-09-08"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":" */","lastModifiedDate":"2023-09-08"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"public class Ui {","lastModifiedDate":"2023-09-03"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"    /** For spacing purposes */","lastModifiedDate":"2023-09-13"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"    private static final String SPACE \u003d \"------------------------------------\";","lastModifiedDate":"2023-09-13"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"    /** Scanner for user input */","lastModifiedDate":"2023-09-08"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"    private Scanner scanner;","lastModifiedDate":"2023-09-03"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-08"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"    /** Name of bot */","lastModifiedDate":"2023-09-08"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"    private String name \u003d \"Adam\u0027s Bot\";","lastModifiedDate":"2023-09-08"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"     * Constructs a Ui object which initializes a Scanner object to read user inputs.","lastModifiedDate":"2023-09-08"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"    public Ui() {","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"        this.scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-09-03"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"     * Reads a command input from the user.","lastModifiedDate":"2023-09-08"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"     * @return The trimmed user input.","lastModifiedDate":"2023-09-08"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"    public String readCommand() {","lastModifiedDate":"2023-09-03"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"        // remove trailing spaces and get use input","lastModifiedDate":"2023-09-08"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"        return scanner.nextLine().trim();","lastModifiedDate":"2023-09-08"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"     * Displays an error message to the user.","lastModifiedDate":"2023-09-08"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"     * @param errorMessage The error message to be displayed.","lastModifiedDate":"2023-09-08"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"    public String showError(String errorMessage) {","lastModifiedDate":"2023-09-14"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(SPACE);","lastModifiedDate":"2023-09-03"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(errorMessage);","lastModifiedDate":"2023-09-03"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(SPACE);","lastModifiedDate":"2023-09-03"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"        return errorMessage;","lastModifiedDate":"2023-09-14"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"     * Displays a welcome message to the user when they first run the program.","lastModifiedDate":"2023-09-08"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"    public String showWelcome() {","lastModifiedDate":"2023-09-14"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(SPACE);","lastModifiedDate":"2023-09-03"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(\"Hello! I\u0027m \" + this.name);","lastModifiedDate":"2023-09-08"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-09-03"},{"lineNumber":59,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(SPACE);","lastModifiedDate":"2023-09-03"},{"lineNumber":60,"author":{"gitId":"adammangzijun"},"content":"        return \"Hello! I\u0027m \" + this.name + \"\\nWhat can I do for you?\";","lastModifiedDate":"2023-09-14"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":63,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":64,"author":{"gitId":"adammangzijun"},"content":"     * Displays a goodbye message to the user when they exit the program with the command \"bye\".","lastModifiedDate":"2023-09-08"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"    public String showGoodbye() {","lastModifiedDate":"2023-09-14"},{"lineNumber":67,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(SPACE);","lastModifiedDate":"2023-09-03"},{"lineNumber":68,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-09-03"},{"lineNumber":69,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(SPACE);","lastModifiedDate":"2023-09-03"},{"lineNumber":70,"author":{"gitId":"adammangzijun"},"content":"        return \"Bye. Hope to see you again soon!\";","lastModifiedDate":"2023-09-14"},{"lineNumber":71,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":72,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":73,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":74,"author":{"gitId":"adammangzijun"},"content":"     * Displays a list of tasks to the user when they enter the command \"list\".","lastModifiedDate":"2023-09-08"},{"lineNumber":75,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":76,"author":{"gitId":"adammangzijun"},"content":"     * @param taskList The list of tasks to be displayed.","lastModifiedDate":"2023-09-08"},{"lineNumber":77,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":78,"author":{"gitId":"adammangzijun"},"content":"    public String showTaskList(TaskList taskList) {","lastModifiedDate":"2023-09-14"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"        String result \u003d \"\";","lastModifiedDate":"2023-09-14"},{"lineNumber":80,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(SPACE);","lastModifiedDate":"2023-09-03"},{"lineNumber":81,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":82,"author":{"gitId":"adammangzijun"},"content":"        // iterate through ArrayList to print tasks","lastModifiedDate":"2023-09-03"},{"lineNumber":83,"author":{"gitId":"adammangzijun"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2023-09-03"},{"lineNumber":84,"author":{"gitId":"adammangzijun"},"content":"            int currentNumber \u003d i + 1;","lastModifiedDate":"2023-09-03"},{"lineNumber":85,"author":{"gitId":"adammangzijun"},"content":"            System.out.println(currentNumber + \". \" + taskList.get(currentNumber).toString());","lastModifiedDate":"2023-09-03"},{"lineNumber":86,"author":{"gitId":"adammangzijun"},"content":"            result \u003d result + currentNumber + \". \" + taskList.get(currentNumber).toString() + \"\\n\";","lastModifiedDate":"2023-09-14"},{"lineNumber":87,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-03"},{"lineNumber":88,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(SPACE);","lastModifiedDate":"2023-09-03"},{"lineNumber":89,"author":{"gitId":"adammangzijun"},"content":"        return result;","lastModifiedDate":"2023-09-14"},{"lineNumber":90,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":91,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":92,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":93,"author":{"gitId":"adammangzijun"},"content":"     * Displays the task to the user that was marked done.","lastModifiedDate":"2023-09-08"},{"lineNumber":94,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":95,"author":{"gitId":"adammangzijun"},"content":"     * @param task The task to be displayed after being marked done.","lastModifiedDate":"2023-09-08"},{"lineNumber":96,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":97,"author":{"gitId":"adammangzijun"},"content":"    public String showMarkText(Task task) {","lastModifiedDate":"2023-09-14"},{"lineNumber":98,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(SPACE);","lastModifiedDate":"2023-09-03"},{"lineNumber":99,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-09-03"},{"lineNumber":100,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(\"  \" + task.toString());","lastModifiedDate":"2023-09-03"},{"lineNumber":101,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(SPACE);","lastModifiedDate":"2023-09-03"},{"lineNumber":102,"author":{"gitId":"adammangzijun"},"content":"        return \"Nice! I\u0027ve marked this task as done:\\n\" + \"  \" + task.toString();","lastModifiedDate":"2023-09-14"},{"lineNumber":103,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":104,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":105,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":106,"author":{"gitId":"adammangzijun"},"content":"     * Displays the task to the user that was marked undone.","lastModifiedDate":"2023-09-08"},{"lineNumber":107,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":108,"author":{"gitId":"adammangzijun"},"content":"     * @param task The task to be displayed after being marked undone.","lastModifiedDate":"2023-09-08"},{"lineNumber":109,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":110,"author":{"gitId":"adammangzijun"},"content":"    public String showUnmarkText(Task task) {","lastModifiedDate":"2023-09-14"},{"lineNumber":111,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(SPACE);","lastModifiedDate":"2023-09-03"},{"lineNumber":112,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(\"Nice! I\u0027ve marked this task as undone:\");","lastModifiedDate":"2023-09-03"},{"lineNumber":113,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(\"  \" + task.toString());","lastModifiedDate":"2023-09-03"},{"lineNumber":114,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(SPACE);","lastModifiedDate":"2023-09-03"},{"lineNumber":115,"author":{"gitId":"adammangzijun"},"content":"        return \"Nice! I\u0027ve marked this task as undone:\\n\" + \"  \" + task.toString();","lastModifiedDate":"2023-09-14"},{"lineNumber":116,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":117,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":118,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":119,"author":{"gitId":"adammangzijun"},"content":"     * Displays the task that has been added and the size of the list after that addition.","lastModifiedDate":"2023-09-08"},{"lineNumber":120,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":121,"author":{"gitId":"adammangzijun"},"content":"     * @param task The task to be added into the list.","lastModifiedDate":"2023-09-08"},{"lineNumber":122,"author":{"gitId":"adammangzijun"},"content":"     * @param size The current size of the task list after adding the task into the list.","lastModifiedDate":"2023-09-08"},{"lineNumber":123,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":124,"author":{"gitId":"adammangzijun"},"content":"    public String showAddText(Task task, int size) {","lastModifiedDate":"2023-09-14"},{"lineNumber":125,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(SPACE);","lastModifiedDate":"2023-09-03"},{"lineNumber":126,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-09-03"},{"lineNumber":127,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(\"  \" + task.toString());","lastModifiedDate":"2023-09-03"},{"lineNumber":128,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(\"Now you have \" + size + \" tasks in the list.\");","lastModifiedDate":"2023-09-03"},{"lineNumber":129,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(SPACE);","lastModifiedDate":"2023-09-03"},{"lineNumber":130,"author":{"gitId":"adammangzijun"},"content":"        return \"Got it. I\u0027ve added this task:\\n\" + \"  \" + task.toString()","lastModifiedDate":"2023-09-14"},{"lineNumber":131,"author":{"gitId":"adammangzijun"},"content":"                + \"\\nNow you have \" + size + \" tasks in the list.\";","lastModifiedDate":"2023-09-14"},{"lineNumber":132,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":133,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"},{"lineNumber":134,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-08"},{"lineNumber":135,"author":{"gitId":"adammangzijun"},"content":"     * Displays the task that has been deleted and the size of the list after that deletion.","lastModifiedDate":"2023-09-08"},{"lineNumber":136,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-08"},{"lineNumber":137,"author":{"gitId":"adammangzijun"},"content":"     * @param task The task to be deleted from the list.","lastModifiedDate":"2023-09-08"},{"lineNumber":138,"author":{"gitId":"adammangzijun"},"content":"     * @param size The current size of the task list after deleting the task from the list.","lastModifiedDate":"2023-09-08"},{"lineNumber":139,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-08"},{"lineNumber":140,"author":{"gitId":"adammangzijun"},"content":"    public String showDeleteText(Task task, int size) {","lastModifiedDate":"2023-09-14"},{"lineNumber":141,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(SPACE);","lastModifiedDate":"2023-09-03"},{"lineNumber":142,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-09-03"},{"lineNumber":143,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(\"  \" + task.toString());","lastModifiedDate":"2023-09-03"},{"lineNumber":144,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(\"Now you have \" + size + \" tasks in the list.\");","lastModifiedDate":"2023-09-03"},{"lineNumber":145,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(SPACE);","lastModifiedDate":"2023-09-03"},{"lineNumber":146,"author":{"gitId":"adammangzijun"},"content":"        return \"Noted. I\u0027ve removed this task:\\n\" + \"  \" + task.toString()","lastModifiedDate":"2023-09-14"},{"lineNumber":147,"author":{"gitId":"adammangzijun"},"content":"                + \"\\nNow you have \" + size + \" tasks in the list.\";","lastModifiedDate":"2023-09-14"},{"lineNumber":148,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-03"},{"lineNumber":149,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":150,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-09"},{"lineNumber":151,"author":{"gitId":"adammangzijun"},"content":"     * Displays the tasks within the taskList that contains the key word.","lastModifiedDate":"2023-09-09"},{"lineNumber":152,"author":{"gitId":"adammangzijun"},"content":"     * If there isn\u0027t any task that contains the key word, display an error message.","lastModifiedDate":"2023-09-09"},{"lineNumber":153,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-09"},{"lineNumber":154,"author":{"gitId":"adammangzijun"},"content":"     * @param tasks The task list we are finding the key word from.","lastModifiedDate":"2023-09-09"},{"lineNumber":155,"author":{"gitId":"adammangzijun"},"content":"     * @param keyWord The key word that we are searching for in the task list.","lastModifiedDate":"2023-09-09"},{"lineNumber":156,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-09"},{"lineNumber":157,"author":{"gitId":"adammangzijun"},"content":"    public String showFindText(TaskList tasks, String keyWord) {","lastModifiedDate":"2023-09-14"},{"lineNumber":158,"author":{"gitId":"adammangzijun"},"content":"        boolean isKeyWordFound \u003d false;","lastModifiedDate":"2023-09-09"},{"lineNumber":159,"author":{"gitId":"adammangzijun"},"content":"        int counter \u003d 1;","lastModifiedDate":"2023-09-09"},{"lineNumber":160,"author":{"gitId":"adammangzijun"},"content":"        String result \u003d \"\";","lastModifiedDate":"2023-09-14"},{"lineNumber":161,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(SPACE);","lastModifiedDate":"2023-09-09"},{"lineNumber":162,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":163,"author":{"gitId":"adammangzijun"},"content":"        // iterate through taskList to check if they contain the keyWord. If yes, print them.","lastModifiedDate":"2023-09-09"},{"lineNumber":164,"author":{"gitId":"adammangzijun"},"content":"        for (int i \u003d 0; i \u003c tasks.size(); i++) {","lastModifiedDate":"2023-09-09"},{"lineNumber":165,"author":{"gitId":"adammangzijun"},"content":"            int currentNumber \u003d i + 1;","lastModifiedDate":"2023-09-09"},{"lineNumber":166,"author":{"gitId":"adammangzijun"},"content":"            Task task \u003d tasks.get(currentNumber);","lastModifiedDate":"2023-09-09"},{"lineNumber":167,"author":{"gitId":"adammangzijun"},"content":"            assert task !\u003d null; // Check task is not null.","lastModifiedDate":"2023-09-17"},{"lineNumber":168,"author":{"gitId":"adammangzijun"},"content":"            boolean hasKeyWord \u003d task.findKeyWord(keyWord);","lastModifiedDate":"2023-09-09"},{"lineNumber":169,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":170,"author":{"gitId":"adammangzijun"},"content":"            if (hasKeyWord) {","lastModifiedDate":"2023-09-09"},{"lineNumber":171,"author":{"gitId":"adammangzijun"},"content":"                isKeyWordFound \u003d true;","lastModifiedDate":"2023-09-09"},{"lineNumber":172,"author":{"gitId":"adammangzijun"},"content":"                System.out.println(counter + \". \" + task.toString());","lastModifiedDate":"2023-09-09"},{"lineNumber":173,"author":{"gitId":"adammangzijun"},"content":"                result \u003d result + counter + \". \" + task.toString() + \"\\n\";","lastModifiedDate":"2023-09-14"},{"lineNumber":174,"author":{"gitId":"adammangzijun"},"content":"                counter \u003d counter + 1;","lastModifiedDate":"2023-09-09"},{"lineNumber":175,"author":{"gitId":"adammangzijun"},"content":"            }","lastModifiedDate":"2023-09-09"},{"lineNumber":176,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":177,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-09"},{"lineNumber":178,"author":{"gitId":"adammangzijun"},"content":"        if (!isKeyWordFound) {","lastModifiedDate":"2023-09-09"},{"lineNumber":179,"author":{"gitId":"adammangzijun"},"content":"            System.out.println(\"☹ OOPS!!! The key word you are finding for is not present.\");","lastModifiedDate":"2023-09-09"},{"lineNumber":180,"author":{"gitId":"adammangzijun"},"content":"            return \"☹ OOPS!!! The key word you are finding for is not present.\";","lastModifiedDate":"2023-09-14"},{"lineNumber":181,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-09"},{"lineNumber":182,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(SPACE);","lastModifiedDate":"2023-09-09"},{"lineNumber":183,"author":{"gitId":"adammangzijun"},"content":"        return result;","lastModifiedDate":"2023-09-14"},{"lineNumber":184,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-09"},{"lineNumber":185,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-19"},{"lineNumber":186,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-22"},{"lineNumber":187,"author":{"gitId":"adammangzijun"},"content":"     * Displays the updated task to the user after a modification has been made.","lastModifiedDate":"2023-09-22"},{"lineNumber":188,"author":{"gitId":"adammangzijun"},"content":"     * This method prints out the updated task from the task list by its task number.","lastModifiedDate":"2023-09-22"},{"lineNumber":189,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-22"},{"lineNumber":190,"author":{"gitId":"adammangzijun"},"content":"     * @param tasks      The TaskList object containing all tasks.","lastModifiedDate":"2023-09-22"},{"lineNumber":191,"author":{"gitId":"adammangzijun"},"content":"     * @param taskNumber The number of the task that has been updated.","lastModifiedDate":"2023-09-22"},{"lineNumber":192,"author":{"gitId":"adammangzijun"},"content":"     * @return A string summarizing the update action and displaying the updated task.","lastModifiedDate":"2023-09-22"},{"lineNumber":193,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-22"},{"lineNumber":194,"author":{"gitId":"adammangzijun"},"content":"    public String showUpdateText(TaskList tasks, int taskNumber) {","lastModifiedDate":"2023-09-19"},{"lineNumber":195,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(SPACE);","lastModifiedDate":"2023-09-19"},{"lineNumber":196,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(\"Noted. I\u0027ve updated task number\" + taskNumber + \".\\n\");","lastModifiedDate":"2023-09-19"},{"lineNumber":197,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(tasks.get(taskNumber).toString());","lastModifiedDate":"2023-09-19"},{"lineNumber":198,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(SPACE);","lastModifiedDate":"2023-09-19"},{"lineNumber":199,"author":{"gitId":"adammangzijun"},"content":"        return \"Noted. I\u0027ve updated this task.\\n\" + tasks.get(taskNumber).toString();","lastModifiedDate":"2023-09-19"},{"lineNumber":200,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-19"},{"lineNumber":201,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-09-03"},{"lineNumber":202,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-03"}],"authorContributionMap":{"adammangzijun":202}},{"path":"src/main/resources/view/DialogBox.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"\u003c?import javafx.geometry.Insets?\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"\u003c?import javafx.scene.control.Label?\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"\u003c?import javafx.scene.image.ImageView?\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"\u003c?import javafx.scene.layout.HBox?\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"\u003cfx:root alignment\u003d\"TOP_RIGHT\" maxHeight\u003d\"1.7976931348623157E308\" maxWidth\u003d\"1.7976931348623157E308\" prefWidth\u003d\"400.0\" type\u003d\"javafx.scene.layout.HBox\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\"\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"        \u003cLabel fx:id\u003d\"dialog\" styleClass\u003d\"dialog\" text\u003d\"Label\" wrapText\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"        \u003cImageView fx:id\u003d\"displayPicture\" fitHeight\u003d\"99.0\" fitWidth\u003d\"99.0\" pickOnBounds\u003d\"true\" preserveRatio\u003d\"true\" /\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"    \u003cpadding\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"        \u003cInsets bottom\u003d\"15.0\" left\u003d\"5.0\" right\u003d\"5.0\" top\u003d\"15.0\" /\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"    \u003c/padding\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"\u003c/fx:root\u003e","lastModifiedDate":"2023-09-14"}],"authorContributionMap":{"adammangzijun":16}},{"path":"src/main/resources/view/MainWindow.fxml","fileType":"fxml","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"\u003c?xml version\u003d\"1.0\" encoding\u003d\"UTF-8\"?\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"\u003c?import javafx.scene.control.Button?\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"\u003c?import javafx.scene.control.ScrollPane?\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"\u003c?import javafx.scene.control.TextField?\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"\u003c?import javafx.scene.layout.AnchorPane?\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"\u003c?import javafx.scene.layout.VBox?\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-14"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"\u003cAnchorPane maxHeight\u003d\"-Infinity\" maxWidth\u003d\"-Infinity\" minHeight\u003d\"-Infinity\" minWidth\u003d\"-Infinity\" prefHeight\u003d\"600.0\" prefWidth\u003d\"400.0\" xmlns\u003d\"http://javafx.com/javafx/17\" xmlns:fx\u003d\"http://javafx.com/fxml/1\" fx:controller\u003d\"duke.gui.MainWindow\"\u003e","lastModifiedDate":"2023-09-17"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"    \u003cchildren\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"        \u003cTextField fx:id\u003d\"userInput\" styleClass\u003d\"userInput\" layoutY\u003d\"558.0\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"324.0\" AnchorPane.bottomAnchor\u003d\"1.0\" /\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"        \u003cButton fx:id\u003d\"sendButton\" styleClass\u003d\"sendButton\" layoutX\u003d\"324.0\" layoutY\u003d\"558.0\" mnemonicParsing\u003d\"false\" onAction\u003d\"#handleUserInput\" prefHeight\u003d\"41.0\" prefWidth\u003d\"76.0\" text\u003d\"Send\" /\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"        \u003cScrollPane fx:id\u003d\"scrollPane\" styleClass\u003d\"scrollPane\" hbarPolicy\u003d\"NEVER\" hvalue\u003d\"1.0\" prefHeight\u003d\"557.0\" prefWidth\u003d\"400.0\" vvalue\u003d\"1.0\"\u003e","lastModifiedDate":"2023-09-22"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"            \u003ccontent\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"                \u003cVBox fx:id\u003d\"dialogContainer\" prefWidth\u003d\"388.0\" /\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"            \u003c/content\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"        \u003c/ScrollPane\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"    \u003c/children\u003e","lastModifiedDate":"2023-09-14"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"\u003c/AnchorPane\u003e","lastModifiedDate":"2023-09-14"}],"authorContributionMap":{"adammangzijun":19}},{"path":"src/test/java/duke/storage/StorageTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke.storage;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-13"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import static org.junit.jupiter.api.Assertions.assertTrue;","lastModifiedDate":"2023-09-13"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import java.io.BufferedReader;","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"import java.io.FileReader;","lastModifiedDate":"2023-09-13"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"import java.io.FileWriter;","lastModifiedDate":"2023-09-13"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"import java.io.IOException;","lastModifiedDate":"2023-09-13"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"import java.nio.file.Files;","lastModifiedDate":"2023-09-13"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"import java.nio.file.Path;","lastModifiedDate":"2023-09-13"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"import org.junit.jupiter.api.AfterAll;","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"import org.junit.jupiter.api.BeforeEach;","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-04"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"import duke.task.Task;","lastModifiedDate":"2023-09-14"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"import duke.task.ToDo;","lastModifiedDate":"2023-09-14"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"import duke.tasklist.TaskList;","lastModifiedDate":"2023-09-14"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"class StorageTest {","lastModifiedDate":"2023-09-04"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"    private Storage storage;","lastModifiedDate":"2023-09-04"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"    private Path path;","lastModifiedDate":"2023-09-04"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"    @BeforeEach","lastModifiedDate":"2023-09-04"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"    public void setup() {","lastModifiedDate":"2023-09-04"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"        this.storage \u003d new Storage(\"./test/data/testfile.txt\");","lastModifiedDate":"2023-09-04"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"        this.path \u003d Path.of(\"./test/data/testfile.txt\");","lastModifiedDate":"2023-09-04"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(this.path.toAbsolutePath());","lastModifiedDate":"2023-09-04"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"    @AfterAll","lastModifiedDate":"2023-09-04"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"    public static void tearDown() {","lastModifiedDate":"2023-09-04"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"            Files.deleteIfExists(Path.of(\"./test/data/testfile.txt\"));","lastModifiedDate":"2023-09-04"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"            Files.deleteIfExists(Path.of(\"./test/data\"));","lastModifiedDate":"2023-09-04"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"            Files.deleteIfExists(Path.of(\"./test\"));","lastModifiedDate":"2023-09-04"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-04"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-09-04"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"    public void testCreateFileIfNotExists() {","lastModifiedDate":"2023-09-04"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"        this.storage.createFileIfNotExists();","lastModifiedDate":"2023-09-04"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"        assertTrue(Files.exists(this.path));","lastModifiedDate":"2023-09-04"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-09-04"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"    public void testSaveTasksToFile() {","lastModifiedDate":"2023-09-04"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"        TaskList tasks \u003d new TaskList();","lastModifiedDate":"2023-09-04"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"        Task taskOne \u003d new ToDo(\"eat\");","lastModifiedDate":"2023-09-04"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"        tasks.add(taskOne);","lastModifiedDate":"2023-09-04"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"        this.storage.saveTasksToFile(tasks);","lastModifiedDate":"2023-09-04"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"        StringBuilder actualOutput \u003d new StringBuilder();","lastModifiedDate":"2023-09-04"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"        try (BufferedReader reader \u003d new BufferedReader(new FileReader(this.path.toFile()))) {","lastModifiedDate":"2023-09-04"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"            String line;","lastModifiedDate":"2023-09-04"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"            while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2023-09-04"},{"lineNumber":59,"author":{"gitId":"adammangzijun"},"content":"                actualOutput.append(line).append(\"\\n\");","lastModifiedDate":"2023-09-04"},{"lineNumber":60,"author":{"gitId":"adammangzijun"},"content":"            }","lastModifiedDate":"2023-09-04"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":63,"author":{"gitId":"adammangzijun"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-04"},{"lineNumber":64,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"        String expectedOutput \u003d \"[T][ ] eat\\n\";","lastModifiedDate":"2023-09-04"},{"lineNumber":67,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expectedOutput, actualOutput.toString());","lastModifiedDate":"2023-09-04"},{"lineNumber":68,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":69,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":70,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-09-04"},{"lineNumber":71,"author":{"gitId":"adammangzijun"},"content":"    public void testLoadTasksFromFile() {","lastModifiedDate":"2023-09-04"},{"lineNumber":72,"author":{"gitId":"adammangzijun"},"content":"        String expectedOutput \u003d \"[T][ ] eat\";","lastModifiedDate":"2023-09-04"},{"lineNumber":73,"author":{"gitId":"adammangzijun"},"content":"        TaskList tasks \u003d null;","lastModifiedDate":"2023-09-04"},{"lineNumber":74,"author":{"gitId":"adammangzijun"},"content":"        try {","lastModifiedDate":"2023-09-04"},{"lineNumber":75,"author":{"gitId":"adammangzijun"},"content":"            FileWriter writer \u003d new FileWriter(this.path.toFile());","lastModifiedDate":"2023-09-04"},{"lineNumber":76,"author":{"gitId":"adammangzijun"},"content":"            writer.write(\"[T][ ] eat\");","lastModifiedDate":"2023-09-04"},{"lineNumber":77,"author":{"gitId":"adammangzijun"},"content":"            writer.close();","lastModifiedDate":"2023-09-04"},{"lineNumber":78,"author":{"gitId":"adammangzijun"},"content":"            tasks \u003d new TaskList(this.storage.loadTasksFromFile());","lastModifiedDate":"2023-09-04"},{"lineNumber":79,"author":{"gitId":"adammangzijun"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-04"},{"lineNumber":80,"author":{"gitId":"adammangzijun"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-04"},{"lineNumber":81,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-04"},{"lineNumber":82,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expectedOutput, tasks.get(1).toString());","lastModifiedDate":"2023-09-04"},{"lineNumber":83,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":84,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":85,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"adammangzijun":85}},{"path":"src/test/java/duke/task/ToDoTest.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"package duke.task;","lastModifiedDate":"2023-09-14"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import static org.junit.jupiter.api.Assertions.assertEquals;","lastModifiedDate":"2023-09-04"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-04"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import org.junit.jupiter.api.Test;","lastModifiedDate":"2023-09-13"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-13"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"class ToDoTest {","lastModifiedDate":"2023-09-04"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"    @Test","lastModifiedDate":"2023-09-04"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"    public void testToString() {","lastModifiedDate":"2023-09-04"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"        Task task \u003d new ToDo(\"eat\");","lastModifiedDate":"2023-09-04"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"        String actualOutput \u003d task.toString();","lastModifiedDate":"2023-09-04"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"        String expectedOutput \u003d \"[T][ ] eat\";","lastModifiedDate":"2023-09-04"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"        assertEquals(expectedOutput, actualOutput);","lastModifiedDate":"2023-09-04"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-04"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-09-04"}],"authorContributionMap":{"adammangzijun":15}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"todo borrow book","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"bye","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"adammangzijun":2}}]
