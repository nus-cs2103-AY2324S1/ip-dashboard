[{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import java.util.List;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"    private String dueDate;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"    public Deadline(String taskName, String dueDate) {","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"        super(taskName, TaskType.DEADLINE);","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"        this.dueDate \u003d dueDate;","lastModifiedDate":"2023-08-24"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"            return \"[D]\"+ super.toString() + \" (by: \" + dueDate + \")\";","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"     * Parse from string to a Deadline task","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"     * @param line The String that is needed to parse into a Deadline Task","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"      */","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"    public static Deadline parseFromString(String line) {","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"        int firstBracketIndex \u003d line.indexOf(\u0027]\u0027);","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"        String description \u003d line.substring(firstBracketIndex + 5).split(\" \\\\(by: \")[0];","lastModifiedDate":"2023-09-02"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"        // ArrayList containing possible formats of Date and Time.","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"        List\u003cString\u003e formatStrings \u003d Arrays.asList(","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"                \"yyyy-MM-dd HH:mm\",","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"                \"dd/MM/yyyy HH:mm\",","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"                \"MM-dd-yyyy HH:mm\"","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"                // Add other formats here","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"        );","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"        String dateInput \u003d line.split(\"\\\\(by: |\\\\)\")[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"        String dueDate \u003d null;","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"        // Try parsing with different formats","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"        for (String formatString : formatStrings) {","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"            try {","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(formatString);","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"                LocalDateTime dateTime \u003d LocalDateTime.parse(dateInput, formatter);","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"                dueDate \u003d dateTime.format(formatter);","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"                break;  // Stop at the first successful parse","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"                // Ignore the exception and try the next format","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"        String mark \u003d line.substring(firstBracketIndex + 2, firstBracketIndex + 3);","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"        Deadline task \u003d new Deadline(description, dueDate);","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"        // if task is initially marked done, then mark the task as done","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"        if (mark.equals(\"X\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"            task.markDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"        return task;","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"adammangzijun":57}},{"path":"src/main/java/Duke.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"import java.io.*;","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"import java.util.List;","lastModifiedDate":"2023-09-02"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"//My chatbot function","lastModifiedDate":"2023-09-01"},{"lineNumber":11,"author":{"gitId":"-"},"content":"public class Duke {","lastModifiedDate":"2019-07-29"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"     * Create the directory and file to store the previous list, else update it to the current list.","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"    public void createFileIfNotExists() {","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"        File directory \u003d new File(\"./data\");","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"        if (!directory.exists()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"            directory.mkdir();","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"        File file \u003d new File(\"./data/duke.txt\");","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"        if(!file.exists()) {","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"            try {","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"                file.createNewFile();","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"            } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"                e.printStackTrace();","lastModifiedDate":"2023-09-01"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"     * Update the list of tasks in the duke.txt according to the current list","lastModifiedDate":"2023-09-01"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"     * @param tasks the ArrayList of tasks that were added","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"    public void saveTasksToFile(ArrayList\u003cTask\u003e tasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"        try (BufferedWriter writer \u003d new BufferedWriter(new FileWriter(\"./data/duke.txt\"))) {","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"            for (Task task : tasks) {","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"                writer.write(task.toString() + \"\\n\");","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"     * Read the list of tasks stored in the duke.txt file and return the ArrayList of tasks.","lastModifiedDate":"2023-09-01"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"     * @return The ArrayList of tasks saved from previous usage.","lastModifiedDate":"2023-09-01"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"    public ArrayList\u003cTask\u003e loadTasksFromFile() {","lastModifiedDate":"2023-09-01"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"        ArrayList\u003cTask\u003e tasks \u003d new ArrayList\u003cTask\u003e();","lastModifiedDate":"2023-09-01"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"        try (BufferedReader reader \u003d new BufferedReader(new FileReader(\"./data/duke.txt\"))) {","lastModifiedDate":"2023-09-01"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"            String line;","lastModifiedDate":"2023-09-01"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"            while ((line \u003d reader.readLine()) !\u003d null) {","lastModifiedDate":"2023-09-01"},{"lineNumber":59,"author":{"gitId":"adammangzijun"},"content":"                String taskType \u003d line.substring(line.indexOf(\"[\") + 1, line.indexOf(\"]\"));","lastModifiedDate":"2023-09-01"},{"lineNumber":60,"author":{"gitId":"adammangzijun"},"content":"                // Convert String back to Task object","lastModifiedDate":"2023-09-01"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"                if (taskType.equals(\"T\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(line);","lastModifiedDate":"2023-09-01"},{"lineNumber":63,"author":{"gitId":"adammangzijun"},"content":"                    tasks.add(ToDo.parseFromString(line));","lastModifiedDate":"2023-09-01"},{"lineNumber":64,"author":{"gitId":"adammangzijun"},"content":"                } else if (taskType.equals(\"D\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(line);","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"                    tasks.add(Deadline.parseFromString(line));","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"adammangzijun"},"content":"                } else {","lastModifiedDate":"2023-09-01"},{"lineNumber":68,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(line);","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"adammangzijun"},"content":"                    tasks.add(Event.parseFromString(line));","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"adammangzijun"},"content":"                }","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"adammangzijun"},"content":"            }","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"adammangzijun"},"content":"        } catch (IOException e) {","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"adammangzijun"},"content":"            e.printStackTrace();","lastModifiedDate":"2023-09-01"},{"lineNumber":74,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":75,"author":{"gitId":"adammangzijun"},"content":"        return tasks;","lastModifiedDate":"2023-09-01"},{"lineNumber":76,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":77,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":78,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":79,"author":{"gitId":"-"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2019-07-29"},{"lineNumber":80,"author":{"gitId":"adammangzijun"},"content":"        Duke duke \u003d new Duke();","lastModifiedDate":"2023-09-01"},{"lineNumber":81,"author":{"gitId":"adammangzijun"},"content":"        duke.createFileIfNotExists();","lastModifiedDate":"2023-09-01"},{"lineNumber":82,"author":{"gitId":"adammangzijun"},"content":"        final String SPACE \u003d \"------------------------------------\"; // for spacing purposes","lastModifiedDate":"2023-09-01"},{"lineNumber":83,"author":{"gitId":"adammangzijun"},"content":"        String name \u003d \"Adam\u0027s Bot\"; // name of bot","lastModifiedDate":"2023-08-24"},{"lineNumber":84,"author":{"gitId":"adammangzijun"},"content":"        ArrayList\u003cTask\u003e toDoList \u003d new ArrayList\u003cTask\u003e(); // ArrayList to store the items","lastModifiedDate":"2023-08-24"},{"lineNumber":85,"author":{"gitId":"adammangzijun"},"content":"        toDoList \u003d duke.loadTasksFromFile();","lastModifiedDate":"2023-09-01"},{"lineNumber":86,"author":{"gitId":"adammangzijun"},"content":"        int counter \u003d toDoList.size(); // Counter to keep track of pointer","lastModifiedDate":"2023-09-01"},{"lineNumber":87,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":88,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":89,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(\"Hello! I\u0027m \"+ name);","lastModifiedDate":"2023-08-24"},{"lineNumber":90,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(\"What can I do for you?\");","lastModifiedDate":"2023-08-24"},{"lineNumber":91,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":92,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":93,"author":{"gitId":"adammangzijun"},"content":"        // Allow user input","lastModifiedDate":"2023-09-01"},{"lineNumber":94,"author":{"gitId":"adammangzijun"},"content":"        Scanner scanner \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-24"},{"lineNumber":95,"author":{"gitId":"adammangzijun"},"content":"        String userInput;","lastModifiedDate":"2023-08-24"},{"lineNumber":96,"author":{"gitId":"adammangzijun"},"content":"        userInput \u003d scanner.nextLine().trim();// remove trailing spaces and get use input","lastModifiedDate":"2023-08-24"},{"lineNumber":97,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":98,"author":{"gitId":"adammangzijun"},"content":"        // prompt for user input if input is not \"bye\"","lastModifiedDate":"2023-08-24"},{"lineNumber":99,"author":{"gitId":"adammangzijun"},"content":"        while(!userInput.equalsIgnoreCase(\"bye\")) {","lastModifiedDate":"2023-08-24"},{"lineNumber":100,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":101,"author":{"gitId":"adammangzijun"},"content":"            // if user input is \"list\", list out all the tasks","lastModifiedDate":"2023-09-01"},{"lineNumber":102,"author":{"gitId":"adammangzijun"},"content":"            if (userInput.equalsIgnoreCase(\"list\")) {","lastModifiedDate":"2023-08-24"},{"lineNumber":103,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":104,"author":{"gitId":"adammangzijun"},"content":"                System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":105,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":106,"author":{"gitId":"adammangzijun"},"content":"                // iterate through ArrayList to print tasks","lastModifiedDate":"2023-09-01"},{"lineNumber":107,"author":{"gitId":"adammangzijun"},"content":"                for (int i \u003d 0; i \u003c toDoList.size(); i++) {","lastModifiedDate":"2023-08-24"},{"lineNumber":108,"author":{"gitId":"adammangzijun"},"content":"                    int currentNumber \u003d i + 1;","lastModifiedDate":"2023-08-24"},{"lineNumber":109,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(currentNumber + \". \" + toDoList.get(i).toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":110,"author":{"gitId":"adammangzijun"},"content":"                }","lastModifiedDate":"2023-08-24"},{"lineNumber":111,"author":{"gitId":"adammangzijun"},"content":"                System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":112,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":113,"author":{"gitId":"adammangzijun"},"content":"            // if user input starts with mark, mark the task on the list as done with a cross and print out the task","lastModifiedDate":"2023-09-01"},{"lineNumber":114,"author":{"gitId":"adammangzijun"},"content":"            } else if (userInput.toLowerCase().startsWith(\"mark\")) {","lastModifiedDate":"2023-08-24"},{"lineNumber":115,"author":{"gitId":"adammangzijun"},"content":"                int index \u003d Integer.parseInt(userInput.split(\" \")[1]) -1;","lastModifiedDate":"2023-08-24"},{"lineNumber":116,"author":{"gitId":"adammangzijun"},"content":"                Task task \u003d toDoList.get(index);","lastModifiedDate":"2023-08-24"},{"lineNumber":117,"author":{"gitId":"adammangzijun"},"content":"                System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":118,"author":{"gitId":"adammangzijun"},"content":"                task.markDone();","lastModifiedDate":"2023-08-24"},{"lineNumber":119,"author":{"gitId":"adammangzijun"},"content":"                System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-08-24"},{"lineNumber":120,"author":{"gitId":"adammangzijun"},"content":"                System.out.println(\"  \" + task.toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":121,"author":{"gitId":"adammangzijun"},"content":"                System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":122,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":123,"author":{"gitId":"adammangzijun"},"content":"            // if user input starts with unmark, unmark the task on the list and remove the cross and print out the task","lastModifiedDate":"2023-09-01"},{"lineNumber":124,"author":{"gitId":"adammangzijun"},"content":"            } else if (userInput.toLowerCase().startsWith(\"unmark\")) {","lastModifiedDate":"2023-08-24"},{"lineNumber":125,"author":{"gitId":"adammangzijun"},"content":"                int index \u003d Integer.parseInt(userInput.split(\" \")[1]) -1;","lastModifiedDate":"2023-08-24"},{"lineNumber":126,"author":{"gitId":"adammangzijun"},"content":"                Task task \u003d toDoList.get(index);","lastModifiedDate":"2023-08-24"},{"lineNumber":127,"author":{"gitId":"adammangzijun"},"content":"                System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":128,"author":{"gitId":"adammangzijun"},"content":"                task.unmarkDone();","lastModifiedDate":"2023-08-24"},{"lineNumber":129,"author":{"gitId":"adammangzijun"},"content":"                System.out.println(\"Nice! I\u0027ve marked this task as done:\");","lastModifiedDate":"2023-08-24"},{"lineNumber":130,"author":{"gitId":"adammangzijun"},"content":"                System.out.println(\"  \" + task.toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":131,"author":{"gitId":"adammangzijun"},"content":"                System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":132,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":133,"author":{"gitId":"adammangzijun"},"content":"            // if user input starts with todo, insert a todo task into the list and print out the task","lastModifiedDate":"2023-09-01"},{"lineNumber":134,"author":{"gitId":"adammangzijun"},"content":"            } else if (userInput.toLowerCase().startsWith(\"todo\")){","lastModifiedDate":"2023-08-24"},{"lineNumber":135,"author":{"gitId":"adammangzijun"},"content":"                try {","lastModifiedDate":"2023-08-24"},{"lineNumber":136,"author":{"gitId":"adammangzijun"},"content":"                    String taskName \u003d userInput.split(\" \", 2)[1];","lastModifiedDate":"2023-08-24"},{"lineNumber":137,"author":{"gitId":"adammangzijun"},"content":"                    //add item into list","lastModifiedDate":"2023-08-24"},{"lineNumber":138,"author":{"gitId":"adammangzijun"},"content":"                    ToDo task \u003d new ToDo(taskName);","lastModifiedDate":"2023-08-24"},{"lineNumber":139,"author":{"gitId":"adammangzijun"},"content":"                    toDoList.add(counter, task);","lastModifiedDate":"2023-08-24"},{"lineNumber":140,"author":{"gitId":"adammangzijun"},"content":"                    counter++;","lastModifiedDate":"2023-08-24"},{"lineNumber":141,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":142,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-24"},{"lineNumber":143,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(\"  \" + task.toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":144,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(\"Now you have \" + counter + \" tasks in the list.\");","lastModifiedDate":"2023-08-24"},{"lineNumber":145,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":146,"author":{"gitId":"adammangzijun"},"content":"                } catch(ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":147,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":148,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(\"☹ OOPS!!! The description of a todo cannot be empty.\");","lastModifiedDate":"2023-08-24"},{"lineNumber":149,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":150,"author":{"gitId":"adammangzijun"},"content":"                }","lastModifiedDate":"2023-08-24"},{"lineNumber":151,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":152,"author":{"gitId":"adammangzijun"},"content":"            // if user input starts with deadline, insert a deadline task into the list and print out the task.","lastModifiedDate":"2023-09-02"},{"lineNumber":153,"author":{"gitId":"adammangzijun"},"content":"            } else if (userInput.toLowerCase().startsWith(\"deadline\")){","lastModifiedDate":"2023-08-24"},{"lineNumber":154,"author":{"gitId":"adammangzijun"},"content":"                try {","lastModifiedDate":"2023-08-24"},{"lineNumber":155,"author":{"gitId":"adammangzijun"},"content":"                    String taskName \u003d userInput.split(\" /by \", 2)[0].split(\" \", 2)[1];","lastModifiedDate":"2023-08-24"},{"lineNumber":156,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":157,"author":{"gitId":"adammangzijun"},"content":"                    // ArrayList containing possible formats of Date and Time.","lastModifiedDate":"2023-09-02"},{"lineNumber":158,"author":{"gitId":"adammangzijun"},"content":"                    List\u003cString\u003e formatStrings \u003d Arrays.asList(","lastModifiedDate":"2023-09-02"},{"lineNumber":159,"author":{"gitId":"adammangzijun"},"content":"                            \"yyyy-MM-dd HH:mm\",","lastModifiedDate":"2023-09-02"},{"lineNumber":160,"author":{"gitId":"adammangzijun"},"content":"                            \"dd/MM/yyyy HH:mm\",","lastModifiedDate":"2023-09-02"},{"lineNumber":161,"author":{"gitId":"adammangzijun"},"content":"                            \"MM-dd-yyyy HH:mm\"","lastModifiedDate":"2023-09-02"},{"lineNumber":162,"author":{"gitId":"adammangzijun"},"content":"                            // Add other formats here","lastModifiedDate":"2023-09-02"},{"lineNumber":163,"author":{"gitId":"adammangzijun"},"content":"                    );","lastModifiedDate":"2023-09-02"},{"lineNumber":164,"author":{"gitId":"adammangzijun"},"content":"                    String dateInput \u003d userInput.split(\" /by \", 2)[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":165,"author":{"gitId":"adammangzijun"},"content":"                    String dueDate \u003d null;","lastModifiedDate":"2023-09-02"},{"lineNumber":166,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":167,"author":{"gitId":"adammangzijun"},"content":"                    // Try parsing with different formats","lastModifiedDate":"2023-09-02"},{"lineNumber":168,"author":{"gitId":"adammangzijun"},"content":"                    for (String formatString : formatStrings) {","lastModifiedDate":"2023-09-02"},{"lineNumber":169,"author":{"gitId":"adammangzijun"},"content":"                        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":170,"author":{"gitId":"adammangzijun"},"content":"                            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(formatString);","lastModifiedDate":"2023-09-02"},{"lineNumber":171,"author":{"gitId":"adammangzijun"},"content":"                            LocalDateTime dateTime \u003d LocalDateTime.parse(dateInput, formatter);","lastModifiedDate":"2023-09-02"},{"lineNumber":172,"author":{"gitId":"adammangzijun"},"content":"                            dueDate \u003d dateTime.format(formatter);","lastModifiedDate":"2023-09-02"},{"lineNumber":173,"author":{"gitId":"adammangzijun"},"content":"                            break;  // Stop at the first successful parse","lastModifiedDate":"2023-09-02"},{"lineNumber":174,"author":{"gitId":"adammangzijun"},"content":"                        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":175,"author":{"gitId":"adammangzijun"},"content":"                            // Ignore the exception and try the next format","lastModifiedDate":"2023-09-02"},{"lineNumber":176,"author":{"gitId":"adammangzijun"},"content":"                        }","lastModifiedDate":"2023-09-02"},{"lineNumber":177,"author":{"gitId":"adammangzijun"},"content":"                    }","lastModifiedDate":"2023-09-02"},{"lineNumber":178,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":179,"author":{"gitId":"adammangzijun"},"content":"                    // if the input fits none of the format, throw DateTimeParseException","lastModifiedDate":"2023-09-02"},{"lineNumber":180,"author":{"gitId":"adammangzijun"},"content":"                    if (dueDate \u003d\u003d null) {","lastModifiedDate":"2023-09-02"},{"lineNumber":181,"author":{"gitId":"adammangzijun"},"content":"                        throw new DateTimeParseException(\"Invalid date/time format\", dateInput, 0);","lastModifiedDate":"2023-09-02"},{"lineNumber":182,"author":{"gitId":"adammangzijun"},"content":"                    }","lastModifiedDate":"2023-09-02"},{"lineNumber":183,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":184,"author":{"gitId":"adammangzijun"},"content":"                    // add item into list","lastModifiedDate":"2023-08-24"},{"lineNumber":185,"author":{"gitId":"adammangzijun"},"content":"                    Deadline task \u003d new Deadline(taskName, dueDate);","lastModifiedDate":"2023-08-24"},{"lineNumber":186,"author":{"gitId":"adammangzijun"},"content":"                    toDoList.add(counter, task);","lastModifiedDate":"2023-08-24"},{"lineNumber":187,"author":{"gitId":"adammangzijun"},"content":"                    counter++;","lastModifiedDate":"2023-08-24"},{"lineNumber":188,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":189,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-24"},{"lineNumber":190,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(\"  \" + task.toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":191,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(\"Now you have \" + counter + \" tasks in the list.\");","lastModifiedDate":"2023-08-24"},{"lineNumber":192,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":193,"author":{"gitId":"adammangzijun"},"content":"                } catch ( ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":194,"author":{"gitId":"adammangzijun"},"content":"                    if (userInput.split(\" \").length \u003d\u003d 1) {","lastModifiedDate":"2023-08-24"},{"lineNumber":195,"author":{"gitId":"adammangzijun"},"content":"                        System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":196,"author":{"gitId":"adammangzijun"},"content":"                        System.out.println(\"☹ OOPS!!! The description of a deadline cannot be empty\");","lastModifiedDate":"2023-08-24"},{"lineNumber":197,"author":{"gitId":"adammangzijun"},"content":"                        System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":198,"author":{"gitId":"adammangzijun"},"content":"                    } else {","lastModifiedDate":"2023-08-24"},{"lineNumber":199,"author":{"gitId":"adammangzijun"},"content":"                        System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":200,"author":{"gitId":"adammangzijun"},"content":"                        System.out.println(\"☹ OOPS!!! The description of a deadline does not have \\\"/by\\\" specified\");","lastModifiedDate":"2023-08-24"},{"lineNumber":201,"author":{"gitId":"adammangzijun"},"content":"                        System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":202,"author":{"gitId":"adammangzijun"},"content":"                    }","lastModifiedDate":"2023-08-24"},{"lineNumber":203,"author":{"gitId":"adammangzijun"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":204,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(SPACE);","lastModifiedDate":"2023-09-02"},{"lineNumber":205,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(\"☹ OOPS!!! The format of deadline is wrong, please write it in the correct format\");","lastModifiedDate":"2023-09-02"},{"lineNumber":206,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(SPACE);","lastModifiedDate":"2023-09-02"},{"lineNumber":207,"author":{"gitId":"adammangzijun"},"content":"                }","lastModifiedDate":"2023-08-24"},{"lineNumber":208,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":209,"author":{"gitId":"adammangzijun"},"content":"            // if user input starts with event, insert an event task into the list and print out the task","lastModifiedDate":"2023-09-01"},{"lineNumber":210,"author":{"gitId":"adammangzijun"},"content":"            } else if (userInput.toLowerCase().startsWith(\"event\")){","lastModifiedDate":"2023-08-24"},{"lineNumber":211,"author":{"gitId":"adammangzijun"},"content":"                try {","lastModifiedDate":"2023-08-24"},{"lineNumber":212,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":213,"author":{"gitId":"adammangzijun"},"content":"                    String taskName \u003d userInput.split(\" /from | /to \", 3)[0].split(\" \", 2)[1];","lastModifiedDate":"2023-08-24"},{"lineNumber":214,"author":{"gitId":"adammangzijun"},"content":"                    String startDateInput \u003d userInput.split(\" /from | /to \", 3)[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":215,"author":{"gitId":"adammangzijun"},"content":"                    String dueDateInput \u003d userInput.split(\" /from | /to \", 3)[2];","lastModifiedDate":"2023-09-02"},{"lineNumber":216,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":217,"author":{"gitId":"adammangzijun"},"content":"                    // ArrayList containing possible formats of Date and Time.","lastModifiedDate":"2023-09-02"},{"lineNumber":218,"author":{"gitId":"adammangzijun"},"content":"                    List\u003cString\u003e formatStrings \u003d Arrays.asList(","lastModifiedDate":"2023-09-02"},{"lineNumber":219,"author":{"gitId":"adammangzijun"},"content":"                            \"yyyy-MM-dd HH:mm\",","lastModifiedDate":"2023-09-02"},{"lineNumber":220,"author":{"gitId":"adammangzijun"},"content":"                            \"dd/MM/yyyy HH:mm\",","lastModifiedDate":"2023-09-02"},{"lineNumber":221,"author":{"gitId":"adammangzijun"},"content":"                            \"MM-dd-yyyy HH:mm\"","lastModifiedDate":"2023-09-02"},{"lineNumber":222,"author":{"gitId":"adammangzijun"},"content":"                            // Add other formats here","lastModifiedDate":"2023-09-02"},{"lineNumber":223,"author":{"gitId":"adammangzijun"},"content":"                    );","lastModifiedDate":"2023-09-02"},{"lineNumber":224,"author":{"gitId":"adammangzijun"},"content":"                    LocalDateTime startDateTime \u003d null;","lastModifiedDate":"2023-09-02"},{"lineNumber":225,"author":{"gitId":"adammangzijun"},"content":"                    String startDate \u003d null;","lastModifiedDate":"2023-09-02"},{"lineNumber":226,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":227,"author":{"gitId":"adammangzijun"},"content":"                    // Try parsing with different formats for starting date and time input.","lastModifiedDate":"2023-09-02"},{"lineNumber":228,"author":{"gitId":"adammangzijun"},"content":"                    for (String formatString : formatStrings) {","lastModifiedDate":"2023-09-02"},{"lineNumber":229,"author":{"gitId":"adammangzijun"},"content":"                        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":230,"author":{"gitId":"adammangzijun"},"content":"                            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(formatString);","lastModifiedDate":"2023-09-02"},{"lineNumber":231,"author":{"gitId":"adammangzijun"},"content":"                            startDateTime \u003d LocalDateTime.parse(startDateInput, formatter);","lastModifiedDate":"2023-09-02"},{"lineNumber":232,"author":{"gitId":"adammangzijun"},"content":"                            startDate \u003d startDateTime.format(formatter);","lastModifiedDate":"2023-09-02"},{"lineNumber":233,"author":{"gitId":"adammangzijun"},"content":"                            break;  // Stop at the first successful parse","lastModifiedDate":"2023-09-02"},{"lineNumber":234,"author":{"gitId":"adammangzijun"},"content":"                        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":235,"author":{"gitId":"adammangzijun"},"content":"                            // Ignore the exception and try the next format","lastModifiedDate":"2023-09-02"},{"lineNumber":236,"author":{"gitId":"adammangzijun"},"content":"                        }","lastModifiedDate":"2023-09-02"},{"lineNumber":237,"author":{"gitId":"adammangzijun"},"content":"                    }","lastModifiedDate":"2023-09-02"},{"lineNumber":238,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":239,"author":{"gitId":"adammangzijun"},"content":"                    // if the input fits none of the format, throw DateTimeParseException","lastModifiedDate":"2023-09-02"},{"lineNumber":240,"author":{"gitId":"adammangzijun"},"content":"                    if (startDate \u003d\u003d null) {","lastModifiedDate":"2023-09-02"},{"lineNumber":241,"author":{"gitId":"adammangzijun"},"content":"                        throw new DateTimeParseException(\"Invalid date/time format\", startDate, 0);","lastModifiedDate":"2023-09-02"},{"lineNumber":242,"author":{"gitId":"adammangzijun"},"content":"                    }","lastModifiedDate":"2023-09-02"},{"lineNumber":243,"author":{"gitId":"adammangzijun"},"content":"                    LocalDateTime dueDateTime \u003d null;","lastModifiedDate":"2023-09-02"},{"lineNumber":244,"author":{"gitId":"adammangzijun"},"content":"                    String dueDate \u003d null;","lastModifiedDate":"2023-09-02"},{"lineNumber":245,"author":{"gitId":"adammangzijun"},"content":"                    // Try parsing with different formats for due date and time input.","lastModifiedDate":"2023-09-02"},{"lineNumber":246,"author":{"gitId":"adammangzijun"},"content":"                    for (String formatString : formatStrings) {","lastModifiedDate":"2023-09-02"},{"lineNumber":247,"author":{"gitId":"adammangzijun"},"content":"                        try {","lastModifiedDate":"2023-09-02"},{"lineNumber":248,"author":{"gitId":"adammangzijun"},"content":"                            DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(formatString);","lastModifiedDate":"2023-09-02"},{"lineNumber":249,"author":{"gitId":"adammangzijun"},"content":"                            dueDateTime \u003d LocalDateTime.parse(dueDateInput, formatter);","lastModifiedDate":"2023-09-02"},{"lineNumber":250,"author":{"gitId":"adammangzijun"},"content":"                            dueDate \u003d dueDateTime.format(formatter);","lastModifiedDate":"2023-09-02"},{"lineNumber":251,"author":{"gitId":"adammangzijun"},"content":"                            break;  // Stop at the first successful parse","lastModifiedDate":"2023-09-02"},{"lineNumber":252,"author":{"gitId":"adammangzijun"},"content":"                        } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":253,"author":{"gitId":"adammangzijun"},"content":"                            // Ignore the exception and try the next format","lastModifiedDate":"2023-09-02"},{"lineNumber":254,"author":{"gitId":"adammangzijun"},"content":"                        }","lastModifiedDate":"2023-09-02"},{"lineNumber":255,"author":{"gitId":"adammangzijun"},"content":"                    }","lastModifiedDate":"2023-09-02"},{"lineNumber":256,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":257,"author":{"gitId":"adammangzijun"},"content":"                    // if the input fits none of the format, throw DateTimeParseException","lastModifiedDate":"2023-09-02"},{"lineNumber":258,"author":{"gitId":"adammangzijun"},"content":"                    if (dueDate \u003d\u003d null) {","lastModifiedDate":"2023-09-02"},{"lineNumber":259,"author":{"gitId":"adammangzijun"},"content":"                        throw new DateTimeParseException(\"Invalid date/time format\", dueDateInput, 0);","lastModifiedDate":"2023-09-02"},{"lineNumber":260,"author":{"gitId":"adammangzijun"},"content":"                    }","lastModifiedDate":"2023-09-02"},{"lineNumber":261,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":262,"author":{"gitId":"adammangzijun"},"content":"                    // check if start date is before due date.","lastModifiedDate":"2023-09-02"},{"lineNumber":263,"author":{"gitId":"adammangzijun"},"content":"                    if (startDateTime.isAfter(dueDateTime) || startDateTime.isEqual(dueDateTime)) {","lastModifiedDate":"2023-09-02"},{"lineNumber":264,"author":{"gitId":"adammangzijun"},"content":"                        throw new IllegalArgumentException();","lastModifiedDate":"2023-09-02"},{"lineNumber":265,"author":{"gitId":"adammangzijun"},"content":"                    }","lastModifiedDate":"2023-09-02"},{"lineNumber":266,"author":{"gitId":"adammangzijun"},"content":"                    // add item into list","lastModifiedDate":"2023-08-24"},{"lineNumber":267,"author":{"gitId":"adammangzijun"},"content":"                    Event task \u003d new Event(taskName, startDate, dueDate);","lastModifiedDate":"2023-08-24"},{"lineNumber":268,"author":{"gitId":"adammangzijun"},"content":"                    toDoList.add(counter, task);","lastModifiedDate":"2023-08-24"},{"lineNumber":269,"author":{"gitId":"adammangzijun"},"content":"                    counter++;","lastModifiedDate":"2023-08-24"},{"lineNumber":270,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":271,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(\"Got it. I\u0027ve added this task:\");","lastModifiedDate":"2023-08-24"},{"lineNumber":272,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(\"  \" + task.toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":273,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(\"Now you have \" + counter + \" tasks in the list.\");","lastModifiedDate":"2023-08-24"},{"lineNumber":274,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":275,"author":{"gitId":"adammangzijun"},"content":"                } catch (ArrayIndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":276,"author":{"gitId":"adammangzijun"},"content":"                    if (userInput.split(\" \").length \u003d\u003d 1) {","lastModifiedDate":"2023-08-24"},{"lineNumber":277,"author":{"gitId":"adammangzijun"},"content":"                        System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":278,"author":{"gitId":"adammangzijun"},"content":"                        System.out.println(\"☹ OOPS!!! The description of a event cannot be empty\");","lastModifiedDate":"2023-08-24"},{"lineNumber":279,"author":{"gitId":"adammangzijun"},"content":"                        System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":280,"author":{"gitId":"adammangzijun"},"content":"                    } else {","lastModifiedDate":"2023-08-24"},{"lineNumber":281,"author":{"gitId":"adammangzijun"},"content":"                        System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":282,"author":{"gitId":"adammangzijun"},"content":"                        System.out.println(\"☹ OOPS!!! The description of a deadline does not have either \\\"/from\\\" or \\\"/to\\\" specified\");","lastModifiedDate":"2023-08-24"},{"lineNumber":283,"author":{"gitId":"adammangzijun"},"content":"                        System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":284,"author":{"gitId":"adammangzijun"},"content":"                    }","lastModifiedDate":"2023-08-24"},{"lineNumber":285,"author":{"gitId":"adammangzijun"},"content":"                } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":286,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(SPACE);","lastModifiedDate":"2023-09-02"},{"lineNumber":287,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(\"☹ OOPS!!! The format of starting date or due date is wrong, please write it in the format correct format\");","lastModifiedDate":"2023-09-02"},{"lineNumber":288,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(SPACE);","lastModifiedDate":"2023-09-02"},{"lineNumber":289,"author":{"gitId":"adammangzijun"},"content":"                } catch (IllegalArgumentException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":290,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(SPACE);","lastModifiedDate":"2023-09-02"},{"lineNumber":291,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(\"☹ OOPS!!! The starting date cannot be later than the due date.\");","lastModifiedDate":"2023-09-02"},{"lineNumber":292,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(SPACE);","lastModifiedDate":"2023-09-02"},{"lineNumber":293,"author":{"gitId":"adammangzijun"},"content":"                }","lastModifiedDate":"2023-08-24"},{"lineNumber":294,"author":{"gitId":"adammangzijun"},"content":"            // if user input starts with delete, check the number that the user input and delete the task of that number from the list","lastModifiedDate":"2023-09-01"},{"lineNumber":295,"author":{"gitId":"adammangzijun"},"content":"            } else if (userInput.toLowerCase().startsWith(\"delete\")) {","lastModifiedDate":"2023-08-24"},{"lineNumber":296,"author":{"gitId":"adammangzijun"},"content":"                try {","lastModifiedDate":"2023-08-24"},{"lineNumber":297,"author":{"gitId":"adammangzijun"},"content":"                    int index \u003d Integer.parseInt(userInput.split(\" \")[1]) - 1;","lastModifiedDate":"2023-08-24"},{"lineNumber":298,"author":{"gitId":"adammangzijun"},"content":"                    Task task \u003d toDoList.get(index);","lastModifiedDate":"2023-08-24"},{"lineNumber":299,"author":{"gitId":"adammangzijun"},"content":"                    toDoList.remove(index);","lastModifiedDate":"2023-08-24"},{"lineNumber":300,"author":{"gitId":"adammangzijun"},"content":"                    counter--;","lastModifiedDate":"2023-08-24"},{"lineNumber":301,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":302,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(\"Noted. I\u0027ve removed this task:\");","lastModifiedDate":"2023-08-24"},{"lineNumber":303,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(\"  \" + task.toString());","lastModifiedDate":"2023-08-24"},{"lineNumber":304,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(\"Now you have \" + counter + \" tasks in the list.\");","lastModifiedDate":"2023-08-24"},{"lineNumber":305,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":306,"author":{"gitId":"adammangzijun"},"content":"                } catch (IndexOutOfBoundsException e) {","lastModifiedDate":"2023-08-24"},{"lineNumber":307,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":308,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(\"☹ OOPS!!! The task number you entered is not in the list.\");","lastModifiedDate":"2023-08-24"},{"lineNumber":309,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":310,"author":{"gitId":"adammangzijun"},"content":"                } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-25"},{"lineNumber":311,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":312,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(\"☹ OOPS!!! The task number you entered is invalid. Please enter a number.\");","lastModifiedDate":"2023-08-25"},{"lineNumber":313,"author":{"gitId":"adammangzijun"},"content":"                    System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":314,"author":{"gitId":"adammangzijun"},"content":"                }","lastModifiedDate":"2023-08-24"},{"lineNumber":315,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":316,"author":{"gitId":"adammangzijun"},"content":"            // if user input and invalid input, ask user to input again","lastModifiedDate":"2023-09-01"},{"lineNumber":317,"author":{"gitId":"adammangzijun"},"content":"            } else {","lastModifiedDate":"2023-08-24"},{"lineNumber":318,"author":{"gitId":"adammangzijun"},"content":"                System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":319,"author":{"gitId":"adammangzijun"},"content":"                System.out.println(\"☹ OOPS!!! I\u0027m sorry, but I don\u0027t know what that means :-(\");","lastModifiedDate":"2023-08-24"},{"lineNumber":320,"author":{"gitId":"adammangzijun"},"content":"                System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":321,"author":{"gitId":"adammangzijun"},"content":"            }","lastModifiedDate":"2023-08-24"},{"lineNumber":322,"author":{"gitId":"adammangzijun"},"content":"            userInput \u003d scanner.nextLine().trim();","lastModifiedDate":"2023-08-24"},{"lineNumber":323,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":324,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":325,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":326,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(\"Bye. Hope to see you again soon!\");","lastModifiedDate":"2023-08-24"},{"lineNumber":327,"author":{"gitId":"adammangzijun"},"content":"        System.out.println(SPACE);","lastModifiedDate":"2023-09-01"},{"lineNumber":328,"author":{"gitId":"adammangzijun"},"content":"        duke.saveTasksToFile(toDoList);","lastModifiedDate":"2023-09-01"},{"lineNumber":329,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":330,"author":{"gitId":"-"},"content":"    }","lastModifiedDate":"2019-07-29"},{"lineNumber":331,"author":{"gitId":"-"},"content":"}","lastModifiedDate":"2019-07-29"}],"authorContributionMap":{"adammangzijun":327,"-":4}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"import java.time.LocalDateTime;","lastModifiedDate":"2023-09-02"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"import java.time.format.DateTimeFormatter;","lastModifiedDate":"2023-09-02"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"import java.time.format.DateTimeParseException;","lastModifiedDate":"2023-09-02"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"import java.util.Arrays;","lastModifiedDate":"2023-09-02"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"import java.util.List;","lastModifiedDate":"2023-09-02"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"public class Event extends Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"    private String startDate;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"    private String dueDate;","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"    public Event(String taskName, String startDate,String dueDate) {","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"        super(taskName, TaskType.EVENT);","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"        this.startDate \u003d startDate;","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"        this.dueDate \u003d dueDate;","lastModifiedDate":"2023-08-24"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + startDate + \" to: \" + dueDate + \")\";","lastModifiedDate":"2023-08-24"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"     * Parse from string to a Event task","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"     * @param line The String that is needed to parse into a Event Task","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"    public static Event parseFromString(String line) {","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"        int firstBracketIndex \u003d line.indexOf(\u0027]\u0027);","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"        String description \u003d line.substring(firstBracketIndex + 5).split(\" \\\\(from: | to: \")[0];","lastModifiedDate":"2023-09-02"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"        String startDateInput \u003d line.split(\" \\\\(from: | to: |\\\\) \")[1];","lastModifiedDate":"2023-09-02"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"        String dueDateInput \u003d line.split(\" \\\\(from: | to: |\\\\)\")[2];","lastModifiedDate":"2023-09-02"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"        // ArrayList containing possible formats of Date and Time.","lastModifiedDate":"2023-09-02"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"        List\u003cString\u003e formatStrings \u003d Arrays.asList(","lastModifiedDate":"2023-09-02"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"                \"yyyy-MM-dd HH:mm\",","lastModifiedDate":"2023-09-02"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"                \"dd/MM/yyyy HH:mm\",","lastModifiedDate":"2023-09-02"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"                \"MM-dd-yyyy HH:mm\"","lastModifiedDate":"2023-09-02"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"                // Add other formats here","lastModifiedDate":"2023-09-02"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"        );","lastModifiedDate":"2023-09-02"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"        String startDate \u003d null;","lastModifiedDate":"2023-09-02"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"        // Try parsing with different formats for starting date and time input.","lastModifiedDate":"2023-09-02"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"        for (String formatString : formatStrings) {","lastModifiedDate":"2023-09-02"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"            try {","lastModifiedDate":"2023-09-02"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(formatString);","lastModifiedDate":"2023-09-02"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"                LocalDateTime StartDateTime \u003d LocalDateTime.parse(startDateInput, formatter);","lastModifiedDate":"2023-09-02"},{"lineNumber":45,"author":{"gitId":"adammangzijun"},"content":"                startDate \u003d StartDateTime.format(formatter);","lastModifiedDate":"2023-09-02"},{"lineNumber":46,"author":{"gitId":"adammangzijun"},"content":"                break;  // Stop at the first successful parse","lastModifiedDate":"2023-09-02"},{"lineNumber":47,"author":{"gitId":"adammangzijun"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":48,"author":{"gitId":"adammangzijun"},"content":"                // Ignore the exception and try the next format","lastModifiedDate":"2023-09-02"},{"lineNumber":49,"author":{"gitId":"adammangzijun"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":50,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":51,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":52,"author":{"gitId":"adammangzijun"},"content":"        String dueDate \u003d null;","lastModifiedDate":"2023-09-02"},{"lineNumber":53,"author":{"gitId":"adammangzijun"},"content":"        // Try parsing with different formats for due date and time input.","lastModifiedDate":"2023-09-02"},{"lineNumber":54,"author":{"gitId":"adammangzijun"},"content":"        for (String formatString : formatStrings) {","lastModifiedDate":"2023-09-02"},{"lineNumber":55,"author":{"gitId":"adammangzijun"},"content":"            try {","lastModifiedDate":"2023-09-02"},{"lineNumber":56,"author":{"gitId":"adammangzijun"},"content":"                DateTimeFormatter formatter \u003d DateTimeFormatter.ofPattern(formatString);","lastModifiedDate":"2023-09-02"},{"lineNumber":57,"author":{"gitId":"adammangzijun"},"content":"                LocalDateTime dueDateTime \u003d LocalDateTime.parse(dueDateInput, formatter);","lastModifiedDate":"2023-09-02"},{"lineNumber":58,"author":{"gitId":"adammangzijun"},"content":"                dueDate \u003d dueDateTime.format(formatter);","lastModifiedDate":"2023-09-02"},{"lineNumber":59,"author":{"gitId":"adammangzijun"},"content":"                break;  // Stop at the first successful parse","lastModifiedDate":"2023-09-02"},{"lineNumber":60,"author":{"gitId":"adammangzijun"},"content":"            } catch (DateTimeParseException e) {","lastModifiedDate":"2023-09-02"},{"lineNumber":61,"author":{"gitId":"adammangzijun"},"content":"                // Ignore the exception and try the next format","lastModifiedDate":"2023-09-02"},{"lineNumber":62,"author":{"gitId":"adammangzijun"},"content":"            }","lastModifiedDate":"2023-09-02"},{"lineNumber":63,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-02"},{"lineNumber":64,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-02"},{"lineNumber":65,"author":{"gitId":"adammangzijun"},"content":"        String mark \u003d line.substring(firstBracketIndex + 2, firstBracketIndex + 3);","lastModifiedDate":"2023-09-01"},{"lineNumber":66,"author":{"gitId":"adammangzijun"},"content":"        Event task \u003d new Event(description, startDate, dueDate);","lastModifiedDate":"2023-09-01"},{"lineNumber":67,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":68,"author":{"gitId":"adammangzijun"},"content":"        // if task is initially marked done, then mark the task as done","lastModifiedDate":"2023-09-01"},{"lineNumber":69,"author":{"gitId":"adammangzijun"},"content":"        if (mark.equals(\"X\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":70,"author":{"gitId":"adammangzijun"},"content":"            task.markDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":71,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":72,"author":{"gitId":"adammangzijun"},"content":"        return task;","lastModifiedDate":"2023-09-01"},{"lineNumber":73,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":74,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"adammangzijun":74}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"enum TaskType {","lastModifiedDate":"2023-09-01"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"    TODO, DEADLINE, EVENT","lastModifiedDate":"2023-09-01"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-09-01"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"    private String taskName;","lastModifiedDate":"2023-09-01"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"    private boolean isDone \u003d false;","lastModifiedDate":"2023-09-01"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"    private TaskType taskType;","lastModifiedDate":"2023-09-01"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"    //constructor to create a Task object with a task description","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"    public Task(String taskName, TaskType taskType) {","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"        this.taskName \u003d taskName;","lastModifiedDate":"2023-08-24"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"        this.taskType \u003d taskType;","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"     * Return a String with Task description and whether it is marked done","lastModifiedDate":"2023-09-01"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"     * @return a String with Task description and whether it is marked done","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"        if (isDone) {","lastModifiedDate":"2023-08-24"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"            return \"[X] \" + taskName;","lastModifiedDate":"2023-08-24"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"        } else {","lastModifiedDate":"2023-08-24"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"            return \"[ ] \" + taskName;","lastModifiedDate":"2023-08-24"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":29,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":30,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":31,"author":{"gitId":"adammangzijun"},"content":"     *  mark task as done, by changing value of isDone to true","lastModifiedDate":"2023-09-01"},{"lineNumber":32,"author":{"gitId":"adammangzijun"},"content":"      */","lastModifiedDate":"2023-09-01"},{"lineNumber":33,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":34,"author":{"gitId":"adammangzijun"},"content":"    public void markDone() {","lastModifiedDate":"2023-09-01"},{"lineNumber":35,"author":{"gitId":"adammangzijun"},"content":"        this.isDone \u003d true;","lastModifiedDate":"2023-09-01"},{"lineNumber":36,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":37,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-09-01"},{"lineNumber":38,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":39,"author":{"gitId":"adammangzijun"},"content":"     *  mark task as undone, by changing value of isDone to false","lastModifiedDate":"2023-09-01"},{"lineNumber":40,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":41,"author":{"gitId":"adammangzijun"},"content":"    public void unmarkDone() {","lastModifiedDate":"2023-09-01"},{"lineNumber":42,"author":{"gitId":"adammangzijun"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-09-01"},{"lineNumber":43,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-09-01"},{"lineNumber":44,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"adammangzijun":44}},{"path":"src/main/java/ToDo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"public class ToDo extends Task{","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":3,"author":{"gitId":"adammangzijun"},"content":"    public ToDo(String taskName) {","lastModifiedDate":"2023-08-24"},{"lineNumber":4,"author":{"gitId":"adammangzijun"},"content":"        super(taskName,TaskType.TODO);","lastModifiedDate":"2023-09-01"},{"lineNumber":5,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":6,"author":{"gitId":"adammangzijun"},"content":"    @Override","lastModifiedDate":"2023-08-24"},{"lineNumber":7,"author":{"gitId":"adammangzijun"},"content":"    public String toString() {","lastModifiedDate":"2023-08-24"},{"lineNumber":8,"author":{"gitId":"adammangzijun"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-24"},{"lineNumber":9,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":10,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":11,"author":{"gitId":"adammangzijun"},"content":"    /**","lastModifiedDate":"2023-09-01"},{"lineNumber":12,"author":{"gitId":"adammangzijun"},"content":"     * Parse from string to a ToDo task","lastModifiedDate":"2023-09-01"},{"lineNumber":13,"author":{"gitId":"adammangzijun"},"content":"     *","lastModifiedDate":"2023-09-01"},{"lineNumber":14,"author":{"gitId":"adammangzijun"},"content":"     * @param line The String that is needed to parse into a ToDo Task","lastModifiedDate":"2023-09-01"},{"lineNumber":15,"author":{"gitId":"adammangzijun"},"content":"     */","lastModifiedDate":"2023-09-01"},{"lineNumber":16,"author":{"gitId":"adammangzijun"},"content":"    public static ToDo parseFromString(String line) {","lastModifiedDate":"2023-09-01"},{"lineNumber":17,"author":{"gitId":"adammangzijun"},"content":"        int firstBracketIndex \u003d line.indexOf(\u0027]\u0027);","lastModifiedDate":"2023-09-01"},{"lineNumber":18,"author":{"gitId":"adammangzijun"},"content":"        String description \u003d line.substring(firstBracketIndex + 5);","lastModifiedDate":"2023-09-02"},{"lineNumber":19,"author":{"gitId":"adammangzijun"},"content":"        String mark \u003d line.substring(firstBracketIndex + 2, firstBracketIndex + 3);","lastModifiedDate":"2023-09-01"},{"lineNumber":20,"author":{"gitId":"adammangzijun"},"content":"        ToDo task \u003d new ToDo(description);","lastModifiedDate":"2023-09-01"},{"lineNumber":21,"author":{"gitId":"adammangzijun"},"content":"","lastModifiedDate":"2023-08-24"},{"lineNumber":22,"author":{"gitId":"adammangzijun"},"content":"        // if task is initially marked done, then mark the task as done","lastModifiedDate":"2023-09-01"},{"lineNumber":23,"author":{"gitId":"adammangzijun"},"content":"        if (mark.equals(\"X\")) {","lastModifiedDate":"2023-09-01"},{"lineNumber":24,"author":{"gitId":"adammangzijun"},"content":"            task.markDone();","lastModifiedDate":"2023-09-01"},{"lineNumber":25,"author":{"gitId":"adammangzijun"},"content":"        }","lastModifiedDate":"2023-09-01"},{"lineNumber":26,"author":{"gitId":"adammangzijun"},"content":"        return task;","lastModifiedDate":"2023-09-01"},{"lineNumber":27,"author":{"gitId":"adammangzijun"},"content":"    }","lastModifiedDate":"2023-08-24"},{"lineNumber":28,"author":{"gitId":"adammangzijun"},"content":"}","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"adammangzijun":28}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"adammangzijun"},"content":"todo borrow book","lastModifiedDate":"2023-08-24"},{"lineNumber":2,"author":{"gitId":"adammangzijun"},"content":"bye","lastModifiedDate":"2023-08-24"}],"authorContributionMap":{"adammangzijun":2}}]
