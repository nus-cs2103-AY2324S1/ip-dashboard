[{"path":"README.md","fileType":"md","lines":[{"lineNumber":1,"author":{"gitId":"alvinlim277"},"content":"# Dook project template","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"This is a project template for a greenfield Java project. It\u0027s named after the Java mascot _Duke_. Given below are instructions on how to use it.","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"## Setting up in Intellij","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"Prerequisites: JDK 11, update Intellij to the most recent version.","lastModifiedDate":"2020-05-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"1. Open Intellij (if you are not in the welcome screen, click `File` \u003e `Close Project` to close the existing project first)","lastModifiedDate":"2021-01-17"},{"lineNumber":10,"author":{"gitId":"-"},"content":"1. Open the project into Intellij as follows:","lastModifiedDate":"2021-01-17"},{"lineNumber":11,"author":{"gitId":"-"},"content":"   1. Click `Open`.","lastModifiedDate":"2021-01-17"},{"lineNumber":12,"author":{"gitId":"-"},"content":"   1. Select the project directory, and click `OK`.","lastModifiedDate":"2021-01-17"},{"lineNumber":13,"author":{"gitId":"-"},"content":"   1. If there are any further prompts, accept the defaults.","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":"1. Configure the project to use **JDK 11** (not other versions) as explained in [here](https://www.jetbrains.com/help/idea/sdk.html#set-up-jdk).\u003cbr\u003e","lastModifiedDate":"2021-07-29"},{"lineNumber":15,"author":{"gitId":"-"},"content":"   In the same dialog, set the **Project language level** field to the `SDK default` option.","lastModifiedDate":"2021-07-29"},{"lineNumber":16,"author":{"gitId":"alvinlim277"},"content":"3. After that, locate the `src/main/java/Dook.java` file, right-click it, and choose `Run Dook.main()` (if the code editor is showing compile errors, try restarting the IDE). If the setup is correct, you should see something like the below as the output:","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"-"},"content":"   Hello from","lastModifiedDate":"2020-05-25"},{"lineNumber":19,"author":{"gitId":"-"},"content":"    ____        _        ","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"   |  _ \\ _   _| | _____ ","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"   | | | | | | | |/ / _ \\","lastModifiedDate":"2020-05-25"},{"lineNumber":22,"author":{"gitId":"-"},"content":"   | |_| | |_| |   \u003c  __/","lastModifiedDate":"2020-05-25"},{"lineNumber":23,"author":{"gitId":"-"},"content":"   |____/ \\__,_|_|\\_\\___|","lastModifiedDate":"2020-05-25"},{"lineNumber":24,"author":{"gitId":"-"},"content":"   ```","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":22,"alvinlim277":2}},{"path":"src/main/java/Deadline.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvinlim277"},"content":"public class Deadline extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"alvinlim277"},"content":"    protected String by;","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"alvinlim277"},"content":"    public Deadline(String description, String by) {","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"alvinlim277"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"alvinlim277"},"content":"        this.by \u003d by;","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"alvinlim277"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"alvinlim277"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"alvinlim277"},"content":"        return \"[D]\" + super.toString() + \" (by: \" + by + \")\";","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"alvinlim277"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"alvinlim277":13}},{"path":"src/main/java/Dook.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvinlim277"},"content":"import java.util.Scanner;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"alvinlim277"},"content":"public class Dook {","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"alvinlim277"},"content":"    public static String name \u003d \"Dook\";","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"alvinlim277"},"content":"    private enum Command{","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"alvinlim277"},"content":"        bye(\"Exits the program.\"), list(\"Displays the current tasks\"),","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"alvinlim277"},"content":"        mark(\"Marks selected task as done.\"), unmark(\"Marks selected task as undone.\"),","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"alvinlim277"},"content":"        todo(\"Adds a task.\"), deadline(\"Adds a task with a deadline.\"),","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"alvinlim277"},"content":"        event(\"Adds a task with a start and end time.\"), delete(\"Deletes selected task from list.\"),","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"alvinlim277"},"content":"        invalid(\"You entered an invalid command.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"alvinlim277"},"content":"        private final String desc;","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"alvinlim277"},"content":"        Command(String desc) {","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"alvinlim277"},"content":"            this.desc \u003d desc;","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"alvinlim277"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"alvinlim277"},"content":"        @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"alvinlim277"},"content":"        public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"alvinlim277"},"content":"            return this.name() + \": \" + this.desc;","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"alvinlim277"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"alvinlim277"},"content":"    private static Command parseKeyword(String keyword) {","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"alvinlim277"},"content":"         try {","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"alvinlim277"},"content":"            return Command.valueOf(keyword);","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"alvinlim277"},"content":"         } catch (IllegalArgumentException e){","lastModifiedDate":"2023-08-22"},{"lineNumber":27,"author":{"gitId":"alvinlim277"},"content":"            return Command.invalid;","lastModifiedDate":"2023-08-22"},{"lineNumber":28,"author":{"gitId":"alvinlim277"},"content":"         }","lastModifiedDate":"2023-08-22"},{"lineNumber":29,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":31,"author":{"gitId":"alvinlim277"},"content":"    public static void main(String[] args) {","lastModifiedDate":"2023-08-22"},{"lineNumber":32,"author":{"gitId":"alvinlim277"},"content":"        greetUser();","lastModifiedDate":"2023-08-22"},{"lineNumber":33,"author":{"gitId":"alvinlim277"},"content":"        Scanner sc \u003d new Scanner(System.in);","lastModifiedDate":"2023-08-22"},{"lineNumber":34,"author":{"gitId":"alvinlim277"},"content":"        String input;","lastModifiedDate":"2023-08-22"},{"lineNumber":35,"author":{"gitId":"alvinlim277"},"content":"        while (true) {","lastModifiedDate":"2023-08-22"},{"lineNumber":36,"author":{"gitId":"alvinlim277"},"content":"            input \u003d sc.nextLine();","lastModifiedDate":"2023-08-22"},{"lineNumber":37,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":38,"author":{"gitId":"alvinlim277"},"content":"            String[] tmp \u003d input.split(\" \", 2);","lastModifiedDate":"2023-08-22"},{"lineNumber":39,"author":{"gitId":"alvinlim277"},"content":"            Command command \u003d parseKeyword(tmp[0].trim());","lastModifiedDate":"2023-08-22"},{"lineNumber":40,"author":{"gitId":"alvinlim277"},"content":"            String body \u003d tmp.length \u003d\u003d 1 ? \"\" : tmp[1].trim();","lastModifiedDate":"2023-08-22"},{"lineNumber":41,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":42,"author":{"gitId":"alvinlim277"},"content":"            try {","lastModifiedDate":"2023-08-22"},{"lineNumber":43,"author":{"gitId":"alvinlim277"},"content":"                switch (command) {","lastModifiedDate":"2023-08-22"},{"lineNumber":44,"author":{"gitId":"alvinlim277"},"content":"                    case bye:","lastModifiedDate":"2023-08-22"},{"lineNumber":45,"author":{"gitId":"alvinlim277"},"content":"                        bidFarewell();","lastModifiedDate":"2023-08-22"},{"lineNumber":46,"author":{"gitId":"alvinlim277"},"content":"                        return;","lastModifiedDate":"2023-08-22"},{"lineNumber":47,"author":{"gitId":"alvinlim277"},"content":"                    case list:","lastModifiedDate":"2023-08-22"},{"lineNumber":48,"author":{"gitId":"alvinlim277"},"content":"                        displayList();","lastModifiedDate":"2023-08-22"},{"lineNumber":49,"author":{"gitId":"alvinlim277"},"content":"                        break;","lastModifiedDate":"2023-08-22"},{"lineNumber":50,"author":{"gitId":"alvinlim277"},"content":"                    case mark:","lastModifiedDate":"2023-08-22"},{"lineNumber":51,"author":{"gitId":"alvinlim277"},"content":"                        handleMark(body, true);","lastModifiedDate":"2023-08-22"},{"lineNumber":52,"author":{"gitId":"alvinlim277"},"content":"                        break;","lastModifiedDate":"2023-08-22"},{"lineNumber":53,"author":{"gitId":"alvinlim277"},"content":"                    case unmark:","lastModifiedDate":"2023-08-22"},{"lineNumber":54,"author":{"gitId":"alvinlim277"},"content":"                        handleMark(body, false);","lastModifiedDate":"2023-08-22"},{"lineNumber":55,"author":{"gitId":"alvinlim277"},"content":"                        break;","lastModifiedDate":"2023-08-22"},{"lineNumber":56,"author":{"gitId":"alvinlim277"},"content":"                    case todo:","lastModifiedDate":"2023-08-22"},{"lineNumber":57,"author":{"gitId":"alvinlim277"},"content":"                        handleToDo(body);","lastModifiedDate":"2023-08-22"},{"lineNumber":58,"author":{"gitId":"alvinlim277"},"content":"                        break;","lastModifiedDate":"2023-08-22"},{"lineNumber":59,"author":{"gitId":"alvinlim277"},"content":"                    case deadline:","lastModifiedDate":"2023-08-22"},{"lineNumber":60,"author":{"gitId":"alvinlim277"},"content":"                        handleDeadline(body);","lastModifiedDate":"2023-08-22"},{"lineNumber":61,"author":{"gitId":"alvinlim277"},"content":"                        break;","lastModifiedDate":"2023-08-22"},{"lineNumber":62,"author":{"gitId":"alvinlim277"},"content":"                    case event:","lastModifiedDate":"2023-08-22"},{"lineNumber":63,"author":{"gitId":"alvinlim277"},"content":"                        handleEvent(body);","lastModifiedDate":"2023-08-22"},{"lineNumber":64,"author":{"gitId":"alvinlim277"},"content":"                        break;","lastModifiedDate":"2023-08-22"},{"lineNumber":65,"author":{"gitId":"alvinlim277"},"content":"                    case delete:","lastModifiedDate":"2023-08-22"},{"lineNumber":66,"author":{"gitId":"alvinlim277"},"content":"                        handleDelete(body);","lastModifiedDate":"2023-08-22"},{"lineNumber":67,"author":{"gitId":"alvinlim277"},"content":"                        break;","lastModifiedDate":"2023-08-22"},{"lineNumber":68,"author":{"gitId":"alvinlim277"},"content":"                    case invalid:","lastModifiedDate":"2023-08-22"},{"lineNumber":69,"author":{"gitId":"alvinlim277"},"content":"                        displayHelp();","lastModifiedDate":"2023-08-22"},{"lineNumber":70,"author":{"gitId":"alvinlim277"},"content":"                        break;","lastModifiedDate":"2023-08-22"},{"lineNumber":71,"author":{"gitId":"alvinlim277"},"content":"                }","lastModifiedDate":"2023-08-22"},{"lineNumber":72,"author":{"gitId":"alvinlim277"},"content":"            } catch (DookException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":73,"author":{"gitId":"alvinlim277"},"content":"                printMessage(e.getMessage());","lastModifiedDate":"2023-08-22"},{"lineNumber":74,"author":{"gitId":"alvinlim277"},"content":"            }","lastModifiedDate":"2023-08-22"},{"lineNumber":75,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":76,"author":{"gitId":"alvinlim277"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":77,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":78,"author":{"gitId":"alvinlim277"},"content":"    private static void displayHelp() {","lastModifiedDate":"2023-08-22"},{"lineNumber":79,"author":{"gitId":"alvinlim277"},"content":"        StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2023-08-22"},{"lineNumber":80,"author":{"gitId":"alvinlim277"},"content":"        result.append(\"Available commands:\\n\");","lastModifiedDate":"2023-08-22"},{"lineNumber":81,"author":{"gitId":"alvinlim277"},"content":"        for (Command c : Command.values()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":82,"author":{"gitId":"alvinlim277"},"content":"            result.append(c.toString() + \"\\n\");","lastModifiedDate":"2023-08-22"},{"lineNumber":83,"author":{"gitId":"alvinlim277"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":84,"author":{"gitId":"alvinlim277"},"content":"        printMessage(result.toString());","lastModifiedDate":"2023-08-22"},{"lineNumber":85,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":86,"author":{"gitId":"alvinlim277"},"content":"    public static DookList dookList \u003d new DookList();","lastModifiedDate":"2023-08-22"},{"lineNumber":87,"author":{"gitId":"alvinlim277"},"content":"    private static void handleToDo(String body) throws DookException {","lastModifiedDate":"2023-08-22"},{"lineNumber":88,"author":{"gitId":"alvinlim277"},"content":"        if (body.isBlank()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":89,"author":{"gitId":"alvinlim277"},"content":"            throw new DookException(String.format(\"Usage: todo [name]\"));","lastModifiedDate":"2023-08-22"},{"lineNumber":90,"author":{"gitId":"alvinlim277"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":91,"author":{"gitId":"alvinlim277"},"content":"        Task task \u003d new Todo(body.trim());","lastModifiedDate":"2023-08-22"},{"lineNumber":92,"author":{"gitId":"alvinlim277"},"content":"        addToTaskList(task);","lastModifiedDate":"2023-08-22"},{"lineNumber":93,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":94,"author":{"gitId":"alvinlim277"},"content":"    private static void handleDeadline(String body) throws DookException {","lastModifiedDate":"2023-08-22"},{"lineNumber":95,"author":{"gitId":"alvinlim277"},"content":"        if (body.isBlank()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":96,"author":{"gitId":"alvinlim277"},"content":"            throw new DookException(String.format(\"Usage: deadline [name] /by [time].\"));","lastModifiedDate":"2023-08-22"},{"lineNumber":97,"author":{"gitId":"alvinlim277"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":98,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":99,"author":{"gitId":"alvinlim277"},"content":"        String[] tmp \u003d body.split(\"/by\", 2);","lastModifiedDate":"2023-08-22"},{"lineNumber":100,"author":{"gitId":"alvinlim277"},"content":"        if (tmp.length \u003c\u003d 1) {","lastModifiedDate":"2023-08-22"},{"lineNumber":101,"author":{"gitId":"alvinlim277"},"content":"            throw new DookException(String.format(\"Usage: deadline [name] /by [time].\"));","lastModifiedDate":"2023-08-22"},{"lineNumber":102,"author":{"gitId":"alvinlim277"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":103,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":104,"author":{"gitId":"alvinlim277"},"content":"        String desc \u003d tmp[0].trim();","lastModifiedDate":"2023-08-22"},{"lineNumber":105,"author":{"gitId":"alvinlim277"},"content":"        String by \u003d tmp[1].trim();","lastModifiedDate":"2023-08-22"},{"lineNumber":106,"author":{"gitId":"alvinlim277"},"content":"        if (desc.isBlank() || by.isBlank()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":107,"author":{"gitId":"alvinlim277"},"content":"            throw new DookException(String.format(\"Some information is missing!\\n\" +","lastModifiedDate":"2023-08-22"},{"lineNumber":108,"author":{"gitId":"alvinlim277"},"content":"                    \"Usage: deadline [name] /by [time].\"));","lastModifiedDate":"2023-08-22"},{"lineNumber":109,"author":{"gitId":"alvinlim277"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":110,"author":{"gitId":"alvinlim277"},"content":"        Task task \u003d new Deadline(desc, by);","lastModifiedDate":"2023-08-22"},{"lineNumber":111,"author":{"gitId":"alvinlim277"},"content":"        addToTaskList(task);","lastModifiedDate":"2023-08-22"},{"lineNumber":112,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":113,"author":{"gitId":"alvinlim277"},"content":"    private static void handleEvent(String body) throws DookException{","lastModifiedDate":"2023-08-22"},{"lineNumber":114,"author":{"gitId":"alvinlim277"},"content":"        if (body.isBlank()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":115,"author":{"gitId":"alvinlim277"},"content":"            throw new DookException(String.format(\"Usage: event [name] /from [start] /to [end].\"));","lastModifiedDate":"2023-08-22"},{"lineNumber":116,"author":{"gitId":"alvinlim277"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":117,"author":{"gitId":"alvinlim277"},"content":"        String[] tmp1 \u003d body.split(\"/from\", 2);","lastModifiedDate":"2023-08-22"},{"lineNumber":118,"author":{"gitId":"alvinlim277"},"content":"        if (tmp1.length \u003c\u003d 1) {","lastModifiedDate":"2023-08-22"},{"lineNumber":119,"author":{"gitId":"alvinlim277"},"content":"            throw new DookException(String.format(\"Usage: event [name] /from [start] /to [end].\"));","lastModifiedDate":"2023-08-22"},{"lineNumber":120,"author":{"gitId":"alvinlim277"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":121,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":122,"author":{"gitId":"alvinlim277"},"content":"        String desc \u003d tmp1[0].trim();","lastModifiedDate":"2023-08-22"},{"lineNumber":123,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":124,"author":{"gitId":"alvinlim277"},"content":"        String[] tmp2 \u003d tmp1[1].split(\"/to\", 2);","lastModifiedDate":"2023-08-22"},{"lineNumber":125,"author":{"gitId":"alvinlim277"},"content":"        if (tmp2.length \u003c\u003d 1) {","lastModifiedDate":"2023-08-22"},{"lineNumber":126,"author":{"gitId":"alvinlim277"},"content":"            throw new DookException(String.format(\"Usage: event [name] /from [start] /to [end].\"));","lastModifiedDate":"2023-08-22"},{"lineNumber":127,"author":{"gitId":"alvinlim277"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":128,"author":{"gitId":"alvinlim277"},"content":"        String from \u003d tmp2[0].trim();","lastModifiedDate":"2023-08-22"},{"lineNumber":129,"author":{"gitId":"alvinlim277"},"content":"        String to \u003d tmp2[1].trim();","lastModifiedDate":"2023-08-22"},{"lineNumber":130,"author":{"gitId":"alvinlim277"},"content":"        if (desc.isBlank() || from.isBlank() || to.isBlank()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":131,"author":{"gitId":"alvinlim277"},"content":"            throw new DookException(String.format(\"Some information is missing!\\n\" +","lastModifiedDate":"2023-08-22"},{"lineNumber":132,"author":{"gitId":"alvinlim277"},"content":"                    \"Usage: event [name] /from [start] /to [end].\"));","lastModifiedDate":"2023-08-22"},{"lineNumber":133,"author":{"gitId":"alvinlim277"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":134,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":135,"author":{"gitId":"alvinlim277"},"content":"        Task task \u003d new Event(desc, from, to);","lastModifiedDate":"2023-08-22"},{"lineNumber":136,"author":{"gitId":"alvinlim277"},"content":"        addToTaskList(task);","lastModifiedDate":"2023-08-22"},{"lineNumber":137,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":138,"author":{"gitId":"alvinlim277"},"content":"    private static void addToTaskList(Task task) {","lastModifiedDate":"2023-08-22"},{"lineNumber":139,"author":{"gitId":"alvinlim277"},"content":"        printMessage(dookList.addTask(task));","lastModifiedDate":"2023-08-22"},{"lineNumber":140,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":141,"author":{"gitId":"alvinlim277"},"content":"    private static void displayList() {","lastModifiedDate":"2023-08-22"},{"lineNumber":142,"author":{"gitId":"alvinlim277"},"content":"        printMessage(dookList.toString());","lastModifiedDate":"2023-08-22"},{"lineNumber":143,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":144,"author":{"gitId":"alvinlim277"},"content":"    private static void handleMark(String body, boolean value) throws DookException{","lastModifiedDate":"2023-08-22"},{"lineNumber":145,"author":{"gitId":"alvinlim277"},"content":"        int index;","lastModifiedDate":"2023-08-22"},{"lineNumber":146,"author":{"gitId":"alvinlim277"},"content":"        try {","lastModifiedDate":"2023-08-22"},{"lineNumber":147,"author":{"gitId":"alvinlim277"},"content":"            index \u003d Integer.parseInt(body.split(\" \", 2)[0]);","lastModifiedDate":"2023-08-22"},{"lineNumber":148,"author":{"gitId":"alvinlim277"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":149,"author":{"gitId":"alvinlim277"},"content":"            throw new DookException(String.format(\"Usage: %s [task number]\", value ? \"mark\" : \"unmark\"));","lastModifiedDate":"2023-08-22"},{"lineNumber":150,"author":{"gitId":"alvinlim277"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":151,"author":{"gitId":"alvinlim277"},"content":"        printMessage(dookList.markTask(index, value));","lastModifiedDate":"2023-08-22"},{"lineNumber":152,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":153,"author":{"gitId":"alvinlim277"},"content":"    private static void handleDelete(String body) throws DookException{","lastModifiedDate":"2023-08-22"},{"lineNumber":154,"author":{"gitId":"alvinlim277"},"content":"        int index;","lastModifiedDate":"2023-08-22"},{"lineNumber":155,"author":{"gitId":"alvinlim277"},"content":"        try {","lastModifiedDate":"2023-08-22"},{"lineNumber":156,"author":{"gitId":"alvinlim277"},"content":"            index \u003d Integer.parseInt(body.split(\" \", 2)[0]);","lastModifiedDate":"2023-08-22"},{"lineNumber":157,"author":{"gitId":"alvinlim277"},"content":"        } catch (NumberFormatException e) {","lastModifiedDate":"2023-08-22"},{"lineNumber":158,"author":{"gitId":"alvinlim277"},"content":"            throw new DookException(String.format(\"Usage: delete [task number]\"));","lastModifiedDate":"2023-08-22"},{"lineNumber":159,"author":{"gitId":"alvinlim277"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":160,"author":{"gitId":"alvinlim277"},"content":"        printMessage(dookList.deleteTask(index));","lastModifiedDate":"2023-08-22"},{"lineNumber":161,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":162,"author":{"gitId":"alvinlim277"},"content":"    private static void greetUser() {","lastModifiedDate":"2023-08-22"},{"lineNumber":163,"author":{"gitId":"alvinlim277"},"content":"        printMessage(String.format(\"%s here.\\nWhat can I do for you?\", name));","lastModifiedDate":"2023-08-22"},{"lineNumber":164,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":165,"author":{"gitId":"alvinlim277"},"content":"    public static void printMessage(String msg) {","lastModifiedDate":"2023-08-22"},{"lineNumber":166,"author":{"gitId":"alvinlim277"},"content":"        printDivider();","lastModifiedDate":"2023-08-22"},{"lineNumber":167,"author":{"gitId":"alvinlim277"},"content":"        System.out.println(msg);","lastModifiedDate":"2023-08-22"},{"lineNumber":168,"author":{"gitId":"alvinlim277"},"content":"        printDivider();","lastModifiedDate":"2023-08-22"},{"lineNumber":169,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":170,"author":{"gitId":"alvinlim277"},"content":"    public static void printDivider() {","lastModifiedDate":"2023-08-22"},{"lineNumber":171,"author":{"gitId":"alvinlim277"},"content":"        System.out.println(\"_______________________________________\");","lastModifiedDate":"2023-08-22"},{"lineNumber":172,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":173,"author":{"gitId":"alvinlim277"},"content":"    private static void bidFarewell() {","lastModifiedDate":"2023-08-22"},{"lineNumber":174,"author":{"gitId":"alvinlim277"},"content":"        printMessage(\"Goodbye.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":175,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":176,"author":{"gitId":"alvinlim277"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"alvinlim277":176}},{"path":"src/main/java/DookException.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvinlim277"},"content":"public class DookException extends Exception{","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"alvinlim277"},"content":"    public DookException(String message) {","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"alvinlim277"},"content":"        super(message);","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"alvinlim277"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"alvinlim277":5}},{"path":"src/main/java/DookList.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvinlim277"},"content":"import java.util.ArrayList;","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"alvinlim277"},"content":"public class DookList {","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"alvinlim277"},"content":"    private static ArrayList\u003cTask\u003e taskList \u003d new ArrayList\u003c\u003e();","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"alvinlim277"},"content":"    public String addTask(Task t) {","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"alvinlim277"},"content":"        taskList.add(t);","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"alvinlim277"},"content":"        return (String.format(\"added: %s.\\nNow you have %d %s in the list.\",","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"alvinlim277"},"content":"                t,","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"alvinlim277"},"content":"                taskList.size(),","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"alvinlim277"},"content":"                taskList.size() \u003d\u003d 1 ? \"task\" : \"tasks\"));","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"alvinlim277"},"content":"    public String deleteTask(int index) throws DookException {","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"alvinlim277"},"content":"        if (index \u003c\u003d 0 || index \u003e taskList.size()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"alvinlim277"},"content":"            throw new DookException(\"That task does not exist on the list.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"alvinlim277"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"alvinlim277"},"content":"        Task curr \u003d taskList.get(index - 1);","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"alvinlim277"},"content":"        taskList.remove(index - 1);","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"alvinlim277"},"content":"        String message \u003d String.format(\"Ok, I have removed this task:\\n   %s\", curr);","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"alvinlim277"},"content":"        message +\u003d String.format(\"\\nYou have %d %s in the list.\",","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"alvinlim277"},"content":"                taskList.size(),","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"alvinlim277"},"content":"                taskList.size() \u003d\u003d 1 ? \"task\" : \"tasks\");","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"alvinlim277"},"content":"        return message;","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"alvinlim277"},"content":"    public String markTask(int index, boolean value) throws DookException {","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"alvinlim277"},"content":"        if (index \u003c\u003d 0 || index \u003e taskList.size()) {","lastModifiedDate":"2023-08-22"},{"lineNumber":27,"author":{"gitId":"alvinlim277"},"content":"            throw new DookException(\"That task does not exist on the list.\");","lastModifiedDate":"2023-08-22"},{"lineNumber":28,"author":{"gitId":"alvinlim277"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":29,"author":{"gitId":"alvinlim277"},"content":"        Task curr \u003d taskList.get(index - 1);","lastModifiedDate":"2023-08-22"},{"lineNumber":30,"author":{"gitId":"alvinlim277"},"content":"        if (value) {","lastModifiedDate":"2023-08-22"},{"lineNumber":31,"author":{"gitId":"alvinlim277"},"content":"            curr.markAsDone();","lastModifiedDate":"2023-08-22"},{"lineNumber":32,"author":{"gitId":"alvinlim277"},"content":"        } else {","lastModifiedDate":"2023-08-22"},{"lineNumber":33,"author":{"gitId":"alvinlim277"},"content":"            curr.unmarkAsDone();","lastModifiedDate":"2023-08-22"},{"lineNumber":34,"author":{"gitId":"alvinlim277"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":35,"author":{"gitId":"alvinlim277"},"content":"        String message \u003d String.format(\"I have marked this task as %s:\\n   %s\",","lastModifiedDate":"2023-08-22"},{"lineNumber":36,"author":{"gitId":"alvinlim277"},"content":"                value ? \"done\" : \"not done yet\", curr);","lastModifiedDate":"2023-08-22"},{"lineNumber":37,"author":{"gitId":"alvinlim277"},"content":"        return message;","lastModifiedDate":"2023-08-22"},{"lineNumber":38,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":39,"author":{"gitId":"alvinlim277"},"content":"    @Override public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":40,"author":{"gitId":"alvinlim277"},"content":"        StringBuilder result \u003d new StringBuilder();","lastModifiedDate":"2023-08-22"},{"lineNumber":41,"author":{"gitId":"alvinlim277"},"content":"        for (int i \u003d 0; i \u003c taskList.size(); i++) {","lastModifiedDate":"2023-08-22"},{"lineNumber":42,"author":{"gitId":"alvinlim277"},"content":"            result.append(String.format(\"%d. %s\\n\", i + 1, taskList.get(i)));","lastModifiedDate":"2023-08-22"},{"lineNumber":43,"author":{"gitId":"alvinlim277"},"content":"        }","lastModifiedDate":"2023-08-22"},{"lineNumber":44,"author":{"gitId":"alvinlim277"},"content":"        return (result.toString() + String.format(\"You have %d %s in the list.\",","lastModifiedDate":"2023-08-22"},{"lineNumber":45,"author":{"gitId":"alvinlim277"},"content":"                taskList.size(),","lastModifiedDate":"2023-08-22"},{"lineNumber":46,"author":{"gitId":"alvinlim277"},"content":"                taskList.size() \u003d\u003d 1 ? \"task\" : \"tasks\"));","lastModifiedDate":"2023-08-22"},{"lineNumber":47,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":48,"author":{"gitId":"alvinlim277"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"alvinlim277":48}},{"path":"src/main/java/Event.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvinlim277"},"content":"public class Event extends Task{","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"alvinlim277"},"content":"    protected String from;","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"alvinlim277"},"content":"    protected String to;","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"alvinlim277"},"content":"    public Event(String description, String from, String to) {","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"alvinlim277"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"alvinlim277"},"content":"        this.from \u003d from;","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"alvinlim277"},"content":"        this.to \u003d to;","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"alvinlim277"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"alvinlim277"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"alvinlim277"},"content":"        return \"[E]\" + super.toString() + \" (from: \" + from + \" to: \" + to + \")\";","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"alvinlim277"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"alvinlim277":15}},{"path":"src/main/java/Task.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvinlim277"},"content":"public abstract class Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"alvinlim277"},"content":"    protected String description;","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"alvinlim277"},"content":"    protected boolean isDone;","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"alvinlim277"},"content":"    public Task(String description) {","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"alvinlim277"},"content":"        this.description \u003d description;","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"alvinlim277"},"content":"        this.isDone \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"alvinlim277"},"content":"    public String getStatusIcon() {","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"alvinlim277"},"content":"        return (isDone ? \"X\" : \" \"); // mark done task with X","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":13,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":14,"author":{"gitId":"alvinlim277"},"content":"    public void markAsDone() {","lastModifiedDate":"2023-08-22"},{"lineNumber":15,"author":{"gitId":"alvinlim277"},"content":"        isDone \u003d true;","lastModifiedDate":"2023-08-22"},{"lineNumber":16,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":17,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":18,"author":{"gitId":"alvinlim277"},"content":"    public void unmarkAsDone() {","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"alvinlim277"},"content":"        isDone \u003d false;","lastModifiedDate":"2023-08-22"},{"lineNumber":20,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":21,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":22,"author":{"gitId":"alvinlim277"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":23,"author":{"gitId":"alvinlim277"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":24,"author":{"gitId":"alvinlim277"},"content":"        return String.format(\"[%s] %s\", this.getStatusIcon(), this.description);","lastModifiedDate":"2023-08-22"},{"lineNumber":25,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":26,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":27,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":28,"author":{"gitId":"alvinlim277"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"alvinlim277":28}},{"path":"src/main/java/Todo.java","fileType":"java","lines":[{"lineNumber":1,"author":{"gitId":"alvinlim277"},"content":"public class Todo extends Task {","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"alvinlim277"},"content":"    public Todo(String description) {","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"alvinlim277"},"content":"        super(description);","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"alvinlim277"},"content":"","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"alvinlim277"},"content":"    @Override","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"alvinlim277"},"content":"    public String toString() {","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"alvinlim277"},"content":"        return \"[T]\" + super.toString();","lastModifiedDate":"2023-08-22"},{"lineNumber":11,"author":{"gitId":"alvinlim277"},"content":"    }","lastModifiedDate":"2023-08-22"},{"lineNumber":12,"author":{"gitId":"alvinlim277"},"content":"}","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"alvinlim277":12}},{"path":"text-ui-test/input.txt","fileType":"txt","lines":[{"lineNumber":1,"author":{"gitId":"alvinlim277"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":2,"author":{"gitId":"alvinlim277"},"content":"event abc /from 1 /to 2","lastModifiedDate":"2023-08-22"},{"lineNumber":3,"author":{"gitId":"alvinlim277"},"content":"todo def","lastModifiedDate":"2023-08-22"},{"lineNumber":4,"author":{"gitId":"alvinlim277"},"content":"deadline ghi /by 3","lastModifiedDate":"2023-08-22"},{"lineNumber":5,"author":{"gitId":"alvinlim277"},"content":"mark   1","lastModifiedDate":"2023-08-22"},{"lineNumber":6,"author":{"gitId":"alvinlim277"},"content":"list","lastModifiedDate":"2023-08-22"},{"lineNumber":7,"author":{"gitId":"alvinlim277"},"content":"mark 34","lastModifiedDate":"2023-08-22"},{"lineNumber":8,"author":{"gitId":"alvinlim277"},"content":"mark 2","lastModifiedDate":"2023-08-22"},{"lineNumber":9,"author":{"gitId":"alvinlim277"},"content":"unmark 1","lastModifiedDate":"2023-08-22"},{"lineNumber":10,"author":{"gitId":"alvinlim277"},"content":"bye","lastModifiedDate":"2023-08-22"}],"authorContributionMap":{"alvinlim277":10}},{"path":"text-ui-test/runtest.bat","fileType":"bat","lines":[{"lineNumber":1,"author":{"gitId":"-"},"content":"@ECHO OFF","lastModifiedDate":"2020-05-25"},{"lineNumber":2,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":3,"author":{"gitId":"-"},"content":"REM create bin directory if it doesn\u0027t exist","lastModifiedDate":"2020-05-25"},{"lineNumber":4,"author":{"gitId":"-"},"content":"if not exist ..\\bin mkdir ..\\bin","lastModifiedDate":"2020-05-25"},{"lineNumber":5,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":6,"author":{"gitId":"-"},"content":"REM delete output from previous run","lastModifiedDate":"2020-05-25"},{"lineNumber":7,"author":{"gitId":"-"},"content":"if exist ACTUAL.TXT del ACTUAL.TXT","lastModifiedDate":"2020-08-25"},{"lineNumber":8,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":9,"author":{"gitId":"-"},"content":"REM compile the code into the bin folder","lastModifiedDate":"2020-05-25"},{"lineNumber":10,"author":{"gitId":"-"},"content":"javac  -cp ..\\src\\main\\java -Xlint:none -d ..\\bin ..\\src\\main\\java\\*.java","lastModifiedDate":"2020-08-25"},{"lineNumber":11,"author":{"gitId":"-"},"content":"IF ERRORLEVEL 1 (","lastModifiedDate":"2020-05-25"},{"lineNumber":12,"author":{"gitId":"-"},"content":"    echo ********** BUILD FAILURE **********","lastModifiedDate":"2020-05-25"},{"lineNumber":13,"author":{"gitId":"-"},"content":"    exit /b 1","lastModifiedDate":"2020-05-25"},{"lineNumber":14,"author":{"gitId":"-"},"content":")","lastModifiedDate":"2020-05-25"},{"lineNumber":15,"author":{"gitId":"-"},"content":"REM no error here, errorlevel \u003d\u003d 0","lastModifiedDate":"2020-05-25"},{"lineNumber":16,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":17,"author":{"gitId":"-"},"content":"REM run the program, feed commands from input.txt file and redirect the output to the ACTUAL.TXT","lastModifiedDate":"2020-05-25"},{"lineNumber":18,"author":{"gitId":"alvinlim277"},"content":"java -classpath ..\\bin Dook \u003c input.txt \u003e ACTUAL.TXT","lastModifiedDate":"2023-08-22"},{"lineNumber":19,"author":{"gitId":"-"},"content":"","lastModifiedDate":"2020-05-25"},{"lineNumber":20,"author":{"gitId":"-"},"content":"REM compare the output to the expected output","lastModifiedDate":"2020-05-25"},{"lineNumber":21,"author":{"gitId":"-"},"content":"FC ACTUAL.TXT EXPECTED.TXT","lastModifiedDate":"2020-05-25"}],"authorContributionMap":{"-":20,"alvinlim277":1}}]
